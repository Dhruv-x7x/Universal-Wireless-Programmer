
receiver_signature_led_program.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010754  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000734  080108f4  080108f4  000118f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011028  08011028  00013170  2**0
                  CONTENTS
  4 .ARM          00000008  08011028  08011028  00012028  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011030  08011030  00013170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011030  08011030  00012030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011034  08011034  00012034  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000170  20000000  08011038  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005500  20000170  080111a8  00013170  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005670  080111a8  00013670  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00013170  2**0
                  CONTENTS, READONLY
 12 .debug_info   000225d5  00000000  00000000  000131a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005753  00000000  00000000  00035775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001448  00000000  00000000  0003aec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f9c  00000000  00000000  0003c310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dfd0  00000000  00000000  0003d2ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001eb9e  00000000  00000000  0005b27c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00095c29  00000000  00000000  00079e1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010fa43  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005bf0  00000000  00000000  0010fa88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  00115678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000170 	.word	0x20000170
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080108dc 	.word	0x080108dc

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000174 	.word	0x20000174
 80001dc:	080108dc 	.word	0x080108dc

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b96a 	b.w	800059c <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	460c      	mov	r4, r1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d14e      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ec:	4694      	mov	ip, r2
 80002ee:	458c      	cmp	ip, r1
 80002f0:	4686      	mov	lr, r0
 80002f2:	fab2 f282 	clz	r2, r2
 80002f6:	d962      	bls.n	80003be <__udivmoddi4+0xde>
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0320 	rsb	r3, r2, #32
 80002fe:	4091      	lsls	r1, r2
 8000300:	fa20 f303 	lsr.w	r3, r0, r3
 8000304:	fa0c fc02 	lsl.w	ip, ip, r2
 8000308:	4319      	orrs	r1, r3
 800030a:	fa00 fe02 	lsl.w	lr, r0, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f f68c 	uxth.w	r6, ip
 8000316:	fbb1 f4f7 	udiv	r4, r1, r7
 800031a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800031e:	fb07 1114 	mls	r1, r7, r4, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb04 f106 	mul.w	r1, r4, r6
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f104 30ff 	add.w	r0, r4, #4294967295
 8000336:	f080 8112 	bcs.w	800055e <__udivmoddi4+0x27e>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 810f 	bls.w	800055e <__udivmoddi4+0x27e>
 8000340:	3c02      	subs	r4, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a59      	subs	r1, r3, r1
 8000346:	fa1f f38e 	uxth.w	r3, lr
 800034a:	fbb1 f0f7 	udiv	r0, r1, r7
 800034e:	fb07 1110 	mls	r1, r7, r0, r1
 8000352:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000356:	fb00 f606 	mul.w	r6, r0, r6
 800035a:	429e      	cmp	r6, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x94>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f100 31ff 	add.w	r1, r0, #4294967295
 8000366:	f080 80fc 	bcs.w	8000562 <__udivmoddi4+0x282>
 800036a:	429e      	cmp	r6, r3
 800036c:	f240 80f9 	bls.w	8000562 <__udivmoddi4+0x282>
 8000370:	4463      	add	r3, ip
 8000372:	3802      	subs	r0, #2
 8000374:	1b9b      	subs	r3, r3, r6
 8000376:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037a:	2100      	movs	r1, #0
 800037c:	b11d      	cbz	r5, 8000386 <__udivmoddi4+0xa6>
 800037e:	40d3      	lsrs	r3, r2
 8000380:	2200      	movs	r2, #0
 8000382:	e9c5 3200 	strd	r3, r2, [r5]
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d905      	bls.n	800039a <__udivmoddi4+0xba>
 800038e:	b10d      	cbz	r5, 8000394 <__udivmoddi4+0xb4>
 8000390:	e9c5 0100 	strd	r0, r1, [r5]
 8000394:	2100      	movs	r1, #0
 8000396:	4608      	mov	r0, r1
 8000398:	e7f5      	b.n	8000386 <__udivmoddi4+0xa6>
 800039a:	fab3 f183 	clz	r1, r3
 800039e:	2900      	cmp	r1, #0
 80003a0:	d146      	bne.n	8000430 <__udivmoddi4+0x150>
 80003a2:	42a3      	cmp	r3, r4
 80003a4:	d302      	bcc.n	80003ac <__udivmoddi4+0xcc>
 80003a6:	4290      	cmp	r0, r2
 80003a8:	f0c0 80f0 	bcc.w	800058c <__udivmoddi4+0x2ac>
 80003ac:	1a86      	subs	r6, r0, r2
 80003ae:	eb64 0303 	sbc.w	r3, r4, r3
 80003b2:	2001      	movs	r0, #1
 80003b4:	2d00      	cmp	r5, #0
 80003b6:	d0e6      	beq.n	8000386 <__udivmoddi4+0xa6>
 80003b8:	e9c5 6300 	strd	r6, r3, [r5]
 80003bc:	e7e3      	b.n	8000386 <__udivmoddi4+0xa6>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	f040 8090 	bne.w	80004e4 <__udivmoddi4+0x204>
 80003c4:	eba1 040c 	sub.w	r4, r1, ip
 80003c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003cc:	fa1f f78c 	uxth.w	r7, ip
 80003d0:	2101      	movs	r1, #1
 80003d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003da:	fb08 4416 	mls	r4, r8, r6, r4
 80003de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e2:	fb07 f006 	mul.w	r0, r7, r6
 80003e6:	4298      	cmp	r0, r3
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x11c>
 80003ea:	eb1c 0303 	adds.w	r3, ip, r3
 80003ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x11a>
 80003f4:	4298      	cmp	r0, r3
 80003f6:	f200 80cd 	bhi.w	8000594 <__udivmoddi4+0x2b4>
 80003fa:	4626      	mov	r6, r4
 80003fc:	1a1c      	subs	r4, r3, r0
 80003fe:	fa1f f38e 	uxth.w	r3, lr
 8000402:	fbb4 f0f8 	udiv	r0, r4, r8
 8000406:	fb08 4410 	mls	r4, r8, r0, r4
 800040a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800040e:	fb00 f707 	mul.w	r7, r0, r7
 8000412:	429f      	cmp	r7, r3
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x148>
 8000416:	eb1c 0303 	adds.w	r3, ip, r3
 800041a:	f100 34ff 	add.w	r4, r0, #4294967295
 800041e:	d202      	bcs.n	8000426 <__udivmoddi4+0x146>
 8000420:	429f      	cmp	r7, r3
 8000422:	f200 80b0 	bhi.w	8000586 <__udivmoddi4+0x2a6>
 8000426:	4620      	mov	r0, r4
 8000428:	1bdb      	subs	r3, r3, r7
 800042a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800042e:	e7a5      	b.n	800037c <__udivmoddi4+0x9c>
 8000430:	f1c1 0620 	rsb	r6, r1, #32
 8000434:	408b      	lsls	r3, r1
 8000436:	fa22 f706 	lsr.w	r7, r2, r6
 800043a:	431f      	orrs	r7, r3
 800043c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000440:	fa04 f301 	lsl.w	r3, r4, r1
 8000444:	ea43 030c 	orr.w	r3, r3, ip
 8000448:	40f4      	lsrs	r4, r6
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	0c38      	lsrs	r0, r7, #16
 8000450:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000454:	fbb4 fef0 	udiv	lr, r4, r0
 8000458:	fa1f fc87 	uxth.w	ip, r7
 800045c:	fb00 441e 	mls	r4, r0, lr, r4
 8000460:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000464:	fb0e f90c 	mul.w	r9, lr, ip
 8000468:	45a1      	cmp	r9, r4
 800046a:	fa02 f201 	lsl.w	r2, r2, r1
 800046e:	d90a      	bls.n	8000486 <__udivmoddi4+0x1a6>
 8000470:	193c      	adds	r4, r7, r4
 8000472:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000476:	f080 8084 	bcs.w	8000582 <__udivmoddi4+0x2a2>
 800047a:	45a1      	cmp	r9, r4
 800047c:	f240 8081 	bls.w	8000582 <__udivmoddi4+0x2a2>
 8000480:	f1ae 0e02 	sub.w	lr, lr, #2
 8000484:	443c      	add	r4, r7
 8000486:	eba4 0409 	sub.w	r4, r4, r9
 800048a:	fa1f f983 	uxth.w	r9, r3
 800048e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000492:	fb00 4413 	mls	r4, r0, r3, r4
 8000496:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049a:	fb03 fc0c 	mul.w	ip, r3, ip
 800049e:	45a4      	cmp	ip, r4
 80004a0:	d907      	bls.n	80004b2 <__udivmoddi4+0x1d2>
 80004a2:	193c      	adds	r4, r7, r4
 80004a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004a8:	d267      	bcs.n	800057a <__udivmoddi4+0x29a>
 80004aa:	45a4      	cmp	ip, r4
 80004ac:	d965      	bls.n	800057a <__udivmoddi4+0x29a>
 80004ae:	3b02      	subs	r3, #2
 80004b0:	443c      	add	r4, r7
 80004b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004b6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ba:	eba4 040c 	sub.w	r4, r4, ip
 80004be:	429c      	cmp	r4, r3
 80004c0:	46ce      	mov	lr, r9
 80004c2:	469c      	mov	ip, r3
 80004c4:	d351      	bcc.n	800056a <__udivmoddi4+0x28a>
 80004c6:	d04e      	beq.n	8000566 <__udivmoddi4+0x286>
 80004c8:	b155      	cbz	r5, 80004e0 <__udivmoddi4+0x200>
 80004ca:	ebb8 030e 	subs.w	r3, r8, lr
 80004ce:	eb64 040c 	sbc.w	r4, r4, ip
 80004d2:	fa04 f606 	lsl.w	r6, r4, r6
 80004d6:	40cb      	lsrs	r3, r1
 80004d8:	431e      	orrs	r6, r3
 80004da:	40cc      	lsrs	r4, r1
 80004dc:	e9c5 6400 	strd	r6, r4, [r5]
 80004e0:	2100      	movs	r1, #0
 80004e2:	e750      	b.n	8000386 <__udivmoddi4+0xa6>
 80004e4:	f1c2 0320 	rsb	r3, r2, #32
 80004e8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f0:	fa24 f303 	lsr.w	r3, r4, r3
 80004f4:	4094      	lsls	r4, r2
 80004f6:	430c      	orrs	r4, r1
 80004f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000500:	fa1f f78c 	uxth.w	r7, ip
 8000504:	fbb3 f0f8 	udiv	r0, r3, r8
 8000508:	fb08 3110 	mls	r1, r8, r0, r3
 800050c:	0c23      	lsrs	r3, r4, #16
 800050e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000512:	fb00 f107 	mul.w	r1, r0, r7
 8000516:	4299      	cmp	r1, r3
 8000518:	d908      	bls.n	800052c <__udivmoddi4+0x24c>
 800051a:	eb1c 0303 	adds.w	r3, ip, r3
 800051e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000522:	d22c      	bcs.n	800057e <__udivmoddi4+0x29e>
 8000524:	4299      	cmp	r1, r3
 8000526:	d92a      	bls.n	800057e <__udivmoddi4+0x29e>
 8000528:	3802      	subs	r0, #2
 800052a:	4463      	add	r3, ip
 800052c:	1a5b      	subs	r3, r3, r1
 800052e:	b2a4      	uxth	r4, r4
 8000530:	fbb3 f1f8 	udiv	r1, r3, r8
 8000534:	fb08 3311 	mls	r3, r8, r1, r3
 8000538:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800053c:	fb01 f307 	mul.w	r3, r1, r7
 8000540:	42a3      	cmp	r3, r4
 8000542:	d908      	bls.n	8000556 <__udivmoddi4+0x276>
 8000544:	eb1c 0404 	adds.w	r4, ip, r4
 8000548:	f101 36ff 	add.w	r6, r1, #4294967295
 800054c:	d213      	bcs.n	8000576 <__udivmoddi4+0x296>
 800054e:	42a3      	cmp	r3, r4
 8000550:	d911      	bls.n	8000576 <__udivmoddi4+0x296>
 8000552:	3902      	subs	r1, #2
 8000554:	4464      	add	r4, ip
 8000556:	1ae4      	subs	r4, r4, r3
 8000558:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800055c:	e739      	b.n	80003d2 <__udivmoddi4+0xf2>
 800055e:	4604      	mov	r4, r0
 8000560:	e6f0      	b.n	8000344 <__udivmoddi4+0x64>
 8000562:	4608      	mov	r0, r1
 8000564:	e706      	b.n	8000374 <__udivmoddi4+0x94>
 8000566:	45c8      	cmp	r8, r9
 8000568:	d2ae      	bcs.n	80004c8 <__udivmoddi4+0x1e8>
 800056a:	ebb9 0e02 	subs.w	lr, r9, r2
 800056e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000572:	3801      	subs	r0, #1
 8000574:	e7a8      	b.n	80004c8 <__udivmoddi4+0x1e8>
 8000576:	4631      	mov	r1, r6
 8000578:	e7ed      	b.n	8000556 <__udivmoddi4+0x276>
 800057a:	4603      	mov	r3, r0
 800057c:	e799      	b.n	80004b2 <__udivmoddi4+0x1d2>
 800057e:	4630      	mov	r0, r6
 8000580:	e7d4      	b.n	800052c <__udivmoddi4+0x24c>
 8000582:	46d6      	mov	lr, sl
 8000584:	e77f      	b.n	8000486 <__udivmoddi4+0x1a6>
 8000586:	4463      	add	r3, ip
 8000588:	3802      	subs	r0, #2
 800058a:	e74d      	b.n	8000428 <__udivmoddi4+0x148>
 800058c:	4606      	mov	r6, r0
 800058e:	4623      	mov	r3, r4
 8000590:	4608      	mov	r0, r1
 8000592:	e70f      	b.n	80003b4 <__udivmoddi4+0xd4>
 8000594:	3e02      	subs	r6, #2
 8000596:	4463      	add	r3, ip
 8000598:	e730      	b.n	80003fc <__udivmoddi4+0x11c>
 800059a:	bf00      	nop

0800059c <__aeabi_idiv0>:
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop

080005a0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b088      	sub	sp, #32
 80005a4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005a6:	f107 030c 	add.w	r3, r7, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
 80005b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	60bb      	str	r3, [r7, #8]
 80005ba:	4b29      	ldr	r3, [pc, #164]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	4a28      	ldr	r2, [pc, #160]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c6:	4b26      	ldr	r3, [pc, #152]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	4b22      	ldr	r3, [pc, #136]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005da:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005e2:	4b1f      	ldr	r3, [pc, #124]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	603b      	str	r3, [r7, #0]
 80005f2:	4b1b      	ldr	r3, [pc, #108]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	4a1a      	ldr	r2, [pc, #104]	@ (8000660 <MX_GPIO_Init+0xc0>)
 80005f8:	f043 0302 	orr.w	r3, r3, #2
 80005fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fe:	4b18      	ldr	r3, [pc, #96]	@ (8000660 <MX_GPIO_Init+0xc0>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000602:	f003 0302 	and.w	r3, r3, #2
 8000606:	603b      	str	r3, [r7, #0]
 8000608:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5|GPIO_PIN_7, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	21a0      	movs	r1, #160	@ 0xa0
 800060e:	4815      	ldr	r0, [pc, #84]	@ (8000664 <MX_GPIO_Init+0xc4>)
 8000610:	f001 f8f4 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2108      	movs	r1, #8
 8000618:	4813      	ldr	r0, [pc, #76]	@ (8000668 <MX_GPIO_Init+0xc8>)
 800061a:	f001 f8ef 	bl	80017fc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800061e:	23a0      	movs	r3, #160	@ 0xa0
 8000620:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000622:	2301      	movs	r3, #1
 8000624:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062a:	2300      	movs	r3, #0
 800062c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	4619      	mov	r1, r3
 8000634:	480b      	ldr	r0, [pc, #44]	@ (8000664 <MX_GPIO_Init+0xc4>)
 8000636:	f000 ff5d 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800063a:	2308      	movs	r3, #8
 800063c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063e:	2301      	movs	r3, #1
 8000640:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000646:	2300      	movs	r3, #0
 8000648:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064a:	f107 030c 	add.w	r3, r7, #12
 800064e:	4619      	mov	r1, r3
 8000650:	4805      	ldr	r0, [pc, #20]	@ (8000668 <MX_GPIO_Init+0xc8>)
 8000652:	f000 ff4f 	bl	80014f4 <HAL_GPIO_Init>

}
 8000656:	bf00      	nop
 8000658:	3720      	adds	r7, #32
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400

0800066c <TurnOnLED>:

void process_upload_request(void);
void update_status_led(void);


void TurnOnLED(void) {
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET); // Turn LED ON
 8000670:	2201      	movs	r2, #1
 8000672:	2120      	movs	r1, #32
 8000674:	4802      	ldr	r0, [pc, #8]	@ (8000680 <TurnOnLED+0x14>)
 8000676:	f001 f8c1 	bl	80017fc <HAL_GPIO_WritePin>
}
 800067a:	bf00      	nop
 800067c:	bd80      	pop	{r7, pc}
 800067e:	bf00      	nop
 8000680:	40020000 	.word	0x40020000

08000684 <TurnOffLED>:

void TurnOffLED(void) {
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET); // Turn LED OFF
 8000688:	2200      	movs	r2, #0
 800068a:	2120      	movs	r1, #32
 800068c:	4802      	ldr	r0, [pc, #8]	@ (8000698 <TurnOffLED+0x14>)
 800068e:	f001 f8b5 	bl	80017fc <HAL_GPIO_WritePin>
}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40020000 	.word	0x40020000

0800069c <main>:

int main(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
  HAL_Init();
 80006a2:	f000 fced 	bl	8001080 <HAL_Init>
  SystemClock_Config();
 80006a6:	f000 f909 	bl	80008bc <SystemClock_Config>
  MX_GPIO_Init();
 80006aa:	f7ff ff79 	bl	80005a0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80006ae:	f000 fbbd 	bl	8000e2c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80006b2:	f000 fbe5 	bl	8000e80 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80006b6:	f00d fd63 	bl	800e180 <MX_USB_HOST_Init>

  HAL_UART_Init(&huart2);
 80006ba:	4827      	ldr	r0, [pc, #156]	@ (8000758 <main+0xbc>)
 80006bc:	f003 fe84 	bl	80043c8 <HAL_UART_Init>
  HAL_UART_Receive_IT(&huart1, &receivedData, 1);
 80006c0:	2201      	movs	r2, #1
 80006c2:	4926      	ldr	r1, [pc, #152]	@ (800075c <main+0xc0>)
 80006c4:	4826      	ldr	r0, [pc, #152]	@ (8000760 <main+0xc4>)
 80006c6:	f003 ff5a 	bl	800457e <HAL_UART_Receive_IT>
  while (1)
   {
       MX_USB_HOST_Process();  // Process USB tasks
 80006ca:	f00d fdaf 	bl	800e22c <MX_USB_HOST_Process>

       const char* detected_device = check_usb_device();
 80006ce:	f00d fdf7 	bl	800e2c0 <check_usb_device>
 80006d2:	6078      	str	r0, [r7, #4]

       strncpy(detected_board_name, detected_device, MAX_BOARD_NAME_LENGTH - 1);
 80006d4:	2231      	movs	r2, #49	@ 0x31
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	4822      	ldr	r0, [pc, #136]	@ (8000764 <main+0xc8>)
 80006da:	f00f fa67 	bl	800fbac <strncpy>
       detected_board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0'; // Ensure null termination
 80006de:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <main+0xc8>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

       if (strcmp(detected_board_name, "No Device") == 0) {
 80006e6:	4920      	ldr	r1, [pc, #128]	@ (8000768 <main+0xcc>)
 80006e8:	481e      	ldr	r0, [pc, #120]	@ (8000764 <main+0xc8>)
 80006ea:	f7ff fd79 	bl	80001e0 <strcmp>
 80006ee:	4603      	mov	r3, r0
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d102      	bne.n	80006fa <main+0x5e>
           TurnOffLED();  // No device detected, turn off LED
 80006f4:	f7ff ffc6 	bl	8000684 <TurnOffLED>
 80006f8:	e011      	b.n	800071e <main+0x82>
       }
       else {
           if (strcmp(detected_board_name, (char*)selected_board_name) == 0) {
 80006fa:	491c      	ldr	r1, [pc, #112]	@ (800076c <main+0xd0>)
 80006fc:	4819      	ldr	r0, [pc, #100]	@ (8000764 <main+0xc8>)
 80006fe:	f7ff fd6f 	bl	80001e0 <strcmp>
 8000702:	4603      	mov	r3, r0
 8000704:	2b00      	cmp	r3, #0
 8000706:	d105      	bne.n	8000714 <main+0x78>
//              printf("Detected board matches the selected board: %s\r\n", detected_board_name);
               TurnOnLED();  // ✅ Turn on LED for a matching board
 8000708:	f7ff ffb0 	bl	800066c <TurnOnLED>
               signature_match = 1;
 800070c:	4b18      	ldr	r3, [pc, #96]	@ (8000770 <main+0xd4>)
 800070e:	2201      	movs	r2, #1
 8000710:	601a      	str	r2, [r3, #0]
 8000712:	e004      	b.n	800071e <main+0x82>
           } else {
              // printf("Board mismatch! Detected: %s, Selected: %s\r\n", detected_board_name, (char*)selected_board_name);
               TurnOffLED();  // ❌ Turn off LED for mismatch
 8000714:	f7ff ffb6 	bl	8000684 <TurnOffLED>
               signature_match=0;
 8000718:	4b15      	ldr	r3, [pc, #84]	@ (8000770 <main+0xd4>)
 800071a:	2200      	movs	r2, #0
 800071c:	601a      	str	r2, [r3, #0]
           }
       }
       int upload_requested = 0;
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
       if(signature_match==1 && hex_received ==1 && upload_requested == 0){
 8000722:	4b13      	ldr	r3, [pc, #76]	@ (8000770 <main+0xd4>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d111      	bne.n	800074e <main+0xb2>
 800072a:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <main+0xd8>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	2b01      	cmp	r3, #1
 8000730:	d10d      	bne.n	800074e <main+0xb2>
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	2b00      	cmp	r3, #0
 8000736:	d10a      	bne.n	800074e <main+0xb2>
    	   HAL_UART_Transmit(&huart2, (uint8_t *)"upload_requested\r\n", 200, HAL_MAX_DELAY);
 8000738:	f04f 33ff 	mov.w	r3, #4294967295
 800073c:	22c8      	movs	r2, #200	@ 0xc8
 800073e:	490e      	ldr	r1, [pc, #56]	@ (8000778 <main+0xdc>)
 8000740:	4805      	ldr	r0, [pc, #20]	@ (8000758 <main+0xbc>)
 8000742:	f003 fe91 	bl	8004468 <HAL_UART_Transmit>
    	   process_upload_request();
 8000746:	f000 f819 	bl	800077c <process_upload_request>
    	   upload_requested = 1;
 800074a:	2301      	movs	r3, #1
 800074c:	603b      	str	r3, [r7, #0]
       }
       HAL_Delay(100);
 800074e:	2064      	movs	r0, #100	@ 0x64
 8000750:	f000 fd08 	bl	8001164 <HAL_Delay>
   {
 8000754:	e7b9      	b.n	80006ca <main+0x2e>
 8000756:	bf00      	nop
 8000758:	20004ac0 	.word	0x20004ac0
 800075c:	2000018c 	.word	0x2000018c
 8000760:	20004a78 	.word	0x20004a78
 8000764:	20000000 	.word	0x20000000
 8000768:	080108f4 	.word	0x080108f4
 800076c:	20000594 	.word	0x20000594
 8000770:	20004a70 	.word	0x20004a70
 8000774:	20004a6c 	.word	0x20004a6c
 8000778:	08010900 	.word	0x08010900

0800077c <process_upload_request>:
   }
}

void process_upload_request(void) //FSM implementation
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0

  ArduinoProgrammingState prog_state = get_programming_state();
 8000782:	f00e fa3d 	bl	800ec00 <get_programming_state>
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]

  while(prog_state != ARDUINO_PROG_COMPLETED)
 800078a:	e07b      	b.n	8000884 <process_upload_request+0x108>
  {
	  if(prog_state == ARDUINO_PROG_IDLE){
 800078c:	79fb      	ldrb	r3, [r7, #7]
 800078e:	2b00      	cmp	r3, #0
 8000790:	d109      	bne.n	80007a6 <process_upload_request+0x2a>
		  printf("IDLE STATE\r\n");
 8000792:	4840      	ldr	r0, [pc, #256]	@ (8000894 <process_upload_request+0x118>)
 8000794:	f00f f8ee 	bl	800f974 <puts>
		  trigger_arduino_bootloader();
 8000798:	f00d fe1e 	bl	800e3d8 <trigger_arduino_bootloader>
		  prog_state = get_programming_state();
 800079c:	f00e fa30 	bl	800ec00 <get_programming_state>
 80007a0:	4603      	mov	r3, r0
 80007a2:	71fb      	strb	r3, [r7, #7]
 80007a4:	e06e      	b.n	8000884 <process_upload_request+0x108>
	  }

	  else if (prog_state == ARDUINO_PROG_RESET_SENT) {
 80007a6:	79fb      	ldrb	r3, [r7, #7]
 80007a8:	2b01      	cmp	r3, #1
 80007aa:	d112      	bne.n	80007d2 <process_upload_request+0x56>
		  printf("RESET SENT\r\n");
 80007ac:	483a      	ldr	r0, [pc, #232]	@ (8000898 <process_upload_request+0x11c>)
 80007ae:	f00f f8e1 	bl	800f974 <puts>
          if(send_stk_command(STK_GET_SYNC, NULL, 0) == USBH_OK){
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2030      	movs	r0, #48	@ 0x30
 80007b8:	f00d fe32 	bl	800e420 <send_stk_command>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d002      	beq.n	80007c8 <process_upload_request+0x4c>
          } else{
        	  printf("command not sent");
 80007c2:	4836      	ldr	r0, [pc, #216]	@ (800089c <process_upload_request+0x120>)
 80007c4:	f00f f86e 	bl	800f8a4 <iprintf>
          }
		  prog_state = get_programming_state();
 80007c8:	f00e fa1a 	bl	800ec00 <get_programming_state>
 80007cc:	4603      	mov	r3, r0
 80007ce:	71fb      	strb	r3, [r7, #7]
 80007d0:	e058      	b.n	8000884 <process_upload_request+0x108>
	  }
	  else if(prog_state == ARDUINO_WAIT_RESPONSE){
 80007d2:	79fb      	ldrb	r3, [r7, #7]
 80007d4:	2b03      	cmp	r3, #3
 80007d6:	d10c      	bne.n	80007f2 <process_upload_request+0x76>
		  memset(CDC_RX_Buffer, 0, RX_BUFF_SIZE);
 80007d8:	2240      	movs	r2, #64	@ 0x40
 80007da:	2100      	movs	r1, #0
 80007dc:	4830      	ldr	r0, [pc, #192]	@ (80008a0 <process_upload_request+0x124>)
 80007de:	f00f f9dd 	bl	800fb9c <memset>
		  receive_stk_response(CDC_RX_Buffer);
 80007e2:	482f      	ldr	r0, [pc, #188]	@ (80008a0 <process_upload_request+0x124>)
 80007e4:	f00d fefc 	bl	800e5e0 <receive_stk_response>
		  prog_state = get_programming_state();
 80007e8:	f00e fa0a 	bl	800ec00 <get_programming_state>
 80007ec:	4603      	mov	r3, r0
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	e048      	b.n	8000884 <process_upload_request+0x108>

	  }
	  else if (prog_state == ARDUINO_PROG_BOOTLOADER_READY) {
 80007f2:	79fb      	ldrb	r3, [r7, #7]
 80007f4:	2b02      	cmp	r3, #2
 80007f6:	d10f      	bne.n	8000818 <process_upload_request+0x9c>
		  printf("Boothloader in SYNC\r\n");
 80007f8:	482a      	ldr	r0, [pc, #168]	@ (80008a4 <process_upload_request+0x128>)
 80007fa:	f00f f8bb 	bl	800f974 <puts>
          program_hex_file((const char*)hex_file, strlen((char*)hex_file));
 80007fe:	482a      	ldr	r0, [pc, #168]	@ (80008a8 <process_upload_request+0x12c>)
 8000800:	f7ff fcf8 	bl	80001f4 <strlen>
 8000804:	4603      	mov	r3, r0
 8000806:	4619      	mov	r1, r3
 8000808:	4827      	ldr	r0, [pc, #156]	@ (80008a8 <process_upload_request+0x12c>)
 800080a:	f00e f92d 	bl	800ea68 <program_hex_file>
		  prog_state = get_programming_state();
 800080e:	f00e f9f7 	bl	800ec00 <get_programming_state>
 8000812:	4603      	mov	r3, r0
 8000814:	71fb      	strb	r3, [r7, #7]
 8000816:	e035      	b.n	8000884 <process_upload_request+0x108>
	  }

	  else if (prog_state == ARDUINO_PROG_PROGRAMMED){
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b04      	cmp	r3, #4
 800081c:	d10f      	bne.n	800083e <process_upload_request+0xc2>
		  printf("Programmed\r\n");
 800081e:	4823      	ldr	r0, [pc, #140]	@ (80008ac <process_upload_request+0x130>)
 8000820:	f00f f8a8 	bl	800f974 <puts>
          verify_hex_file((const char*)hex_file, strlen((char*)hex_file));
 8000824:	4820      	ldr	r0, [pc, #128]	@ (80008a8 <process_upload_request+0x12c>)
 8000826:	f7ff fce5 	bl	80001f4 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	4619      	mov	r1, r3
 800082e:	481e      	ldr	r0, [pc, #120]	@ (80008a8 <process_upload_request+0x12c>)
 8000830:	f00e f9fe 	bl	800ec30 <verify_hex_file>
          prog_state = get_programming_state();
 8000834:	f00e f9e4 	bl	800ec00 <get_programming_state>
 8000838:	4603      	mov	r3, r0
 800083a:	71fb      	strb	r3, [r7, #7]
 800083c:	e022      	b.n	8000884 <process_upload_request+0x108>
	  }

	  else if (prog_state == ARDUINO_PROG_VERIFIED){
 800083e:	79fb      	ldrb	r3, [r7, #7]
 8000840:	2b05      	cmp	r3, #5
 8000842:	d109      	bne.n	8000858 <process_upload_request+0xdc>
		  printf("Verified\r\n");
 8000844:	481a      	ldr	r0, [pc, #104]	@ (80008b0 <process_upload_request+0x134>)
 8000846:	f00f f895 	bl	800f974 <puts>
          reset_programming_state();
 800084a:	f00e f9e5 	bl	800ec18 <reset_programming_state>
          prog_state = get_programming_state();
 800084e:	f00e f9d7 	bl	800ec00 <get_programming_state>
 8000852:	4603      	mov	r3, r0
 8000854:	71fb      	strb	r3, [r7, #7]
 8000856:	e015      	b.n	8000884 <process_upload_request+0x108>
	  }

	  else if (prog_state == ARDUINO_PROG_ERROR){
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	2b07      	cmp	r3, #7
 800085c:	d109      	bne.n	8000872 <process_upload_request+0xf6>
		  printf("Error Programming\r\n");
 800085e:	4815      	ldr	r0, [pc, #84]	@ (80008b4 <process_upload_request+0x138>)
 8000860:	f00f f888 	bl	800f974 <puts>
          reset_programming_state();
 8000864:	f00e f9d8 	bl	800ec18 <reset_programming_state>
          prog_state = get_programming_state();
 8000868:	f00e f9ca 	bl	800ec00 <get_programming_state>
 800086c:	4603      	mov	r3, r0
 800086e:	71fb      	strb	r3, [r7, #7]
 8000870:	e008      	b.n	8000884 <process_upload_request+0x108>
	  }

	  else {
		  printf("Unknown state\r\n");
 8000872:	4811      	ldr	r0, [pc, #68]	@ (80008b8 <process_upload_request+0x13c>)
 8000874:	f00f f87e 	bl	800f974 <puts>
		  reset_programming_state();
 8000878:	f00e f9ce 	bl	800ec18 <reset_programming_state>
		  prog_state = get_programming_state();
 800087c:	f00e f9c0 	bl	800ec00 <get_programming_state>
 8000880:	4603      	mov	r3, r0
 8000882:	71fb      	strb	r3, [r7, #7]
  while(prog_state != ARDUINO_PROG_COMPLETED)
 8000884:	79fb      	ldrb	r3, [r7, #7]
 8000886:	2b06      	cmp	r3, #6
 8000888:	d180      	bne.n	800078c <process_upload_request+0x10>
	  }

  }

}
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	3708      	adds	r7, #8
 8000890:	46bd      	mov	sp, r7
 8000892:	bd80      	pop	{r7, pc}
 8000894:	08010914 	.word	0x08010914
 8000898:	08010920 	.word	0x08010920
 800089c:	0801092c 	.word	0x0801092c
 80008a0:	20004a28 	.word	0x20004a28
 80008a4:	08010940 	.word	0x08010940
 80008a8:	200005c8 	.word	0x200005c8
 80008ac:	08010958 	.word	0x08010958
 80008b0:	08010964 	.word	0x08010964
 80008b4:	08010970 	.word	0x08010970
 80008b8:	08010984 	.word	0x08010984

080008bc <SystemClock_Config>:



void SystemClock_Config(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b094      	sub	sp, #80	@ 0x50
 80008c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008c2:	f107 0320 	add.w	r3, r7, #32
 80008c6:	2230      	movs	r2, #48	@ 0x30
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f00f f966 	bl	800fb9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008d0:	f107 030c 	add.w	r3, r7, #12
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
 80008da:	609a      	str	r2, [r3, #8]
 80008dc:	60da      	str	r2, [r3, #12]
 80008de:	611a      	str	r2, [r3, #16]

  __HAL_RCC_PWR_CLK_ENABLE();
 80008e0:	2300      	movs	r3, #0
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	4b28      	ldr	r3, [pc, #160]	@ (8000988 <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e8:	4a27      	ldr	r2, [pc, #156]	@ (8000988 <SystemClock_Config+0xcc>)
 80008ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80008f0:	4b25      	ldr	r3, [pc, #148]	@ (8000988 <SystemClock_Config+0xcc>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008f4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008f8:	60bb      	str	r3, [r7, #8]
 80008fa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80008fc:	2300      	movs	r3, #0
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	4b22      	ldr	r3, [pc, #136]	@ (800098c <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000908:	4a20      	ldr	r2, [pc, #128]	@ (800098c <SystemClock_Config+0xd0>)
 800090a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800090e:	6013      	str	r3, [r2, #0]
 8000910:	4b1e      	ldr	r3, [pc, #120]	@ (800098c <SystemClock_Config+0xd0>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000918:	607b      	str	r3, [r7, #4]
 800091a:	687b      	ldr	r3, [r7, #4]

  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800091c:	2301      	movs	r3, #1
 800091e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000920:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000924:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000926:	2302      	movs	r3, #2
 8000928:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800092a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800092e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000930:	2304      	movs	r3, #4
 8000932:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000934:	2348      	movs	r3, #72	@ 0x48
 8000936:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000938:	2302      	movs	r3, #2
 800093a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800093c:	2303      	movs	r3, #3
 800093e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000940:	f107 0320 	add.w	r3, r7, #32
 8000944:	4618      	mov	r0, r3
 8000946:	f003 f8a7 	bl	8003a98 <HAL_RCC_OscConfig>
 800094a:	4603      	mov	r3, r0
 800094c:	2b00      	cmp	r3, #0
 800094e:	d001      	beq.n	8000954 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000950:	f000 f928 	bl	8000ba4 <Error_Handler>
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000954:	230f      	movs	r3, #15
 8000956:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000958:	2302      	movs	r3, #2
 800095a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800095c:	2300      	movs	r3, #0
 800095e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000960:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000964:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000966:	2300      	movs	r3, #0
 8000968:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	2102      	movs	r1, #2
 8000970:	4618      	mov	r0, r3
 8000972:	f003 fb09 	bl	8003f88 <HAL_RCC_ClockConfig>
 8000976:	4603      	mov	r3, r0
 8000978:	2b00      	cmp	r3, #0
 800097a:	d001      	beq.n	8000980 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800097c:	f000 f912 	bl	8000ba4 <Error_Handler>
  }
}
 8000980:	bf00      	nop
 8000982:	3750      	adds	r7, #80	@ 0x50
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40007000 	.word	0x40007000

08000990 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b088      	sub	sp, #32
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1)  // Check if the interrupt is from USART1
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	4a76      	ldr	r2, [pc, #472]	@ (8000b78 <HAL_UART_RxCpltCallback+0x1e8>)
 800099e:	4293      	cmp	r3, r2
 80009a0:	f040 80e6 	bne.w	8000b70 <HAL_UART_RxCpltCallback+0x1e0>
    {
        receivedBuffer[bufferIndex++] = receivedData;
 80009a4:	4b75      	ldr	r3, [pc, #468]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 80009a6:	881b      	ldrh	r3, [r3, #0]
 80009a8:	1c5a      	adds	r2, r3, #1
 80009aa:	b291      	uxth	r1, r2
 80009ac:	4a73      	ldr	r2, [pc, #460]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 80009ae:	8011      	strh	r1, [r2, #0]
 80009b0:	461a      	mov	r2, r3
 80009b2:	4b73      	ldr	r3, [pc, #460]	@ (8000b80 <HAL_UART_RxCpltCallback+0x1f0>)
 80009b4:	7819      	ldrb	r1, [r3, #0]
 80009b6:	4b73      	ldr	r3, [pc, #460]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 80009b8:	5499      	strb	r1, [r3, r2]

        if (bufferIndex == BUFFER_SIZE)
 80009ba:	4b70      	ldr	r3, [pc, #448]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 80009bc:	881b      	ldrh	r3, [r3, #0]
 80009be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80009c2:	d123      	bne.n	8000a0c <HAL_UART_RxCpltCallback+0x7c>
        {

            if(count == 1)
 80009c4:	4b70      	ldr	r3, [pc, #448]	@ (8000b88 <HAL_UART_RxCpltCallback+0x1f8>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	2b01      	cmp	r3, #1
 80009ca:	d119      	bne.n	8000a00 <HAL_UART_RxCpltCallback+0x70>
            {
            	for (int i=0; i<=(bufferIndex);i++)
 80009cc:	2300      	movs	r3, #0
 80009ce:	61fb      	str	r3, [r7, #28]
 80009d0:	e00f      	b.n	80009f2 <HAL_UART_RxCpltCallback+0x62>
            	{
            		hex_file[hexIndex++] = receivedBuffer[i];
 80009d2:	4b6e      	ldr	r3, [pc, #440]	@ (8000b8c <HAL_UART_RxCpltCallback+0x1fc>)
 80009d4:	881b      	ldrh	r3, [r3, #0]
 80009d6:	1c5a      	adds	r2, r3, #1
 80009d8:	b291      	uxth	r1, r2
 80009da:	4a6c      	ldr	r2, [pc, #432]	@ (8000b8c <HAL_UART_RxCpltCallback+0x1fc>)
 80009dc:	8011      	strh	r1, [r2, #0]
 80009de:	4619      	mov	r1, r3
 80009e0:	4a68      	ldr	r2, [pc, #416]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 80009e2:	69fb      	ldr	r3, [r7, #28]
 80009e4:	4413      	add	r3, r2
 80009e6:	781a      	ldrb	r2, [r3, #0]
 80009e8:	4b69      	ldr	r3, [pc, #420]	@ (8000b90 <HAL_UART_RxCpltCallback+0x200>)
 80009ea:	545a      	strb	r2, [r3, r1]
            	for (int i=0; i<=(bufferIndex);i++)
 80009ec:	69fb      	ldr	r3, [r7, #28]
 80009ee:	3301      	adds	r3, #1
 80009f0:	61fb      	str	r3, [r7, #28]
 80009f2:	4b62      	ldr	r3, [pc, #392]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	69fb      	ldr	r3, [r7, #28]
 80009fa:	4293      	cmp	r3, r2
 80009fc:	dde9      	ble.n	80009d2 <HAL_UART_RxCpltCallback+0x42>
 80009fe:	e002      	b.n	8000a06 <HAL_UART_RxCpltCallback+0x76>
            	}
            }
            else
            	hex_received = 0;
 8000a00:	4b64      	ldr	r3, [pc, #400]	@ (8000b94 <HAL_UART_RxCpltCallback+0x204>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]

            bufferIndex = 0;
 8000a06:	4b5d      	ldr	r3, [pc, #372]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	801a      	strh	r2, [r3, #0]
        }

        if (receivedBuffer[bufferIndex - 4] == 'E' && receivedBuffer[bufferIndex - 3] == 'N' && receivedBuffer[bufferIndex - 2] == 'D' && receivedBuffer[bufferIndex - 1] == '1') {
 8000a0c:	4b5b      	ldr	r3, [pc, #364]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a0e:	881b      	ldrh	r3, [r3, #0]
 8000a10:	3b04      	subs	r3, #4
 8000a12:	4a5c      	ldr	r2, [pc, #368]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a14:	5cd3      	ldrb	r3, [r2, r3]
 8000a16:	2b45      	cmp	r3, #69	@ 0x45
 8000a18:	d142      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x110>
 8000a1a:	4b58      	ldr	r3, [pc, #352]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a1c:	881b      	ldrh	r3, [r3, #0]
 8000a1e:	3b03      	subs	r3, #3
 8000a20:	4a58      	ldr	r2, [pc, #352]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a22:	5cd3      	ldrb	r3, [r2, r3]
 8000a24:	2b4e      	cmp	r3, #78	@ 0x4e
 8000a26:	d13b      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x110>
 8000a28:	4b54      	ldr	r3, [pc, #336]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	3b02      	subs	r3, #2
 8000a2e:	4a55      	ldr	r2, [pc, #340]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a30:	5cd3      	ldrb	r3, [r2, r3]
 8000a32:	2b44      	cmp	r3, #68	@ 0x44
 8000a34:	d134      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x110>
 8000a36:	4b51      	ldr	r3, [pc, #324]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a38:	881b      	ldrh	r3, [r3, #0]
 8000a3a:	3b01      	subs	r3, #1
 8000a3c:	4a51      	ldr	r2, [pc, #324]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a3e:	5cd3      	ldrb	r3, [r2, r3]
 8000a40:	2b31      	cmp	r3, #49	@ 0x31
 8000a42:	d12d      	bne.n	8000aa0 <HAL_UART_RxCpltCallback+0x110>
        	for (int i=0; i<=(bufferIndex-5);i++)
 8000a44:	2300      	movs	r3, #0
 8000a46:	61bb      	str	r3, [r7, #24]
 8000a48:	e00b      	b.n	8000a62 <HAL_UART_RxCpltCallback+0xd2>
        	{
        	  selected_board_name[i] = receivedBuffer[i];
 8000a4a:	4a4e      	ldr	r2, [pc, #312]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a4c:	69bb      	ldr	r3, [r7, #24]
 8000a4e:	4413      	add	r3, r2
 8000a50:	7819      	ldrb	r1, [r3, #0]
 8000a52:	4a51      	ldr	r2, [pc, #324]	@ (8000b98 <HAL_UART_RxCpltCallback+0x208>)
 8000a54:	69bb      	ldr	r3, [r7, #24]
 8000a56:	4413      	add	r3, r2
 8000a58:	460a      	mov	r2, r1
 8000a5a:	701a      	strb	r2, [r3, #0]
        	for (int i=0; i<=(bufferIndex-5);i++)
 8000a5c:	69bb      	ldr	r3, [r7, #24]
 8000a5e:	3301      	adds	r3, #1
 8000a60:	61bb      	str	r3, [r7, #24]
 8000a62:	4b46      	ldr	r3, [pc, #280]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a64:	881b      	ldrh	r3, [r3, #0]
 8000a66:	3b04      	subs	r3, #4
 8000a68:	69ba      	ldr	r2, [r7, #24]
 8000a6a:	429a      	cmp	r2, r3
 8000a6c:	dbed      	blt.n	8000a4a <HAL_UART_RxCpltCallback+0xba>
        	}
        	for(int i=0; i<=(bufferIndex); i++)
 8000a6e:	2300      	movs	r3, #0
 8000a70:	617b      	str	r3, [r7, #20]
 8000a72:	e009      	b.n	8000a88 <HAL_UART_RxCpltCallback+0xf8>
        	    {
        	     receivedBuffer[bufferIndex] = "";
 8000a74:	4949      	ldr	r1, [pc, #292]	@ (8000b9c <HAL_UART_RxCpltCallback+0x20c>)
 8000a76:	4b41      	ldr	r3, [pc, #260]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a78:	881b      	ldrh	r3, [r3, #0]
 8000a7a:	461a      	mov	r2, r3
 8000a7c:	b2c9      	uxtb	r1, r1
 8000a7e:	4b41      	ldr	r3, [pc, #260]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000a80:	5499      	strb	r1, [r3, r2]
        	for(int i=0; i<=(bufferIndex); i++)
 8000a82:	697b      	ldr	r3, [r7, #20]
 8000a84:	3301      	adds	r3, #1
 8000a86:	617b      	str	r3, [r7, #20]
 8000a88:	4b3c      	ldr	r3, [pc, #240]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a8a:	881b      	ldrh	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	697b      	ldr	r3, [r7, #20]
 8000a90:	4293      	cmp	r3, r2
 8000a92:	ddef      	ble.n	8000a74 <HAL_UART_RxCpltCallback+0xe4>
        	     }
        	     bufferIndex=0;
 8000a94:	4b39      	ldr	r3, [pc, #228]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	801a      	strh	r2, [r3, #0]
        	     count =1;
 8000a9a:	4b3b      	ldr	r3, [pc, #236]	@ (8000b88 <HAL_UART_RxCpltCallback+0x1f8>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	601a      	str	r2, [r3, #0]
        }

        //Detecting end
        if (receivedBuffer[bufferIndex - 4] == 'E' && receivedBuffer[bufferIndex - 3] == 'N' && receivedBuffer[bufferIndex - 2] == 'D' && receivedBuffer[bufferIndex - 1] == '2') {
 8000aa0:	4b36      	ldr	r3, [pc, #216]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000aa2:	881b      	ldrh	r3, [r3, #0]
 8000aa4:	3b04      	subs	r3, #4
 8000aa6:	4a37      	ldr	r2, [pc, #220]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000aa8:	5cd3      	ldrb	r3, [r2, r3]
 8000aaa:	2b45      	cmp	r3, #69	@ 0x45
 8000aac:	d15b      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0x1d6>
 8000aae:	4b33      	ldr	r3, [pc, #204]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000ab0:	881b      	ldrh	r3, [r3, #0]
 8000ab2:	3b03      	subs	r3, #3
 8000ab4:	4a33      	ldr	r2, [pc, #204]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000ab6:	5cd3      	ldrb	r3, [r2, r3]
 8000ab8:	2b4e      	cmp	r3, #78	@ 0x4e
 8000aba:	d154      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0x1d6>
 8000abc:	4b2f      	ldr	r3, [pc, #188]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000abe:	881b      	ldrh	r3, [r3, #0]
 8000ac0:	3b02      	subs	r3, #2
 8000ac2:	4a30      	ldr	r2, [pc, #192]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000ac4:	5cd3      	ldrb	r3, [r2, r3]
 8000ac6:	2b44      	cmp	r3, #68	@ 0x44
 8000ac8:	d14d      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0x1d6>
 8000aca:	4b2c      	ldr	r3, [pc, #176]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000acc:	881b      	ldrh	r3, [r3, #0]
 8000ace:	3b01      	subs	r3, #1
 8000ad0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000ad2:	5cd3      	ldrb	r3, [r2, r3]
 8000ad4:	2b32      	cmp	r3, #50	@ 0x32
 8000ad6:	d146      	bne.n	8000b66 <HAL_UART_RxCpltCallback+0x1d6>
        	for (int i=0; i<=(bufferIndex-5);i++)
 8000ad8:	2300      	movs	r3, #0
 8000ada:	613b      	str	r3, [r7, #16]
 8000adc:	e00f      	b.n	8000afe <HAL_UART_RxCpltCallback+0x16e>
        	{
        	  hex_file[hexIndex++] = receivedBuffer[i];
 8000ade:	4b2b      	ldr	r3, [pc, #172]	@ (8000b8c <HAL_UART_RxCpltCallback+0x1fc>)
 8000ae0:	881b      	ldrh	r3, [r3, #0]
 8000ae2:	1c5a      	adds	r2, r3, #1
 8000ae4:	b291      	uxth	r1, r2
 8000ae6:	4a29      	ldr	r2, [pc, #164]	@ (8000b8c <HAL_UART_RxCpltCallback+0x1fc>)
 8000ae8:	8011      	strh	r1, [r2, #0]
 8000aea:	4619      	mov	r1, r3
 8000aec:	4a25      	ldr	r2, [pc, #148]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000aee:	693b      	ldr	r3, [r7, #16]
 8000af0:	4413      	add	r3, r2
 8000af2:	781a      	ldrb	r2, [r3, #0]
 8000af4:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <HAL_UART_RxCpltCallback+0x200>)
 8000af6:	545a      	strb	r2, [r3, r1]
        	for (int i=0; i<=(bufferIndex-5);i++)
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	3301      	adds	r3, #1
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b1f      	ldr	r3, [pc, #124]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000b00:	881b      	ldrh	r3, [r3, #0]
 8000b02:	3b04      	subs	r3, #4
 8000b04:	693a      	ldr	r2, [r7, #16]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	dbe9      	blt.n	8000ade <HAL_UART_RxCpltCallback+0x14e>
        	}
        	hex_received = 1;
 8000b0a:	4b22      	ldr	r3, [pc, #136]	@ (8000b94 <HAL_UART_RxCpltCallback+0x204>)
 8000b0c:	2201      	movs	r2, #1
 8000b0e:	601a      	str	r2, [r3, #0]
        	for(int i=0;i<=HEX_LENGTH;i++)
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e009      	b.n	8000b2a <HAL_UART_RxCpltCallback+0x19a>
        	        	{
        	        		hex_file[i] = "";
 8000b16:	4b21      	ldr	r3, [pc, #132]	@ (8000b9c <HAL_UART_RxCpltCallback+0x20c>)
 8000b18:	b2d9      	uxtb	r1, r3
 8000b1a:	4a1d      	ldr	r2, [pc, #116]	@ (8000b90 <HAL_UART_RxCpltCallback+0x200>)
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	4413      	add	r3, r2
 8000b20:	460a      	mov	r2, r1
 8000b22:	701a      	strb	r2, [r3, #0]
        	for(int i=0;i<=HEX_LENGTH;i++)
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f244 425c 	movw	r2, #17500	@ 0x445c
 8000b30:	4293      	cmp	r3, r2
 8000b32:	ddf0      	ble.n	8000b16 <HAL_UART_RxCpltCallback+0x186>
        	        	}
        	 for(int i=0; i<=(bufferIndex); i++)
 8000b34:	2300      	movs	r3, #0
 8000b36:	60bb      	str	r3, [r7, #8]
 8000b38:	e009      	b.n	8000b4e <HAL_UART_RxCpltCallback+0x1be>
        	  {
        	   	receivedBuffer[bufferIndex]="";
 8000b3a:	4918      	ldr	r1, [pc, #96]	@ (8000b9c <HAL_UART_RxCpltCallback+0x20c>)
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000b3e:	881b      	ldrh	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	b2c9      	uxtb	r1, r1
 8000b44:	4b0f      	ldr	r3, [pc, #60]	@ (8000b84 <HAL_UART_RxCpltCallback+0x1f4>)
 8000b46:	5499      	strb	r1, [r3, r2]
        	 for(int i=0; i<=(bufferIndex); i++)
 8000b48:	68bb      	ldr	r3, [r7, #8]
 8000b4a:	3301      	adds	r3, #1
 8000b4c:	60bb      	str	r3, [r7, #8]
 8000b4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000b50:	881b      	ldrh	r3, [r3, #0]
 8000b52:	461a      	mov	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	4293      	cmp	r3, r2
 8000b58:	ddef      	ble.n	8000b3a <HAL_UART_RxCpltCallback+0x1aa>
        	   }
        	   bufferIndex=0;
 8000b5a:	4b08      	ldr	r3, [pc, #32]	@ (8000b7c <HAL_UART_RxCpltCallback+0x1ec>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	801a      	strh	r2, [r3, #0]
        	   count=0;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <HAL_UART_RxCpltCallback+0x1f8>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]

        }
        HAL_UART_Receive_IT(&huart1, &receivedData, 1);
 8000b66:	2201      	movs	r2, #1
 8000b68:	4905      	ldr	r1, [pc, #20]	@ (8000b80 <HAL_UART_RxCpltCallback+0x1f0>)
 8000b6a:	480d      	ldr	r0, [pc, #52]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x210>)
 8000b6c:	f003 fd07 	bl	800457e <HAL_UART_Receive_IT>
     }
}
 8000b70:	bf00      	nop
 8000b72:	3720      	adds	r7, #32
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	40011000 	.word	0x40011000
 8000b7c:	20000590 	.word	0x20000590
 8000b80:	2000018c 	.word	0x2000018c
 8000b84:	20000190 	.word	0x20000190
 8000b88:	20004a68 	.word	0x20004a68
 8000b8c:	20004a24 	.word	0x20004a24
 8000b90:	200005c8 	.word	0x200005c8
 8000b94:	20004a6c 	.word	0x20004a6c
 8000b98:	20000594 	.word	0x20000594
 8000b9c:	08010994 	.word	0x08010994
 8000ba0:	20004a78 	.word	0x20004a78

08000ba4 <Error_Handler>:
void Error_Handler(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	bf00      	nop
  __disable_irq();
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <Error_Handler+0x8>

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	b083      	sub	sp, #12
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bbe:	4a0f      	ldr	r2, [pc, #60]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000bc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	4b09      	ldr	r3, [pc, #36]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bda:	4a08      	ldr	r2, [pc, #32]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000bdc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000be0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be2:	4b06      	ldr	r3, [pc, #24]	@ (8000bfc <HAL_MspInit+0x4c>)
 8000be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bea:	603b      	str	r3, [r7, #0]
 8000bec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bee:	bf00      	nop
 8000bf0:	370c      	adds	r7, #12
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	40023800 	.word	0x40023800

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c04:	bf00      	nop
 8000c06:	e7fd      	b.n	8000c04 <NMI_Handler+0x4>

08000c08 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0c:	bf00      	nop
 8000c0e:	e7fd      	b.n	8000c0c <HardFault_Handler+0x4>

08000c10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <MemManage_Handler+0x4>

08000c18 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c1c:	bf00      	nop
 8000c1e:	e7fd      	b.n	8000c1c <BusFault_Handler+0x4>

08000c20 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c20:	b480      	push	{r7}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c24:	bf00      	nop
 8000c26:	e7fd      	b.n	8000c24 <UsageFault_Handler+0x4>

08000c28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr

08000c36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr

08000c52 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c52:	b580      	push	{r7, lr}
 8000c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c56:	f000 fa65 	bl	8001124 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5a:	bf00      	nop
 8000c5c:	bd80      	pop	{r7, pc}
	...

08000c60 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000c64:	4802      	ldr	r0, [pc, #8]	@ (8000c70 <USART1_IRQHandler+0x10>)
 8000c66:	f003 fcaf 	bl	80045c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20004a78 	.word	0x20004a78

08000c74 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c78:	4802      	ldr	r0, [pc, #8]	@ (8000c84 <USART2_IRQHandler+0x10>)
 8000c7a:	f003 fca5 	bl	80045c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c7e:	bf00      	nop
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20004ac0 	.word	0x20004ac0

08000c88 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000c8c:	4802      	ldr	r0, [pc, #8]	@ (8000c98 <OTG_FS_IRQHandler+0x10>)
 8000c8e:	f001 f8af 	bl	8001df0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20005144 	.word	0x20005144

08000c9c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b086      	sub	sp, #24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	60f8      	str	r0, [r7, #12]
 8000ca4:	60b9      	str	r1, [r7, #8]
 8000ca6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	e00a      	b.n	8000cc4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000cae:	f3af 8000 	nop.w
 8000cb2:	4601      	mov	r1, r0
 8000cb4:	68bb      	ldr	r3, [r7, #8]
 8000cb6:	1c5a      	adds	r2, r3, #1
 8000cb8:	60ba      	str	r2, [r7, #8]
 8000cba:	b2ca      	uxtb	r2, r1
 8000cbc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	3301      	adds	r3, #1
 8000cc2:	617b      	str	r3, [r7, #20]
 8000cc4:	697a      	ldr	r2, [r7, #20]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	429a      	cmp	r2, r3
 8000cca:	dbf0      	blt.n	8000cae <_read+0x12>
  }

  return len;
 8000ccc:	687b      	ldr	r3, [r7, #4]
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
	...

08000cd8 <__io_putchar>:
extern UART_HandleTypeDef huart2;  // Ensure huart2 is declared

int __io_putchar(int ch) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000ce0:	1d39      	adds	r1, r7, #4
 8000ce2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	4803      	ldr	r0, [pc, #12]	@ (8000cf8 <__io_putchar+0x20>)
 8000cea:	f003 fbbd 	bl	8004468 <HAL_UART_Transmit>
    return ch;
 8000cee:	687b      	ldr	r3, [r7, #4]
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20004ac0 	.word	0x20004ac0

08000cfc <_write>:


__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b086      	sub	sp, #24
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	60f8      	str	r0, [r7, #12]
 8000d04:	60b9      	str	r1, [r7, #8]
 8000d06:	607a      	str	r2, [r7, #4]
    (void)file;
    for (int i = 0; i < len; i++) {
 8000d08:	2300      	movs	r3, #0
 8000d0a:	617b      	str	r3, [r7, #20]
 8000d0c:	e009      	b.n	8000d22 <_write+0x26>
        __io_putchar(*ptr++);
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	1c5a      	adds	r2, r3, #1
 8000d12:	60ba      	str	r2, [r7, #8]
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff ffde 	bl	8000cd8 <__io_putchar>
    for (int i = 0; i < len; i++) {
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	3301      	adds	r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697a      	ldr	r2, [r7, #20]
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	429a      	cmp	r2, r3
 8000d28:	dbf1      	blt.n	8000d0e <_write+0x12>
    }
    return len;
 8000d2a:	687b      	ldr	r3, [r7, #4]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}

08000d34 <_close>:


int _close(int file)
{
 8000d34:	b480      	push	{r7}
 8000d36:	b083      	sub	sp, #12
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d40:	4618      	mov	r0, r3
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b083      	sub	sp, #12
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d5c:	605a      	str	r2, [r3, #4]
  return 0;
 8000d5e:	2300      	movs	r3, #0
}
 8000d60:	4618      	mov	r0, r3
 8000d62:	370c      	adds	r7, #12
 8000d64:	46bd      	mov	sp, r7
 8000d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6a:	4770      	bx	lr

08000d6c <_isatty>:

int _isatty(int file)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	b083      	sub	sp, #12
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d74:	2301      	movs	r3, #1
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	370c      	adds	r7, #12
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr

08000d82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d82:	b480      	push	{r7}
 8000d84:	b085      	sub	sp, #20
 8000d86:	af00      	add	r7, sp, #0
 8000d88:	60f8      	str	r0, [r7, #12]
 8000d8a:	60b9      	str	r1, [r7, #8]
 8000d8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d8e:	2300      	movs	r3, #0
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3714      	adds	r7, #20
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	b086      	sub	sp, #24
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000da4:	4a14      	ldr	r2, [pc, #80]	@ (8000df8 <_sbrk+0x5c>)
 8000da6:	4b15      	ldr	r3, [pc, #84]	@ (8000dfc <_sbrk+0x60>)
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000db0:	4b13      	ldr	r3, [pc, #76]	@ (8000e00 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d102      	bne.n	8000dbe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000db8:	4b11      	ldr	r3, [pc, #68]	@ (8000e00 <_sbrk+0x64>)
 8000dba:	4a12      	ldr	r2, [pc, #72]	@ (8000e04 <_sbrk+0x68>)
 8000dbc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dbe:	4b10      	ldr	r3, [pc, #64]	@ (8000e00 <_sbrk+0x64>)
 8000dc0:	681a      	ldr	r2, [r3, #0]
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4413      	add	r3, r2
 8000dc6:	693a      	ldr	r2, [r7, #16]
 8000dc8:	429a      	cmp	r2, r3
 8000dca:	d207      	bcs.n	8000ddc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dcc:	f00e ff58 	bl	800fc80 <__errno>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	220c      	movs	r2, #12
 8000dd4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8000dda:	e009      	b.n	8000df0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ddc:	4b08      	ldr	r3, [pc, #32]	@ (8000e00 <_sbrk+0x64>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000de2:	4b07      	ldr	r3, [pc, #28]	@ (8000e00 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	4a05      	ldr	r2, [pc, #20]	@ (8000e00 <_sbrk+0x64>)
 8000dec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dee:	68fb      	ldr	r3, [r7, #12]
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3718      	adds	r7, #24
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	20018000 	.word	0x20018000
 8000dfc:	00000400 	.word	0x00000400
 8000e00:	20004a74 	.word	0x20004a74
 8000e04:	20005670 	.word	0x20005670

08000e08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e0c:	4b06      	ldr	r3, [pc, #24]	@ (8000e28 <SystemInit+0x20>)
 8000e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000e12:	4a05      	ldr	r2, [pc, #20]	@ (8000e28 <SystemInit+0x20>)
 8000e14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000e18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	e000ed00 	.word	0xe000ed00

08000e2c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b11      	ldr	r3, [pc, #68]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	@ (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 38400;
 8000e36:	4b10      	ldr	r3, [pc, #64]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e38:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	@ (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e64:	f003 fab0 	bl	80043c8 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6e:	f7ff fe99 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20004a78 	.word	0x20004a78
 8000e7c:	40011000 	.word	0x40011000

08000e80 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000e84:	4b11      	ldr	r3, [pc, #68]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e86:	4a12      	ldr	r2, [pc, #72]	@ (8000ed0 <MX_USART2_UART_Init+0x50>)
 8000e88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e8c:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 8000e90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e92:	4b0e      	ldr	r3, [pc, #56]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e98:	4b0c      	ldr	r3, [pc, #48]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ea4:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000ea6:	220c      	movs	r2, #12
 8000ea8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eaa:	4b08      	ldr	r3, [pc, #32]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000eb0:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000eb6:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_USART2_UART_Init+0x4c>)
 8000eb8:	f003 fa86 	bl	80043c8 <HAL_UART_Init>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ec2:	f7ff fe6f 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	20004ac0 	.word	0x20004ac0
 8000ed0:	40004400 	.word	0x40004400

08000ed4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b08c      	sub	sp, #48	@ 0x30
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000edc:	f107 031c 	add.w	r3, r7, #28
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	605a      	str	r2, [r3, #4]
 8000ee6:	609a      	str	r2, [r3, #8]
 8000ee8:	60da      	str	r2, [r3, #12]
 8000eea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a49      	ldr	r2, [pc, #292]	@ (8001018 <HAL_UART_MspInit+0x144>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d153      	bne.n	8000f9e <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	61bb      	str	r3, [r7, #24]
 8000efa:	4b48      	ldr	r3, [pc, #288]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000efe:	4a47      	ldr	r2, [pc, #284]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f00:	f043 0310 	orr.w	r3, r3, #16
 8000f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f06:	4b45      	ldr	r3, [pc, #276]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	f003 0310 	and.w	r3, r3, #16
 8000f0e:	61bb      	str	r3, [r7, #24]
 8000f10:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	617b      	str	r3, [r7, #20]
 8000f16:	4b41      	ldr	r3, [pc, #260]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f1a:	4a40      	ldr	r2, [pc, #256]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f1c:	f043 0301 	orr.w	r3, r3, #1
 8000f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f22:	4b3e      	ldr	r3, [pc, #248]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f26:	f003 0301 	and.w	r3, r3, #1
 8000f2a:	617b      	str	r3, [r7, #20]
 8000f2c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	613b      	str	r3, [r7, #16]
 8000f32:	4b3a      	ldr	r3, [pc, #232]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f36:	4a39      	ldr	r2, [pc, #228]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f38:	f043 0302 	orr.w	r3, r3, #2
 8000f3c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f3e:	4b37      	ldr	r3, [pc, #220]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	f003 0302 	and.w	r3, r3, #2
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PB6     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f50:	2302      	movs	r3, #2
 8000f52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f54:	2300      	movs	r3, #0
 8000f56:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f58:	2303      	movs	r3, #3
 8000f5a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f5c:	2307      	movs	r3, #7
 8000f5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f60:	f107 031c 	add.w	r3, r7, #28
 8000f64:	4619      	mov	r1, r3
 8000f66:	482e      	ldr	r0, [pc, #184]	@ (8001020 <HAL_UART_MspInit+0x14c>)
 8000f68:	f000 fac4 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000f6c:	2340      	movs	r3, #64	@ 0x40
 8000f6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f70:	2302      	movs	r3, #2
 8000f72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f74:	2300      	movs	r3, #0
 8000f76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f7c:	2307      	movs	r3, #7
 8000f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f80:	f107 031c 	add.w	r3, r7, #28
 8000f84:	4619      	mov	r1, r3
 8000f86:	4827      	ldr	r0, [pc, #156]	@ (8001024 <HAL_UART_MspInit+0x150>)
 8000f88:	f000 fab4 	bl	80014f4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	2100      	movs	r1, #0
 8000f90:	2025      	movs	r0, #37	@ 0x25
 8000f92:	f000 f9e6 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000f96:	2025      	movs	r0, #37	@ 0x25
 8000f98:	f000 f9ff 	bl	800139a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f9c:	e038      	b.n	8001010 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4a21      	ldr	r2, [pc, #132]	@ (8001028 <HAL_UART_MspInit+0x154>)
 8000fa4:	4293      	cmp	r3, r2
 8000fa6:	d133      	bne.n	8001010 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000fa8:	2300      	movs	r3, #0
 8000faa:	60fb      	str	r3, [r7, #12]
 8000fac:	4b1b      	ldr	r3, [pc, #108]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fb6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb8:	4b18      	ldr	r3, [pc, #96]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fbc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fc0:	60fb      	str	r3, [r7, #12]
 8000fc2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	60bb      	str	r3, [r7, #8]
 8000fc8:	4b14      	ldr	r3, [pc, #80]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fcc:	4a13      	ldr	r2, [pc, #76]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fce:	f043 0301 	orr.w	r3, r3, #1
 8000fd2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd4:	4b11      	ldr	r3, [pc, #68]	@ (800101c <HAL_UART_MspInit+0x148>)
 8000fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fd8:	f003 0301 	and.w	r3, r3, #1
 8000fdc:	60bb      	str	r3, [r7, #8]
 8000fde:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fe0:	230c      	movs	r3, #12
 8000fe2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fec:	2303      	movs	r3, #3
 8000fee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ff0:	2307      	movs	r3, #7
 8000ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <HAL_UART_MspInit+0x14c>)
 8000ffc:	f000 fa7a 	bl	80014f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001000:	2200      	movs	r2, #0
 8001002:	2100      	movs	r1, #0
 8001004:	2026      	movs	r0, #38	@ 0x26
 8001006:	f000 f9ac 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800100a:	2026      	movs	r0, #38	@ 0x26
 800100c:	f000 f9c5 	bl	800139a <HAL_NVIC_EnableIRQ>
}
 8001010:	bf00      	nop
 8001012:	3730      	adds	r7, #48	@ 0x30
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}
 8001018:	40011000 	.word	0x40011000
 800101c:	40023800 	.word	0x40023800
 8001020:	40020000 	.word	0x40020000
 8001024:	40020400 	.word	0x40020400
 8001028:	40004400 	.word	0x40004400

0800102c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800102c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001064 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001030:	f7ff feea 	bl	8000e08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001034:	480c      	ldr	r0, [pc, #48]	@ (8001068 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001036:	490d      	ldr	r1, [pc, #52]	@ (800106c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001038:	4a0d      	ldr	r2, [pc, #52]	@ (8001070 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800103a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800103c:	e002      	b.n	8001044 <LoopCopyDataInit>

0800103e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800103e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001042:	3304      	adds	r3, #4

08001044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001048:	d3f9      	bcc.n	800103e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800104a:	4a0a      	ldr	r2, [pc, #40]	@ (8001074 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800104c:	4c0a      	ldr	r4, [pc, #40]	@ (8001078 <LoopFillZerobss+0x22>)
  movs r3, #0
 800104e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001050:	e001      	b.n	8001056 <LoopFillZerobss>

08001052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001054:	3204      	adds	r2, #4

08001056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001058:	d3fb      	bcc.n	8001052 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800105a:	f00e fe17 	bl	800fc8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800105e:	f7ff fb1d 	bl	800069c <main>
  bx  lr    
 8001062:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001064:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001068:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800106c:	20000170 	.word	0x20000170
  ldr r2, =_sidata
 8001070:	08011038 	.word	0x08011038
  ldr r2, =_sbss
 8001074:	20000170 	.word	0x20000170
  ldr r4, =_ebss
 8001078:	20005670 	.word	0x20005670

0800107c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800107c:	e7fe      	b.n	800107c <ADC_IRQHandler>
	...

08001080 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HAL_Init+0x40>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HAL_Init+0x40>)
 800108a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800108e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_Init+0x40>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a0a      	ldr	r2, [pc, #40]	@ (80010c0 <HAL_Init+0x40>)
 8001096:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800109a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800109c:	4b08      	ldr	r3, [pc, #32]	@ (80010c0 <HAL_Init+0x40>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a07      	ldr	r2, [pc, #28]	@ (80010c0 <HAL_Init+0x40>)
 80010a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010a8:	2003      	movs	r0, #3
 80010aa:	f000 f94f 	bl	800134c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 f808 	bl	80010c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010b4:	f7ff fd7c 	bl	8000bb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010b8:	2300      	movs	r3, #0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40023c00 	.word	0x40023c00

080010c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010cc:	4b12      	ldr	r3, [pc, #72]	@ (8001118 <HAL_InitTick+0x54>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b12      	ldr	r3, [pc, #72]	@ (800111c <HAL_InitTick+0x58>)
 80010d2:	781b      	ldrb	r3, [r3, #0]
 80010d4:	4619      	mov	r1, r3
 80010d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010da:	fbb3 f3f1 	udiv	r3, r3, r1
 80010de:	fbb2 f3f3 	udiv	r3, r2, r3
 80010e2:	4618      	mov	r0, r3
 80010e4:	f000 f967 	bl	80013b6 <HAL_SYSTICK_Config>
 80010e8:	4603      	mov	r3, r0
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d001      	beq.n	80010f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ee:	2301      	movs	r3, #1
 80010f0:	e00e      	b.n	8001110 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	2b0f      	cmp	r3, #15
 80010f6:	d80a      	bhi.n	800110e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010f8:	2200      	movs	r2, #0
 80010fa:	6879      	ldr	r1, [r7, #4]
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	f000 f92f 	bl	8001362 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001104:	4a06      	ldr	r2, [pc, #24]	@ (8001120 <HAL_InitTick+0x5c>)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800110a:	2300      	movs	r3, #0
 800110c:	e000      	b.n	8001110 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
}
 8001110:	4618      	mov	r0, r3
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	20000034 	.word	0x20000034
 800111c:	2000003c 	.word	0x2000003c
 8001120:	20000038 	.word	0x20000038

08001124 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001128:	4b06      	ldr	r3, [pc, #24]	@ (8001144 <HAL_IncTick+0x20>)
 800112a:	781b      	ldrb	r3, [r3, #0]
 800112c:	461a      	mov	r2, r3
 800112e:	4b06      	ldr	r3, [pc, #24]	@ (8001148 <HAL_IncTick+0x24>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4413      	add	r3, r2
 8001134:	4a04      	ldr	r2, [pc, #16]	@ (8001148 <HAL_IncTick+0x24>)
 8001136:	6013      	str	r3, [r2, #0]
}
 8001138:	bf00      	nop
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop
 8001144:	2000003c 	.word	0x2000003c
 8001148:	20004b08 	.word	0x20004b08

0800114c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  return uwTick;
 8001150:	4b03      	ldr	r3, [pc, #12]	@ (8001160 <HAL_GetTick+0x14>)
 8001152:	681b      	ldr	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20004b08 	.word	0x20004b08

08001164 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800116c:	f7ff ffee 	bl	800114c <HAL_GetTick>
 8001170:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800117c:	d005      	beq.n	800118a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800117e:	4b0a      	ldr	r3, [pc, #40]	@ (80011a8 <HAL_Delay+0x44>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	461a      	mov	r2, r3
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	4413      	add	r3, r2
 8001188:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800118a:	bf00      	nop
 800118c:	f7ff ffde 	bl	800114c <HAL_GetTick>
 8001190:	4602      	mov	r2, r0
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1ad3      	subs	r3, r2, r3
 8001196:	68fa      	ldr	r2, [r7, #12]
 8001198:	429a      	cmp	r2, r3
 800119a:	d8f7      	bhi.n	800118c <HAL_Delay+0x28>
  {
  }
}
 800119c:	bf00      	nop
 800119e:	bf00      	nop
 80011a0:	3710      	adds	r7, #16
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	2000003c 	.word	0x2000003c

080011ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f003 0307 	and.w	r3, r3, #7
 80011ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011bc:	4b0c      	ldr	r3, [pc, #48]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011c2:	68ba      	ldr	r2, [r7, #8]
 80011c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011c8:	4013      	ands	r3, r2
 80011ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80011d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011de:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <__NVIC_SetPriorityGrouping+0x44>)
 80011e0:	68bb      	ldr	r3, [r7, #8]
 80011e2:	60d3      	str	r3, [r2, #12]
}
 80011e4:	bf00      	nop
 80011e6:	3714      	adds	r7, #20
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	e000ed00 	.word	0xe000ed00

080011f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011f4:	b480      	push	{r7}
 80011f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011f8:	4b04      	ldr	r3, [pc, #16]	@ (800120c <__NVIC_GetPriorityGrouping+0x18>)
 80011fa:	68db      	ldr	r3, [r3, #12]
 80011fc:	0a1b      	lsrs	r3, r3, #8
 80011fe:	f003 0307 	and.w	r3, r3, #7
}
 8001202:	4618      	mov	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr
 800120c:	e000ed00 	.word	0xe000ed00

08001210 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	4603      	mov	r3, r0
 8001218:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	2b00      	cmp	r3, #0
 8001220:	db0b      	blt.n	800123a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001222:	79fb      	ldrb	r3, [r7, #7]
 8001224:	f003 021f 	and.w	r2, r3, #31
 8001228:	4907      	ldr	r1, [pc, #28]	@ (8001248 <__NVIC_EnableIRQ+0x38>)
 800122a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800122e:	095b      	lsrs	r3, r3, #5
 8001230:	2001      	movs	r0, #1
 8001232:	fa00 f202 	lsl.w	r2, r0, r2
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800123a:	bf00      	nop
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	e000e100 	.word	0xe000e100

0800124c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	4603      	mov	r3, r0
 8001254:	6039      	str	r1, [r7, #0]
 8001256:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001258:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800125c:	2b00      	cmp	r3, #0
 800125e:	db0a      	blt.n	8001276 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	b2da      	uxtb	r2, r3
 8001264:	490c      	ldr	r1, [pc, #48]	@ (8001298 <__NVIC_SetPriority+0x4c>)
 8001266:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800126a:	0112      	lsls	r2, r2, #4
 800126c:	b2d2      	uxtb	r2, r2
 800126e:	440b      	add	r3, r1
 8001270:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001274:	e00a      	b.n	800128c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4908      	ldr	r1, [pc, #32]	@ (800129c <__NVIC_SetPriority+0x50>)
 800127c:	79fb      	ldrb	r3, [r7, #7]
 800127e:	f003 030f 	and.w	r3, r3, #15
 8001282:	3b04      	subs	r3, #4
 8001284:	0112      	lsls	r2, r2, #4
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	440b      	add	r3, r1
 800128a:	761a      	strb	r2, [r3, #24]
}
 800128c:	bf00      	nop
 800128e:	370c      	adds	r7, #12
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	e000e100 	.word	0xe000e100
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b089      	sub	sp, #36	@ 0x24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	60b9      	str	r1, [r7, #8]
 80012aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	f003 0307 	and.w	r3, r3, #7
 80012b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	f1c3 0307 	rsb	r3, r3, #7
 80012ba:	2b04      	cmp	r3, #4
 80012bc:	bf28      	it	cs
 80012be:	2304      	movcs	r3, #4
 80012c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	3304      	adds	r3, #4
 80012c6:	2b06      	cmp	r3, #6
 80012c8:	d902      	bls.n	80012d0 <NVIC_EncodePriority+0x30>
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3b03      	subs	r3, #3
 80012ce:	e000      	b.n	80012d2 <NVIC_EncodePriority+0x32>
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	f04f 32ff 	mov.w	r2, #4294967295
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	fa02 f303 	lsl.w	r3, r2, r3
 80012de:	43da      	mvns	r2, r3
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	401a      	ands	r2, r3
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012e8:	f04f 31ff 	mov.w	r1, #4294967295
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	fa01 f303 	lsl.w	r3, r1, r3
 80012f2:	43d9      	mvns	r1, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012f8:	4313      	orrs	r3, r2
         );
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3724      	adds	r7, #36	@ 0x24
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
	...

08001308 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b082      	sub	sp, #8
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	3b01      	subs	r3, #1
 8001314:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001318:	d301      	bcc.n	800131e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131a:	2301      	movs	r3, #1
 800131c:	e00f      	b.n	800133e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800131e:	4a0a      	ldr	r2, [pc, #40]	@ (8001348 <SysTick_Config+0x40>)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001326:	210f      	movs	r1, #15
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f7ff ff8e 	bl	800124c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001330:	4b05      	ldr	r3, [pc, #20]	@ (8001348 <SysTick_Config+0x40>)
 8001332:	2200      	movs	r2, #0
 8001334:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001336:	4b04      	ldr	r3, [pc, #16]	@ (8001348 <SysTick_Config+0x40>)
 8001338:	2207      	movs	r2, #7
 800133a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	e000e010 	.word	0xe000e010

0800134c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b082      	sub	sp, #8
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f7ff ff29 	bl	80011ac <__NVIC_SetPriorityGrouping>
}
 800135a:	bf00      	nop
 800135c:	3708      	adds	r7, #8
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}

08001362 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001362:	b580      	push	{r7, lr}
 8001364:	b086      	sub	sp, #24
 8001366:	af00      	add	r7, sp, #0
 8001368:	4603      	mov	r3, r0
 800136a:	60b9      	str	r1, [r7, #8]
 800136c:	607a      	str	r2, [r7, #4]
 800136e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001374:	f7ff ff3e 	bl	80011f4 <__NVIC_GetPriorityGrouping>
 8001378:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137a:	687a      	ldr	r2, [r7, #4]
 800137c:	68b9      	ldr	r1, [r7, #8]
 800137e:	6978      	ldr	r0, [r7, #20]
 8001380:	f7ff ff8e 	bl	80012a0 <NVIC_EncodePriority>
 8001384:	4602      	mov	r2, r0
 8001386:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138a:	4611      	mov	r1, r2
 800138c:	4618      	mov	r0, r3
 800138e:	f7ff ff5d 	bl	800124c <__NVIC_SetPriority>
}
 8001392:	bf00      	nop
 8001394:	3718      	adds	r7, #24
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}

0800139a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
 80013a0:	4603      	mov	r3, r0
 80013a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013a8:	4618      	mov	r0, r3
 80013aa:	f7ff ff31 	bl	8001210 <__NVIC_EnableIRQ>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b082      	sub	sp, #8
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f7ff ffa2 	bl	8001308 <SysTick_Config>
 80013c4:	4603      	mov	r3, r0
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3708      	adds	r7, #8
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b084      	sub	sp, #16
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013da:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80013dc:	f7ff feb6 	bl	800114c <HAL_GetTick>
 80013e0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d008      	beq.n	8001400 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2280      	movs	r2, #128	@ 0x80
 80013f2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2200      	movs	r2, #0
 80013f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80013fc:	2301      	movs	r3, #1
 80013fe:	e052      	b.n	80014a6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	f022 0216 	bic.w	r2, r2, #22
 800140e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	695a      	ldr	r2, [r3, #20]
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800141e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001424:	2b00      	cmp	r3, #0
 8001426:	d103      	bne.n	8001430 <HAL_DMA_Abort+0x62>
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800142c:	2b00      	cmp	r3, #0
 800142e:	d007      	beq.n	8001440 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	681a      	ldr	r2, [r3, #0]
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f022 0208 	bic.w	r2, r2, #8
 800143e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f022 0201 	bic.w	r2, r2, #1
 800144e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001450:	e013      	b.n	800147a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001452:	f7ff fe7b 	bl	800114c <HAL_GetTick>
 8001456:	4602      	mov	r2, r0
 8001458:	68bb      	ldr	r3, [r7, #8]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	2b05      	cmp	r3, #5
 800145e:	d90c      	bls.n	800147a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2220      	movs	r2, #32
 8001464:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2203      	movs	r2, #3
 800146a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2200      	movs	r2, #0
 8001472:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001476:	2303      	movs	r3, #3
 8001478:	e015      	b.n	80014a6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f003 0301 	and.w	r3, r3, #1
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1e4      	bne.n	8001452 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800148c:	223f      	movs	r2, #63	@ 0x3f
 800148e:	409a      	lsls	r2, r3
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2201      	movs	r2, #1
 8001498:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2200      	movs	r2, #0
 80014a0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014a4:	2300      	movs	r3, #0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3710      	adds	r7, #16
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014ae:	b480      	push	{r7}
 80014b0:	b083      	sub	sp, #12
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d004      	beq.n	80014cc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2280      	movs	r2, #128	@ 0x80
 80014c6:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e00c      	b.n	80014e6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2205      	movs	r2, #5
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f022 0201 	bic.w	r2, r2, #1
 80014e2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	@ 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e159      	b.n	80017c4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 8148 	bne.w	80017be <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f003 0303 	and.w	r3, r3, #3
 8001536:	2b01      	cmp	r3, #1
 8001538:	d005      	beq.n	8001546 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001542:	2b02      	cmp	r3, #2
 8001544:	d130      	bne.n	80015a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	689b      	ldr	r3, [r3, #8]
 800154a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	68da      	ldr	r2, [r3, #12]
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4313      	orrs	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800157c:	2201      	movs	r2, #1
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	69ba      	ldr	r2, [r7, #24]
 8001588:	4013      	ands	r3, r2
 800158a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 0201 	and.w	r2, r3, #1
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	4313      	orrs	r3, r2
 80015a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f003 0303 	and.w	r3, r3, #3
 80015b0:	2b03      	cmp	r3, #3
 80015b2:	d017      	beq.n	80015e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689a      	ldr	r2, [r3, #8]
 80015d0:	69fb      	ldr	r3, [r7, #28]
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	fa02 f303 	lsl.w	r3, r2, r3
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80a2 	beq.w	80017be <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b57      	ldr	r3, [pc, #348]	@ (80017dc <HAL_GPIO_Init+0x2e8>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001682:	4a56      	ldr	r2, [pc, #344]	@ (80017dc <HAL_GPIO_Init+0x2e8>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001688:	6453      	str	r3, [r2, #68]	@ 0x44
 800168a:	4b54      	ldr	r3, [pc, #336]	@ (80017dc <HAL_GPIO_Init+0x2e8>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a52      	ldr	r2, [pc, #328]	@ (80017e0 <HAL_GPIO_Init+0x2ec>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a49      	ldr	r2, [pc, #292]	@ (80017e4 <HAL_GPIO_Init+0x2f0>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d019      	beq.n	80016f6 <HAL_GPIO_Init+0x202>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a48      	ldr	r2, [pc, #288]	@ (80017e8 <HAL_GPIO_Init+0x2f4>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d013      	beq.n	80016f2 <HAL_GPIO_Init+0x1fe>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a47      	ldr	r2, [pc, #284]	@ (80017ec <HAL_GPIO_Init+0x2f8>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d00d      	beq.n	80016ee <HAL_GPIO_Init+0x1fa>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a46      	ldr	r2, [pc, #280]	@ (80017f0 <HAL_GPIO_Init+0x2fc>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d007      	beq.n	80016ea <HAL_GPIO_Init+0x1f6>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a45      	ldr	r2, [pc, #276]	@ (80017f4 <HAL_GPIO_Init+0x300>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d101      	bne.n	80016e6 <HAL_GPIO_Init+0x1f2>
 80016e2:	2304      	movs	r3, #4
 80016e4:	e008      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016e6:	2307      	movs	r3, #7
 80016e8:	e006      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016ea:	2303      	movs	r3, #3
 80016ec:	e004      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016ee:	2302      	movs	r3, #2
 80016f0:	e002      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016f2:	2301      	movs	r3, #1
 80016f4:	e000      	b.n	80016f8 <HAL_GPIO_Init+0x204>
 80016f6:	2300      	movs	r3, #0
 80016f8:	69fa      	ldr	r2, [r7, #28]
 80016fa:	f002 0203 	and.w	r2, r2, #3
 80016fe:	0092      	lsls	r2, r2, #2
 8001700:	4093      	lsls	r3, r2
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	4313      	orrs	r3, r2
 8001706:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001708:	4935      	ldr	r1, [pc, #212]	@ (80017e0 <HAL_GPIO_Init+0x2ec>)
 800170a:	69fb      	ldr	r3, [r7, #28]
 800170c:	089b      	lsrs	r3, r3, #2
 800170e:	3302      	adds	r3, #2
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001716:	4b38      	ldr	r3, [pc, #224]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800173a:	4a2f      	ldr	r2, [pc, #188]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 800173c:	69bb      	ldr	r3, [r7, #24]
 800173e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001740:	4b2d      	ldr	r3, [pc, #180]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001742:	68db      	ldr	r3, [r3, #12]
 8001744:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	43db      	mvns	r3, r3
 800174a:	69ba      	ldr	r2, [r7, #24]
 800174c:	4013      	ands	r3, r2
 800174e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d003      	beq.n	8001764 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	4313      	orrs	r3, r2
 8001762:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001764:	4a24      	ldr	r2, [pc, #144]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800176a:	4b23      	ldr	r3, [pc, #140]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	43db      	mvns	r3, r3
 8001774:	69ba      	ldr	r2, [r7, #24]
 8001776:	4013      	ands	r3, r2
 8001778:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	693b      	ldr	r3, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800178e:	4a1a      	ldr	r2, [pc, #104]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001794:	4b18      	ldr	r3, [pc, #96]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800179a:	693b      	ldr	r3, [r7, #16]
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d003      	beq.n	80017b8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017b8:	4a0f      	ldr	r2, [pc, #60]	@ (80017f8 <HAL_GPIO_Init+0x304>)
 80017ba:	69bb      	ldr	r3, [r7, #24]
 80017bc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3301      	adds	r3, #1
 80017c2:	61fb      	str	r3, [r7, #28]
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	2b0f      	cmp	r3, #15
 80017c8:	f67f aea2 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3724      	adds	r7, #36	@ 0x24
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	40023800 	.word	0x40023800
 80017e0:	40013800 	.word	0x40013800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40020400 	.word	0x40020400
 80017ec:	40020800 	.word	0x40020800
 80017f0:	40020c00 	.word	0x40020c00
 80017f4:	40021000 	.word	0x40021000
 80017f8:	40013c00 	.word	0x40013c00

080017fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	807b      	strh	r3, [r7, #2]
 8001808:	4613      	mov	r3, r2
 800180a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800180c:	787b      	ldrb	r3, [r7, #1]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d003      	beq.n	800181a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001812:	887a      	ldrh	r2, [r7, #2]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001818:	e003      	b.n	8001822 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800181a:	887b      	ldrh	r3, [r7, #2]
 800181c:	041a      	lsls	r2, r3, #16
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	619a      	str	r2, [r3, #24]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800182e:	b580      	push	{r7, lr}
 8001830:	b086      	sub	sp, #24
 8001832:	af02      	add	r7, sp, #8
 8001834:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d101      	bne.n	8001840 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 800183c:	2301      	movs	r3, #1
 800183e:	e059      	b.n	80018f4 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d106      	bne.n	8001860 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f00d fbc2 	bl	800efe4 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2203      	movs	r2, #3
 8001864:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800186e:	d102      	bne.n	8001876 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2200      	movs	r2, #0
 8001874:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4618      	mov	r0, r3
 800187c:	f003 fe6f 	bl	800555e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6818      	ldr	r0, [r3, #0]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	7c1a      	ldrb	r2, [r3, #16]
 8001888:	f88d 2000 	strb.w	r2, [sp]
 800188c:	3304      	adds	r3, #4
 800188e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001890:	f003 fdf0 	bl	8005474 <USB_CoreInit>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d005      	beq.n	80018a6 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2202      	movs	r2, #2
 800189e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e026      	b.n	80018f4 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2101      	movs	r1, #1
 80018ac:	4618      	mov	r0, r3
 80018ae:	f003 fe67 	bl	8005580 <USB_SetCurrentMode>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d005      	beq.n	80018c4 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	2202      	movs	r2, #2
 80018bc:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e017      	b.n	80018f4 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6818      	ldr	r0, [r3, #0]
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	7c1a      	ldrb	r2, [r3, #16]
 80018cc:	f88d 2000 	strb.w	r2, [sp]
 80018d0:	3304      	adds	r3, #4
 80018d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80018d4:	f004 f80a 	bl	80058ec <USB_HostInit>
 80018d8:	4603      	mov	r3, r0
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2202      	movs	r2, #2
 80018e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e004      	b.n	80018f4 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2201      	movs	r2, #1
 80018ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	3710      	adds	r7, #16
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}

080018fc <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80018fc:	b590      	push	{r4, r7, lr}
 80018fe:	b08b      	sub	sp, #44	@ 0x2c
 8001900:	af04      	add	r7, sp, #16
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	4608      	mov	r0, r1
 8001906:	4611      	mov	r1, r2
 8001908:	461a      	mov	r2, r3
 800190a:	4603      	mov	r3, r0
 800190c:	70fb      	strb	r3, [r7, #3]
 800190e:	460b      	mov	r3, r1
 8001910:	70bb      	strb	r3, [r7, #2]
 8001912:	4613      	mov	r3, r2
 8001914:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001916:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001918:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001920:	2b01      	cmp	r3, #1
 8001922:	d101      	bne.n	8001928 <HAL_HCD_HC_Init+0x2c>
 8001924:	2302      	movs	r3, #2
 8001926:	e09d      	b.n	8001a64 <HAL_HCD_HC_Init+0x168>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2201      	movs	r2, #1
 800192c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001930:	78fa      	ldrb	r2, [r7, #3]
 8001932:	6879      	ldr	r1, [r7, #4]
 8001934:	4613      	mov	r3, r2
 8001936:	011b      	lsls	r3, r3, #4
 8001938:	1a9b      	subs	r3, r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	440b      	add	r3, r1
 800193e:	3319      	adds	r3, #25
 8001940:	2200      	movs	r2, #0
 8001942:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001944:	78fa      	ldrb	r2, [r7, #3]
 8001946:	6879      	ldr	r1, [r7, #4]
 8001948:	4613      	mov	r3, r2
 800194a:	011b      	lsls	r3, r3, #4
 800194c:	1a9b      	subs	r3, r3, r2
 800194e:	009b      	lsls	r3, r3, #2
 8001950:	440b      	add	r3, r1
 8001952:	3314      	adds	r3, #20
 8001954:	787a      	ldrb	r2, [r7, #1]
 8001956:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001958:	78fa      	ldrb	r2, [r7, #3]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	4613      	mov	r3, r2
 800195e:	011b      	lsls	r3, r3, #4
 8001960:	1a9b      	subs	r3, r3, r2
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	440b      	add	r3, r1
 8001966:	3315      	adds	r3, #21
 8001968:	78fa      	ldrb	r2, [r7, #3]
 800196a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 800196c:	78fa      	ldrb	r2, [r7, #3]
 800196e:	6879      	ldr	r1, [r7, #4]
 8001970:	4613      	mov	r3, r2
 8001972:	011b      	lsls	r3, r3, #4
 8001974:	1a9b      	subs	r3, r3, r2
 8001976:	009b      	lsls	r3, r3, #2
 8001978:	440b      	add	r3, r1
 800197a:	3326      	adds	r3, #38	@ 0x26
 800197c:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001980:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001982:	78fa      	ldrb	r2, [r7, #3]
 8001984:	78bb      	ldrb	r3, [r7, #2]
 8001986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800198a:	b2d8      	uxtb	r0, r3
 800198c:	6879      	ldr	r1, [r7, #4]
 800198e:	4613      	mov	r3, r2
 8001990:	011b      	lsls	r3, r3, #4
 8001992:	1a9b      	subs	r3, r3, r2
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	440b      	add	r3, r1
 8001998:	3316      	adds	r3, #22
 800199a:	4602      	mov	r2, r0
 800199c:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 800199e:	78fb      	ldrb	r3, [r7, #3]
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f000 fbc8 	bl	8002138 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80019a8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	da0a      	bge.n	80019c6 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80019b0:	78fa      	ldrb	r2, [r7, #3]
 80019b2:	6879      	ldr	r1, [r7, #4]
 80019b4:	4613      	mov	r3, r2
 80019b6:	011b      	lsls	r3, r3, #4
 80019b8:	1a9b      	subs	r3, r3, r2
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	3317      	adds	r3, #23
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e009      	b.n	80019da <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	6879      	ldr	r1, [r7, #4]
 80019ca:	4613      	mov	r3, r2
 80019cc:	011b      	lsls	r3, r3, #4
 80019ce:	1a9b      	subs	r3, r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	440b      	add	r3, r1
 80019d4:	3317      	adds	r3, #23
 80019d6:	2200      	movs	r2, #0
 80019d8:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f004 f8d2 	bl	8005b88 <USB_GetHostSpeed>
 80019e4:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80019e6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80019ea:	2b01      	cmp	r3, #1
 80019ec:	d10b      	bne.n	8001a06 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80019ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80019f2:	2b01      	cmp	r3, #1
 80019f4:	d107      	bne.n	8001a06 <HAL_HCD_HC_Init+0x10a>
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d104      	bne.n	8001a06 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	2bbc      	cmp	r3, #188	@ 0xbc
 8001a00:	d901      	bls.n	8001a06 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001a02:	23bc      	movs	r3, #188	@ 0xbc
 8001a04:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001a06:	78fa      	ldrb	r2, [r7, #3]
 8001a08:	6879      	ldr	r1, [r7, #4]
 8001a0a:	4613      	mov	r3, r2
 8001a0c:	011b      	lsls	r3, r3, #4
 8001a0e:	1a9b      	subs	r3, r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	440b      	add	r3, r1
 8001a14:	3318      	adds	r3, #24
 8001a16:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001a1a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001a1c:	78fa      	ldrb	r2, [r7, #3]
 8001a1e:	697b      	ldr	r3, [r7, #20]
 8001a20:	b298      	uxth	r0, r3
 8001a22:	6879      	ldr	r1, [r7, #4]
 8001a24:	4613      	mov	r3, r2
 8001a26:	011b      	lsls	r3, r3, #4
 8001a28:	1a9b      	subs	r3, r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	440b      	add	r3, r1
 8001a2e:	3328      	adds	r3, #40	@ 0x28
 8001a30:	4602      	mov	r2, r0
 8001a32:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6818      	ldr	r0, [r3, #0]
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	b29b      	uxth	r3, r3
 8001a3c:	787c      	ldrb	r4, [r7, #1]
 8001a3e:	78ba      	ldrb	r2, [r7, #2]
 8001a40:	78f9      	ldrb	r1, [r7, #3]
 8001a42:	9302      	str	r3, [sp, #8]
 8001a44:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001a48:	9301      	str	r3, [sp, #4]
 8001a4a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001a4e:	9300      	str	r3, [sp, #0]
 8001a50:	4623      	mov	r3, r4
 8001a52:	f004 f8c1 	bl	8005bd8 <USB_HC_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001a62:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	371c      	adds	r7, #28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd90      	pop	{r4, r7, pc}

08001a6c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	460b      	mov	r3, r1
 8001a76:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d101      	bne.n	8001a8a <HAL_HCD_HC_Halt+0x1e>
 8001a86:	2302      	movs	r3, #2
 8001a88:	e00f      	b.n	8001aaa <HAL_HCD_HC_Halt+0x3e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	78fa      	ldrb	r2, [r7, #3]
 8001a98:	4611      	mov	r1, r2
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f004 fc07 	bl	80062ae <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8001aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3710      	adds	r7, #16
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	4608      	mov	r0, r1
 8001abe:	4611      	mov	r1, r2
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	70fb      	strb	r3, [r7, #3]
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	70bb      	strb	r3, [r7, #2]
 8001aca:	4613      	mov	r3, r2
 8001acc:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001ace:	78fa      	ldrb	r2, [r7, #3]
 8001ad0:	6879      	ldr	r1, [r7, #4]
 8001ad2:	4613      	mov	r3, r2
 8001ad4:	011b      	lsls	r3, r3, #4
 8001ad6:	1a9b      	subs	r3, r3, r2
 8001ad8:	009b      	lsls	r3, r3, #2
 8001ada:	440b      	add	r3, r1
 8001adc:	3317      	adds	r3, #23
 8001ade:	78ba      	ldrb	r2, [r7, #2]
 8001ae0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001ae2:	78fa      	ldrb	r2, [r7, #3]
 8001ae4:	6879      	ldr	r1, [r7, #4]
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	011b      	lsls	r3, r3, #4
 8001aea:	1a9b      	subs	r3, r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	440b      	add	r3, r1
 8001af0:	3326      	adds	r3, #38	@ 0x26
 8001af2:	787a      	ldrb	r2, [r7, #1]
 8001af4:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001af6:	7c3b      	ldrb	r3, [r7, #16]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d114      	bne.n	8001b26 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001afc:	78fa      	ldrb	r2, [r7, #3]
 8001afe:	6879      	ldr	r1, [r7, #4]
 8001b00:	4613      	mov	r3, r2
 8001b02:	011b      	lsls	r3, r3, #4
 8001b04:	1a9b      	subs	r3, r3, r2
 8001b06:	009b      	lsls	r3, r3, #2
 8001b08:	440b      	add	r3, r1
 8001b0a:	332a      	adds	r3, #42	@ 0x2a
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001b10:	78fa      	ldrb	r2, [r7, #3]
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4613      	mov	r3, r2
 8001b16:	011b      	lsls	r3, r3, #4
 8001b18:	1a9b      	subs	r3, r3, r2
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	440b      	add	r3, r1
 8001b1e:	3319      	adds	r3, #25
 8001b20:	7f3a      	ldrb	r2, [r7, #28]
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	e009      	b.n	8001b3a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b26:	78fa      	ldrb	r2, [r7, #3]
 8001b28:	6879      	ldr	r1, [r7, #4]
 8001b2a:	4613      	mov	r3, r2
 8001b2c:	011b      	lsls	r3, r3, #4
 8001b2e:	1a9b      	subs	r3, r3, r2
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	440b      	add	r3, r1
 8001b34:	332a      	adds	r3, #42	@ 0x2a
 8001b36:	2202      	movs	r2, #2
 8001b38:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001b3a:	787b      	ldrb	r3, [r7, #1]
 8001b3c:	2b03      	cmp	r3, #3
 8001b3e:	f200 8102 	bhi.w	8001d46 <HAL_HCD_HC_SubmitRequest+0x292>
 8001b42:	a201      	add	r2, pc, #4	@ (adr r2, 8001b48 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b48:	08001b59 	.word	0x08001b59
 8001b4c:	08001d31 	.word	0x08001d31
 8001b50:	08001c1d 	.word	0x08001c1d
 8001b54:	08001ca7 	.word	0x08001ca7
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001b58:	7c3b      	ldrb	r3, [r7, #16]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	f040 80f5 	bne.w	8001d4a <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001b60:	78bb      	ldrb	r3, [r7, #2]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d12d      	bne.n	8001bc2 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8001b66:	8b3b      	ldrh	r3, [r7, #24]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d109      	bne.n	8001b80 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	333d      	adds	r3, #61	@ 0x3d
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	333d      	adds	r3, #61	@ 0x3d
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10a      	bne.n	8001bac <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b96:	78fa      	ldrb	r2, [r7, #3]
 8001b98:	6879      	ldr	r1, [r7, #4]
 8001b9a:	4613      	mov	r3, r2
 8001b9c:	011b      	lsls	r3, r3, #4
 8001b9e:	1a9b      	subs	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	440b      	add	r3, r1
 8001ba4:	332a      	adds	r3, #42	@ 0x2a
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8001baa:	e0ce      	b.n	8001d4a <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bac:	78fa      	ldrb	r2, [r7, #3]
 8001bae:	6879      	ldr	r1, [r7, #4]
 8001bb0:	4613      	mov	r3, r2
 8001bb2:	011b      	lsls	r3, r3, #4
 8001bb4:	1a9b      	subs	r3, r3, r2
 8001bb6:	009b      	lsls	r3, r3, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	332a      	adds	r3, #42	@ 0x2a
 8001bbc:	2202      	movs	r2, #2
 8001bbe:	701a      	strb	r2, [r3, #0]
      break;
 8001bc0:	e0c3      	b.n	8001d4a <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8001bc2:	78fa      	ldrb	r2, [r7, #3]
 8001bc4:	6879      	ldr	r1, [r7, #4]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	011b      	lsls	r3, r3, #4
 8001bca:	1a9b      	subs	r3, r3, r2
 8001bcc:	009b      	lsls	r3, r3, #2
 8001bce:	440b      	add	r3, r1
 8001bd0:	331a      	adds	r3, #26
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	f040 80b8 	bne.w	8001d4a <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bda:	78fa      	ldrb	r2, [r7, #3]
 8001bdc:	6879      	ldr	r1, [r7, #4]
 8001bde:	4613      	mov	r3, r2
 8001be0:	011b      	lsls	r3, r3, #4
 8001be2:	1a9b      	subs	r3, r3, r2
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	440b      	add	r3, r1
 8001be8:	333c      	adds	r3, #60	@ 0x3c
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d10a      	bne.n	8001c06 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bf0:	78fa      	ldrb	r2, [r7, #3]
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	1a9b      	subs	r3, r3, r2
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	440b      	add	r3, r1
 8001bfe:	332a      	adds	r3, #42	@ 0x2a
 8001c00:	2200      	movs	r2, #0
 8001c02:	701a      	strb	r2, [r3, #0]
      break;
 8001c04:	e0a1      	b.n	8001d4a <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c06:	78fa      	ldrb	r2, [r7, #3]
 8001c08:	6879      	ldr	r1, [r7, #4]
 8001c0a:	4613      	mov	r3, r2
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	1a9b      	subs	r3, r3, r2
 8001c10:	009b      	lsls	r3, r3, #2
 8001c12:	440b      	add	r3, r1
 8001c14:	332a      	adds	r3, #42	@ 0x2a
 8001c16:	2202      	movs	r2, #2
 8001c18:	701a      	strb	r2, [r3, #0]
      break;
 8001c1a:	e096      	b.n	8001d4a <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001c1c:	78bb      	ldrb	r3, [r7, #2]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d120      	bne.n	8001c64 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	6879      	ldr	r1, [r7, #4]
 8001c26:	4613      	mov	r3, r2
 8001c28:	011b      	lsls	r3, r3, #4
 8001c2a:	1a9b      	subs	r3, r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	440b      	add	r3, r1
 8001c30:	333d      	adds	r3, #61	@ 0x3d
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10a      	bne.n	8001c4e <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c38:	78fa      	ldrb	r2, [r7, #3]
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	011b      	lsls	r3, r3, #4
 8001c40:	1a9b      	subs	r3, r3, r2
 8001c42:	009b      	lsls	r3, r3, #2
 8001c44:	440b      	add	r3, r1
 8001c46:	332a      	adds	r3, #42	@ 0x2a
 8001c48:	2200      	movs	r2, #0
 8001c4a:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001c4c:	e07e      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	4613      	mov	r3, r2
 8001c54:	011b      	lsls	r3, r3, #4
 8001c56:	1a9b      	subs	r3, r3, r2
 8001c58:	009b      	lsls	r3, r3, #2
 8001c5a:	440b      	add	r3, r1
 8001c5c:	332a      	adds	r3, #42	@ 0x2a
 8001c5e:	2202      	movs	r2, #2
 8001c60:	701a      	strb	r2, [r3, #0]
      break;
 8001c62:	e073      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001c64:	78fa      	ldrb	r2, [r7, #3]
 8001c66:	6879      	ldr	r1, [r7, #4]
 8001c68:	4613      	mov	r3, r2
 8001c6a:	011b      	lsls	r3, r3, #4
 8001c6c:	1a9b      	subs	r3, r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	440b      	add	r3, r1
 8001c72:	333c      	adds	r3, #60	@ 0x3c
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d10a      	bne.n	8001c90 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c7a:	78fa      	ldrb	r2, [r7, #3]
 8001c7c:	6879      	ldr	r1, [r7, #4]
 8001c7e:	4613      	mov	r3, r2
 8001c80:	011b      	lsls	r3, r3, #4
 8001c82:	1a9b      	subs	r3, r3, r2
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	440b      	add	r3, r1
 8001c88:	332a      	adds	r3, #42	@ 0x2a
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	701a      	strb	r2, [r3, #0]
      break;
 8001c8e:	e05d      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001c90:	78fa      	ldrb	r2, [r7, #3]
 8001c92:	6879      	ldr	r1, [r7, #4]
 8001c94:	4613      	mov	r3, r2
 8001c96:	011b      	lsls	r3, r3, #4
 8001c98:	1a9b      	subs	r3, r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	440b      	add	r3, r1
 8001c9e:	332a      	adds	r3, #42	@ 0x2a
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	701a      	strb	r2, [r3, #0]
      break;
 8001ca4:	e052      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001ca6:	78bb      	ldrb	r3, [r7, #2]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d120      	bne.n	8001cee <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001cac:	78fa      	ldrb	r2, [r7, #3]
 8001cae:	6879      	ldr	r1, [r7, #4]
 8001cb0:	4613      	mov	r3, r2
 8001cb2:	011b      	lsls	r3, r3, #4
 8001cb4:	1a9b      	subs	r3, r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	440b      	add	r3, r1
 8001cba:	333d      	adds	r3, #61	@ 0x3d
 8001cbc:	781b      	ldrb	r3, [r3, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d10a      	bne.n	8001cd8 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	6879      	ldr	r1, [r7, #4]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	011b      	lsls	r3, r3, #4
 8001cca:	1a9b      	subs	r3, r3, r2
 8001ccc:	009b      	lsls	r3, r3, #2
 8001cce:	440b      	add	r3, r1
 8001cd0:	332a      	adds	r3, #42	@ 0x2a
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001cd6:	e039      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cd8:	78fa      	ldrb	r2, [r7, #3]
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	011b      	lsls	r3, r3, #4
 8001ce0:	1a9b      	subs	r3, r3, r2
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	440b      	add	r3, r1
 8001ce6:	332a      	adds	r3, #42	@ 0x2a
 8001ce8:	2202      	movs	r2, #2
 8001cea:	701a      	strb	r2, [r3, #0]
      break;
 8001cec:	e02e      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001cee:	78fa      	ldrb	r2, [r7, #3]
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	011b      	lsls	r3, r3, #4
 8001cf6:	1a9b      	subs	r3, r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	333c      	adds	r3, #60	@ 0x3c
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10a      	bne.n	8001d1a <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d04:	78fa      	ldrb	r2, [r7, #3]
 8001d06:	6879      	ldr	r1, [r7, #4]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	011b      	lsls	r3, r3, #4
 8001d0c:	1a9b      	subs	r3, r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	440b      	add	r3, r1
 8001d12:	332a      	adds	r3, #42	@ 0x2a
 8001d14:	2200      	movs	r2, #0
 8001d16:	701a      	strb	r2, [r3, #0]
      break;
 8001d18:	e018      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d1a:	78fa      	ldrb	r2, [r7, #3]
 8001d1c:	6879      	ldr	r1, [r7, #4]
 8001d1e:	4613      	mov	r3, r2
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	1a9b      	subs	r3, r3, r2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	440b      	add	r3, r1
 8001d28:	332a      	adds	r3, #42	@ 0x2a
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	701a      	strb	r2, [r3, #0]
      break;
 8001d2e:	e00d      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d30:	78fa      	ldrb	r2, [r7, #3]
 8001d32:	6879      	ldr	r1, [r7, #4]
 8001d34:	4613      	mov	r3, r2
 8001d36:	011b      	lsls	r3, r3, #4
 8001d38:	1a9b      	subs	r3, r3, r2
 8001d3a:	009b      	lsls	r3, r3, #2
 8001d3c:	440b      	add	r3, r1
 8001d3e:	332a      	adds	r3, #42	@ 0x2a
 8001d40:	2200      	movs	r2, #0
 8001d42:	701a      	strb	r2, [r3, #0]
      break;
 8001d44:	e002      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8001d46:	bf00      	nop
 8001d48:	e000      	b.n	8001d4c <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001d4a:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001d4c:	78fa      	ldrb	r2, [r7, #3]
 8001d4e:	6879      	ldr	r1, [r7, #4]
 8001d50:	4613      	mov	r3, r2
 8001d52:	011b      	lsls	r3, r3, #4
 8001d54:	1a9b      	subs	r3, r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	440b      	add	r3, r1
 8001d5a:	332c      	adds	r3, #44	@ 0x2c
 8001d5c:	697a      	ldr	r2, [r7, #20]
 8001d5e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001d60:	78fa      	ldrb	r2, [r7, #3]
 8001d62:	8b39      	ldrh	r1, [r7, #24]
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	4613      	mov	r3, r2
 8001d68:	011b      	lsls	r3, r3, #4
 8001d6a:	1a9b      	subs	r3, r3, r2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	4403      	add	r3, r0
 8001d70:	3334      	adds	r3, #52	@ 0x34
 8001d72:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001d74:	78fa      	ldrb	r2, [r7, #3]
 8001d76:	6879      	ldr	r1, [r7, #4]
 8001d78:	4613      	mov	r3, r2
 8001d7a:	011b      	lsls	r3, r3, #4
 8001d7c:	1a9b      	subs	r3, r3, r2
 8001d7e:	009b      	lsls	r3, r3, #2
 8001d80:	440b      	add	r3, r1
 8001d82:	334c      	adds	r3, #76	@ 0x4c
 8001d84:	2200      	movs	r2, #0
 8001d86:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	011b      	lsls	r3, r3, #4
 8001d90:	1a9b      	subs	r3, r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	440b      	add	r3, r1
 8001d96:	3338      	adds	r3, #56	@ 0x38
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d9c:	78fa      	ldrb	r2, [r7, #3]
 8001d9e:	6879      	ldr	r1, [r7, #4]
 8001da0:	4613      	mov	r3, r2
 8001da2:	011b      	lsls	r3, r3, #4
 8001da4:	1a9b      	subs	r3, r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	440b      	add	r3, r1
 8001daa:	3315      	adds	r3, #21
 8001dac:	78fa      	ldrb	r2, [r7, #3]
 8001dae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	6879      	ldr	r1, [r7, #4]
 8001db4:	4613      	mov	r3, r2
 8001db6:	011b      	lsls	r3, r3, #4
 8001db8:	1a9b      	subs	r3, r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	440b      	add	r3, r1
 8001dbe:	334d      	adds	r3, #77	@ 0x4d
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6818      	ldr	r0, [r3, #0]
 8001dc8:	78fa      	ldrb	r2, [r7, #3]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	011b      	lsls	r3, r3, #4
 8001dce:	1a9b      	subs	r3, r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	3310      	adds	r3, #16
 8001dd4:	687a      	ldr	r2, [r7, #4]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	1d19      	adds	r1, r3, #4
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	799b      	ldrb	r3, [r3, #6]
 8001dde:	461a      	mov	r2, r3
 8001de0:	f004 f810 	bl	8005e04 <USB_HC_StartXfer>
 8001de4:	4603      	mov	r3, r0
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	3708      	adds	r7, #8
 8001dea:	46bd      	mov	sp, r7
 8001dec:	bd80      	pop	{r7, pc}
 8001dee:	bf00      	nop

08001df0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b086      	sub	sp, #24
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f003 fd30 	bl	800586c <USB_GetMode>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	f040 80fb 	bne.w	800200a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fcf3 	bl	8005804 <USB_ReadInterrupts>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80f1 	beq.w	8002008 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f003 fcea 	bl	8005804 <USB_ReadInterrupts>
 8001e30:	4603      	mov	r3, r0
 8001e32:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e36:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e3a:	d104      	bne.n	8001e46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001e44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f003 fcda 	bl	8005804 <USB_ReadInterrupts>
 8001e50:	4603      	mov	r3, r0
 8001e52:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e56:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001e5a:	d104      	bne.n	8001e66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8001e64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	f003 fcca 	bl	8005804 <USB_ReadInterrupts>
 8001e70:	4603      	mov	r3, r0
 8001e72:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001e76:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001e7a:	d104      	bne.n	8001e86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8001e84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f003 fcba 	bl	8005804 <USB_ReadInterrupts>
 8001e90:	4603      	mov	r3, r0
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d103      	bne.n	8001ea2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2202      	movs	r2, #2
 8001ea0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f003 fcac 	bl	8005804 <USB_ReadInterrupts>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001eb2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001eb6:	d120      	bne.n	8001efa <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001ec0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d113      	bne.n	8001efa <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001ed2:	2110      	movs	r1, #16
 8001ed4:	6938      	ldr	r0, [r7, #16]
 8001ed6:	f003 fb9f 	bl	8005618 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001eda:	6938      	ldr	r0, [r7, #16]
 8001edc:	f003 fbce 	bl	800567c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	7a5b      	ldrb	r3, [r3, #9]
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d105      	bne.n	8001ef4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2101      	movs	r1, #1
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f003 fdaa 	bl	8005a48 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	f00d f8f3 	bl	800f0e0 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f003 fc80 	bl	8005804 <USB_ReadInterrupts>
 8001f04:	4603      	mov	r3, r0
 8001f06:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001f0a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001f0e:	d102      	bne.n	8001f16 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f001 fd4d 	bl	80039b0 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f003 fc72 	bl	8005804 <USB_ReadInterrupts>
 8001f20:	4603      	mov	r3, r0
 8001f22:	f003 0308 	and.w	r3, r3, #8
 8001f26:	2b08      	cmp	r3, #8
 8001f28:	d106      	bne.n	8001f38 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f00d f8bc 	bl	800f0a8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2208      	movs	r2, #8
 8001f36:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f003 fc61 	bl	8005804 <USB_ReadInterrupts>
 8001f42:	4603      	mov	r3, r0
 8001f44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f48:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001f4c:	d139      	bne.n	8001fc2 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f99a 	bl	800628c <USB_HC_ReadInterrupt>
 8001f58:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	617b      	str	r3, [r7, #20]
 8001f5e:	e025      	b.n	8001fac <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	f003 030f 	and.w	r3, r3, #15
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6c:	f003 0301 	and.w	r3, r3, #1
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d018      	beq.n	8001fa6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	015a      	lsls	r2, r3, #5
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	4413      	add	r3, r2
 8001f7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001f86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f8a:	d106      	bne.n	8001f9a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	4619      	mov	r1, r3
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f905 	bl	80021a2 <HCD_HC_IN_IRQHandler>
 8001f98:	e005      	b.n	8001fa6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6878      	ldr	r0, [r7, #4]
 8001fa2:	f000 ff67 	bl	8002e74 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	795b      	ldrb	r3, [r3, #5]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d3d3      	bcc.n	8001f60 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001fc0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f003 fc1c 	bl	8005804 <USB_ReadInterrupts>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	2b10      	cmp	r3, #16
 8001fd4:	d101      	bne.n	8001fda <HAL_HCD_IRQHandler+0x1ea>
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e000      	b.n	8001fdc <HAL_HCD_IRQHandler+0x1ec>
 8001fda:	2300      	movs	r3, #0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d014      	beq.n	800200a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	699a      	ldr	r2, [r3, #24]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f022 0210 	bic.w	r2, r2, #16
 8001fee:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001ff0:	6878      	ldr	r0, [r7, #4]
 8001ff2:	f001 fbfe 	bl	80037f2 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	699a      	ldr	r2, [r3, #24]
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f042 0210 	orr.w	r2, r2, #16
 8002004:	619a      	str	r2, [r3, #24]
 8002006:	e000      	b.n	800200a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002008:	bf00      	nop
    }
  }
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800201e:	2b01      	cmp	r3, #1
 8002020:	d101      	bne.n	8002026 <HAL_HCD_Start+0x16>
 8002022:	2302      	movs	r3, #2
 8002024:	e013      	b.n	800204e <HAL_HCD_Start+0x3e>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	2101      	movs	r1, #1
 8002034:	4618      	mov	r0, r3
 8002036:	f003 fd6e 	bl	8005b16 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4618      	mov	r0, r3
 8002040:	f003 fa7c 	bl	800553c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	2200      	movs	r2, #0
 8002048:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800204c:	2300      	movs	r3, #0
}
 800204e:	4618      	mov	r0, r3
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}

08002056 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b082      	sub	sp, #8
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_HCD_Stop+0x16>
 8002068:	2302      	movs	r3, #2
 800206a:	e00d      	b.n	8002088 <HAL_HCD_Stop+0x32>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f004 fa38 	bl	80064ee <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	2200      	movs	r2, #0
 8002082:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002086:	2300      	movs	r3, #0
}
 8002088:	4618      	mov	r0, r3
 800208a:	3708      	adds	r7, #8
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}

08002090 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4618      	mov	r0, r3
 800209e:	f003 fd10 	bl	8005ac2 <USB_ResetPort>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3708      	adds	r7, #8
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
 80020b4:	460b      	mov	r3, r1
 80020b6:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80020b8:	78fa      	ldrb	r2, [r7, #3]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	011b      	lsls	r3, r3, #4
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	334c      	adds	r3, #76	@ 0x4c
 80020c8:	781b      	ldrb	r3, [r3, #0]
}
 80020ca:	4618      	mov	r0, r3
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80020d6:	b480      	push	{r7}
 80020d8:	b083      	sub	sp, #12
 80020da:	af00      	add	r7, sp, #0
 80020dc:	6078      	str	r0, [r7, #4]
 80020de:	460b      	mov	r3, r1
 80020e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80020e2:	78fa      	ldrb	r2, [r7, #3]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	011b      	lsls	r3, r3, #4
 80020ea:	1a9b      	subs	r3, r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	3338      	adds	r3, #56	@ 0x38
 80020f2:	681b      	ldr	r3, [r3, #0]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	370c      	adds	r7, #12
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr

08002100 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	4618      	mov	r0, r3
 800210e:	f003 fd52 	bl	8005bb6 <USB_GetCurrentFrame>
 8002112:	4603      	mov	r3, r0
}
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b082      	sub	sp, #8
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4618      	mov	r0, r3
 800212a:	f003 fd2d 	bl	8005b88 <USB_GetHostSpeed>
 800212e:	4603      	mov	r3, r0
}
 8002130:	4618      	mov	r0, r3
 8002132:	3708      	adds	r7, #8
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002138:	b480      	push	{r7}
 800213a:	b083      	sub	sp, #12
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	460b      	mov	r3, r1
 8002142:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002144:	78fa      	ldrb	r2, [r7, #3]
 8002146:	6879      	ldr	r1, [r7, #4]
 8002148:	4613      	mov	r3, r2
 800214a:	011b      	lsls	r3, r3, #4
 800214c:	1a9b      	subs	r3, r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	331a      	adds	r3, #26
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	331b      	adds	r3, #27
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	3325      	adds	r3, #37	@ 0x25
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3324      	adds	r3, #36	@ 0x24
 8002190:	2200      	movs	r2, #0
 8002192:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr

080021a2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	6078      	str	r0, [r7, #4]
 80021aa:	460b      	mov	r3, r1
 80021ac:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	4611      	mov	r1, r2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f003 fb32 	bl	800582a <USB_ReadChInterrupts>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f003 0304 	and.w	r3, r3, #4
 80021cc:	2b04      	cmp	r3, #4
 80021ce:	d11a      	bne.n	8002206 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	015a      	lsls	r2, r3, #5
 80021d4:	693b      	ldr	r3, [r7, #16]
 80021d6:	4413      	add	r3, r2
 80021d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80021dc:	461a      	mov	r2, r3
 80021de:	2304      	movs	r3, #4
 80021e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80021e2:	78fa      	ldrb	r2, [r7, #3]
 80021e4:	6879      	ldr	r1, [r7, #4]
 80021e6:	4613      	mov	r3, r2
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	1a9b      	subs	r3, r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	440b      	add	r3, r1
 80021f0:	334d      	adds	r3, #77	@ 0x4d
 80021f2:	2207      	movs	r2, #7
 80021f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	78fa      	ldrb	r2, [r7, #3]
 80021fc:	4611      	mov	r1, r2
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 f855 	bl	80062ae <USB_HC_Halt>
 8002204:	e09e      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	78fa      	ldrb	r2, [r7, #3]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f003 fb0b 	bl	800582a <USB_ReadChInterrupts>
 8002214:	4603      	mov	r3, r0
 8002216:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800221e:	d11b      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	015a      	lsls	r2, r3, #5
 8002224:	693b      	ldr	r3, [r7, #16]
 8002226:	4413      	add	r3, r2
 8002228:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800222c:	461a      	mov	r2, r3
 800222e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002232:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002234:	78fa      	ldrb	r2, [r7, #3]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	011b      	lsls	r3, r3, #4
 800223c:	1a9b      	subs	r3, r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	334d      	adds	r3, #77	@ 0x4d
 8002244:	2208      	movs	r2, #8
 8002246:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	78fa      	ldrb	r2, [r7, #3]
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f004 f82c 	bl	80062ae <USB_HC_Halt>
 8002256:	e075      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	78fa      	ldrb	r2, [r7, #3]
 800225e:	4611      	mov	r1, r2
 8002260:	4618      	mov	r0, r3
 8002262:	f003 fae2 	bl	800582a <USB_ReadChInterrupts>
 8002266:	4603      	mov	r3, r0
 8002268:	f003 0308 	and.w	r3, r3, #8
 800226c:	2b08      	cmp	r3, #8
 800226e:	d11a      	bne.n	80022a6 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002270:	78fb      	ldrb	r3, [r7, #3]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	2308      	movs	r3, #8
 8002280:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002282:	78fa      	ldrb	r2, [r7, #3]
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	4613      	mov	r3, r2
 8002288:	011b      	lsls	r3, r3, #4
 800228a:	1a9b      	subs	r3, r3, r2
 800228c:	009b      	lsls	r3, r3, #2
 800228e:	440b      	add	r3, r1
 8002290:	334d      	adds	r3, #77	@ 0x4d
 8002292:	2206      	movs	r2, #6
 8002294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	78fa      	ldrb	r2, [r7, #3]
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f004 f805 	bl	80062ae <USB_HC_Halt>
 80022a4:	e04e      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	78fa      	ldrb	r2, [r7, #3]
 80022ac:	4611      	mov	r1, r2
 80022ae:	4618      	mov	r0, r3
 80022b0:	f003 fabb 	bl	800582a <USB_ReadChInterrupts>
 80022b4:	4603      	mov	r3, r0
 80022b6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80022be:	d11b      	bne.n	80022f8 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80022c0:	78fb      	ldrb	r3, [r7, #3]
 80022c2:	015a      	lsls	r2, r3, #5
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4413      	add	r3, r2
 80022c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022cc:	461a      	mov	r2, r3
 80022ce:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80022d4:	78fa      	ldrb	r2, [r7, #3]
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	4613      	mov	r3, r2
 80022da:	011b      	lsls	r3, r3, #4
 80022dc:	1a9b      	subs	r3, r3, r2
 80022de:	009b      	lsls	r3, r3, #2
 80022e0:	440b      	add	r3, r1
 80022e2:	334d      	adds	r3, #77	@ 0x4d
 80022e4:	2209      	movs	r2, #9
 80022e6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	4611      	mov	r1, r2
 80022f0:	4618      	mov	r0, r3
 80022f2:	f003 ffdc 	bl	80062ae <USB_HC_Halt>
 80022f6:	e025      	b.n	8002344 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	4611      	mov	r1, r2
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fa92 	bl	800582a <USB_ReadChInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800230c:	2b80      	cmp	r3, #128	@ 0x80
 800230e:	d119      	bne.n	8002344 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002310:	78fb      	ldrb	r3, [r7, #3]
 8002312:	015a      	lsls	r2, r3, #5
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	4413      	add	r3, r2
 8002318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800231c:	461a      	mov	r2, r3
 800231e:	2380      	movs	r3, #128	@ 0x80
 8002320:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002322:	78fa      	ldrb	r2, [r7, #3]
 8002324:	6879      	ldr	r1, [r7, #4]
 8002326:	4613      	mov	r3, r2
 8002328:	011b      	lsls	r3, r3, #4
 800232a:	1a9b      	subs	r3, r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	440b      	add	r3, r1
 8002330:	334d      	adds	r3, #77	@ 0x4d
 8002332:	2207      	movs	r2, #7
 8002334:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	78fa      	ldrb	r2, [r7, #3]
 800233c:	4611      	mov	r1, r2
 800233e:	4618      	mov	r0, r3
 8002340:	f003 ffb5 	bl	80062ae <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	78fa      	ldrb	r2, [r7, #3]
 800234a:	4611      	mov	r1, r2
 800234c:	4618      	mov	r0, r3
 800234e:	f003 fa6c 	bl	800582a <USB_ReadChInterrupts>
 8002352:	4603      	mov	r3, r0
 8002354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002358:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800235c:	d112      	bne.n	8002384 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	78fa      	ldrb	r2, [r7, #3]
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f003 ffa1 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800236c:	78fb      	ldrb	r3, [r7, #3]
 800236e:	015a      	lsls	r2, r3, #5
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	4413      	add	r3, r2
 8002374:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002378:	461a      	mov	r2, r3
 800237a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800237e:	6093      	str	r3, [r2, #8]
 8002380:	f000 bd75 	b.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	4611      	mov	r1, r2
 800238c:	4618      	mov	r0, r3
 800238e:	f003 fa4c 	bl	800582a <USB_ReadChInterrupts>
 8002392:	4603      	mov	r3, r0
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	2b01      	cmp	r3, #1
 800239a:	f040 8128 	bne.w	80025ee <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023aa:	461a      	mov	r2, r3
 80023ac:	2320      	movs	r3, #32
 80023ae:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80023b0:	78fa      	ldrb	r2, [r7, #3]
 80023b2:	6879      	ldr	r1, [r7, #4]
 80023b4:	4613      	mov	r3, r2
 80023b6:	011b      	lsls	r3, r3, #4
 80023b8:	1a9b      	subs	r3, r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	440b      	add	r3, r1
 80023be:	331b      	adds	r3, #27
 80023c0:	781b      	ldrb	r3, [r3, #0]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d119      	bne.n	80023fa <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80023c6:	78fa      	ldrb	r2, [r7, #3]
 80023c8:	6879      	ldr	r1, [r7, #4]
 80023ca:	4613      	mov	r3, r2
 80023cc:	011b      	lsls	r3, r3, #4
 80023ce:	1a9b      	subs	r3, r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	331b      	adds	r3, #27
 80023d6:	2200      	movs	r2, #0
 80023d8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80023da:	78fb      	ldrb	r3, [r7, #3]
 80023dc:	015a      	lsls	r2, r3, #5
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	78fa      	ldrb	r2, [r7, #3]
 80023ea:	0151      	lsls	r1, r2, #5
 80023ec:	693a      	ldr	r2, [r7, #16]
 80023ee:	440a      	add	r2, r1
 80023f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023f8:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	799b      	ldrb	r3, [r3, #6]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d01b      	beq.n	800243a <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	6879      	ldr	r1, [r7, #4]
 8002406:	4613      	mov	r3, r2
 8002408:	011b      	lsls	r3, r3, #4
 800240a:	1a9b      	subs	r3, r3, r2
 800240c:	009b      	lsls	r3, r3, #2
 800240e:	440b      	add	r3, r1
 8002410:	3330      	adds	r3, #48	@ 0x30
 8002412:	6819      	ldr	r1, [r3, #0]
 8002414:	78fb      	ldrb	r3, [r7, #3]
 8002416:	015a      	lsls	r2, r3, #5
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	4413      	add	r3, r2
 800241c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002426:	78fa      	ldrb	r2, [r7, #3]
 8002428:	1ac9      	subs	r1, r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	4613      	mov	r3, r2
 800242e:	011b      	lsls	r3, r3, #4
 8002430:	1a9b      	subs	r3, r3, r2
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	4403      	add	r3, r0
 8002436:	3338      	adds	r3, #56	@ 0x38
 8002438:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 800243a:	78fa      	ldrb	r2, [r7, #3]
 800243c:	6879      	ldr	r1, [r7, #4]
 800243e:	4613      	mov	r3, r2
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	1a9b      	subs	r3, r3, r2
 8002444:	009b      	lsls	r3, r3, #2
 8002446:	440b      	add	r3, r1
 8002448:	334d      	adds	r3, #77	@ 0x4d
 800244a:	2201      	movs	r2, #1
 800244c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800244e:	78fa      	ldrb	r2, [r7, #3]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	4613      	mov	r3, r2
 8002454:	011b      	lsls	r3, r3, #4
 8002456:	1a9b      	subs	r3, r3, r2
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	440b      	add	r3, r1
 800245c:	3344      	adds	r3, #68	@ 0x44
 800245e:	2200      	movs	r2, #0
 8002460:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002462:	78fb      	ldrb	r3, [r7, #3]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800246e:	461a      	mov	r2, r3
 8002470:	2301      	movs	r3, #1
 8002472:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	3326      	adds	r3, #38	@ 0x26
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d00a      	beq.n	80024a0 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	3326      	adds	r3, #38	@ 0x26
 800249a:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800249c:	2b02      	cmp	r3, #2
 800249e:	d110      	bne.n	80024c2 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	4611      	mov	r1, r2
 80024a8:	4618      	mov	r0, r3
 80024aa:	f003 ff00 	bl	80062ae <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80024ae:	78fb      	ldrb	r3, [r7, #3]
 80024b0:	015a      	lsls	r2, r3, #5
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4413      	add	r3, r2
 80024b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024ba:	461a      	mov	r2, r3
 80024bc:	2310      	movs	r3, #16
 80024be:	6093      	str	r3, [r2, #8]
 80024c0:	e03d      	b.n	800253e <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3326      	adds	r3, #38	@ 0x26
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	2b03      	cmp	r3, #3
 80024d6:	d00a      	beq.n	80024ee <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80024d8:	78fa      	ldrb	r2, [r7, #3]
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	011b      	lsls	r3, r3, #4
 80024e0:	1a9b      	subs	r3, r3, r2
 80024e2:	009b      	lsls	r3, r3, #2
 80024e4:	440b      	add	r3, r1
 80024e6:	3326      	adds	r3, #38	@ 0x26
 80024e8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80024ea:	2b01      	cmp	r3, #1
 80024ec:	d127      	bne.n	800253e <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024ee:	78fb      	ldrb	r3, [r7, #3]
 80024f0:	015a      	lsls	r2, r3, #5
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4413      	add	r3, r2
 80024f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	78fa      	ldrb	r2, [r7, #3]
 80024fe:	0151      	lsls	r1, r2, #5
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	440a      	add	r2, r1
 8002504:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002508:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800250c:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800250e:	78fa      	ldrb	r2, [r7, #3]
 8002510:	6879      	ldr	r1, [r7, #4]
 8002512:	4613      	mov	r3, r2
 8002514:	011b      	lsls	r3, r3, #4
 8002516:	1a9b      	subs	r3, r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	334c      	adds	r3, #76	@ 0x4c
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002522:	78fa      	ldrb	r2, [r7, #3]
 8002524:	6879      	ldr	r1, [r7, #4]
 8002526:	4613      	mov	r3, r2
 8002528:	011b      	lsls	r3, r3, #4
 800252a:	1a9b      	subs	r3, r3, r2
 800252c:	009b      	lsls	r3, r3, #2
 800252e:	440b      	add	r3, r1
 8002530:	334c      	adds	r3, #76	@ 0x4c
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	78fb      	ldrb	r3, [r7, #3]
 8002536:	4619      	mov	r1, r3
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f00c fddf 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	799b      	ldrb	r3, [r3, #6]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d13b      	bne.n	80025be <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002546:	78fa      	ldrb	r2, [r7, #3]
 8002548:	6879      	ldr	r1, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	011b      	lsls	r3, r3, #4
 800254e:	1a9b      	subs	r3, r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	440b      	add	r3, r1
 8002554:	3338      	adds	r3, #56	@ 0x38
 8002556:	6819      	ldr	r1, [r3, #0]
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6878      	ldr	r0, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4403      	add	r3, r0
 8002566:	3328      	adds	r3, #40	@ 0x28
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	440b      	add	r3, r1
 800256c:	1e59      	subs	r1, r3, #1
 800256e:	78fa      	ldrb	r2, [r7, #3]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4403      	add	r3, r0
 800257c:	3328      	adds	r3, #40	@ 0x28
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	fbb1 f3f3 	udiv	r3, r1, r3
 8002584:	f003 0301 	and.w	r3, r3, #1
 8002588:	2b00      	cmp	r3, #0
 800258a:	f000 8470 	beq.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800258e:	78fa      	ldrb	r2, [r7, #3]
 8002590:	6879      	ldr	r1, [r7, #4]
 8002592:	4613      	mov	r3, r2
 8002594:	011b      	lsls	r3, r3, #4
 8002596:	1a9b      	subs	r3, r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	440b      	add	r3, r1
 800259c:	333c      	adds	r3, #60	@ 0x3c
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	78fa      	ldrb	r2, [r7, #3]
 80025a2:	f083 0301 	eor.w	r3, r3, #1
 80025a6:	b2d8      	uxtb	r0, r3
 80025a8:	6879      	ldr	r1, [r7, #4]
 80025aa:	4613      	mov	r3, r2
 80025ac:	011b      	lsls	r3, r3, #4
 80025ae:	1a9b      	subs	r3, r3, r2
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	440b      	add	r3, r1
 80025b4:	333c      	adds	r3, #60	@ 0x3c
 80025b6:	4602      	mov	r2, r0
 80025b8:	701a      	strb	r2, [r3, #0]
 80025ba:	f000 bc58 	b.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 80025be:	78fa      	ldrb	r2, [r7, #3]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	011b      	lsls	r3, r3, #4
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	333c      	adds	r3, #60	@ 0x3c
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	78fa      	ldrb	r2, [r7, #3]
 80025d2:	f083 0301 	eor.w	r3, r3, #1
 80025d6:	b2d8      	uxtb	r0, r3
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	011b      	lsls	r3, r3, #4
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	333c      	adds	r3, #60	@ 0x3c
 80025e6:	4602      	mov	r2, r0
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	f000 bc40 	b.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	78fa      	ldrb	r2, [r7, #3]
 80025f4:	4611      	mov	r1, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	f003 f917 	bl	800582a <USB_ReadChInterrupts>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f003 0320 	and.w	r3, r3, #32
 8002602:	2b20      	cmp	r3, #32
 8002604:	d131      	bne.n	800266a <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002606:	78fb      	ldrb	r3, [r7, #3]
 8002608:	015a      	lsls	r2, r3, #5
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	4413      	add	r3, r2
 800260e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002612:	461a      	mov	r2, r3
 8002614:	2320      	movs	r3, #32
 8002616:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	331a      	adds	r3, #26
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b01      	cmp	r3, #1
 800262c:	f040 841f 	bne.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002630:	78fa      	ldrb	r2, [r7, #3]
 8002632:	6879      	ldr	r1, [r7, #4]
 8002634:	4613      	mov	r3, r2
 8002636:	011b      	lsls	r3, r3, #4
 8002638:	1a9b      	subs	r3, r3, r2
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	440b      	add	r3, r1
 800263e:	331b      	adds	r3, #27
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002644:	78fa      	ldrb	r2, [r7, #3]
 8002646:	6879      	ldr	r1, [r7, #4]
 8002648:	4613      	mov	r3, r2
 800264a:	011b      	lsls	r3, r3, #4
 800264c:	1a9b      	subs	r3, r3, r2
 800264e:	009b      	lsls	r3, r3, #2
 8002650:	440b      	add	r3, r1
 8002652:	334d      	adds	r3, #77	@ 0x4d
 8002654:	2203      	movs	r2, #3
 8002656:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	78fa      	ldrb	r2, [r7, #3]
 800265e:	4611      	mov	r1, r2
 8002660:	4618      	mov	r0, r3
 8002662:	f003 fe24 	bl	80062ae <USB_HC_Halt>
 8002666:	f000 bc02 	b.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	78fa      	ldrb	r2, [r7, #3]
 8002670:	4611      	mov	r1, r2
 8002672:	4618      	mov	r0, r3
 8002674:	f003 f8d9 	bl	800582a <USB_ReadChInterrupts>
 8002678:	4603      	mov	r3, r0
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b02      	cmp	r3, #2
 8002680:	f040 8305 	bne.w	8002c8e <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002684:	78fb      	ldrb	r3, [r7, #3]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002690:	461a      	mov	r2, r3
 8002692:	2302      	movs	r3, #2
 8002694:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002696:	78fa      	ldrb	r2, [r7, #3]
 8002698:	6879      	ldr	r1, [r7, #4]
 800269a:	4613      	mov	r3, r2
 800269c:	011b      	lsls	r3, r3, #4
 800269e:	1a9b      	subs	r3, r3, r2
 80026a0:	009b      	lsls	r3, r3, #2
 80026a2:	440b      	add	r3, r1
 80026a4:	334d      	adds	r3, #77	@ 0x4d
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d114      	bne.n	80026d6 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026ac:	78fa      	ldrb	r2, [r7, #3]
 80026ae:	6879      	ldr	r1, [r7, #4]
 80026b0:	4613      	mov	r3, r2
 80026b2:	011b      	lsls	r3, r3, #4
 80026b4:	1a9b      	subs	r3, r3, r2
 80026b6:	009b      	lsls	r3, r3, #2
 80026b8:	440b      	add	r3, r1
 80026ba:	334d      	adds	r3, #77	@ 0x4d
 80026bc:	2202      	movs	r2, #2
 80026be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	334c      	adds	r3, #76	@ 0x4c
 80026d0:	2201      	movs	r2, #1
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e2cc      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	334d      	adds	r3, #77	@ 0x4d
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b06      	cmp	r3, #6
 80026ea:	d114      	bne.n	8002716 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	334d      	adds	r3, #77	@ 0x4d
 80026fc:	2202      	movs	r2, #2
 80026fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	4613      	mov	r3, r2
 8002706:	011b      	lsls	r3, r3, #4
 8002708:	1a9b      	subs	r3, r3, r2
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	440b      	add	r3, r1
 800270e:	334c      	adds	r3, #76	@ 0x4c
 8002710:	2205      	movs	r2, #5
 8002712:	701a      	strb	r2, [r3, #0]
 8002714:	e2ac      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002716:	78fa      	ldrb	r2, [r7, #3]
 8002718:	6879      	ldr	r1, [r7, #4]
 800271a:	4613      	mov	r3, r2
 800271c:	011b      	lsls	r3, r3, #4
 800271e:	1a9b      	subs	r3, r3, r2
 8002720:	009b      	lsls	r3, r3, #2
 8002722:	440b      	add	r3, r1
 8002724:	334d      	adds	r3, #77	@ 0x4d
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b07      	cmp	r3, #7
 800272a:	d00b      	beq.n	8002744 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800272c:	78fa      	ldrb	r2, [r7, #3]
 800272e:	6879      	ldr	r1, [r7, #4]
 8002730:	4613      	mov	r3, r2
 8002732:	011b      	lsls	r3, r3, #4
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	009b      	lsls	r3, r3, #2
 8002738:	440b      	add	r3, r1
 800273a:	334d      	adds	r3, #77	@ 0x4d
 800273c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800273e:	2b09      	cmp	r3, #9
 8002740:	f040 80a6 	bne.w	8002890 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	334d      	adds	r3, #77	@ 0x4d
 8002754:	2202      	movs	r2, #2
 8002756:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3344      	adds	r3, #68	@ 0x44
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	1c59      	adds	r1, r3, #1
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	4613      	mov	r3, r2
 8002770:	011b      	lsls	r3, r3, #4
 8002772:	1a9b      	subs	r3, r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4403      	add	r3, r0
 8002778:	3344      	adds	r3, #68	@ 0x44
 800277a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800277c:	78fa      	ldrb	r2, [r7, #3]
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4613      	mov	r3, r2
 8002782:	011b      	lsls	r3, r3, #4
 8002784:	1a9b      	subs	r3, r3, r2
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	440b      	add	r3, r1
 800278a:	3344      	adds	r3, #68	@ 0x44
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	2b02      	cmp	r3, #2
 8002790:	d943      	bls.n	800281a <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002792:	78fa      	ldrb	r2, [r7, #3]
 8002794:	6879      	ldr	r1, [r7, #4]
 8002796:	4613      	mov	r3, r2
 8002798:	011b      	lsls	r3, r3, #4
 800279a:	1a9b      	subs	r3, r3, r2
 800279c:	009b      	lsls	r3, r3, #2
 800279e:	440b      	add	r3, r1
 80027a0:	3344      	adds	r3, #68	@ 0x44
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80027a6:	78fa      	ldrb	r2, [r7, #3]
 80027a8:	6879      	ldr	r1, [r7, #4]
 80027aa:	4613      	mov	r3, r2
 80027ac:	011b      	lsls	r3, r3, #4
 80027ae:	1a9b      	subs	r3, r3, r2
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	440b      	add	r3, r1
 80027b4:	331a      	adds	r3, #26
 80027b6:	781b      	ldrb	r3, [r3, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d123      	bne.n	8002804 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80027bc:	78fa      	ldrb	r2, [r7, #3]
 80027be:	6879      	ldr	r1, [r7, #4]
 80027c0:	4613      	mov	r3, r2
 80027c2:	011b      	lsls	r3, r3, #4
 80027c4:	1a9b      	subs	r3, r3, r2
 80027c6:	009b      	lsls	r3, r3, #2
 80027c8:	440b      	add	r3, r1
 80027ca:	331b      	adds	r3, #27
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80027d0:	78fa      	ldrb	r2, [r7, #3]
 80027d2:	6879      	ldr	r1, [r7, #4]
 80027d4:	4613      	mov	r3, r2
 80027d6:	011b      	lsls	r3, r3, #4
 80027d8:	1a9b      	subs	r3, r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	440b      	add	r3, r1
 80027de:	331c      	adds	r3, #28
 80027e0:	2200      	movs	r2, #0
 80027e2:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80027e4:	78fb      	ldrb	r3, [r7, #3]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	0151      	lsls	r1, r2, #5
 80027f6:	693a      	ldr	r2, [r7, #16]
 80027f8:	440a      	add	r2, r1
 80027fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80027fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002802:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002804:	78fa      	ldrb	r2, [r7, #3]
 8002806:	6879      	ldr	r1, [r7, #4]
 8002808:	4613      	mov	r3, r2
 800280a:	011b      	lsls	r3, r3, #4
 800280c:	1a9b      	subs	r3, r3, r2
 800280e:	009b      	lsls	r3, r3, #2
 8002810:	440b      	add	r3, r1
 8002812:	334c      	adds	r3, #76	@ 0x4c
 8002814:	2204      	movs	r2, #4
 8002816:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002818:	e229      	b.n	8002c6e <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800281a:	78fa      	ldrb	r2, [r7, #3]
 800281c:	6879      	ldr	r1, [r7, #4]
 800281e:	4613      	mov	r3, r2
 8002820:	011b      	lsls	r3, r3, #4
 8002822:	1a9b      	subs	r3, r3, r2
 8002824:	009b      	lsls	r3, r3, #2
 8002826:	440b      	add	r3, r1
 8002828:	334c      	adds	r3, #76	@ 0x4c
 800282a:	2202      	movs	r2, #2
 800282c:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800282e:	78fa      	ldrb	r2, [r7, #3]
 8002830:	6879      	ldr	r1, [r7, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	011b      	lsls	r3, r3, #4
 8002836:	1a9b      	subs	r3, r3, r2
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	440b      	add	r3, r1
 800283c:	3326      	adds	r3, #38	@ 0x26
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	2b00      	cmp	r3, #0
 8002842:	d00b      	beq.n	800285c <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002844:	78fa      	ldrb	r2, [r7, #3]
 8002846:	6879      	ldr	r1, [r7, #4]
 8002848:	4613      	mov	r3, r2
 800284a:	011b      	lsls	r3, r3, #4
 800284c:	1a9b      	subs	r3, r3, r2
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	440b      	add	r3, r1
 8002852:	3326      	adds	r3, #38	@ 0x26
 8002854:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002856:	2b02      	cmp	r3, #2
 8002858:	f040 8209 	bne.w	8002c6e <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002872:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800287a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	4413      	add	r3, r2
 8002884:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002888:	461a      	mov	r2, r3
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800288e:	e1ee      	b.n	8002c6e <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002890:	78fa      	ldrb	r2, [r7, #3]
 8002892:	6879      	ldr	r1, [r7, #4]
 8002894:	4613      	mov	r3, r2
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	1a9b      	subs	r3, r3, r2
 800289a:	009b      	lsls	r3, r3, #2
 800289c:	440b      	add	r3, r1
 800289e:	334d      	adds	r3, #77	@ 0x4d
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	2b05      	cmp	r3, #5
 80028a4:	f040 80c8 	bne.w	8002a38 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	6879      	ldr	r1, [r7, #4]
 80028ac:	4613      	mov	r3, r2
 80028ae:	011b      	lsls	r3, r3, #4
 80028b0:	1a9b      	subs	r3, r3, r2
 80028b2:	009b      	lsls	r3, r3, #2
 80028b4:	440b      	add	r3, r1
 80028b6:	334d      	adds	r3, #77	@ 0x4d
 80028b8:	2202      	movs	r2, #2
 80028ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	331b      	adds	r3, #27
 80028cc:	781b      	ldrb	r3, [r3, #0]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	f040 81ce 	bne.w	8002c70 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80028d4:	78fa      	ldrb	r2, [r7, #3]
 80028d6:	6879      	ldr	r1, [r7, #4]
 80028d8:	4613      	mov	r3, r2
 80028da:	011b      	lsls	r3, r3, #4
 80028dc:	1a9b      	subs	r3, r3, r2
 80028de:	009b      	lsls	r3, r3, #2
 80028e0:	440b      	add	r3, r1
 80028e2:	3326      	adds	r3, #38	@ 0x26
 80028e4:	781b      	ldrb	r3, [r3, #0]
 80028e6:	2b03      	cmp	r3, #3
 80028e8:	d16b      	bne.n	80029c2 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80028ea:	78fa      	ldrb	r2, [r7, #3]
 80028ec:	6879      	ldr	r1, [r7, #4]
 80028ee:	4613      	mov	r3, r2
 80028f0:	011b      	lsls	r3, r3, #4
 80028f2:	1a9b      	subs	r3, r3, r2
 80028f4:	009b      	lsls	r3, r3, #2
 80028f6:	440b      	add	r3, r1
 80028f8:	3348      	adds	r3, #72	@ 0x48
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	1c59      	adds	r1, r3, #1
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	011b      	lsls	r3, r3, #4
 8002904:	1a9b      	subs	r3, r3, r2
 8002906:	009b      	lsls	r3, r3, #2
 8002908:	4403      	add	r3, r0
 800290a:	3348      	adds	r3, #72	@ 0x48
 800290c:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	3348      	adds	r3, #72	@ 0x48
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	2b02      	cmp	r3, #2
 8002922:	d943      	bls.n	80029ac <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002924:	78fa      	ldrb	r2, [r7, #3]
 8002926:	6879      	ldr	r1, [r7, #4]
 8002928:	4613      	mov	r3, r2
 800292a:	011b      	lsls	r3, r3, #4
 800292c:	1a9b      	subs	r3, r3, r2
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	440b      	add	r3, r1
 8002932:	3348      	adds	r3, #72	@ 0x48
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002938:	78fa      	ldrb	r2, [r7, #3]
 800293a:	6879      	ldr	r1, [r7, #4]
 800293c:	4613      	mov	r3, r2
 800293e:	011b      	lsls	r3, r3, #4
 8002940:	1a9b      	subs	r3, r3, r2
 8002942:	009b      	lsls	r3, r3, #2
 8002944:	440b      	add	r3, r1
 8002946:	331b      	adds	r3, #27
 8002948:	2200      	movs	r2, #0
 800294a:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 800294c:	78fa      	ldrb	r2, [r7, #3]
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	440b      	add	r3, r1
 800295a:	3344      	adds	r3, #68	@ 0x44
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d809      	bhi.n	8002976 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002962:	78fa      	ldrb	r2, [r7, #3]
 8002964:	6879      	ldr	r1, [r7, #4]
 8002966:	4613      	mov	r3, r2
 8002968:	011b      	lsls	r3, r3, #4
 800296a:	1a9b      	subs	r3, r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	331c      	adds	r3, #28
 8002972:	2201      	movs	r2, #1
 8002974:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002976:	78fb      	ldrb	r3, [r7, #3]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	693b      	ldr	r3, [r7, #16]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	0151      	lsls	r1, r2, #5
 8002988:	693a      	ldr	r2, [r7, #16]
 800298a:	440a      	add	r2, r1
 800298c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002990:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002994:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002996:	78fa      	ldrb	r2, [r7, #3]
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	4613      	mov	r3, r2
 800299c:	011b      	lsls	r3, r3, #4
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	009b      	lsls	r3, r3, #2
 80029a2:	440b      	add	r3, r1
 80029a4:	334c      	adds	r3, #76	@ 0x4c
 80029a6:	2204      	movs	r2, #4
 80029a8:	701a      	strb	r2, [r3, #0]
 80029aa:	e014      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029ac:	78fa      	ldrb	r2, [r7, #3]
 80029ae:	6879      	ldr	r1, [r7, #4]
 80029b0:	4613      	mov	r3, r2
 80029b2:	011b      	lsls	r3, r3, #4
 80029b4:	1a9b      	subs	r3, r3, r2
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	440b      	add	r3, r1
 80029ba:	334c      	adds	r3, #76	@ 0x4c
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
 80029c0:	e009      	b.n	80029d6 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80029c2:	78fa      	ldrb	r2, [r7, #3]
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	4613      	mov	r3, r2
 80029c8:	011b      	lsls	r3, r3, #4
 80029ca:	1a9b      	subs	r3, r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	440b      	add	r3, r1
 80029d0:	334c      	adds	r3, #76	@ 0x4c
 80029d2:	2202      	movs	r2, #2
 80029d4:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029d6:	78fa      	ldrb	r2, [r7, #3]
 80029d8:	6879      	ldr	r1, [r7, #4]
 80029da:	4613      	mov	r3, r2
 80029dc:	011b      	lsls	r3, r3, #4
 80029de:	1a9b      	subs	r3, r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	440b      	add	r3, r1
 80029e4:	3326      	adds	r3, #38	@ 0x26
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00b      	beq.n	8002a04 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029ec:	78fa      	ldrb	r2, [r7, #3]
 80029ee:	6879      	ldr	r1, [r7, #4]
 80029f0:	4613      	mov	r3, r2
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	1a9b      	subs	r3, r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	440b      	add	r3, r1
 80029fa:	3326      	adds	r3, #38	@ 0x26
 80029fc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	f040 8136 	bne.w	8002c70 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002a1a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002a22:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	015a      	lsls	r2, r3, #5
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	4413      	add	r3, r2
 8002a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a30:	461a      	mov	r2, r3
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6013      	str	r3, [r2, #0]
 8002a36:	e11b      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002a38:	78fa      	ldrb	r2, [r7, #3]
 8002a3a:	6879      	ldr	r1, [r7, #4]
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	1a9b      	subs	r3, r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	440b      	add	r3, r1
 8002a46:	334d      	adds	r3, #77	@ 0x4d
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	f040 8081 	bne.w	8002b52 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	334d      	adds	r3, #77	@ 0x4d
 8002a60:	2202      	movs	r2, #2
 8002a62:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	440b      	add	r3, r1
 8002a72:	331b      	adds	r3, #27
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	f040 80fa 	bne.w	8002c70 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002a7c:	78fa      	ldrb	r2, [r7, #3]
 8002a7e:	6879      	ldr	r1, [r7, #4]
 8002a80:	4613      	mov	r3, r2
 8002a82:	011b      	lsls	r3, r3, #4
 8002a84:	1a9b      	subs	r3, r3, r2
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	334c      	adds	r3, #76	@ 0x4c
 8002a8c:	2202      	movs	r2, #2
 8002a8e:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	015a      	lsls	r2, r3, #5
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	4413      	add	r3, r2
 8002a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	0151      	lsls	r1, r2, #5
 8002aa2:	693a      	ldr	r2, [r7, #16]
 8002aa4:	440a      	add	r2, r1
 8002aa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aaa:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002aae:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abc:	68db      	ldr	r3, [r3, #12]
 8002abe:	78fa      	ldrb	r2, [r7, #3]
 8002ac0:	0151      	lsls	r1, r2, #5
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	440a      	add	r2, r1
 8002ac6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002ace:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002ad0:	78fb      	ldrb	r3, [r7, #3]
 8002ad2:	015a      	lsls	r2, r3, #5
 8002ad4:	693b      	ldr	r3, [r7, #16]
 8002ad6:	4413      	add	r3, r2
 8002ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002adc:	68db      	ldr	r3, [r3, #12]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	0151      	lsls	r1, r2, #5
 8002ae2:	693a      	ldr	r2, [r7, #16]
 8002ae4:	440a      	add	r2, r1
 8002ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002aea:	f023 0320 	bic.w	r3, r3, #32
 8002aee:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002af0:	78fa      	ldrb	r2, [r7, #3]
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	4613      	mov	r3, r2
 8002af6:	011b      	lsls	r3, r3, #4
 8002af8:	1a9b      	subs	r3, r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	3326      	adds	r3, #38	@ 0x26
 8002b00:	781b      	ldrb	r3, [r3, #0]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002b06:	78fa      	ldrb	r2, [r7, #3]
 8002b08:	6879      	ldr	r1, [r7, #4]
 8002b0a:	4613      	mov	r3, r2
 8002b0c:	011b      	lsls	r3, r3, #4
 8002b0e:	1a9b      	subs	r3, r3, r2
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	440b      	add	r3, r1
 8002b14:	3326      	adds	r3, #38	@ 0x26
 8002b16:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	f040 80a9 	bne.w	8002c70 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002b34:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002b3c:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002b3e:	78fb      	ldrb	r3, [r7, #3]
 8002b40:	015a      	lsls	r2, r3, #5
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	4413      	add	r3, r2
 8002b46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b4a:	461a      	mov	r2, r3
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6013      	str	r3, [r2, #0]
 8002b50:	e08e      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	6879      	ldr	r1, [r7, #4]
 8002b56:	4613      	mov	r3, r2
 8002b58:	011b      	lsls	r3, r3, #4
 8002b5a:	1a9b      	subs	r3, r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	440b      	add	r3, r1
 8002b60:	334d      	adds	r3, #77	@ 0x4d
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d143      	bne.n	8002bf0 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002b68:	78fa      	ldrb	r2, [r7, #3]
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	4613      	mov	r3, r2
 8002b6e:	011b      	lsls	r3, r3, #4
 8002b70:	1a9b      	subs	r3, r3, r2
 8002b72:	009b      	lsls	r3, r3, #2
 8002b74:	440b      	add	r3, r1
 8002b76:	334d      	adds	r3, #77	@ 0x4d
 8002b78:	2202      	movs	r2, #2
 8002b7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002b7c:	78fa      	ldrb	r2, [r7, #3]
 8002b7e:	6879      	ldr	r1, [r7, #4]
 8002b80:	4613      	mov	r3, r2
 8002b82:	011b      	lsls	r3, r3, #4
 8002b84:	1a9b      	subs	r3, r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	334c      	adds	r3, #76	@ 0x4c
 8002b8c:	2202      	movs	r2, #2
 8002b8e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002b90:	78fa      	ldrb	r2, [r7, #3]
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	4613      	mov	r3, r2
 8002b96:	011b      	lsls	r3, r3, #4
 8002b98:	1a9b      	subs	r3, r3, r2
 8002b9a:	009b      	lsls	r3, r3, #2
 8002b9c:	440b      	add	r3, r1
 8002b9e:	3326      	adds	r3, #38	@ 0x26
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	3326      	adds	r3, #38	@ 0x26
 8002bb6:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb8:	2b02      	cmp	r3, #2
 8002bba:	d159      	bne.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002bbc:	78fb      	ldrb	r3, [r7, #3]
 8002bbe:	015a      	lsls	r2, r3, #5
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002bd2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002bda:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be8:	461a      	mov	r2, r3
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6013      	str	r3, [r2, #0]
 8002bee:	e03f      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d126      	bne.n	8002c54 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	334d      	adds	r3, #77	@ 0x4d
 8002c16:	2202      	movs	r2, #2
 8002c18:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c1a:	78fa      	ldrb	r2, [r7, #3]
 8002c1c:	6879      	ldr	r1, [r7, #4]
 8002c1e:	4613      	mov	r3, r2
 8002c20:	011b      	lsls	r3, r3, #4
 8002c22:	1a9b      	subs	r3, r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	440b      	add	r3, r1
 8002c28:	3344      	adds	r3, #68	@ 0x44
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	1c59      	adds	r1, r3, #1
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4613      	mov	r3, r2
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a9b      	subs	r3, r3, r2
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4403      	add	r3, r0
 8002c3a:	3344      	adds	r3, #68	@ 0x44
 8002c3c:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334c      	adds	r3, #76	@ 0x4c
 8002c4e:	2204      	movs	r2, #4
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e00d      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	@ 0x4d
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	f000 8100 	beq.w	8002e6c <HCD_HC_IN_IRQHandler+0xcca>
 8002c6c:	e000      	b.n	8002c70 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c6e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c70:	78fa      	ldrb	r2, [r7, #3]
 8002c72:	6879      	ldr	r1, [r7, #4]
 8002c74:	4613      	mov	r3, r2
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	1a9b      	subs	r3, r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	440b      	add	r3, r1
 8002c7e:	334c      	adds	r3, #76	@ 0x4c
 8002c80:	781a      	ldrb	r2, [r3, #0]
 8002c82:	78fb      	ldrb	r3, [r7, #3]
 8002c84:	4619      	mov	r1, r3
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f00c fa38 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c8c:	e0ef      	b.n	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	78fa      	ldrb	r2, [r7, #3]
 8002c94:	4611      	mov	r1, r2
 8002c96:	4618      	mov	r0, r3
 8002c98:	f002 fdc7 	bl	800582a <USB_ReadChInterrupts>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ca2:	2b40      	cmp	r3, #64	@ 0x40
 8002ca4:	d12f      	bne.n	8002d06 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ca6:	78fb      	ldrb	r3, [r7, #3]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cb2:	461a      	mov	r2, r3
 8002cb4:	2340      	movs	r3, #64	@ 0x40
 8002cb6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	6879      	ldr	r1, [r7, #4]
 8002cbc:	4613      	mov	r3, r2
 8002cbe:	011b      	lsls	r3, r3, #4
 8002cc0:	1a9b      	subs	r3, r3, r2
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	440b      	add	r3, r1
 8002cc6:	334d      	adds	r3, #77	@ 0x4d
 8002cc8:	2205      	movs	r2, #5
 8002cca:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002ccc:	78fa      	ldrb	r2, [r7, #3]
 8002cce:	6879      	ldr	r1, [r7, #4]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	011b      	lsls	r3, r3, #4
 8002cd4:	1a9b      	subs	r3, r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	331a      	adds	r3, #26
 8002cdc:	781b      	ldrb	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d109      	bne.n	8002cf6 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	6879      	ldr	r1, [r7, #4]
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	011b      	lsls	r3, r3, #4
 8002cea:	1a9b      	subs	r3, r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	440b      	add	r3, r1
 8002cf0:	3344      	adds	r3, #68	@ 0x44
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	4611      	mov	r1, r2
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f003 fad5 	bl	80062ae <USB_HC_Halt>
 8002d04:	e0b3      	b.n	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	4611      	mov	r1, r2
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f002 fd8b 	bl	800582a <USB_ReadChInterrupts>
 8002d14:	4603      	mov	r3, r0
 8002d16:	f003 0310 	and.w	r3, r3, #16
 8002d1a:	2b10      	cmp	r3, #16
 8002d1c:	f040 80a7 	bne.w	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3326      	adds	r3, #38	@ 0x26
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	d11b      	bne.n	8002d6e <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	011b      	lsls	r3, r3, #4
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	440b      	add	r3, r1
 8002d44:	3344      	adds	r3, #68	@ 0x44
 8002d46:	2200      	movs	r2, #0
 8002d48:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	334d      	adds	r3, #77	@ 0x4d
 8002d5a:	2204      	movs	r2, #4
 8002d5c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	78fa      	ldrb	r2, [r7, #3]
 8002d64:	4611      	mov	r1, r2
 8002d66:	4618      	mov	r0, r3
 8002d68:	f003 faa1 	bl	80062ae <USB_HC_Halt>
 8002d6c:	e03f      	b.n	8002dee <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d6e:	78fa      	ldrb	r2, [r7, #3]
 8002d70:	6879      	ldr	r1, [r7, #4]
 8002d72:	4613      	mov	r3, r2
 8002d74:	011b      	lsls	r3, r3, #4
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	009b      	lsls	r3, r3, #2
 8002d7a:	440b      	add	r3, r1
 8002d7c:	3326      	adds	r3, #38	@ 0x26
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d00a      	beq.n	8002d9a <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d84:	78fa      	ldrb	r2, [r7, #3]
 8002d86:	6879      	ldr	r1, [r7, #4]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	011b      	lsls	r3, r3, #4
 8002d8c:	1a9b      	subs	r3, r3, r2
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	3326      	adds	r3, #38	@ 0x26
 8002d94:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d129      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	3344      	adds	r3, #68	@ 0x44
 8002daa:	2200      	movs	r2, #0
 8002dac:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	799b      	ldrb	r3, [r3, #6]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HCD_HC_IN_IRQHandler+0xc2a>
 8002db6:	78fa      	ldrb	r2, [r7, #3]
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	4613      	mov	r3, r2
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	1a9b      	subs	r3, r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	440b      	add	r3, r1
 8002dc4:	331b      	adds	r3, #27
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d110      	bne.n	8002dee <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8002dcc:	78fa      	ldrb	r2, [r7, #3]
 8002dce:	6879      	ldr	r1, [r7, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	011b      	lsls	r3, r3, #4
 8002dd4:	1a9b      	subs	r3, r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	440b      	add	r3, r1
 8002dda:	334d      	adds	r3, #77	@ 0x4d
 8002ddc:	2204      	movs	r2, #4
 8002dde:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	78fa      	ldrb	r2, [r7, #3]
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 fa60 	bl	80062ae <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002dee:	78fa      	ldrb	r2, [r7, #3]
 8002df0:	6879      	ldr	r1, [r7, #4]
 8002df2:	4613      	mov	r3, r2
 8002df4:	011b      	lsls	r3, r3, #4
 8002df6:	1a9b      	subs	r3, r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	440b      	add	r3, r1
 8002dfc:	331b      	adds	r3, #27
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d129      	bne.n	8002e58 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	331b      	adds	r3, #27
 8002e14:	2200      	movs	r2, #0
 8002e16:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e18:	78fb      	ldrb	r3, [r7, #3]
 8002e1a:	015a      	lsls	r2, r3, #5
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	4413      	add	r3, r2
 8002e20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	78fa      	ldrb	r2, [r7, #3]
 8002e28:	0151      	lsls	r1, r2, #5
 8002e2a:	693a      	ldr	r2, [r7, #16]
 8002e2c:	440a      	add	r2, r1
 8002e2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e32:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e36:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002e38:	78fb      	ldrb	r3, [r7, #3]
 8002e3a:	015a      	lsls	r2, r3, #5
 8002e3c:	693b      	ldr	r3, [r7, #16]
 8002e3e:	4413      	add	r3, r2
 8002e40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	0151      	lsls	r1, r2, #5
 8002e4a:	693a      	ldr	r2, [r7, #16]
 8002e4c:	440a      	add	r2, r1
 8002e4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e52:	f043 0320 	orr.w	r3, r3, #32
 8002e56:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002e58:	78fb      	ldrb	r3, [r7, #3]
 8002e5a:	015a      	lsls	r2, r3, #5
 8002e5c:	693b      	ldr	r3, [r7, #16]
 8002e5e:	4413      	add	r3, r2
 8002e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e64:	461a      	mov	r2, r3
 8002e66:	2310      	movs	r3, #16
 8002e68:	6093      	str	r3, [r2, #8]
 8002e6a:	e000      	b.n	8002e6e <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002e6c:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002e6e:	3718      	adds	r7, #24
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	460b      	mov	r3, r1
 8002e7e:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	4611      	mov	r1, r2
 8002e92:	4618      	mov	r0, r3
 8002e94:	f002 fcc9 	bl	800582a <USB_ReadChInterrupts>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	f003 0304 	and.w	r3, r3, #4
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	d11b      	bne.n	8002eda <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	015a      	lsls	r2, r3, #5
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4413      	add	r3, r2
 8002eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eae:	461a      	mov	r2, r3
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002eb4:	78fa      	ldrb	r2, [r7, #3]
 8002eb6:	6879      	ldr	r1, [r7, #4]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	011b      	lsls	r3, r3, #4
 8002ebc:	1a9b      	subs	r3, r3, r2
 8002ebe:	009b      	lsls	r3, r3, #2
 8002ec0:	440b      	add	r3, r1
 8002ec2:	334d      	adds	r3, #77	@ 0x4d
 8002ec4:	2207      	movs	r2, #7
 8002ec6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	4611      	mov	r1, r2
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f003 f9ec 	bl	80062ae <USB_HC_Halt>
 8002ed6:	f000 bc89 	b.w	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	4611      	mov	r1, r2
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f002 fca1 	bl	800582a <USB_ReadChInterrupts>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f003 0320 	and.w	r3, r3, #32
 8002eee:	2b20      	cmp	r3, #32
 8002ef0:	f040 8082 	bne.w	8002ff8 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	015a      	lsls	r2, r3, #5
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4413      	add	r3, r2
 8002efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f00:	461a      	mov	r2, r3
 8002f02:	2320      	movs	r3, #32
 8002f04:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8002f06:	78fa      	ldrb	r2, [r7, #3]
 8002f08:	6879      	ldr	r1, [r7, #4]
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	1a9b      	subs	r3, r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	3319      	adds	r3, #25
 8002f16:	781b      	ldrb	r3, [r3, #0]
 8002f18:	2b01      	cmp	r3, #1
 8002f1a:	d124      	bne.n	8002f66 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002f1c:	78fa      	ldrb	r2, [r7, #3]
 8002f1e:	6879      	ldr	r1, [r7, #4]
 8002f20:	4613      	mov	r3, r2
 8002f22:	011b      	lsls	r3, r3, #4
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	3319      	adds	r3, #25
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f30:	78fa      	ldrb	r2, [r7, #3]
 8002f32:	6879      	ldr	r1, [r7, #4]
 8002f34:	4613      	mov	r3, r2
 8002f36:	011b      	lsls	r3, r3, #4
 8002f38:	1a9b      	subs	r3, r3, r2
 8002f3a:	009b      	lsls	r3, r3, #2
 8002f3c:	440b      	add	r3, r1
 8002f3e:	334c      	adds	r3, #76	@ 0x4c
 8002f40:	2202      	movs	r2, #2
 8002f42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002f44:	78fa      	ldrb	r2, [r7, #3]
 8002f46:	6879      	ldr	r1, [r7, #4]
 8002f48:	4613      	mov	r3, r2
 8002f4a:	011b      	lsls	r3, r3, #4
 8002f4c:	1a9b      	subs	r3, r3, r2
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	440b      	add	r3, r1
 8002f52:	334d      	adds	r3, #77	@ 0x4d
 8002f54:	2203      	movs	r2, #3
 8002f56:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	4611      	mov	r1, r2
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 f9a4 	bl	80062ae <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8002f66:	78fa      	ldrb	r2, [r7, #3]
 8002f68:	6879      	ldr	r1, [r7, #4]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	1a9b      	subs	r3, r3, r2
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	440b      	add	r3, r1
 8002f74:	331a      	adds	r3, #26
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	f040 8437 	bne.w	80037ec <HCD_HC_OUT_IRQHandler+0x978>
 8002f7e:	78fa      	ldrb	r2, [r7, #3]
 8002f80:	6879      	ldr	r1, [r7, #4]
 8002f82:	4613      	mov	r3, r2
 8002f84:	011b      	lsls	r3, r3, #4
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	440b      	add	r3, r1
 8002f8c:	331b      	adds	r3, #27
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	f040 842b 	bne.w	80037ec <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8002f96:	78fa      	ldrb	r2, [r7, #3]
 8002f98:	6879      	ldr	r1, [r7, #4]
 8002f9a:	4613      	mov	r3, r2
 8002f9c:	011b      	lsls	r3, r3, #4
 8002f9e:	1a9b      	subs	r3, r3, r2
 8002fa0:	009b      	lsls	r3, r3, #2
 8002fa2:	440b      	add	r3, r1
 8002fa4:	3326      	adds	r3, #38	@ 0x26
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d009      	beq.n	8002fc0 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8002fac:	78fa      	ldrb	r2, [r7, #3]
 8002fae:	6879      	ldr	r1, [r7, #4]
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	011b      	lsls	r3, r3, #4
 8002fb4:	1a9b      	subs	r3, r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	440b      	add	r3, r1
 8002fba:	331b      	adds	r3, #27
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8002fc0:	78fa      	ldrb	r2, [r7, #3]
 8002fc2:	6879      	ldr	r1, [r7, #4]
 8002fc4:	4613      	mov	r3, r2
 8002fc6:	011b      	lsls	r3, r3, #4
 8002fc8:	1a9b      	subs	r3, r3, r2
 8002fca:	009b      	lsls	r3, r3, #2
 8002fcc:	440b      	add	r3, r1
 8002fce:	334d      	adds	r3, #77	@ 0x4d
 8002fd0:	2203      	movs	r2, #3
 8002fd2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	4611      	mov	r1, r2
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f003 f966 	bl	80062ae <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	3344      	adds	r3, #68	@ 0x44
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e3f9      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	4611      	mov	r1, r2
 8003000:	4618      	mov	r0, r3
 8003002:	f002 fc12 	bl	800582a <USB_ReadChInterrupts>
 8003006:	4603      	mov	r3, r0
 8003008:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800300c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003010:	d111      	bne.n	8003036 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003012:	78fb      	ldrb	r3, [r7, #3]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003024:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f003 f93d 	bl	80062ae <USB_HC_Halt>
 8003034:	e3da      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	4611      	mov	r1, r2
 800303e:	4618      	mov	r0, r3
 8003040:	f002 fbf3 	bl	800582a <USB_ReadChInterrupts>
 8003044:	4603      	mov	r3, r0
 8003046:	f003 0301 	and.w	r3, r3, #1
 800304a:	2b01      	cmp	r3, #1
 800304c:	d168      	bne.n	8003120 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	3344      	adds	r3, #68	@ 0x44
 800305e:	2200      	movs	r2, #0
 8003060:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	78fa      	ldrb	r2, [r7, #3]
 8003068:	4611      	mov	r1, r2
 800306a:	4618      	mov	r0, r3
 800306c:	f002 fbdd 	bl	800582a <USB_ReadChInterrupts>
 8003070:	4603      	mov	r3, r0
 8003072:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003076:	2b40      	cmp	r3, #64	@ 0x40
 8003078:	d112      	bne.n	80030a0 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800307a:	78fa      	ldrb	r2, [r7, #3]
 800307c:	6879      	ldr	r1, [r7, #4]
 800307e:	4613      	mov	r3, r2
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	1a9b      	subs	r3, r3, r2
 8003084:	009b      	lsls	r3, r3, #2
 8003086:	440b      	add	r3, r1
 8003088:	3319      	adds	r3, #25
 800308a:	2201      	movs	r2, #1
 800308c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800308e:	78fb      	ldrb	r3, [r7, #3]
 8003090:	015a      	lsls	r2, r3, #5
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	4413      	add	r3, r2
 8003096:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800309a:	461a      	mov	r2, r3
 800309c:	2340      	movs	r3, #64	@ 0x40
 800309e:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80030a0:	78fa      	ldrb	r2, [r7, #3]
 80030a2:	6879      	ldr	r1, [r7, #4]
 80030a4:	4613      	mov	r3, r2
 80030a6:	011b      	lsls	r3, r3, #4
 80030a8:	1a9b      	subs	r3, r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	331b      	adds	r3, #27
 80030b0:	781b      	ldrb	r3, [r3, #0]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d019      	beq.n	80030ea <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80030b6:	78fa      	ldrb	r2, [r7, #3]
 80030b8:	6879      	ldr	r1, [r7, #4]
 80030ba:	4613      	mov	r3, r2
 80030bc:	011b      	lsls	r3, r3, #4
 80030be:	1a9b      	subs	r3, r3, r2
 80030c0:	009b      	lsls	r3, r3, #2
 80030c2:	440b      	add	r3, r1
 80030c4:	331b      	adds	r3, #27
 80030c6:	2200      	movs	r2, #0
 80030c8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030ca:	78fb      	ldrb	r3, [r7, #3]
 80030cc:	015a      	lsls	r2, r3, #5
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	4413      	add	r3, r2
 80030d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	78fa      	ldrb	r2, [r7, #3]
 80030da:	0151      	lsls	r1, r2, #5
 80030dc:	693a      	ldr	r2, [r7, #16]
 80030de:	440a      	add	r2, r1
 80030e0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030e4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030e8:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80030ea:	78fb      	ldrb	r3, [r7, #3]
 80030ec:	015a      	lsls	r2, r3, #5
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	4413      	add	r3, r2
 80030f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030f6:	461a      	mov	r2, r3
 80030f8:	2301      	movs	r3, #1
 80030fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334d      	adds	r3, #77	@ 0x4d
 800310c:	2201      	movs	r2, #1
 800310e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f003 f8c8 	bl	80062ae <USB_HC_Halt>
 800311e:	e365      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	78fa      	ldrb	r2, [r7, #3]
 8003126:	4611      	mov	r1, r2
 8003128:	4618      	mov	r0, r3
 800312a:	f002 fb7e 	bl	800582a <USB_ReadChInterrupts>
 800312e:	4603      	mov	r3, r0
 8003130:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003134:	2b40      	cmp	r3, #64	@ 0x40
 8003136:	d139      	bne.n	80031ac <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	334d      	adds	r3, #77	@ 0x4d
 8003148:	2205      	movs	r2, #5
 800314a:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800314c:	78fa      	ldrb	r2, [r7, #3]
 800314e:	6879      	ldr	r1, [r7, #4]
 8003150:	4613      	mov	r3, r2
 8003152:	011b      	lsls	r3, r3, #4
 8003154:	1a9b      	subs	r3, r3, r2
 8003156:	009b      	lsls	r3, r3, #2
 8003158:	440b      	add	r3, r1
 800315a:	331a      	adds	r3, #26
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d109      	bne.n	8003176 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	3319      	adds	r3, #25
 8003172:	2201      	movs	r2, #1
 8003174:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003176:	78fa      	ldrb	r2, [r7, #3]
 8003178:	6879      	ldr	r1, [r7, #4]
 800317a:	4613      	mov	r3, r2
 800317c:	011b      	lsls	r3, r3, #4
 800317e:	1a9b      	subs	r3, r3, r2
 8003180:	009b      	lsls	r3, r3, #2
 8003182:	440b      	add	r3, r1
 8003184:	3344      	adds	r3, #68	@ 0x44
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	78fa      	ldrb	r2, [r7, #3]
 8003190:	4611      	mov	r1, r2
 8003192:	4618      	mov	r0, r3
 8003194:	f003 f88b 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003198:	78fb      	ldrb	r3, [r7, #3]
 800319a:	015a      	lsls	r2, r3, #5
 800319c:	693b      	ldr	r3, [r7, #16]
 800319e:	4413      	add	r3, r2
 80031a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a4:	461a      	mov	r2, r3
 80031a6:	2340      	movs	r3, #64	@ 0x40
 80031a8:	6093      	str	r3, [r2, #8]
 80031aa:	e31f      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	78fa      	ldrb	r2, [r7, #3]
 80031b2:	4611      	mov	r1, r2
 80031b4:	4618      	mov	r0, r3
 80031b6:	f002 fb38 	bl	800582a <USB_ReadChInterrupts>
 80031ba:	4603      	mov	r3, r0
 80031bc:	f003 0308 	and.w	r3, r3, #8
 80031c0:	2b08      	cmp	r3, #8
 80031c2:	d11a      	bne.n	80031fa <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80031c4:	78fb      	ldrb	r3, [r7, #3]
 80031c6:	015a      	lsls	r2, r3, #5
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	4413      	add	r3, r2
 80031cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d0:	461a      	mov	r2, r3
 80031d2:	2308      	movs	r3, #8
 80031d4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334d      	adds	r3, #77	@ 0x4d
 80031e6:	2206      	movs	r2, #6
 80031e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	78fa      	ldrb	r2, [r7, #3]
 80031f0:	4611      	mov	r1, r2
 80031f2:	4618      	mov	r0, r3
 80031f4:	f003 f85b 	bl	80062ae <USB_HC_Halt>
 80031f8:	e2f8      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	4611      	mov	r1, r2
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fb11 	bl	800582a <USB_ReadChInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f003 0310 	and.w	r3, r3, #16
 800320e:	2b10      	cmp	r3, #16
 8003210:	d144      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	3344      	adds	r3, #68	@ 0x44
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003226:	78fa      	ldrb	r2, [r7, #3]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	011b      	lsls	r3, r3, #4
 800322e:	1a9b      	subs	r3, r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	334d      	adds	r3, #77	@ 0x4d
 8003236:	2204      	movs	r2, #4
 8003238:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800323a:	78fa      	ldrb	r2, [r7, #3]
 800323c:	6879      	ldr	r1, [r7, #4]
 800323e:	4613      	mov	r3, r2
 8003240:	011b      	lsls	r3, r3, #4
 8003242:	1a9b      	subs	r3, r3, r2
 8003244:	009b      	lsls	r3, r3, #2
 8003246:	440b      	add	r3, r1
 8003248:	3319      	adds	r3, #25
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d114      	bne.n	800327a <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003250:	78fa      	ldrb	r2, [r7, #3]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	4613      	mov	r3, r2
 8003256:	011b      	lsls	r3, r3, #4
 8003258:	1a9b      	subs	r3, r3, r2
 800325a:	009b      	lsls	r3, r3, #2
 800325c:	440b      	add	r3, r1
 800325e:	3318      	adds	r3, #24
 8003260:	781b      	ldrb	r3, [r3, #0]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d109      	bne.n	800327a <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003266:	78fa      	ldrb	r2, [r7, #3]
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	440b      	add	r3, r1
 8003274:	3319      	adds	r3, #25
 8003276:	2201      	movs	r2, #1
 8003278:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f003 f813 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003288:	78fb      	ldrb	r3, [r7, #3]
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	4413      	add	r3, r2
 8003290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003294:	461a      	mov	r2, r3
 8003296:	2310      	movs	r3, #16
 8003298:	6093      	str	r3, [r2, #8]
 800329a:	e2a7      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f002 fac0 	bl	800582a <USB_ReadChInterrupts>
 80032aa:	4603      	mov	r3, r0
 80032ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032b0:	2b80      	cmp	r3, #128	@ 0x80
 80032b2:	f040 8083 	bne.w	80033bc <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	799b      	ldrb	r3, [r3, #6]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d111      	bne.n	80032e2 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80032be:	78fa      	ldrb	r2, [r7, #3]
 80032c0:	6879      	ldr	r1, [r7, #4]
 80032c2:	4613      	mov	r3, r2
 80032c4:	011b      	lsls	r3, r3, #4
 80032c6:	1a9b      	subs	r3, r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	440b      	add	r3, r1
 80032cc:	334d      	adds	r3, #77	@ 0x4d
 80032ce:	2207      	movs	r2, #7
 80032d0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	78fa      	ldrb	r2, [r7, #3]
 80032d8:	4611      	mov	r1, r2
 80032da:	4618      	mov	r0, r3
 80032dc:	f002 ffe7 	bl	80062ae <USB_HC_Halt>
 80032e0:	e062      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80032e2:	78fa      	ldrb	r2, [r7, #3]
 80032e4:	6879      	ldr	r1, [r7, #4]
 80032e6:	4613      	mov	r3, r2
 80032e8:	011b      	lsls	r3, r3, #4
 80032ea:	1a9b      	subs	r3, r3, r2
 80032ec:	009b      	lsls	r3, r3, #2
 80032ee:	440b      	add	r3, r1
 80032f0:	3344      	adds	r3, #68	@ 0x44
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	1c59      	adds	r1, r3, #1
 80032f6:	6878      	ldr	r0, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	4403      	add	r3, r0
 8003302:	3344      	adds	r3, #68	@ 0x44
 8003304:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003306:	78fa      	ldrb	r2, [r7, #3]
 8003308:	6879      	ldr	r1, [r7, #4]
 800330a:	4613      	mov	r3, r2
 800330c:	011b      	lsls	r3, r3, #4
 800330e:	1a9b      	subs	r3, r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	440b      	add	r3, r1
 8003314:	3344      	adds	r3, #68	@ 0x44
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d922      	bls.n	8003362 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	6879      	ldr	r1, [r7, #4]
 8003320:	4613      	mov	r3, r2
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	3344      	adds	r3, #68	@ 0x44
 800332c:	2200      	movs	r2, #0
 800332e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003330:	78fa      	ldrb	r2, [r7, #3]
 8003332:	6879      	ldr	r1, [r7, #4]
 8003334:	4613      	mov	r3, r2
 8003336:	011b      	lsls	r3, r3, #4
 8003338:	1a9b      	subs	r3, r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	440b      	add	r3, r1
 800333e:	334c      	adds	r3, #76	@ 0x4c
 8003340:	2204      	movs	r2, #4
 8003342:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	334c      	adds	r3, #76	@ 0x4c
 8003354:	781a      	ldrb	r2, [r3, #0]
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	4619      	mov	r1, r3
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f00b fece 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003360:	e022      	b.n	80033a8 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003362:	78fa      	ldrb	r2, [r7, #3]
 8003364:	6879      	ldr	r1, [r7, #4]
 8003366:	4613      	mov	r3, r2
 8003368:	011b      	lsls	r3, r3, #4
 800336a:	1a9b      	subs	r3, r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	440b      	add	r3, r1
 8003370:	334c      	adds	r3, #76	@ 0x4c
 8003372:	2202      	movs	r2, #2
 8003374:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800338c:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003394:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80033a8:	78fb      	ldrb	r3, [r7, #3]
 80033aa:	015a      	lsls	r2, r3, #5
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	4413      	add	r3, r2
 80033b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b4:	461a      	mov	r2, r3
 80033b6:	2380      	movs	r3, #128	@ 0x80
 80033b8:	6093      	str	r3, [r2, #8]
 80033ba:	e217      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	78fa      	ldrb	r2, [r7, #3]
 80033c2:	4611      	mov	r1, r2
 80033c4:	4618      	mov	r0, r3
 80033c6:	f002 fa30 	bl	800582a <USB_ReadChInterrupts>
 80033ca:	4603      	mov	r3, r0
 80033cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80033d4:	d11b      	bne.n	800340e <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	6879      	ldr	r1, [r7, #4]
 80033da:	4613      	mov	r3, r2
 80033dc:	011b      	lsls	r3, r3, #4
 80033de:	1a9b      	subs	r3, r3, r2
 80033e0:	009b      	lsls	r3, r3, #2
 80033e2:	440b      	add	r3, r1
 80033e4:	334d      	adds	r3, #77	@ 0x4d
 80033e6:	2209      	movs	r2, #9
 80033e8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	78fa      	ldrb	r2, [r7, #3]
 80033f0:	4611      	mov	r1, r2
 80033f2:	4618      	mov	r0, r3
 80033f4:	f002 ff5b 	bl	80062ae <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	015a      	lsls	r2, r3, #5
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4413      	add	r3, r2
 8003400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003404:	461a      	mov	r2, r3
 8003406:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800340a:	6093      	str	r3, [r2, #8]
 800340c:	e1ee      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	4611      	mov	r1, r2
 8003416:	4618      	mov	r0, r3
 8003418:	f002 fa07 	bl	800582a <USB_ReadChInterrupts>
 800341c:	4603      	mov	r3, r0
 800341e:	f003 0302 	and.w	r3, r3, #2
 8003422:	2b02      	cmp	r3, #2
 8003424:	f040 81df 	bne.w	80037e6 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003428:	78fb      	ldrb	r3, [r7, #3]
 800342a:	015a      	lsls	r2, r3, #5
 800342c:	693b      	ldr	r3, [r7, #16]
 800342e:	4413      	add	r3, r2
 8003430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003434:	461a      	mov	r2, r3
 8003436:	2302      	movs	r3, #2
 8003438:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334d      	adds	r3, #77	@ 0x4d
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	2b01      	cmp	r3, #1
 800344e:	f040 8093 	bne.w	8003578 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	6879      	ldr	r1, [r7, #4]
 8003456:	4613      	mov	r3, r2
 8003458:	011b      	lsls	r3, r3, #4
 800345a:	1a9b      	subs	r3, r3, r2
 800345c:	009b      	lsls	r3, r3, #2
 800345e:	440b      	add	r3, r1
 8003460:	334d      	adds	r3, #77	@ 0x4d
 8003462:	2202      	movs	r2, #2
 8003464:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003466:	78fa      	ldrb	r2, [r7, #3]
 8003468:	6879      	ldr	r1, [r7, #4]
 800346a:	4613      	mov	r3, r2
 800346c:	011b      	lsls	r3, r3, #4
 800346e:	1a9b      	subs	r3, r3, r2
 8003470:	009b      	lsls	r3, r3, #2
 8003472:	440b      	add	r3, r1
 8003474:	334c      	adds	r3, #76	@ 0x4c
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3326      	adds	r3, #38	@ 0x26
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b02      	cmp	r3, #2
 800348e:	d00b      	beq.n	80034a8 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003490:	78fa      	ldrb	r2, [r7, #3]
 8003492:	6879      	ldr	r1, [r7, #4]
 8003494:	4613      	mov	r3, r2
 8003496:	011b      	lsls	r3, r3, #4
 8003498:	1a9b      	subs	r3, r3, r2
 800349a:	009b      	lsls	r3, r3, #2
 800349c:	440b      	add	r3, r1
 800349e:	3326      	adds	r3, #38	@ 0x26
 80034a0:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80034a2:	2b03      	cmp	r3, #3
 80034a4:	f040 8190 	bne.w	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	799b      	ldrb	r3, [r3, #6]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d115      	bne.n	80034dc <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80034b0:	78fa      	ldrb	r2, [r7, #3]
 80034b2:	6879      	ldr	r1, [r7, #4]
 80034b4:	4613      	mov	r3, r2
 80034b6:	011b      	lsls	r3, r3, #4
 80034b8:	1a9b      	subs	r3, r3, r2
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	333d      	adds	r3, #61	@ 0x3d
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	f083 0301 	eor.w	r3, r3, #1
 80034c8:	b2d8      	uxtb	r0, r3
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	333d      	adds	r3, #61	@ 0x3d
 80034d8:	4602      	mov	r2, r0
 80034da:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	799b      	ldrb	r3, [r3, #6]
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	f040 8171 	bne.w	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
 80034e6:	78fa      	ldrb	r2, [r7, #3]
 80034e8:	6879      	ldr	r1, [r7, #4]
 80034ea:	4613      	mov	r3, r2
 80034ec:	011b      	lsls	r3, r3, #4
 80034ee:	1a9b      	subs	r3, r3, r2
 80034f0:	009b      	lsls	r3, r3, #2
 80034f2:	440b      	add	r3, r1
 80034f4:	3334      	adds	r3, #52	@ 0x34
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	f000 8165 	beq.w	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	3334      	adds	r3, #52	@ 0x34
 800350e:	6819      	ldr	r1, [r3, #0]
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4403      	add	r3, r0
 800351e:	3328      	adds	r3, #40	@ 0x28
 8003520:	881b      	ldrh	r3, [r3, #0]
 8003522:	440b      	add	r3, r1
 8003524:	1e59      	subs	r1, r3, #1
 8003526:	78fa      	ldrb	r2, [r7, #3]
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	4613      	mov	r3, r2
 800352c:	011b      	lsls	r3, r3, #4
 800352e:	1a9b      	subs	r3, r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	4403      	add	r3, r0
 8003534:	3328      	adds	r3, #40	@ 0x28
 8003536:	881b      	ldrh	r3, [r3, #0]
 8003538:	fbb1 f3f3 	udiv	r3, r1, r3
 800353c:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	f003 0301 	and.w	r3, r3, #1
 8003544:	2b00      	cmp	r3, #0
 8003546:	f000 813f 	beq.w	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 800354a:	78fa      	ldrb	r2, [r7, #3]
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	4613      	mov	r3, r2
 8003550:	011b      	lsls	r3, r3, #4
 8003552:	1a9b      	subs	r3, r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	440b      	add	r3, r1
 8003558:	333d      	adds	r3, #61	@ 0x3d
 800355a:	781b      	ldrb	r3, [r3, #0]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	f083 0301 	eor.w	r3, r3, #1
 8003562:	b2d8      	uxtb	r0, r3
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	333d      	adds	r3, #61	@ 0x3d
 8003572:	4602      	mov	r2, r0
 8003574:	701a      	strb	r2, [r3, #0]
 8003576:	e127      	b.n	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334d      	adds	r3, #77	@ 0x4d
 8003588:	781b      	ldrb	r3, [r3, #0]
 800358a:	2b03      	cmp	r3, #3
 800358c:	d120      	bne.n	80035d0 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800358e:	78fa      	ldrb	r2, [r7, #3]
 8003590:	6879      	ldr	r1, [r7, #4]
 8003592:	4613      	mov	r3, r2
 8003594:	011b      	lsls	r3, r3, #4
 8003596:	1a9b      	subs	r3, r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	440b      	add	r3, r1
 800359c:	334d      	adds	r3, #77	@ 0x4d
 800359e:	2202      	movs	r2, #2
 80035a0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80035a2:	78fa      	ldrb	r2, [r7, #3]
 80035a4:	6879      	ldr	r1, [r7, #4]
 80035a6:	4613      	mov	r3, r2
 80035a8:	011b      	lsls	r3, r3, #4
 80035aa:	1a9b      	subs	r3, r3, r2
 80035ac:	009b      	lsls	r3, r3, #2
 80035ae:	440b      	add	r3, r1
 80035b0:	331b      	adds	r3, #27
 80035b2:	781b      	ldrb	r3, [r3, #0]
 80035b4:	2b01      	cmp	r3, #1
 80035b6:	f040 8107 	bne.w	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	4613      	mov	r3, r2
 80035c0:	011b      	lsls	r3, r3, #4
 80035c2:	1a9b      	subs	r3, r3, r2
 80035c4:	009b      	lsls	r3, r3, #2
 80035c6:	440b      	add	r3, r1
 80035c8:	334c      	adds	r3, #76	@ 0x4c
 80035ca:	2202      	movs	r2, #2
 80035cc:	701a      	strb	r2, [r3, #0]
 80035ce:	e0fb      	b.n	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80035d0:	78fa      	ldrb	r2, [r7, #3]
 80035d2:	6879      	ldr	r1, [r7, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	011b      	lsls	r3, r3, #4
 80035d8:	1a9b      	subs	r3, r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	440b      	add	r3, r1
 80035de:	334d      	adds	r3, #77	@ 0x4d
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d13a      	bne.n	800365c <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80035e6:	78fa      	ldrb	r2, [r7, #3]
 80035e8:	6879      	ldr	r1, [r7, #4]
 80035ea:	4613      	mov	r3, r2
 80035ec:	011b      	lsls	r3, r3, #4
 80035ee:	1a9b      	subs	r3, r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	440b      	add	r3, r1
 80035f4:	334d      	adds	r3, #77	@ 0x4d
 80035f6:	2202      	movs	r2, #2
 80035f8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334c      	adds	r3, #76	@ 0x4c
 800360a:	2202      	movs	r2, #2
 800360c:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800360e:	78fa      	ldrb	r2, [r7, #3]
 8003610:	6879      	ldr	r1, [r7, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	011b      	lsls	r3, r3, #4
 8003616:	1a9b      	subs	r3, r3, r2
 8003618:	009b      	lsls	r3, r3, #2
 800361a:	440b      	add	r3, r1
 800361c:	331b      	adds	r3, #27
 800361e:	781b      	ldrb	r3, [r3, #0]
 8003620:	2b01      	cmp	r3, #1
 8003622:	f040 80d1 	bne.w	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	6879      	ldr	r1, [r7, #4]
 800362a:	4613      	mov	r3, r2
 800362c:	011b      	lsls	r3, r3, #4
 800362e:	1a9b      	subs	r3, r3, r2
 8003630:	009b      	lsls	r3, r3, #2
 8003632:	440b      	add	r3, r1
 8003634:	331b      	adds	r3, #27
 8003636:	2200      	movs	r2, #0
 8003638:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	78fa      	ldrb	r2, [r7, #3]
 800364a:	0151      	lsls	r1, r2, #5
 800364c:	693a      	ldr	r2, [r7, #16]
 800364e:	440a      	add	r2, r1
 8003650:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003654:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003658:	6053      	str	r3, [r2, #4]
 800365a:	e0b5      	b.n	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800365c:	78fa      	ldrb	r2, [r7, #3]
 800365e:	6879      	ldr	r1, [r7, #4]
 8003660:	4613      	mov	r3, r2
 8003662:	011b      	lsls	r3, r3, #4
 8003664:	1a9b      	subs	r3, r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	440b      	add	r3, r1
 800366a:	334d      	adds	r3, #77	@ 0x4d
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b05      	cmp	r3, #5
 8003670:	d114      	bne.n	800369c <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003672:	78fa      	ldrb	r2, [r7, #3]
 8003674:	6879      	ldr	r1, [r7, #4]
 8003676:	4613      	mov	r3, r2
 8003678:	011b      	lsls	r3, r3, #4
 800367a:	1a9b      	subs	r3, r3, r2
 800367c:	009b      	lsls	r3, r3, #2
 800367e:	440b      	add	r3, r1
 8003680:	334d      	adds	r3, #77	@ 0x4d
 8003682:	2202      	movs	r2, #2
 8003684:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003686:	78fa      	ldrb	r2, [r7, #3]
 8003688:	6879      	ldr	r1, [r7, #4]
 800368a:	4613      	mov	r3, r2
 800368c:	011b      	lsls	r3, r3, #4
 800368e:	1a9b      	subs	r3, r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	440b      	add	r3, r1
 8003694:	334c      	adds	r3, #76	@ 0x4c
 8003696:	2202      	movs	r2, #2
 8003698:	701a      	strb	r2, [r3, #0]
 800369a:	e095      	b.n	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800369c:	78fa      	ldrb	r2, [r7, #3]
 800369e:	6879      	ldr	r1, [r7, #4]
 80036a0:	4613      	mov	r3, r2
 80036a2:	011b      	lsls	r3, r3, #4
 80036a4:	1a9b      	subs	r3, r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	440b      	add	r3, r1
 80036aa:	334d      	adds	r3, #77	@ 0x4d
 80036ac:	781b      	ldrb	r3, [r3, #0]
 80036ae:	2b06      	cmp	r3, #6
 80036b0:	d114      	bne.n	80036dc <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	6879      	ldr	r1, [r7, #4]
 80036b6:	4613      	mov	r3, r2
 80036b8:	011b      	lsls	r3, r3, #4
 80036ba:	1a9b      	subs	r3, r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	334d      	adds	r3, #77	@ 0x4d
 80036c2:	2202      	movs	r2, #2
 80036c4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	334c      	adds	r3, #76	@ 0x4c
 80036d6:	2205      	movs	r2, #5
 80036d8:	701a      	strb	r2, [r3, #0]
 80036da:	e075      	b.n	80037c8 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	334d      	adds	r3, #77	@ 0x4d
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b07      	cmp	r3, #7
 80036f0:	d00a      	beq.n	8003708 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	334d      	adds	r3, #77	@ 0x4d
 8003702:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003704:	2b09      	cmp	r3, #9
 8003706:	d170      	bne.n	80037ea <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	334d      	adds	r3, #77	@ 0x4d
 8003718:	2202      	movs	r2, #2
 800371a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	3344      	adds	r3, #68	@ 0x44
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	1c59      	adds	r1, r3, #1
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	4613      	mov	r3, r2
 8003734:	011b      	lsls	r3, r3, #4
 8003736:	1a9b      	subs	r3, r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	4403      	add	r3, r0
 800373c:	3344      	adds	r3, #68	@ 0x44
 800373e:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3344      	adds	r3, #68	@ 0x44
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d914      	bls.n	8003780 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	3344      	adds	r3, #68	@ 0x44
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800376a:	78fa      	ldrb	r2, [r7, #3]
 800376c:	6879      	ldr	r1, [r7, #4]
 800376e:	4613      	mov	r3, r2
 8003770:	011b      	lsls	r3, r3, #4
 8003772:	1a9b      	subs	r3, r3, r2
 8003774:	009b      	lsls	r3, r3, #2
 8003776:	440b      	add	r3, r1
 8003778:	334c      	adds	r3, #76	@ 0x4c
 800377a:	2204      	movs	r2, #4
 800377c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800377e:	e022      	b.n	80037c6 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003780:	78fa      	ldrb	r2, [r7, #3]
 8003782:	6879      	ldr	r1, [r7, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	011b      	lsls	r3, r3, #4
 8003788:	1a9b      	subs	r3, r3, r2
 800378a:	009b      	lsls	r3, r3, #2
 800378c:	440b      	add	r3, r1
 800378e:	334c      	adds	r3, #76	@ 0x4c
 8003790:	2202      	movs	r2, #2
 8003792:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003794:	78fb      	ldrb	r3, [r7, #3]
 8003796:	015a      	lsls	r2, r3, #5
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	4413      	add	r3, r2
 800379c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80037aa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80037b2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80037b4:	78fb      	ldrb	r3, [r7, #3]
 80037b6:	015a      	lsls	r2, r3, #5
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	4413      	add	r3, r2
 80037bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037c0:	461a      	mov	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037c6:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	334c      	adds	r3, #76	@ 0x4c
 80037d8:	781a      	ldrb	r2, [r3, #0]
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	4619      	mov	r1, r3
 80037de:	6878      	ldr	r0, [r7, #4]
 80037e0:	f00b fc8c 	bl	800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>
 80037e4:	e002      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 80037e6:	bf00      	nop
 80037e8:	e000      	b.n	80037ec <HCD_HC_OUT_IRQHandler+0x978>
      return;
 80037ea:	bf00      	nop
  }
}
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}

080037f2 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80037f2:	b580      	push	{r7, lr}
 80037f4:	b08a      	sub	sp, #40	@ 0x28
 80037f6:	af00      	add	r7, sp, #0
 80037f8:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003800:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003802:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6a1b      	ldr	r3, [r3, #32]
 800380a:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800380c:	69fb      	ldr	r3, [r7, #28]
 800380e:	f003 030f 	and.w	r3, r3, #15
 8003812:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	0c5b      	lsrs	r3, r3, #17
 8003818:	f003 030f 	and.w	r3, r3, #15
 800381c:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800381e:	69fb      	ldr	r3, [r7, #28]
 8003820:	091b      	lsrs	r3, r3, #4
 8003822:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003826:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003828:	697b      	ldr	r3, [r7, #20]
 800382a:	2b02      	cmp	r3, #2
 800382c:	d004      	beq.n	8003838 <HCD_RXQLVL_IRQHandler+0x46>
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	2b05      	cmp	r3, #5
 8003832:	f000 80b6 	beq.w	80039a2 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003836:	e0b7      	b.n	80039a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003838:	693b      	ldr	r3, [r7, #16]
 800383a:	2b00      	cmp	r3, #0
 800383c:	f000 80b3 	beq.w	80039a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	332c      	adds	r3, #44	@ 0x2c
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2b00      	cmp	r3, #0
 8003854:	f000 80a7 	beq.w	80039a6 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003858:	6879      	ldr	r1, [r7, #4]
 800385a:	69ba      	ldr	r2, [r7, #24]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	3338      	adds	r3, #56	@ 0x38
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	18d1      	adds	r1, r2, r3
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	69ba      	ldr	r2, [r7, #24]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4403      	add	r3, r0
 800387c:	3334      	adds	r3, #52	@ 0x34
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4299      	cmp	r1, r3
 8003882:	f200 8083 	bhi.w	800398c <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6818      	ldr	r0, [r3, #0]
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	4613      	mov	r3, r2
 8003890:	011b      	lsls	r3, r3, #4
 8003892:	1a9b      	subs	r3, r3, r2
 8003894:	009b      	lsls	r3, r3, #2
 8003896:	440b      	add	r3, r1
 8003898:	332c      	adds	r3, #44	@ 0x2c
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	693a      	ldr	r2, [r7, #16]
 800389e:	b292      	uxth	r2, r2
 80038a0:	4619      	mov	r1, r3
 80038a2:	f001 ff57 	bl	8005754 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	69ba      	ldr	r2, [r7, #24]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	332c      	adds	r3, #44	@ 0x2c
 80038b6:	681a      	ldr	r2, [r3, #0]
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	18d1      	adds	r1, r2, r3
 80038bc:	6878      	ldr	r0, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	4613      	mov	r3, r2
 80038c2:	011b      	lsls	r3, r3, #4
 80038c4:	1a9b      	subs	r3, r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4403      	add	r3, r0
 80038ca:	332c      	adds	r3, #44	@ 0x2c
 80038cc:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	69ba      	ldr	r2, [r7, #24]
 80038d2:	4613      	mov	r3, r2
 80038d4:	011b      	lsls	r3, r3, #4
 80038d6:	1a9b      	subs	r3, r3, r2
 80038d8:	009b      	lsls	r3, r3, #2
 80038da:	440b      	add	r3, r1
 80038dc:	3338      	adds	r3, #56	@ 0x38
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	18d1      	adds	r1, r2, r3
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	69ba      	ldr	r2, [r7, #24]
 80038e8:	4613      	mov	r3, r2
 80038ea:	011b      	lsls	r3, r3, #4
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	4403      	add	r3, r0
 80038f2:	3338      	adds	r3, #56	@ 0x38
 80038f4:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	6a3b      	ldr	r3, [r7, #32]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003902:	691b      	ldr	r3, [r3, #16]
 8003904:	0cdb      	lsrs	r3, r3, #19
 8003906:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800390a:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800390c:	6879      	ldr	r1, [r7, #4]
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	4613      	mov	r3, r2
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	1a9b      	subs	r3, r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	440b      	add	r3, r1
 800391a:	3328      	adds	r3, #40	@ 0x28
 800391c:	881b      	ldrh	r3, [r3, #0]
 800391e:	461a      	mov	r2, r3
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	4293      	cmp	r3, r2
 8003924:	d13f      	bne.n	80039a6 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d03c      	beq.n	80039a6 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800392c:	69bb      	ldr	r3, [r7, #24]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	6a3b      	ldr	r3, [r7, #32]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003942:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800394a:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800394c:	69bb      	ldr	r3, [r7, #24]
 800394e:	015a      	lsls	r2, r3, #5
 8003950:	6a3b      	ldr	r3, [r7, #32]
 8003952:	4413      	add	r3, r2
 8003954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003958:	461a      	mov	r2, r3
 800395a:	68bb      	ldr	r3, [r7, #8]
 800395c:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4613      	mov	r3, r2
 8003964:	011b      	lsls	r3, r3, #4
 8003966:	1a9b      	subs	r3, r3, r2
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	440b      	add	r3, r1
 800396c:	333c      	adds	r3, #60	@ 0x3c
 800396e:	781b      	ldrb	r3, [r3, #0]
 8003970:	f083 0301 	eor.w	r3, r3, #1
 8003974:	b2d8      	uxtb	r0, r3
 8003976:	6879      	ldr	r1, [r7, #4]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	4613      	mov	r3, r2
 800397c:	011b      	lsls	r3, r3, #4
 800397e:	1a9b      	subs	r3, r3, r2
 8003980:	009b      	lsls	r3, r3, #2
 8003982:	440b      	add	r3, r1
 8003984:	333c      	adds	r3, #60	@ 0x3c
 8003986:	4602      	mov	r2, r0
 8003988:	701a      	strb	r2, [r3, #0]
      break;
 800398a:	e00c      	b.n	80039a6 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800398c:	6879      	ldr	r1, [r7, #4]
 800398e:	69ba      	ldr	r2, [r7, #24]
 8003990:	4613      	mov	r3, r2
 8003992:	011b      	lsls	r3, r3, #4
 8003994:	1a9b      	subs	r3, r3, r2
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	334c      	adds	r3, #76	@ 0x4c
 800399c:	2204      	movs	r2, #4
 800399e:	701a      	strb	r2, [r3, #0]
      break;
 80039a0:	e001      	b.n	80039a6 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80039a2:	bf00      	nop
 80039a4:	e000      	b.n	80039a8 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80039a6:	bf00      	nop
  }
}
 80039a8:	bf00      	nop
 80039aa:	3728      	adds	r7, #40	@ 0x28
 80039ac:	46bd      	mov	sp, r7
 80039ae:	bd80      	pop	{r7, pc}

080039b0 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039be:	697b      	ldr	r3, [r7, #20]
 80039c0:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80039cc:	693b      	ldr	r3, [r7, #16]
 80039ce:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80039dc:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	f003 0302 	and.w	r3, r3, #2
 80039e4:	2b02      	cmp	r3, #2
 80039e6:	d10b      	bne.n	8003a00 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d102      	bne.n	80039f8 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	f00b fb66 	bl	800f0c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	f043 0302 	orr.w	r3, r3, #2
 80039fe:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f003 0308 	and.w	r3, r3, #8
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d132      	bne.n	8003a70 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	f043 0308 	orr.w	r3, r3, #8
 8003a10:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b04      	cmp	r3, #4
 8003a1a:	d126      	bne.n	8003a6a <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	7a5b      	ldrb	r3, [r3, #9]
 8003a20:	2b02      	cmp	r3, #2
 8003a22:	d113      	bne.n	8003a4c <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003a2a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a2e:	d106      	bne.n	8003a3e <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	2102      	movs	r1, #2
 8003a36:	4618      	mov	r0, r3
 8003a38:	f002 f806 	bl	8005a48 <USB_InitFSLSPClkSel>
 8003a3c:	e011      	b.n	8003a62 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	2101      	movs	r1, #1
 8003a44:	4618      	mov	r0, r3
 8003a46:	f001 ffff 	bl	8005a48 <USB_InitFSLSPClkSel>
 8003a4a:	e00a      	b.n	8003a62 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	79db      	ldrb	r3, [r3, #7]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d106      	bne.n	8003a62 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003a60:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f00b fb58 	bl	800f118 <HAL_HCD_PortEnabled_Callback>
 8003a68:	e002      	b.n	8003a70 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f00b fb62 	bl	800f134 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b20      	cmp	r3, #32
 8003a78:	d103      	bne.n	8003a82 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	f043 0320 	orr.w	r3, r3, #32
 8003a80:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003a88:	461a      	mov	r2, r3
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	6013      	str	r3, [r2, #0]
}
 8003a8e:	bf00      	nop
 8003a90:	3718      	adds	r7, #24
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
	...

08003a98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e267      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0301 	and.w	r3, r3, #1
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d075      	beq.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003ab6:	4b88      	ldr	r3, [pc, #544]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ab8:	689b      	ldr	r3, [r3, #8]
 8003aba:	f003 030c 	and.w	r3, r3, #12
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d00c      	beq.n	8003adc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ac2:	4b85      	ldr	r3, [pc, #532]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003aca:	2b08      	cmp	r3, #8
 8003acc:	d112      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ace:	4b82      	ldr	r3, [pc, #520]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003ad6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003ada:	d10b      	bne.n	8003af4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d05b      	beq.n	8003ba0 <HAL_RCC_OscConfig+0x108>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d157      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	e242      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	685b      	ldr	r3, [r3, #4]
 8003af8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003afc:	d106      	bne.n	8003b0c <HAL_RCC_OscConfig+0x74>
 8003afe:	4b76      	ldr	r3, [pc, #472]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a75      	ldr	r2, [pc, #468]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b08:	6013      	str	r3, [r2, #0]
 8003b0a:	e01d      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003b14:	d10c      	bne.n	8003b30 <HAL_RCC_OscConfig+0x98>
 8003b16:	4b70      	ldr	r3, [pc, #448]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a6f      	ldr	r2, [pc, #444]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003b20:	6013      	str	r3, [r2, #0]
 8003b22:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	4a6c      	ldr	r2, [pc, #432]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b28:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003b2c:	6013      	str	r3, [r2, #0]
 8003b2e:	e00b      	b.n	8003b48 <HAL_RCC_OscConfig+0xb0>
 8003b30:	4b69      	ldr	r3, [pc, #420]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a68      	ldr	r2, [pc, #416]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b3a:	6013      	str	r3, [r2, #0]
 8003b3c:	4b66      	ldr	r3, [pc, #408]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a65      	ldr	r2, [pc, #404]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b42:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003b46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	685b      	ldr	r3, [r3, #4]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d013      	beq.n	8003b78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b50:	f7fd fafc 	bl	800114c <HAL_GetTick>
 8003b54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b56:	e008      	b.n	8003b6a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b58:	f7fd faf8 	bl	800114c <HAL_GetTick>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	1ad3      	subs	r3, r2, r3
 8003b62:	2b64      	cmp	r3, #100	@ 0x64
 8003b64:	d901      	bls.n	8003b6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003b66:	2303      	movs	r3, #3
 8003b68:	e207      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b6a:	4b5b      	ldr	r3, [pc, #364]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d0f0      	beq.n	8003b58 <HAL_RCC_OscConfig+0xc0>
 8003b76:	e014      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b78:	f7fd fae8 	bl	800114c <HAL_GetTick>
 8003b7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b7e:	e008      	b.n	8003b92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b80:	f7fd fae4 	bl	800114c <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	2b64      	cmp	r3, #100	@ 0x64
 8003b8c:	d901      	bls.n	8003b92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b8e:	2303      	movs	r3, #3
 8003b90:	e1f3      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b92:	4b51      	ldr	r3, [pc, #324]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1f0      	bne.n	8003b80 <HAL_RCC_OscConfig+0xe8>
 8003b9e:	e000      	b.n	8003ba2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ba0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0302 	and.w	r3, r3, #2
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d063      	beq.n	8003c76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bae:	4b4a      	ldr	r3, [pc, #296]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bba:	4b47      	ldr	r3, [pc, #284]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d11c      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003bc6:	4b44      	ldr	r3, [pc, #272]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d116      	bne.n	8003c00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bd2:	4b41      	ldr	r3, [pc, #260]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0302 	and.w	r3, r3, #2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d005      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b01      	cmp	r3, #1
 8003be4:	d001      	beq.n	8003bea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e1c7      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b3b      	ldr	r3, [pc, #236]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4937      	ldr	r1, [pc, #220]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bfe:	e03a      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d020      	beq.n	8003c4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c08:	4b34      	ldr	r3, [pc, #208]	@ (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0e:	f7fd fa9d 	bl	800114c <HAL_GetTick>
 8003c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c14:	e008      	b.n	8003c28 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c16:	f7fd fa99 	bl	800114c <HAL_GetTick>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	1ad3      	subs	r3, r2, r3
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e1a8      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c28:	4b2b      	ldr	r3, [pc, #172]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d0f0      	beq.n	8003c16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c34:	4b28      	ldr	r3, [pc, #160]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	691b      	ldr	r3, [r3, #16]
 8003c40:	00db      	lsls	r3, r3, #3
 8003c42:	4925      	ldr	r1, [pc, #148]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c44:	4313      	orrs	r3, r2
 8003c46:	600b      	str	r3, [r1, #0]
 8003c48:	e015      	b.n	8003c76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c4a:	4b24      	ldr	r3, [pc, #144]	@ (8003cdc <HAL_RCC_OscConfig+0x244>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c50:	f7fd fa7c 	bl	800114c <HAL_GetTick>
 8003c54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c56:	e008      	b.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c58:	f7fd fa78 	bl	800114c <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	2b02      	cmp	r3, #2
 8003c64:	d901      	bls.n	8003c6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003c66:	2303      	movs	r3, #3
 8003c68:	e187      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c6a:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f003 0302 	and.w	r3, r3, #2
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d1f0      	bne.n	8003c58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0308 	and.w	r3, r3, #8
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d036      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d016      	beq.n	8003cb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c8a:	4b15      	ldr	r3, [pc, #84]	@ (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c90:	f7fd fa5c 	bl	800114c <HAL_GetTick>
 8003c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c96:	e008      	b.n	8003caa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c98:	f7fd fa58 	bl	800114c <HAL_GetTick>
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	2b02      	cmp	r3, #2
 8003ca4:	d901      	bls.n	8003caa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ca6:	2303      	movs	r3, #3
 8003ca8:	e167      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003caa:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <HAL_RCC_OscConfig+0x240>)
 8003cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cae:	f003 0302 	and.w	r3, r3, #2
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d0f0      	beq.n	8003c98 <HAL_RCC_OscConfig+0x200>
 8003cb6:	e01b      	b.n	8003cf0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003cb8:	4b09      	ldr	r3, [pc, #36]	@ (8003ce0 <HAL_RCC_OscConfig+0x248>)
 8003cba:	2200      	movs	r2, #0
 8003cbc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003cbe:	f7fd fa45 	bl	800114c <HAL_GetTick>
 8003cc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003cc4:	e00e      	b.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003cc6:	f7fd fa41 	bl	800114c <HAL_GetTick>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	1ad3      	subs	r3, r2, r3
 8003cd0:	2b02      	cmp	r3, #2
 8003cd2:	d907      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003cd4:	2303      	movs	r3, #3
 8003cd6:	e150      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003cd8:	40023800 	.word	0x40023800
 8003cdc:	42470000 	.word	0x42470000
 8003ce0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ce4:	4b88      	ldr	r3, [pc, #544]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ce8:	f003 0302 	and.w	r3, r3, #2
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1ea      	bne.n	8003cc6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f003 0304 	and.w	r3, r3, #4
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	f000 8097 	beq.w	8003e2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d02:	4b81      	ldr	r3, [pc, #516]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10f      	bne.n	8003d2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d0e:	2300      	movs	r3, #0
 8003d10:	60bb      	str	r3, [r7, #8]
 8003d12:	4b7d      	ldr	r3, [pc, #500]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d16:	4a7c      	ldr	r2, [pc, #496]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003d1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d1e:	4b7a      	ldr	r3, [pc, #488]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003d26:	60bb      	str	r3, [r7, #8]
 8003d28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d2e:	4b77      	ldr	r3, [pc, #476]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d118      	bne.n	8003d6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003d3a:	4b74      	ldr	r3, [pc, #464]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a73      	ldr	r2, [pc, #460]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003d46:	f7fd fa01 	bl	800114c <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d4c:	e008      	b.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d4e:	f7fd f9fd 	bl	800114c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d901      	bls.n	8003d60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e10c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d60:	4b6a      	ldr	r3, [pc, #424]	@ (8003f0c <HAL_RCC_OscConfig+0x474>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d0f0      	beq.n	8003d4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d106      	bne.n	8003d82 <HAL_RCC_OscConfig+0x2ea>
 8003d74:	4b64      	ldr	r3, [pc, #400]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d78:	4a63      	ldr	r2, [pc, #396]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d7a:	f043 0301 	orr.w	r3, r3, #1
 8003d7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d80:	e01c      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	2b05      	cmp	r3, #5
 8003d88:	d10c      	bne.n	8003da4 <HAL_RCC_OscConfig+0x30c>
 8003d8a:	4b5f      	ldr	r3, [pc, #380]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d8e:	4a5e      	ldr	r2, [pc, #376]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d90:	f043 0304 	orr.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	@ 0x70
 8003d96:	4b5c      	ldr	r3, [pc, #368]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003d9a:	4a5b      	ldr	r2, [pc, #364]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	f043 0301 	orr.w	r3, r3, #1
 8003da0:	6713      	str	r3, [r2, #112]	@ 0x70
 8003da2:	e00b      	b.n	8003dbc <HAL_RCC_OscConfig+0x324>
 8003da4:	4b58      	ldr	r3, [pc, #352]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003da6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003da8:	4a57      	ldr	r2, [pc, #348]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003daa:	f023 0301 	bic.w	r3, r3, #1
 8003dae:	6713      	str	r3, [r2, #112]	@ 0x70
 8003db0:	4b55      	ldr	r3, [pc, #340]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003db4:	4a54      	ldr	r2, [pc, #336]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003db6:	f023 0304 	bic.w	r3, r3, #4
 8003dba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d015      	beq.n	8003df0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dc4:	f7fd f9c2 	bl	800114c <HAL_GetTick>
 8003dc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dca:	e00a      	b.n	8003de2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dcc:	f7fd f9be 	bl	800114c <HAL_GetTick>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	693b      	ldr	r3, [r7, #16]
 8003dd4:	1ad3      	subs	r3, r2, r3
 8003dd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003dda:	4293      	cmp	r3, r2
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e0cb      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003de2:	4b49      	ldr	r3, [pc, #292]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003de6:	f003 0302 	and.w	r3, r3, #2
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0ee      	beq.n	8003dcc <HAL_RCC_OscConfig+0x334>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003df0:	f7fd f9ac 	bl	800114c <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003df6:	e00a      	b.n	8003e0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003df8:	f7fd f9a8 	bl	800114c <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d901      	bls.n	8003e0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e0a:	2303      	movs	r3, #3
 8003e0c:	e0b5      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e0e:	4b3e      	ldr	r3, [pc, #248]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e12:	f003 0302 	and.w	r3, r3, #2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d1ee      	bne.n	8003df8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003e1a:	7dfb      	ldrb	r3, [r7, #23]
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d105      	bne.n	8003e2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003e20:	4b39      	ldr	r3, [pc, #228]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e24:	4a38      	ldr	r2, [pc, #224]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003e2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	f000 80a1 	beq.w	8003f78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003e36:	4b34      	ldr	r3, [pc, #208]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d05c      	beq.n	8003efc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	2b02      	cmp	r3, #2
 8003e48:	d141      	bne.n	8003ece <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e4a:	4b31      	ldr	r3, [pc, #196]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e50:	f7fd f97c 	bl	800114c <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e56:	e008      	b.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e58:	f7fd f978 	bl	800114c <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e087      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e6a:	4b27      	ldr	r3, [pc, #156]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d1f0      	bne.n	8003e58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	69da      	ldr	r2, [r3, #28]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6a1b      	ldr	r3, [r3, #32]
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e84:	019b      	lsls	r3, r3, #6
 8003e86:	431a      	orrs	r2, r3
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e8c:	085b      	lsrs	r3, r3, #1
 8003e8e:	3b01      	subs	r3, #1
 8003e90:	041b      	lsls	r3, r3, #16
 8003e92:	431a      	orrs	r2, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e98:	061b      	lsls	r3, r3, #24
 8003e9a:	491b      	ldr	r1, [pc, #108]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea6:	f7fd f951 	bl	800114c <HAL_GetTick>
 8003eaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eac:	e008      	b.n	8003ec0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003eae:	f7fd f94d 	bl	800114c <HAL_GetTick>
 8003eb2:	4602      	mov	r2, r0
 8003eb4:	693b      	ldr	r3, [r7, #16]
 8003eb6:	1ad3      	subs	r3, r2, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d901      	bls.n	8003ec0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003ebc:	2303      	movs	r3, #3
 8003ebe:	e05c      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ec0:	4b11      	ldr	r3, [pc, #68]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d0f0      	beq.n	8003eae <HAL_RCC_OscConfig+0x416>
 8003ecc:	e054      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ece:	4b10      	ldr	r3, [pc, #64]	@ (8003f10 <HAL_RCC_OscConfig+0x478>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed4:	f7fd f93a 	bl	800114c <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd f936 	bl	800114c <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e045      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003eee:	4b06      	ldr	r3, [pc, #24]	@ (8003f08 <HAL_RCC_OscConfig+0x470>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x444>
 8003efa:	e03d      	b.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d107      	bne.n	8003f14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e038      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
 8003f08:	40023800 	.word	0x40023800
 8003f0c:	40007000 	.word	0x40007000
 8003f10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f14:	4b1b      	ldr	r3, [pc, #108]	@ (8003f84 <HAL_RCC_OscConfig+0x4ec>)
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	699b      	ldr	r3, [r3, #24]
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d028      	beq.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f2c:	429a      	cmp	r2, r3
 8003f2e:	d121      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f3a:	429a      	cmp	r2, r3
 8003f3c:	d11a      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003f44:	4013      	ands	r3, r2
 8003f46:	687a      	ldr	r2, [r7, #4]
 8003f48:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003f4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d111      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f5a:	085b      	lsrs	r3, r3, #1
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d107      	bne.n	8003f74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003f70:	429a      	cmp	r2, r3
 8003f72:	d001      	beq.n	8003f78 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e000      	b.n	8003f7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}
 8003f82:	bf00      	nop
 8003f84:	40023800 	.word	0x40023800

08003f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b084      	sub	sp, #16
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d101      	bne.n	8003f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e0cc      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f9c:	4b68      	ldr	r3, [pc, #416]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0307 	and.w	r3, r3, #7
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	429a      	cmp	r2, r3
 8003fa8:	d90c      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003faa:	4b65      	ldr	r3, [pc, #404]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fac:	683a      	ldr	r2, [r7, #0]
 8003fae:	b2d2      	uxtb	r2, r2
 8003fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 0307 	and.w	r3, r3, #7
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d044      	beq.n	80040a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d119      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d003      	beq.n	8004046 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004042:	2b03      	cmp	r3, #3
 8004044:	d107      	bne.n	8004056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004046:	4b3f      	ldr	r3, [pc, #252]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d109      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004052:	2301      	movs	r3, #1
 8004054:	e06f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004056:	4b3b      	ldr	r3, [pc, #236]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 0302 	and.w	r3, r3, #2
 800405e:	2b00      	cmp	r3, #0
 8004060:	d101      	bne.n	8004066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e067      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004066:	4b37      	ldr	r3, [pc, #220]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f023 0203 	bic.w	r2, r3, #3
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4934      	ldr	r1, [pc, #208]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004074:	4313      	orrs	r3, r2
 8004076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004078:	f7fd f868 	bl	800114c <HAL_GetTick>
 800407c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800407e:	e00a      	b.n	8004096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004080:	f7fd f864 	bl	800114c <HAL_GetTick>
 8004084:	4602      	mov	r2, r0
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	1ad3      	subs	r3, r2, r3
 800408a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800408e:	4293      	cmp	r3, r2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e04f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004096:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 020c 	and.w	r2, r3, #12
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	685b      	ldr	r3, [r3, #4]
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d1eb      	bne.n	8004080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a8:	4b25      	ldr	r3, [pc, #148]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0307 	and.w	r3, r3, #7
 80040b0:	683a      	ldr	r2, [r7, #0]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d20c      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040b6:	4b22      	ldr	r3, [pc, #136]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040b8:	683a      	ldr	r2, [r7, #0]
 80040ba:	b2d2      	uxtb	r2, r2
 80040bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	@ (8004140 <HAL_RCC_ClockConfig+0x1b8>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040fa:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	@ (8004144 <HAL_RCC_ClockConfig+0x1bc>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	@ (8004148 <HAL_RCC_ClockConfig+0x1c0>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	@ (800414c <HAL_RCC_ClockConfig+0x1c4>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	@ (8004150 <HAL_RCC_ClockConfig+0x1c8>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc ffc8 	bl	80010c4 <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08010fdc 	.word	0x08010fdc
 800414c:	20000034 	.word	0x20000034
 8004150:	20000038 	.word	0x20000038

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004158:	b094      	sub	sp, #80	@ 0x50
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800415c:	2300      	movs	r3, #0
 800415e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004160:	2300      	movs	r3, #0
 8004162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004164:	2300      	movs	r3, #0
 8004166:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004168:	2300      	movs	r3, #0
 800416a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416c:	4b79      	ldr	r3, [pc, #484]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d00d      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x40>
 8004178:	2b08      	cmp	r3, #8
 800417a:	f200 80e1 	bhi.w	8004340 <HAL_RCC_GetSysClockFreq+0x1ec>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 8004182:	2b04      	cmp	r3, #4
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x3a>
 8004186:	e0db      	b.n	8004340 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b73      	ldr	r3, [pc, #460]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x204>)
 800418a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800418c:	e0db      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b73      	ldr	r3, [pc, #460]	@ (800435c <HAL_RCC_GetSysClockFreq+0x208>)
 8004190:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004192:	e0d8      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b6f      	ldr	r3, [pc, #444]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800419c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800419e:	4b6d      	ldr	r3, [pc, #436]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d063      	beq.n	8004272 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b6a      	ldr	r3, [pc, #424]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	2200      	movs	r2, #0
 80041b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80041b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80041b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80041be:	2300      	movs	r3, #0
 80041c0:	637b      	str	r3, [r7, #52]	@ 0x34
 80041c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80041c6:	4622      	mov	r2, r4
 80041c8:	462b      	mov	r3, r5
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	0159      	lsls	r1, r3, #5
 80041d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041d8:	0150      	lsls	r0, r2, #5
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4621      	mov	r1, r4
 80041e0:	1a51      	subs	r1, r2, r1
 80041e2:	6139      	str	r1, [r7, #16]
 80041e4:	4629      	mov	r1, r5
 80041e6:	eb63 0301 	sbc.w	r3, r3, r1
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	f04f 0200 	mov.w	r2, #0
 80041f0:	f04f 0300 	mov.w	r3, #0
 80041f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f8:	4659      	mov	r1, fp
 80041fa:	018b      	lsls	r3, r1, #6
 80041fc:	4651      	mov	r1, sl
 80041fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004202:	4651      	mov	r1, sl
 8004204:	018a      	lsls	r2, r1, #6
 8004206:	4651      	mov	r1, sl
 8004208:	ebb2 0801 	subs.w	r8, r2, r1
 800420c:	4659      	mov	r1, fp
 800420e:	eb63 0901 	sbc.w	r9, r3, r1
 8004212:	f04f 0200 	mov.w	r2, #0
 8004216:	f04f 0300 	mov.w	r3, #0
 800421a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004222:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004226:	4690      	mov	r8, r2
 8004228:	4699      	mov	r9, r3
 800422a:	4623      	mov	r3, r4
 800422c:	eb18 0303 	adds.w	r3, r8, r3
 8004230:	60bb      	str	r3, [r7, #8]
 8004232:	462b      	mov	r3, r5
 8004234:	eb49 0303 	adc.w	r3, r9, r3
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004246:	4629      	mov	r1, r5
 8004248:	024b      	lsls	r3, r1, #9
 800424a:	4621      	mov	r1, r4
 800424c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004250:	4621      	mov	r1, r4
 8004252:	024a      	lsls	r2, r1, #9
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800425a:	2200      	movs	r2, #0
 800425c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800425e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004260:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004264:	f7fc f824 	bl	80002b0 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4613      	mov	r3, r2
 800426e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004270:	e058      	b.n	8004324 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004272:	4b38      	ldr	r3, [pc, #224]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	099b      	lsrs	r3, r3, #6
 8004278:	2200      	movs	r2, #0
 800427a:	4618      	mov	r0, r3
 800427c:	4611      	mov	r1, r2
 800427e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004282:	623b      	str	r3, [r7, #32]
 8004284:	2300      	movs	r3, #0
 8004286:	627b      	str	r3, [r7, #36]	@ 0x24
 8004288:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800428c:	4642      	mov	r2, r8
 800428e:	464b      	mov	r3, r9
 8004290:	f04f 0000 	mov.w	r0, #0
 8004294:	f04f 0100 	mov.w	r1, #0
 8004298:	0159      	lsls	r1, r3, #5
 800429a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800429e:	0150      	lsls	r0, r2, #5
 80042a0:	4602      	mov	r2, r0
 80042a2:	460b      	mov	r3, r1
 80042a4:	4641      	mov	r1, r8
 80042a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80042aa:	4649      	mov	r1, r9
 80042ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80042b0:	f04f 0200 	mov.w	r2, #0
 80042b4:	f04f 0300 	mov.w	r3, #0
 80042b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80042bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80042c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80042c4:	ebb2 040a 	subs.w	r4, r2, sl
 80042c8:	eb63 050b 	sbc.w	r5, r3, fp
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	00eb      	lsls	r3, r5, #3
 80042d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042da:	00e2      	lsls	r2, r4, #3
 80042dc:	4614      	mov	r4, r2
 80042de:	461d      	mov	r5, r3
 80042e0:	4643      	mov	r3, r8
 80042e2:	18e3      	adds	r3, r4, r3
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	464b      	mov	r3, r9
 80042e8:	eb45 0303 	adc.w	r3, r5, r3
 80042ec:	607b      	str	r3, [r7, #4]
 80042ee:	f04f 0200 	mov.w	r2, #0
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80042fa:	4629      	mov	r1, r5
 80042fc:	028b      	lsls	r3, r1, #10
 80042fe:	4621      	mov	r1, r4
 8004300:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004304:	4621      	mov	r1, r4
 8004306:	028a      	lsls	r2, r1, #10
 8004308:	4610      	mov	r0, r2
 800430a:	4619      	mov	r1, r3
 800430c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800430e:	2200      	movs	r2, #0
 8004310:	61bb      	str	r3, [r7, #24]
 8004312:	61fa      	str	r2, [r7, #28]
 8004314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004318:	f7fb ffca 	bl	80002b0 <__aeabi_uldivmod>
 800431c:	4602      	mov	r2, r0
 800431e:	460b      	mov	r3, r1
 8004320:	4613      	mov	r3, r2
 8004322:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004324:	4b0b      	ldr	r3, [pc, #44]	@ (8004354 <HAL_RCC_GetSysClockFreq+0x200>)
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	0c1b      	lsrs	r3, r3, #16
 800432a:	f003 0303 	and.w	r3, r3, #3
 800432e:	3301      	adds	r3, #1
 8004330:	005b      	lsls	r3, r3, #1
 8004332:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004334:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004336:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004338:	fbb2 f3f3 	udiv	r3, r2, r3
 800433c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800433e:	e002      	b.n	8004346 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004340:	4b05      	ldr	r3, [pc, #20]	@ (8004358 <HAL_RCC_GetSysClockFreq+0x204>)
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004344:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004346:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004348:	4618      	mov	r0, r3
 800434a:	3750      	adds	r7, #80	@ 0x50
 800434c:	46bd      	mov	sp, r7
 800434e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004352:	bf00      	nop
 8004354:	40023800 	.word	0x40023800
 8004358:	00f42400 	.word	0x00f42400
 800435c:	007a1200 	.word	0x007a1200

08004360 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004360:	b480      	push	{r7}
 8004362:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004364:	4b03      	ldr	r3, [pc, #12]	@ (8004374 <HAL_RCC_GetHCLKFreq+0x14>)
 8004366:	681b      	ldr	r3, [r3, #0]
}
 8004368:	4618      	mov	r0, r3
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	20000034 	.word	0x20000034

08004378 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800437c:	f7ff fff0 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 8004380:	4602      	mov	r2, r0
 8004382:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	0a9b      	lsrs	r3, r3, #10
 8004388:	f003 0307 	and.w	r3, r3, #7
 800438c:	4903      	ldr	r1, [pc, #12]	@ (800439c <HAL_RCC_GetPCLK1Freq+0x24>)
 800438e:	5ccb      	ldrb	r3, [r1, r3]
 8004390:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004394:	4618      	mov	r0, r3
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40023800 	.word	0x40023800
 800439c:	08010fec 	.word	0x08010fec

080043a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043a0:	b580      	push	{r7, lr}
 80043a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043a4:	f7ff ffdc 	bl	8004360 <HAL_RCC_GetHCLKFreq>
 80043a8:	4602      	mov	r2, r0
 80043aa:	4b05      	ldr	r3, [pc, #20]	@ (80043c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043ac:	689b      	ldr	r3, [r3, #8]
 80043ae:	0b5b      	lsrs	r3, r3, #13
 80043b0:	f003 0307 	and.w	r3, r3, #7
 80043b4:	4903      	ldr	r1, [pc, #12]	@ (80043c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043b6:	5ccb      	ldrb	r3, [r1, r3]
 80043b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043bc:	4618      	mov	r0, r3
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	40023800 	.word	0x40023800
 80043c4:	08010fec 	.word	0x08010fec

080043c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e042      	b.n	8004460 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7fc fd70 	bl	8000ed4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2224      	movs	r2, #36	@ 0x24
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68da      	ldr	r2, [r3, #12]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800440a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fdbd 	bl	8004f8c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	691a      	ldr	r2, [r3, #16]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	695a      	ldr	r2, [r3, #20]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004430:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	68da      	ldr	r2, [r3, #12]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004440:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2220      	movs	r2, #32
 8004454:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2200      	movs	r2, #0
 800445c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800445e:	2300      	movs	r3, #0
}
 8004460:	4618      	mov	r0, r3
 8004462:	3708      	adds	r7, #8
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b08a      	sub	sp, #40	@ 0x28
 800446c:	af02      	add	r7, sp, #8
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	603b      	str	r3, [r7, #0]
 8004474:	4613      	mov	r3, r2
 8004476:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004478:	2300      	movs	r3, #0
 800447a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b20      	cmp	r3, #32
 8004486:	d175      	bne.n	8004574 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	2b00      	cmp	r3, #0
 800448c:	d002      	beq.n	8004494 <HAL_UART_Transmit+0x2c>
 800448e:	88fb      	ldrh	r3, [r7, #6]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e06e      	b.n	8004576 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2221      	movs	r2, #33	@ 0x21
 80044a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80044a6:	f7fc fe51 	bl	800114c <HAL_GetTick>
 80044aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	88fa      	ldrh	r2, [r7, #6]
 80044b0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	88fa      	ldrh	r2, [r7, #6]
 80044b6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044c0:	d108      	bne.n	80044d4 <HAL_UART_Transmit+0x6c>
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	691b      	ldr	r3, [r3, #16]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d104      	bne.n	80044d4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	61bb      	str	r3, [r7, #24]
 80044d2:	e003      	b.n	80044dc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80044d8:	2300      	movs	r3, #0
 80044da:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80044dc:	e02e      	b.n	800453c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	9300      	str	r3, [sp, #0]
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	2200      	movs	r2, #0
 80044e6:	2180      	movs	r1, #128	@ 0x80
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fb1f 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 80044ee:	4603      	mov	r3, r0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	2220      	movs	r2, #32
 80044f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e03a      	b.n	8004576 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d10b      	bne.n	800451e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004506:	69bb      	ldr	r3, [r7, #24]
 8004508:	881b      	ldrh	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004514:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	3302      	adds	r3, #2
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e007      	b.n	800452e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	781a      	ldrb	r2, [r3, #0]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	3301      	adds	r3, #1
 800452c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004532:	b29b      	uxth	r3, r3
 8004534:	3b01      	subs	r3, #1
 8004536:	b29a      	uxth	r2, r3
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004540:	b29b      	uxth	r3, r3
 8004542:	2b00      	cmp	r3, #0
 8004544:	d1cb      	bne.n	80044de <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	9300      	str	r3, [sp, #0]
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	2200      	movs	r2, #0
 800454e:	2140      	movs	r1, #64	@ 0x40
 8004550:	68f8      	ldr	r0, [r7, #12]
 8004552:	f000 faeb 	bl	8004b2c <UART_WaitOnFlagUntilTimeout>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2220      	movs	r2, #32
 8004560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004564:	2303      	movs	r3, #3
 8004566:	e006      	b.n	8004576 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2220      	movs	r2, #32
 800456c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004570:	2300      	movs	r3, #0
 8004572:	e000      	b.n	8004576 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004574:	2302      	movs	r3, #2
  }
}
 8004576:	4618      	mov	r0, r3
 8004578:	3720      	adds	r7, #32
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	60f8      	str	r0, [r7, #12]
 8004586:	60b9      	str	r1, [r7, #8]
 8004588:	4613      	mov	r3, r2
 800458a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004592:	b2db      	uxtb	r3, r3
 8004594:	2b20      	cmp	r3, #32
 8004596:	d112      	bne.n	80045be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004598:	68bb      	ldr	r3, [r7, #8]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <HAL_UART_Receive_IT+0x26>
 800459e:	88fb      	ldrh	r3, [r7, #6]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e00b      	b.n	80045c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2200      	movs	r2, #0
 80045ac:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	461a      	mov	r2, r3
 80045b2:	68b9      	ldr	r1, [r7, #8]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 fb12 	bl	8004bde <UART_Start_Receive_IT>
 80045ba:	4603      	mov	r3, r0
 80045bc:	e000      	b.n	80045c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80045be:	2302      	movs	r3, #2
  }
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3710      	adds	r7, #16
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}

080045c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b0ba      	sub	sp, #232	@ 0xe8
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	68db      	ldr	r3, [r3, #12]
 80045e0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80045f4:	2300      	movs	r3, #0
 80045f6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800460a:	2b00      	cmp	r3, #0
 800460c:	d10f      	bne.n	800462e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800460e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004612:	f003 0320 	and.w	r3, r3, #32
 8004616:	2b00      	cmp	r3, #0
 8004618:	d009      	beq.n	800462e <HAL_UART_IRQHandler+0x66>
 800461a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800461e:	f003 0320 	and.w	r3, r3, #32
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fbf2 	bl	8004e10 <UART_Receive_IT>
      return;
 800462c:	e25b      	b.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800462e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004632:	2b00      	cmp	r3, #0
 8004634:	f000 80de 	beq.w	80047f4 <HAL_UART_IRQHandler+0x22c>
 8004638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d106      	bne.n	8004652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004648:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 80d1 	beq.w	80047f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004656:	f003 0301 	and.w	r3, r3, #1
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00b      	beq.n	8004676 <HAL_UART_IRQHandler+0xae>
 800465e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004662:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004666:	2b00      	cmp	r3, #0
 8004668:	d005      	beq.n	8004676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466e:	f043 0201 	orr.w	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800467a:	f003 0304 	and.w	r3, r3, #4
 800467e:	2b00      	cmp	r3, #0
 8004680:	d00b      	beq.n	800469a <HAL_UART_IRQHandler+0xd2>
 8004682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004686:	f003 0301 	and.w	r3, r3, #1
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004692:	f043 0202 	orr.w	r2, r3, #2
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800469a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d00b      	beq.n	80046be <HAL_UART_IRQHandler+0xf6>
 80046a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046aa:	f003 0301 	and.w	r3, r3, #1
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	f043 0204 	orr.w	r2, r3, #4
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80046be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d011      	beq.n	80046ee <HAL_UART_IRQHandler+0x126>
 80046ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80046ce:	f003 0320 	and.w	r3, r3, #32
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d105      	bne.n	80046e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d005      	beq.n	80046ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046e6:	f043 0208 	orr.w	r2, r3, #8
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f000 81f2 	beq.w	8004adc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046fc:	f003 0320 	and.w	r3, r3, #32
 8004700:	2b00      	cmp	r3, #0
 8004702:	d008      	beq.n	8004716 <HAL_UART_IRQHandler+0x14e>
 8004704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004708:	f003 0320 	and.w	r3, r3, #32
 800470c:	2b00      	cmp	r3, #0
 800470e:	d002      	beq.n	8004716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f000 fb7d 	bl	8004e10 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	695b      	ldr	r3, [r3, #20]
 800471c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004720:	2b40      	cmp	r3, #64	@ 0x40
 8004722:	bf0c      	ite	eq
 8004724:	2301      	moveq	r3, #1
 8004726:	2300      	movne	r3, #0
 8004728:	b2db      	uxtb	r3, r3
 800472a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004732:	f003 0308 	and.w	r3, r3, #8
 8004736:	2b00      	cmp	r3, #0
 8004738:	d103      	bne.n	8004742 <HAL_UART_IRQHandler+0x17a>
 800473a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800473e:	2b00      	cmp	r3, #0
 8004740:	d04f      	beq.n	80047e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004742:	6878      	ldr	r0, [r7, #4]
 8004744:	f000 fa85 	bl	8004c52 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004752:	2b40      	cmp	r3, #64	@ 0x40
 8004754:	d141      	bne.n	80047da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3314      	adds	r3, #20
 800475c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004760:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004764:	e853 3f00 	ldrex	r3, [r3]
 8004768:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800476c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004770:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004774:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	3314      	adds	r3, #20
 800477e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004782:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004786:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800478e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004792:	e841 2300 	strex	r3, r2, [r1]
 8004796:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800479a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d1d9      	bne.n	8004756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d013      	beq.n	80047d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047ae:	4a7e      	ldr	r2, [pc, #504]	@ (80049a8 <HAL_UART_IRQHandler+0x3e0>)
 80047b0:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fc fe79 	bl	80014ae <HAL_DMA_Abort_IT>
 80047bc:	4603      	mov	r3, r0
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d016      	beq.n	80047f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80047cc:	4610      	mov	r0, r2
 80047ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d0:	e00e      	b.n	80047f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f000 f994 	bl	8004b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047d8:	e00a      	b.n	80047f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f000 f990 	bl	8004b00 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047e0:	e006      	b.n	80047f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f000 f98c 	bl	8004b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80047ee:	e175      	b.n	8004adc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047f0:	bf00      	nop
    return;
 80047f2:	e173      	b.n	8004adc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	f040 814f 	bne.w	8004a9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8148 	beq.w	8004a9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800480c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004810:	f003 0310 	and.w	r3, r3, #16
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8141 	beq.w	8004a9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800481a:	2300      	movs	r3, #0
 800481c:	60bb      	str	r3, [r7, #8]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60bb      	str	r3, [r7, #8]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	60bb      	str	r3, [r7, #8]
 800482e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	695b      	ldr	r3, [r3, #20]
 8004836:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800483a:	2b40      	cmp	r3, #64	@ 0x40
 800483c:	f040 80b6 	bne.w	80049ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800484c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004850:	2b00      	cmp	r3, #0
 8004852:	f000 8145 	beq.w	8004ae0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800485a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800485e:	429a      	cmp	r2, r3
 8004860:	f080 813e 	bcs.w	8004ae0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800486a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004870:	69db      	ldr	r3, [r3, #28]
 8004872:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004876:	f000 8088 	beq.w	800498a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	330c      	adds	r3, #12
 8004880:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004884:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004888:	e853 3f00 	ldrex	r3, [r3]
 800488c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004890:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004894:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004898:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	330c      	adds	r3, #12
 80048a2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80048a6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80048aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80048b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80048b6:	e841 2300 	strex	r3, r2, [r1]
 80048ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80048be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d1d9      	bne.n	800487a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	3314      	adds	r3, #20
 80048cc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80048d0:	e853 3f00 	ldrex	r3, [r3]
 80048d4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80048d6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80048d8:	f023 0301 	bic.w	r3, r3, #1
 80048dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3314      	adds	r3, #20
 80048e6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80048ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80048ee:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80048f2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80048f6:	e841 2300 	strex	r3, r2, [r1]
 80048fa:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80048fc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1e1      	bne.n	80048c6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	3314      	adds	r3, #20
 8004908:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800490a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800490c:	e853 3f00 	ldrex	r3, [r3]
 8004910:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004912:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004914:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004918:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	3314      	adds	r3, #20
 8004922:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004926:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004928:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800492a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800492c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800492e:	e841 2300 	strex	r3, r2, [r1]
 8004932:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004934:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004936:	2b00      	cmp	r3, #0
 8004938:	d1e3      	bne.n	8004902 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2220      	movs	r2, #32
 800493e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	330c      	adds	r3, #12
 800494e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004950:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004952:	e853 3f00 	ldrex	r3, [r3]
 8004956:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004958:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800495a:	f023 0310 	bic.w	r3, r3, #16
 800495e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	330c      	adds	r3, #12
 8004968:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800496c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800496e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004970:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004972:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004974:	e841 2300 	strex	r3, r2, [r1]
 8004978:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800497a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800497c:	2b00      	cmp	r3, #0
 800497e:	d1e3      	bne.n	8004948 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004984:	4618      	mov	r0, r3
 8004986:	f7fc fd22 	bl	80013ce <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2202      	movs	r2, #2
 800498e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004998:	b29b      	uxth	r3, r3
 800499a:	1ad3      	subs	r3, r2, r3
 800499c:	b29b      	uxth	r3, r3
 800499e:	4619      	mov	r1, r3
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f000 f8b7 	bl	8004b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049a6:	e09b      	b.n	8004ae0 <HAL_UART_IRQHandler+0x518>
 80049a8:	08004d19 	.word	0x08004d19
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049b4:	b29b      	uxth	r3, r3
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80049c0:	b29b      	uxth	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	f000 808e 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80049c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	f000 8089 	beq.w	8004ae4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	330c      	adds	r3, #12
 80049d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049dc:	e853 3f00 	ldrex	r3, [r3]
 80049e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80049e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80049e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80049e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	330c      	adds	r3, #12
 80049f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049f6:	647a      	str	r2, [r7, #68]	@ 0x44
 80049f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049fe:	e841 2300 	strex	r3, r2, [r1]
 8004a02:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004a04:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d1e3      	bne.n	80049d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	3314      	adds	r3, #20
 8004a10:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a14:	e853 3f00 	ldrex	r3, [r3]
 8004a18:	623b      	str	r3, [r7, #32]
   return(result);
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	f023 0301 	bic.w	r3, r3, #1
 8004a20:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	3314      	adds	r3, #20
 8004a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004a2e:	633a      	str	r2, [r7, #48]	@ 0x30
 8004a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a32:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004a34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004a36:	e841 2300 	strex	r3, r2, [r1]
 8004a3a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d1e3      	bne.n	8004a0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2220      	movs	r2, #32
 8004a46:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	330c      	adds	r3, #12
 8004a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	e853 3f00 	ldrex	r3, [r3]
 8004a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f023 0310 	bic.w	r3, r3, #16
 8004a66:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	330c      	adds	r3, #12
 8004a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a74:	61fa      	str	r2, [r7, #28]
 8004a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	69b9      	ldr	r1, [r7, #24]
 8004a7a:	69fa      	ldr	r2, [r7, #28]
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	617b      	str	r3, [r7, #20]
   return(result);
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e3      	bne.n	8004a50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2202      	movs	r2, #2
 8004a8c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a92:	4619      	mov	r1, r3
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f83d 	bl	8004b14 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a9a:	e023      	b.n	8004ae4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d009      	beq.n	8004abc <HAL_UART_IRQHandler+0x4f4>
 8004aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d003      	beq.n	8004abc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004ab4:	6878      	ldr	r0, [r7, #4]
 8004ab6:	f000 f943 	bl	8004d40 <UART_Transmit_IT>
    return;
 8004aba:	e014      	b.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ac0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d00e      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
 8004ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d008      	beq.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f983 	bl	8004de0 <UART_EndTransmit_IT>
    return;
 8004ada:	e004      	b.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
    return;
 8004adc:	bf00      	nop
 8004ade:	e002      	b.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae0:	bf00      	nop
 8004ae2:	e000      	b.n	8004ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8004ae4:	bf00      	nop
  }
}
 8004ae6:	37e8      	adds	r7, #232	@ 0xe8
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	bd80      	pop	{r7, pc}

08004aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aec:	b480      	push	{r7}
 8004aee:	b083      	sub	sp, #12
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004af4:	bf00      	nop
 8004af6:	370c      	adds	r7, #12
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b083      	sub	sp, #12
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b08:	bf00      	nop
 8004b0a:	370c      	adds	r7, #12
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b12:	4770      	bx	lr

08004b14 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004b14:	b480      	push	{r7}
 8004b16:	b083      	sub	sp, #12
 8004b18:	af00      	add	r7, sp, #0
 8004b1a:	6078      	str	r0, [r7, #4]
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004b20:	bf00      	nop
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b086      	sub	sp, #24
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b3c:	e03b      	b.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b3e:	6a3b      	ldr	r3, [r7, #32]
 8004b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b44:	d037      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b46:	f7fc fb01 	bl	800114c <HAL_GetTick>
 8004b4a:	4602      	mov	r2, r0
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	1ad3      	subs	r3, r2, r3
 8004b50:	6a3a      	ldr	r2, [r7, #32]
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d302      	bcc.n	8004b5c <UART_WaitOnFlagUntilTimeout+0x30>
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d101      	bne.n	8004b60 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e03a      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0304 	and.w	r3, r3, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d023      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b6e:	68bb      	ldr	r3, [r7, #8]
 8004b70:	2b80      	cmp	r3, #128	@ 0x80
 8004b72:	d020      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	2b40      	cmp	r3, #64	@ 0x40
 8004b78:	d01d      	beq.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 0308 	and.w	r3, r3, #8
 8004b84:	2b08      	cmp	r3, #8
 8004b86:	d116      	bne.n	8004bb6 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b88:	2300      	movs	r3, #0
 8004b8a:	617b      	str	r3, [r7, #20]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	617b      	str	r3, [r7, #20]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b9e:	68f8      	ldr	r0, [r7, #12]
 8004ba0:	f000 f857 	bl	8004c52 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2208      	movs	r2, #8
 8004ba8:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e00f      	b.n	8004bd6 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	4013      	ands	r3, r2
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	429a      	cmp	r2, r3
 8004bc4:	bf0c      	ite	eq
 8004bc6:	2301      	moveq	r3, #1
 8004bc8:	2300      	movne	r3, #0
 8004bca:	b2db      	uxtb	r3, r3
 8004bcc:	461a      	mov	r2, r3
 8004bce:	79fb      	ldrb	r3, [r7, #7]
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d0b4      	beq.n	8004b3e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004bd4:	2300      	movs	r3, #0
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3718      	adds	r7, #24
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	bd80      	pop	{r7, pc}

08004bde <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004bde:	b480      	push	{r7}
 8004be0:	b085      	sub	sp, #20
 8004be2:	af00      	add	r7, sp, #0
 8004be4:	60f8      	str	r0, [r7, #12]
 8004be6:	60b9      	str	r1, [r7, #8]
 8004be8:	4613      	mov	r3, r2
 8004bea:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	68ba      	ldr	r2, [r7, #8]
 8004bf0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	88fa      	ldrh	r2, [r7, #6]
 8004bf6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2200      	movs	r2, #0
 8004c02:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	2222      	movs	r2, #34	@ 0x22
 8004c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	691b      	ldr	r3, [r3, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d007      	beq.n	8004c24 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	68da      	ldr	r2, [r3, #12]
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c22:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695a      	ldr	r2, [r3, #20]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	68da      	ldr	r2, [r3, #12]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0220 	orr.w	r2, r2, #32
 8004c42:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004c44:	2300      	movs	r3, #0
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3714      	adds	r7, #20
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr

08004c52 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c52:	b480      	push	{r7}
 8004c54:	b095      	sub	sp, #84	@ 0x54
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	330c      	adds	r3, #12
 8004c60:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c6c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c70:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	330c      	adds	r3, #12
 8004c78:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c7a:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c7e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c80:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c82:	e841 2300 	strex	r3, r2, [r1]
 8004c86:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1e5      	bne.n	8004c5a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	3314      	adds	r3, #20
 8004c94:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c96:	6a3b      	ldr	r3, [r7, #32]
 8004c98:	e853 3f00 	ldrex	r3, [r3]
 8004c9c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	f023 0301 	bic.w	r3, r3, #1
 8004ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	3314      	adds	r3, #20
 8004cac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004cae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004cb0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cb4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cb6:	e841 2300 	strex	r3, r2, [r1]
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d1e5      	bne.n	8004c8e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc6:	2b01      	cmp	r3, #1
 8004cc8:	d119      	bne.n	8004cfe <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	330c      	adds	r3, #12
 8004cd0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	e853 3f00 	ldrex	r3, [r3]
 8004cd8:	60bb      	str	r3, [r7, #8]
   return(result);
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	f023 0310 	bic.w	r3, r3, #16
 8004ce0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	330c      	adds	r3, #12
 8004ce8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004cea:	61ba      	str	r2, [r7, #24]
 8004cec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cee:	6979      	ldr	r1, [r7, #20]
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	e841 2300 	strex	r3, r2, [r1]
 8004cf6:	613b      	str	r3, [r7, #16]
   return(result);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d1e5      	bne.n	8004cca <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2220      	movs	r2, #32
 8004d02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	2200      	movs	r2, #0
 8004d0a:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004d0c:	bf00      	nop
 8004d0e:	3754      	adds	r7, #84	@ 0x54
 8004d10:	46bd      	mov	sp, r7
 8004d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d16:	4770      	bx	lr

08004d18 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d18:	b580      	push	{r7, lr}
 8004d1a:	b084      	sub	sp, #16
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d32:	68f8      	ldr	r0, [r7, #12]
 8004d34:	f7ff fee4 	bl	8004b00 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d38:	bf00      	nop
 8004d3a:	3710      	adds	r7, #16
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	bd80      	pop	{r7, pc}

08004d40 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d4e:	b2db      	uxtb	r3, r3
 8004d50:	2b21      	cmp	r3, #33	@ 0x21
 8004d52:	d13e      	bne.n	8004dd2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d5c:	d114      	bne.n	8004d88 <UART_Transmit_IT+0x48>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d110      	bne.n	8004d88 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6a1b      	ldr	r3, [r3, #32]
 8004d6a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	881b      	ldrh	r3, [r3, #0]
 8004d70:	461a      	mov	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d7a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	6a1b      	ldr	r3, [r3, #32]
 8004d80:	1c9a      	adds	r2, r3, #2
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	621a      	str	r2, [r3, #32]
 8004d86:	e008      	b.n	8004d9a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6a1b      	ldr	r3, [r3, #32]
 8004d8c:	1c59      	adds	r1, r3, #1
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6211      	str	r1, [r2, #32]
 8004d92:	781a      	ldrb	r2, [r3, #0]
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d9e:	b29b      	uxth	r3, r3
 8004da0:	3b01      	subs	r3, #1
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	687a      	ldr	r2, [r7, #4]
 8004da6:	4619      	mov	r1, r3
 8004da8:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d10f      	bne.n	8004dce <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	68da      	ldr	r2, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004dbc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	68da      	ldr	r2, [r3, #12]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004dcc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	e000      	b.n	8004dd4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004dd2:	2302      	movs	r3, #2
  }
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3714      	adds	r7, #20
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dde:	4770      	bx	lr

08004de0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b082      	sub	sp, #8
 8004de4:	af00      	add	r7, sp, #0
 8004de6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	68da      	ldr	r2, [r3, #12]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004df6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fe73 	bl	8004aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004e06:	2300      	movs	r3, #0
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3708      	adds	r7, #8
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b08c      	sub	sp, #48	@ 0x30
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004e1e:	b2db      	uxtb	r3, r3
 8004e20:	2b22      	cmp	r3, #34	@ 0x22
 8004e22:	f040 80ae 	bne.w	8004f82 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e2e:	d117      	bne.n	8004e60 <UART_Receive_IT+0x50>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d113      	bne.n	8004e60 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e40:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	b29b      	uxth	r3, r3
 8004e4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e4e:	b29a      	uxth	r2, r3
 8004e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e52:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e58:	1c9a      	adds	r2, r3, #2
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e5e:	e026      	b.n	8004eae <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e64:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e72:	d007      	beq.n	8004e84 <UART_Receive_IT+0x74>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10a      	bne.n	8004e92 <UART_Receive_IT+0x82>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	691b      	ldr	r3, [r3, #16]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d106      	bne.n	8004e92 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8e:	701a      	strb	r2, [r3, #0]
 8004e90:	e008      	b.n	8004ea4 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e9e:	b2da      	uxtb	r2, r3
 8004ea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ea2:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ea8:	1c5a      	adds	r2, r3, #1
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004eb2:	b29b      	uxth	r3, r3
 8004eb4:	3b01      	subs	r3, #1
 8004eb6:	b29b      	uxth	r3, r3
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	4619      	mov	r1, r3
 8004ebc:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d15d      	bne.n	8004f7e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	68da      	ldr	r2, [r3, #12]
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f022 0220 	bic.w	r2, r2, #32
 8004ed0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	68da      	ldr	r2, [r3, #12]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004ee0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695a      	ldr	r2, [r3, #20]
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f022 0201 	bic.w	r2, r2, #1
 8004ef0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2220      	movs	r2, #32
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d135      	bne.n	8004f74 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	330c      	adds	r3, #12
 8004f14:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	e853 3f00 	ldrex	r3, [r3]
 8004f1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	f023 0310 	bic.w	r3, r3, #16
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	330c      	adds	r3, #12
 8004f2c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f2e:	623a      	str	r2, [r7, #32]
 8004f30:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f32:	69f9      	ldr	r1, [r7, #28]
 8004f34:	6a3a      	ldr	r2, [r7, #32]
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e5      	bne.n	8004f0e <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f003 0310 	and.w	r3, r3, #16
 8004f4c:	2b10      	cmp	r3, #16
 8004f4e:	d10a      	bne.n	8004f66 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f50:	2300      	movs	r3, #0
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	60fb      	str	r3, [r7, #12]
 8004f64:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff fdd1 	bl	8004b14 <HAL_UARTEx_RxEventCallback>
 8004f72:	e002      	b.n	8004f7a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7fb fd0b 	bl	8000990 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	e002      	b.n	8004f84 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	e000      	b.n	8004f84 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f82:	2302      	movs	r3, #2
  }
}
 8004f84:	4618      	mov	r0, r3
 8004f86:	3730      	adds	r7, #48	@ 0x30
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}

08004f8c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f90:	b0c0      	sub	sp, #256	@ 0x100
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	691b      	ldr	r3, [r3, #16]
 8004fa0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004fa4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fa8:	68d9      	ldr	r1, [r3, #12]
 8004faa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	ea40 0301 	orr.w	r3, r0, r1
 8004fb4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fba:	689a      	ldr	r2, [r3, #8]
 8004fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	431a      	orrs	r2, r3
 8004fcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd0:	69db      	ldr	r3, [r3, #28]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004fd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004fe4:	f021 010c 	bic.w	r1, r1, #12
 8004fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fec:	681a      	ldr	r2, [r3, #0]
 8004fee:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004ff2:	430b      	orrs	r3, r1
 8004ff4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004ff6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	6999      	ldr	r1, [r3, #24]
 8005008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800500c:	681a      	ldr	r2, [r3, #0]
 800500e:	ea40 0301 	orr.w	r3, r0, r1
 8005012:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005018:	681a      	ldr	r2, [r3, #0]
 800501a:	4b8f      	ldr	r3, [pc, #572]	@ (8005258 <UART_SetConfig+0x2cc>)
 800501c:	429a      	cmp	r2, r3
 800501e:	d005      	beq.n	800502c <UART_SetConfig+0xa0>
 8005020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005024:	681a      	ldr	r2, [r3, #0]
 8005026:	4b8d      	ldr	r3, [pc, #564]	@ (800525c <UART_SetConfig+0x2d0>)
 8005028:	429a      	cmp	r2, r3
 800502a:	d104      	bne.n	8005036 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800502c:	f7ff f9b8 	bl	80043a0 <HAL_RCC_GetPCLK2Freq>
 8005030:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005034:	e003      	b.n	800503e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005036:	f7ff f99f 	bl	8004378 <HAL_RCC_GetPCLK1Freq>
 800503a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800503e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005048:	f040 810c 	bne.w	8005264 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800504c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005050:	2200      	movs	r2, #0
 8005052:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005056:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800505a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800505e:	4622      	mov	r2, r4
 8005060:	462b      	mov	r3, r5
 8005062:	1891      	adds	r1, r2, r2
 8005064:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005066:	415b      	adcs	r3, r3
 8005068:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800506a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800506e:	4621      	mov	r1, r4
 8005070:	eb12 0801 	adds.w	r8, r2, r1
 8005074:	4629      	mov	r1, r5
 8005076:	eb43 0901 	adc.w	r9, r3, r1
 800507a:	f04f 0200 	mov.w	r2, #0
 800507e:	f04f 0300 	mov.w	r3, #0
 8005082:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005086:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800508a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800508e:	4690      	mov	r8, r2
 8005090:	4699      	mov	r9, r3
 8005092:	4623      	mov	r3, r4
 8005094:	eb18 0303 	adds.w	r3, r8, r3
 8005098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800509c:	462b      	mov	r3, r5
 800509e:	eb49 0303 	adc.w	r3, r9, r3
 80050a2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80050a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80050b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80050b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80050ba:	460b      	mov	r3, r1
 80050bc:	18db      	adds	r3, r3, r3
 80050be:	653b      	str	r3, [r7, #80]	@ 0x50
 80050c0:	4613      	mov	r3, r2
 80050c2:	eb42 0303 	adc.w	r3, r2, r3
 80050c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80050c8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80050cc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80050d0:	f7fb f8ee 	bl	80002b0 <__aeabi_uldivmod>
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4b61      	ldr	r3, [pc, #388]	@ (8005260 <UART_SetConfig+0x2d4>)
 80050da:	fba3 2302 	umull	r2, r3, r3, r2
 80050de:	095b      	lsrs	r3, r3, #5
 80050e0:	011c      	lsls	r4, r3, #4
 80050e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050e6:	2200      	movs	r2, #0
 80050e8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80050ec:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050f0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050f4:	4642      	mov	r2, r8
 80050f6:	464b      	mov	r3, r9
 80050f8:	1891      	adds	r1, r2, r2
 80050fa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050fc:	415b      	adcs	r3, r3
 80050fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005100:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005104:	4641      	mov	r1, r8
 8005106:	eb12 0a01 	adds.w	sl, r2, r1
 800510a:	4649      	mov	r1, r9
 800510c:	eb43 0b01 	adc.w	fp, r3, r1
 8005110:	f04f 0200 	mov.w	r2, #0
 8005114:	f04f 0300 	mov.w	r3, #0
 8005118:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800511c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005120:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005124:	4692      	mov	sl, r2
 8005126:	469b      	mov	fp, r3
 8005128:	4643      	mov	r3, r8
 800512a:	eb1a 0303 	adds.w	r3, sl, r3
 800512e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005132:	464b      	mov	r3, r9
 8005134:	eb4b 0303 	adc.w	r3, fp, r3
 8005138:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800513c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005148:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800514c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005150:	460b      	mov	r3, r1
 8005152:	18db      	adds	r3, r3, r3
 8005154:	643b      	str	r3, [r7, #64]	@ 0x40
 8005156:	4613      	mov	r3, r2
 8005158:	eb42 0303 	adc.w	r3, r2, r3
 800515c:	647b      	str	r3, [r7, #68]	@ 0x44
 800515e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005162:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005166:	f7fb f8a3 	bl	80002b0 <__aeabi_uldivmod>
 800516a:	4602      	mov	r2, r0
 800516c:	460b      	mov	r3, r1
 800516e:	4611      	mov	r1, r2
 8005170:	4b3b      	ldr	r3, [pc, #236]	@ (8005260 <UART_SetConfig+0x2d4>)
 8005172:	fba3 2301 	umull	r2, r3, r3, r1
 8005176:	095b      	lsrs	r3, r3, #5
 8005178:	2264      	movs	r2, #100	@ 0x64
 800517a:	fb02 f303 	mul.w	r3, r2, r3
 800517e:	1acb      	subs	r3, r1, r3
 8005180:	00db      	lsls	r3, r3, #3
 8005182:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005186:	4b36      	ldr	r3, [pc, #216]	@ (8005260 <UART_SetConfig+0x2d4>)
 8005188:	fba3 2302 	umull	r2, r3, r3, r2
 800518c:	095b      	lsrs	r3, r3, #5
 800518e:	005b      	lsls	r3, r3, #1
 8005190:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005194:	441c      	add	r4, r3
 8005196:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800519a:	2200      	movs	r2, #0
 800519c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80051a0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80051a4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80051a8:	4642      	mov	r2, r8
 80051aa:	464b      	mov	r3, r9
 80051ac:	1891      	adds	r1, r2, r2
 80051ae:	63b9      	str	r1, [r7, #56]	@ 0x38
 80051b0:	415b      	adcs	r3, r3
 80051b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051b4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80051b8:	4641      	mov	r1, r8
 80051ba:	1851      	adds	r1, r2, r1
 80051bc:	6339      	str	r1, [r7, #48]	@ 0x30
 80051be:	4649      	mov	r1, r9
 80051c0:	414b      	adcs	r3, r1
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80051d0:	4659      	mov	r1, fp
 80051d2:	00cb      	lsls	r3, r1, #3
 80051d4:	4651      	mov	r1, sl
 80051d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80051da:	4651      	mov	r1, sl
 80051dc:	00ca      	lsls	r2, r1, #3
 80051de:	4610      	mov	r0, r2
 80051e0:	4619      	mov	r1, r3
 80051e2:	4603      	mov	r3, r0
 80051e4:	4642      	mov	r2, r8
 80051e6:	189b      	adds	r3, r3, r2
 80051e8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80051ec:	464b      	mov	r3, r9
 80051ee:	460a      	mov	r2, r1
 80051f0:	eb42 0303 	adc.w	r3, r2, r3
 80051f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fc:	685b      	ldr	r3, [r3, #4]
 80051fe:	2200      	movs	r2, #0
 8005200:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005204:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005208:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800520c:	460b      	mov	r3, r1
 800520e:	18db      	adds	r3, r3, r3
 8005210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005212:	4613      	mov	r3, r2
 8005214:	eb42 0303 	adc.w	r3, r2, r3
 8005218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800521a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800521e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005222:	f7fb f845 	bl	80002b0 <__aeabi_uldivmod>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4b0d      	ldr	r3, [pc, #52]	@ (8005260 <UART_SetConfig+0x2d4>)
 800522c:	fba3 1302 	umull	r1, r3, r3, r2
 8005230:	095b      	lsrs	r3, r3, #5
 8005232:	2164      	movs	r1, #100	@ 0x64
 8005234:	fb01 f303 	mul.w	r3, r1, r3
 8005238:	1ad3      	subs	r3, r2, r3
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	3332      	adds	r3, #50	@ 0x32
 800523e:	4a08      	ldr	r2, [pc, #32]	@ (8005260 <UART_SetConfig+0x2d4>)
 8005240:	fba2 2303 	umull	r2, r3, r2, r3
 8005244:	095b      	lsrs	r3, r3, #5
 8005246:	f003 0207 	and.w	r2, r3, #7
 800524a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4422      	add	r2, r4
 8005252:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005254:	e106      	b.n	8005464 <UART_SetConfig+0x4d8>
 8005256:	bf00      	nop
 8005258:	40011000 	.word	0x40011000
 800525c:	40011400 	.word	0x40011400
 8005260:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005264:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005268:	2200      	movs	r2, #0
 800526a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800526e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005272:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005276:	4642      	mov	r2, r8
 8005278:	464b      	mov	r3, r9
 800527a:	1891      	adds	r1, r2, r2
 800527c:	6239      	str	r1, [r7, #32]
 800527e:	415b      	adcs	r3, r3
 8005280:	627b      	str	r3, [r7, #36]	@ 0x24
 8005282:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005286:	4641      	mov	r1, r8
 8005288:	1854      	adds	r4, r2, r1
 800528a:	4649      	mov	r1, r9
 800528c:	eb43 0501 	adc.w	r5, r3, r1
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	f04f 0300 	mov.w	r3, #0
 8005298:	00eb      	lsls	r3, r5, #3
 800529a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800529e:	00e2      	lsls	r2, r4, #3
 80052a0:	4614      	mov	r4, r2
 80052a2:	461d      	mov	r5, r3
 80052a4:	4643      	mov	r3, r8
 80052a6:	18e3      	adds	r3, r4, r3
 80052a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80052ac:	464b      	mov	r3, r9
 80052ae:	eb45 0303 	adc.w	r3, r5, r3
 80052b2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80052b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052ba:	685b      	ldr	r3, [r3, #4]
 80052bc:	2200      	movs	r2, #0
 80052be:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80052c2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80052c6:	f04f 0200 	mov.w	r2, #0
 80052ca:	f04f 0300 	mov.w	r3, #0
 80052ce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80052d2:	4629      	mov	r1, r5
 80052d4:	008b      	lsls	r3, r1, #2
 80052d6:	4621      	mov	r1, r4
 80052d8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80052dc:	4621      	mov	r1, r4
 80052de:	008a      	lsls	r2, r1, #2
 80052e0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80052e4:	f7fa ffe4 	bl	80002b0 <__aeabi_uldivmod>
 80052e8:	4602      	mov	r2, r0
 80052ea:	460b      	mov	r3, r1
 80052ec:	4b60      	ldr	r3, [pc, #384]	@ (8005470 <UART_SetConfig+0x4e4>)
 80052ee:	fba3 2302 	umull	r2, r3, r3, r2
 80052f2:	095b      	lsrs	r3, r3, #5
 80052f4:	011c      	lsls	r4, r3, #4
 80052f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052fa:	2200      	movs	r2, #0
 80052fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005300:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005304:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005308:	4642      	mov	r2, r8
 800530a:	464b      	mov	r3, r9
 800530c:	1891      	adds	r1, r2, r2
 800530e:	61b9      	str	r1, [r7, #24]
 8005310:	415b      	adcs	r3, r3
 8005312:	61fb      	str	r3, [r7, #28]
 8005314:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005318:	4641      	mov	r1, r8
 800531a:	1851      	adds	r1, r2, r1
 800531c:	6139      	str	r1, [r7, #16]
 800531e:	4649      	mov	r1, r9
 8005320:	414b      	adcs	r3, r1
 8005322:	617b      	str	r3, [r7, #20]
 8005324:	f04f 0200 	mov.w	r2, #0
 8005328:	f04f 0300 	mov.w	r3, #0
 800532c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005330:	4659      	mov	r1, fp
 8005332:	00cb      	lsls	r3, r1, #3
 8005334:	4651      	mov	r1, sl
 8005336:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800533a:	4651      	mov	r1, sl
 800533c:	00ca      	lsls	r2, r1, #3
 800533e:	4610      	mov	r0, r2
 8005340:	4619      	mov	r1, r3
 8005342:	4603      	mov	r3, r0
 8005344:	4642      	mov	r2, r8
 8005346:	189b      	adds	r3, r3, r2
 8005348:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800534c:	464b      	mov	r3, r9
 800534e:	460a      	mov	r2, r1
 8005350:	eb42 0303 	adc.w	r3, r2, r3
 8005354:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2200      	movs	r2, #0
 8005360:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005362:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005370:	4649      	mov	r1, r9
 8005372:	008b      	lsls	r3, r1, #2
 8005374:	4641      	mov	r1, r8
 8005376:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800537a:	4641      	mov	r1, r8
 800537c:	008a      	lsls	r2, r1, #2
 800537e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005382:	f7fa ff95 	bl	80002b0 <__aeabi_uldivmod>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4611      	mov	r1, r2
 800538c:	4b38      	ldr	r3, [pc, #224]	@ (8005470 <UART_SetConfig+0x4e4>)
 800538e:	fba3 2301 	umull	r2, r3, r3, r1
 8005392:	095b      	lsrs	r3, r3, #5
 8005394:	2264      	movs	r2, #100	@ 0x64
 8005396:	fb02 f303 	mul.w	r3, r2, r3
 800539a:	1acb      	subs	r3, r1, r3
 800539c:	011b      	lsls	r3, r3, #4
 800539e:	3332      	adds	r3, #50	@ 0x32
 80053a0:	4a33      	ldr	r2, [pc, #204]	@ (8005470 <UART_SetConfig+0x4e4>)
 80053a2:	fba2 2303 	umull	r2, r3, r2, r3
 80053a6:	095b      	lsrs	r3, r3, #5
 80053a8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80053ac:	441c      	add	r4, r3
 80053ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053b2:	2200      	movs	r2, #0
 80053b4:	673b      	str	r3, [r7, #112]	@ 0x70
 80053b6:	677a      	str	r2, [r7, #116]	@ 0x74
 80053b8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80053bc:	4642      	mov	r2, r8
 80053be:	464b      	mov	r3, r9
 80053c0:	1891      	adds	r1, r2, r2
 80053c2:	60b9      	str	r1, [r7, #8]
 80053c4:	415b      	adcs	r3, r3
 80053c6:	60fb      	str	r3, [r7, #12]
 80053c8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80053cc:	4641      	mov	r1, r8
 80053ce:	1851      	adds	r1, r2, r1
 80053d0:	6039      	str	r1, [r7, #0]
 80053d2:	4649      	mov	r1, r9
 80053d4:	414b      	adcs	r3, r1
 80053d6:	607b      	str	r3, [r7, #4]
 80053d8:	f04f 0200 	mov.w	r2, #0
 80053dc:	f04f 0300 	mov.w	r3, #0
 80053e0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80053e4:	4659      	mov	r1, fp
 80053e6:	00cb      	lsls	r3, r1, #3
 80053e8:	4651      	mov	r1, sl
 80053ea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053ee:	4651      	mov	r1, sl
 80053f0:	00ca      	lsls	r2, r1, #3
 80053f2:	4610      	mov	r0, r2
 80053f4:	4619      	mov	r1, r3
 80053f6:	4603      	mov	r3, r0
 80053f8:	4642      	mov	r2, r8
 80053fa:	189b      	adds	r3, r3, r2
 80053fc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053fe:	464b      	mov	r3, r9
 8005400:	460a      	mov	r2, r1
 8005402:	eb42 0303 	adc.w	r3, r2, r3
 8005406:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005408:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	663b      	str	r3, [r7, #96]	@ 0x60
 8005412:	667a      	str	r2, [r7, #100]	@ 0x64
 8005414:	f04f 0200 	mov.w	r2, #0
 8005418:	f04f 0300 	mov.w	r3, #0
 800541c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005420:	4649      	mov	r1, r9
 8005422:	008b      	lsls	r3, r1, #2
 8005424:	4641      	mov	r1, r8
 8005426:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800542a:	4641      	mov	r1, r8
 800542c:	008a      	lsls	r2, r1, #2
 800542e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005432:	f7fa ff3d 	bl	80002b0 <__aeabi_uldivmod>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4b0d      	ldr	r3, [pc, #52]	@ (8005470 <UART_SetConfig+0x4e4>)
 800543c:	fba3 1302 	umull	r1, r3, r3, r2
 8005440:	095b      	lsrs	r3, r3, #5
 8005442:	2164      	movs	r1, #100	@ 0x64
 8005444:	fb01 f303 	mul.w	r3, r1, r3
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	011b      	lsls	r3, r3, #4
 800544c:	3332      	adds	r3, #50	@ 0x32
 800544e:	4a08      	ldr	r2, [pc, #32]	@ (8005470 <UART_SetConfig+0x4e4>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	095b      	lsrs	r3, r3, #5
 8005456:	f003 020f 	and.w	r2, r3, #15
 800545a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	4422      	add	r2, r4
 8005462:	609a      	str	r2, [r3, #8]
}
 8005464:	bf00      	nop
 8005466:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800546a:	46bd      	mov	sp, r7
 800546c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005470:	51eb851f 	.word	0x51eb851f

08005474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005474:	b084      	sub	sp, #16
 8005476:	b580      	push	{r7, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
 800547c:	6078      	str	r0, [r7, #4]
 800547e:	f107 001c 	add.w	r0, r7, #28
 8005482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005486:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800548a:	2b01      	cmp	r3, #1
 800548c:	d123      	bne.n	80054d6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005492:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	68db      	ldr	r3, [r3, #12]
 800549e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80054a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80054a6:	687a      	ldr	r2, [r7, #4]
 80054a8:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	68db      	ldr	r3, [r3, #12]
 80054ae:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80054b6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d105      	bne.n	80054ca <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f9dc 	bl	8005888 <USB_CoreReset>
 80054d0:	4603      	mov	r3, r0
 80054d2:	73fb      	strb	r3, [r7, #15]
 80054d4:	e01b      	b.n	800550e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68db      	ldr	r3, [r3, #12]
 80054da:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9d0 	bl	8005888 <USB_CoreReset>
 80054e8:	4603      	mov	r3, r0
 80054ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80054ec:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d106      	bne.n	8005502 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80054f8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8005500:	e005      	b.n	800550e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005506:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800550e:	7fbb      	ldrb	r3, [r7, #30]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10b      	bne.n	800552c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	f043 0206 	orr.w	r2, r3, #6
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	f043 0220 	orr.w	r2, r3, #32
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800552c:	7bfb      	ldrb	r3, [r7, #15]
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005538:	b004      	add	sp, #16
 800553a:	4770      	bx	lr

0800553c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	689b      	ldr	r3, [r3, #8]
 8005548:	f043 0201 	orr.w	r2, r3, #1
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	370c      	adds	r7, #12
 8005556:	46bd      	mov	sp, r7
 8005558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555c:	4770      	bx	lr

0800555e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800555e:	b480      	push	{r7}
 8005560:	b083      	sub	sp, #12
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	f023 0201 	bic.w	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005572:	2300      	movs	r3, #0
}
 8005574:	4618      	mov	r0, r3
 8005576:	370c      	adds	r7, #12
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr

08005580 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	460b      	mov	r3, r1
 800558a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	68db      	ldr	r3, [r3, #12]
 8005594:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800559c:	78fb      	ldrb	r3, [r7, #3]
 800559e:	2b01      	cmp	r3, #1
 80055a0:	d115      	bne.n	80055ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055ae:	200a      	movs	r0, #10
 80055b0:	f7fb fdd8 	bl	8001164 <HAL_Delay>
      ms += 10U;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	330a      	adds	r3, #10
 80055b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f956 	bl	800586c <USB_GetMode>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d01e      	beq.n	8005604 <USB_SetCurrentMode+0x84>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2bc7      	cmp	r3, #199	@ 0xc7
 80055ca:	d9f0      	bls.n	80055ae <USB_SetCurrentMode+0x2e>
 80055cc:	e01a      	b.n	8005604 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80055ce:	78fb      	ldrb	r3, [r7, #3]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d115      	bne.n	8005600 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80055e0:	200a      	movs	r0, #10
 80055e2:	f7fb fdbf 	bl	8001164 <HAL_Delay>
      ms += 10U;
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	330a      	adds	r3, #10
 80055ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80055ec:	6878      	ldr	r0, [r7, #4]
 80055ee:	f000 f93d 	bl	800586c <USB_GetMode>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <USB_SetCurrentMode+0x84>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2bc7      	cmp	r3, #199	@ 0xc7
 80055fc:	d9f0      	bls.n	80055e0 <USB_SetCurrentMode+0x60>
 80055fe:	e001      	b.n	8005604 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005600:	2301      	movs	r3, #1
 8005602:	e005      	b.n	8005610 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2bc8      	cmp	r3, #200	@ 0xc8
 8005608:	d101      	bne.n	800560e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	3710      	adds	r7, #16
 8005614:	46bd      	mov	sp, r7
 8005616:	bd80      	pop	{r7, pc}

08005618 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005622:	2300      	movs	r3, #0
 8005624:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	3301      	adds	r3, #1
 800562a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005632:	d901      	bls.n	8005638 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e01b      	b.n	8005670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	691b      	ldr	r3, [r3, #16]
 800563c:	2b00      	cmp	r3, #0
 800563e:	daf2      	bge.n	8005626 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005640:	2300      	movs	r3, #0
 8005642:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	019b      	lsls	r3, r3, #6
 8005648:	f043 0220 	orr.w	r2, r3, #32
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	3301      	adds	r3, #1
 8005654:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800565c:	d901      	bls.n	8005662 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e006      	b.n	8005670 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	691b      	ldr	r3, [r3, #16]
 8005666:	f003 0320 	and.w	r3, r3, #32
 800566a:	2b20      	cmp	r3, #32
 800566c:	d0f0      	beq.n	8005650 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800566e:	2300      	movs	r3, #0
}
 8005670:	4618      	mov	r0, r3
 8005672:	3714      	adds	r7, #20
 8005674:	46bd      	mov	sp, r7
 8005676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567a:	4770      	bx	lr

0800567c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800567c:	b480      	push	{r7}
 800567e:	b085      	sub	sp, #20
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005684:	2300      	movs	r3, #0
 8005686:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	3301      	adds	r3, #1
 800568c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005694:	d901      	bls.n	800569a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005696:	2303      	movs	r3, #3
 8005698:	e018      	b.n	80056cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	daf2      	bge.n	8005688 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80056a2:	2300      	movs	r3, #0
 80056a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2210      	movs	r2, #16
 80056aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	3301      	adds	r3, #1
 80056b0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80056b8:	d901      	bls.n	80056be <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80056ba:	2303      	movs	r3, #3
 80056bc:	e006      	b.n	80056cc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	691b      	ldr	r3, [r3, #16]
 80056c2:	f003 0310 	and.w	r3, r3, #16
 80056c6:	2b10      	cmp	r3, #16
 80056c8:	d0f0      	beq.n	80056ac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80056ca:	2300      	movs	r3, #0
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3714      	adds	r7, #20
 80056d0:	46bd      	mov	sp, r7
 80056d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d6:	4770      	bx	lr

080056d8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80056d8:	b480      	push	{r7}
 80056da:	b089      	sub	sp, #36	@ 0x24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	4611      	mov	r1, r2
 80056e4:	461a      	mov	r2, r3
 80056e6:	460b      	mov	r3, r1
 80056e8:	71fb      	strb	r3, [r7, #7]
 80056ea:	4613      	mov	r3, r2
 80056ec:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80056f6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d123      	bne.n	8005746 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80056fe:	88bb      	ldrh	r3, [r7, #4]
 8005700:	3303      	adds	r3, #3
 8005702:	089b      	lsrs	r3, r3, #2
 8005704:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005706:	2300      	movs	r3, #0
 8005708:	61bb      	str	r3, [r7, #24]
 800570a:	e018      	b.n	800573e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800570c:	79fb      	ldrb	r3, [r7, #7]
 800570e:	031a      	lsls	r2, r3, #12
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	4413      	add	r3, r2
 8005714:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005718:	461a      	mov	r2, r3
 800571a:	69fb      	ldr	r3, [r7, #28]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005720:	69fb      	ldr	r3, [r7, #28]
 8005722:	3301      	adds	r3, #1
 8005724:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005726:	69fb      	ldr	r3, [r7, #28]
 8005728:	3301      	adds	r3, #1
 800572a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	3301      	adds	r3, #1
 8005730:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005732:	69fb      	ldr	r3, [r7, #28]
 8005734:	3301      	adds	r3, #1
 8005736:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	3301      	adds	r3, #1
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69ba      	ldr	r2, [r7, #24]
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	429a      	cmp	r2, r3
 8005744:	d3e2      	bcc.n	800570c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3724      	adds	r7, #36	@ 0x24
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005754:	b480      	push	{r7}
 8005756:	b08b      	sub	sp, #44	@ 0x2c
 8005758:	af00      	add	r7, sp, #0
 800575a:	60f8      	str	r0, [r7, #12]
 800575c:	60b9      	str	r1, [r7, #8]
 800575e:	4613      	mov	r3, r2
 8005760:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800576a:	88fb      	ldrh	r3, [r7, #6]
 800576c:	089b      	lsrs	r3, r3, #2
 800576e:	b29b      	uxth	r3, r3
 8005770:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005772:	88fb      	ldrh	r3, [r7, #6]
 8005774:	f003 0303 	and.w	r3, r3, #3
 8005778:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800577a:	2300      	movs	r3, #0
 800577c:	623b      	str	r3, [r7, #32]
 800577e:	e014      	b.n	80057aa <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005780:	69bb      	ldr	r3, [r7, #24]
 8005782:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	601a      	str	r2, [r3, #0]
    pDest++;
 800578c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578e:	3301      	adds	r3, #1
 8005790:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005794:	3301      	adds	r3, #1
 8005796:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	3301      	adds	r3, #1
 800579c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800579e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a0:	3301      	adds	r3, #1
 80057a2:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80057a4:	6a3b      	ldr	r3, [r7, #32]
 80057a6:	3301      	adds	r3, #1
 80057a8:	623b      	str	r3, [r7, #32]
 80057aa:	6a3a      	ldr	r2, [r7, #32]
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d3e6      	bcc.n	8005780 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80057b2:	8bfb      	ldrh	r3, [r7, #30]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d01e      	beq.n	80057f6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80057b8:	2300      	movs	r3, #0
 80057ba:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80057c2:	461a      	mov	r2, r3
 80057c4:	f107 0310 	add.w	r3, r7, #16
 80057c8:	6812      	ldr	r2, [r2, #0]
 80057ca:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80057cc:	693a      	ldr	r2, [r7, #16]
 80057ce:	6a3b      	ldr	r3, [r7, #32]
 80057d0:	b2db      	uxtb	r3, r3
 80057d2:	00db      	lsls	r3, r3, #3
 80057d4:	fa22 f303 	lsr.w	r3, r2, r3
 80057d8:	b2da      	uxtb	r2, r3
 80057da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057dc:	701a      	strb	r2, [r3, #0]
      i++;
 80057de:	6a3b      	ldr	r3, [r7, #32]
 80057e0:	3301      	adds	r3, #1
 80057e2:	623b      	str	r3, [r7, #32]
      pDest++;
 80057e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057e6:	3301      	adds	r3, #1
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80057ea:	8bfb      	ldrh	r3, [r7, #30]
 80057ec:	3b01      	subs	r3, #1
 80057ee:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80057f0:	8bfb      	ldrh	r3, [r7, #30]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d1ea      	bne.n	80057cc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	372c      	adds	r7, #44	@ 0x2c
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr

08005804 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8005804:	b480      	push	{r7}
 8005806:	b085      	sub	sp, #20
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	695b      	ldr	r3, [r3, #20]
 8005810:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	4013      	ands	r3, r2
 800581a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800581c:	68fb      	ldr	r3, [r7, #12]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3714      	adds	r7, #20
 8005822:	46bd      	mov	sp, r7
 8005824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005828:	4770      	bx	lr

0800582a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800582a:	b480      	push	{r7}
 800582c:	b085      	sub	sp, #20
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	460b      	mov	r3, r1
 8005834:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800583a:	78fb      	ldrb	r3, [r7, #3]
 800583c:	015a      	lsls	r2, r3, #5
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	4413      	add	r3, r2
 8005842:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	015a      	lsls	r2, r3, #5
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	4413      	add	r3, r2
 8005852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005856:	68db      	ldr	r3, [r3, #12]
 8005858:	68ba      	ldr	r2, [r7, #8]
 800585a:	4013      	ands	r3, r2
 800585c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800585e:	68bb      	ldr	r3, [r7, #8]
}
 8005860:	4618      	mov	r0, r3
 8005862:	3714      	adds	r7, #20
 8005864:	46bd      	mov	sp, r7
 8005866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586a:	4770      	bx	lr

0800586c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800586c:	b480      	push	{r7}
 800586e:	b083      	sub	sp, #12
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	695b      	ldr	r3, [r3, #20]
 8005878:	f003 0301 	and.w	r3, r3, #1
}
 800587c:	4618      	mov	r0, r3
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005888:	b480      	push	{r7}
 800588a:	b085      	sub	sp, #20
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3301      	adds	r3, #1
 8005898:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058a0:	d901      	bls.n	80058a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e01b      	b.n	80058de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	daf2      	bge.n	8005894 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80058ae:	2300      	movs	r3, #0
 80058b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f043 0201 	orr.w	r2, r3, #1
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	3301      	adds	r3, #1
 80058c2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80058ca:	d901      	bls.n	80058d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80058cc:	2303      	movs	r3, #3
 80058ce:	e006      	b.n	80058de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	691b      	ldr	r3, [r3, #16]
 80058d4:	f003 0301 	and.w	r3, r3, #1
 80058d8:	2b01      	cmp	r3, #1
 80058da:	d0f0      	beq.n	80058be <USB_CoreReset+0x36>

  return HAL_OK;
 80058dc:	2300      	movs	r3, #0
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
	...

080058ec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80058ec:	b084      	sub	sp, #16
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b086      	sub	sp, #24
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80058fa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80058fe:	2300      	movs	r3, #0
 8005900:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800590c:	461a      	mov	r2, r3
 800590e:	2300      	movs	r3, #0
 8005910:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005916:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005922:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800592e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68db      	ldr	r3, [r3, #12]
 800593a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d119      	bne.n	8005976 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8005942:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005946:	2b01      	cmp	r3, #1
 8005948:	d10a      	bne.n	8005960 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	68fa      	ldr	r2, [r7, #12]
 8005954:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6013      	str	r3, [r2, #0]
 800595e:	e014      	b.n	800598a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800596e:	f023 0304 	bic.w	r3, r3, #4
 8005972:	6013      	str	r3, [r2, #0]
 8005974:	e009      	b.n	800598a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	68fa      	ldr	r2, [r7, #12]
 8005980:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005984:	f023 0304 	bic.w	r3, r3, #4
 8005988:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800598a:	2110      	movs	r1, #16
 800598c:	6878      	ldr	r0, [r7, #4]
 800598e:	f7ff fe43 	bl	8005618 <USB_FlushTxFifo>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d001      	beq.n	800599c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8005998:	2301      	movs	r3, #1
 800599a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800599c:	6878      	ldr	r0, [r7, #4]
 800599e:	f7ff fe6d 	bl	800567c <USB_FlushRxFifo>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d001      	beq.n	80059ac <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80059ac:	2300      	movs	r3, #0
 80059ae:	613b      	str	r3, [r7, #16]
 80059b0:	e015      	b.n	80059de <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	015a      	lsls	r2, r3, #5
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	4413      	add	r3, r2
 80059ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059be:	461a      	mov	r2, r3
 80059c0:	f04f 33ff 	mov.w	r3, #4294967295
 80059c4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	015a      	lsls	r2, r3, #5
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	4413      	add	r3, r2
 80059ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80059d2:	461a      	mov	r2, r3
 80059d4:	2300      	movs	r3, #0
 80059d6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	3301      	adds	r3, #1
 80059dc:	613b      	str	r3, [r7, #16]
 80059de:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80059e2:	461a      	mov	r2, r3
 80059e4:	693b      	ldr	r3, [r7, #16]
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d3e3      	bcc.n	80059b2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2200      	movs	r2, #0
 80059ee:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	f04f 32ff 	mov.w	r2, #4294967295
 80059f6:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2280      	movs	r2, #128	@ 0x80
 80059fc:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a0e      	ldr	r2, [pc, #56]	@ (8005a3c <USB_HostInit+0x150>)
 8005a02:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a0e      	ldr	r2, [pc, #56]	@ (8005a40 <USB_HostInit+0x154>)
 8005a08:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005a0c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d105      	bne.n	8005a20 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	699b      	ldr	r3, [r3, #24]
 8005a18:	f043 0210 	orr.w	r2, r3, #16
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	699a      	ldr	r2, [r3, #24]
 8005a24:	4b07      	ldr	r3, [pc, #28]	@ (8005a44 <USB_HostInit+0x158>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	687a      	ldr	r2, [r7, #4]
 8005a2a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005a2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3718      	adds	r7, #24
 8005a32:	46bd      	mov	sp, r7
 8005a34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005a38:	b004      	add	sp, #16
 8005a3a:	4770      	bx	lr
 8005a3c:	00600080 	.word	0x00600080
 8005a40:	004000e0 	.word	0x004000e0
 8005a44:	a3200008 	.word	0xa3200008

08005a48 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	460b      	mov	r3, r1
 8005a52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	68fa      	ldr	r2, [r7, #12]
 8005a62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8005a66:	f023 0303 	bic.w	r3, r3, #3
 8005a6a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a72:	681a      	ldr	r2, [r3, #0]
 8005a74:	78fb      	ldrb	r3, [r7, #3]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	68f9      	ldr	r1, [r7, #12]
 8005a7c:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005a80:	4313      	orrs	r3, r2
 8005a82:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005a84:	78fb      	ldrb	r3, [r7, #3]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d107      	bne.n	8005a9a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a90:	461a      	mov	r2, r3
 8005a92:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8005a96:	6053      	str	r3, [r2, #4]
 8005a98:	e00c      	b.n	8005ab4 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d107      	bne.n	8005ab0 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	f241 7370 	movw	r3, #6000	@ 0x1770
 8005aac:	6053      	str	r3, [r2, #4]
 8005aae:	e001      	b.n	8005ab4 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8005ab4:	2300      	movs	r3, #0
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3714      	adds	r7, #20
 8005aba:	46bd      	mov	sp, r7
 8005abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac0:	4770      	bx	lr

08005ac2 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8005ac2:	b580      	push	{r7, lr}
 8005ac4:	b084      	sub	sp, #16
 8005ac6:	af00      	add	r7, sp, #0
 8005ac8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005ae2:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005aec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005af0:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8005af2:	2064      	movs	r0, #100	@ 0x64
 8005af4:	f7fb fb36 	bl	8001164 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005b04:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005b06:	200a      	movs	r0, #10
 8005b08:	f7fb fb2c 	bl	8001164 <HAL_Delay>

  return HAL_OK;
 8005b0c:	2300      	movs	r3, #0
}
 8005b0e:	4618      	mov	r0, r3
 8005b10:	3710      	adds	r7, #16
 8005b12:	46bd      	mov	sp, r7
 8005b14:	bd80      	pop	{r7, pc}

08005b16 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005b16:	b480      	push	{r7}
 8005b18:	b085      	sub	sp, #20
 8005b1a:	af00      	add	r7, sp, #0
 8005b1c:	6078      	str	r0, [r7, #4]
 8005b1e:	460b      	mov	r3, r1
 8005b20:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b26:	2300      	movs	r3, #0
 8005b28:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8005b3a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d109      	bne.n	8005b5a <USB_DriveVbus+0x44>
 8005b46:	78fb      	ldrb	r3, [r7, #3]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d106      	bne.n	8005b5a <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	68fa      	ldr	r2, [r7, #12]
 8005b50:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005b58:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005b5a:	68bb      	ldr	r3, [r7, #8]
 8005b5c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005b60:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b64:	d109      	bne.n	8005b7a <USB_DriveVbus+0x64>
 8005b66:	78fb      	ldrb	r3, [r7, #3]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d106      	bne.n	8005b7a <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005b6c:	68bb      	ldr	r3, [r7, #8]
 8005b6e:	68fa      	ldr	r2, [r7, #12]
 8005b70:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8005b74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b78:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005b7a:	2300      	movs	r3, #0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b085      	sub	sp, #20
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005b94:	2300      	movs	r3, #0
 8005b96:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005ba2:	68bb      	ldr	r3, [r7, #8]
 8005ba4:	0c5b      	lsrs	r3, r3, #17
 8005ba6:	f003 0303 	and.w	r3, r3, #3
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3714      	adds	r7, #20
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb4:	4770      	bx	lr

08005bb6 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8005bb6:	b480      	push	{r7}
 8005bb8:	b085      	sub	sp, #20
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	b29b      	uxth	r3, r3
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3714      	adds	r7, #20
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr

08005bd8 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b088      	sub	sp, #32
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
 8005be0:	4608      	mov	r0, r1
 8005be2:	4611      	mov	r1, r2
 8005be4:	461a      	mov	r2, r3
 8005be6:	4603      	mov	r3, r0
 8005be8:	70fb      	strb	r3, [r7, #3]
 8005bea:	460b      	mov	r3, r1
 8005bec:	70bb      	strb	r3, [r7, #2]
 8005bee:	4613      	mov	r3, r2
 8005bf0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8005bfa:	78fb      	ldrb	r3, [r7, #3]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c06:	461a      	mov	r2, r3
 8005c08:	f04f 33ff 	mov.w	r3, #4294967295
 8005c0c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005c0e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005c12:	2b03      	cmp	r3, #3
 8005c14:	d867      	bhi.n	8005ce6 <USB_HC_Init+0x10e>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <USB_HC_Init+0x44>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005ca9 	.word	0x08005ca9
 8005c24:	08005c2d 	.word	0x08005c2d
 8005c28:	08005c6b 	.word	0x08005c6b
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c2c:	78fb      	ldrb	r3, [r7, #3]
 8005c2e:	015a      	lsls	r2, r3, #5
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	4413      	add	r3, r2
 8005c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c38:	461a      	mov	r2, r3
 8005c3a:	f240 439d 	movw	r3, #1181	@ 0x49d
 8005c3e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005c40:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	da51      	bge.n	8005cec <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c48:	78fb      	ldrb	r3, [r7, #3]
 8005c4a:	015a      	lsls	r2, r3, #5
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	4413      	add	r3, r2
 8005c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	78fa      	ldrb	r2, [r7, #3]
 8005c58:	0151      	lsls	r1, r2, #5
 8005c5a:	693a      	ldr	r2, [r7, #16]
 8005c5c:	440a      	add	r2, r1
 8005c5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005c62:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005c66:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8005c68:	e040      	b.n	8005cec <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005c6a:	78fb      	ldrb	r3, [r7, #3]
 8005c6c:	015a      	lsls	r2, r3, #5
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	4413      	add	r3, r2
 8005c72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c76:	461a      	mov	r2, r3
 8005c78:	f240 639d 	movw	r3, #1693	@ 0x69d
 8005c7c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005c7e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da34      	bge.n	8005cf0 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005c86:	78fb      	ldrb	r3, [r7, #3]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	693b      	ldr	r3, [r7, #16]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	78fa      	ldrb	r2, [r7, #3]
 8005c96:	0151      	lsls	r1, r2, #5
 8005c98:	693a      	ldr	r2, [r7, #16]
 8005c9a:	440a      	add	r2, r1
 8005c9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005ca0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005ca4:	60d3      	str	r3, [r2, #12]
      }

      break;
 8005ca6:	e023      	b.n	8005cf0 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005ca8:	78fb      	ldrb	r3, [r7, #3]
 8005caa:	015a      	lsls	r2, r3, #5
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	4413      	add	r3, r2
 8005cb0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cb4:	461a      	mov	r2, r3
 8005cb6:	f240 2325 	movw	r3, #549	@ 0x225
 8005cba:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005cbc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	da17      	bge.n	8005cf4 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005cc4:	78fb      	ldrb	r3, [r7, #3]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	693b      	ldr	r3, [r7, #16]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005cd0:	68db      	ldr	r3, [r3, #12]
 8005cd2:	78fa      	ldrb	r2, [r7, #3]
 8005cd4:	0151      	lsls	r1, r2, #5
 8005cd6:	693a      	ldr	r2, [r7, #16]
 8005cd8:	440a      	add	r2, r1
 8005cda:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005cde:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8005ce2:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005ce4:	e006      	b.n	8005cf4 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8005ce6:	2301      	movs	r3, #1
 8005ce8:	77fb      	strb	r3, [r7, #31]
      break;
 8005cea:	e004      	b.n	8005cf6 <USB_HC_Init+0x11e>
      break;
 8005cec:	bf00      	nop
 8005cee:	e002      	b.n	8005cf6 <USB_HC_Init+0x11e>
      break;
 8005cf0:	bf00      	nop
 8005cf2:	e000      	b.n	8005cf6 <USB_HC_Init+0x11e>
      break;
 8005cf4:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	015a      	lsls	r2, r3, #5
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	4413      	add	r3, r2
 8005cfe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d02:	461a      	mov	r2, r3
 8005d04:	2300      	movs	r3, #0
 8005d06:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005d08:	78fb      	ldrb	r3, [r7, #3]
 8005d0a:	015a      	lsls	r2, r3, #5
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	4413      	add	r3, r2
 8005d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005d14:	68db      	ldr	r3, [r3, #12]
 8005d16:	78fa      	ldrb	r2, [r7, #3]
 8005d18:	0151      	lsls	r1, r2, #5
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	440a      	add	r2, r1
 8005d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005d22:	f043 0302 	orr.w	r3, r3, #2
 8005d26:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005d28:	693b      	ldr	r3, [r7, #16]
 8005d2a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005d2e:	699a      	ldr	r2, [r3, #24]
 8005d30:	78fb      	ldrb	r3, [r7, #3]
 8005d32:	f003 030f 	and.w	r3, r3, #15
 8005d36:	2101      	movs	r1, #1
 8005d38:	fa01 f303 	lsl.w	r3, r1, r3
 8005d3c:	6939      	ldr	r1, [r7, #16]
 8005d3e:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8005d42:	4313      	orrs	r3, r2
 8005d44:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	699b      	ldr	r3, [r3, #24]
 8005d4a:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005d52:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	da03      	bge.n	8005d62 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005d5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005d5e:	61bb      	str	r3, [r7, #24]
 8005d60:	e001      	b.n	8005d66 <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8005d62:	2300      	movs	r3, #0
 8005d64:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	f7ff ff0e 	bl	8005b88 <USB_GetHostSpeed>
 8005d6c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005d6e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d106      	bne.n	8005d84 <USB_HC_Init+0x1ac>
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2b02      	cmp	r3, #2
 8005d7a:	d003      	beq.n	8005d84 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005d7c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8005d80:	617b      	str	r3, [r7, #20]
 8005d82:	e001      	b.n	8005d88 <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d88:	787b      	ldrb	r3, [r7, #1]
 8005d8a:	059b      	lsls	r3, r3, #22
 8005d8c:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005d90:	78bb      	ldrb	r3, [r7, #2]
 8005d92:	02db      	lsls	r3, r3, #11
 8005d94:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005d98:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005d9a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005d9e:	049b      	lsls	r3, r3, #18
 8005da0:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005da4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8005da6:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005da8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005dac:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005dae:	69bb      	ldr	r3, [r7, #24]
 8005db0:	431a      	orrs	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005db6:	78fa      	ldrb	r2, [r7, #3]
 8005db8:	0151      	lsls	r1, r2, #5
 8005dba:	693a      	ldr	r2, [r7, #16]
 8005dbc:	440a      	add	r2, r1
 8005dbe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8005dc2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005dc6:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8005dc8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dcc:	2b03      	cmp	r3, #3
 8005dce:	d003      	beq.n	8005dd8 <USB_HC_Init+0x200>
 8005dd0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d10f      	bne.n	8005df8 <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005dd8:	78fb      	ldrb	r3, [r7, #3]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	693b      	ldr	r3, [r7, #16]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	78fa      	ldrb	r2, [r7, #3]
 8005de8:	0151      	lsls	r1, r2, #5
 8005dea:	693a      	ldr	r2, [r7, #16]
 8005dec:	440a      	add	r2, r1
 8005dee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005df2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005df6:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005df8:	7ffb      	ldrb	r3, [r7, #31]
}
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	3720      	adds	r7, #32
 8005dfe:	46bd      	mov	sp, r7
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	bf00      	nop

08005e04 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b08c      	sub	sp, #48	@ 0x30
 8005e08:	af02      	add	r7, sp, #8
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	4613      	mov	r3, r2
 8005e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	785b      	ldrb	r3, [r3, #1]
 8005e1a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8005e1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005e20:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8005e22:	68bb      	ldr	r3, [r7, #8]
 8005e24:	799b      	ldrb	r3, [r3, #6]
 8005e26:	2b01      	cmp	r3, #1
 8005e28:	d158      	bne.n	8005edc <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	78db      	ldrb	r3, [r3, #3]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d007      	beq.n	8005e46 <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005e36:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005e38:	68ba      	ldr	r2, [r7, #8]
 8005e3a:	8a92      	ldrh	r2, [r2, #20]
 8005e3c:	fb03 f202 	mul.w	r2, r3, r2
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61da      	str	r2, [r3, #28]
 8005e44:	e079      	b.n	8005f3a <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	7c9b      	ldrb	r3, [r3, #18]
 8005e4a:	2b01      	cmp	r3, #1
 8005e4c:	d130      	bne.n	8005eb0 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8005e4e:	68bb      	ldr	r3, [r7, #8]
 8005e50:	6a1b      	ldr	r3, [r3, #32]
 8005e52:	2bbc      	cmp	r3, #188	@ 0xbc
 8005e54:	d918      	bls.n	8005e88 <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8005e56:	68bb      	ldr	r3, [r7, #8]
 8005e58:	8a9b      	ldrh	r3, [r3, #20]
 8005e5a:	461a      	mov	r2, r3
 8005e5c:	68bb      	ldr	r3, [r7, #8]
 8005e5e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8005e60:	68bb      	ldr	r3, [r7, #8]
 8005e62:	69da      	ldr	r2, [r3, #28]
 8005e64:	68bb      	ldr	r3, [r7, #8]
 8005e66:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	2b01      	cmp	r3, #1
 8005e6e:	d003      	beq.n	8005e78 <USB_HC_StartXfer+0x74>
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	68db      	ldr	r3, [r3, #12]
 8005e74:	2b02      	cmp	r3, #2
 8005e76:	d103      	bne.n	8005e80 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	2202      	movs	r2, #2
 8005e7c:	60da      	str	r2, [r3, #12]
 8005e7e:	e05c      	b.n	8005f3a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2201      	movs	r2, #1
 8005e84:	60da      	str	r2, [r3, #12]
 8005e86:	e058      	b.n	8005f3a <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005e88:	68bb      	ldr	r3, [r7, #8]
 8005e8a:	6a1a      	ldr	r2, [r3, #32]
 8005e8c:	68bb      	ldr	r3, [r7, #8]
 8005e8e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d007      	beq.n	8005ea8 <USB_HC_StartXfer+0xa4>
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	2b02      	cmp	r3, #2
 8005e9e:	d003      	beq.n	8005ea8 <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005ea0:	68bb      	ldr	r3, [r7, #8]
 8005ea2:	2204      	movs	r2, #4
 8005ea4:	60da      	str	r2, [r3, #12]
 8005ea6:	e048      	b.n	8005f3a <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8005ea8:	68bb      	ldr	r3, [r7, #8]
 8005eaa:	2203      	movs	r2, #3
 8005eac:	60da      	str	r2, [r3, #12]
 8005eae:	e044      	b.n	8005f3a <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005eb0:	79fb      	ldrb	r3, [r7, #7]
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d10d      	bne.n	8005ed2 <USB_HC_StartXfer+0xce>
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6a1b      	ldr	r3, [r3, #32]
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	8a92      	ldrh	r2, [r2, #20]
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d907      	bls.n	8005ed2 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ec2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	8a92      	ldrh	r2, [r2, #20]
 8005ec8:	fb03 f202 	mul.w	r2, r3, r2
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	61da      	str	r2, [r3, #28]
 8005ed0:	e033      	b.n	8005f3a <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	6a1a      	ldr	r2, [r3, #32]
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	61da      	str	r2, [r3, #28]
 8005eda:	e02e      	b.n	8005f3a <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6a1b      	ldr	r3, [r3, #32]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d018      	beq.n	8005f16 <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	6a1b      	ldr	r3, [r3, #32]
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	8a92      	ldrh	r2, [r2, #20]
 8005eec:	4413      	add	r3, r2
 8005eee:	3b01      	subs	r3, #1
 8005ef0:	68ba      	ldr	r2, [r7, #8]
 8005ef2:	8a92      	ldrh	r2, [r2, #20]
 8005ef4:	fbb3 f3f2 	udiv	r3, r3, r2
 8005ef8:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8005efa:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005efc:	8b7b      	ldrh	r3, [r7, #26]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d90b      	bls.n	8005f1a <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005f02:	8b7b      	ldrh	r3, [r7, #26]
 8005f04:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f06:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f08:	68ba      	ldr	r2, [r7, #8]
 8005f0a:	8a92      	ldrh	r2, [r2, #20]
 8005f0c:	fb03 f202 	mul.w	r2, r3, r2
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	61da      	str	r2, [r3, #28]
 8005f14:	e001      	b.n	8005f1a <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 8005f16:	2301      	movs	r3, #1
 8005f18:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8005f1a:	68bb      	ldr	r3, [r7, #8]
 8005f1c:	78db      	ldrb	r3, [r3, #3]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d007      	beq.n	8005f32 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005f22:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f24:	68ba      	ldr	r2, [r7, #8]
 8005f26:	8a92      	ldrh	r2, [r2, #20]
 8005f28:	fb03 f202 	mul.w	r2, r3, r2
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	61da      	str	r2, [r3, #28]
 8005f30:	e003      	b.n	8005f3a <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	6a1a      	ldr	r2, [r3, #32]
 8005f36:	68bb      	ldr	r3, [r7, #8]
 8005f38:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f3a:	68bb      	ldr	r3, [r7, #8]
 8005f3c:	69db      	ldr	r3, [r3, #28]
 8005f3e:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005f44:	04d9      	lsls	r1, r3, #19
 8005f46:	4ba4      	ldr	r3, [pc, #656]	@ (80061d8 <USB_HC_StartXfer+0x3d4>)
 8005f48:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f4a:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	7d9b      	ldrb	r3, [r3, #22]
 8005f50:	075b      	lsls	r3, r3, #29
 8005f52:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f56:	69f9      	ldr	r1, [r7, #28]
 8005f58:	0148      	lsls	r0, r1, #5
 8005f5a:	6a39      	ldr	r1, [r7, #32]
 8005f5c:	4401      	add	r1, r0
 8005f5e:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005f62:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005f64:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005f66:	79fb      	ldrb	r3, [r7, #7]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d009      	beq.n	8005f80 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	6999      	ldr	r1, [r3, #24]
 8005f70:	69fb      	ldr	r3, [r7, #28]
 8005f72:	015a      	lsls	r2, r3, #5
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	4413      	add	r3, r2
 8005f78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005f7c:	460a      	mov	r2, r1
 8005f7e:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005f80:	6a3b      	ldr	r3, [r7, #32]
 8005f82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	bf0c      	ite	eq
 8005f90:	2301      	moveq	r3, #1
 8005f92:	2300      	movne	r3, #0
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	015a      	lsls	r2, r3, #5
 8005f9c:	6a3b      	ldr	r3, [r7, #32]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	69fa      	ldr	r2, [r7, #28]
 8005fa8:	0151      	lsls	r1, r2, #5
 8005faa:	6a3a      	ldr	r2, [r7, #32]
 8005fac:	440a      	add	r2, r1
 8005fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005fb2:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005fb6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	015a      	lsls	r2, r3, #5
 8005fbc:	6a3b      	ldr	r3, [r7, #32]
 8005fbe:	4413      	add	r3, r2
 8005fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005fc4:	681a      	ldr	r2, [r3, #0]
 8005fc6:	7e7b      	ldrb	r3, [r7, #25]
 8005fc8:	075b      	lsls	r3, r3, #29
 8005fca:	69f9      	ldr	r1, [r7, #28]
 8005fcc:	0148      	lsls	r0, r1, #5
 8005fce:	6a39      	ldr	r1, [r7, #32]
 8005fd0:	4401      	add	r1, r0
 8005fd2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8005fd6:	4313      	orrs	r3, r2
 8005fd8:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	799b      	ldrb	r3, [r3, #6]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	f040 80c4 	bne.w	800616c <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	7c5b      	ldrb	r3, [r3, #17]
 8005fe8:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005fea:	68ba      	ldr	r2, [r7, #8]
 8005fec:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	69fa      	ldr	r2, [r7, #28]
 8005ff2:	0151      	lsls	r1, r2, #5
 8005ff4:	6a3a      	ldr	r2, [r7, #32]
 8005ff6:	440a      	add	r2, r1
 8005ff8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005ffc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8006000:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8006002:	69fb      	ldr	r3, [r7, #28]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	6a3b      	ldr	r3, [r7, #32]
 8006008:	4413      	add	r3, r2
 800600a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	69fa      	ldr	r2, [r7, #28]
 8006012:	0151      	lsls	r1, r2, #5
 8006014:	6a3a      	ldr	r2, [r7, #32]
 8006016:	440a      	add	r2, r1
 8006018:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800601c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8006020:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	79db      	ldrb	r3, [r3, #7]
 8006026:	2b01      	cmp	r3, #1
 8006028:	d123      	bne.n	8006072 <USB_HC_StartXfer+0x26e>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	78db      	ldrb	r3, [r3, #3]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d11f      	bne.n	8006072 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	015a      	lsls	r2, r3, #5
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	4413      	add	r3, r2
 800603a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	69fa      	ldr	r2, [r7, #28]
 8006042:	0151      	lsls	r1, r2, #5
 8006044:	6a3a      	ldr	r2, [r7, #32]
 8006046:	440a      	add	r2, r1
 8006048:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800604c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006050:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	015a      	lsls	r2, r3, #5
 8006056:	6a3b      	ldr	r3, [r7, #32]
 8006058:	4413      	add	r3, r2
 800605a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	69fa      	ldr	r2, [r7, #28]
 8006062:	0151      	lsls	r1, r2, #5
 8006064:	6a3a      	ldr	r2, [r7, #32]
 8006066:	440a      	add	r2, r1
 8006068:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800606c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006070:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	7c9b      	ldrb	r3, [r3, #18]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d003      	beq.n	8006082 <USB_HC_StartXfer+0x27e>
 800607a:	68bb      	ldr	r3, [r7, #8]
 800607c:	7c9b      	ldrb	r3, [r3, #18]
 800607e:	2b03      	cmp	r3, #3
 8006080:	d117      	bne.n	80060b2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8006086:	2b01      	cmp	r3, #1
 8006088:	d113      	bne.n	80060b2 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	78db      	ldrb	r3, [r3, #3]
 800608e:	2b01      	cmp	r3, #1
 8006090:	d10f      	bne.n	80060b2 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	015a      	lsls	r2, r3, #5
 8006096:	6a3b      	ldr	r3, [r7, #32]
 8006098:	4413      	add	r3, r2
 800609a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800609e:	685b      	ldr	r3, [r3, #4]
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	0151      	lsls	r1, r2, #5
 80060a4:	6a3a      	ldr	r2, [r7, #32]
 80060a6:	440a      	add	r2, r1
 80060a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80060b0:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 80060b2:	68bb      	ldr	r3, [r7, #8]
 80060b4:	7c9b      	ldrb	r3, [r3, #18]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d163      	bne.n	8006182 <USB_HC_StartXfer+0x37e>
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	78db      	ldrb	r3, [r3, #3]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d15f      	bne.n	8006182 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	68db      	ldr	r3, [r3, #12]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	2b03      	cmp	r3, #3
 80060ca:	d859      	bhi.n	8006180 <USB_HC_StartXfer+0x37c>
 80060cc:	a201      	add	r2, pc, #4	@ (adr r2, 80060d4 <USB_HC_StartXfer+0x2d0>)
 80060ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060d2:	bf00      	nop
 80060d4:	080060e5 	.word	0x080060e5
 80060d8:	08006107 	.word	0x08006107
 80060dc:	08006129 	.word	0x08006129
 80060e0:	0800614b 	.word	0x0800614b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	015a      	lsls	r2, r3, #5
 80060e8:	6a3b      	ldr	r3, [r7, #32]
 80060ea:	4413      	add	r3, r2
 80060ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	69fa      	ldr	r2, [r7, #28]
 80060f4:	0151      	lsls	r1, r2, #5
 80060f6:	6a3a      	ldr	r2, [r7, #32]
 80060f8:	440a      	add	r2, r1
 80060fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80060fe:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006102:	6053      	str	r3, [r2, #4]
          break;
 8006104:	e03d      	b.n	8006182 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	015a      	lsls	r2, r3, #5
 800610a:	6a3b      	ldr	r3, [r7, #32]
 800610c:	4413      	add	r3, r2
 800610e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	69fa      	ldr	r2, [r7, #28]
 8006116:	0151      	lsls	r1, r2, #5
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	440a      	add	r2, r1
 800611c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006120:	f043 030e 	orr.w	r3, r3, #14
 8006124:	6053      	str	r3, [r2, #4]
          break;
 8006126:	e02c      	b.n	8006182 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8006128:	69fb      	ldr	r3, [r7, #28]
 800612a:	015a      	lsls	r2, r3, #5
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	4413      	add	r3, r2
 8006130:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	69fa      	ldr	r2, [r7, #28]
 8006138:	0151      	lsls	r1, r2, #5
 800613a:	6a3a      	ldr	r2, [r7, #32]
 800613c:	440a      	add	r2, r1
 800613e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006142:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006146:	6053      	str	r3, [r2, #4]
          break;
 8006148:	e01b      	b.n	8006182 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	015a      	lsls	r2, r3, #5
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	4413      	add	r3, r2
 8006152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006156:	685b      	ldr	r3, [r3, #4]
 8006158:	69fa      	ldr	r2, [r7, #28]
 800615a:	0151      	lsls	r1, r2, #5
 800615c:	6a3a      	ldr	r2, [r7, #32]
 800615e:	440a      	add	r2, r1
 8006160:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8006168:	6053      	str	r3, [r2, #4]
          break;
 800616a:	e00a      	b.n	8006182 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800616c:	69fb      	ldr	r3, [r7, #28]
 800616e:	015a      	lsls	r2, r3, #5
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	4413      	add	r3, r2
 8006174:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006178:	461a      	mov	r2, r3
 800617a:	2300      	movs	r3, #0
 800617c:	6053      	str	r3, [r2, #4]
 800617e:	e000      	b.n	8006182 <USB_HC_StartXfer+0x37e>
          break;
 8006180:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	015a      	lsls	r2, r3, #5
 8006186:	6a3b      	ldr	r3, [r7, #32]
 8006188:	4413      	add	r3, r2
 800618a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006198:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	78db      	ldrb	r3, [r3, #3]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d004      	beq.n	80061ac <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80061a8:	613b      	str	r3, [r7, #16]
 80061aa:	e003      	b.n	80061b4 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80061b2:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80061ba:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	015a      	lsls	r2, r3, #5
 80061c0:	6a3b      	ldr	r3, [r7, #32]
 80061c2:	4413      	add	r3, r2
 80061c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80061c8:	461a      	mov	r2, r3
 80061ca:	693b      	ldr	r3, [r7, #16]
 80061cc:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80061ce:	79fb      	ldrb	r3, [r7, #7]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d003      	beq.n	80061dc <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 80061d4:	2300      	movs	r3, #0
 80061d6:	e055      	b.n	8006284 <USB_HC_StartXfer+0x480>
 80061d8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80061dc:	68bb      	ldr	r3, [r7, #8]
 80061de:	78db      	ldrb	r3, [r3, #3]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d14e      	bne.n	8006282 <USB_HC_StartXfer+0x47e>
 80061e4:	68bb      	ldr	r3, [r7, #8]
 80061e6:	6a1b      	ldr	r3, [r3, #32]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d04a      	beq.n	8006282 <USB_HC_StartXfer+0x47e>
 80061ec:	68bb      	ldr	r3, [r7, #8]
 80061ee:	79db      	ldrb	r3, [r3, #7]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d146      	bne.n	8006282 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	7c9b      	ldrb	r3, [r3, #18]
 80061f8:	2b03      	cmp	r3, #3
 80061fa:	d831      	bhi.n	8006260 <USB_HC_StartXfer+0x45c>
 80061fc:	a201      	add	r2, pc, #4	@ (adr r2, 8006204 <USB_HC_StartXfer+0x400>)
 80061fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006202:	bf00      	nop
 8006204:	08006215 	.word	0x08006215
 8006208:	08006239 	.word	0x08006239
 800620c:	08006215 	.word	0x08006215
 8006210:	08006239 	.word	0x08006239
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	6a1b      	ldr	r3, [r3, #32]
 8006218:	3303      	adds	r3, #3
 800621a:	089b      	lsrs	r3, r3, #2
 800621c:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800621e:	8afa      	ldrh	r2, [r7, #22]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006224:	b29b      	uxth	r3, r3
 8006226:	429a      	cmp	r2, r3
 8006228:	d91c      	bls.n	8006264 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	699b      	ldr	r3, [r3, #24]
 800622e:	f043 0220 	orr.w	r2, r3, #32
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	619a      	str	r2, [r3, #24]
        }
        break;
 8006236:	e015      	b.n	8006264 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006238:	68bb      	ldr	r3, [r7, #8]
 800623a:	6a1b      	ldr	r3, [r3, #32]
 800623c:	3303      	adds	r3, #3
 800623e:	089b      	lsrs	r3, r3, #2
 8006240:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006242:	8afa      	ldrh	r2, [r7, #22]
 8006244:	6a3b      	ldr	r3, [r7, #32]
 8006246:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800624a:	691b      	ldr	r3, [r3, #16]
 800624c:	b29b      	uxth	r3, r3
 800624e:	429a      	cmp	r2, r3
 8006250:	d90a      	bls.n	8006268 <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	699b      	ldr	r3, [r3, #24]
 8006256:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	619a      	str	r2, [r3, #24]
        }
        break;
 800625e:	e003      	b.n	8006268 <USB_HC_StartXfer+0x464>

      default:
        break;
 8006260:	bf00      	nop
 8006262:	e002      	b.n	800626a <USB_HC_StartXfer+0x466>
        break;
 8006264:	bf00      	nop
 8006266:	e000      	b.n	800626a <USB_HC_StartXfer+0x466>
        break;
 8006268:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	6999      	ldr	r1, [r3, #24]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	785a      	ldrb	r2, [r3, #1]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	6a1b      	ldr	r3, [r3, #32]
 8006276:	b29b      	uxth	r3, r3
 8006278:	2000      	movs	r0, #0
 800627a:	9000      	str	r0, [sp, #0]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7ff fa2b 	bl	80056d8 <USB_WritePacket>
  }

  return HAL_OK;
 8006282:	2300      	movs	r3, #0
}
 8006284:	4618      	mov	r0, r3
 8006286:	3728      	adds	r7, #40	@ 0x28
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}

0800628c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800629e:	695b      	ldr	r3, [r3, #20]
 80062a0:	b29b      	uxth	r3, r3
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b089      	sub	sp, #36	@ 0x24
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80062be:	78fb      	ldrb	r3, [r7, #3]
 80062c0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	015a      	lsls	r2, r3, #5
 80062ca:	69fb      	ldr	r3, [r7, #28]
 80062cc:	4413      	add	r3, r2
 80062ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	0c9b      	lsrs	r3, r3, #18
 80062d6:	f003 0303 	and.w	r3, r3, #3
 80062da:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	015a      	lsls	r2, r3, #5
 80062e0:	69fb      	ldr	r3, [r7, #28]
 80062e2:	4413      	add	r3, r2
 80062e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	0fdb      	lsrs	r3, r3, #31
 80062ec:	f003 0301 	and.w	r3, r3, #1
 80062f0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	015a      	lsls	r2, r3, #5
 80062f6:	69fb      	ldr	r3, [r7, #28]
 80062f8:	4413      	add	r3, r2
 80062fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80062fe:	685b      	ldr	r3, [r3, #4]
 8006300:	0fdb      	lsrs	r3, r3, #31
 8006302:	f003 0301 	and.w	r3, r3, #1
 8006306:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	689b      	ldr	r3, [r3, #8]
 800630c:	f003 0320 	and.w	r3, r3, #32
 8006310:	2b20      	cmp	r3, #32
 8006312:	d10d      	bne.n	8006330 <USB_HC_Halt+0x82>
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d10a      	bne.n	8006330 <USB_HC_Halt+0x82>
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d005      	beq.n	800632c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2b01      	cmp	r3, #1
 8006324:	d002      	beq.n	800632c <USB_HC_Halt+0x7e>
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	2b03      	cmp	r3, #3
 800632a:	d101      	bne.n	8006330 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800632c:	2300      	movs	r3, #0
 800632e:	e0d8      	b.n	80064e2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d002      	beq.n	800633c <USB_HC_Halt+0x8e>
 8006336:	697b      	ldr	r3, [r7, #20]
 8006338:	2b02      	cmp	r3, #2
 800633a:	d173      	bne.n	8006424 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	015a      	lsls	r2, r3, #5
 8006340:	69fb      	ldr	r3, [r7, #28]
 8006342:	4413      	add	r3, r2
 8006344:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	69ba      	ldr	r2, [r7, #24]
 800634c:	0151      	lsls	r1, r2, #5
 800634e:	69fa      	ldr	r2, [r7, #28]
 8006350:	440a      	add	r2, r1
 8006352:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006356:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800635a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f003 0320 	and.w	r3, r3, #32
 8006364:	2b00      	cmp	r3, #0
 8006366:	d14a      	bne.n	80063fe <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800636c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006370:	2b00      	cmp	r3, #0
 8006372:	d133      	bne.n	80063dc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006374:	69bb      	ldr	r3, [r7, #24]
 8006376:	015a      	lsls	r2, r3, #5
 8006378:	69fb      	ldr	r3, [r7, #28]
 800637a:	4413      	add	r3, r2
 800637c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69ba      	ldr	r2, [r7, #24]
 8006384:	0151      	lsls	r1, r2, #5
 8006386:	69fa      	ldr	r2, [r7, #28]
 8006388:	440a      	add	r2, r1
 800638a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800638e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006392:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006394:	69bb      	ldr	r3, [r7, #24]
 8006396:	015a      	lsls	r2, r3, #5
 8006398:	69fb      	ldr	r3, [r7, #28]
 800639a:	4413      	add	r3, r2
 800639c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	69ba      	ldr	r2, [r7, #24]
 80063a4:	0151      	lsls	r1, r2, #5
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	440a      	add	r2, r1
 80063aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063ae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063b2:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	3301      	adds	r3, #1
 80063b8:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80063c0:	d82e      	bhi.n	8006420 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80063c2:	69bb      	ldr	r3, [r7, #24]
 80063c4:	015a      	lsls	r2, r3, #5
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	4413      	add	r3, r2
 80063ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80063d4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80063d8:	d0ec      	beq.n	80063b4 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063da:	e081      	b.n	80064e0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	015a      	lsls	r2, r3, #5
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	4413      	add	r3, r2
 80063e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	0151      	lsls	r1, r2, #5
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	440a      	add	r2, r1
 80063f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80063f6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80063fa:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80063fc:	e070      	b.n	80064e0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80063fe:	69bb      	ldr	r3, [r7, #24]
 8006400:	015a      	lsls	r2, r3, #5
 8006402:	69fb      	ldr	r3, [r7, #28]
 8006404:	4413      	add	r3, r2
 8006406:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	69ba      	ldr	r2, [r7, #24]
 800640e:	0151      	lsls	r1, r2, #5
 8006410:	69fa      	ldr	r2, [r7, #28]
 8006412:	440a      	add	r2, r1
 8006414:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006418:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800641c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800641e:	e05f      	b.n	80064e0 <USB_HC_Halt+0x232>
            break;
 8006420:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006422:	e05d      	b.n	80064e0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	015a      	lsls	r2, r3, #5
 8006428:	69fb      	ldr	r3, [r7, #28]
 800642a:	4413      	add	r3, r2
 800642c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	69ba      	ldr	r2, [r7, #24]
 8006434:	0151      	lsls	r1, r2, #5
 8006436:	69fa      	ldr	r2, [r7, #28]
 8006438:	440a      	add	r2, r1
 800643a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800643e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006442:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800644a:	691b      	ldr	r3, [r3, #16]
 800644c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006450:	2b00      	cmp	r3, #0
 8006452:	d133      	bne.n	80064bc <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006454:	69bb      	ldr	r3, [r7, #24]
 8006456:	015a      	lsls	r2, r3, #5
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	4413      	add	r3, r2
 800645c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	69ba      	ldr	r2, [r7, #24]
 8006464:	0151      	lsls	r1, r2, #5
 8006466:	69fa      	ldr	r2, [r7, #28]
 8006468:	440a      	add	r2, r1
 800646a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800646e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006472:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006474:	69bb      	ldr	r3, [r7, #24]
 8006476:	015a      	lsls	r2, r3, #5
 8006478:	69fb      	ldr	r3, [r7, #28]
 800647a:	4413      	add	r3, r2
 800647c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	69ba      	ldr	r2, [r7, #24]
 8006484:	0151      	lsls	r1, r2, #5
 8006486:	69fa      	ldr	r2, [r7, #28]
 8006488:	440a      	add	r2, r1
 800648a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800648e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006492:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	3301      	adds	r3, #1
 8006498:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80064a0:	d81d      	bhi.n	80064de <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80064a2:	69bb      	ldr	r3, [r7, #24]
 80064a4:	015a      	lsls	r2, r3, #5
 80064a6:	69fb      	ldr	r3, [r7, #28]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80064b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80064b8:	d0ec      	beq.n	8006494 <USB_HC_Halt+0x1e6>
 80064ba:	e011      	b.n	80064e0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	015a      	lsls	r2, r3, #5
 80064c0:	69fb      	ldr	r3, [r7, #28]
 80064c2:	4413      	add	r3, r2
 80064c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	69ba      	ldr	r2, [r7, #24]
 80064cc:	0151      	lsls	r1, r2, #5
 80064ce:	69fa      	ldr	r2, [r7, #28]
 80064d0:	440a      	add	r2, r1
 80064d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80064d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80064da:	6013      	str	r3, [r2, #0]
 80064dc:	e000      	b.n	80064e0 <USB_HC_Halt+0x232>
          break;
 80064de:	bf00      	nop
    }
  }

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3724      	adds	r7, #36	@ 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b088      	sub	sp, #32
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80064f6:	2300      	movs	r3, #0
 80064f8:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80064fe:	2300      	movs	r3, #0
 8006500:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006502:	6878      	ldr	r0, [r7, #4]
 8006504:	f7ff f82b 	bl	800555e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006508:	2110      	movs	r1, #16
 800650a:	6878      	ldr	r0, [r7, #4]
 800650c:	f7ff f884 	bl	8005618 <USB_FlushTxFifo>
 8006510:	4603      	mov	r3, r0
 8006512:	2b00      	cmp	r3, #0
 8006514:	d001      	beq.n	800651a <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff f8ae 	bl	800567c <USB_FlushRxFifo>
 8006520:	4603      	mov	r3, r0
 8006522:	2b00      	cmp	r3, #0
 8006524:	d001      	beq.n	800652a <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800652a:	2300      	movs	r3, #0
 800652c:	61bb      	str	r3, [r7, #24]
 800652e:	e01f      	b.n	8006570 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006530:	69bb      	ldr	r3, [r7, #24]
 8006532:	015a      	lsls	r2, r3, #5
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	4413      	add	r3, r2
 8006538:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006546:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800654e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006550:	693b      	ldr	r3, [r7, #16]
 8006552:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8006556:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006558:	69bb      	ldr	r3, [r7, #24]
 800655a:	015a      	lsls	r2, r3, #5
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	4413      	add	r3, r2
 8006560:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006564:	461a      	mov	r2, r3
 8006566:	693b      	ldr	r3, [r7, #16]
 8006568:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	3301      	adds	r3, #1
 800656e:	61bb      	str	r3, [r7, #24]
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	2b0f      	cmp	r3, #15
 8006574:	d9dc      	bls.n	8006530 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006576:	2300      	movs	r3, #0
 8006578:	61bb      	str	r3, [r7, #24]
 800657a:	e034      	b.n	80065e6 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800657c:	69bb      	ldr	r3, [r7, #24]
 800657e:	015a      	lsls	r2, r3, #5
 8006580:	697b      	ldr	r3, [r7, #20]
 8006582:	4413      	add	r3, r2
 8006584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006592:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800659a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80065a2:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80065a4:	69bb      	ldr	r3, [r7, #24]
 80065a6:	015a      	lsls	r2, r3, #5
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	4413      	add	r3, r2
 80065ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065b0:	461a      	mov	r2, r3
 80065b2:	693b      	ldr	r3, [r7, #16]
 80065b4:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	3301      	adds	r3, #1
 80065ba:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80065c2:	d80c      	bhi.n	80065de <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	015a      	lsls	r2, r3, #5
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065d6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80065da:	d0ec      	beq.n	80065b6 <USB_StopHost+0xc8>
 80065dc:	e000      	b.n	80065e0 <USB_StopHost+0xf2>
        break;
 80065de:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	3301      	adds	r3, #1
 80065e4:	61bb      	str	r3, [r7, #24]
 80065e6:	69bb      	ldr	r3, [r7, #24]
 80065e8:	2b0f      	cmp	r3, #15
 80065ea:	d9c7      	bls.n	800657c <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80065f2:	461a      	mov	r2, r3
 80065f4:	f04f 33ff 	mov.w	r3, #4294967295
 80065f8:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006600:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006602:	6878      	ldr	r0, [r7, #4]
 8006604:	f7fe ff9a 	bl	800553c <USB_EnableGlobalInt>

  return ret;
 8006608:	7ffb      	ldrb	r3, [r7, #31]
}
 800660a:	4618      	mov	r0, r3
 800660c:	3720      	adds	r7, #32
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}

08006612 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006612:	b590      	push	{r4, r7, lr}
 8006614:	b08b      	sub	sp, #44	@ 0x2c
 8006616:	af04      	add	r7, sp, #16
 8006618:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 800661a:	2300      	movs	r3, #0
 800661c:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 800661e:	2300      	movs	r3, #0
 8006620:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 8006622:	2300      	movs	r3, #0
 8006624:	2201      	movs	r2, #1
 8006626:	2101      	movs	r1, #1
 8006628:	6878      	ldr	r0, [r7, #4]
 800662a:	f006 f91d 	bl	800c868 <USBH_FindInterface>
 800662e:	4603      	mov	r3, r0
 8006630:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 8006632:	7c7b      	ldrb	r3, [r7, #17]
 8006634:	2bff      	cmp	r3, #255	@ 0xff
 8006636:	d101      	bne.n	800663c <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006638:	2302      	movs	r3, #2
 800663a:	e1a5      	b.n	8006988 <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 8006642:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 8006646:	f008 ffad 	bl	800f5a4 <malloc>
 800664a:	4603      	mov	r3, r0
 800664c:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006654:	69db      	ldr	r3, [r3, #28]
 8006656:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d101      	bne.n	8006662 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 800665e:	2302      	movs	r3, #2
 8006660:	e192      	b.n	8006988 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 8006662:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 8006666:	2100      	movs	r1, #0
 8006668:	68f8      	ldr	r0, [r7, #12]
 800666a:	f009 fa97 	bl	800fb9c <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fc0f 	bl	8006e92 <USBH_AUDIO_FindAudioStreamingIN>
 8006674:	4603      	mov	r3, r0
 8006676:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fcc9 	bl	8007010 <USBH_AUDIO_FindAudioStreamingOUT>
 800667e:	4603      	mov	r3, r0
 8006680:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8006682:	7afb      	ldrb	r3, [r7, #11]
 8006684:	2b02      	cmp	r3, #2
 8006686:	d104      	bne.n	8006692 <USBH_AUDIO_InterfaceInit+0x80>
 8006688:	7abb      	ldrb	r3, [r7, #10]
 800668a:	2b02      	cmp	r3, #2
 800668c:	d101      	bne.n	8006692 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800668e:	2302      	movs	r3, #2
 8006690:	e17a      	b.n	8006988 <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006692:	2300      	movs	r3, #0
 8006694:	75fb      	strb	r3, [r7, #23]
 8006696:	e0c6      	b.n	8006826 <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 8006698:	7dfa      	ldrb	r2, [r7, #23]
 800669a:	68f9      	ldr	r1, [r7, #12]
 800669c:	4613      	mov	r3, r2
 800669e:	009b      	lsls	r3, r3, #2
 80066a0:	4413      	add	r3, r2
 80066a2:	005b      	lsls	r3, r3, #1
 80066a4:	440b      	add	r3, r1
 80066a6:	333e      	adds	r3, #62	@ 0x3e
 80066a8:	781b      	ldrb	r3, [r3, #0]
 80066aa:	2b01      	cmp	r3, #1
 80066ac:	d156      	bne.n	800675c <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 80066ae:	7dfa      	ldrb	r2, [r7, #23]
 80066b0:	68f9      	ldr	r1, [r7, #12]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	005b      	lsls	r3, r3, #1
 80066ba:	440b      	add	r3, r1
 80066bc:	333a      	adds	r3, #58	@ 0x3a
 80066be:	881b      	ldrh	r3, [r3, #0]
 80066c0:	8aba      	ldrh	r2, [r7, #20]
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d24a      	bcs.n	800675c <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 80066c6:	7dfa      	ldrb	r2, [r7, #23]
 80066c8:	68f9      	ldr	r1, [r7, #12]
 80066ca:	4613      	mov	r3, r2
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	4413      	add	r3, r2
 80066d0:	005b      	lsls	r3, r3, #1
 80066d2:	440b      	add	r3, r1
 80066d4:	333a      	adds	r3, #58	@ 0x3a
 80066d6:	881b      	ldrh	r3, [r3, #0]
 80066d8:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 80066da:	7dfa      	ldrb	r2, [r7, #23]
 80066dc:	68f9      	ldr	r1, [r7, #12]
 80066de:	4613      	mov	r3, r2
 80066e0:	009b      	lsls	r3, r3, #2
 80066e2:	4413      	add	r3, r2
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	440b      	add	r3, r1
 80066e8:	333d      	adds	r3, #61	@ 0x3d
 80066ea:	781a      	ldrb	r2, [r3, #0]
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 80066f2:	7dfa      	ldrb	r2, [r7, #23]
 80066f4:	68f9      	ldr	r1, [r7, #12]
 80066f6:	4613      	mov	r3, r2
 80066f8:	009b      	lsls	r3, r3, #2
 80066fa:	4413      	add	r3, r2
 80066fc:	005b      	lsls	r3, r3, #1
 80066fe:	440b      	add	r3, r1
 8006700:	333c      	adds	r3, #60	@ 0x3c
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800670a:	7dfa      	ldrb	r2, [r7, #23]
 800670c:	68f9      	ldr	r1, [r7, #12]
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	005b      	lsls	r3, r3, #1
 8006716:	440b      	add	r3, r1
 8006718:	3338      	adds	r3, #56	@ 0x38
 800671a:	781a      	ldrb	r2, [r3, #0]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 8006722:	7dfa      	ldrb	r2, [r7, #23]
 8006724:	68f9      	ldr	r1, [r7, #12]
 8006726:	4613      	mov	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4413      	add	r3, r2
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	440b      	add	r3, r1
 8006730:	333a      	adds	r3, #58	@ 0x3a
 8006732:	881a      	ldrh	r2, [r3, #0]
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 800673a:	7dfa      	ldrb	r2, [r7, #23]
 800673c:	68f9      	ldr	r1, [r7, #12]
 800673e:	4613      	mov	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	005b      	lsls	r3, r3, #1
 8006746:	440b      	add	r3, r1
 8006748:	3340      	adds	r3, #64	@ 0x40
 800674a:	881b      	ldrh	r3, [r3, #0]
 800674c:	b2da      	uxtb	r2, r3
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2201      	movs	r2, #1
 8006758:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 800675c:	7dfa      	ldrb	r2, [r7, #23]
 800675e:	68f9      	ldr	r1, [r7, #12]
 8006760:	4613      	mov	r3, r2
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	005b      	lsls	r3, r3, #1
 8006768:	440b      	add	r3, r1
 800676a:	330c      	adds	r3, #12
 800676c:	781b      	ldrb	r3, [r3, #0]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d156      	bne.n	8006820 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8006772:	7dfa      	ldrb	r2, [r7, #23]
 8006774:	68f9      	ldr	r1, [r7, #12]
 8006776:	4613      	mov	r3, r2
 8006778:	009b      	lsls	r3, r3, #2
 800677a:	4413      	add	r3, r2
 800677c:	005b      	lsls	r3, r3, #1
 800677e:	440b      	add	r3, r1
 8006780:	3308      	adds	r3, #8
 8006782:	881b      	ldrh	r3, [r3, #0]
 8006784:	8a7a      	ldrh	r2, [r7, #18]
 8006786:	429a      	cmp	r2, r3
 8006788:	d24a      	bcs.n	8006820 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800678a:	7dfa      	ldrb	r2, [r7, #23]
 800678c:	68f9      	ldr	r1, [r7, #12]
 800678e:	4613      	mov	r3, r2
 8006790:	009b      	lsls	r3, r3, #2
 8006792:	4413      	add	r3, r2
 8006794:	005b      	lsls	r3, r3, #1
 8006796:	440b      	add	r3, r1
 8006798:	3308      	adds	r3, #8
 800679a:	881b      	ldrh	r3, [r3, #0]
 800679c:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 800679e:	7dfa      	ldrb	r2, [r7, #23]
 80067a0:	68f9      	ldr	r1, [r7, #12]
 80067a2:	4613      	mov	r3, r2
 80067a4:	009b      	lsls	r3, r3, #2
 80067a6:	4413      	add	r3, r2
 80067a8:	005b      	lsls	r3, r3, #1
 80067aa:	440b      	add	r3, r1
 80067ac:	330b      	adds	r3, #11
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 80067b6:	7dfa      	ldrb	r2, [r7, #23]
 80067b8:	68f9      	ldr	r1, [r7, #12]
 80067ba:	4613      	mov	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4413      	add	r3, r2
 80067c0:	005b      	lsls	r3, r3, #1
 80067c2:	440b      	add	r3, r1
 80067c4:	330a      	adds	r3, #10
 80067c6:	781a      	ldrb	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 80067ce:	7dfa      	ldrb	r2, [r7, #23]
 80067d0:	68f9      	ldr	r1, [r7, #12]
 80067d2:	4613      	mov	r3, r2
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	005b      	lsls	r3, r3, #1
 80067da:	440b      	add	r3, r1
 80067dc:	3306      	adds	r3, #6
 80067de:	781a      	ldrb	r2, [r3, #0]
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 80067e6:	7dfa      	ldrb	r2, [r7, #23]
 80067e8:	68f9      	ldr	r1, [r7, #12]
 80067ea:	4613      	mov	r3, r2
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	440b      	add	r3, r1
 80067f4:	3308      	adds	r3, #8
 80067f6:	881a      	ldrh	r2, [r3, #0]
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80067fe:	7dfa      	ldrb	r2, [r7, #23]
 8006800:	68f9      	ldr	r1, [r7, #12]
 8006802:	4613      	mov	r3, r2
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	4413      	add	r3, r2
 8006808:	005b      	lsls	r3, r3, #1
 800680a:	440b      	add	r3, r1
 800680c:	3340      	adds	r3, #64	@ 0x40
 800680e:	881b      	ldrh	r3, [r3, #0]
 8006810:	b2da      	uxtb	r2, r3
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        AUDIO_Handle->microphone.supported = 1U;
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8006820:	7dfb      	ldrb	r3, [r7, #23]
 8006822:	3301      	adds	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
 8006826:	7dfb      	ldrb	r3, [r7, #23]
 8006828:	2b04      	cmp	r3, #4
 800682a:	f67f af35 	bls.w	8006698 <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fcad 	bl	800718e <USBH_AUDIO_FindHIDControl>
 8006834:	4603      	mov	r3, r0
 8006836:	2b00      	cmp	r3, #0
 8006838:	d103      	bne.n	8006842 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fd25 	bl	8007292 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 800684e:	2b01      	cmp	r3, #1
 8006850:	d12e      	bne.n	80068b0 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 ff60 	bl	8007718 <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800685e:	4619      	mov	r1, r3
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f007 fc26 	bl	800e0b2 <USBH_AllocPipe>
 8006866:	4603      	mov	r3, r0
 8006868:	461a      	mov	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f893 10fb 	ldrb.w	r1, [r3, #251]	@ 0xfb
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	f893 00f4 	ldrb.w	r0, [r3, #244]	@ 0xf4
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 800688e:	9202      	str	r2, [sp, #8]
 8006890:	2201      	movs	r2, #1
 8006892:	9201      	str	r2, [sp, #4]
 8006894:	9300      	str	r3, [sp, #0]
 8006896:	4623      	mov	r3, r4
 8006898:	4602      	mov	r2, r0
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f007 fbda 	bl	800e054 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80068a6:	2200      	movs	r2, #0
 80068a8:	4619      	mov	r1, r3
 80068aa:	6878      	ldr	r0, [r7, #4]
 80068ac:	f008 fdc0 	bl	800f430 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 80068b6:	2b01      	cmp	r3, #1
 80068b8:	d12e      	bne.n	8006918 <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 fea4 	bl	8007608 <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 80068c6:	4619      	mov	r1, r3
 80068c8:	6878      	ldr	r0, [r7, #4]
 80068ca:	f007 fbf2 	bl	800e0b2 <USBH_AllocPipe>
 80068ce:	4603      	mov	r3, r0
 80068d0:	461a      	mov	r2, r3
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f893 1143 	ldrb.w	r1, [r3, #323]	@ 0x143
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 013c 	ldrb.w	r0, [r3, #316]	@ 0x13c
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	f8b2 213e 	ldrh.w	r2, [r2, #318]	@ 0x13e
 80068f6:	9202      	str	r2, [sp, #8]
 80068f8:	2201      	movs	r2, #1
 80068fa:	9201      	str	r2, [sp, #4]
 80068fc:	9300      	str	r3, [sp, #0]
 80068fe:	4623      	mov	r3, r4
 8006900:	4602      	mov	r2, r0
 8006902:	6878      	ldr	r0, [r7, #4]
 8006904:	f007 fba6 	bl	800e054 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 800690e:	2200      	movs	r2, #0
 8006910:	4619      	mov	r1, r3
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	f008 fd8c 	bl	800f430 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 800691e:	2b01      	cmp	r3, #1
 8006920:	d12b      	bne.n	800697a <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8006928:	4619      	mov	r1, r3
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f007 fbc1 	bl	800e0b2 <USBH_AllocPipe>
 8006930:	4603      	mov	r3, r0
 8006932:	461a      	mov	r2, r3
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	f893 118a 	ldrb.w	r1, [r3, #394]	@ 0x18a
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f893 0184 	ldrb.w	r0, [r3, #388]	@ 0x184
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8006958:	9202      	str	r2, [sp, #8]
 800695a:	2203      	movs	r2, #3
 800695c:	9201      	str	r2, [sp, #4]
 800695e:	9300      	str	r3, [sp, #0]
 8006960:	4623      	mov	r3, r4
 8006962:	4602      	mov	r2, r0
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f007 fb75 	bl	800e054 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8006970:	2200      	movs	r2, #0
 8006972:	4619      	mov	r1, r3
 8006974:	6878      	ldr	r0, [r7, #4]
 8006976:	f008 fd5b 	bl	800f430 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	2201      	movs	r2, #1
 8006984:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8006986:	2300      	movs	r3, #0
}
 8006988:	4618      	mov	r0, r3
 800698a:	371c      	adds	r7, #28
 800698c:	46bd      	mov	sp, r7
 800698e:	bd90      	pop	{r4, r7, pc}

08006990 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d011      	beq.n	80069d0 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80069b2:	4619      	mov	r1, r3
 80069b4:	6878      	ldr	r0, [r7, #4]
 80069b6:	f007 fb6c 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 80069c0:	4619      	mov	r1, r3
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f007 fb97 	bl	800e0f6 <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d011      	beq.n	80069fe <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80069e0:	4619      	mov	r1, r3
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f007 fb55 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80069ee:	4619      	mov	r1, r3
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f007 fb80 	bl	800e0f6 <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d011      	beq.n	8006a2c <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8006a0e:	4619      	mov	r1, r3
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	f007 fb3e 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f007 fb69 	bl	800e0f6 <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006a32:	69db      	ldr	r3, [r3, #28]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006a3e:	69db      	ldr	r3, [r3, #28]
 8006a40:	4618      	mov	r0, r3
 8006a42:	f008 fdb7 	bl	800f5b4 <free>
    phost->pActiveClass->pData = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 8006a50:	2300      	movs	r3, #0
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
	...

08006a5c <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b086      	sub	sp, #24
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006a6a:	69db      	ldr	r3, [r3, #28]
 8006a6c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8006a72:	2301      	movs	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8006a76:	693b      	ldr	r3, [r7, #16]
 8006a78:	781b      	ldrb	r3, [r3, #0]
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	2b06      	cmp	r3, #6
 8006a7e:	f200 80be 	bhi.w	8006bfe <USBH_AUDIO_ClassRequest+0x1a2>
 8006a82:	a201      	add	r2, pc, #4	@ (adr r2, 8006a88 <USBH_AUDIO_ClassRequest+0x2c>)
 8006a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a88:	08006aa5 	.word	0x08006aa5
 8006a8c:	08006be7 	.word	0x08006be7
 8006a90:	08006aa5 	.word	0x08006aa5
 8006a94:	08006ae7 	.word	0x08006ae7
 8006a98:	08006b5f 	.word	0x08006b5f
 8006a9c:	08006ba3 	.word	0x08006ba3
 8006aa0:	08006b4b 	.word	0x08006b4b
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d117      	bne.n	8006ade <USBH_AUDIO_ClassRequest+0x82>
      {
        req_status = USBH_SetInterface(phost,
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8006ab4:	2200      	movs	r2, #0
 8006ab6:	4619      	mov	r1, r3
 8006ab8:	6878      	ldr	r0, [r7, #4]
 8006aba:	f006 fcbf 	bl	800d43c <USBH_SetInterface>
 8006abe:	4603      	mov	r3, r0
 8006ac0:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8006ac2:	7bfb      	ldrb	r3, [r7, #15]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d103      	bne.n	8006ad0 <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006ac8:	693b      	ldr	r3, [r7, #16]
 8006aca:	2204      	movs	r2, #4
 8006acc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006ace:	e098      	b.n	8006c02 <USBH_AUDIO_ClassRequest+0x1a6>
        else if (req_status == USBH_NOT_SUPPORTED)
 8006ad0:	7bfb      	ldrb	r3, [r7, #15]
 8006ad2:	2b03      	cmp	r3, #3
 8006ad4:	f040 8095 	bne.w	8006c02 <USBH_AUDIO_ClassRequest+0x1a6>
          status = USBH_FAIL;
 8006ad8:	2302      	movs	r3, #2
 8006ada:	75fb      	strb	r3, [r7, #23]
      break;
 8006adc:	e091      	b.n	8006c02 <USBH_AUDIO_ClassRequest+0x1a6>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	2204      	movs	r2, #4
 8006ae2:	701a      	strb	r2, [r3, #0]
      break;
 8006ae4:	e08d      	b.n	8006c02 <USBH_AUDIO_ClassRequest+0x1a6>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8006ae6:	693b      	ldr	r3, [r7, #16]
 8006ae8:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8006aec:	2b01      	cmp	r3, #1
 8006aee:	d125      	bne.n	8006b3c <USBH_AUDIO_ClassRequest+0xe0>
      {
        req_status = USBH_SetInterface(phost,
 8006af0:	693b      	ldr	r3, [r7, #16]
 8006af2:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8006af6:	2200      	movs	r2, #0
 8006af8:	4619      	mov	r1, r3
 8006afa:	6878      	ldr	r0, [r7, #4]
 8006afc:	f006 fc9e 	bl	800d43c <USBH_SetInterface>
 8006b00:	4603      	mov	r3, r0
 8006b02:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8006b04:	7bfb      	ldrb	r3, [r7, #15]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d112      	bne.n	8006b30 <USBH_AUDIO_ClassRequest+0xd4>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	2207      	movs	r2, #7
 8006b0e:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006b10:	693b      	ldr	r3, [r7, #16]
 8006b12:	2206      	movs	r2, #6
 8006b14:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b2e:	e06a      	b.n	8006c06 <USBH_AUDIO_ClassRequest+0x1aa>
        else if (req_status == USBH_NOT_SUPPORTED)
 8006b30:	7bfb      	ldrb	r3, [r7, #15]
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d167      	bne.n	8006c06 <USBH_AUDIO_ClassRequest+0x1aa>
          status = USBH_FAIL;
 8006b36:	2302      	movs	r3, #2
 8006b38:	75fb      	strb	r3, [r7, #23]
      break;
 8006b3a:	e064      	b.n	8006c06 <USBH_AUDIO_ClassRequest+0x1aa>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	2207      	movs	r2, #7
 8006b40:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	2206      	movs	r2, #6
 8006b46:	705a      	strb	r2, [r3, #1]
      break;
 8006b48:	e05d      	b.n	8006c06 <USBH_AUDIO_ClassRequest+0x1aa>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 f938 	bl	8006dc0 <USBH_AUDIO_HandleCSRequest>
 8006b50:	4603      	mov	r3, r0
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d159      	bne.n	8006c0a <USBH_AUDIO_ClassRequest+0x1ae>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	2205      	movs	r2, #5
 8006b5a:	701a      	strb	r2, [r3, #0]
      }
      break;
 8006b5c:	e055      	b.n	8006c0a <USBH_AUDIO_ClassRequest+0x1ae>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d118      	bne.n	8006b9a <USBH_AUDIO_ClassRequest+0x13e>
      {
        req_status = USBH_SetInterface(phost,
 8006b68:	693b      	ldr	r3, [r7, #16]
 8006b6a:	f893 1140 	ldrb.w	r1, [r3, #320]	@ 0x140
 8006b6e:	693b      	ldr	r3, [r7, #16]
 8006b70:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 8006b74:	461a      	mov	r2, r3
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f006 fc60 	bl	800d43c <USBH_SetInterface>
 8006b7c:	4603      	mov	r3, r0
 8006b7e:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8006b80:	7bfb      	ldrb	r3, [r7, #15]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d103      	bne.n	8006b8e <USBH_AUDIO_ClassRequest+0x132>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	2206      	movs	r2, #6
 8006b8a:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b8c:	e03f      	b.n	8006c0e <USBH_AUDIO_ClassRequest+0x1b2>
        else if (req_status == USBH_NOT_SUPPORTED)
 8006b8e:	7bfb      	ldrb	r3, [r7, #15]
 8006b90:	2b03      	cmp	r3, #3
 8006b92:	d13c      	bne.n	8006c0e <USBH_AUDIO_ClassRequest+0x1b2>
          status = USBH_FAIL;
 8006b94:	2302      	movs	r3, #2
 8006b96:	75fb      	strb	r3, [r7, #23]
      break;
 8006b98:	e039      	b.n	8006c0e <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2206      	movs	r2, #6
 8006b9e:	701a      	strb	r2, [r3, #0]
      break;
 8006ba0:	e035      	b.n	8006c0e <USBH_AUDIO_ClassRequest+0x1b2>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8006ba8:	2b01      	cmp	r3, #1
 8006baa:	d118      	bne.n	8006bde <USBH_AUDIO_ClassRequest+0x182>
      {
        req_status = USBH_SetInterface(phost,
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	f893 10f8 	ldrb.w	r1, [r3, #248]	@ 0xf8
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8006bb8:	461a      	mov	r2, r3
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f006 fc3e 	bl	800d43c <USBH_SetInterface>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d103      	bne.n	8006bd2 <USBH_AUDIO_ClassRequest+0x176>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8006bca:	693b      	ldr	r3, [r7, #16]
 8006bcc:	2202      	movs	r2, #2
 8006bce:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006bd0:	e01f      	b.n	8006c12 <USBH_AUDIO_ClassRequest+0x1b6>
        else if (req_status == USBH_NOT_SUPPORTED)
 8006bd2:	7bfb      	ldrb	r3, [r7, #15]
 8006bd4:	2b03      	cmp	r3, #3
 8006bd6:	d11c      	bne.n	8006c12 <USBH_AUDIO_ClassRequest+0x1b6>
          status = USBH_FAIL;
 8006bd8:	2302      	movs	r3, #2
 8006bda:	75fb      	strb	r3, [r7, #23]
      break;
 8006bdc:	e019      	b.n	8006c12 <USBH_AUDIO_ClassRequest+0x1b6>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	2202      	movs	r2, #2
 8006be2:	701a      	strb	r2, [r3, #0]
      break;
 8006be4:	e015      	b.n	8006c12 <USBH_AUDIO_ClassRequest+0x1b6>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	2201      	movs	r2, #1
 8006bea:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8006bf2:	2102      	movs	r1, #2
 8006bf4:	6878      	ldr	r0, [r7, #4]
 8006bf6:	4798      	blx	r3
      status  = USBH_OK;
 8006bf8:	2300      	movs	r3, #0
 8006bfa:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bfc:	e00a      	b.n	8006c14 <USBH_AUDIO_ClassRequest+0x1b8>

    default:
      break;
 8006bfe:	bf00      	nop
 8006c00:	e008      	b.n	8006c14 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006c02:	bf00      	nop
 8006c04:	e006      	b.n	8006c14 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006c06:	bf00      	nop
 8006c08:	e004      	b.n	8006c14 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006c0a:	bf00      	nop
 8006c0c:	e002      	b.n	8006c14 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006c0e:	bf00      	nop
 8006c10:	e000      	b.n	8006c14 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8006c12:	bf00      	nop
  }
  return status;
 8006c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c16:	4618      	mov	r0, r3
 8006c18:	3718      	adds	r7, #24
 8006c1a:	46bd      	mov	sp, r7
 8006c1c:	bd80      	pop	{r7, pc}
 8006c1e:	bf00      	nop

08006c20 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b088      	sub	sp, #32
 8006c24:	af02      	add	r7, sp, #8
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	460b      	mov	r3, r1
 8006c2a:	70fb      	strb	r3, [r7, #3]
 8006c2c:	4613      	mov	r3, r2
 8006c2e:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006c36:	69db      	ldr	r3, [r3, #28]
 8006c38:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	785b      	ldrb	r3, [r3, #1]
 8006c46:	3b04      	subs	r3, #4
 8006c48:	2b04      	cmp	r3, #4
 8006c4a:	f200 80aa 	bhi.w	8006da2 <USBH_AUDIO_CSRequest+0x182>
 8006c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c54 <USBH_AUDIO_CSRequest+0x34>)
 8006c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c54:	08006cb1 	.word	0x08006cb1
 8006c58:	08006cf7 	.word	0x08006cf7
 8006c5c:	08006c69 	.word	0x08006c69
 8006c60:	08006d57 	.word	0x08006d57
 8006c64:	08006d9d 	.word	0x08006d9d
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	78bb      	ldrb	r3, [r7, #2]
 8006c70:	9300      	str	r3, [sp, #0]
 8006c72:	2302      	movs	r3, #2
 8006c74:	2106      	movs	r1, #6
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fe8a 	bl	8007990 <USBH_AC_GetCur>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b01      	cmp	r3, #1
 8006c84:	f000 808f 	beq.w	8006da6 <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8006c88:	693b      	ldr	r3, [r7, #16]
 8006c8a:	2204      	movs	r2, #4
 8006c8c:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006c8e:	693b      	ldr	r3, [r7, #16]
 8006c90:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8006c94:	693b      	ldr	r3, [r7, #16]
 8006c96:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c9a:	3302      	adds	r3, #2
 8006c9c:	881b      	ldrh	r3, [r3, #0]
 8006c9e:	021b      	lsls	r3, r3, #8
 8006ca0:	b29b      	uxth	r3, r3
 8006ca2:	4313      	orrs	r3, r2
 8006ca4:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8006ca6:	897a      	ldrh	r2, [r7, #10]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      }
      break;
 8006cae:	e07a      	b.n	8006da6 <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8006cb0:	78fa      	ldrb	r2, [r7, #3]
 8006cb2:	2302      	movs	r3, #2
 8006cb4:	9301      	str	r3, [sp, #4]
 8006cb6:	78bb      	ldrb	r3, [r7, #2]
 8006cb8:	9300      	str	r3, [sp, #0]
 8006cba:	2302      	movs	r3, #2
 8006cbc:	2106      	movs	r1, #6
 8006cbe:	6878      	ldr	r0, [r7, #4]
 8006cc0:	f001 f82b 	bl	8007d1a <USBH_AC_GetMin>
 8006cc4:	4603      	mov	r3, r0
 8006cc6:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006cc8:	7bfb      	ldrb	r3, [r7, #15]
 8006cca:	2b01      	cmp	r3, #1
 8006ccc:	d06d      	beq.n	8006daa <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8006cce:	693b      	ldr	r3, [r7, #16]
 8006cd0:	2205      	movs	r2, #5
 8006cd2:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006ce0:	3302      	adds	r3, #2
 8006ce2:	881b      	ldrh	r3, [r3, #0]
 8006ce4:	021b      	lsls	r3, r3, #8
 8006ce6:	b29b      	uxth	r3, r3
 8006ce8:	4313      	orrs	r3, r2
 8006cea:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8006cec:	897a      	ldrh	r2, [r7, #10]
 8006cee:	693b      	ldr	r3, [r7, #16]
 8006cf0:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
      }
      break;
 8006cf4:	e059      	b.n	8006daa <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8006cf6:	78fa      	ldrb	r2, [r7, #3]
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	9301      	str	r3, [sp, #4]
 8006cfc:	78bb      	ldrb	r3, [r7, #2]
 8006cfe:	9300      	str	r3, [sp, #0]
 8006d00:	2302      	movs	r3, #2
 8006d02:	2106      	movs	r1, #6
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 feda 	bl	8007abe <USBH_AC_GetMax>
 8006d0a:	4603      	mov	r3, r0
 8006d0c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8006d0e:	7bfb      	ldrb	r3, [r7, #15]
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d04c      	beq.n	8006dae <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2207      	movs	r2, #7
 8006d18:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006d26:	3302      	adds	r3, #2
 8006d28:	881b      	ldrh	r3, [r3, #0]
 8006d2a:	021b      	lsls	r3, r3, #8
 8006d2c:	b29b      	uxth	r3, r3
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8006d32:	897a      	ldrh	r2, [r7, #10]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d231      	bcs.n	8006dae <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8006d4a:	693b      	ldr	r3, [r7, #16]
 8006d4c:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8006d50:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        }
      }
      break;
 8006d54:	e02b      	b.n	8006dae <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8006d56:	78fa      	ldrb	r2, [r7, #3]
 8006d58:	2302      	movs	r3, #2
 8006d5a:	9301      	str	r3, [sp, #4]
 8006d5c:	78bb      	ldrb	r3, [r7, #2]
 8006d5e:	9300      	str	r3, [sp, #0]
 8006d60:	2302      	movs	r3, #2
 8006d62:	2106      	movs	r1, #6
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 ff41 	bl	8007bec <USBH_AC_GetRes>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	2b01      	cmp	r3, #1
 8006d72:	d01e      	beq.n	8006db2 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	2208      	movs	r2, #8
 8006d78:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8006d7a:	693b      	ldr	r3, [r7, #16]
 8006d7c:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006d86:	3302      	adds	r3, #2
 8006d88:	881b      	ldrh	r3, [r3, #0]
 8006d8a:	021b      	lsls	r3, r3, #8
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8006d92:	89ba      	ldrh	r2, [r7, #12]
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
      }
      break;
 8006d9a:	e00a      	b.n	8006db2 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	75fb      	strb	r3, [r7, #23]
      break;
 8006da0:	e008      	b.n	8006db4 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8006da2:	bf00      	nop
 8006da4:	e006      	b.n	8006db4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8006da6:	bf00      	nop
 8006da8:	e004      	b.n	8006db4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8006daa:	bf00      	nop
 8006dac:	e002      	b.n	8006db4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8006dae:	bf00      	nop
 8006db0:	e000      	b.n	8006db4 <USBH_AUDIO_CSRequest+0x194>
      break;
 8006db2:	bf00      	nop
  }
  return status;
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3718      	adds	r7, #24
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop

08006dc0 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b084      	sub	sp, #16
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8006dcc:	2301      	movs	r3, #1
 8006dce:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006dd6:	69db      	ldr	r3, [r3, #28]
 8006dd8:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8006de6:	461a      	mov	r2, r3
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f7ff ff19 	bl	8006c20 <USBH_AUDIO_CSRequest>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8006df2:	7bbb      	ldrb	r3, [r7, #14]
 8006df4:	2b01      	cmp	r3, #1
 8006df6:	d01c      	beq.n	8006e32 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8006df8:	68bb      	ldr	r3, [r7, #8]
 8006dfa:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8006dfe:	2b01      	cmp	r3, #1
 8006e00:	d10c      	bne.n	8006e1c <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8006e02:	68bb      	ldr	r3, [r7, #8]
 8006e04:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8006e0e:	68bb      	ldr	r3, [r7, #8]
 8006e10:	2200      	movs	r2, #0
 8006e12:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 8006e16:	2300      	movs	r3, #0
 8006e18:	73fb      	strb	r3, [r7, #15]
 8006e1a:	e007      	b.n	8006e2c <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8006e22:	3b01      	subs	r3, #1
 8006e24:	b2da      	uxtb	r2, r3
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2206      	movs	r2, #6
 8006e30:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return status;
 8006e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006e4e:	69db      	ldr	r3, [r3, #28]
 8006e50:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d102      	bne.n	8006e62 <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f001 f8dd 	bl	800801c <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d102      	bne.n	8006e72 <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 8006e6c:	6878      	ldr	r0, [r7, #4]
 8006e6e:	f001 f813 	bl	8007e98 <USBH_AUDIO_InputStream>
  }

  return status;
 8006e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b083      	sub	sp, #12
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006e84:	2300      	movs	r3, #0
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	370c      	adds	r7, #12
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8006e92:	b480      	push	{r7}
 8006e94:	b085      	sub	sp, #20
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8006e9a:	2302      	movs	r3, #2
 8006e9c:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006ea4:	69db      	ldr	r3, [r3, #28]
 8006ea6:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006eac:	2300      	movs	r3, #0
 8006eae:	73fb      	strb	r3, [r7, #15]
 8006eb0:	e09e      	b.n	8006ff0 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006eb2:	7bfb      	ldrb	r3, [r7, #15]
 8006eb4:	687a      	ldr	r2, [r7, #4]
 8006eb6:	2132      	movs	r1, #50	@ 0x32
 8006eb8:	fb01 f303 	mul.w	r3, r1, r3
 8006ebc:	4413      	add	r3, r2
 8006ebe:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8006ec2:	781b      	ldrb	r3, [r3, #0]
 8006ec4:	2b01      	cmp	r3, #1
 8006ec6:	f040 8090 	bne.w	8006fea <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8006eca:	7bfb      	ldrb	r3, [r7, #15]
 8006ecc:	687a      	ldr	r2, [r7, #4]
 8006ece:	2132      	movs	r1, #50	@ 0x32
 8006ed0:	fb01 f303 	mul.w	r3, r1, r3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8006eda:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006edc:	2b02      	cmp	r3, #2
 8006ede:	f040 8084 	bne.w	8006fea <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8006ee2:	7bfb      	ldrb	r3, [r7, #15]
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	2132      	movs	r1, #50	@ 0x32
 8006ee8:	fb01 f303 	mul.w	r3, r1, r3
 8006eec:	4413      	add	r3, r2
 8006eee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006ef2:	781b      	ldrb	r3, [r3, #0]
 8006ef4:	b25b      	sxtb	r3, r3
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	da77      	bge.n	8006fea <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006efa:	7bfb      	ldrb	r3, [r7, #15]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	2132      	movs	r1, #50	@ 0x32
 8006f00:	fb01 f303 	mul.w	r3, r1, r3
 8006f04:	4413      	add	r3, r2
 8006f06:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f0a:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d06c      	beq.n	8006fea <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f10:	7bfb      	ldrb	r3, [r7, #15]
 8006f12:	7bba      	ldrb	r2, [r7, #14]
 8006f14:	6879      	ldr	r1, [r7, #4]
 8006f16:	2032      	movs	r0, #50	@ 0x32
 8006f18:	fb00 f303 	mul.w	r3, r0, r3
 8006f1c:	440b      	add	r3, r1
 8006f1e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006f22:	7818      	ldrb	r0, [r3, #0]
 8006f24:	68b9      	ldr	r1, [r7, #8]
 8006f26:	4613      	mov	r3, r2
 8006f28:	009b      	lsls	r3, r3, #2
 8006f2a:	4413      	add	r3, r2
 8006f2c:	005b      	lsls	r3, r3, #1
 8006f2e:	440b      	add	r3, r1
 8006f30:	3306      	adds	r3, #6
 8006f32:	4602      	mov	r2, r0
 8006f34:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f36:	7bfb      	ldrb	r3, [r7, #15]
 8006f38:	7bba      	ldrb	r2, [r7, #14]
 8006f3a:	6879      	ldr	r1, [r7, #4]
 8006f3c:	2032      	movs	r0, #50	@ 0x32
 8006f3e:	fb00 f303 	mul.w	r3, r0, r3
 8006f42:	440b      	add	r3, r1
 8006f44:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006f48:	8818      	ldrh	r0, [r3, #0]
 8006f4a:	68b9      	ldr	r1, [r7, #8]
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	005b      	lsls	r3, r3, #1
 8006f54:	440b      	add	r3, r1
 8006f56:	3308      	adds	r3, #8
 8006f58:	4602      	mov	r2, r0
 8006f5a:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	7bba      	ldrb	r2, [r7, #14]
 8006f60:	6879      	ldr	r1, [r7, #4]
 8006f62:	2032      	movs	r0, #50	@ 0x32
 8006f64:	fb00 f303 	mul.w	r3, r0, r3
 8006f68:	440b      	add	r3, r1
 8006f6a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8006f6e:	7818      	ldrb	r0, [r3, #0]
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4613      	mov	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	005b      	lsls	r3, r3, #1
 8006f7a:	440b      	add	r3, r1
 8006f7c:	330b      	adds	r3, #11
 8006f7e:	4602      	mov	r2, r0
 8006f80:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	7bba      	ldrb	r2, [r7, #14]
 8006f86:	6879      	ldr	r1, [r7, #4]
 8006f88:	2032      	movs	r0, #50	@ 0x32
 8006f8a:	fb00 f303 	mul.w	r3, r0, r3
 8006f8e:	440b      	add	r3, r1
 8006f90:	f203 3345 	addw	r3, r3, #837	@ 0x345
 8006f94:	7818      	ldrb	r0, [r3, #0]
 8006f96:	68b9      	ldr	r1, [r7, #8]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	009b      	lsls	r3, r3, #2
 8006f9c:	4413      	add	r3, r2
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	440b      	add	r3, r1
 8006fa2:	330a      	adds	r3, #10
 8006fa4:	4602      	mov	r2, r0
 8006fa6:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	687a      	ldr	r2, [r7, #4]
 8006fac:	2132      	movs	r1, #50	@ 0x32
 8006fae:	fb01 f303 	mul.w	r3, r1, r3
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8006fb8:	781b      	ldrb	r3, [r3, #0]
 8006fba:	7bba      	ldrb	r2, [r7, #14]
 8006fbc:	4618      	mov	r0, r3
 8006fbe:	68b9      	ldr	r1, [r7, #8]
 8006fc0:	4613      	mov	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	4413      	add	r3, r2
 8006fc6:	005b      	lsls	r3, r3, #1
 8006fc8:	440b      	add	r3, r1
 8006fca:	330e      	adds	r3, #14
 8006fcc:	4602      	mov	r2, r0
 8006fce:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8006fd0:	7bba      	ldrb	r2, [r7, #14]
 8006fd2:	68b9      	ldr	r1, [r7, #8]
 8006fd4:	4613      	mov	r3, r2
 8006fd6:	009b      	lsls	r3, r3, #2
 8006fd8:	4413      	add	r3, r2
 8006fda:	005b      	lsls	r3, r3, #1
 8006fdc:	440b      	add	r3, r1
 8006fde:	330c      	adds	r3, #12
 8006fe0:	2201      	movs	r2, #1
 8006fe2:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	3301      	adds	r3, #1
 8006fe8:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006fea:	7bfb      	ldrb	r3, [r7, #15]
 8006fec:	3301      	adds	r3, #1
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	7bfb      	ldrb	r3, [r7, #15]
 8006ff2:	2b09      	cmp	r3, #9
 8006ff4:	f67f af5d 	bls.w	8006eb2 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8006ff8:	7bbb      	ldrb	r3, [r7, #14]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d001      	beq.n	8007002 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007002:	7b7b      	ldrb	r3, [r7, #13]
}
 8007004:	4618      	mov	r0, r3
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr

08007010 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 8007018:	2302      	movs	r3, #2
 800701a:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007022:	69db      	ldr	r3, [r3, #28]
 8007024:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]
 800702e:	e09e      	b.n	800716e <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	2132      	movs	r1, #50	@ 0x32
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b01      	cmp	r3, #1
 8007044:	f040 8090 	bne.w	8007168 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	2132      	movs	r1, #50	@ 0x32
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8007058:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 800705a:	2b02      	cmp	r3, #2
 800705c:	f040 8084 	bne.w	8007168 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	2132      	movs	r1, #50	@ 0x32
 8007066:	fb01 f303 	mul.w	r3, r1, r3
 800706a:	4413      	add	r3, r2
 800706c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	b25b      	sxtb	r3, r3
 8007074:	2b00      	cmp	r3, #0
 8007076:	db77      	blt.n	8007168 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8007078:	7bfb      	ldrb	r3, [r7, #15]
 800707a:	687a      	ldr	r2, [r7, #4]
 800707c:	2132      	movs	r1, #50	@ 0x32
 800707e:	fb01 f303 	mul.w	r3, r1, r3
 8007082:	4413      	add	r3, r2
 8007084:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007088:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800708a:	2b00      	cmp	r3, #0
 800708c:	d06c      	beq.n	8007168 <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800708e:	7bfb      	ldrb	r3, [r7, #15]
 8007090:	7bba      	ldrb	r2, [r7, #14]
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	2032      	movs	r0, #50	@ 0x32
 8007096:	fb00 f303 	mul.w	r3, r0, r3
 800709a:	440b      	add	r3, r1
 800709c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80070a0:	7818      	ldrb	r0, [r3, #0]
 80070a2:	68b9      	ldr	r1, [r7, #8]
 80070a4:	4613      	mov	r3, r2
 80070a6:	009b      	lsls	r3, r3, #2
 80070a8:	4413      	add	r3, r2
 80070aa:	005b      	lsls	r3, r3, #1
 80070ac:	440b      	add	r3, r1
 80070ae:	3338      	adds	r3, #56	@ 0x38
 80070b0:	4602      	mov	r2, r0
 80070b2:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80070b4:	7bfb      	ldrb	r3, [r7, #15]
 80070b6:	7bba      	ldrb	r2, [r7, #14]
 80070b8:	6879      	ldr	r1, [r7, #4]
 80070ba:	2032      	movs	r0, #50	@ 0x32
 80070bc:	fb00 f303 	mul.w	r3, r0, r3
 80070c0:	440b      	add	r3, r1
 80070c2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80070c6:	8818      	ldrh	r0, [r3, #0]
 80070c8:	68b9      	ldr	r1, [r7, #8]
 80070ca:	4613      	mov	r3, r2
 80070cc:	009b      	lsls	r3, r3, #2
 80070ce:	4413      	add	r3, r2
 80070d0:	005b      	lsls	r3, r3, #1
 80070d2:	440b      	add	r3, r1
 80070d4:	333a      	adds	r3, #58	@ 0x3a
 80070d6:	4602      	mov	r2, r0
 80070d8:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80070da:	7bfb      	ldrb	r3, [r7, #15]
 80070dc:	7bba      	ldrb	r2, [r7, #14]
 80070de:	6879      	ldr	r1, [r7, #4]
 80070e0:	2032      	movs	r0, #50	@ 0x32
 80070e2:	fb00 f303 	mul.w	r3, r0, r3
 80070e6:	440b      	add	r3, r1
 80070e8:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80070ec:	7818      	ldrb	r0, [r3, #0]
 80070ee:	68b9      	ldr	r1, [r7, #8]
 80070f0:	4613      	mov	r3, r2
 80070f2:	009b      	lsls	r3, r3, #2
 80070f4:	4413      	add	r3, r2
 80070f6:	005b      	lsls	r3, r3, #1
 80070f8:	440b      	add	r3, r1
 80070fa:	333d      	adds	r3, #61	@ 0x3d
 80070fc:	4602      	mov	r2, r0
 80070fe:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8007100:	7bfb      	ldrb	r3, [r7, #15]
 8007102:	7bba      	ldrb	r2, [r7, #14]
 8007104:	6879      	ldr	r1, [r7, #4]
 8007106:	2032      	movs	r0, #50	@ 0x32
 8007108:	fb00 f303 	mul.w	r3, r0, r3
 800710c:	440b      	add	r3, r1
 800710e:	f203 3345 	addw	r3, r3, #837	@ 0x345
 8007112:	7818      	ldrb	r0, [r3, #0]
 8007114:	68b9      	ldr	r1, [r7, #8]
 8007116:	4613      	mov	r3, r2
 8007118:	009b      	lsls	r3, r3, #2
 800711a:	4413      	add	r3, r2
 800711c:	005b      	lsls	r3, r3, #1
 800711e:	440b      	add	r3, r1
 8007120:	333c      	adds	r3, #60	@ 0x3c
 8007122:	4602      	mov	r2, r0
 8007124:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	687a      	ldr	r2, [r7, #4]
 800712a:	2132      	movs	r1, #50	@ 0x32
 800712c:	fb01 f303 	mul.w	r3, r1, r3
 8007130:	4413      	add	r3, r2
 8007132:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	7bba      	ldrb	r2, [r7, #14]
 800713a:	4618      	mov	r0, r3
 800713c:	68b9      	ldr	r1, [r7, #8]
 800713e:	4613      	mov	r3, r2
 8007140:	009b      	lsls	r3, r3, #2
 8007142:	4413      	add	r3, r2
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	440b      	add	r3, r1
 8007148:	3340      	adds	r3, #64	@ 0x40
 800714a:	4602      	mov	r2, r0
 800714c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 800714e:	7bba      	ldrb	r2, [r7, #14]
 8007150:	68b9      	ldr	r1, [r7, #8]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	005b      	lsls	r3, r3, #1
 800715a:	440b      	add	r3, r1
 800715c:	333e      	adds	r3, #62	@ 0x3e
 800715e:	2201      	movs	r2, #1
 8007160:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8007162:	7bbb      	ldrb	r3, [r7, #14]
 8007164:	3301      	adds	r3, #1
 8007166:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	3301      	adds	r3, #1
 800716c:	73fb      	strb	r3, [r7, #15]
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b09      	cmp	r3, #9
 8007172:	f67f af5d 	bls.w	8007030 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 8007176:	7bbb      	ldrb	r3, [r7, #14]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d001      	beq.n	8007180 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 800717c:	2300      	movs	r3, #0
 800717e:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8007180:	7b7b      	ldrb	r3, [r7, #13]
}
 8007182:	4618      	mov	r0, r3
 8007184:	3714      	adds	r7, #20
 8007186:	46bd      	mov	sp, r7
 8007188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718c:	4770      	bx	lr

0800718e <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 800718e:	b580      	push	{r7, lr}
 8007190:	b084      	sub	sp, #16
 8007192:	af00      	add	r7, sp, #0
 8007194:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 8007196:	2302      	movs	r3, #2
 8007198:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80071a0:	69db      	ldr	r3, [r3, #28]
 80071a2:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 80071a4:	23ff      	movs	r3, #255	@ 0xff
 80071a6:	2201      	movs	r2, #1
 80071a8:	2101      	movs	r1, #1
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f005 fb5c 	bl	800c868 <USBH_FindInterface>
 80071b0:	4603      	mov	r3, r0
 80071b2:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 80071b4:	7bfb      	ldrb	r3, [r7, #15]
 80071b6:	2bff      	cmp	r3, #255	@ 0xff
 80071b8:	d002      	beq.n	80071c0 <USBH_AUDIO_FindHIDControl+0x32>
 80071ba:	7bfb      	ldrb	r3, [r7, #15]
 80071bc:	2b09      	cmp	r3, #9
 80071be:	d901      	bls.n	80071c4 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 80071c0:	2302      	movs	r3, #2
 80071c2:	e062      	b.n	800728a <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80071c4:	2300      	movs	r3, #0
 80071c6:	73fb      	strb	r3, [r7, #15]
 80071c8:	e05b      	b.n	8007282 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80071ca:	7bfb      	ldrb	r3, [r7, #15]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	2132      	movs	r1, #50	@ 0x32
 80071d0:	fb01 f303 	mul.w	r3, r1, r3
 80071d4:	4413      	add	r3, r2
 80071d6:	f203 3347 	addw	r3, r3, #839	@ 0x347
 80071da:	781b      	ldrb	r3, [r3, #0]
 80071dc:	2b03      	cmp	r3, #3
 80071de:	d14d      	bne.n	800727c <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 80071e0:	7bfb      	ldrb	r3, [r7, #15]
 80071e2:	687a      	ldr	r2, [r7, #4]
 80071e4:	2132      	movs	r1, #50	@ 0x32
 80071e6:	fb01 f303 	mul.w	r3, r1, r3
 80071ea:	4413      	add	r3, r2
 80071ec:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80071f0:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d042      	beq.n	800727c <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	687a      	ldr	r2, [r7, #4]
 80071fa:	2132      	movs	r1, #50	@ 0x32
 80071fc:	fb01 f303 	mul.w	r3, r1, r3
 8007200:	4413      	add	r3, r2
 8007202:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007206:	781b      	ldrb	r3, [r3, #0]
 8007208:	b25b      	sxtb	r3, r3
 800720a:	2b00      	cmp	r3, #0
 800720c:	da36      	bge.n	800727c <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800720e:	7bfb      	ldrb	r3, [r7, #15]
 8007210:	687a      	ldr	r2, [r7, #4]
 8007212:	2132      	movs	r1, #50	@ 0x32
 8007214:	fb01 f303 	mul.w	r3, r1, r3
 8007218:	4413      	add	r3, r2
 800721a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800721e:	781a      	ldrb	r2, [r3, #0]
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007226:	7bfb      	ldrb	r3, [r7, #15]
 8007228:	687a      	ldr	r2, [r7, #4]
 800722a:	2132      	movs	r1, #50	@ 0x32
 800722c:	fb01 f303 	mul.w	r3, r1, r3
 8007230:	4413      	add	r3, r2
 8007232:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007236:	881a      	ldrh	r2, [r3, #0]
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800723e:	7bfb      	ldrb	r3, [r7, #15]
 8007240:	687a      	ldr	r2, [r7, #4]
 8007242:	2132      	movs	r1, #50	@ 0x32
 8007244:	fb01 f303 	mul.w	r3, r1, r3
 8007248:	4413      	add	r3, r2
 800724a:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 800724e:	781a      	ldrb	r2, [r3, #0]
 8007250:	68bb      	ldr	r3, [r7, #8]
 8007252:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007256:	7bfb      	ldrb	r3, [r7, #15]
 8007258:	687a      	ldr	r2, [r7, #4]
 800725a:	2132      	movs	r1, #50	@ 0x32
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8007266:	781a      	ldrb	r2, [r3, #0]
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
        AUDIO_Handle->control.supported = 1U;
 800726e:	68bb      	ldr	r3, [r7, #8]
 8007270:	2201      	movs	r2, #1
 8007272:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
        status = USBH_OK;
 8007276:	2300      	movs	r3, #0
 8007278:	73bb      	strb	r3, [r7, #14]
        break;
 800727a:	e005      	b.n	8007288 <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800727c:	7bfb      	ldrb	r3, [r7, #15]
 800727e:	3301      	adds	r3, #1
 8007280:	73fb      	strb	r3, [r7, #15]
 8007282:	7bfb      	ldrb	r3, [r7, #15]
 8007284:	2b09      	cmp	r3, #9
 8007286:	d9a0      	bls.n	80071ca <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 8007288:	7bbb      	ldrb	r3, [r7, #14]
}
 800728a:	4618      	mov	r0, r3
 800728c:	3710      	adds	r7, #16
 800728e:	46bd      	mov	sp, r7
 8007290:	bd80      	pop	{r7, pc}

08007292 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8007292:	b580      	push	{r7, lr}
 8007294:	b088      	sub	sp, #32
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800729a:	2300      	movs	r3, #0
 800729c:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 800729e:	2300      	movs	r3, #0
 80072a0:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 80072a2:	2300      	movs	r3, #0
 80072a4:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80072ac:	69db      	ldr	r3, [r3, #28]
 80072ae:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	331c      	adds	r3, #28
 80072b4:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 80072b6:	2309      	movs	r3, #9
 80072b8:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2200      	movs	r2, #0
 80072be:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	2200      	movs	r2, #0
 80072c6:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2200      	movs	r2, #0
 80072d6:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 80072da:	e03c      	b.n	8007356 <USBH_AUDIO_ParseCSDescriptors+0xc4>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80072dc:	f107 030c 	add.w	r3, r7, #12
 80072e0:	4619      	mov	r1, r3
 80072e2:	69b8      	ldr	r0, [r7, #24]
 80072e4:	f006 fc11 	bl	800db0a <USBH_GetNextDesc>
 80072e8:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 80072ea:	69bb      	ldr	r3, [r7, #24]
 80072ec:	785b      	ldrb	r3, [r3, #1]
 80072ee:	2b04      	cmp	r3, #4
 80072f0:	d002      	beq.n	80072f8 <USBH_AUDIO_ParseCSDescriptors+0x66>
 80072f2:	2b24      	cmp	r3, #36	@ 0x24
 80072f4:	d00f      	beq.n	8007316 <USBH_AUDIO_ParseCSDescriptors+0x84>
          }
        }
        break;

      default:
        break;
 80072f6:	e02e      	b.n	8007356 <USBH_AUDIO_ParseCSDescriptors+0xc4>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	789b      	ldrb	r3, [r3, #2]
 80072fc:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 80072fe:	69bb      	ldr	r3, [r7, #24]
 8007300:	78db      	ldrb	r3, [r3, #3]
 8007302:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8007304:	7bfa      	ldrb	r2, [r7, #15]
 8007306:	7dbb      	ldrb	r3, [r7, #22]
 8007308:	4619      	mov	r1, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f005 faf2 	bl	800c8f4 <USBH_FindInterfaceIndex>
 8007310:	4603      	mov	r3, r0
 8007312:	75fb      	strb	r3, [r7, #23]
        break;
 8007314:	e01f      	b.n	8007356 <USBH_AUDIO_ParseCSDescriptors+0xc4>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800731c:	7dba      	ldrb	r2, [r7, #22]
 800731e:	429a      	cmp	r2, r3
 8007320:	d818      	bhi.n	8007354 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007322:	7dfb      	ldrb	r3, [r7, #23]
 8007324:	2bff      	cmp	r3, #255	@ 0xff
 8007326:	d002      	beq.n	800732e <USBH_AUDIO_ParseCSDescriptors+0x9c>
 8007328:	7dfb      	ldrb	r3, [r7, #23]
 800732a:	2b09      	cmp	r3, #9
 800732c:	d902      	bls.n	8007334 <USBH_AUDIO_ParseCSDescriptors+0xa2>
            status = USBH_FAIL;
 800732e:	2302      	movs	r3, #2
 8007330:	77fb      	strb	r3, [r7, #31]
        break;
 8007332:	e00f      	b.n	8007354 <USBH_AUDIO_ParseCSDescriptors+0xc2>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 800733a:	7dfb      	ldrb	r3, [r7, #23]
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	2132      	movs	r1, #50	@ 0x32
 8007340:	fb01 f303 	mul.w	r3, r1, r3
 8007344:	4413      	add	r3, r2
 8007346:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800734a:	781b      	ldrb	r3, [r3, #0]
 800734c:	69ba      	ldr	r2, [r7, #24]
 800734e:	4619      	mov	r1, r3
 8007350:	f000 f80c 	bl	800736c <ParseCSDescriptors>
        break;
 8007354:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8b3 233a 	ldrh.w	r2, [r3, #826]	@ 0x33a
 800735c:	89bb      	ldrh	r3, [r7, #12]
 800735e:	429a      	cmp	r2, r3
 8007360:	d8bc      	bhi.n	80072dc <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 8007362:	7ffb      	ldrb	r3, [r7, #31]
}
 8007364:	4618      	mov	r0, r3
 8007366:	3720      	adds	r7, #32
 8007368:	46bd      	mov	sp, r7
 800736a:	bd80      	pop	{r7, pc}

0800736c <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	60f8      	str	r0, [r7, #12]
 8007374:	460b      	mov	r3, r1
 8007376:	607a      	str	r2, [r7, #4]
 8007378:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800737a:	7afb      	ldrb	r3, [r7, #11]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d163      	bne.n	8007448 <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	3302      	adds	r3, #2
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	2b05      	cmp	r3, #5
 800738a:	f200 8081 	bhi.w	8007490 <ParseCSDescriptors+0x124>
 800738e:	a201      	add	r2, pc, #4	@ (adr r2, 8007394 <ParseCSDescriptors+0x28>)
 8007390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007394:	080073ad 	.word	0x080073ad
 8007398:	080073b5 	.word	0x080073b5
 800739c:	080073d1 	.word	0x080073d1
 80073a0:	0800742b 	.word	0x0800742b
 80073a4:	0800740d 	.word	0x0800740d
 80073a8:	080073ef 	.word	0x080073ef
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	687a      	ldr	r2, [r7, #4]
 80073b0:	601a      	str	r2, [r3, #0]
        break;
 80073b2:	e06e      	b.n	8007492 <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	b291      	uxth	r1, r2
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
 80073c4:	68fa      	ldr	r2, [r7, #12]
 80073c6:	009b      	lsls	r3, r3, #2
 80073c8:	4413      	add	r3, r2
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	605a      	str	r2, [r3, #4]
        break;
 80073ce:	e060      	b.n	8007492 <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 80073d6:	1c5a      	adds	r2, r3, #1
 80073d8:	b291      	uxth	r1, r2
 80073da:	68fa      	ldr	r2, [r7, #12]
 80073dc:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 80073e0:	68fa      	ldr	r2, [r7, #12]
 80073e2:	3304      	adds	r3, #4
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	687a      	ldr	r2, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]
        break;
 80073ec:	e051      	b.n	8007492 <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 80073f4:	1c5a      	adds	r2, r3, #1
 80073f6:	b291      	uxth	r1, r2
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	f8a2 1082 	strh.w	r1, [r2, #130]	@ 0x82
 80073fe:	68fa      	ldr	r2, [r7, #12]
 8007400:	3308      	adds	r3, #8
 8007402:	009b      	lsls	r3, r3, #2
 8007404:	4413      	add	r3, r2
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	605a      	str	r2, [r3, #4]
        break;
 800740a:	e042      	b.n	8007492 <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 8007412:	1c5a      	adds	r2, r3, #1
 8007414:	b291      	uxth	r1, r2
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	f8a2 1084 	strh.w	r1, [r2, #132]	@ 0x84
 800741c:	68fa      	ldr	r2, [r7, #12]
 800741e:	3310      	adds	r3, #16
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	605a      	str	r2, [r3, #4]
        break;
 8007428:	e033      	b.n	8007492 <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 8007430:	1c5a      	adds	r2, r3, #1
 8007432:	b291      	uxth	r1, r2
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	f8a2 1086 	strh.w	r1, [r2, #134]	@ 0x86
 800743a:	68fa      	ldr	r2, [r7, #12]
 800743c:	330c      	adds	r3, #12
 800743e:	009b      	lsls	r3, r3, #2
 8007440:	4413      	add	r3, r2
 8007442:	687a      	ldr	r2, [r7, #4]
 8007444:	605a      	str	r2, [r3, #4]
        break;
 8007446:	e024      	b.n	8007492 <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 8007448:	7afb      	ldrb	r3, [r7, #11]
 800744a:	2b02      	cmp	r3, #2
 800744c:	d121      	bne.n	8007492 <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	3302      	adds	r3, #2
 8007452:	781b      	ldrb	r3, [r3, #0]
 8007454:	2b01      	cmp	r3, #1
 8007456:	d002      	beq.n	800745e <ParseCSDescriptors+0xf2>
 8007458:	2b02      	cmp	r3, #2
 800745a:	d00a      	beq.n	8007472 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 800745c:	e019      	b.n	8007492 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8007464:	68fa      	ldr	r2, [r7, #12]
 8007466:	330a      	adds	r3, #10
 8007468:	00db      	lsls	r3, r3, #3
 800746a:	4413      	add	r3, r2
 800746c:	687a      	ldr	r2, [r7, #4]
 800746e:	605a      	str	r2, [r3, #4]
          break;
 8007470:	e00f      	b.n	8007492 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8007478:	1c5a      	adds	r2, r3, #1
 800747a:	b291      	uxth	r1, r2
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	f8a2 107c 	strh.w	r1, [r2, #124]	@ 0x7c
 8007482:	68fa      	ldr	r2, [r7, #12]
 8007484:	330a      	adds	r3, #10
 8007486:	00db      	lsls	r3, r3, #3
 8007488:	4413      	add	r3, r2
 800748a:	687a      	ldr	r2, [r7, #4]
 800748c:	609a      	str	r2, [r3, #8]
          break;
 800748e:	e000      	b.n	8007492 <ParseCSDescriptors+0x126>
        break;
 8007490:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 8007492:	2300      	movs	r3, #0
}
 8007494:	4618      	mov	r0, r3
 8007496:	3714      	adds	r7, #20
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 80074a0:	b480      	push	{r7}
 80074a2:	b085      	sub	sp, #20
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	460b      	mov	r3, r1
 80074aa:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80074b2:	69db      	ldr	r3, [r3, #28]
 80074b4:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80074b6:	2300      	movs	r3, #0
 80074b8:	73fb      	strb	r3, [r7, #15]
 80074ba:	e01b      	b.n	80074f4 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 80074bc:	7bfb      	ldrb	r3, [r7, #15]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	3322      	adds	r3, #34	@ 0x22
 80074c2:	009b      	lsls	r3, r3, #2
 80074c4:	4413      	add	r3, r2
 80074c6:	689b      	ldr	r3, [r3, #8]
 80074c8:	791b      	ldrb	r3, [r3, #4]
 80074ca:	78fa      	ldrb	r2, [r7, #3]
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d10e      	bne.n	80074ee <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 80074d0:	7bfb      	ldrb	r3, [r7, #15]
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	3322      	adds	r3, #34	@ 0x22
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	78db      	ldrb	r3, [r3, #3]
 80074de:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 80074e0:	78fb      	ldrb	r3, [r7, #3]
 80074e2:	041a      	lsls	r2, r3, #16
 80074e4:	7bfb      	ldrb	r3, [r7, #15]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 80074ec:	e086      	b.n	80075fc <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 80074ee:	7bfb      	ldrb	r3, [r7, #15]
 80074f0:	3301      	adds	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
 80074f4:	7bfb      	ldrb	r3, [r7, #15]
 80074f6:	b29a      	uxth	r2, r3
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 80074fe:	429a      	cmp	r2, r3
 8007500:	d3dc      	bcc.n	80074bc <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]
 8007506:	e025      	b.n	8007554 <USBH_AUDIO_FindLinkedUnit+0xb4>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 8007508:	7bfb      	ldrb	r3, [r7, #15]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	3326      	adds	r3, #38	@ 0x26
 800750e:	009b      	lsls	r3, r3, #2
 8007510:	4413      	add	r3, r2
 8007512:	689b      	ldr	r3, [r3, #8]
 8007514:	795b      	ldrb	r3, [r3, #5]
 8007516:	78fa      	ldrb	r2, [r7, #3]
 8007518:	429a      	cmp	r2, r3
 800751a:	d009      	beq.n	8007530 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 800751c:	7bfb      	ldrb	r3, [r7, #15]
 800751e:	68ba      	ldr	r2, [r7, #8]
 8007520:	3326      	adds	r3, #38	@ 0x26
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4413      	add	r3, r2
 8007526:	689b      	ldr	r3, [r3, #8]
 8007528:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800752a:	78fa      	ldrb	r2, [r7, #3]
 800752c:	429a      	cmp	r2, r3
 800752e:	d10e      	bne.n	800754e <USBH_AUDIO_FindLinkedUnit+0xae>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 8007530:	7bfb      	ldrb	r3, [r7, #15]
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	3326      	adds	r3, #38	@ 0x26
 8007536:	009b      	lsls	r3, r3, #2
 8007538:	4413      	add	r3, r2
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	78db      	ldrb	r3, [r3, #3]
 800753e:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 8007540:	78fb      	ldrb	r3, [r7, #3]
 8007542:	041a      	lsls	r2, r3, #16
 8007544:	7bfb      	ldrb	r3, [r7, #15]
 8007546:	4313      	orrs	r3, r2
 8007548:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800754c:	e056      	b.n	80075fc <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 800754e:	7bfb      	ldrb	r3, [r7, #15]
 8007550:	3301      	adds	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	b29a      	uxth	r2, r3
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 800755e:	429a      	cmp	r2, r3
 8007560:	d3d2      	bcc.n	8007508 <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 8007562:	2300      	movs	r3, #0
 8007564:	73fb      	strb	r3, [r7, #15]
 8007566:	e01b      	b.n	80075a0 <USBH_AUDIO_FindLinkedUnit+0x100>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 8007568:	7bfb      	ldrb	r3, [r7, #15]
 800756a:	68ba      	ldr	r2, [r7, #8]
 800756c:	332a      	adds	r3, #42	@ 0x2a
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	689b      	ldr	r3, [r3, #8]
 8007574:	795b      	ldrb	r3, [r3, #5]
 8007576:	78fa      	ldrb	r2, [r7, #3]
 8007578:	429a      	cmp	r2, r3
 800757a:	d10e      	bne.n	800759a <USBH_AUDIO_FindLinkedUnit+0xfa>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 800757c:	7bfb      	ldrb	r3, [r7, #15]
 800757e:	68ba      	ldr	r2, [r7, #8]
 8007580:	332a      	adds	r3, #42	@ 0x2a
 8007582:	009b      	lsls	r3, r3, #2
 8007584:	4413      	add	r3, r2
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	78db      	ldrb	r3, [r3, #3]
 800758a:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 800758c:	78fb      	ldrb	r3, [r7, #3]
 800758e:	041a      	lsls	r2, r3, #16
 8007590:	7bfb      	ldrb	r3, [r7, #15]
 8007592:	4313      	orrs	r3, r2
 8007594:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 8007598:	e030      	b.n	80075fc <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800759a:	7bfb      	ldrb	r3, [r7, #15]
 800759c:	3301      	adds	r3, #1
 800759e:	73fb      	strb	r3, [r7, #15]
 80075a0:	7bfb      	ldrb	r3, [r7, #15]
 80075a2:	b29a      	uxth	r2, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 80075aa:	429a      	cmp	r2, r3
 80075ac:	d3dc      	bcc.n	8007568 <USBH_AUDIO_FindLinkedUnit+0xc8>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80075ae:	2300      	movs	r3, #0
 80075b0:	73fb      	strb	r3, [r7, #15]
 80075b2:	e01b      	b.n	80075ec <USBH_AUDIO_FindLinkedUnit+0x14c>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 80075b4:	7bfb      	ldrb	r3, [r7, #15]
 80075b6:	68ba      	ldr	r2, [r7, #8]
 80075b8:	331e      	adds	r3, #30
 80075ba:	009b      	lsls	r3, r3, #2
 80075bc:	4413      	add	r3, r2
 80075be:	689b      	ldr	r3, [r3, #8]
 80075c0:	79db      	ldrb	r3, [r3, #7]
 80075c2:	78fa      	ldrb	r2, [r7, #3]
 80075c4:	429a      	cmp	r2, r3
 80075c6:	d10e      	bne.n	80075e6 <USBH_AUDIO_FindLinkedUnit+0x146>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 80075c8:	7bfb      	ldrb	r3, [r7, #15]
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	331e      	adds	r3, #30
 80075ce:	009b      	lsls	r3, r3, #2
 80075d0:	4413      	add	r3, r2
 80075d2:	689b      	ldr	r3, [r3, #8]
 80075d4:	78db      	ldrb	r3, [r3, #3]
 80075d6:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 80075d8:	78fb      	ldrb	r3, [r7, #3]
 80075da:	041a      	lsls	r2, r3, #16
 80075dc:	7bfb      	ldrb	r3, [r7, #15]
 80075de:	4313      	orrs	r3, r2
 80075e0:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80075e4:	e00a      	b.n	80075fc <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
 80075ec:	7bfb      	ldrb	r3, [r7, #15]
 80075ee:	b29a      	uxth	r2, r3
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d3dc      	bcc.n	80075b4 <USBH_AUDIO_FindLinkedUnit+0x114>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 80075fa:	2300      	movs	r3, #0
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b086      	sub	sp, #24
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007610:	2300      	movs	r3, #0
 8007612:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8007614:	2300      	movs	r3, #0
 8007616:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800761e:	69db      	ldr	r3, [r3, #28]
 8007620:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007622:	2300      	movs	r3, #0
 8007624:	75bb      	strb	r3, [r7, #22]
 8007626:	e02b      	b.n	8007680 <USBH_AUDIO_BuildMicrophonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 8007628:	7dbb      	ldrb	r3, [r7, #22]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	331a      	adds	r3, #26
 800762e:	009b      	lsls	r3, r3, #2
 8007630:	4413      	add	r3, r2
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	791b      	ldrb	r3, [r3, #4]
 8007636:	4619      	mov	r1, r3
 8007638:	7dbb      	ldrb	r3, [r7, #22]
 800763a:	693a      	ldr	r2, [r7, #16]
 800763c:	331a      	adds	r3, #26
 800763e:	009b      	lsls	r3, r3, #2
 8007640:	4413      	add	r3, r2
 8007642:	689b      	ldr	r3, [r3, #8]
 8007644:	795b      	ldrb	r3, [r3, #5]
 8007646:	021b      	lsls	r3, r3, #8
 8007648:	b29b      	uxth	r3, r3
 800764a:	430b      	orrs	r3, r1
 800764c:	f240 2201 	movw	r2, #513	@ 0x201
 8007650:	4293      	cmp	r3, r2
 8007652:	d112      	bne.n	800767a <USBH_AUDIO_BuildMicrophonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8007654:	7dbb      	ldrb	r3, [r7, #22]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	331a      	adds	r3, #26
 800765a:	009b      	lsls	r3, r3, #2
 800765c:	4413      	add	r3, r2
 800765e:	689b      	ldr	r3, [r3, #8]
 8007660:	78db      	ldrb	r3, [r3, #3]
 8007662:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007664:	7dbb      	ldrb	r3, [r7, #22]
 8007666:	693a      	ldr	r2, [r7, #16]
 8007668:	331a      	adds	r3, #26
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	689b      	ldr	r3, [r3, #8]
 8007670:	79da      	ldrb	r2, [r3, #7]
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
      break;
 8007678:	e009      	b.n	800768e <USBH_AUDIO_BuildMicrophonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800767a:	7dbb      	ldrb	r3, [r7, #22]
 800767c:	3301      	adds	r3, #1
 800767e:	75bb      	strb	r3, [r7, #22]
 8007680:	7dbb      	ldrb	r3, [r7, #22]
 8007682:	b29a      	uxth	r2, r3
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800768a:	429a      	cmp	r2, r3
 800768c:	d3cc      	bcc.n	8007628 <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800768e:	7dfb      	ldrb	r3, [r7, #23]
 8007690:	4619      	mov	r1, r3
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f7ff ff04 	bl	80074a0 <USBH_AUDIO_FindLinkedUnit>
 8007698:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	2b00      	cmp	r3, #0
 800769e:	d101      	bne.n	80076a4 <USBH_AUDIO_BuildMicrophonePath+0x9c>
    {
      return USBH_FAIL;
 80076a0:	2302      	movs	r3, #2
 80076a2:	e035      	b.n	8007710 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	0a1b      	lsrs	r3, r3, #8
 80076ac:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	0c1b      	lsrs	r3, r3, #16
 80076b2:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80076b4:	7abb      	ldrb	r3, [r7, #10]
 80076b6:	3b03      	subs	r3, #3
 80076b8:	2b03      	cmp	r3, #3
 80076ba:	d81f      	bhi.n	80076fc <USBH_AUDIO_BuildMicrophonePath+0xf4>
 80076bc:	a201      	add	r2, pc, #4	@ (adr r2, 80076c4 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 80076be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c2:	bf00      	nop
 80076c4:	080076f3 	.word	0x080076f3
 80076c8:	080076df 	.word	0x080076df
 80076cc:	080076e9 	.word	0x080076e9
 80076d0:	080076d5 	.word	0x080076d5
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 80076d4:	693b      	ldr	r3, [r7, #16]
 80076d6:	7afa      	ldrb	r2, [r7, #11]
 80076d8:	f883 214f 	strb.w	r2, [r3, #335]	@ 0x14f
        break;
 80076dc:	e011      	b.n	8007702 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 80076de:	693b      	ldr	r3, [r7, #16]
 80076e0:	7afa      	ldrb	r2, [r7, #11]
 80076e2:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
        break;
 80076e6:	e00c      	b.n	8007702 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 80076e8:	693b      	ldr	r3, [r7, #16]
 80076ea:	7afa      	ldrb	r2, [r7, #11]
 80076ec:	f883 214e 	strb.w	r2, [r3, #334]	@ 0x14e
        break;
 80076f0:	e007      	b.n	8007702 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 80076f2:	693b      	ldr	r3, [r7, #16]
 80076f4:	7afa      	ldrb	r2, [r7, #11]
 80076f6:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
        break;
 80076fa:	e002      	b.n	8007702 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 80076fc:	2302      	movs	r3, #2
 80076fe:	757b      	strb	r3, [r7, #21]
        break;
 8007700:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007702:	7abb      	ldrb	r3, [r7, #10]
 8007704:	2b03      	cmp	r3, #3
 8007706:	d002      	beq.n	800770e <USBH_AUDIO_BuildMicrophonePath+0x106>
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d1bf      	bne.n	800768e <USBH_AUDIO_BuildMicrophonePath+0x86>

  return ret;
 800770e:	7d7b      	ldrb	r3, [r7, #21]
}
 8007710:	4618      	mov	r0, r3
 8007712:	3718      	adds	r7, #24
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}

08007718 <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b086      	sub	sp, #24
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 8007720:	2300      	movs	r3, #0
 8007722:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 8007724:	2300      	movs	r3, #0
 8007726:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800772e:	69db      	ldr	r3, [r3, #28]
 8007730:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 8007732:	2300      	movs	r3, #0
 8007734:	757b      	strb	r3, [r7, #21]
 8007736:	e02b      	b.n	8007790 <USBH_AUDIO_BuildHeadphonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 8007738:	7d7b      	ldrb	r3, [r7, #21]
 800773a:	693a      	ldr	r2, [r7, #16]
 800773c:	331a      	adds	r3, #26
 800773e:	009b      	lsls	r3, r3, #2
 8007740:	4413      	add	r3, r2
 8007742:	689b      	ldr	r3, [r3, #8]
 8007744:	791b      	ldrb	r3, [r3, #4]
 8007746:	4619      	mov	r1, r3
 8007748:	7d7b      	ldrb	r3, [r7, #21]
 800774a:	693a      	ldr	r2, [r7, #16]
 800774c:	331a      	adds	r3, #26
 800774e:	009b      	lsls	r3, r3, #2
 8007750:	4413      	add	r3, r2
 8007752:	689b      	ldr	r3, [r3, #8]
 8007754:	795b      	ldrb	r3, [r3, #5]
 8007756:	021b      	lsls	r3, r3, #8
 8007758:	b29b      	uxth	r3, r3
 800775a:	430b      	orrs	r3, r1
 800775c:	f240 1201 	movw	r2, #257	@ 0x101
 8007760:	4293      	cmp	r3, r2
 8007762:	d112      	bne.n	800778a <USBH_AUDIO_BuildHeadphonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 8007764:	7d7b      	ldrb	r3, [r7, #21]
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	331a      	adds	r3, #26
 800776a:	009b      	lsls	r3, r3, #2
 800776c:	4413      	add	r3, r2
 800776e:	689b      	ldr	r3, [r3, #8]
 8007770:	78db      	ldrb	r3, [r3, #3]
 8007772:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8007774:	7d7b      	ldrb	r3, [r7, #21]
 8007776:	693a      	ldr	r2, [r7, #16]
 8007778:	331a      	adds	r3, #26
 800777a:	009b      	lsls	r3, r3, #2
 800777c:	4413      	add	r3, r2
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	79da      	ldrb	r2, [r3, #7]
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
      break;
 8007788:	e009      	b.n	800779e <USBH_AUDIO_BuildHeadphonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800778a:	7d7b      	ldrb	r3, [r7, #21]
 800778c:	3301      	adds	r3, #1
 800778e:	757b      	strb	r3, [r7, #21]
 8007790:	7d7b      	ldrb	r3, [r7, #21]
 8007792:	b29a      	uxth	r2, r3
 8007794:	693b      	ldr	r3, [r7, #16]
 8007796:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800779a:	429a      	cmp	r2, r3
 800779c:	d3cc      	bcc.n	8007738 <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 800779e:	2300      	movs	r3, #0
 80077a0:	75bb      	strb	r3, [r7, #22]
 80077a2:	e011      	b.n	80077c8 <USBH_AUDIO_BuildHeadphonePath+0xb0>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 80077a4:	7dbb      	ldrb	r3, [r7, #22]
 80077a6:	693a      	ldr	r2, [r7, #16]
 80077a8:	3317      	adds	r3, #23
 80077aa:	00db      	lsls	r3, r3, #3
 80077ac:	4413      	add	r3, r2
 80077ae:	689b      	ldr	r3, [r3, #8]
 80077b0:	78db      	ldrb	r3, [r3, #3]
 80077b2:	7dfa      	ldrb	r2, [r7, #23]
 80077b4:	429a      	cmp	r2, r3
 80077b6:	d104      	bne.n	80077c2 <USBH_AUDIO_BuildHeadphonePath+0xaa>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	7dba      	ldrb	r2, [r7, #22]
 80077bc:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
      break;
 80077c0:	e009      	b.n	80077d6 <USBH_AUDIO_BuildHeadphonePath+0xbe>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 80077c2:	7dbb      	ldrb	r3, [r7, #22]
 80077c4:	3301      	adds	r3, #1
 80077c6:	75bb      	strb	r3, [r7, #22]
 80077c8:	7dbb      	ldrb	r3, [r7, #22]
 80077ca:	b29a      	uxth	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d3e6      	bcc.n	80077a4 <USBH_AUDIO_BuildHeadphonePath+0x8c>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 80077d6:	7dfb      	ldrb	r3, [r7, #23]
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f7ff fe60 	bl	80074a0 <USBH_AUDIO_FindLinkedUnit>
 80077e0:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d101      	bne.n	80077ec <USBH_AUDIO_BuildHeadphonePath+0xd4>
    {
      return USBH_FAIL;
 80077e8:	2302      	movs	r3, #2
 80077ea:	e053      	b.n	8007894 <USBH_AUDIO_BuildHeadphonePath+0x17c>
    }

    Index = (uint8_t)(value & 0xFFU);
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 80077fc:	7afb      	ldrb	r3, [r7, #11]
 80077fe:	3b03      	subs	r3, #3
 8007800:	2b03      	cmp	r3, #3
 8007802:	d83c      	bhi.n	800787e <USBH_AUDIO_BuildHeadphonePath+0x166>
 8007804:	a201      	add	r2, pc, #4	@ (adr r2, 800780c <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 8007806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800780a:	bf00      	nop
 800780c:	0800783b 	.word	0x0800783b
 8007810:	08007827 	.word	0x08007827
 8007814:	08007831 	.word	0x08007831
 8007818:	0800781d 	.word	0x0800781d
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	7dba      	ldrb	r2, [r7, #22]
 8007820:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
        break;
 8007824:	e02f      	b.n	8007886 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	7dba      	ldrb	r2, [r7, #22]
 800782a:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        break;
 800782e:	e02a      	b.n	8007886 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	7dba      	ldrb	r2, [r7, #22]
 8007834:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        break;
 8007838:	e025      	b.n	8007886 <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 800783a:	693b      	ldr	r3, [r7, #16]
 800783c:	7dba      	ldrb	r2, [r7, #22]
 800783e:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 8007842:	7dbb      	ldrb	r3, [r7, #22]
 8007844:	2b03      	cmp	r3, #3
 8007846:	d817      	bhi.n	8007878 <USBH_AUDIO_BuildHeadphonePath+0x160>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 8007848:	7dbb      	ldrb	r3, [r7, #22]
 800784a:	693a      	ldr	r2, [r7, #16]
 800784c:	331e      	adds	r3, #30
 800784e:	009b      	lsls	r3, r3, #2
 8007850:	4413      	add	r3, r2
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	791b      	ldrb	r3, [r3, #4]
 8007856:	4619      	mov	r1, r3
 8007858:	7dbb      	ldrb	r3, [r7, #22]
 800785a:	693a      	ldr	r2, [r7, #16]
 800785c:	331e      	adds	r3, #30
 800785e:	009b      	lsls	r3, r3, #2
 8007860:	4413      	add	r3, r2
 8007862:	689b      	ldr	r3, [r3, #8]
 8007864:	795b      	ldrb	r3, [r3, #5]
 8007866:	021b      	lsls	r3, r3, #8
 8007868:	b29b      	uxth	r3, r3
 800786a:	430b      	orrs	r3, r1
 800786c:	f240 1203 	movw	r2, #259	@ 0x103
 8007870:	4293      	cmp	r3, r2
 8007872:	d007      	beq.n	8007884 <USBH_AUDIO_BuildHeadphonePath+0x16c>
          {
            return  USBH_OK;
 8007874:	2300      	movs	r3, #0
 8007876:	e00d      	b.n	8007894 <USBH_AUDIO_BuildHeadphonePath+0x17c>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8007878:	2302      	movs	r3, #2
 800787a:	753b      	strb	r3, [r7, #20]
        }
        break;
 800787c:	e002      	b.n	8007884 <USBH_AUDIO_BuildHeadphonePath+0x16c>

      default:
        ret = USBH_FAIL;
 800787e:	2302      	movs	r3, #2
 8007880:	753b      	strb	r3, [r7, #20]
        break;
 8007882:	e000      	b.n	8007886 <USBH_AUDIO_BuildHeadphonePath+0x16e>
        break;
 8007884:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8007886:	7afb      	ldrb	r3, [r7, #11]
 8007888:	2b03      	cmp	r3, #3
 800788a:	d002      	beq.n	8007892 <USBH_AUDIO_BuildHeadphonePath+0x17a>
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1a1      	bne.n	80077d6 <USBH_AUDIO_BuildHeadphonePath+0xbe>

  return ret;
 8007892:	7d3b      	ldrb	r3, [r7, #20]
}
 8007894:	4618      	mov	r0, r3
 8007896:	3718      	adds	r7, #24
 8007898:	46bd      	mov	sp, r7
 800789a:	bd80      	pop	{r7, pc}

0800789c <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b086      	sub	sp, #24
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
 80078a4:	4608      	mov	r0, r1
 80078a6:	4611      	mov	r1, r2
 80078a8:	461a      	mov	r2, r3
 80078aa:	4603      	mov	r3, r0
 80078ac:	70fb      	strb	r3, [r7, #3]
 80078ae:	460b      	mov	r3, r1
 80078b0:	70bb      	strb	r3, [r7, #2]
 80078b2:	4613      	mov	r3, r2
 80078b4:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	82fb      	strh	r3, [r7, #22]
 80078ba:	2300      	movs	r3, #0
 80078bc:	82bb      	strh	r3, [r7, #20]
 80078be:	2300      	movs	r3, #0
 80078c0:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80078c8:	69db      	ldr	r3, [r3, #28]
 80078ca:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 80078cc:	2300      	movs	r3, #0
 80078ce:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	2b02      	cmp	r3, #2
 80078d4:	d002      	beq.n	80078dc <USBH_AC_SetCur+0x40>
 80078d6:	2b06      	cmp	r3, #6
 80078d8:	d018      	beq.n	800790c <USBH_AC_SetCur+0x70>
 80078da:	e035      	b.n	8007948 <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e0:	78db      	ldrb	r3, [r3, #3]
 80078e2:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80078e4:	2300      	movs	r3, #0
 80078e6:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80078e8:	7afb      	ldrb	r3, [r7, #11]
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	021b      	lsls	r3, r3, #8
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	7abb      	ldrb	r3, [r7, #10]
 80078f2:	b29b      	uxth	r3, r3
 80078f4:	4313      	orrs	r3, r2
 80078f6:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80078f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80078fc:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8007906:	2301      	movs	r3, #1
 8007908:	827b      	strh	r3, [r7, #18]
      break;
 800790a:	e020      	b.n	800794e <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 800790c:	78bb      	ldrb	r3, [r7, #2]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	3322      	adds	r3, #34	@ 0x22
 8007912:	009b      	lsls	r3, r3, #2
 8007914:	4413      	add	r3, r2
 8007916:	689b      	ldr	r3, [r3, #8]
 8007918:	78db      	ldrb	r3, [r3, #3]
 800791a:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 800791c:	2300      	movs	r3, #0
 800791e:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007920:	7afb      	ldrb	r3, [r7, #11]
 8007922:	b29b      	uxth	r3, r3
 8007924:	021b      	lsls	r3, r3, #8
 8007926:	b29a      	uxth	r2, r3
 8007928:	7abb      	ldrb	r3, [r7, #10]
 800792a:	b29b      	uxth	r3, r3
 800792c:	4313      	orrs	r3, r2
 800792e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007930:	787b      	ldrb	r3, [r7, #1]
 8007932:	b29b      	uxth	r3, r3
 8007934:	021b      	lsls	r3, r3, #8
 8007936:	b29a      	uxth	r2, r3
 8007938:	f897 3020 	ldrb.w	r3, [r7, #32]
 800793c:	b29b      	uxth	r3, r3
 800793e:	4313      	orrs	r3, r2
 8007940:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007942:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007944:	827b      	strh	r3, [r7, #18]
      break;
 8007946:	e002      	b.n	800794e <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8007948:	2302      	movs	r3, #2
 800794a:	747b      	strb	r3, [r7, #17]
      break;
 800794c:	bf00      	nop
  }

  if (ret != USBH_OK)
 800794e:	7c7b      	ldrb	r3, [r7, #17]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8007954:	7c7b      	ldrb	r3, [r7, #17]
 8007956:	e017      	b.n	8007988 <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	2221      	movs	r2, #33	@ 0x21
 800795c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2201      	movs	r2, #1
 8007962:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	8afa      	ldrh	r2, [r7, #22]
 8007968:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	8aba      	ldrh	r2, [r7, #20]
 800796e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	8a7a      	ldrh	r2, [r7, #18]
 8007974:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 800797c:	8a7a      	ldrh	r2, [r7, #18]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f006 f8dc 	bl	800db3e <USBH_CtlReq>
 8007986:	4603      	mov	r3, r0
}
 8007988:	4618      	mov	r0, r3
 800798a:	3718      	adds	r7, #24
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}

08007990 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	4608      	mov	r0, r1
 800799a:	4611      	mov	r1, r2
 800799c:	461a      	mov	r2, r3
 800799e:	4603      	mov	r3, r0
 80079a0:	70fb      	strb	r3, [r7, #3]
 80079a2:	460b      	mov	r3, r1
 80079a4:	70bb      	strb	r3, [r7, #2]
 80079a6:	4613      	mov	r3, r2
 80079a8:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 80079aa:	2300      	movs	r3, #0
 80079ac:	82fb      	strh	r3, [r7, #22]
 80079ae:	2300      	movs	r3, #0
 80079b0:	82bb      	strh	r3, [r7, #20]
 80079b2:	2300      	movs	r3, #0
 80079b4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 80079b6:	2300      	movs	r3, #0
 80079b8:	743b      	strb	r3, [r7, #16]
 80079ba:	2300      	movs	r3, #0
 80079bc:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80079c4:	69db      	ldr	r3, [r3, #28]
 80079c6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 80079c8:	2300      	movs	r3, #0
 80079ca:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 80079cc:	78fb      	ldrb	r3, [r7, #3]
 80079ce:	2b06      	cmp	r3, #6
 80079d0:	d01e      	beq.n	8007a10 <USBH_AC_GetCur+0x80>
 80079d2:	2b06      	cmp	r3, #6
 80079d4:	dc4f      	bgt.n	8007a76 <USBH_AC_GetCur+0xe6>
 80079d6:	2b02      	cmp	r3, #2
 80079d8:	d002      	beq.n	80079e0 <USBH_AC_GetCur+0x50>
 80079da:	2b03      	cmp	r3, #3
 80079dc:	d036      	beq.n	8007a4c <USBH_AC_GetCur+0xbc>
 80079de:	e04a      	b.n	8007a76 <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80079e4:	78db      	ldrb	r3, [r3, #3]
 80079e6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 80079e8:	2300      	movs	r3, #0
 80079ea:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 80079ec:	7c3b      	ldrb	r3, [r7, #16]
 80079ee:	b29b      	uxth	r3, r3
 80079f0:	021b      	lsls	r3, r3, #8
 80079f2:	b29a      	uxth	r2, r3
 80079f4:	7bfb      	ldrb	r3, [r7, #15]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	4313      	orrs	r3, r2
 80079fa:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 80079fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a00:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	2200      	movs	r2, #0
 8007a06:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8007a0a:	2301      	movs	r3, #1
 8007a0c:	827b      	strh	r3, [r7, #18]
      break;
 8007a0e:	e035      	b.n	8007a7c <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007a10:	78bb      	ldrb	r3, [r7, #2]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	3322      	adds	r3, #34	@ 0x22
 8007a16:	009b      	lsls	r3, r3, #2
 8007a18:	4413      	add	r3, r2
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	78db      	ldrb	r3, [r3, #3]
 8007a1e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007a20:	2300      	movs	r3, #0
 8007a22:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007a24:	7c3b      	ldrb	r3, [r7, #16]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	7bfb      	ldrb	r3, [r7, #15]
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	4313      	orrs	r3, r2
 8007a32:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007a34:	787b      	ldrb	r3, [r7, #1]
 8007a36:	b29b      	uxth	r3, r3
 8007a38:	021b      	lsls	r3, r3, #8
 8007a3a:	b29a      	uxth	r2, r3
 8007a3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	4313      	orrs	r3, r2
 8007a44:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007a48:	827b      	strh	r3, [r7, #18]
      break;
 8007a4a:	e017      	b.n	8007a7c <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a52:	78db      	ldrb	r3, [r3, #3]
 8007a54:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007a56:	2300      	movs	r3, #0
 8007a58:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007a5a:	7c3b      	ldrb	r3, [r7, #16]
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	021b      	lsls	r3, r3, #8
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	7bfb      	ldrb	r3, [r7, #15]
 8007a64:	b29b      	uxth	r3, r3
 8007a66:	4313      	orrs	r3, r2
 8007a68:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007a6a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007a6e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007a70:	2301      	movs	r3, #1
 8007a72:	827b      	strh	r3, [r7, #18]
      break;
 8007a74:	e002      	b.n	8007a7c <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8007a76:	2302      	movs	r3, #2
 8007a78:	747b      	strb	r3, [r7, #17]
      break;
 8007a7a:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007a7c:	7c7b      	ldrb	r3, [r7, #17]
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d001      	beq.n	8007a86 <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8007a82:	7c7b      	ldrb	r3, [r7, #17]
 8007a84:	e017      	b.n	8007ab6 <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	22a1      	movs	r2, #161	@ 0xa1
 8007a8a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2281      	movs	r2, #129	@ 0x81
 8007a90:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8afa      	ldrh	r2, [r7, #22]
 8007a96:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	8aba      	ldrh	r2, [r7, #20]
 8007a9c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	8a7a      	ldrh	r2, [r7, #18]
 8007aa2:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007aa4:	68bb      	ldr	r3, [r7, #8]
 8007aa6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007aaa:	8a7a      	ldrh	r2, [r7, #18]
 8007aac:	4619      	mov	r1, r3
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f006 f845 	bl	800db3e <USBH_CtlReq>
 8007ab4:	4603      	mov	r3, r0
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}

08007abe <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007abe:	b580      	push	{r7, lr}
 8007ac0:	b086      	sub	sp, #24
 8007ac2:	af00      	add	r7, sp, #0
 8007ac4:	6078      	str	r0, [r7, #4]
 8007ac6:	4608      	mov	r0, r1
 8007ac8:	4611      	mov	r1, r2
 8007aca:	461a      	mov	r2, r3
 8007acc:	4603      	mov	r3, r0
 8007ace:	70fb      	strb	r3, [r7, #3]
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	70bb      	strb	r3, [r7, #2]
 8007ad4:	4613      	mov	r3, r2
 8007ad6:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007ad8:	2300      	movs	r3, #0
 8007ada:	82fb      	strh	r3, [r7, #22]
 8007adc:	2300      	movs	r3, #0
 8007ade:	82bb      	strh	r3, [r7, #20]
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	743b      	strb	r3, [r7, #16]
 8007ae8:	2300      	movs	r3, #0
 8007aea:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007af2:	69db      	ldr	r3, [r3, #28]
 8007af4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007af6:	2300      	movs	r3, #0
 8007af8:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	2b06      	cmp	r3, #6
 8007afe:	d01e      	beq.n	8007b3e <USBH_AC_GetMax+0x80>
 8007b00:	2b06      	cmp	r3, #6
 8007b02:	dc4f      	bgt.n	8007ba4 <USBH_AC_GetMax+0xe6>
 8007b04:	2b02      	cmp	r3, #2
 8007b06:	d002      	beq.n	8007b0e <USBH_AC_GetMax+0x50>
 8007b08:	2b03      	cmp	r3, #3
 8007b0a:	d036      	beq.n	8007b7a <USBH_AC_GetMax+0xbc>
 8007b0c:	e04a      	b.n	8007ba4 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007b0e:	68bb      	ldr	r3, [r7, #8]
 8007b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007b12:	78db      	ldrb	r3, [r3, #3]
 8007b14:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007b16:	2300      	movs	r3, #0
 8007b18:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007b1a:	7c3b      	ldrb	r3, [r7, #16]
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	021b      	lsls	r3, r3, #8
 8007b20:	b29a      	uxth	r2, r3
 8007b22:	7bfb      	ldrb	r3, [r7, #15]
 8007b24:	b29b      	uxth	r3, r3
 8007b26:	4313      	orrs	r3, r2
 8007b28:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007b2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b2e:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8007b38:	2301      	movs	r3, #1
 8007b3a:	827b      	strh	r3, [r7, #18]
      break;
 8007b3c:	e035      	b.n	8007baa <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007b3e:	78bb      	ldrb	r3, [r7, #2]
 8007b40:	68ba      	ldr	r2, [r7, #8]
 8007b42:	3322      	adds	r3, #34	@ 0x22
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	4413      	add	r3, r2
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	78db      	ldrb	r3, [r3, #3]
 8007b4c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007b4e:	2300      	movs	r3, #0
 8007b50:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007b52:	7c3b      	ldrb	r3, [r7, #16]
 8007b54:	b29b      	uxth	r3, r3
 8007b56:	021b      	lsls	r3, r3, #8
 8007b58:	b29a      	uxth	r2, r3
 8007b5a:	7bfb      	ldrb	r3, [r7, #15]
 8007b5c:	b29b      	uxth	r3, r3
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007b62:	787b      	ldrb	r3, [r7, #1]
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	021b      	lsls	r3, r3, #8
 8007b68:	b29a      	uxth	r2, r3
 8007b6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007b6e:	b29b      	uxth	r3, r3
 8007b70:	4313      	orrs	r3, r2
 8007b72:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007b74:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007b76:	827b      	strh	r3, [r7, #18]
      break;
 8007b78:	e017      	b.n	8007baa <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007b80:	78db      	ldrb	r3, [r3, #3]
 8007b82:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007b84:	2300      	movs	r3, #0
 8007b86:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007b88:	7c3b      	ldrb	r3, [r7, #16]
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	021b      	lsls	r3, r3, #8
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	7bfb      	ldrb	r3, [r7, #15]
 8007b92:	b29b      	uxth	r3, r3
 8007b94:	4313      	orrs	r3, r2
 8007b96:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007b98:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007b9c:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007b9e:	2301      	movs	r3, #1
 8007ba0:	827b      	strh	r3, [r7, #18]
      break;
 8007ba2:	e002      	b.n	8007baa <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8007ba4:	2302      	movs	r3, #2
 8007ba6:	747b      	strb	r3, [r7, #17]
      break;
 8007ba8:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007baa:	7c7b      	ldrb	r3, [r7, #17]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8007bb0:	7c7b      	ldrb	r3, [r7, #17]
 8007bb2:	e017      	b.n	8007be4 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	22a1      	movs	r2, #161	@ 0xa1
 8007bb8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2283      	movs	r2, #131	@ 0x83
 8007bbe:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	8afa      	ldrh	r2, [r7, #22]
 8007bc4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	8aba      	ldrh	r2, [r7, #20]
 8007bca:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	8a7a      	ldrh	r2, [r7, #18]
 8007bd0:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007bd8:	8a7a      	ldrh	r2, [r7, #18]
 8007bda:	4619      	mov	r1, r3
 8007bdc:	6878      	ldr	r0, [r7, #4]
 8007bde:	f005 ffae 	bl	800db3e <USBH_CtlReq>
 8007be2:	4603      	mov	r3, r0

}
 8007be4:	4618      	mov	r0, r3
 8007be6:	3718      	adds	r7, #24
 8007be8:	46bd      	mov	sp, r7
 8007bea:	bd80      	pop	{r7, pc}

08007bec <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b086      	sub	sp, #24
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	461a      	mov	r2, r3
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	70fb      	strb	r3, [r7, #3]
 8007bfe:	460b      	mov	r3, r1
 8007c00:	70bb      	strb	r3, [r7, #2]
 8007c02:	4613      	mov	r3, r2
 8007c04:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007c06:	2300      	movs	r3, #0
 8007c08:	82fb      	strh	r3, [r7, #22]
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	82bb      	strh	r3, [r7, #20]
 8007c0e:	2300      	movs	r3, #0
 8007c10:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	743b      	strb	r3, [r7, #16]
 8007c16:	2300      	movs	r3, #0
 8007c18:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007c20:	69db      	ldr	r3, [r3, #28]
 8007c22:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007c24:	2300      	movs	r3, #0
 8007c26:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007c28:	78fb      	ldrb	r3, [r7, #3]
 8007c2a:	2b06      	cmp	r3, #6
 8007c2c:	d01e      	beq.n	8007c6c <USBH_AC_GetRes+0x80>
 8007c2e:	2b06      	cmp	r3, #6
 8007c30:	dc4f      	bgt.n	8007cd2 <USBH_AC_GetRes+0xe6>
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d002      	beq.n	8007c3c <USBH_AC_GetRes+0x50>
 8007c36:	2b03      	cmp	r3, #3
 8007c38:	d036      	beq.n	8007ca8 <USBH_AC_GetRes+0xbc>
 8007c3a:	e04a      	b.n	8007cd2 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007c3c:	68bb      	ldr	r3, [r7, #8]
 8007c3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007c40:	78db      	ldrb	r3, [r3, #3]
 8007c42:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007c44:	2300      	movs	r3, #0
 8007c46:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007c48:	7c3b      	ldrb	r3, [r7, #16]
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	021b      	lsls	r3, r3, #8
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	7bfb      	ldrb	r3, [r7, #15]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	4313      	orrs	r3, r2
 8007c56:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007c58:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007c5c:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8007c66:	2301      	movs	r3, #1
 8007c68:	827b      	strh	r3, [r7, #18]
      break;
 8007c6a:	e035      	b.n	8007cd8 <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007c6c:	78bb      	ldrb	r3, [r7, #2]
 8007c6e:	68ba      	ldr	r2, [r7, #8]
 8007c70:	3322      	adds	r3, #34	@ 0x22
 8007c72:	009b      	lsls	r3, r3, #2
 8007c74:	4413      	add	r3, r2
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	78db      	ldrb	r3, [r3, #3]
 8007c7a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007c80:	7c3b      	ldrb	r3, [r7, #16]
 8007c82:	b29b      	uxth	r3, r3
 8007c84:	021b      	lsls	r3, r3, #8
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	7bfb      	ldrb	r3, [r7, #15]
 8007c8a:	b29b      	uxth	r3, r3
 8007c8c:	4313      	orrs	r3, r2
 8007c8e:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007c90:	787b      	ldrb	r3, [r7, #1]
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	021b      	lsls	r3, r3, #8
 8007c96:	b29a      	uxth	r2, r3
 8007c98:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007c9c:	b29b      	uxth	r3, r3
 8007c9e:	4313      	orrs	r3, r2
 8007ca0:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007ca2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007ca4:	827b      	strh	r3, [r7, #18]
      break;
 8007ca6:	e017      	b.n	8007cd8 <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007cae:	78db      	ldrb	r3, [r3, #3]
 8007cb0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007cb2:	2300      	movs	r3, #0
 8007cb4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007cb6:	7c3b      	ldrb	r3, [r7, #16]
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	021b      	lsls	r3, r3, #8
 8007cbc:	b29a      	uxth	r2, r3
 8007cbe:	7bfb      	ldrb	r3, [r7, #15]
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	4313      	orrs	r3, r2
 8007cc4:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007cc6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cca:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007ccc:	2301      	movs	r3, #1
 8007cce:	827b      	strh	r3, [r7, #18]
      break;
 8007cd0:	e002      	b.n	8007cd8 <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	747b      	strb	r3, [r7, #17]
      break;
 8007cd6:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007cd8:	7c7b      	ldrb	r3, [r7, #17]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8007cde:	7c7b      	ldrb	r3, [r7, #17]
 8007ce0:	e017      	b.n	8007d12 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	22a1      	movs	r2, #161	@ 0xa1
 8007ce6:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2284      	movs	r2, #132	@ 0x84
 8007cec:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	8afa      	ldrh	r2, [r7, #22]
 8007cf2:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	8aba      	ldrh	r2, [r7, #20]
 8007cf8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	8a7a      	ldrh	r2, [r7, #18]
 8007cfe:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007d00:	68bb      	ldr	r3, [r7, #8]
 8007d02:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007d06:	8a7a      	ldrh	r2, [r7, #18]
 8007d08:	4619      	mov	r1, r3
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f005 ff17 	bl	800db3e <USBH_CtlReq>
 8007d10:	4603      	mov	r3, r0

}
 8007d12:	4618      	mov	r0, r3
 8007d14:	3718      	adds	r7, #24
 8007d16:	46bd      	mov	sp, r7
 8007d18:	bd80      	pop	{r7, pc}

08007d1a <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8007d1a:	b580      	push	{r7, lr}
 8007d1c:	b086      	sub	sp, #24
 8007d1e:	af00      	add	r7, sp, #0
 8007d20:	6078      	str	r0, [r7, #4]
 8007d22:	4608      	mov	r0, r1
 8007d24:	4611      	mov	r1, r2
 8007d26:	461a      	mov	r2, r3
 8007d28:	4603      	mov	r3, r0
 8007d2a:	70fb      	strb	r3, [r7, #3]
 8007d2c:	460b      	mov	r3, r1
 8007d2e:	70bb      	strb	r3, [r7, #2]
 8007d30:	4613      	mov	r3, r2
 8007d32:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8007d34:	2300      	movs	r3, #0
 8007d36:	82fb      	strh	r3, [r7, #22]
 8007d38:	2300      	movs	r3, #0
 8007d3a:	82bb      	strh	r3, [r7, #20]
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8007d40:	2300      	movs	r3, #0
 8007d42:	743b      	strb	r3, [r7, #16]
 8007d44:	2300      	movs	r3, #0
 8007d46:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007d4e:	69db      	ldr	r3, [r3, #28]
 8007d50:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8007d52:	2300      	movs	r3, #0
 8007d54:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8007d56:	78fb      	ldrb	r3, [r7, #3]
 8007d58:	2b06      	cmp	r3, #6
 8007d5a:	d01e      	beq.n	8007d9a <USBH_AC_GetMin+0x80>
 8007d5c:	2b06      	cmp	r3, #6
 8007d5e:	dc4f      	bgt.n	8007e00 <USBH_AC_GetMin+0xe6>
 8007d60:	2b02      	cmp	r3, #2
 8007d62:	d002      	beq.n	8007d6a <USBH_AC_GetMin+0x50>
 8007d64:	2b03      	cmp	r3, #3
 8007d66:	d036      	beq.n	8007dd6 <USBH_AC_GetMin+0xbc>
 8007d68:	e04a      	b.n	8007e00 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8007d6a:	68bb      	ldr	r3, [r7, #8]
 8007d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d6e:	78db      	ldrb	r3, [r3, #3]
 8007d70:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007d76:	7c3b      	ldrb	r3, [r7, #16]
 8007d78:	b29b      	uxth	r3, r3
 8007d7a:	021b      	lsls	r3, r3, #8
 8007d7c:	b29a      	uxth	r2, r3
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	b29b      	uxth	r3, r3
 8007d82:	4313      	orrs	r3, r2
 8007d84:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007d86:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d8a:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8007d8c:	68bb      	ldr	r3, [r7, #8]
 8007d8e:	2200      	movs	r2, #0
 8007d90:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8007d94:	2301      	movs	r3, #1
 8007d96:	827b      	strh	r3, [r7, #18]
      break;
 8007d98:	e035      	b.n	8007e06 <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8007d9a:	78bb      	ldrb	r3, [r7, #2]
 8007d9c:	68ba      	ldr	r2, [r7, #8]
 8007d9e:	3322      	adds	r3, #34	@ 0x22
 8007da0:	009b      	lsls	r3, r3, #2
 8007da2:	4413      	add	r3, r2
 8007da4:	689b      	ldr	r3, [r3, #8]
 8007da6:	78db      	ldrb	r3, [r3, #3]
 8007da8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007daa:	2300      	movs	r3, #0
 8007dac:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007dae:	7c3b      	ldrb	r3, [r7, #16]
 8007db0:	b29b      	uxth	r3, r3
 8007db2:	021b      	lsls	r3, r3, #8
 8007db4:	b29a      	uxth	r2, r3
 8007db6:	7bfb      	ldrb	r3, [r7, #15]
 8007db8:	b29b      	uxth	r3, r3
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8007dbe:	787b      	ldrb	r3, [r7, #1]
 8007dc0:	b29b      	uxth	r3, r3
 8007dc2:	021b      	lsls	r3, r3, #8
 8007dc4:	b29a      	uxth	r2, r3
 8007dc6:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007dca:	b29b      	uxth	r3, r3
 8007dcc:	4313      	orrs	r3, r2
 8007dce:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8007dd0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007dd2:	827b      	strh	r3, [r7, #18]
      break;
 8007dd4:	e017      	b.n	8007e06 <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007ddc:	78db      	ldrb	r3, [r3, #3]
 8007dde:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8007de0:	2300      	movs	r3, #0
 8007de2:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8007de4:	7c3b      	ldrb	r3, [r7, #16]
 8007de6:	b29b      	uxth	r3, r3
 8007de8:	021b      	lsls	r3, r3, #8
 8007dea:	b29a      	uxth	r2, r3
 8007dec:	7bfb      	ldrb	r3, [r7, #15]
 8007dee:	b29b      	uxth	r3, r3
 8007df0:	4313      	orrs	r3, r2
 8007df2:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8007df4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007df8:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	827b      	strh	r3, [r7, #18]
      break;
 8007dfe:	e002      	b.n	8007e06 <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8007e00:	2302      	movs	r3, #2
 8007e02:	747b      	strb	r3, [r7, #17]
      break;
 8007e04:	bf00      	nop
  }

  if (ret != USBH_OK)
 8007e06:	7c7b      	ldrb	r3, [r7, #17]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d001      	beq.n	8007e10 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8007e0c:	7c7b      	ldrb	r3, [r7, #17]
 8007e0e:	e017      	b.n	8007e40 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	22a1      	movs	r2, #161	@ 0xa1
 8007e14:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2282      	movs	r2, #130	@ 0x82
 8007e1a:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	8afa      	ldrh	r2, [r7, #22]
 8007e20:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	8aba      	ldrh	r2, [r7, #20]
 8007e26:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	8a7a      	ldrh	r2, [r7, #18]
 8007e2c:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007e34:	8a7a      	ldrh	r2, [r7, #18]
 8007e36:	4619      	mov	r1, r3
 8007e38:	6878      	ldr	r0, [r7, #4]
 8007e3a:	f005 fe80 	bl	800db3e <USBH_CtlReq>
 8007e3e:	4603      	mov	r3, r0

}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3718      	adds	r7, #24
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}

08007e48 <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b086      	sub	sp, #24
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	60f8      	str	r0, [r7, #12]
 8007e50:	460b      	mov	r3, r1
 8007e52:	607a      	str	r2, [r7, #4]
 8007e54:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8007e56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e5a:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8007e5c:	7afb      	ldrb	r3, [r7, #11]
 8007e5e:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /* length of the frequency parameter */
 8007e60:	2303      	movs	r3, #3
 8007e62:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2222      	movs	r2, #34	@ 0x22
 8007e68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	8afa      	ldrh	r2, [r7, #22]
 8007e74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	8aba      	ldrh	r2, [r7, #20]
 8007e7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	8a7a      	ldrh	r2, [r7, #18]
 8007e80:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8007e82:	8a7b      	ldrh	r3, [r7, #18]
 8007e84:	461a      	mov	r2, r3
 8007e86:	6879      	ldr	r1, [r7, #4]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f005 fe58 	bl	800db3e <USBH_CtlReq>
 8007e8e:	4603      	mov	r3, r0
}
 8007e90:	4618      	mov	r0, r3
 8007e92:	3718      	adds	r7, #24
 8007e94:	46bd      	mov	sp, r7
 8007e96:	bd80      	pop	{r7, pc}

08007e98 <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b085      	sub	sp, #20
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8007ea0:	2301      	movs	r3, #1
 8007ea2:	73fb      	strb	r3, [r7, #15]

  return status;
 8007ea4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3714      	adds	r7, #20
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
	...

08007eb4 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ebc:	2301      	movs	r3, #1
 8007ebe:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007ec6:	69db      	ldr	r3, [r3, #28]
 8007ec8:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8007ece:	693b      	ldr	r3, [r7, #16]
 8007ed0:	78db      	ldrb	r3, [r3, #3]
 8007ed2:	3b01      	subs	r3, #1
 8007ed4:	2b04      	cmp	r3, #4
 8007ed6:	f200 8090 	bhi.w	8007ffa <USBH_AUDIO_Control+0x146>
 8007eda:	a201      	add	r2, pc, #4	@ (adr r2, 8007ee0 <USBH_AUDIO_Control+0x2c>)
 8007edc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ee0:	08007ef5 	.word	0x08007ef5
 8007ee4:	08007f49 	.word	0x08007f49
 8007ee8:	08007ffb 	.word	0x08007ffb
 8007eec:	08007fc7 	.word	0x08007fc7
 8007ef0:	08007fe1 	.word	0x08007fe1
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 8007efa:	f003 0301 	and.w	r3, r3, #1
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d17d      	bne.n	8007ffe <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8007f08:	693b      	ldr	r3, [r7, #16]
 8007f0a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007f0e:	693b      	ldr	r3, [r7, #16]
 8007f10:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8007f14:	693b      	ldr	r3, [r7, #16]
 8007f16:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 8007f1a:	b2da      	uxtb	r2, r3
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8007f22:	6878      	ldr	r0, [r7, #4]
 8007f24:	f006 f85c 	bl	800dfe0 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8007f2e:	693b      	ldr	r3, [r7, #16]
 8007f30:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8007f34:	693b      	ldr	r3, [r7, #16]
 8007f36:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8007f3a:	693b      	ldr	r3, [r7, #16]
 8007f3c:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	2202      	movs	r2, #2
 8007f44:	70da      	strb	r2, [r3, #3]
      }
      break;
 8007f46:	e05a      	b.n	8007ffe <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8007f4e:	4619      	mov	r1, r3
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f007 fa43 	bl	800f3dc <USBH_LL_GetURBState>
 8007f56:	4603      	mov	r3, r0
 8007f58:	2b01      	cmp	r3, #1
 8007f5a:	d114      	bne.n	8007f86 <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 8007f5c:	693b      	ldr	r3, [r7, #16]
 8007f5e:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8007f68:	3302      	adds	r3, #2
 8007f6a:	881b      	ldrh	r3, [r3, #0]
 8007f6c:	021b      	lsls	r3, r3, #8
 8007f6e:	b29b      	uxth	r3, r3
 8007f70:	4313      	orrs	r3, r2
 8007f72:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8007f74:	89fb      	ldrh	r3, [r7, #14]
 8007f76:	b2db      	uxtb	r3, r3
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f97a 	bl	8008274 <USBH_AUDIO_SetControlAttribute>
 8007f80:	4603      	mov	r3, r0
 8007f82:	2b01      	cmp	r3, #1
 8007f84:	d03d      	beq.n	8008002 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8007f8c:	693b      	ldr	r3, [r7, #16]
 8007f8e:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007f92:	1ad3      	subs	r3, r2, r3
 8007f94:	693a      	ldr	r2, [r7, #16]
 8007f96:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 8007f9a:	4293      	cmp	r3, r2
 8007f9c:	d333      	bcc.n	8008006 <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8007fa4:	693b      	ldr	r3, [r7, #16]
 8007fa6:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 8007faa:	693b      	ldr	r3, [r7, #16]
 8007fac:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 8007fb6:	b2da      	uxtb	r2, r3
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f006 f80e 	bl	800dfe0 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 8007fc4:	e01f      	b.n	8008006 <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 8007fc6:	2101      	movs	r1, #1
 8007fc8:	6878      	ldr	r0, [r7, #4]
 8007fca:	f000 f953 	bl	8008274 <USBH_AUDIO_SetControlAttribute>
 8007fce:	4603      	mov	r3, r0
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d11a      	bne.n	800800a <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007fde:	e014      	b.n	800800a <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8007fe0:	2102      	movs	r1, #2
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 f946 	bl	8008274 <USBH_AUDIO_SetControlAttribute>
 8007fe8:	4603      	mov	r3, r0
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d10f      	bne.n	800800e <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007fee:	693b      	ldr	r3, [r7, #16]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007ff4:	2300      	movs	r3, #0
 8007ff6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007ff8:	e009      	b.n	800800e <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 8007ffa:	bf00      	nop
 8007ffc:	e008      	b.n	8008010 <USBH_AUDIO_Control+0x15c>
      break;
 8007ffe:	bf00      	nop
 8008000:	e006      	b.n	8008010 <USBH_AUDIO_Control+0x15c>
          break;
 8008002:	bf00      	nop
 8008004:	e004      	b.n	8008010 <USBH_AUDIO_Control+0x15c>
      break;
 8008006:	bf00      	nop
 8008008:	e002      	b.n	8008010 <USBH_AUDIO_Control+0x15c>
      break;
 800800a:	bf00      	nop
 800800c:	e000      	b.n	8008010 <USBH_AUDIO_Control+0x15c>
      break;
 800800e:	bf00      	nop
  }

  return status;
 8008010:	7dfb      	ldrb	r3, [r7, #23]
}
 8008012:	4618      	mov	r0, r3
 8008014:	3718      	adds	r7, #24
 8008016:	46bd      	mov	sp, r7
 8008018:	bd80      	pop	{r7, pc}
 800801a:	bf00      	nop

0800801c <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b086      	sub	sp, #24
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008024:	2301      	movs	r3, #1
 8008026:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 8008032:	693b      	ldr	r3, [r7, #16]
 8008034:	789b      	ldrb	r3, [r3, #2]
 8008036:	3b01      	subs	r3, #1
 8008038:	2b04      	cmp	r3, #4
 800803a:	d85c      	bhi.n	80080f6 <USBH_AUDIO_OutputStream+0xda>
 800803c:	a201      	add	r2, pc, #4	@ (adr r2, 8008044 <USBH_AUDIO_OutputStream+0x28>)
 800803e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008042:	bf00      	nop
 8008044:	08008059 	.word	0x08008059
 8008048:	080080b5 	.word	0x080080b5
 800804c:	0800807f 	.word	0x0800807f
 8008050:	080080eb 	.word	0x080080eb
 8008054:	080080e5 	.word	0x080080e5
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 8008058:	693b      	ldr	r3, [r7, #16]
 800805a:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 800805e:	693a      	ldr	r2, [r7, #16]
 8008060:	3317      	adds	r3, #23
 8008062:	00db      	lsls	r3, r3, #3
 8008064:	4413      	add	r3, r2
 8008066:	68db      	ldr	r3, [r3, #12]
 8008068:	79db      	ldrb	r3, [r3, #7]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d103      	bne.n	8008076 <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	2203      	movs	r2, #3
 8008072:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008074:	e044      	b.n	8008100 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 8008076:	693b      	ldr	r3, [r7, #16]
 8008078:	2202      	movs	r2, #2
 800807a:	709a      	strb	r2, [r3, #2]
      break;
 800807c:	e040      	b.n	8008100 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 800807e:	693b      	ldr	r3, [r7, #16]
 8008080:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8008084:	693a      	ldr	r2, [r7, #16]
 8008086:	3317      	adds	r3, #23
 8008088:	00db      	lsls	r3, r3, #3
 800808a:	4413      	add	r3, r2
 800808c:	68db      	ldr	r3, [r3, #12]
 800808e:	3308      	adds	r3, #8
 8008090:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8008092:	693b      	ldr	r3, [r7, #16]
 8008094:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4619      	mov	r1, r3
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff fed3 	bl	8007e48 <USBH_AUDIO_SetEndpointControls>
 80080a2:	4603      	mov	r3, r0
 80080a4:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80080a6:	7dfb      	ldrb	r3, [r7, #23]
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d126      	bne.n	80080fa <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2205      	movs	r2, #5
 80080b0:	709a      	strb	r2, [r3, #2]
      }
      break;
 80080b2:	e022      	b.n	80080fa <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 80080b4:	693b      	ldr	r3, [r7, #16]
 80080b6:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 80080ba:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 80080bc:	693b      	ldr	r3, [r7, #16]
 80080be:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 80080c2:	68fa      	ldr	r2, [r7, #12]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f7ff febe 	bl	8007e48 <USBH_AUDIO_SetEndpointControls>
 80080cc:	4603      	mov	r3, r0
 80080ce:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 80080d0:	7dfb      	ldrb	r3, [r7, #23]
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d113      	bne.n	80080fe <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80080d6:	693b      	ldr	r3, [r7, #16]
 80080d8:	2205      	movs	r2, #5
 80080da:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 80080dc:	6878      	ldr	r0, [r7, #4]
 80080de:	f000 f96e 	bl	80083be <USBH_AUDIO_FrequencySet>
      }
      break;
 80080e2:	e00c      	b.n	80080fe <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 80080e4:	2300      	movs	r3, #0
 80080e6:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80080e8:	e00a      	b.n	8008100 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f000 f80e 	bl	800810c <USBH_AUDIO_Transmit>
      status = USBH_OK;
 80080f0:	2300      	movs	r3, #0
 80080f2:	75fb      	strb	r3, [r7, #23]
      break;
 80080f4:	e004      	b.n	8008100 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 80080f6:	bf00      	nop
 80080f8:	e002      	b.n	8008100 <USBH_AUDIO_OutputStream+0xe4>
      break;
 80080fa:	bf00      	nop
 80080fc:	e000      	b.n	8008100 <USBH_AUDIO_OutputStream+0xe4>
      break;
 80080fe:	bf00      	nop
  }

  return status;
 8008100:	7dfb      	ldrb	r3, [r7, #23]
}
 8008102:	4618      	mov	r0, r3
 8008104:	3718      	adds	r7, #24
 8008106:	46bd      	mov	sp, r7
 8008108:	bd80      	pop	{r7, pc}
 800810a:	bf00      	nop

0800810c <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b084      	sub	sp, #16
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008114:	2301      	movs	r3, #1
 8008116:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800811e:	69db      	ldr	r3, [r3, #28]
 8008120:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 8008122:	68bb      	ldr	r3, [r7, #8]
 8008124:	791b      	ldrb	r3, [r3, #4]
 8008126:	2b01      	cmp	r3, #1
 8008128:	d002      	beq.n	8008130 <USBH_AUDIO_Transmit+0x24>
 800812a:	2b02      	cmp	r3, #2
 800812c:	d033      	beq.n	8008196 <USBH_AUDIO_Transmit+0x8a>
 800812e:	e096      	b.n	800825e <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 8008136:	f003 0301 	and.w	r3, r3, #1
 800813a:	2b00      	cmp	r3, #0
 800813c:	f040 8092 	bne.w	8008264 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8008146:	68bb      	ldr	r3, [r7, #8]
 8008148:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2202      	movs	r2, #2
 8008150:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
        (void)USBH_IsocSendData(phost,
 800815e:	461a      	mov	r2, r3
 8008160:	68bb      	ldr	r3, [r7, #8]
 8008162:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f005 ff59 	bl	800e01e <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 800816c:	68bb      	ldr	r3, [r7, #8]
 800816e:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8008172:	461a      	mov	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800817a:	68bb      	ldr	r3, [r7, #8]
 800817c:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8008180:	461a      	mov	r2, r3
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 8008188:	68bb      	ldr	r3, [r7, #8]
 800818a:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008194:	e066      	b.n	8008264 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f007 f91c 	bl	800f3dc <USBH_LL_GetURBState>
 80081a4:	4603      	mov	r3, r0
 80081a6:	2b01      	cmp	r3, #1
 80081a8:	d15e      	bne.n	8008268 <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80081b0:	68bb      	ldr	r3, [r7, #8]
 80081b2:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80081b6:	1ad3      	subs	r3, r2, r3
 80081b8:	68ba      	ldr	r2, [r7, #8]
 80081ba:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 80081be:	4293      	cmp	r3, r2
 80081c0:	d352      	bcc.n	8008268 <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        if (AUDIO_Handle->control.supported == 1U)
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 80081d4:	2b01      	cmp	r3, #1
 80081d6:	d102      	bne.n	80081de <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 80081d8:	6878      	ldr	r0, [r7, #4]
 80081da:	f7ff fe6b 	bl	8007eb4 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 80081de:	68bb      	ldr	r3, [r7, #8]
 80081e0:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 80081ea:	429a      	cmp	r2, r3
 80081ec:	d82b      	bhi.n	8008246 <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 80081ee:	68bb      	ldr	r3, [r7, #8]
 80081f0:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
          (void)USBH_IsocSendData(phost,
 80081fa:	461a      	mov	r2, r3
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8008202:	6878      	ldr	r0, [r7, #4]
 8008204:	f005 ff0b 	bl	800e01e <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 8008208:	68bb      	ldr	r3, [r7, #8]
 800820a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800820e:	68ba      	ldr	r2, [r7, #8]
 8008210:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8008214:	441a      	add	r2, r3
 8008216:	68bb      	ldr	r3, [r7, #8]
 8008218:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8008222:	68ba      	ldr	r2, [r7, #8]
 8008224:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 8008228:	441a      	add	r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8008236:	68ba      	ldr	r2, [r7, #8]
 8008238:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 800823c:	441a      	add	r2, r3
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 8008244:	e010      	b.n	8008268 <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	f04f 32ff 	mov.w	r2, #4294967295
 800824c:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	2205      	movs	r2, #5
 8008254:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 8008256:	6878      	ldr	r0, [r7, #4]
 8008258:	f000 f8bb 	bl	80083d2 <USBH_AUDIO_BufferEmptyCallback>
      break;
 800825c:	e004      	b.n	8008268 <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 800825e:	2302      	movs	r3, #2
 8008260:	73fb      	strb	r3, [r7, #15]
      break;
 8008262:	e002      	b.n	800826a <USBH_AUDIO_Transmit+0x15e>
      break;
 8008264:	bf00      	nop
 8008266:	e000      	b.n	800826a <USBH_AUDIO_Transmit+0x15e>
      break;
 8008268:	bf00      	nop
  }
  return status;
 800826a:	7bfb      	ldrb	r3, [r7, #15]
}
 800826c:	4618      	mov	r0, r3
 800826e:	3710      	adds	r7, #16
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	460b      	mov	r3, r1
 800827e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008280:	2301      	movs	r3, #1
 8008282:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800828a:	69db      	ldr	r3, [r3, #28]
 800828c:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 800828e:	78fb      	ldrb	r3, [r7, #3]
 8008290:	2b01      	cmp	r3, #1
 8008292:	d002      	beq.n	800829a <USBH_AUDIO_SetControlAttribute+0x26>
 8008294:	2b02      	cmp	r3, #2
 8008296:	d00b      	beq.n	80082b0 <USBH_AUDIO_SetControlAttribute+0x3c>
 8008298:	e015      	b.n	80082c6 <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80082a0:	68bb      	ldr	r3, [r7, #8]
 80082a2:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80082a6:	441a      	add	r2, r3
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 80082ae:	e00d      	b.n	80082cc <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 80082b0:	68bb      	ldr	r3, [r7, #8]
 80082b2:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 80082bc:	1ad2      	subs	r2, r2, r3
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 80082c4:	e002      	b.n	80082cc <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 80082c6:	2302      	movs	r3, #2
 80082c8:	73fb      	strb	r3, [r7, #15]
      break;
 80082ca:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 80082cc:	68bb      	ldr	r3, [r7, #8]
 80082ce:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 80082d8:	429a      	cmp	r2, r3
 80082da:	d905      	bls.n	80082e8 <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 80082dc:	68bb      	ldr	r3, [r7, #8]
 80082de:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 80082e2:	68bb      	ldr	r3, [r7, #8]
 80082e4:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 80082e8:	68bb      	ldr	r3, [r7, #8]
 80082ea:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 80082f4:	429a      	cmp	r2, r3
 80082f6:	d205      	bcs.n	8008304 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 80082fe:	68bb      	ldr	r3, [r7, #8]
 8008300:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_SetVolume(phost,
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
  if (AUDIO_SetVolume(phost,
 8008316:	b29b      	uxth	r3, r3
 8008318:	6878      	ldr	r0, [r7, #4]
 800831a:	f000 f827 	bl	800836c <AUDIO_SetVolume>
 800831e:	4603      	mov	r3, r0
 8008320:	2b01      	cmp	r3, #1
 8008322:	d01e      	beq.n	8008362 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8008324:	68bb      	ldr	r3, [r7, #8]
 8008326:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 800832a:	2b01      	cmp	r3, #1
 800832c:	d10e      	bne.n	800834c <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 800832e:	68bb      	ldr	r3, [r7, #8]
 8008330:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 800833a:	68bb      	ldr	r3, [r7, #8]
 800833c:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8008340:	68bb      	ldr	r3, [r7, #8]
 8008342:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 8008346:	2300      	movs	r3, #0
 8008348:	73fb      	strb	r3, [r7, #15]
 800834a:	e007      	b.n	800835c <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8008352:	3b01      	subs	r3, #1
 8008354:	b2da      	uxtb	r2, r3
 8008356:	68bb      	ldr	r3, [r7, #8]
 8008358:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	2206      	movs	r2, #6
 8008360:	705a      	strb	r2, [r3, #1]
  }


  return status;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af02      	add	r7, sp, #8
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	461a      	mov	r2, r3
 800837a:	4603      	mov	r3, r0
 800837c:	70fb      	strb	r3, [r7, #3]
 800837e:	460b      	mov	r3, r1
 8008380:	70bb      	strb	r3, [r7, #2]
 8008382:	4613      	mov	r3, r2
 8008384:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008386:	2301      	movs	r3, #1
 8008388:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008390:	69db      	ldr	r3, [r3, #28]
 8008392:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	883a      	ldrh	r2, [r7, #0]
 8008398:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	2302      	movs	r3, #2
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	78bb      	ldrb	r3, [r7, #2]
 80083a4:	9300      	str	r3, [sp, #0]
 80083a6:	2302      	movs	r3, #2
 80083a8:	2106      	movs	r1, #6
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fa76 	bl	800789c <USBH_AC_SetCur>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 80083b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 80083be:	b480      	push	{r7}
 80083c0:	b083      	sub	sp, #12
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083c6:	bf00      	nop
 80083c8:	370c      	adds	r7, #12
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b083      	sub	sp, #12
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr

080083e6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80083e6:	b590      	push	{r4, r7, lr}
 80083e8:	b089      	sub	sp, #36	@ 0x24
 80083ea:	af04      	add	r7, sp, #16
 80083ec:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80083ee:	2301      	movs	r3, #1
 80083f0:	2202      	movs	r2, #2
 80083f2:	2102      	movs	r1, #2
 80083f4:	6878      	ldr	r0, [r7, #4]
 80083f6:	f004 fa37 	bl	800c868 <USBH_FindInterface>
 80083fa:	4603      	mov	r3, r0
 80083fc:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083fe:	7bfb      	ldrb	r3, [r7, #15]
 8008400:	2bff      	cmp	r3, #255	@ 0xff
 8008402:	d002      	beq.n	800840a <USBH_CDC_InterfaceInit+0x24>
 8008404:	7bfb      	ldrb	r3, [r7, #15]
 8008406:	2b09      	cmp	r3, #9
 8008408:	d901      	bls.n	800840e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800840a:	2302      	movs	r3, #2
 800840c:	e13d      	b.n	800868a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800840e:	7bfb      	ldrb	r3, [r7, #15]
 8008410:	4619      	mov	r1, r3
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f004 fa0c 	bl	800c830 <USBH_SelectInterface>
 8008418:	4603      	mov	r3, r0
 800841a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800841c:	7bbb      	ldrb	r3, [r7, #14]
 800841e:	2b00      	cmp	r3, #0
 8008420:	d001      	beq.n	8008426 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008422:	2302      	movs	r3, #2
 8008424:	e131      	b.n	800868a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 800842c:	2050      	movs	r0, #80	@ 0x50
 800842e:	f007 f8b9 	bl	800f5a4 <malloc>
 8008432:	4603      	mov	r3, r0
 8008434:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800843c:	69db      	ldr	r3, [r3, #28]
 800843e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008440:	68bb      	ldr	r3, [r7, #8]
 8008442:	2b00      	cmp	r3, #0
 8008444:	d101      	bne.n	800844a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008446:	2302      	movs	r3, #2
 8008448:	e11f      	b.n	800868a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800844a:	2250      	movs	r2, #80	@ 0x50
 800844c:	2100      	movs	r1, #0
 800844e:	68b8      	ldr	r0, [r7, #8]
 8008450:	f007 fba4 	bl	800fb9c <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008454:	7bfb      	ldrb	r3, [r7, #15]
 8008456:	687a      	ldr	r2, [r7, #4]
 8008458:	2132      	movs	r1, #50	@ 0x32
 800845a:	fb01 f303 	mul.w	r3, r1, r3
 800845e:	4413      	add	r3, r2
 8008460:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008464:	781b      	ldrb	r3, [r3, #0]
 8008466:	b25b      	sxtb	r3, r3
 8008468:	2b00      	cmp	r3, #0
 800846a:	da15      	bge.n	8008498 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800846c:	7bfb      	ldrb	r3, [r7, #15]
 800846e:	687a      	ldr	r2, [r7, #4]
 8008470:	2132      	movs	r1, #50	@ 0x32
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	4413      	add	r3, r2
 8008478:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800847c:	781a      	ldrb	r2, [r3, #0]
 800847e:	68bb      	ldr	r3, [r7, #8]
 8008480:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	687a      	ldr	r2, [r7, #4]
 8008486:	2132      	movs	r1, #50	@ 0x32
 8008488:	fb01 f303 	mul.w	r3, r1, r3
 800848c:	4413      	add	r3, r2
 800848e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008492:	881a      	ldrh	r2, [r3, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	785b      	ldrb	r3, [r3, #1]
 800849c:	4619      	mov	r1, r3
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f005 fe07 	bl	800e0b2 <USBH_AllocPipe>
 80084a4:	4603      	mov	r3, r0
 80084a6:	461a      	mov	r2, r3
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80084ac:	68bb      	ldr	r3, [r7, #8]
 80084ae:	7819      	ldrb	r1, [r3, #0]
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	7858      	ldrb	r0, [r3, #1]
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	8952      	ldrh	r2, [r2, #10]
 80084c4:	9202      	str	r2, [sp, #8]
 80084c6:	2203      	movs	r2, #3
 80084c8:	9201      	str	r2, [sp, #4]
 80084ca:	9300      	str	r3, [sp, #0]
 80084cc:	4623      	mov	r3, r4
 80084ce:	4602      	mov	r2, r0
 80084d0:	6878      	ldr	r0, [r7, #4]
 80084d2:	f005 fdbf 	bl	800e054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	2200      	movs	r2, #0
 80084dc:	4619      	mov	r1, r3
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f006 ffa6 	bl	800f430 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80084e4:	2300      	movs	r3, #0
 80084e6:	2200      	movs	r2, #0
 80084e8:	210a      	movs	r1, #10
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f004 f9bc 	bl	800c868 <USBH_FindInterface>
 80084f0:	4603      	mov	r3, r0
 80084f2:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80084f4:	7bfb      	ldrb	r3, [r7, #15]
 80084f6:	2bff      	cmp	r3, #255	@ 0xff
 80084f8:	d002      	beq.n	8008500 <USBH_CDC_InterfaceInit+0x11a>
 80084fa:	7bfb      	ldrb	r3, [r7, #15]
 80084fc:	2b09      	cmp	r3, #9
 80084fe:	d901      	bls.n	8008504 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008500:	2302      	movs	r3, #2
 8008502:	e0c2      	b.n	800868a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008504:	7bfb      	ldrb	r3, [r7, #15]
 8008506:	687a      	ldr	r2, [r7, #4]
 8008508:	2132      	movs	r1, #50	@ 0x32
 800850a:	fb01 f303 	mul.w	r3, r1, r3
 800850e:	4413      	add	r3, r2
 8008510:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008514:	781b      	ldrb	r3, [r3, #0]
 8008516:	b25b      	sxtb	r3, r3
 8008518:	2b00      	cmp	r3, #0
 800851a:	da16      	bge.n	800854a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800851c:	7bfb      	ldrb	r3, [r7, #15]
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	2132      	movs	r1, #50	@ 0x32
 8008522:	fb01 f303 	mul.w	r3, r1, r3
 8008526:	4413      	add	r3, r2
 8008528:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800852c:	781a      	ldrb	r2, [r3, #0]
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008532:	7bfb      	ldrb	r3, [r7, #15]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	2132      	movs	r1, #50	@ 0x32
 8008538:	fb01 f303 	mul.w	r3, r1, r3
 800853c:	4413      	add	r3, r2
 800853e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008542:	881a      	ldrh	r2, [r3, #0]
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	835a      	strh	r2, [r3, #26]
 8008548:	e015      	b.n	8008576 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800854a:	7bfb      	ldrb	r3, [r7, #15]
 800854c:	687a      	ldr	r2, [r7, #4]
 800854e:	2132      	movs	r1, #50	@ 0x32
 8008550:	fb01 f303 	mul.w	r3, r1, r3
 8008554:	4413      	add	r3, r2
 8008556:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008560:	7bfb      	ldrb	r3, [r7, #15]
 8008562:	687a      	ldr	r2, [r7, #4]
 8008564:	2132      	movs	r1, #50	@ 0x32
 8008566:	fb01 f303 	mul.w	r3, r1, r3
 800856a:	4413      	add	r3, r2
 800856c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008570:	881a      	ldrh	r2, [r3, #0]
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	687a      	ldr	r2, [r7, #4]
 800857a:	2132      	movs	r1, #50	@ 0x32
 800857c:	fb01 f303 	mul.w	r3, r1, r3
 8008580:	4413      	add	r3, r2
 8008582:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008586:	781b      	ldrb	r3, [r3, #0]
 8008588:	b25b      	sxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	da16      	bge.n	80085bc <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	687a      	ldr	r2, [r7, #4]
 8008592:	2132      	movs	r1, #50	@ 0x32
 8008594:	fb01 f303 	mul.w	r3, r1, r3
 8008598:	4413      	add	r3, r2
 800859a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800859e:	781a      	ldrb	r2, [r3, #0]
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085a4:	7bfb      	ldrb	r3, [r7, #15]
 80085a6:	687a      	ldr	r2, [r7, #4]
 80085a8:	2132      	movs	r1, #50	@ 0x32
 80085aa:	fb01 f303 	mul.w	r3, r1, r3
 80085ae:	4413      	add	r3, r2
 80085b0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80085b4:	881a      	ldrh	r2, [r3, #0]
 80085b6:	68bb      	ldr	r3, [r7, #8]
 80085b8:	835a      	strh	r2, [r3, #26]
 80085ba:	e015      	b.n	80085e8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	2132      	movs	r1, #50	@ 0x32
 80085c2:	fb01 f303 	mul.w	r3, r1, r3
 80085c6:	4413      	add	r3, r2
 80085c8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80085cc:	781a      	ldrb	r2, [r3, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80085d2:	7bfb      	ldrb	r3, [r7, #15]
 80085d4:	687a      	ldr	r2, [r7, #4]
 80085d6:	2132      	movs	r1, #50	@ 0x32
 80085d8:	fb01 f303 	mul.w	r3, r1, r3
 80085dc:	4413      	add	r3, r2
 80085de:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80085e2:	881a      	ldrh	r2, [r3, #0]
 80085e4:	68bb      	ldr	r3, [r7, #8]
 80085e6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	7b9b      	ldrb	r3, [r3, #14]
 80085ec:	4619      	mov	r1, r3
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f005 fd5f 	bl	800e0b2 <USBH_AllocPipe>
 80085f4:	4603      	mov	r3, r0
 80085f6:	461a      	mov	r2, r3
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80085fc:	68bb      	ldr	r3, [r7, #8]
 80085fe:	7bdb      	ldrb	r3, [r3, #15]
 8008600:	4619      	mov	r1, r3
 8008602:	6878      	ldr	r0, [r7, #4]
 8008604:	f005 fd55 	bl	800e0b2 <USBH_AllocPipe>
 8008608:	4603      	mov	r3, r0
 800860a:	461a      	mov	r2, r3
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	7b59      	ldrb	r1, [r3, #13]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	7b98      	ldrb	r0, [r3, #14]
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008624:	68ba      	ldr	r2, [r7, #8]
 8008626:	8b12      	ldrh	r2, [r2, #24]
 8008628:	9202      	str	r2, [sp, #8]
 800862a:	2202      	movs	r2, #2
 800862c:	9201      	str	r2, [sp, #4]
 800862e:	9300      	str	r3, [sp, #0]
 8008630:	4623      	mov	r3, r4
 8008632:	4602      	mov	r2, r0
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f005 fd0d 	bl	800e054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800863a:	68bb      	ldr	r3, [r7, #8]
 800863c:	7b19      	ldrb	r1, [r3, #12]
 800863e:	68bb      	ldr	r3, [r7, #8]
 8008640:	7bd8      	ldrb	r0, [r3, #15]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	8b52      	ldrh	r2, [r2, #26]
 8008652:	9202      	str	r2, [sp, #8]
 8008654:	2202      	movs	r2, #2
 8008656:	9201      	str	r2, [sp, #4]
 8008658:	9300      	str	r3, [sp, #0]
 800865a:	4623      	mov	r3, r4
 800865c:	4602      	mov	r2, r0
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f005 fcf8 	bl	800e054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008664:	68bb      	ldr	r3, [r7, #8]
 8008666:	2200      	movs	r2, #0
 8008668:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800866c:	68bb      	ldr	r3, [r7, #8]
 800866e:	7b5b      	ldrb	r3, [r3, #13]
 8008670:	2200      	movs	r2, #0
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f006 fedb 	bl	800f430 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	7b1b      	ldrb	r3, [r3, #12]
 800867e:	2200      	movs	r2, #0
 8008680:	4619      	mov	r1, r3
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f006 fed4 	bl	800f430 <USBH_LL_SetToggle>

  return USBH_OK;
 8008688:	2300      	movs	r3, #0
}
 800868a:	4618      	mov	r0, r3
 800868c:	3714      	adds	r7, #20
 800868e:	46bd      	mov	sp, r7
 8008690:	bd90      	pop	{r4, r7, pc}

08008692 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008692:	b580      	push	{r7, lr}
 8008694:	b084      	sub	sp, #16
 8008696:	af00      	add	r7, sp, #0
 8008698:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80086a0:	69db      	ldr	r3, [r3, #28]
 80086a2:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d00e      	beq.n	80086ca <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	781b      	ldrb	r3, [r3, #0]
 80086b0:	4619      	mov	r1, r3
 80086b2:	6878      	ldr	r0, [r7, #4]
 80086b4:	f005 fced 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	781b      	ldrb	r3, [r3, #0]
 80086bc:	4619      	mov	r1, r3
 80086be:	6878      	ldr	r0, [r7, #4]
 80086c0:	f005 fd19 	bl	800e0f6 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	7b1b      	ldrb	r3, [r3, #12]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d00e      	beq.n	80086f0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	7b1b      	ldrb	r3, [r3, #12]
 80086d6:	4619      	mov	r1, r3
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f005 fcda 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	7b1b      	ldrb	r3, [r3, #12]
 80086e2:	4619      	mov	r1, r3
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f005 fd06 	bl	800e0f6 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	2200      	movs	r2, #0
 80086ee:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	7b5b      	ldrb	r3, [r3, #13]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d00e      	beq.n	8008716 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	7b5b      	ldrb	r3, [r3, #13]
 80086fc:	4619      	mov	r1, r3
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f005 fcc7 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7b5b      	ldrb	r3, [r3, #13]
 8008708:	4619      	mov	r1, r3
 800870a:	6878      	ldr	r0, [r7, #4]
 800870c:	f005 fcf3 	bl	800e0f6 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2200      	movs	r2, #0
 8008714:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800871c:	69db      	ldr	r3, [r3, #28]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d00b      	beq.n	800873a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008728:	69db      	ldr	r3, [r3, #28]
 800872a:	4618      	mov	r0, r3
 800872c:	f006 ff42 	bl	800f5b4 <free>
    phost->pActiveClass->pData = 0U;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008736:	2200      	movs	r2, #0
 8008738:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800873a:	2300      	movs	r3, #0
}
 800873c:	4618      	mov	r0, r3
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008752:	69db      	ldr	r3, [r3, #28]
 8008754:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3340      	adds	r3, #64	@ 0x40
 800875a:	4619      	mov	r1, r3
 800875c:	6878      	ldr	r0, [r7, #4]
 800875e:	f000 f8b2 	bl	80088c6 <GetLineCoding>
 8008762:	4603      	mov	r3, r0
 8008764:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008766:	7afb      	ldrb	r3, [r7, #11]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d105      	bne.n	8008778 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8008772:	2102      	movs	r1, #2
 8008774:	6878      	ldr	r0, [r7, #4]
 8008776:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008778:	7afb      	ldrb	r3, [r7, #11]
}
 800877a:	4618      	mov	r0, r3
 800877c:	3710      	adds	r7, #16
 800877e:	46bd      	mov	sp, r7
 8008780:	bd80      	pop	{r7, pc}
	...

08008784 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8008784:	b580      	push	{r7, lr}
 8008786:	b084      	sub	sp, #16
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800878c:	2301      	movs	r3, #1
 800878e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008790:	2300      	movs	r3, #0
 8008792:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800879a:	69db      	ldr	r3, [r3, #28]
 800879c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800879e:	68bb      	ldr	r3, [r7, #8]
 80087a0:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80087a4:	2b04      	cmp	r3, #4
 80087a6:	d877      	bhi.n	8008898 <USBH_CDC_Process+0x114>
 80087a8:	a201      	add	r2, pc, #4	@ (adr r2, 80087b0 <USBH_CDC_Process+0x2c>)
 80087aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ae:	bf00      	nop
 80087b0:	080087c5 	.word	0x080087c5
 80087b4:	080087cb 	.word	0x080087cb
 80087b8:	080087fb 	.word	0x080087fb
 80087bc:	0800886f 	.word	0x0800886f
 80087c0:	0800887d 	.word	0x0800887d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80087c4:	2300      	movs	r3, #0
 80087c6:	73fb      	strb	r3, [r7, #15]
      break;
 80087c8:	e06d      	b.n	80088a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80087ce:	4619      	mov	r1, r3
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	f000 f897 	bl	8008904 <SetLineCoding>
 80087d6:	4603      	mov	r3, r0
 80087d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80087da:	7bbb      	ldrb	r3, [r7, #14]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d104      	bne.n	80087ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	2202      	movs	r2, #2
 80087e4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80087e8:	e058      	b.n	800889c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80087ea:	7bbb      	ldrb	r3, [r7, #14]
 80087ec:	2b01      	cmp	r3, #1
 80087ee:	d055      	beq.n	800889c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	2204      	movs	r2, #4
 80087f4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80087f8:	e050      	b.n	800889c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80087fa:	68bb      	ldr	r3, [r7, #8]
 80087fc:	3340      	adds	r3, #64	@ 0x40
 80087fe:	4619      	mov	r1, r3
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	f000 f860 	bl	80088c6 <GetLineCoding>
 8008806:	4603      	mov	r3, r0
 8008808:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800880a:	7bbb      	ldrb	r3, [r7, #14]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d126      	bne.n	800885e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2200      	movs	r2, #0
 8008814:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008818:	68bb      	ldr	r3, [r7, #8]
 800881a:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008822:	791b      	ldrb	r3, [r3, #4]
 8008824:	429a      	cmp	r2, r3
 8008826:	d13b      	bne.n	80088a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008828:	68bb      	ldr	r3, [r7, #8]
 800882a:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008832:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008834:	429a      	cmp	r2, r3
 8008836:	d133      	bne.n	80088a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008838:	68bb      	ldr	r3, [r7, #8]
 800883a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008842:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008844:	429a      	cmp	r2, r3
 8008846:	d12b      	bne.n	80088a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008848:	68bb      	ldr	r3, [r7, #8]
 800884a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800884c:	68bb      	ldr	r3, [r7, #8]
 800884e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008850:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008852:	429a      	cmp	r2, r3
 8008854:	d124      	bne.n	80088a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f000 f9ef 	bl	8008c3a <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800885c:	e020      	b.n	80088a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800885e:	7bbb      	ldrb	r3, [r7, #14]
 8008860:	2b01      	cmp	r3, #1
 8008862:	d01d      	beq.n	80088a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	2204      	movs	r2, #4
 8008868:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800886c:	e018      	b.n	80088a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800886e:	6878      	ldr	r0, [r7, #4]
 8008870:	f000 f8fe 	bl	8008a70 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8008874:	6878      	ldr	r0, [r7, #4]
 8008876:	f000 f971 	bl	8008b5c <CDC_ProcessReception>
      break;
 800887a:	e014      	b.n	80088a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f004 fe27 	bl	800d4d2 <USBH_ClrFeature>
 8008884:	4603      	mov	r3, r0
 8008886:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008888:	7bbb      	ldrb	r3, [r7, #14]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10a      	bne.n	80088a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800888e:	68bb      	ldr	r3, [r7, #8]
 8008890:	2200      	movs	r2, #0
 8008892:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8008896:	e005      	b.n	80088a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8008898:	bf00      	nop
 800889a:	e004      	b.n	80088a6 <USBH_CDC_Process+0x122>
      break;
 800889c:	bf00      	nop
 800889e:	e002      	b.n	80088a6 <USBH_CDC_Process+0x122>
      break;
 80088a0:	bf00      	nop
 80088a2:	e000      	b.n	80088a6 <USBH_CDC_Process+0x122>
      break;
 80088a4:	bf00      	nop

  }

  return status;
 80088a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80088a8:	4618      	mov	r0, r3
 80088aa:	3710      	adds	r7, #16
 80088ac:	46bd      	mov	sp, r7
 80088ae:	bd80      	pop	{r7, pc}

080088b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b083      	sub	sp, #12
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80088b8:	2300      	movs	r3, #0
}
 80088ba:	4618      	mov	r0, r3
 80088bc:	370c      	adds	r7, #12
 80088be:	46bd      	mov	sp, r7
 80088c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c4:	4770      	bx	lr

080088c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80088c6:	b580      	push	{r7, lr}
 80088c8:	b082      	sub	sp, #8
 80088ca:	af00      	add	r7, sp, #0
 80088cc:	6078      	str	r0, [r7, #4]
 80088ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	22a1      	movs	r2, #161	@ 0xa1
 80088d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	2221      	movs	r2, #33	@ 0x21
 80088da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2200      	movs	r2, #0
 80088e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2200      	movs	r2, #0
 80088e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	2207      	movs	r2, #7
 80088ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	2207      	movs	r2, #7
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f005 f922 	bl	800db3e <USBH_CtlReq>
 80088fa:	4603      	mov	r3, r0
}
 80088fc:	4618      	mov	r0, r3
 80088fe:	3708      	adds	r7, #8
 8008900:	46bd      	mov	sp, r7
 8008902:	bd80      	pop	{r7, pc}

08008904 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2221      	movs	r2, #33	@ 0x21
 8008912:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2207      	movs	r2, #7
 800892a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	2207      	movs	r2, #7
 8008930:	4619      	mov	r1, r3
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f005 f903 	bl	800db3e <USBH_CtlReq>
 8008938:	4603      	mov	r3, r0
}
 800893a:	4618      	mov	r0, r3
 800893c:	3708      	adds	r7, #8
 800893e:	46bd      	mov	sp, r7
 8008940:	bd80      	pop	{r7, pc}

08008942 <USBH_CDC_SetLineCoding>:
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_SetLineCoding(USBH_HandleTypeDef *phost,
                                          CDC_LineCodingTypeDef *linecoding)
{
 8008942:	b480      	push	{r7}
 8008944:	b085      	sub	sp, #20
 8008946:	af00      	add	r7, sp, #0
 8008948:	6078      	str	r0, [r7, #4]
 800894a:	6039      	str	r1, [r7, #0]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008952:	69db      	ldr	r3, [r3, #28]
 8008954:	60fb      	str	r3, [r7, #12]

  if (phost->gState == HOST_CLASS)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b0b      	cmp	r3, #11
 800895e:	d106      	bne.n	800896e <USBH_CDC_SetLineCoding+0x2c>
  {
    CDC_Handle->state = CDC_SET_LINE_CODING_STATE;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    CDC_Handle->pUserLineCoding = linecoding;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	649a      	str	r2, [r3, #72]	@ 0x48
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return USBH_OK;
 800896e:	2300      	movs	r3, #0
}
 8008970:	4618      	mov	r0, r3
 8008972:	3714      	adds	r7, #20
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <USBH_CDC_GetLastReceivedDataSize>:
  * @brief  This function return last received data size
  * @param  None
  * @retval None
  */
uint16_t USBH_CDC_GetLastReceivedDataSize(USBH_HandleTypeDef *phost)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b084      	sub	sp, #16
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  uint32_t dataSize;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800898a:	69db      	ldr	r3, [r3, #28]
 800898c:	60bb      	str	r3, [r7, #8]

  if (phost->gState == HOST_CLASS)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	781b      	ldrb	r3, [r3, #0]
 8008992:	b2db      	uxtb	r3, r3
 8008994:	2b0b      	cmp	r3, #11
 8008996:	d107      	bne.n	80089a8 <USBH_CDC_GetLastReceivedDataSize+0x2c>
  {
    dataSize = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008998:	68bb      	ldr	r3, [r7, #8]
 800899a:	7b1b      	ldrb	r3, [r3, #12]
 800899c:	4619      	mov	r1, r3
 800899e:	6878      	ldr	r0, [r7, #4]
 80089a0:	f006 fc8a 	bl	800f2b8 <USBH_LL_GetLastXferSize>
 80089a4:	60f8      	str	r0, [r7, #12]
 80089a6:	e001      	b.n	80089ac <USBH_CDC_GetLastReceivedDataSize+0x30>
  }
  else
  {
    dataSize =  0U;
 80089a8:	2300      	movs	r3, #0
 80089aa:	60fb      	str	r3, [r7, #12]
  }

  return (uint16_t)dataSize;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	b29b      	uxth	r3, r3
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3710      	adds	r7, #16
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBH_CDC_Transmit>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_Transmit(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b087      	sub	sp, #28
 80089bc:	af00      	add	r7, sp, #0
 80089be:	60f8      	str	r0, [r7, #12]
 80089c0:	60b9      	str	r1, [r7, #8]
 80089c2:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 80089c4:	2301      	movs	r3, #1
 80089c6:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80089ce:	69db      	ldr	r3, [r3, #28]
 80089d0:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 80089d2:	693b      	ldr	r3, [r7, #16]
 80089d4:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d004      	beq.n	80089e6 <USBH_CDC_Transmit+0x2e>
 80089dc:	693b      	ldr	r3, [r7, #16]
 80089de:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80089e2:	2b03      	cmp	r3, #3
 80089e4:	d10f      	bne.n	8008a06 <USBH_CDC_Transmit+0x4e>
  {
    CDC_Handle->pTxData = pbuff;
 80089e6:	693b      	ldr	r3, [r7, #16]
 80089e8:	68ba      	ldr	r2, [r7, #8]
 80089ea:	61da      	str	r2, [r3, #28]
    CDC_Handle->TxDataLength = length;
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	625a      	str	r2, [r3, #36]	@ 0x24
    CDC_Handle->state = CDC_TRANSFER_DATA;
 80089f2:	693b      	ldr	r3, [r7, #16]
 80089f4:	2203      	movs	r2, #3
 80089f6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80089fa:	693b      	ldr	r3, [r7, #16]
 80089fc:	2201      	movs	r2, #1
 80089fe:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
    Status = USBH_OK;
 8008a02:	2300      	movs	r3, #0
 8008a04:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8008a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a08:	4618      	mov	r0, r3
 8008a0a:	371c      	adds	r7, #28
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a12:	4770      	bx	lr

08008a14 <USBH_CDC_Receive>:
  * @brief  This function prepares the state before issuing the class specific commands
  * @param  None
  * @retval None
  */
USBH_StatusTypeDef USBH_CDC_Receive(USBH_HandleTypeDef *phost, uint8_t *pbuff, uint32_t length)
{
 8008a14:	b480      	push	{r7}
 8008a16:	b087      	sub	sp, #28
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	60f8      	str	r0, [r7, #12]
 8008a1c:	60b9      	str	r1, [r7, #8]
 8008a1e:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008a20:	2301      	movs	r3, #1
 8008a22:	75fb      	strb	r3, [r7, #23]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008a2a:	69db      	ldr	r3, [r3, #28]
 8008a2c:	613b      	str	r3, [r7, #16]

  if ((CDC_Handle->state == CDC_IDLE_STATE) || (CDC_Handle->state == CDC_TRANSFER_DATA))
 8008a2e:	693b      	ldr	r3, [r7, #16]
 8008a30:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d004      	beq.n	8008a42 <USBH_CDC_Receive+0x2e>
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008a3e:	2b03      	cmp	r3, #3
 8008a40:	d10f      	bne.n	8008a62 <USBH_CDC_Receive+0x4e>
  {
    CDC_Handle->pRxData = pbuff;
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	68ba      	ldr	r2, [r7, #8]
 8008a46:	621a      	str	r2, [r3, #32]
    CDC_Handle->RxDataLength = length;
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	687a      	ldr	r2, [r7, #4]
 8008a4c:	629a      	str	r2, [r3, #40]	@ 0x28
    CDC_Handle->state = CDC_TRANSFER_DATA;
 8008a4e:	693b      	ldr	r3, [r7, #16]
 8008a50:	2203      	movs	r2, #3
 8008a52:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008a56:	693b      	ldr	r3, [r7, #16]
 8008a58:	2203      	movs	r2, #3
 8008a5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
    Status = USBH_OK;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	75fb      	strb	r3, [r7, #23]
#else
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }
  return Status;
 8008a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	371c      	adds	r7, #28
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6e:	4770      	bx	lr

08008a70 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8008a70:	b580      	push	{r7, lr}
 8008a72:	b086      	sub	sp, #24
 8008a74:	af02      	add	r7, sp, #8
 8008a76:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008a7e:	69db      	ldr	r3, [r3, #28]
 8008a80:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a82:	2300      	movs	r3, #0
 8008a84:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d002      	beq.n	8008a96 <CDC_ProcessTransmission+0x26>
 8008a90:	2b02      	cmp	r3, #2
 8008a92:	d023      	beq.n	8008adc <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8008a94:	e05e      	b.n	8008b54 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9a:	68fa      	ldr	r2, [r7, #12]
 8008a9c:	8b12      	ldrh	r2, [r2, #24]
 8008a9e:	4293      	cmp	r3, r2
 8008aa0:	d90b      	bls.n	8008aba <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	69d9      	ldr	r1, [r3, #28]
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	8b1a      	ldrh	r2, [r3, #24]
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	7b5b      	ldrb	r3, [r3, #13]
 8008aae:	2001      	movs	r0, #1
 8008ab0:	9000      	str	r0, [sp, #0]
 8008ab2:	6878      	ldr	r0, [r7, #4]
 8008ab4:	f005 fa51 	bl	800df5a <USBH_BulkSendData>
 8008ab8:	e00b      	b.n	8008ad2 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008ac2:	b29a      	uxth	r2, r3
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	7b5b      	ldrb	r3, [r3, #13]
 8008ac8:	2001      	movs	r0, #1
 8008aca:	9000      	str	r0, [sp, #0]
 8008acc:	6878      	ldr	r0, [r7, #4]
 8008ace:	f005 fa44 	bl	800df5a <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	2202      	movs	r2, #2
 8008ad6:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008ada:	e03b      	b.n	8008b54 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	7b5b      	ldrb	r3, [r3, #13]
 8008ae0:	4619      	mov	r1, r3
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	f006 fc7a 	bl	800f3dc <USBH_LL_GetURBState>
 8008ae8:	4603      	mov	r3, r0
 8008aea:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008aec:	7afb      	ldrb	r3, [r7, #11]
 8008aee:	2b01      	cmp	r3, #1
 8008af0:	d128      	bne.n	8008b44 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008af6:	68fa      	ldr	r2, [r7, #12]
 8008af8:	8b12      	ldrh	r2, [r2, #24]
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d90e      	bls.n	8008b1c <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b02:	68fa      	ldr	r2, [r7, #12]
 8008b04:	8b12      	ldrh	r2, [r2, #24]
 8008b06:	1a9a      	subs	r2, r3, r2
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	69db      	ldr	r3, [r3, #28]
 8008b10:	68fa      	ldr	r2, [r7, #12]
 8008b12:	8b12      	ldrh	r2, [r2, #24]
 8008b14:	441a      	add	r2, r3
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	61da      	str	r2, [r3, #28]
 8008b1a:	e002      	b.n	8008b22 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008b1c:	68fb      	ldr	r3, [r7, #12]
 8008b1e:	2200      	movs	r2, #0
 8008b20:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d004      	beq.n	8008b34 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008b32:	e00e      	b.n	8008b52 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f868 	bl	8008c12 <USBH_CDC_TransmitCallback>
      break;
 8008b42:	e006      	b.n	8008b52 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8008b44:	7afb      	ldrb	r3, [r7, #11]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	d103      	bne.n	8008b52 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008b52:	bf00      	nop
  }
}
 8008b54:	bf00      	nop
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}

08008b5c <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b086      	sub	sp, #24
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008b6a:	69db      	ldr	r3, [r3, #28]
 8008b6c:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8008b72:	697b      	ldr	r3, [r7, #20]
 8008b74:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008b78:	2b03      	cmp	r3, #3
 8008b7a:	d002      	beq.n	8008b82 <CDC_ProcessReception+0x26>
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d00e      	beq.n	8008b9e <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8008b80:	e043      	b.n	8008c0a <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	6a19      	ldr	r1, [r3, #32]
 8008b86:	697b      	ldr	r3, [r7, #20]
 8008b88:	8b5a      	ldrh	r2, [r3, #26]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	7b1b      	ldrb	r3, [r3, #12]
 8008b8e:	6878      	ldr	r0, [r7, #4]
 8008b90:	f005 fa08 	bl	800dfa4 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8008b94:	697b      	ldr	r3, [r7, #20]
 8008b96:	2204      	movs	r2, #4
 8008b98:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008b9c:	e035      	b.n	8008c0a <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008b9e:	697b      	ldr	r3, [r7, #20]
 8008ba0:	7b1b      	ldrb	r3, [r3, #12]
 8008ba2:	4619      	mov	r1, r3
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	f006 fc19 	bl	800f3dc <USBH_LL_GetURBState>
 8008baa:	4603      	mov	r3, r0
 8008bac:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008bae:	7cfb      	ldrb	r3, [r7, #19]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d129      	bne.n	8008c08 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8008bb4:	697b      	ldr	r3, [r7, #20]
 8008bb6:	7b1b      	ldrb	r3, [r3, #12]
 8008bb8:	4619      	mov	r1, r3
 8008bba:	6878      	ldr	r0, [r7, #4]
 8008bbc:	f006 fb7c 	bl	800f2b8 <USBH_LL_GetLastXferSize>
 8008bc0:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008bc2:	697b      	ldr	r3, [r7, #20]
 8008bc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bc6:	68fa      	ldr	r2, [r7, #12]
 8008bc8:	429a      	cmp	r2, r3
 8008bca:	d016      	beq.n	8008bfa <CDC_ProcessReception+0x9e>
 8008bcc:	697b      	ldr	r3, [r7, #20]
 8008bce:	8b5b      	ldrh	r3, [r3, #26]
 8008bd0:	461a      	mov	r2, r3
 8008bd2:	68fb      	ldr	r3, [r7, #12]
 8008bd4:	4293      	cmp	r3, r2
 8008bd6:	d110      	bne.n	8008bfa <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	1ad2      	subs	r2, r2, r3
 8008be0:	697b      	ldr	r3, [r7, #20]
 8008be2:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	6a1a      	ldr	r2, [r3, #32]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	441a      	add	r2, r3
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008bf0:	697b      	ldr	r3, [r7, #20]
 8008bf2:	2203      	movs	r2, #3
 8008bf4:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008bf8:	e006      	b.n	8008c08 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008bfa:	697b      	ldr	r3, [r7, #20]
 8008bfc:	2200      	movs	r2, #0
 8008bfe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008c02:	6878      	ldr	r0, [r7, #4]
 8008c04:	f000 f80f 	bl	8008c26 <USBH_CDC_ReceiveCallback>
      break;
 8008c08:	bf00      	nop
  }
}
 8008c0a:	bf00      	nop
 8008c0c:	3718      	adds	r7, #24
 8008c0e:	46bd      	mov	sp, r7
 8008c10:	bd80      	pop	{r7, pc}

08008c12 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008c12:	b480      	push	{r7}
 8008c14:	b083      	sub	sp, #12
 8008c16:	af00      	add	r7, sp, #0
 8008c18:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c1a:	bf00      	nop
 8008c1c:	370c      	adds	r7, #12
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c24:	4770      	bx	lr

08008c26 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008c26:	b480      	push	{r7}
 8008c28:	b083      	sub	sp, #12
 8008c2a:	af00      	add	r7, sp, #0
 8008c2c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c2e:	bf00      	nop
 8008c30:	370c      	adds	r7, #12
 8008c32:	46bd      	mov	sp, r7
 8008c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c38:	4770      	bx	lr

08008c3a <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008c3a:	b480      	push	{r7}
 8008c3c:	b083      	sub	sp, #12
 8008c3e:	af00      	add	r7, sp, #0
 8008c40:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008c42:	bf00      	nop
 8008c44:	370c      	adds	r7, #12
 8008c46:	46bd      	mov	sp, r7
 8008c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4c:	4770      	bx	lr
	...

08008c50 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008c50:	b590      	push	{r4, r7, lr}
 8008c52:	b08b      	sub	sp, #44	@ 0x2c
 8008c54:	af04      	add	r7, sp, #16
 8008c56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 8008c58:	2300      	movs	r3, #0
 8008c5a:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008c62:	7919      	ldrb	r1, [r3, #4]
 8008c64:	23ff      	movs	r3, #255	@ 0xff
 8008c66:	2201      	movs	r2, #1
 8008c68:	6878      	ldr	r0, [r7, #4]
 8008c6a:	f003 fdfd 	bl	800c868 <USBH_FindInterface>
 8008c6e:	4603      	mov	r3, r0
 8008c70:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008c72:	7dbb      	ldrb	r3, [r7, #22]
 8008c74:	2bff      	cmp	r3, #255	@ 0xff
 8008c76:	d002      	beq.n	8008c7e <USBH_HID_InterfaceInit+0x2e>
 8008c78:	7dbb      	ldrb	r3, [r7, #22]
 8008c7a:	2b09      	cmp	r3, #9
 8008c7c:	d901      	bls.n	8008c82 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008c7e:	2302      	movs	r3, #2
 8008c80:	e122      	b.n	8008ec8 <USBH_HID_InterfaceInit+0x278>
  }

  status = USBH_SelectInterface(phost, interface);
 8008c82:	7dbb      	ldrb	r3, [r7, #22]
 8008c84:	4619      	mov	r1, r3
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f003 fdd2 	bl	800c830 <USBH_SelectInterface>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8008c90:	7d7b      	ldrb	r3, [r7, #21]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d001      	beq.n	8008c9a <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8008c96:	2302      	movs	r3, #2
 8008c98:	e116      	b.n	8008ec8 <USBH_HID_InterfaceInit+0x278>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 8008ca0:	2034      	movs	r0, #52	@ 0x34
 8008ca2:	f006 fc7f 	bl	800f5a4 <malloc>
 8008ca6:	4603      	mov	r3, r0
 8008ca8:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008cb0:	69db      	ldr	r3, [r3, #28]
 8008cb2:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8008cb4:	693b      	ldr	r3, [r7, #16]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d101      	bne.n	8008cbe <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8008cba:	2302      	movs	r3, #2
 8008cbc:	e104      	b.n	8008ec8 <USBH_HID_InterfaceInit+0x278>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8008cbe:	2234      	movs	r2, #52	@ 0x34
 8008cc0:	2100      	movs	r1, #0
 8008cc2:	6938      	ldr	r0, [r7, #16]
 8008cc4:	f006 ff6a 	bl	800fb9c <memset>

  HID_Handle->state = USBH_HID_ERROR;
 8008cc8:	693b      	ldr	r3, [r7, #16]
 8008cca:	2207      	movs	r2, #7
 8008ccc:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8008cce:	7dbb      	ldrb	r3, [r7, #22]
 8008cd0:	687a      	ldr	r2, [r7, #4]
 8008cd2:	2132      	movs	r1, #50	@ 0x32
 8008cd4:	fb01 f303 	mul.w	r3, r1, r3
 8008cd8:	4413      	add	r3, r2
 8008cda:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8008cde:	781b      	ldrb	r3, [r3, #0]
 8008ce0:	2b01      	cmp	r3, #1
 8008ce2:	d103      	bne.n	8008cec <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	4a7a      	ldr	r2, [pc, #488]	@ (8008ed0 <USBH_HID_InterfaceInit+0x280>)
 8008ce8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008cea:	e010      	b.n	8008d0e <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8008cec:	7dbb      	ldrb	r3, [r7, #22]
 8008cee:	687a      	ldr	r2, [r7, #4]
 8008cf0:	2132      	movs	r1, #50	@ 0x32
 8008cf2:	fb01 f303 	mul.w	r3, r1, r3
 8008cf6:	4413      	add	r3, r2
 8008cf8:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8008cfc:	781b      	ldrb	r3, [r3, #0]
 8008cfe:	2b02      	cmp	r3, #2
 8008d00:	d103      	bne.n	8008d0a <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	4a73      	ldr	r2, [pc, #460]	@ (8008ed4 <USBH_HID_InterfaceInit+0x284>)
 8008d06:	631a      	str	r2, [r3, #48]	@ 0x30
 8008d08:	e001      	b.n	8008d0e <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e0dc      	b.n	8008ec8 <USBH_HID_InterfaceInit+0x278>
  }

  HID_Handle->state     = USBH_HID_INIT;
 8008d0e:	693b      	ldr	r3, [r7, #16]
 8008d10:	2200      	movs	r2, #0
 8008d12:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 8008d14:	693b      	ldr	r3, [r7, #16]
 8008d16:	2200      	movs	r2, #0
 8008d18:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008d1a:	7dbb      	ldrb	r3, [r7, #22]
 8008d1c:	687a      	ldr	r2, [r7, #4]
 8008d1e:	2132      	movs	r1, #50	@ 0x32
 8008d20:	fb01 f303 	mul.w	r3, r1, r3
 8008d24:	4413      	add	r3, r2
 8008d26:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008d2a:	781a      	ldrb	r2, [r3, #0]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008d30:	7dbb      	ldrb	r3, [r7, #22]
 8008d32:	687a      	ldr	r2, [r7, #4]
 8008d34:	2132      	movs	r1, #50	@ 0x32
 8008d36:	fb01 f303 	mul.w	r3, r1, r3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008d40:	881a      	ldrh	r2, [r3, #0]
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8008d46:	7dbb      	ldrb	r3, [r7, #22]
 8008d48:	687a      	ldr	r2, [r7, #4]
 8008d4a:	2132      	movs	r1, #50	@ 0x32
 8008d4c:	fb01 f303 	mul.w	r3, r1, r3
 8008d50:	4413      	add	r3, r2
 8008d52:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	461a      	mov	r2, r3
 8008d5a:	693b      	ldr	r3, [r7, #16]
 8008d5c:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 8008d5e:	693b      	ldr	r3, [r7, #16]
 8008d60:	8b9b      	ldrh	r3, [r3, #28]
 8008d62:	2b09      	cmp	r3, #9
 8008d64:	d802      	bhi.n	8008d6c <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	220a      	movs	r2, #10
 8008d6a:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8008d6c:	7dbb      	ldrb	r3, [r7, #22]
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	2132      	movs	r1, #50	@ 0x32
 8008d72:	fb01 f303 	mul.w	r3, r1, r3
 8008d76:	4413      	add	r3, r2
 8008d78:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8008d7c:	781b      	ldrb	r3, [r3, #0]
 8008d7e:	2b05      	cmp	r3, #5
 8008d80:	bf28      	it	cs
 8008d82:	2305      	movcs	r3, #5
 8008d84:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8008d86:	2300      	movs	r3, #0
 8008d88:	75fb      	strb	r3, [r7, #23]
 8008d8a:	e097      	b.n	8008ebc <USBH_HID_InterfaceInit+0x26c>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8008d8c:	7dbb      	ldrb	r3, [r7, #22]
 8008d8e:	7df9      	ldrb	r1, [r7, #23]
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	3101      	adds	r1, #1
 8008d94:	00c9      	lsls	r1, r1, #3
 8008d96:	2032      	movs	r0, #50	@ 0x32
 8008d98:	fb00 f303 	mul.w	r3, r0, r3
 8008d9c:	440b      	add	r3, r1
 8008d9e:	4413      	add	r3, r2
 8008da0:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8008da4:	781b      	ldrb	r3, [r3, #0]
 8008da6:	b25b      	sxtb	r3, r3
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	da42      	bge.n	8008e32 <USBH_HID_InterfaceInit+0x1e2>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8008dac:	7dbb      	ldrb	r3, [r7, #22]
 8008dae:	7df9      	ldrb	r1, [r7, #23]
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	3101      	adds	r1, #1
 8008db4:	00c9      	lsls	r1, r1, #3
 8008db6:	2032      	movs	r0, #50	@ 0x32
 8008db8:	fb00 f303 	mul.w	r3, r0, r3
 8008dbc:	440b      	add	r3, r1
 8008dbe:	4413      	add	r3, r2
 8008dc0:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8008dc4:	781a      	ldrb	r2, [r3, #0]
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	791b      	ldrb	r3, [r3, #4]
 8008dce:	4619      	mov	r1, r3
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f005 f96e 	bl	800e0b2 <USBH_AllocPipe>
 8008dd6:	4603      	mov	r3, r0
 8008dd8:	461a      	mov	r2, r3
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8008dde:	7dbb      	ldrb	r3, [r7, #22]
 8008de0:	7df9      	ldrb	r1, [r7, #23]
 8008de2:	687a      	ldr	r2, [r7, #4]
 8008de4:	3101      	adds	r1, #1
 8008de6:	00c9      	lsls	r1, r1, #3
 8008de8:	2032      	movs	r0, #50	@ 0x32
 8008dea:	fb00 f303 	mul.w	r3, r0, r3
 8008dee:	440b      	add	r3, r1
 8008df0:	4413      	add	r3, r2
 8008df2:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8008df6:	881b      	ldrh	r3, [r3, #0]
 8008df8:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8008dfa:	693b      	ldr	r3, [r7, #16]
 8008dfc:	7859      	ldrb	r1, [r3, #1]
 8008dfe:	693b      	ldr	r3, [r7, #16]
 8008e00:	7918      	ldrb	r0, [r3, #4]
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e0e:	89ba      	ldrh	r2, [r7, #12]
 8008e10:	9202      	str	r2, [sp, #8]
 8008e12:	2203      	movs	r2, #3
 8008e14:	9201      	str	r2, [sp, #4]
 8008e16:	9300      	str	r3, [sp, #0]
 8008e18:	4623      	mov	r3, r4
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f005 f919 	bl	800e054 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8008e22:	693b      	ldr	r3, [r7, #16]
 8008e24:	785b      	ldrb	r3, [r3, #1]
 8008e26:	2200      	movs	r2, #0
 8008e28:	4619      	mov	r1, r3
 8008e2a:	6878      	ldr	r0, [r7, #4]
 8008e2c:	f006 fb00 	bl	800f430 <USBH_LL_SetToggle>
 8008e30:	e041      	b.n	8008eb6 <USBH_HID_InterfaceInit+0x266>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8008e32:	7dbb      	ldrb	r3, [r7, #22]
 8008e34:	7df9      	ldrb	r1, [r7, #23]
 8008e36:	687a      	ldr	r2, [r7, #4]
 8008e38:	3101      	adds	r1, #1
 8008e3a:	00c9      	lsls	r1, r1, #3
 8008e3c:	2032      	movs	r0, #50	@ 0x32
 8008e3e:	fb00 f303 	mul.w	r3, r0, r3
 8008e42:	440b      	add	r3, r1
 8008e44:	4413      	add	r3, r2
 8008e46:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8008e4a:	781a      	ldrb	r2, [r3, #0]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8008e50:	693b      	ldr	r3, [r7, #16]
 8008e52:	78db      	ldrb	r3, [r3, #3]
 8008e54:	4619      	mov	r1, r3
 8008e56:	6878      	ldr	r0, [r7, #4]
 8008e58:	f005 f92b 	bl	800e0b2 <USBH_AllocPipe>
 8008e5c:	4603      	mov	r3, r0
 8008e5e:	461a      	mov	r2, r3
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8008e64:	7dbb      	ldrb	r3, [r7, #22]
 8008e66:	7df9      	ldrb	r1, [r7, #23]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	3101      	adds	r1, #1
 8008e6c:	00c9      	lsls	r1, r1, #3
 8008e6e:	2032      	movs	r0, #50	@ 0x32
 8008e70:	fb00 f303 	mul.w	r3, r0, r3
 8008e74:	440b      	add	r3, r1
 8008e76:	4413      	add	r3, r2
 8008e78:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8008e7c:	881b      	ldrh	r3, [r3, #0]
 8008e7e:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	7819      	ldrb	r1, [r3, #0]
 8008e84:	693b      	ldr	r3, [r7, #16]
 8008e86:	78d8      	ldrb	r0, [r3, #3]
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e94:	89ba      	ldrh	r2, [r7, #12]
 8008e96:	9202      	str	r2, [sp, #8]
 8008e98:	2203      	movs	r2, #3
 8008e9a:	9201      	str	r2, [sp, #4]
 8008e9c:	9300      	str	r3, [sp, #0]
 8008e9e:	4623      	mov	r3, r4
 8008ea0:	4602      	mov	r2, r0
 8008ea2:	6878      	ldr	r0, [r7, #4]
 8008ea4:	f005 f8d6 	bl	800e054 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8008ea8:	693b      	ldr	r3, [r7, #16]
 8008eaa:	781b      	ldrb	r3, [r3, #0]
 8008eac:	2200      	movs	r2, #0
 8008eae:	4619      	mov	r1, r3
 8008eb0:	6878      	ldr	r0, [r7, #4]
 8008eb2:	f006 fabd 	bl	800f430 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8008eb6:	7dfb      	ldrb	r3, [r7, #23]
 8008eb8:	3301      	adds	r3, #1
 8008eba:	75fb      	strb	r3, [r7, #23]
 8008ebc:	7dfa      	ldrb	r2, [r7, #23]
 8008ebe:	7bfb      	ldrb	r3, [r7, #15]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	f4ff af63 	bcc.w	8008d8c <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8008ec6:	2300      	movs	r3, #0
}
 8008ec8:	4618      	mov	r0, r3
 8008eca:	371c      	adds	r7, #28
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	bd90      	pop	{r4, r7, pc}
 8008ed0:	08009525 	.word	0x08009525
 8008ed4:	080095cd 	.word	0x080095cd

08008ed8 <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008ed8:	b580      	push	{r7, lr}
 8008eda:	b084      	sub	sp, #16
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008ee6:	69db      	ldr	r3, [r3, #28]
 8008ee8:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	785b      	ldrb	r3, [r3, #1]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d00e      	beq.n	8008f10 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	785b      	ldrb	r3, [r3, #1]
 8008ef6:	4619      	mov	r1, r3
 8008ef8:	6878      	ldr	r0, [r7, #4]
 8008efa:	f005 f8ca 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	785b      	ldrb	r3, [r3, #1]
 8008f02:	4619      	mov	r1, r3
 8008f04:	6878      	ldr	r0, [r7, #4]
 8008f06:	f005 f8f6 	bl	800e0f6 <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	781b      	ldrb	r3, [r3, #0]
 8008f14:	2b00      	cmp	r3, #0
 8008f16:	d00e      	beq.n	8008f36 <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	781b      	ldrb	r3, [r3, #0]
 8008f1c:	4619      	mov	r1, r3
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f005 f8b7 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	4619      	mov	r1, r3
 8008f2a:	6878      	ldr	r0, [r7, #4]
 8008f2c:	f005 f8e3 	bl	800e0f6 <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2200      	movs	r2, #0
 8008f34:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008f3c:	69db      	ldr	r3, [r3, #28]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d00b      	beq.n	8008f5a <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f006 fb32 	bl	800f5b4 <free>
    phost->pActiveClass->pData = 0U;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008f56:	2200      	movs	r2, #0
 8008f58:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8008f70:	2301      	movs	r3, #1
 8008f72:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008f7a:	69db      	ldr	r3, [r3, #28]
 8008f7c:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	795b      	ldrb	r3, [r3, #5]
 8008f82:	2b05      	cmp	r3, #5
 8008f84:	d860      	bhi.n	8009048 <USBH_HID_ClassRequest+0xe4>
 8008f86:	a201      	add	r2, pc, #4	@ (adr r2, 8008f8c <USBH_HID_ClassRequest+0x28>)
 8008f88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f8c:	08008fa5 	.word	0x08008fa5
 8008f90:	08009049 	.word	0x08009049
 8008f94:	08008fbf 	.word	0x08008fbf
 8008f98:	08008fa5 	.word	0x08008fa5
 8008f9c:	08008fe9 	.word	0x08008fe9
 8008fa0:	08009013 	.word	0x08009013
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8008fa4:	68bb      	ldr	r3, [r7, #8]
 8008fa6:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	331c      	adds	r3, #28
 8008fae:	4619      	mov	r1, r3
 8008fb0:	4610      	mov	r0, r2
 8008fb2:	f000 f9e1 	bl	8009378 <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	2202      	movs	r2, #2
 8008fba:	715a      	strb	r2, [r3, #5]

      break;
 8008fbc:	e04b      	b.n	8009056 <USBH_HID_ClassRequest+0xf2>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8008fbe:	68bb      	ldr	r3, [r7, #8]
 8008fc0:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008fc2:	4619      	mov	r1, r3
 8008fc4:	6878      	ldr	r0, [r7, #4]
 8008fc6:	f000 f93e 	bl	8009246 <USBH_HID_GetHIDReportDescriptor>
 8008fca:	4603      	mov	r3, r0
 8008fcc:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8008fce:	7bbb      	ldrb	r3, [r7, #14]
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d103      	bne.n	8008fdc <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 8008fd4:	68bb      	ldr	r3, [r7, #8]
 8008fd6:	2204      	movs	r2, #4
 8008fd8:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 8008fda:	e037      	b.n	800904c <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8008fdc:	7bbb      	ldrb	r3, [r7, #14]
 8008fde:	2b03      	cmp	r3, #3
 8008fe0:	d134      	bne.n	800904c <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8008fe2:	2302      	movs	r3, #2
 8008fe4:	73fb      	strb	r3, [r7, #15]
      break;
 8008fe6:	e031      	b.n	800904c <USBH_HID_ClassRequest+0xe8>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 8008fe8:	2200      	movs	r2, #0
 8008fea:	2100      	movs	r1, #0
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f949 	bl	8009284 <USBH_HID_SetIdle>
 8008ff2:	4603      	mov	r3, r0
 8008ff4:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d103      	bne.n	8009004 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	2205      	movs	r2, #5
 8009000:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8009002:	e025      	b.n	8009050 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8009004:	7bbb      	ldrb	r3, [r7, #14]
 8009006:	2b03      	cmp	r3, #3
 8009008:	d122      	bne.n	8009050 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	2205      	movs	r2, #5
 800900e:	715a      	strb	r2, [r3, #5]
      break;
 8009010:	e01e      	b.n	8009050 <USBH_HID_ClassRequest+0xec>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8009012:	2100      	movs	r1, #0
 8009014:	6878      	ldr	r0, [r7, #4]
 8009016:	f000 f989 	bl	800932c <USBH_HID_SetProtocol>
 800901a:	4603      	mov	r3, r0
 800901c:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 800901e:	7bbb      	ldrb	r3, [r7, #14]
 8009020:	2b00      	cmp	r3, #0
 8009022:	d10b      	bne.n	800903c <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 8009024:	68bb      	ldr	r3, [r7, #8]
 8009026:	2201      	movs	r2, #1
 8009028:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8009030:	2102      	movs	r1, #2
 8009032:	6878      	ldr	r0, [r7, #4]
 8009034:	4798      	blx	r3
        status = USBH_OK;
 8009036:	2300      	movs	r3, #0
 8009038:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800903a:	e00b      	b.n	8009054 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 800903c:	7bbb      	ldrb	r3, [r7, #14]
 800903e:	2b03      	cmp	r3, #3
 8009040:	d108      	bne.n	8009054 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	73fb      	strb	r3, [r7, #15]
      break;
 8009046:	e005      	b.n	8009054 <USBH_HID_ClassRequest+0xf0>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 8009048:	bf00      	nop
 800904a:	e004      	b.n	8009056 <USBH_HID_ClassRequest+0xf2>
      break;
 800904c:	bf00      	nop
 800904e:	e002      	b.n	8009056 <USBH_HID_ClassRequest+0xf2>
      break;
 8009050:	bf00      	nop
 8009052:	e000      	b.n	8009056 <USBH_HID_ClassRequest+0xf2>
      break;
 8009054:	bf00      	nop
  }

  return status;
 8009056:	7bfb      	ldrb	r3, [r7, #15]
}
 8009058:	4618      	mov	r0, r3
 800905a:	3710      	adds	r7, #16
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b088      	sub	sp, #32
 8009064:	af02      	add	r7, sp, #8
 8009066:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009068:	2300      	movs	r3, #0
 800906a:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	789b      	ldrb	r3, [r3, #2]
 800907a:	2b06      	cmp	r3, #6
 800907c:	f200 80b8 	bhi.w	80091f0 <USBH_HID_Process+0x190>
 8009080:	a201      	add	r2, pc, #4	@ (adr r2, 8009088 <USBH_HID_Process+0x28>)
 8009082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009086:	bf00      	nop
 8009088:	080090a5 	.word	0x080090a5
 800908c:	080090cb 	.word	0x080090cb
 8009090:	080091f1 	.word	0x080091f1
 8009094:	080091f1 	.word	0x080091f1
 8009098:	0800913b 	.word	0x0800913b
 800909c:	08009125 	.word	0x08009125
 80090a0:	08009169 	.word	0x08009169
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	4798      	blx	r3
 80090ac:	4603      	mov	r3, r0
 80090ae:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80090b0:	7dfb      	ldrb	r3, [r7, #23]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d103      	bne.n	80090be <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 80090b6:	693b      	ldr	r3, [r7, #16]
 80090b8:	2201      	movs	r2, #1
 80090ba:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090bc:	e09d      	b.n	80091fa <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	2207      	movs	r2, #7
 80090c2:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 80090c4:	2302      	movs	r3, #2
 80090c6:	75fb      	strb	r3, [r7, #23]
      break;
 80090c8:	e097      	b.n	80091fa <USBH_HID_Process+0x19a>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	695a      	ldr	r2, [r3, #20]
 80090ce:	693b      	ldr	r3, [r7, #16]
 80090d0:	8b1b      	ldrh	r3, [r3, #24]
 80090d2:	b2db      	uxtb	r3, r3
 80090d4:	9300      	str	r3, [sp, #0]
 80090d6:	4613      	mov	r3, r2
 80090d8:	2200      	movs	r2, #0
 80090da:	2101      	movs	r1, #1
 80090dc:	6878      	ldr	r0, [r7, #4]
 80090de:	f000 f8f9 	bl	80092d4 <USBH_HID_GetReport>
 80090e2:	4603      	mov	r3, r0
 80090e4:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 80090e6:	7dfb      	ldrb	r3, [r7, #23]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d103      	bne.n	80090f4 <USBH_HID_Process+0x94>
      {
        HID_Handle->state = USBH_HID_SYNC;
 80090ec:	693b      	ldr	r3, [r7, #16]
 80090ee:	2205      	movs	r2, #5
 80090f0:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80090f2:	e082      	b.n	80091fa <USBH_HID_Process+0x19a>
      else if (status == USBH_BUSY)
 80090f4:	7dfb      	ldrb	r3, [r7, #23]
 80090f6:	2b01      	cmp	r3, #1
 80090f8:	d105      	bne.n	8009106 <USBH_HID_Process+0xa6>
        HID_Handle->state = USBH_HID_IDLE;
 80090fa:	693b      	ldr	r3, [r7, #16]
 80090fc:	2201      	movs	r2, #1
 80090fe:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8009100:	2300      	movs	r3, #0
 8009102:	75fb      	strb	r3, [r7, #23]
      break;
 8009104:	e079      	b.n	80091fa <USBH_HID_Process+0x19a>
      else if (status == USBH_NOT_SUPPORTED)
 8009106:	7dfb      	ldrb	r3, [r7, #23]
 8009108:	2b03      	cmp	r3, #3
 800910a:	d105      	bne.n	8009118 <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_SYNC;
 800910c:	693b      	ldr	r3, [r7, #16]
 800910e:	2205      	movs	r2, #5
 8009110:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8009112:	2300      	movs	r3, #0
 8009114:	75fb      	strb	r3, [r7, #23]
      break;
 8009116:	e070      	b.n	80091fa <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	2207      	movs	r2, #7
 800911c:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 800911e:	2302      	movs	r3, #2
 8009120:	75fb      	strb	r3, [r7, #23]
      break;
 8009122:	e06a      	b.n	80091fa <USBH_HID_Process+0x19a>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800912a:	f003 0301 	and.w	r3, r3, #1
 800912e:	2b00      	cmp	r3, #0
 8009130:	d060      	beq.n	80091f4 <USBH_HID_Process+0x194>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 8009132:	693b      	ldr	r3, [r7, #16]
 8009134:	2204      	movs	r2, #4
 8009136:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009138:	e05c      	b.n	80091f4 <USBH_HID_Process+0x194>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800913a:	693b      	ldr	r3, [r7, #16]
 800913c:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 8009142:	b2da      	uxtb	r2, r3
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	785b      	ldrb	r3, [r3, #1]
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f004 ff49 	bl	800dfe0 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	2206      	movs	r2, #6
 8009152:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 800915e:	693b      	ldr	r3, [r7, #16]
 8009160:	2200      	movs	r2, #0
 8009162:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 8009166:	e048      	b.n	80091fa <USBH_HID_Process+0x19a>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	785b      	ldrb	r3, [r3, #1]
 800916c:	4619      	mov	r1, r3
 800916e:	6878      	ldr	r0, [r7, #4]
 8009170:	f006 f934 	bl	800f3dc <USBH_LL_GetURBState>
 8009174:	4603      	mov	r3, r0
 8009176:	2b01      	cmp	r3, #1
 8009178:	d124      	bne.n	80091c4 <USBH_HID_Process+0x164>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 800917a:	693b      	ldr	r3, [r7, #16]
 800917c:	785b      	ldrb	r3, [r3, #1]
 800917e:	4619      	mov	r1, r3
 8009180:	6878      	ldr	r0, [r7, #4]
 8009182:	f006 f899 	bl	800f2b8 <USBH_LL_GetLastXferSize>
 8009186:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800918e:	2b00      	cmp	r3, #0
 8009190:	d132      	bne.n	80091f8 <USBH_HID_Process+0x198>
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d02f      	beq.n	80091f8 <USBH_HID_Process+0x198>
 8009198:	693b      	ldr	r3, [r7, #16]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d02b      	beq.n	80091f8 <USBH_HID_Process+0x198>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	f103 0008 	add.w	r0, r3, #8
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	6959      	ldr	r1, [r3, #20]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	8b1b      	ldrh	r3, [r3, #24]
 80091ae:	461a      	mov	r2, r3
 80091b0:	f000 f959 	bl	8009466 <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 80091b4:	693b      	ldr	r3, [r7, #16]
 80091b6:	2201      	movs	r2, #1
 80091b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f9a6 	bl	800950e <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 80091c2:	e019      	b.n	80091f8 <USBH_HID_Process+0x198>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 80091c4:	693b      	ldr	r3, [r7, #16]
 80091c6:	785b      	ldrb	r3, [r3, #1]
 80091c8:	4619      	mov	r1, r3
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f006 f906 	bl	800f3dc <USBH_LL_GetURBState>
 80091d0:	4603      	mov	r3, r0
 80091d2:	2b05      	cmp	r3, #5
 80091d4:	d110      	bne.n	80091f8 <USBH_HID_Process+0x198>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 80091d6:	693b      	ldr	r3, [r7, #16]
 80091d8:	7e9b      	ldrb	r3, [r3, #26]
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f004 f978 	bl	800d4d2 <USBH_ClrFeature>
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d107      	bne.n	80091f8 <USBH_HID_Process+0x198>
            HID_Handle->state = USBH_HID_GET_DATA;
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	2204      	movs	r2, #4
 80091ec:	709a      	strb	r2, [r3, #2]
      break;
 80091ee:	e003      	b.n	80091f8 <USBH_HID_Process+0x198>

    default:
      break;
 80091f0:	bf00      	nop
 80091f2:	e002      	b.n	80091fa <USBH_HID_Process+0x19a>
      break;
 80091f4:	bf00      	nop
 80091f6:	e000      	b.n	80091fa <USBH_HID_Process+0x19a>
      break;
 80091f8:	bf00      	nop
  }

  return status;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	3718      	adds	r7, #24
 8009200:	46bd      	mov	sp, r7
 8009202:	bd80      	pop	{r7, pc}

08009204 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009204:	b480      	push	{r7}
 8009206:	b085      	sub	sp, #20
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009212:	69db      	ldr	r3, [r3, #28]
 8009214:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	789b      	ldrb	r3, [r3, #2]
 800921a:	2b06      	cmp	r3, #6
 800921c:	d10c      	bne.n	8009238 <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6a1b      	ldr	r3, [r3, #32]
 8009228:	1ad3      	subs	r3, r2, r3
 800922a:	68fa      	ldr	r2, [r7, #12]
 800922c:	8b92      	ldrh	r2, [r2, #28]
 800922e:	4293      	cmp	r3, r2
 8009230:	d302      	bcc.n	8009238 <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2204      	movs	r2, #4
 8009236:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 8009238:	2300      	movs	r3, #0
}
 800923a:	4618      	mov	r0, r3
 800923c:	3714      	adds	r7, #20
 800923e:	46bd      	mov	sp, r7
 8009240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009244:	4770      	bx	lr

08009246 <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b086      	sub	sp, #24
 800924a:	af02      	add	r7, sp, #8
 800924c:	6078      	str	r0, [r7, #4]
 800924e:	460b      	mov	r3, r1
 8009250:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009252:	887b      	ldrh	r3, [r7, #2]
 8009254:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009258:	d901      	bls.n	800925e <USBH_HID_GetHIDReportDescriptor+0x18>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800925a:	2303      	movs	r3, #3
 800925c:	e00e      	b.n	800927c <USBH_HID_GetHIDReportDescriptor+0x36>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009264:	887b      	ldrh	r3, [r7, #2]
 8009266:	9300      	str	r3, [sp, #0]
 8009268:	4613      	mov	r3, r2
 800926a:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 800926e:	2101      	movs	r1, #1
 8009270:	6878      	ldr	r0, [r7, #4]
 8009272:	f004 f867 	bl	800d344 <USBH_GetDescriptor>
 8009276:	4603      	mov	r3, r0
 8009278:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 800927a:	7bfb      	ldrb	r3, [r7, #15]
}
 800927c:	4618      	mov	r0, r3
 800927e:	3710      	adds	r7, #16
 8009280:	46bd      	mov	sp, r7
 8009282:	bd80      	pop	{r7, pc}

08009284 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 8009284:	b580      	push	{r7, lr}
 8009286:	b082      	sub	sp, #8
 8009288:	af00      	add	r7, sp, #0
 800928a:	6078      	str	r0, [r7, #4]
 800928c:	460b      	mov	r3, r1
 800928e:	70fb      	strb	r3, [r7, #3]
 8009290:	4613      	mov	r3, r2
 8009292:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	2221      	movs	r2, #33	@ 0x21
 8009298:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	220a      	movs	r2, #10
 800929e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 80092a0:	78fb      	ldrb	r3, [r7, #3]
 80092a2:	b29b      	uxth	r3, r3
 80092a4:	021b      	lsls	r3, r3, #8
 80092a6:	b29a      	uxth	r2, r3
 80092a8:	78bb      	ldrb	r3, [r7, #2]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	4313      	orrs	r3, r2
 80092ae:	b29a      	uxth	r2, r3
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2200      	movs	r2, #0
 80092b8:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2200      	movs	r2, #0
 80092be:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80092c0:	2200      	movs	r2, #0
 80092c2:	2100      	movs	r1, #0
 80092c4:	6878      	ldr	r0, [r7, #4]
 80092c6:	f004 fc3a 	bl	800db3e <USBH_CtlReq>
 80092ca:	4603      	mov	r3, r0
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}

080092d4 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 80092d4:	b580      	push	{r7, lr}
 80092d6:	b084      	sub	sp, #16
 80092d8:	af00      	add	r7, sp, #0
 80092da:	60f8      	str	r0, [r7, #12]
 80092dc:	607b      	str	r3, [r7, #4]
 80092de:	460b      	mov	r3, r1
 80092e0:	72fb      	strb	r3, [r7, #11]
 80092e2:	4613      	mov	r3, r2
 80092e4:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	22a1      	movs	r2, #161	@ 0xa1
 80092ea:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2201      	movs	r2, #1
 80092f0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 80092f2:	7afb      	ldrb	r3, [r7, #11]
 80092f4:	b29b      	uxth	r3, r3
 80092f6:	021b      	lsls	r3, r3, #8
 80092f8:	b29a      	uxth	r2, r3
 80092fa:	7abb      	ldrb	r3, [r7, #10]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	4313      	orrs	r3, r2
 8009300:	b29a      	uxth	r2, r3
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	2200      	movs	r2, #0
 800930a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 800930c:	7e3b      	ldrb	r3, [r7, #24]
 800930e:	b29a      	uxth	r2, r3
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8009314:	7e3b      	ldrb	r3, [r7, #24]
 8009316:	b29b      	uxth	r3, r3
 8009318:	461a      	mov	r2, r3
 800931a:	6879      	ldr	r1, [r7, #4]
 800931c:	68f8      	ldr	r0, [r7, #12]
 800931e:	f004 fc0e 	bl	800db3e <USBH_CtlReq>
 8009322:	4603      	mov	r3, r0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	2221      	movs	r2, #33	@ 0x21
 800933c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	220b      	movs	r2, #11
 8009342:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 8009344:	78fb      	ldrb	r3, [r7, #3]
 8009346:	2b00      	cmp	r3, #0
 8009348:	d003      	beq.n	8009352 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2200      	movs	r2, #0
 800934e:	825a      	strh	r2, [r3, #18]
 8009350:	e002      	b.n	8009358 <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2201      	movs	r2, #1
 8009356:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2200      	movs	r2, #0
 800935c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	2200      	movs	r2, #0
 8009362:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009364:	2200      	movs	r2, #0
 8009366:	2100      	movs	r1, #0
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f004 fbe8 	bl	800db3e <USBH_CtlReq>
 800936e:	4603      	mov	r3, r0

}
 8009370:	4618      	mov	r0, r3
 8009372:	3708      	adds	r7, #8
 8009374:	46bd      	mov	sp, r7
 8009376:	bd80      	pop	{r7, pc}

08009378 <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 8009386:	683b      	ldr	r3, [r7, #0]
 8009388:	3302      	adds	r3, #2
 800938a:	781b      	ldrb	r3, [r3, #0]
 800938c:	461a      	mov	r2, r3
 800938e:	683b      	ldr	r3, [r7, #0]
 8009390:	3303      	adds	r3, #3
 8009392:	781b      	ldrb	r3, [r3, #0]
 8009394:	021b      	lsls	r3, r3, #8
 8009396:	b29b      	uxth	r3, r3
 8009398:	4313      	orrs	r3, r2
 800939a:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 800939c:	897b      	ldrh	r3, [r7, #10]
 800939e:	2b09      	cmp	r3, #9
 80093a0:	d941      	bls.n	8009426 <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 80093a2:	2309      	movs	r3, #9
 80093a4:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 80093a6:	e03a      	b.n	800941e <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 80093a8:	f107 0308 	add.w	r3, r7, #8
 80093ac:	4619      	mov	r1, r3
 80093ae:	68f8      	ldr	r0, [r7, #12]
 80093b0:	f004 fbab 	bl	800db0a <USBH_GetNextDesc>
 80093b4:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	785b      	ldrb	r3, [r3, #1]
 80093ba:	2b21      	cmp	r3, #33	@ 0x21
 80093bc:	d12f      	bne.n	800941e <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	781a      	ldrb	r2, [r3, #0]
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	785a      	ldrb	r2, [r3, #1]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 80093ce:	68fb      	ldr	r3, [r7, #12]
 80093d0:	3302      	adds	r3, #2
 80093d2:	781b      	ldrb	r3, [r3, #0]
 80093d4:	461a      	mov	r2, r3
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	3303      	adds	r3, #3
 80093da:	781b      	ldrb	r3, [r3, #0]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	b29b      	uxth	r3, r3
 80093e0:	4313      	orrs	r3, r2
 80093e2:	b29a      	uxth	r2, r3
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	791a      	ldrb	r2, [r3, #4]
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	795a      	ldrb	r2, [r3, #5]
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	799a      	ldrb	r2, [r3, #6]
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	3307      	adds	r3, #7
 8009404:	781b      	ldrb	r3, [r3, #0]
 8009406:	461a      	mov	r2, r3
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	3308      	adds	r3, #8
 800940c:	781b      	ldrb	r3, [r3, #0]
 800940e:	021b      	lsls	r3, r3, #8
 8009410:	b29b      	uxth	r3, r3
 8009412:	4313      	orrs	r3, r2
 8009414:	b29a      	uxth	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	811a      	strh	r2, [r3, #8]
        break;
 800941a:	bf00      	nop
      }
    }
  }
}
 800941c:	e003      	b.n	8009426 <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 800941e:	893b      	ldrh	r3, [r7, #8]
 8009420:	897a      	ldrh	r2, [r7, #10]
 8009422:	429a      	cmp	r2, r3
 8009424:	d8c0      	bhi.n	80093a8 <USBH_HID_ParseHIDDesc+0x30>
}
 8009426:	bf00      	nop
 8009428:	3710      	adds	r7, #16
 800942a:	46bd      	mov	sp, r7
 800942c:	bd80      	pop	{r7, pc}

0800942e <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 800942e:	b480      	push	{r7}
 8009430:	b085      	sub	sp, #20
 8009432:	af00      	add	r7, sp, #0
 8009434:	60f8      	str	r0, [r7, #12]
 8009436:	60b9      	str	r1, [r7, #8]
 8009438:	4613      	mov	r3, r2
 800943a:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 800943c:	68fb      	ldr	r3, [r7, #12]
 800943e:	2200      	movs	r2, #0
 8009440:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2200      	movs	r2, #0
 8009446:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2200      	movs	r2, #0
 800944c:	729a      	strb	r2, [r3, #10]
  f->size = size;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	88fa      	ldrh	r2, [r7, #6]
 8009452:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	601a      	str	r2, [r3, #0]
}
 800945a:	bf00      	nop
 800945c:	3714      	adds	r7, #20
 800945e:	46bd      	mov	sp, r7
 8009460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009464:	4770      	bx	lr

08009466 <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 8009466:	b480      	push	{r7}
 8009468:	b087      	sub	sp, #28
 800946a:	af00      	add	r7, sp, #0
 800946c:	60f8      	str	r0, [r7, #12]
 800946e:	60b9      	str	r1, [r7, #8]
 8009470:	4613      	mov	r3, r2
 8009472:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	7a9b      	ldrb	r3, [r3, #10]
 800947c:	2b00      	cmp	r3, #0
 800947e:	d13c      	bne.n	80094fa <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	2201      	movs	r2, #1
 8009484:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 8009486:	2300      	movs	r3, #0
 8009488:	82fb      	strh	r3, [r7, #22]
 800948a:	e032      	b.n	80094f2 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	889b      	ldrh	r3, [r3, #4]
 8009490:	3301      	adds	r3, #1
 8009492:	68fa      	ldr	r2, [r7, #12]
 8009494:	88d2      	ldrh	r2, [r2, #6]
 8009496:	4293      	cmp	r3, r2
 8009498:	d00a      	beq.n	80094b0 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	889b      	ldrh	r3, [r3, #4]
 800949e:	3301      	adds	r3, #1
 80094a0:	68fa      	ldr	r2, [r7, #12]
 80094a2:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 80094a4:	4293      	cmp	r3, r2
 80094a6:	d108      	bne.n	80094ba <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	88db      	ldrh	r3, [r3, #6]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d104      	bne.n	80094ba <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 80094b0:	68fb      	ldr	r3, [r7, #12]
 80094b2:	2200      	movs	r2, #0
 80094b4:	729a      	strb	r2, [r3, #10]
        return i;
 80094b6:	8afb      	ldrh	r3, [r7, #22]
 80094b8:	e023      	b.n	8009502 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	1c5a      	adds	r2, r3, #1
 80094be:	613a      	str	r2, [r7, #16]
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	6812      	ldr	r2, [r2, #0]
 80094c4:	68f9      	ldr	r1, [r7, #12]
 80094c6:	8889      	ldrh	r1, [r1, #4]
 80094c8:	440a      	add	r2, r1
 80094ca:	781b      	ldrb	r3, [r3, #0]
 80094cc:	7013      	strb	r3, [r2, #0]
        f->head++;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	889b      	ldrh	r3, [r3, #4]
 80094d2:	3301      	adds	r3, #1
 80094d4:	b29a      	uxth	r2, r3
 80094d6:	68fb      	ldr	r3, [r7, #12]
 80094d8:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	889a      	ldrh	r2, [r3, #4]
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	891b      	ldrh	r3, [r3, #8]
 80094e2:	429a      	cmp	r2, r3
 80094e4:	d102      	bne.n	80094ec <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 80094ec:	8afb      	ldrh	r3, [r7, #22]
 80094ee:	3301      	adds	r3, #1
 80094f0:	82fb      	strh	r3, [r7, #22]
 80094f2:	8afa      	ldrh	r2, [r7, #22]
 80094f4:	88fb      	ldrh	r3, [r7, #6]
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d3c8      	bcc.n	800948c <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2200      	movs	r2, #0
 80094fe:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8009500:	88fb      	ldrh	r3, [r7, #6]
}
 8009502:	4618      	mov	r0, r3
 8009504:	371c      	adds	r7, #28
 8009506:	46bd      	mov	sp, r7
 8009508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800950c:	4770      	bx	lr

0800950e <USBH_HID_EventCallback>:
  * @brief  The function is a callback about HID Data events
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 800950e:	b480      	push	{r7}
 8009510:	b083      	sub	sp, #12
 8009512:	af00      	add	r7, sp, #0
 8009514:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009516:	bf00      	nop
 8009518:	370c      	adds	r7, #12
 800951a:	46bd      	mov	sp, r7
 800951c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009520:	4770      	bx	lr
	...

08009524 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8009524:	b580      	push	{r7, lr}
 8009526:	b084      	sub	sp, #16
 8009528:	af00      	add	r7, sp, #0
 800952a:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009532:	69db      	ldr	r3, [r3, #28]
 8009534:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 8009536:	4b22      	ldr	r3, [pc, #136]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 8009538:	2200      	movs	r2, #0
 800953a:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 800953c:	4b20      	ldr	r3, [pc, #128]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 800953e:	2200      	movs	r2, #0
 8009540:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 8009542:	4b1f      	ldr	r3, [pc, #124]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 8009544:	2200      	movs	r2, #0
 8009546:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 8009548:	4b1d      	ldr	r3, [pc, #116]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 800954a:	2200      	movs	r2, #0
 800954c:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 800954e:	4b1c      	ldr	r3, [pc, #112]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 8009550:	2200      	movs	r2, #0
 8009552:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 8009554:	4b1a      	ldr	r3, [pc, #104]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 8009556:	2200      	movs	r2, #0
 8009558:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 800955a:	4b19      	ldr	r3, [pc, #100]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 800955c:	2200      	movs	r2, #0
 800955e:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 8009560:	4b17      	ldr	r3, [pc, #92]	@ (80095c0 <USBH_HID_KeybdInit+0x9c>)
 8009562:	2200      	movs	r2, #0
 8009564:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8009566:	2300      	movs	r3, #0
 8009568:	60fb      	str	r3, [r7, #12]
 800956a:	e00c      	b.n	8009586 <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 800956c:	4a15      	ldr	r2, [pc, #84]	@ (80095c4 <USBH_HID_KeybdInit+0xa0>)
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	4413      	add	r3, r2
 8009572:	2200      	movs	r2, #0
 8009574:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 8009576:	4a14      	ldr	r2, [pc, #80]	@ (80095c8 <USBH_HID_KeybdInit+0xa4>)
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	4413      	add	r3, r2
 800957c:	2200      	movs	r2, #0
 800957e:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	3301      	adds	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	2b07      	cmp	r3, #7
 800958a:	d9ef      	bls.n	800956c <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	8b1b      	ldrh	r3, [r3, #24]
 8009590:	2b08      	cmp	r3, #8
 8009592:	d902      	bls.n	800959a <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	2208      	movs	r2, #8
 8009598:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	4a0a      	ldr	r2, [pc, #40]	@ (80095c8 <USBH_HID_KeybdInit+0xa4>)
 800959e:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	f103 0008 	add.w	r0, r3, #8
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80095ac:	2250      	movs	r2, #80	@ 0x50
 80095ae:	4619      	mov	r1, r3
 80095b0:	f7ff ff3d 	bl	800942e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 80095b4:	2300      	movs	r3, #0
}
 80095b6:	4618      	mov	r0, r3
 80095b8:	3710      	adds	r7, #16
 80095ba:	46bd      	mov	sp, r7
 80095bc:	bd80      	pop	{r7, pc}
 80095be:	bf00      	nop
 80095c0:	20004b0c 	.word	0x20004b0c
 80095c4:	20004b24 	.word	0x20004b24
 80095c8:	20004b1c 	.word	0x20004b1c

080095cc <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 80095cc:	b580      	push	{r7, lr}
 80095ce:	b084      	sub	sp, #16
 80095d0:	af00      	add	r7, sp, #0
 80095d2:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80095da:	69db      	ldr	r3, [r3, #28]
 80095dc:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 80095de:	4b1d      	ldr	r3, [pc, #116]	@ (8009654 <USBH_HID_MouseInit+0x88>)
 80095e0:	2200      	movs	r2, #0
 80095e2:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 80095e4:	4b1b      	ldr	r3, [pc, #108]	@ (8009654 <USBH_HID_MouseInit+0x88>)
 80095e6:	2200      	movs	r2, #0
 80095e8:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 80095ea:	4b1a      	ldr	r3, [pc, #104]	@ (8009654 <USBH_HID_MouseInit+0x88>)
 80095ec:	2200      	movs	r2, #0
 80095ee:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 80095f0:	4b18      	ldr	r3, [pc, #96]	@ (8009654 <USBH_HID_MouseInit+0x88>)
 80095f2:	2200      	movs	r2, #0
 80095f4:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 80095f6:	4b17      	ldr	r3, [pc, #92]	@ (8009654 <USBH_HID_MouseInit+0x88>)
 80095f8:	2200      	movs	r2, #0
 80095fa:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 80095fc:	2300      	movs	r3, #0
 80095fe:	60fb      	str	r3, [r7, #12]
 8009600:	e00c      	b.n	800961c <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8009602:	4a15      	ldr	r2, [pc, #84]	@ (8009658 <USBH_HID_MouseInit+0x8c>)
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	4413      	add	r3, r2
 8009608:	2200      	movs	r2, #0
 800960a:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 800960c:	4a13      	ldr	r2, [pc, #76]	@ (800965c <USBH_HID_MouseInit+0x90>)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	4413      	add	r3, r2
 8009612:	2200      	movs	r2, #0
 8009614:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	3301      	adds	r3, #1
 800961a:	60fb      	str	r3, [r7, #12]
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2b07      	cmp	r3, #7
 8009620:	d9ef      	bls.n	8009602 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	8b1b      	ldrh	r3, [r3, #24]
 8009626:	2b08      	cmp	r3, #8
 8009628:	d902      	bls.n	8009630 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	2208      	movs	r2, #8
 800962e:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 8009630:	68bb      	ldr	r3, [r7, #8]
 8009632:	4a0a      	ldr	r2, [pc, #40]	@ (800965c <USBH_HID_MouseInit+0x90>)
 8009634:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	f103 0008 	add.w	r0, r3, #8
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009642:	2250      	movs	r2, #80	@ 0x50
 8009644:	4619      	mov	r1, r3
 8009646:	f7ff fef2 	bl	800942e <USBH_HID_FifoInit>
  }

  return USBH_OK;
 800964a:	2300      	movs	r3, #0
}
 800964c:	4618      	mov	r0, r3
 800964e:	3710      	adds	r7, #16
 8009650:	46bd      	mov	sp, r7
 8009652:	bd80      	pop	{r7, pc}
 8009654:	20004b2c 	.word	0x20004b2c
 8009658:	20004b34 	.word	0x20004b34
 800965c:	20004b3c 	.word	0x20004b3c

08009660 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8009660:	b590      	push	{r4, r7, lr}
 8009662:	b089      	sub	sp, #36	@ 0x24
 8009664:	af04      	add	r7, sp, #16
 8009666:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800966e:	7919      	ldrb	r1, [r3, #4]
 8009670:	2350      	movs	r3, #80	@ 0x50
 8009672:	2206      	movs	r2, #6
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f003 f8f7 	bl	800c868 <USBH_FindInterface>
 800967a:	4603      	mov	r3, r0
 800967c:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 800967e:	7bfb      	ldrb	r3, [r7, #15]
 8009680:	2bff      	cmp	r3, #255	@ 0xff
 8009682:	d002      	beq.n	800968a <USBH_MSC_InterfaceInit+0x2a>
 8009684:	7bfb      	ldrb	r3, [r7, #15]
 8009686:	2b09      	cmp	r3, #9
 8009688:	d901      	bls.n	800968e <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800968a:	2302      	movs	r3, #2
 800968c:	e106      	b.n	800989c <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 800968e:	7bfb      	ldrb	r3, [r7, #15]
 8009690:	4619      	mov	r1, r3
 8009692:	6878      	ldr	r0, [r7, #4]
 8009694:	f003 f8cc 	bl	800c830 <USBH_SelectInterface>
 8009698:	4603      	mov	r3, r0
 800969a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800969c:	7bbb      	ldrb	r3, [r7, #14]
 800969e:	2b00      	cmp	r3, #0
 80096a0:	d001      	beq.n	80096a6 <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 80096a2:	2302      	movs	r3, #2
 80096a4:	e0fa      	b.n	800989c <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 80096ac:	f44f 7082 	mov.w	r0, #260	@ 0x104
 80096b0:	f005 ff78 	bl	800f5a4 <malloc>
 80096b4:	4603      	mov	r3, r0
 80096b6:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 80096c2:	68bb      	ldr	r3, [r7, #8]
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d101      	bne.n	80096cc <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 80096c8:	2302      	movs	r3, #2
 80096ca:	e0e7      	b.n	800989c <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 80096cc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80096d0:	2100      	movs	r1, #0
 80096d2:	68b8      	ldr	r0, [r7, #8]
 80096d4:	f006 fa62 	bl	800fb9c <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80096d8:	7bfb      	ldrb	r3, [r7, #15]
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	2132      	movs	r1, #50	@ 0x32
 80096de:	fb01 f303 	mul.w	r3, r1, r3
 80096e2:	4413      	add	r3, r2
 80096e4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80096e8:	781b      	ldrb	r3, [r3, #0]
 80096ea:	b25b      	sxtb	r3, r3
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	da16      	bge.n	800971e <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 80096f0:	7bfb      	ldrb	r3, [r7, #15]
 80096f2:	687a      	ldr	r2, [r7, #4]
 80096f4:	2132      	movs	r1, #50	@ 0x32
 80096f6:	fb01 f303 	mul.w	r3, r1, r3
 80096fa:	4413      	add	r3, r2
 80096fc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009700:	781a      	ldrb	r2, [r3, #0]
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009706:	7bfb      	ldrb	r3, [r7, #15]
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	2132      	movs	r1, #50	@ 0x32
 800970c:	fb01 f303 	mul.w	r3, r1, r3
 8009710:	4413      	add	r3, r2
 8009712:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009716:	881a      	ldrh	r2, [r3, #0]
 8009718:	68bb      	ldr	r3, [r7, #8]
 800971a:	815a      	strh	r2, [r3, #10]
 800971c:	e015      	b.n	800974a <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 800971e:	7bfb      	ldrb	r3, [r7, #15]
 8009720:	687a      	ldr	r2, [r7, #4]
 8009722:	2132      	movs	r1, #50	@ 0x32
 8009724:	fb01 f303 	mul.w	r3, r1, r3
 8009728:	4413      	add	r3, r2
 800972a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800972e:	781a      	ldrb	r2, [r3, #0]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009734:	7bfb      	ldrb	r3, [r7, #15]
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	2132      	movs	r1, #50	@ 0x32
 800973a:	fb01 f303 	mul.w	r3, r1, r3
 800973e:	4413      	add	r3, r2
 8009740:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009744:	881a      	ldrh	r2, [r3, #0]
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800974a:	7bfb      	ldrb	r3, [r7, #15]
 800974c:	687a      	ldr	r2, [r7, #4]
 800974e:	2132      	movs	r1, #50	@ 0x32
 8009750:	fb01 f303 	mul.w	r3, r1, r3
 8009754:	4413      	add	r3, r2
 8009756:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	b25b      	sxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	da16      	bge.n	8009790 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	687a      	ldr	r2, [r7, #4]
 8009766:	2132      	movs	r1, #50	@ 0x32
 8009768:	fb01 f303 	mul.w	r3, r1, r3
 800976c:	4413      	add	r3, r2
 800976e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009772:	781a      	ldrb	r2, [r3, #0]
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009778:	7bfb      	ldrb	r3, [r7, #15]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	2132      	movs	r1, #50	@ 0x32
 800977e:	fb01 f303 	mul.w	r3, r1, r3
 8009782:	4413      	add	r3, r2
 8009784:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8009788:	881a      	ldrh	r2, [r3, #0]
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	815a      	strh	r2, [r3, #10]
 800978e:	e015      	b.n	80097bc <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	687a      	ldr	r2, [r7, #4]
 8009794:	2132      	movs	r1, #50	@ 0x32
 8009796:	fb01 f303 	mul.w	r3, r1, r3
 800979a:	4413      	add	r3, r2
 800979c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80097a0:	781a      	ldrb	r2, [r3, #0]
 80097a2:	68bb      	ldr	r3, [r7, #8]
 80097a4:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	687a      	ldr	r2, [r7, #4]
 80097aa:	2132      	movs	r1, #50	@ 0x32
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	4413      	add	r3, r2
 80097b2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80097b6:	881a      	ldrh	r2, [r3, #0]
 80097b8:	68bb      	ldr	r3, [r7, #8]
 80097ba:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 80097bc:	68bb      	ldr	r3, [r7, #8]
 80097be:	2200      	movs	r2, #0
 80097c0:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 80097c2:	68bb      	ldr	r3, [r7, #8]
 80097c4:	2200      	movs	r2, #0
 80097c6:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	799b      	ldrb	r3, [r3, #6]
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f004 fc6c 	bl	800e0b2 <USBH_AllocPipe>
 80097da:	4603      	mov	r3, r0
 80097dc:	461a      	mov	r2, r3
 80097de:	68bb      	ldr	r3, [r7, #8]
 80097e0:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	79db      	ldrb	r3, [r3, #7]
 80097e6:	4619      	mov	r1, r3
 80097e8:	6878      	ldr	r0, [r7, #4]
 80097ea:	f004 fc62 	bl	800e0b2 <USBH_AllocPipe>
 80097ee:	4603      	mov	r3, r0
 80097f0:	461a      	mov	r2, r3
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fc1e 	bl	800a038 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	799b      	ldrb	r3, [r3, #6]
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01e      	beq.n	8009842 <USBH_MSC_InterfaceInit+0x1e2>
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	891b      	ldrh	r3, [r3, #8]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d01a      	beq.n	8009842 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 800980c:	68bb      	ldr	r3, [r7, #8]
 800980e:	7959      	ldrb	r1, [r3, #5]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	7998      	ldrb	r0, [r3, #6]
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009820:	68ba      	ldr	r2, [r7, #8]
 8009822:	8912      	ldrh	r2, [r2, #8]
 8009824:	9202      	str	r2, [sp, #8]
 8009826:	2202      	movs	r2, #2
 8009828:	9201      	str	r2, [sp, #4]
 800982a:	9300      	str	r3, [sp, #0]
 800982c:	4623      	mov	r3, r4
 800982e:	4602      	mov	r2, r0
 8009830:	6878      	ldr	r0, [r7, #4]
 8009832:	f004 fc0f 	bl	800e054 <USBH_OpenPipe>
 8009836:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	79db      	ldrb	r3, [r3, #7]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d02c      	beq.n	800989a <USBH_MSC_InterfaceInit+0x23a>
 8009840:	e001      	b.n	8009846 <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8009842:	2303      	movs	r3, #3
 8009844:	e02a      	b.n	800989c <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	895b      	ldrh	r3, [r3, #10]
 800984a:	2b00      	cmp	r3, #0
 800984c:	d025      	beq.n	800989a <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	7919      	ldrb	r1, [r3, #4]
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	79d8      	ldrb	r0, [r3, #7]
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009862:	68ba      	ldr	r2, [r7, #8]
 8009864:	8952      	ldrh	r2, [r2, #10]
 8009866:	9202      	str	r2, [sp, #8]
 8009868:	2202      	movs	r2, #2
 800986a:	9201      	str	r2, [sp, #4]
 800986c:	9300      	str	r3, [sp, #0]
 800986e:	4623      	mov	r3, r4
 8009870:	4602      	mov	r2, r0
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f004 fbee 	bl	800e054 <USBH_OpenPipe>
 8009878:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	791b      	ldrb	r3, [r3, #4]
 800987e:	2200      	movs	r2, #0
 8009880:	4619      	mov	r1, r3
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f005 fdd4 	bl	800f430 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8009888:	68bb      	ldr	r3, [r7, #8]
 800988a:	795b      	ldrb	r3, [r3, #5]
 800988c:	2200      	movs	r2, #0
 800988e:	4619      	mov	r1, r3
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f005 fdcd 	bl	800f430 <USBH_LL_SetToggle>

  return USBH_OK;
 8009896:	2300      	movs	r3, #0
 8009898:	e000      	b.n	800989c <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 800989a:	2303      	movs	r3, #3
}
 800989c:	4618      	mov	r0, r3
 800989e:	3714      	adds	r7, #20
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd90      	pop	{r4, r7, pc}

080098a4 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b084      	sub	sp, #16
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80098b2:	69db      	ldr	r3, [r3, #28]
 80098b4:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	795b      	ldrb	r3, [r3, #5]
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d00e      	beq.n	80098dc <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	795b      	ldrb	r3, [r3, #5]
 80098c2:	4619      	mov	r1, r3
 80098c4:	6878      	ldr	r0, [r7, #4]
 80098c6:	f004 fbe4 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 80098ca:	68fb      	ldr	r3, [r7, #12]
 80098cc:	795b      	ldrb	r3, [r3, #5]
 80098ce:	4619      	mov	r1, r3
 80098d0:	6878      	ldr	r0, [r7, #4]
 80098d2:	f004 fc10 	bl	800e0f6 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2200      	movs	r2, #0
 80098da:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	791b      	ldrb	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00e      	beq.n	8009902 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 80098e4:	68fb      	ldr	r3, [r7, #12]
 80098e6:	791b      	ldrb	r3, [r3, #4]
 80098e8:	4619      	mov	r1, r3
 80098ea:	6878      	ldr	r0, [r7, #4]
 80098ec:	f004 fbd1 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	791b      	ldrb	r3, [r3, #4]
 80098f4:	4619      	mov	r1, r3
 80098f6:	6878      	ldr	r0, [r7, #4]
 80098f8:	f004 fbfd 	bl	800e0f6 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	2200      	movs	r2, #0
 8009900:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009908:	69db      	ldr	r3, [r3, #28]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d00b      	beq.n	8009926 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009914:	69db      	ldr	r3, [r3, #28]
 8009916:	4618      	mov	r0, r3
 8009918:	f005 fe4c 	bl	800f5b4 <free>
    phost->pActiveClass->pData = 0U;
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009922:	2200      	movs	r2, #0
 8009924:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009926:	2300      	movs	r3, #0
}
 8009928:	4618      	mov	r0, r3
 800992a:	3710      	adds	r7, #16
 800992c:	46bd      	mov	sp, r7
 800992e:	bd80      	pop	{r7, pc}

08009930 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800993e:	69db      	ldr	r3, [r3, #28]
 8009940:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009942:	2301      	movs	r3, #1
 8009944:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8009946:	68bb      	ldr	r3, [r7, #8]
 8009948:	7b9b      	ldrb	r3, [r3, #14]
 800994a:	2b03      	cmp	r3, #3
 800994c:	d041      	beq.n	80099d2 <USBH_MSC_ClassRequest+0xa2>
 800994e:	2b03      	cmp	r3, #3
 8009950:	dc4b      	bgt.n	80099ea <USBH_MSC_ClassRequest+0xba>
 8009952:	2b00      	cmp	r3, #0
 8009954:	d001      	beq.n	800995a <USBH_MSC_ClassRequest+0x2a>
 8009956:	2b02      	cmp	r3, #2
 8009958:	d147      	bne.n	80099ea <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	4619      	mov	r1, r3
 800995e:	6878      	ldr	r0, [r7, #4]
 8009960:	f000 fb4c 	bl	8009ffc <USBH_MSC_BOT_REQ_GetMaxLUN>
 8009964:	4603      	mov	r3, r0
 8009966:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8009968:	7bfb      	ldrb	r3, [r7, #15]
 800996a:	2b03      	cmp	r3, #3
 800996c:	d104      	bne.n	8009978 <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	2200      	movs	r2, #0
 8009972:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	2b00      	cmp	r3, #0
 800997c:	d137      	bne.n	80099ee <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	781b      	ldrb	r3, [r3, #0]
 8009982:	2b02      	cmp	r3, #2
 8009984:	d804      	bhi.n	8009990 <USBH_MSC_ClassRequest+0x60>
 8009986:	68bb      	ldr	r3, [r7, #8]
 8009988:	781b      	ldrb	r3, [r3, #0]
 800998a:	3301      	adds	r3, #1
 800998c:	b2da      	uxtb	r2, r3
 800998e:	e000      	b.n	8009992 <USBH_MSC_ClassRequest+0x62>
 8009990:	2202      	movs	r2, #2
 8009992:	68bb      	ldr	r3, [r7, #8]
 8009994:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8009996:	2300      	movs	r3, #0
 8009998:	73bb      	strb	r3, [r7, #14]
 800999a:	e014      	b.n	80099c6 <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 800999c:	7bbb      	ldrb	r3, [r7, #14]
 800999e:	68ba      	ldr	r2, [r7, #8]
 80099a0:	2134      	movs	r1, #52	@ 0x34
 80099a2:	fb01 f303 	mul.w	r3, r1, r3
 80099a6:	4413      	add	r3, r2
 80099a8:	3392      	adds	r3, #146	@ 0x92
 80099aa:	2202      	movs	r2, #2
 80099ac:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 80099ae:	7bbb      	ldrb	r3, [r7, #14]
 80099b0:	68ba      	ldr	r2, [r7, #8]
 80099b2:	2134      	movs	r1, #52	@ 0x34
 80099b4:	fb01 f303 	mul.w	r3, r1, r3
 80099b8:	4413      	add	r3, r2
 80099ba:	33c1      	adds	r3, #193	@ 0xc1
 80099bc:	2200      	movs	r2, #0
 80099be:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 80099c0:	7bbb      	ldrb	r3, [r7, #14]
 80099c2:	3301      	adds	r3, #1
 80099c4:	73bb      	strb	r3, [r7, #14]
 80099c6:	68bb      	ldr	r3, [r7, #8]
 80099c8:	781b      	ldrb	r3, [r3, #0]
 80099ca:	7bba      	ldrb	r2, [r7, #14]
 80099cc:	429a      	cmp	r2, r3
 80099ce:	d3e5      	bcc.n	800999c <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 80099d0:	e00d      	b.n	80099ee <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 80099d2:	2100      	movs	r1, #0
 80099d4:	6878      	ldr	r0, [r7, #4]
 80099d6:	f003 fd7c 	bl	800d4d2 <USBH_ClrFeature>
 80099da:	4603      	mov	r3, r0
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d108      	bne.n	80099f2 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	7bda      	ldrb	r2, [r3, #15]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	739a      	strb	r2, [r3, #14]
      }
      break;
 80099e8:	e003      	b.n	80099f2 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 80099ea:	bf00      	nop
 80099ec:	e002      	b.n	80099f4 <USBH_MSC_ClassRequest+0xc4>
      break;
 80099ee:	bf00      	nop
 80099f0:	e000      	b.n	80099f4 <USBH_MSC_ClassRequest+0xc4>
      break;
 80099f2:	bf00      	nop
  }

  return status;
 80099f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	3710      	adds	r7, #16
 80099fa:	46bd      	mov	sp, r7
 80099fc:	bd80      	pop	{r7, pc}
	...

08009a00 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b086      	sub	sp, #24
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009a0e:	69db      	ldr	r3, [r3, #28]
 8009a10:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8009a12:	2301      	movs	r3, #1
 8009a14:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8009a16:	2301      	movs	r3, #1
 8009a18:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8009a1a:	2301      	movs	r3, #1
 8009a1c:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8009a1e:	693b      	ldr	r3, [r7, #16]
 8009a20:	7b1b      	ldrb	r3, [r3, #12]
 8009a22:	2b0a      	cmp	r3, #10
 8009a24:	f000 8280 	beq.w	8009f28 <USBH_MSC_Process+0x528>
 8009a28:	2b0a      	cmp	r3, #10
 8009a2a:	f300 82b8 	bgt.w	8009f9e <USBH_MSC_Process+0x59e>
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <USBH_MSC_Process+0x3a>
 8009a32:	2b01      	cmp	r3, #1
 8009a34:	f000 82b0 	beq.w	8009f98 <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8009a38:	e2b1      	b.n	8009f9e <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8009a3a:	693b      	ldr	r3, [r7, #16]
 8009a3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a40:	693a      	ldr	r2, [r7, #16]
 8009a42:	7812      	ldrb	r2, [r2, #0]
 8009a44:	4293      	cmp	r3, r2
 8009a46:	f080 825d 	bcs.w	8009f04 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a50:	4619      	mov	r1, r3
 8009a52:	693a      	ldr	r2, [r7, #16]
 8009a54:	2334      	movs	r3, #52	@ 0x34
 8009a56:	fb01 f303 	mul.w	r3, r1, r3
 8009a5a:	4413      	add	r3, r2
 8009a5c:	3391      	adds	r3, #145	@ 0x91
 8009a5e:	2201      	movs	r2, #1
 8009a60:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8009a62:	693b      	ldr	r3, [r7, #16]
 8009a64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009a68:	4619      	mov	r1, r3
 8009a6a:	693a      	ldr	r2, [r7, #16]
 8009a6c:	2334      	movs	r3, #52	@ 0x34
 8009a6e:	fb01 f303 	mul.w	r3, r1, r3
 8009a72:	4413      	add	r3, r2
 8009a74:	3390      	adds	r3, #144	@ 0x90
 8009a76:	781b      	ldrb	r3, [r3, #0]
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	f200 824b 	bhi.w	8009f14 <USBH_MSC_Process+0x514>
 8009a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8009a84 <USBH_MSC_Process+0x84>)
 8009a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a84:	08009aa9 	.word	0x08009aa9
 8009a88:	08009f15 	.word	0x08009f15
 8009a8c:	08009b73 	.word	0x08009b73
 8009a90:	08009cf9 	.word	0x08009cf9
 8009a94:	08009acf 	.word	0x08009acf
 8009a98:	08009dc5 	.word	0x08009dc5
 8009a9c:	08009f15 	.word	0x08009f15
 8009aa0:	08009f15 	.word	0x08009f15
 8009aa4:	08009ef3 	.word	0x08009ef3
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8009aa8:	693b      	ldr	r3, [r7, #16]
 8009aaa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009aae:	4619      	mov	r1, r3
 8009ab0:	693a      	ldr	r2, [r7, #16]
 8009ab2:	2334      	movs	r3, #52	@ 0x34
 8009ab4:	fb01 f303 	mul.w	r3, r1, r3
 8009ab8:	4413      	add	r3, r2
 8009aba:	3390      	adds	r3, #144	@ 0x90
 8009abc:	2204      	movs	r2, #4
 8009abe:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8009ac6:	693b      	ldr	r3, [r7, #16]
 8009ac8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8009acc:	e22b      	b.n	8009f26 <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ad4:	b2d9      	uxtb	r1, r3
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009adc:	461a      	mov	r2, r3
 8009ade:	2334      	movs	r3, #52	@ 0x34
 8009ae0:	fb02 f303 	mul.w	r3, r2, r3
 8009ae4:	3398      	adds	r3, #152	@ 0x98
 8009ae6:	693a      	ldr	r2, [r7, #16]
 8009ae8:	4413      	add	r3, r2
 8009aea:	3307      	adds	r3, #7
 8009aec:	461a      	mov	r2, r3
 8009aee:	6878      	ldr	r0, [r7, #4]
 8009af0:	f000 fdbf 	bl	800a672 <USBH_MSC_SCSI_Inquiry>
 8009af4:	4603      	mov	r3, r0
 8009af6:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009af8:	7bfb      	ldrb	r3, [r7, #15]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d10c      	bne.n	8009b18 <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009afe:	693b      	ldr	r3, [r7, #16]
 8009b00:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b04:	4619      	mov	r1, r3
 8009b06:	693a      	ldr	r2, [r7, #16]
 8009b08:	2334      	movs	r3, #52	@ 0x34
 8009b0a:	fb01 f303 	mul.w	r3, r1, r3
 8009b0e:	4413      	add	r3, r2
 8009b10:	3390      	adds	r3, #144	@ 0x90
 8009b12:	2202      	movs	r2, #2
 8009b14:	701a      	strb	r2, [r3, #0]
            break;
 8009b16:	e1ff      	b.n	8009f18 <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8009b18:	7bfb      	ldrb	r3, [r7, #15]
 8009b1a:	2b02      	cmp	r3, #2
 8009b1c:	d10c      	bne.n	8009b38 <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009b1e:	693b      	ldr	r3, [r7, #16]
 8009b20:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b24:	4619      	mov	r1, r3
 8009b26:	693a      	ldr	r2, [r7, #16]
 8009b28:	2334      	movs	r3, #52	@ 0x34
 8009b2a:	fb01 f303 	mul.w	r3, r1, r3
 8009b2e:	4413      	add	r3, r2
 8009b30:	3390      	adds	r3, #144	@ 0x90
 8009b32:	2205      	movs	r2, #5
 8009b34:	701a      	strb	r2, [r3, #0]
            break;
 8009b36:	e1ef      	b.n	8009f18 <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009b38:	7bfb      	ldrb	r3, [r7, #15]
 8009b3a:	2b04      	cmp	r3, #4
 8009b3c:	f040 81ec 	bne.w	8009f18 <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b46:	4619      	mov	r1, r3
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	2334      	movs	r3, #52	@ 0x34
 8009b4c:	fb01 f303 	mul.w	r3, r1, r3
 8009b50:	4413      	add	r3, r2
 8009b52:	3390      	adds	r3, #144	@ 0x90
 8009b54:	2208      	movs	r2, #8
 8009b56:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009b58:	693b      	ldr	r3, [r7, #16]
 8009b5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b5e:	4619      	mov	r1, r3
 8009b60:	693a      	ldr	r2, [r7, #16]
 8009b62:	2334      	movs	r3, #52	@ 0x34
 8009b64:	fb01 f303 	mul.w	r3, r1, r3
 8009b68:	4413      	add	r3, r2
 8009b6a:	3391      	adds	r3, #145	@ 0x91
 8009b6c:	2202      	movs	r2, #2
 8009b6e:	701a      	strb	r2, [r3, #0]
            break;
 8009b70:	e1d2      	b.n	8009f18 <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8009b72:	693b      	ldr	r3, [r7, #16]
 8009b74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	4619      	mov	r1, r3
 8009b7c:	6878      	ldr	r0, [r7, #4]
 8009b7e:	f000 fcbb 	bl	800a4f8 <USBH_MSC_SCSI_TestUnitReady>
 8009b82:	4603      	mov	r3, r0
 8009b84:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8009b86:	7bbb      	ldrb	r3, [r7, #14]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d14a      	bne.n	8009c22 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009b92:	4619      	mov	r1, r3
 8009b94:	693a      	ldr	r2, [r7, #16]
 8009b96:	2334      	movs	r3, #52	@ 0x34
 8009b98:	fb01 f303 	mul.w	r3, r1, r3
 8009b9c:	4413      	add	r3, r2
 8009b9e:	3392      	adds	r3, #146	@ 0x92
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d00c      	beq.n	8009bc0 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009ba6:	693b      	ldr	r3, [r7, #16]
 8009ba8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bac:	4619      	mov	r1, r3
 8009bae:	693a      	ldr	r2, [r7, #16]
 8009bb0:	2334      	movs	r3, #52	@ 0x34
 8009bb2:	fb01 f303 	mul.w	r3, r1, r3
 8009bb6:	4413      	add	r3, r2
 8009bb8:	33c1      	adds	r3, #193	@ 0xc1
 8009bba:	2201      	movs	r2, #1
 8009bbc:	701a      	strb	r2, [r3, #0]
 8009bbe:	e00b      	b.n	8009bd8 <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bc6:	4619      	mov	r1, r3
 8009bc8:	693a      	ldr	r2, [r7, #16]
 8009bca:	2334      	movs	r3, #52	@ 0x34
 8009bcc:	fb01 f303 	mul.w	r3, r1, r3
 8009bd0:	4413      	add	r3, r2
 8009bd2:	33c1      	adds	r3, #193	@ 0xc1
 8009bd4:	2200      	movs	r2, #0
 8009bd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8009bd8:	693b      	ldr	r3, [r7, #16]
 8009bda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bde:	4619      	mov	r1, r3
 8009be0:	693a      	ldr	r2, [r7, #16]
 8009be2:	2334      	movs	r3, #52	@ 0x34
 8009be4:	fb01 f303 	mul.w	r3, r1, r3
 8009be8:	4413      	add	r3, r2
 8009bea:	3390      	adds	r3, #144	@ 0x90
 8009bec:	2203      	movs	r2, #3
 8009bee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009bf6:	4619      	mov	r1, r3
 8009bf8:	693a      	ldr	r2, [r7, #16]
 8009bfa:	2334      	movs	r3, #52	@ 0x34
 8009bfc:	fb01 f303 	mul.w	r3, r1, r3
 8009c00:	4413      	add	r3, r2
 8009c02:	3391      	adds	r3, #145	@ 0x91
 8009c04:	2200      	movs	r2, #0
 8009c06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8009c08:	693b      	ldr	r3, [r7, #16]
 8009c0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c0e:	4619      	mov	r1, r3
 8009c10:	693a      	ldr	r2, [r7, #16]
 8009c12:	2334      	movs	r3, #52	@ 0x34
 8009c14:	fb01 f303 	mul.w	r3, r1, r3
 8009c18:	4413      	add	r3, r2
 8009c1a:	3392      	adds	r3, #146	@ 0x92
 8009c1c:	2200      	movs	r2, #0
 8009c1e:	701a      	strb	r2, [r3, #0]
            break;
 8009c20:	e17c      	b.n	8009f1c <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8009c22:	7bbb      	ldrb	r3, [r7, #14]
 8009c24:	2b02      	cmp	r3, #2
 8009c26:	d14a      	bne.n	8009cbe <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8009c28:	693b      	ldr	r3, [r7, #16]
 8009c2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c2e:	4619      	mov	r1, r3
 8009c30:	693a      	ldr	r2, [r7, #16]
 8009c32:	2334      	movs	r3, #52	@ 0x34
 8009c34:	fb01 f303 	mul.w	r3, r1, r3
 8009c38:	4413      	add	r3, r2
 8009c3a:	3392      	adds	r3, #146	@ 0x92
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	2b02      	cmp	r3, #2
 8009c40:	d00c      	beq.n	8009c5c <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c48:	4619      	mov	r1, r3
 8009c4a:	693a      	ldr	r2, [r7, #16]
 8009c4c:	2334      	movs	r3, #52	@ 0x34
 8009c4e:	fb01 f303 	mul.w	r3, r1, r3
 8009c52:	4413      	add	r3, r2
 8009c54:	33c1      	adds	r3, #193	@ 0xc1
 8009c56:	2201      	movs	r2, #1
 8009c58:	701a      	strb	r2, [r3, #0]
 8009c5a:	e00b      	b.n	8009c74 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8009c5c:	693b      	ldr	r3, [r7, #16]
 8009c5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c62:	4619      	mov	r1, r3
 8009c64:	693a      	ldr	r2, [r7, #16]
 8009c66:	2334      	movs	r3, #52	@ 0x34
 8009c68:	fb01 f303 	mul.w	r3, r1, r3
 8009c6c:	4413      	add	r3, r2
 8009c6e:	33c1      	adds	r3, #193	@ 0xc1
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c7a:	4619      	mov	r1, r3
 8009c7c:	693a      	ldr	r2, [r7, #16]
 8009c7e:	2334      	movs	r3, #52	@ 0x34
 8009c80:	fb01 f303 	mul.w	r3, r1, r3
 8009c84:	4413      	add	r3, r2
 8009c86:	3390      	adds	r3, #144	@ 0x90
 8009c88:	2205      	movs	r2, #5
 8009c8a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8009c8c:	693b      	ldr	r3, [r7, #16]
 8009c8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009c92:	4619      	mov	r1, r3
 8009c94:	693a      	ldr	r2, [r7, #16]
 8009c96:	2334      	movs	r3, #52	@ 0x34
 8009c98:	fb01 f303 	mul.w	r3, r1, r3
 8009c9c:	4413      	add	r3, r2
 8009c9e:	3391      	adds	r3, #145	@ 0x91
 8009ca0:	2201      	movs	r2, #1
 8009ca2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8009ca4:	693b      	ldr	r3, [r7, #16]
 8009ca6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009caa:	4619      	mov	r1, r3
 8009cac:	693a      	ldr	r2, [r7, #16]
 8009cae:	2334      	movs	r3, #52	@ 0x34
 8009cb0:	fb01 f303 	mul.w	r3, r1, r3
 8009cb4:	4413      	add	r3, r2
 8009cb6:	3392      	adds	r3, #146	@ 0x92
 8009cb8:	2202      	movs	r2, #2
 8009cba:	701a      	strb	r2, [r3, #0]
            break;
 8009cbc:	e12e      	b.n	8009f1c <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8009cbe:	7bbb      	ldrb	r3, [r7, #14]
 8009cc0:	2b04      	cmp	r3, #4
 8009cc2:	f040 812b 	bne.w	8009f1c <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009cc6:	693b      	ldr	r3, [r7, #16]
 8009cc8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ccc:	4619      	mov	r1, r3
 8009cce:	693a      	ldr	r2, [r7, #16]
 8009cd0:	2334      	movs	r3, #52	@ 0x34
 8009cd2:	fb01 f303 	mul.w	r3, r1, r3
 8009cd6:	4413      	add	r3, r2
 8009cd8:	3390      	adds	r3, #144	@ 0x90
 8009cda:	2208      	movs	r2, #8
 8009cdc:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009cde:	693b      	ldr	r3, [r7, #16]
 8009ce0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ce4:	4619      	mov	r1, r3
 8009ce6:	693a      	ldr	r2, [r7, #16]
 8009ce8:	2334      	movs	r3, #52	@ 0x34
 8009cea:	fb01 f303 	mul.w	r3, r1, r3
 8009cee:	4413      	add	r3, r2
 8009cf0:	3391      	adds	r3, #145	@ 0x91
 8009cf2:	2202      	movs	r2, #2
 8009cf4:	701a      	strb	r2, [r3, #0]
            break;
 8009cf6:	e111      	b.n	8009f1c <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8009cf8:	693b      	ldr	r3, [r7, #16]
 8009cfa:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009cfe:	b2d9      	uxtb	r1, r3
 8009d00:	693b      	ldr	r3, [r7, #16]
 8009d02:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d06:	461a      	mov	r2, r3
 8009d08:	2334      	movs	r3, #52	@ 0x34
 8009d0a:	fb02 f303 	mul.w	r3, r2, r3
 8009d0e:	3390      	adds	r3, #144	@ 0x90
 8009d10:	693a      	ldr	r2, [r7, #16]
 8009d12:	4413      	add	r3, r2
 8009d14:	3304      	adds	r3, #4
 8009d16:	461a      	mov	r2, r3
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 fc30 	bl	800a57e <USBH_MSC_SCSI_ReadCapacity>
 8009d1e:	4603      	mov	r3, r0
 8009d20:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009d22:	7bfb      	ldrb	r3, [r7, #15]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d120      	bne.n	8009d6a <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009d28:	693b      	ldr	r3, [r7, #16]
 8009d2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d2e:	4619      	mov	r1, r3
 8009d30:	693a      	ldr	r2, [r7, #16]
 8009d32:	2334      	movs	r3, #52	@ 0x34
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	3390      	adds	r3, #144	@ 0x90
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8009d40:	693b      	ldr	r3, [r7, #16]
 8009d42:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d46:	4619      	mov	r1, r3
 8009d48:	693a      	ldr	r2, [r7, #16]
 8009d4a:	2334      	movs	r3, #52	@ 0x34
 8009d4c:	fb01 f303 	mul.w	r3, r1, r3
 8009d50:	4413      	add	r3, r2
 8009d52:	3391      	adds	r3, #145	@ 0x91
 8009d54:	2200      	movs	r2, #0
 8009d56:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d5e:	3301      	adds	r3, #1
 8009d60:	b29a      	uxth	r2, r3
 8009d62:	693b      	ldr	r3, [r7, #16]
 8009d64:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009d68:	e0da      	b.n	8009f20 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	2b02      	cmp	r3, #2
 8009d6e:	d10c      	bne.n	8009d8a <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8009d70:	693b      	ldr	r3, [r7, #16]
 8009d72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d76:	4619      	mov	r1, r3
 8009d78:	693a      	ldr	r2, [r7, #16]
 8009d7a:	2334      	movs	r3, #52	@ 0x34
 8009d7c:	fb01 f303 	mul.w	r3, r1, r3
 8009d80:	4413      	add	r3, r2
 8009d82:	3390      	adds	r3, #144	@ 0x90
 8009d84:	2205      	movs	r2, #5
 8009d86:	701a      	strb	r2, [r3, #0]
            break;
 8009d88:	e0ca      	b.n	8009f20 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009d8a:	7bfb      	ldrb	r3, [r7, #15]
 8009d8c:	2b04      	cmp	r3, #4
 8009d8e:	f040 80c7 	bne.w	8009f20 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009d98:	4619      	mov	r1, r3
 8009d9a:	693a      	ldr	r2, [r7, #16]
 8009d9c:	2334      	movs	r3, #52	@ 0x34
 8009d9e:	fb01 f303 	mul.w	r3, r1, r3
 8009da2:	4413      	add	r3, r2
 8009da4:	3390      	adds	r3, #144	@ 0x90
 8009da6:	2208      	movs	r2, #8
 8009da8:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009db0:	4619      	mov	r1, r3
 8009db2:	693a      	ldr	r2, [r7, #16]
 8009db4:	2334      	movs	r3, #52	@ 0x34
 8009db6:	fb01 f303 	mul.w	r3, r1, r3
 8009dba:	4413      	add	r3, r2
 8009dbc:	3391      	adds	r3, #145	@ 0x91
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	701a      	strb	r2, [r3, #0]
            break;
 8009dc2:	e0ad      	b.n	8009f20 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009dca:	b2d9      	uxtb	r1, r3
 8009dcc:	693b      	ldr	r3, [r7, #16]
 8009dce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009dd2:	461a      	mov	r2, r3
 8009dd4:	2334      	movs	r3, #52	@ 0x34
 8009dd6:	fb02 f303 	mul.w	r3, r2, r3
 8009dda:	3398      	adds	r3, #152	@ 0x98
 8009ddc:	693a      	ldr	r2, [r7, #16]
 8009dde:	4413      	add	r3, r2
 8009de0:	3304      	adds	r3, #4
 8009de2:	461a      	mov	r2, r3
 8009de4:	6878      	ldr	r0, [r7, #4]
 8009de6:	f000 fce9 	bl	800a7bc <USBH_MSC_SCSI_RequestSense>
 8009dea:	4603      	mov	r3, r0
 8009dec:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8009dee:	7bfb      	ldrb	r3, [r7, #15]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d146      	bne.n	8009e82 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009df4:	693b      	ldr	r3, [r7, #16]
 8009df6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009dfa:	4619      	mov	r1, r3
 8009dfc:	693a      	ldr	r2, [r7, #16]
 8009dfe:	2334      	movs	r3, #52	@ 0x34
 8009e00:	fb01 f303 	mul.w	r3, r1, r3
 8009e04:	4413      	add	r3, r2
 8009e06:	339c      	adds	r3, #156	@ 0x9c
 8009e08:	781b      	ldrb	r3, [r3, #0]
 8009e0a:	2b06      	cmp	r3, #6
 8009e0c:	d00c      	beq.n	8009e28 <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e14:	4619      	mov	r1, r3
 8009e16:	693a      	ldr	r2, [r7, #16]
 8009e18:	2334      	movs	r3, #52	@ 0x34
 8009e1a:	fb01 f303 	mul.w	r3, r1, r3
 8009e1e:	4413      	add	r3, r2
 8009e20:	339c      	adds	r3, #156	@ 0x9c
 8009e22:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8009e24:	2b02      	cmp	r3, #2
 8009e26:	d117      	bne.n	8009e58 <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8009e2e:	693b      	ldr	r3, [r7, #16]
 8009e30:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8009e34:	1ad3      	subs	r3, r2, r3
 8009e36:	f242 720f 	movw	r2, #9999	@ 0x270f
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d80c      	bhi.n	8009e58 <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8009e3e:	693b      	ldr	r3, [r7, #16]
 8009e40:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e44:	4619      	mov	r1, r3
 8009e46:	693a      	ldr	r2, [r7, #16]
 8009e48:	2334      	movs	r3, #52	@ 0x34
 8009e4a:	fb01 f303 	mul.w	r3, r1, r3
 8009e4e:	4413      	add	r3, r2
 8009e50:	3390      	adds	r3, #144	@ 0x90
 8009e52:	2202      	movs	r2, #2
 8009e54:	701a      	strb	r2, [r3, #0]
                  break;
 8009e56:	e066      	b.n	8009f26 <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8009e58:	693b      	ldr	r3, [r7, #16]
 8009e5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e5e:	4619      	mov	r1, r3
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	2334      	movs	r3, #52	@ 0x34
 8009e64:	fb01 f303 	mul.w	r3, r1, r3
 8009e68:	4413      	add	r3, r2
 8009e6a:	3390      	adds	r3, #144	@ 0x90
 8009e6c:	2201      	movs	r2, #1
 8009e6e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8009e70:	693b      	ldr	r3, [r7, #16]
 8009e72:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e76:	3301      	adds	r3, #1
 8009e78:	b29a      	uxth	r2, r3
 8009e7a:	693b      	ldr	r3, [r7, #16]
 8009e7c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009e80:	e050      	b.n	8009f24 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
 8009e84:	2b02      	cmp	r3, #2
 8009e86:	d118      	bne.n	8009eba <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009e88:	693b      	ldr	r3, [r7, #16]
 8009e8a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009e8e:	4619      	mov	r1, r3
 8009e90:	693a      	ldr	r2, [r7, #16]
 8009e92:	2334      	movs	r3, #52	@ 0x34
 8009e94:	fb01 f303 	mul.w	r3, r1, r3
 8009e98:	4413      	add	r3, r2
 8009e9a:	3390      	adds	r3, #144	@ 0x90
 8009e9c:	2208      	movs	r2, #8
 8009e9e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009ea0:	693b      	ldr	r3, [r7, #16]
 8009ea2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	693a      	ldr	r2, [r7, #16]
 8009eaa:	2334      	movs	r3, #52	@ 0x34
 8009eac:	fb01 f303 	mul.w	r3, r1, r3
 8009eb0:	4413      	add	r3, r2
 8009eb2:	3391      	adds	r3, #145	@ 0x91
 8009eb4:	2202      	movs	r2, #2
 8009eb6:	701a      	strb	r2, [r3, #0]
            break;
 8009eb8:	e034      	b.n	8009f24 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8009eba:	7bfb      	ldrb	r3, [r7, #15]
 8009ebc:	2b04      	cmp	r3, #4
 8009ebe:	d131      	bne.n	8009f24 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8009ec0:	693b      	ldr	r3, [r7, #16]
 8009ec2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ec6:	4619      	mov	r1, r3
 8009ec8:	693a      	ldr	r2, [r7, #16]
 8009eca:	2334      	movs	r3, #52	@ 0x34
 8009ecc:	fb01 f303 	mul.w	r3, r1, r3
 8009ed0:	4413      	add	r3, r2
 8009ed2:	3390      	adds	r3, #144	@ 0x90
 8009ed4:	2208      	movs	r2, #8
 8009ed6:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8009ed8:	693b      	ldr	r3, [r7, #16]
 8009eda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ede:	4619      	mov	r1, r3
 8009ee0:	693a      	ldr	r2, [r7, #16]
 8009ee2:	2334      	movs	r3, #52	@ 0x34
 8009ee4:	fb01 f303 	mul.w	r3, r1, r3
 8009ee8:	4413      	add	r3, r2
 8009eea:	3391      	adds	r3, #145	@ 0x91
 8009eec:	2202      	movs	r2, #2
 8009eee:	701a      	strb	r2, [r3, #0]
            break;
 8009ef0:	e018      	b.n	8009f24 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8009ef2:	693b      	ldr	r3, [r7, #16]
 8009ef4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009ef8:	3301      	adds	r3, #1
 8009efa:	b29a      	uxth	r2, r3
 8009efc:	693b      	ldr	r3, [r7, #16]
 8009efe:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8009f02:	e010      	b.n	8009f26 <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 8009f04:	693b      	ldr	r3, [r7, #16]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8009f0c:	693b      	ldr	r3, [r7, #16]
 8009f0e:	220a      	movs	r2, #10
 8009f10:	731a      	strb	r2, [r3, #12]
      break;
 8009f12:	e045      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
            break;
 8009f14:	bf00      	nop
 8009f16:	e043      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
            break;
 8009f18:	bf00      	nop
 8009f1a:	e041      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
            break;
 8009f1c:	bf00      	nop
 8009f1e:	e03f      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
            break;
 8009f20:	bf00      	nop
 8009f22:	e03d      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
            break;
 8009f24:	bf00      	nop
      break;
 8009f26:	e03b      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8009f28:	693b      	ldr	r3, [r7, #16]
 8009f2a:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8009f2e:	693a      	ldr	r2, [r7, #16]
 8009f30:	7812      	ldrb	r2, [r2, #0]
 8009f32:	4293      	cmp	r3, r2
 8009f34:	d228      	bcs.n	8009f88 <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8009f3c:	693b      	ldr	r3, [r7, #16]
 8009f3e:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8009f42:	693b      	ldr	r3, [r7, #16]
 8009f44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8009f48:	4619      	mov	r1, r3
 8009f4a:	693a      	ldr	r2, [r7, #16]
 8009f4c:	2334      	movs	r3, #52	@ 0x34
 8009f4e:	fb01 f303 	mul.w	r3, r1, r3
 8009f52:	4413      	add	r3, r2
 8009f54:	3391      	adds	r3, #145	@ 0x91
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	d106      	bne.n	8009f6a <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8009f62:	2102      	movs	r1, #2
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	4798      	blx	r3
 8009f68:	e005      	b.n	8009f76 <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8009f70:	2106      	movs	r1, #6
 8009f72:	6878      	ldr	r0, [r7, #4]
 8009f74:	4798      	blx	r3
        MSC_Handle->lun++;
 8009f76:	693b      	ldr	r3, [r7, #16]
 8009f78:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8009f7c:	3301      	adds	r3, #1
 8009f7e:	b29a      	uxth	r2, r3
 8009f80:	693b      	ldr	r3, [r7, #16]
 8009f82:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8009f86:	e00b      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	2201      	movs	r2, #1
 8009f94:	731a      	strb	r2, [r3, #12]
      break;
 8009f96:	e003      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	75fb      	strb	r3, [r7, #23]
      break;
 8009f9c:	e000      	b.n	8009fa0 <USBH_MSC_Process+0x5a0>
      break;
 8009f9e:	bf00      	nop
  }
  return error;
 8009fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fa2:	4618      	mov	r0, r3
 8009fa4:	3718      	adds	r7, #24
 8009fa6:	46bd      	mov	sp, r7
 8009fa8:	bd80      	pop	{r7, pc}
 8009faa:	bf00      	nop

08009fac <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009fac:	b480      	push	{r7}
 8009fae:	b083      	sub	sp, #12
 8009fb0:	af00      	add	r7, sp, #0
 8009fb2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009fb4:	2300      	movs	r3, #0
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	370c      	adds	r7, #12
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009fc2:	b580      	push	{r7, lr}
 8009fc4:	b082      	sub	sp, #8
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	2221      	movs	r2, #33	@ 0x21
 8009fce:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	22ff      	movs	r2, #255	@ 0xff
 8009fd4:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2200      	movs	r2, #0
 8009fda:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	2200      	movs	r2, #0
 8009fe6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8009fe8:	2200      	movs	r2, #0
 8009fea:	2100      	movs	r1, #0
 8009fec:	6878      	ldr	r0, [r7, #4]
 8009fee:	f003 fda6 	bl	800db3e <USBH_CtlReq>
 8009ff2:	4603      	mov	r3, r0
}
 8009ff4:	4618      	mov	r0, r3
 8009ff6:	3708      	adds	r7, #8
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009ffc:	b580      	push	{r7, lr}
 8009ffe:	b082      	sub	sp, #8
 800a000:	af00      	add	r7, sp, #0
 800a002:	6078      	str	r0, [r7, #4]
 800a004:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	22a1      	movs	r2, #161	@ 0xa1
 800a00a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	22fe      	movs	r2, #254	@ 0xfe
 800a010:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2200      	movs	r2, #0
 800a016:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	2200      	movs	r2, #0
 800a01c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	2201      	movs	r2, #1
 800a022:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 800a024:	2201      	movs	r2, #1
 800a026:	6839      	ldr	r1, [r7, #0]
 800a028:	6878      	ldr	r0, [r7, #4]
 800a02a:	f003 fd88 	bl	800db3e <USBH_CtlReq>
 800a02e:	4603      	mov	r3, r0
}
 800a030:	4618      	mov	r0, r3
 800a032:	3708      	adds	r7, #8
 800a034:	46bd      	mov	sp, r7
 800a036:	bd80      	pop	{r7, pc}

0800a038 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800a038:	b480      	push	{r7}
 800a03a:	b085      	sub	sp, #20
 800a03c:	af00      	add	r7, sp, #0
 800a03e:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	4a09      	ldr	r2, [pc, #36]	@ (800a074 <USBH_MSC_BOT_Init+0x3c>)
 800a04e:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 800a050:	68fb      	ldr	r3, [r7, #12]
 800a052:	4a09      	ldr	r2, [pc, #36]	@ (800a078 <USBH_MSC_BOT_Init+0x40>)
 800a054:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	2201      	movs	r2, #1
 800a05a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	2201      	movs	r2, #1
 800a062:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 800a066:	2300      	movs	r3, #0
}
 800a068:	4618      	mov	r0, r3
 800a06a:	3714      	adds	r7, #20
 800a06c:	46bd      	mov	sp, r7
 800a06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a072:	4770      	bx	lr
 800a074:	43425355 	.word	0x43425355
 800a078:	20304050 	.word	0x20304050

0800a07c <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800a07c:	b580      	push	{r7, lr}
 800a07e:	b088      	sub	sp, #32
 800a080:	af02      	add	r7, sp, #8
 800a082:	6078      	str	r0, [r7, #4]
 800a084:	460b      	mov	r3, r1
 800a086:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a088:	2301      	movs	r3, #1
 800a08a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 800a08c:	2301      	movs	r3, #1
 800a08e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 800a090:	2301      	movs	r3, #1
 800a092:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a094:	2300      	movs	r3, #0
 800a096:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a09e:	69db      	ldr	r3, [r3, #28]
 800a0a0:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 800a0a2:	2300      	movs	r3, #0
 800a0a4:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800a0a6:	693b      	ldr	r3, [r7, #16]
 800a0a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	2b0a      	cmp	r3, #10
 800a0b0:	f200 819e 	bhi.w	800a3f0 <USBH_MSC_BOT_Process+0x374>
 800a0b4:	a201      	add	r2, pc, #4	@ (adr r2, 800a0bc <USBH_MSC_BOT_Process+0x40>)
 800a0b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0ba:	bf00      	nop
 800a0bc:	0800a0e9 	.word	0x0800a0e9
 800a0c0:	0800a111 	.word	0x0800a111
 800a0c4:	0800a17b 	.word	0x0800a17b
 800a0c8:	0800a199 	.word	0x0800a199
 800a0cc:	0800a21d 	.word	0x0800a21d
 800a0d0:	0800a23f 	.word	0x0800a23f
 800a0d4:	0800a2d7 	.word	0x0800a2d7
 800a0d8:	0800a2f3 	.word	0x0800a2f3
 800a0dc:	0800a345 	.word	0x0800a345
 800a0e0:	0800a375 	.word	0x0800a375
 800a0e4:	0800a3d7 	.word	0x0800a3d7
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800a0e8:	693b      	ldr	r3, [r7, #16]
 800a0ea:	78fa      	ldrb	r2, [r7, #3]
 800a0ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 800a0f0:	693b      	ldr	r3, [r7, #16]
 800a0f2:	2202      	movs	r2, #2
 800a0f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800a0f8:	693b      	ldr	r3, [r7, #16]
 800a0fa:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 800a0fe:	693b      	ldr	r3, [r7, #16]
 800a100:	795b      	ldrb	r3, [r3, #5]
 800a102:	2201      	movs	r2, #1
 800a104:	9200      	str	r2, [sp, #0]
 800a106:	221f      	movs	r2, #31
 800a108:	6878      	ldr	r0, [r7, #4]
 800a10a:	f003 ff26 	bl	800df5a <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 800a10e:	e17e      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a110:	693b      	ldr	r3, [r7, #16]
 800a112:	795b      	ldrb	r3, [r3, #5]
 800a114:	4619      	mov	r1, r3
 800a116:	6878      	ldr	r0, [r7, #4]
 800a118:	f005 f960 	bl	800f3dc <USBH_LL_GetURBState>
 800a11c:	4603      	mov	r3, r0
 800a11e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a120:	7d3b      	ldrb	r3, [r7, #20]
 800a122:	2b01      	cmp	r3, #1
 800a124:	d118      	bne.n	800a158 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	d00f      	beq.n	800a14e <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 800a12e:	693b      	ldr	r3, [r7, #16]
 800a130:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800a134:	b25b      	sxtb	r3, r3
 800a136:	2b00      	cmp	r3, #0
 800a138:	da04      	bge.n	800a144 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800a13a:	693b      	ldr	r3, [r7, #16]
 800a13c:	2203      	movs	r2, #3
 800a13e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a142:	e157      	b.n	800a3f4 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a144:	693b      	ldr	r3, [r7, #16]
 800a146:	2205      	movs	r2, #5
 800a148:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a14c:	e152      	b.n	800a3f4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a14e:	693b      	ldr	r3, [r7, #16]
 800a150:	2207      	movs	r2, #7
 800a152:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a156:	e14d      	b.n	800a3f4 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a158:	7d3b      	ldrb	r3, [r7, #20]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	d104      	bne.n	800a168 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	2201      	movs	r2, #1
 800a162:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a166:	e145      	b.n	800a3f4 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 800a168:	7d3b      	ldrb	r3, [r7, #20]
 800a16a:	2b05      	cmp	r3, #5
 800a16c:	f040 8142 	bne.w	800a3f4 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800a170:	693b      	ldr	r3, [r7, #16]
 800a172:	220a      	movs	r2, #10
 800a174:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a178:	e13c      	b.n	800a3f4 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a17a:	693b      	ldr	r3, [r7, #16]
 800a17c:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	895a      	ldrh	r2, [r3, #10]
 800a184:	693b      	ldr	r3, [r7, #16]
 800a186:	791b      	ldrb	r3, [r3, #4]
 800a188:	6878      	ldr	r0, [r7, #4]
 800a18a:	f003 ff0b 	bl	800dfa4 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 800a18e:	693b      	ldr	r3, [r7, #16]
 800a190:	2204      	movs	r2, #4
 800a192:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 800a196:	e13a      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a198:	693b      	ldr	r3, [r7, #16]
 800a19a:	791b      	ldrb	r3, [r3, #4]
 800a19c:	4619      	mov	r1, r3
 800a19e:	6878      	ldr	r0, [r7, #4]
 800a1a0:	f005 f91c 	bl	800f3dc <USBH_LL_GetURBState>
 800a1a4:	4603      	mov	r3, r0
 800a1a6:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a1a8:	7d3b      	ldrb	r3, [r7, #20]
 800a1aa:	2b01      	cmp	r3, #1
 800a1ac:	d12d      	bne.n	800a20a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 800a1ae:	693b      	ldr	r3, [r7, #16]
 800a1b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1b2:	693a      	ldr	r2, [r7, #16]
 800a1b4:	8952      	ldrh	r2, [r2, #10]
 800a1b6:	4293      	cmp	r3, r2
 800a1b8:	d910      	bls.n	800a1dc <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800a1ba:	693b      	ldr	r3, [r7, #16]
 800a1bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a1c0:	693a      	ldr	r2, [r7, #16]
 800a1c2:	8952      	ldrh	r2, [r2, #10]
 800a1c4:	441a      	add	r2, r3
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1d0:	693a      	ldr	r2, [r7, #16]
 800a1d2:	8952      	ldrh	r2, [r2, #10]
 800a1d4:	1a9a      	subs	r2, r3, r2
 800a1d6:	693b      	ldr	r3, [r7, #16]
 800a1d8:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a1da:	e002      	b.n	800a1e2 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	2200      	movs	r2, #0
 800a1e0:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a1e2:	693b      	ldr	r3, [r7, #16]
 800a1e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d00a      	beq.n	800a200 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800a1ea:	693b      	ldr	r3, [r7, #16]
 800a1ec:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a1f0:	693b      	ldr	r3, [r7, #16]
 800a1f2:	895a      	ldrh	r2, [r3, #10]
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	791b      	ldrb	r3, [r3, #4]
 800a1f8:	6878      	ldr	r0, [r7, #4]
 800a1fa:	f003 fed3 	bl	800dfa4 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 800a1fe:	e0fb      	b.n	800a3f8 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a200:	693b      	ldr	r3, [r7, #16]
 800a202:	2207      	movs	r2, #7
 800a204:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a208:	e0f6      	b.n	800a3f8 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800a20a:	7d3b      	ldrb	r3, [r7, #20]
 800a20c:	2b05      	cmp	r3, #5
 800a20e:	f040 80f3 	bne.w	800a3f8 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	2209      	movs	r2, #9
 800a216:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a21a:	e0ed      	b.n	800a3f8 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a21c:	693b      	ldr	r3, [r7, #16]
 800a21e:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a222:	693b      	ldr	r3, [r7, #16]
 800a224:	891a      	ldrh	r2, [r3, #8]
 800a226:	693b      	ldr	r3, [r7, #16]
 800a228:	795b      	ldrb	r3, [r3, #5]
 800a22a:	2001      	movs	r0, #1
 800a22c:	9000      	str	r0, [sp, #0]
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f003 fe93 	bl	800df5a <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 800a234:	693b      	ldr	r3, [r7, #16]
 800a236:	2206      	movs	r2, #6
 800a238:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a23c:	e0e7      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 800a23e:	693b      	ldr	r3, [r7, #16]
 800a240:	795b      	ldrb	r3, [r3, #5]
 800a242:	4619      	mov	r1, r3
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f005 f8c9 	bl	800f3dc <USBH_LL_GetURBState>
 800a24a:	4603      	mov	r3, r0
 800a24c:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800a24e:	7d3b      	ldrb	r3, [r7, #20]
 800a250:	2b01      	cmp	r3, #1
 800a252:	d12f      	bne.n	800a2b4 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 800a254:	693b      	ldr	r3, [r7, #16]
 800a256:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a258:	693a      	ldr	r2, [r7, #16]
 800a25a:	8912      	ldrh	r2, [r2, #8]
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d910      	bls.n	800a282 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a266:	693a      	ldr	r2, [r7, #16]
 800a268:	8912      	ldrh	r2, [r2, #8]
 800a26a:	441a      	add	r2, r3
 800a26c:	693b      	ldr	r3, [r7, #16]
 800a26e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 800a272:	693b      	ldr	r3, [r7, #16]
 800a274:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a276:	693a      	ldr	r2, [r7, #16]
 800a278:	8912      	ldrh	r2, [r2, #8]
 800a27a:	1a9a      	subs	r2, r3, r2
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	65da      	str	r2, [r3, #92]	@ 0x5c
 800a280:	e002      	b.n	800a288 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 800a282:	693b      	ldr	r3, [r7, #16]
 800a284:	2200      	movs	r2, #0
 800a286:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 800a288:	693b      	ldr	r3, [r7, #16]
 800a28a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d00c      	beq.n	800a2aa <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 800a290:	693b      	ldr	r3, [r7, #16]
 800a292:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 800a296:	693b      	ldr	r3, [r7, #16]
 800a298:	891a      	ldrh	r2, [r3, #8]
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	795b      	ldrb	r3, [r3, #5]
 800a29e:	2001      	movs	r0, #1
 800a2a0:	9000      	str	r0, [sp, #0]
 800a2a2:	6878      	ldr	r0, [r7, #4]
 800a2a4:	f003 fe59 	bl	800df5a <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800a2a8:	e0a8      	b.n	800a3fc <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	2207      	movs	r2, #7
 800a2ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a2b2:	e0a3      	b.n	800a3fc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a2b4:	7d3b      	ldrb	r3, [r7, #20]
 800a2b6:	2b02      	cmp	r3, #2
 800a2b8:	d104      	bne.n	800a2c4 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	2205      	movs	r2, #5
 800a2be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a2c2:	e09b      	b.n	800a3fc <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 800a2c4:	7d3b      	ldrb	r3, [r7, #20]
 800a2c6:	2b05      	cmp	r3, #5
 800a2c8:	f040 8098 	bne.w	800a3fc <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	220a      	movs	r2, #10
 800a2d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a2d4:	e092      	b.n	800a3fc <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800a2d6:	693b      	ldr	r3, [r7, #16]
 800a2d8:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 800a2dc:	693b      	ldr	r3, [r7, #16]
 800a2de:	791b      	ldrb	r3, [r3, #4]
 800a2e0:	220d      	movs	r2, #13
 800a2e2:	6878      	ldr	r0, [r7, #4]
 800a2e4:	f003 fe5e 	bl	800dfa4 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800a2e8:	693b      	ldr	r3, [r7, #16]
 800a2ea:	2208      	movs	r2, #8
 800a2ec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a2f0:	e08d      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	791b      	ldrb	r3, [r3, #4]
 800a2f6:	4619      	mov	r1, r3
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f005 f86f 	bl	800f3dc <USBH_LL_GetURBState>
 800a2fe:	4603      	mov	r3, r0
 800a300:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 800a302:	7d3b      	ldrb	r3, [r7, #20]
 800a304:	2b01      	cmp	r3, #1
 800a306:	d115      	bne.n	800a334 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a308:	693b      	ldr	r3, [r7, #16]
 800a30a:	2201      	movs	r2, #1
 800a30c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 800a310:	693b      	ldr	r3, [r7, #16]
 800a312:	2201      	movs	r2, #1
 800a314:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 f8a9 	bl	800a470 <USBH_MSC_DecodeCSW>
 800a31e:	4603      	mov	r3, r0
 800a320:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 800a322:	7d7b      	ldrb	r3, [r7, #21]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d102      	bne.n	800a32e <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800a328:	2300      	movs	r3, #0
 800a32a:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 800a32c:	e068      	b.n	800a400 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 800a32e:	2302      	movs	r3, #2
 800a330:	75fb      	strb	r3, [r7, #23]
      break;
 800a332:	e065      	b.n	800a400 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 800a334:	7d3b      	ldrb	r3, [r7, #20]
 800a336:	2b05      	cmp	r3, #5
 800a338:	d162      	bne.n	800a400 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a33a:	693b      	ldr	r3, [r7, #16]
 800a33c:	2209      	movs	r2, #9
 800a33e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a342:	e05d      	b.n	800a400 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 800a344:	78fb      	ldrb	r3, [r7, #3]
 800a346:	2200      	movs	r2, #0
 800a348:	4619      	mov	r1, r3
 800a34a:	6878      	ldr	r0, [r7, #4]
 800a34c:	f000 f864 	bl	800a418 <USBH_MSC_BOT_Abort>
 800a350:	4603      	mov	r3, r0
 800a352:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a354:	7dbb      	ldrb	r3, [r7, #22]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d104      	bne.n	800a364 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800a35a:	693b      	ldr	r3, [r7, #16]
 800a35c:	2207      	movs	r2, #7
 800a35e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 800a362:	e04f      	b.n	800a404 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 800a364:	7dbb      	ldrb	r3, [r7, #22]
 800a366:	2b04      	cmp	r3, #4
 800a368:	d14c      	bne.n	800a404 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a36a:	693b      	ldr	r3, [r7, #16]
 800a36c:	220b      	movs	r2, #11
 800a36e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a372:	e047      	b.n	800a404 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 800a374:	78fb      	ldrb	r3, [r7, #3]
 800a376:	2201      	movs	r2, #1
 800a378:	4619      	mov	r1, r3
 800a37a:	6878      	ldr	r0, [r7, #4]
 800a37c:	f000 f84c 	bl	800a418 <USBH_MSC_BOT_Abort>
 800a380:	4603      	mov	r3, r0
 800a382:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 800a384:	7dbb      	ldrb	r3, [r7, #22]
 800a386:	2b00      	cmp	r3, #0
 800a388:	d11d      	bne.n	800a3c6 <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 800a38a:	693b      	ldr	r3, [r7, #16]
 800a38c:	795b      	ldrb	r3, [r3, #5]
 800a38e:	4619      	mov	r1, r3
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f005 f880 	bl	800f496 <USBH_LL_GetToggle>
 800a396:	4603      	mov	r3, r0
 800a398:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 800a39a:	693b      	ldr	r3, [r7, #16]
 800a39c:	7959      	ldrb	r1, [r3, #5]
 800a39e:	7bfb      	ldrb	r3, [r7, #15]
 800a3a0:	f1c3 0301 	rsb	r3, r3, #1
 800a3a4:	b2db      	uxtb	r3, r3
 800a3a6:	461a      	mov	r2, r3
 800a3a8:	6878      	ldr	r0, [r7, #4]
 800a3aa:	f005 f841 	bl	800f430 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 800a3ae:	693b      	ldr	r3, [r7, #16]
 800a3b0:	791b      	ldrb	r3, [r3, #4]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	6878      	ldr	r0, [r7, #4]
 800a3b8:	f005 f83a 	bl	800f430 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800a3bc:	693b      	ldr	r3, [r7, #16]
 800a3be:	2209      	movs	r2, #9
 800a3c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 800a3c4:	e020      	b.n	800a408 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800a3c6:	7dbb      	ldrb	r3, [r7, #22]
 800a3c8:	2b04      	cmp	r3, #4
 800a3ca:	d11d      	bne.n	800a408 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 800a3cc:	693b      	ldr	r3, [r7, #16]
 800a3ce:	220b      	movs	r2, #11
 800a3d0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800a3d4:	e018      	b.n	800a408 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800a3d6:	6878      	ldr	r0, [r7, #4]
 800a3d8:	f7ff fdf3 	bl	8009fc2 <USBH_MSC_BOT_REQ_Reset>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800a3e0:	7dfb      	ldrb	r3, [r7, #23]
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d112      	bne.n	800a40c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	2201      	movs	r2, #1
 800a3ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 800a3ee:	e00d      	b.n	800a40c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 800a3f0:	bf00      	nop
 800a3f2:	e00c      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a3f4:	bf00      	nop
 800a3f6:	e00a      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a3f8:	bf00      	nop
 800a3fa:	e008      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a3fc:	bf00      	nop
 800a3fe:	e006      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a400:	bf00      	nop
 800a402:	e004      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a404:	bf00      	nop
 800a406:	e002      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a408:	bf00      	nop
 800a40a:	e000      	b.n	800a40e <USBH_MSC_BOT_Process+0x392>
      break;
 800a40c:	bf00      	nop
  }
  return status;
 800a40e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a410:	4618      	mov	r0, r3
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
 800a420:	460b      	mov	r3, r1
 800a422:	70fb      	strb	r3, [r7, #3]
 800a424:	4613      	mov	r3, r2
 800a426:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800a428:	2302      	movs	r3, #2
 800a42a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800a436:	78bb      	ldrb	r3, [r7, #2]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d002      	beq.n	800a442 <USBH_MSC_BOT_Abort+0x2a>
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d009      	beq.n	800a454 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 800a440:	e011      	b.n	800a466 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	79db      	ldrb	r3, [r3, #7]
 800a446:	4619      	mov	r1, r3
 800a448:	6878      	ldr	r0, [r7, #4]
 800a44a:	f003 f842 	bl	800d4d2 <USBH_ClrFeature>
 800a44e:	4603      	mov	r3, r0
 800a450:	73fb      	strb	r3, [r7, #15]
      break;
 800a452:	e008      	b.n	800a466 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 800a454:	68bb      	ldr	r3, [r7, #8]
 800a456:	799b      	ldrb	r3, [r3, #6]
 800a458:	4619      	mov	r1, r3
 800a45a:	6878      	ldr	r0, [r7, #4]
 800a45c:	f003 f839 	bl	800d4d2 <USBH_ClrFeature>
 800a460:	4603      	mov	r3, r0
 800a462:	73fb      	strb	r3, [r7, #15]
      break;
 800a464:	bf00      	nop
  }
  return status;
 800a466:	7bfb      	ldrb	r3, [r7, #15]
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3710      	adds	r7, #16
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 800a470:	b580      	push	{r7, lr}
 800a472:	b084      	sub	sp, #16
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a47e:	69db      	ldr	r3, [r3, #28]
 800a480:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 800a482:	2301      	movs	r3, #1
 800a484:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 800a486:	68bb      	ldr	r3, [r7, #8]
 800a488:	791b      	ldrb	r3, [r3, #4]
 800a48a:	4619      	mov	r1, r3
 800a48c:	6878      	ldr	r0, [r7, #4]
 800a48e:	f004 ff13 	bl	800f2b8 <USBH_LL_GetLastXferSize>
 800a492:	4603      	mov	r3, r0
 800a494:	2b0d      	cmp	r3, #13
 800a496:	d002      	beq.n	800a49e <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 800a498:	2302      	movs	r3, #2
 800a49a:	73fb      	strb	r3, [r7, #15]
 800a49c:	e024      	b.n	800a4e8 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800a4a2:	4a14      	ldr	r2, [pc, #80]	@ (800a4f4 <USBH_MSC_DecodeCSW+0x84>)
 800a4a4:	4293      	cmp	r3, r2
 800a4a6:	d11d      	bne.n	800a4e4 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800a4a8:	68bb      	ldr	r3, [r7, #8]
 800a4aa:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a4b0:	429a      	cmp	r2, r3
 800a4b2:	d119      	bne.n	800a4e8 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 800a4b4:	68bb      	ldr	r3, [r7, #8]
 800a4b6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d102      	bne.n	800a4c4 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	73fb      	strb	r3, [r7, #15]
 800a4c2:	e011      	b.n	800a4e8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4ca:	2b01      	cmp	r3, #1
 800a4cc:	d102      	bne.n	800a4d4 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	73fb      	strb	r3, [r7, #15]
 800a4d2:	e009      	b.n	800a4e8 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 800a4d4:	68bb      	ldr	r3, [r7, #8]
 800a4d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800a4da:	2b02      	cmp	r3, #2
 800a4dc:	d104      	bne.n	800a4e8 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 800a4de:	2302      	movs	r3, #2
 800a4e0:	73fb      	strb	r3, [r7, #15]
 800a4e2:	e001      	b.n	800a4e8 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 800a4e4:	2302      	movs	r3, #2
 800a4e6:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800a4e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	bf00      	nop
 800a4f4:	53425355 	.word	0x53425355

0800a4f8 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
 800a500:	460b      	mov	r3, r1
 800a502:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a504:	2302      	movs	r3, #2
 800a506:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a50e:	69db      	ldr	r3, [r3, #28]
 800a510:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 800a512:	68bb      	ldr	r3, [r7, #8]
 800a514:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a518:	2b01      	cmp	r3, #1
 800a51a:	d002      	beq.n	800a522 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 800a51c:	2b02      	cmp	r3, #2
 800a51e:	d021      	beq.n	800a564 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800a520:	e028      	b.n	800a574 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 800a522:	68bb      	ldr	r3, [r7, #8]
 800a524:	2200      	movs	r2, #0
 800a526:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800a528:	68bb      	ldr	r3, [r7, #8]
 800a52a:	2200      	movs	r2, #0
 800a52c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a530:	68bb      	ldr	r3, [r7, #8]
 800a532:	220a      	movs	r2, #10
 800a534:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	3363      	adds	r3, #99	@ 0x63
 800a53c:	2210      	movs	r2, #16
 800a53e:	2100      	movs	r1, #0
 800a540:	4618      	mov	r0, r3
 800a542:	f005 fb2b 	bl	800fb9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	2200      	movs	r2, #0
 800a54a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a54e:	68bb      	ldr	r3, [r7, #8]
 800a550:	2201      	movs	r2, #1
 800a552:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a556:	68bb      	ldr	r3, [r7, #8]
 800a558:	2202      	movs	r2, #2
 800a55a:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 800a55e:	2301      	movs	r3, #1
 800a560:	73fb      	strb	r3, [r7, #15]
      break;
 800a562:	e007      	b.n	800a574 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a564:	78fb      	ldrb	r3, [r7, #3]
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f7ff fd87 	bl	800a07c <USBH_MSC_BOT_Process>
 800a56e:	4603      	mov	r3, r0
 800a570:	73fb      	strb	r3, [r7, #15]
      break;
 800a572:	bf00      	nop
  }

  return error;
 800a574:	7bfb      	ldrb	r3, [r7, #15]
}
 800a576:	4618      	mov	r0, r3
 800a578:	3710      	adds	r7, #16
 800a57a:	46bd      	mov	sp, r7
 800a57c:	bd80      	pop	{r7, pc}

0800a57e <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 800a57e:	b580      	push	{r7, lr}
 800a580:	b086      	sub	sp, #24
 800a582:	af00      	add	r7, sp, #0
 800a584:	60f8      	str	r0, [r7, #12]
 800a586:	460b      	mov	r3, r1
 800a588:	607a      	str	r2, [r7, #4]
 800a58a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 800a58c:	2301      	movs	r3, #1
 800a58e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a596:	69db      	ldr	r3, [r3, #28]
 800a598:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a59a:	693b      	ldr	r3, [r7, #16]
 800a59c:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d002      	beq.n	800a5aa <USBH_MSC_SCSI_ReadCapacity+0x2c>
 800a5a4:	2b02      	cmp	r3, #2
 800a5a6:	d027      	beq.n	800a5f8 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800a5a8:	e05e      	b.n	800a668 <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800a5aa:	693b      	ldr	r3, [r7, #16]
 800a5ac:	2208      	movs	r2, #8
 800a5ae:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a5b0:	693b      	ldr	r3, [r7, #16]
 800a5b2:	2280      	movs	r2, #128	@ 0x80
 800a5b4:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a5b8:	693b      	ldr	r3, [r7, #16]
 800a5ba:	220a      	movs	r2, #10
 800a5bc:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a5c0:	693b      	ldr	r3, [r7, #16]
 800a5c2:	3363      	adds	r3, #99	@ 0x63
 800a5c4:	2210      	movs	r2, #16
 800a5c6:	2100      	movs	r1, #0
 800a5c8:	4618      	mov	r0, r3
 800a5ca:	f005 fae7 	bl	800fb9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 800a5ce:	693b      	ldr	r3, [r7, #16]
 800a5d0:	2225      	movs	r2, #37	@ 0x25
 800a5d2:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	2201      	movs	r2, #1
 800a5da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a5de:	693b      	ldr	r3, [r7, #16]
 800a5e0:	2202      	movs	r2, #2
 800a5e2:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a5e6:	693b      	ldr	r3, [r7, #16]
 800a5e8:	f103 0210 	add.w	r2, r3, #16
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	75fb      	strb	r3, [r7, #23]
      break;
 800a5f6:	e037      	b.n	800a668 <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a5f8:	7afb      	ldrb	r3, [r7, #11]
 800a5fa:	4619      	mov	r1, r3
 800a5fc:	68f8      	ldr	r0, [r7, #12]
 800a5fe:	f7ff fd3d 	bl	800a07c <USBH_MSC_BOT_Process>
 800a602:	4603      	mov	r3, r0
 800a604:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a606:	7dfb      	ldrb	r3, [r7, #23]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d12c      	bne.n	800a666 <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a612:	3303      	adds	r3, #3
 800a614:	781b      	ldrb	r3, [r3, #0]
 800a616:	461a      	mov	r2, r3
 800a618:	693b      	ldr	r3, [r7, #16]
 800a61a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a61e:	3302      	adds	r3, #2
 800a620:	781b      	ldrb	r3, [r3, #0]
 800a622:	021b      	lsls	r3, r3, #8
 800a624:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a62c:	3301      	adds	r3, #1
 800a62e:	781b      	ldrb	r3, [r3, #0]
 800a630:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a632:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800a634:	693b      	ldr	r3, [r7, #16]
 800a636:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	061b      	lsls	r3, r3, #24
 800a63e:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 800a644:	693b      	ldr	r3, [r7, #16]
 800a646:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a64a:	3307      	adds	r3, #7
 800a64c:	781b      	ldrb	r3, [r3, #0]
 800a64e:	461a      	mov	r2, r3
 800a650:	693b      	ldr	r3, [r7, #16]
 800a652:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a656:	3306      	adds	r3, #6
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	021b      	lsls	r3, r3, #8
 800a65c:	b29b      	uxth	r3, r3
 800a65e:	4313      	orrs	r3, r2
 800a660:	b29a      	uxth	r2, r3
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	809a      	strh	r2, [r3, #4]
      break;
 800a666:	bf00      	nop
  }

  return error;
 800a668:	7dfb      	ldrb	r3, [r7, #23]
}
 800a66a:	4618      	mov	r0, r3
 800a66c:	3718      	adds	r7, #24
 800a66e:	46bd      	mov	sp, r7
 800a670:	bd80      	pop	{r7, pc}

0800a672 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 800a672:	b580      	push	{r7, lr}
 800a674:	b086      	sub	sp, #24
 800a676:	af00      	add	r7, sp, #0
 800a678:	60f8      	str	r0, [r7, #12]
 800a67a:	460b      	mov	r3, r1
 800a67c:	607a      	str	r2, [r7, #4]
 800a67e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a680:	2302      	movs	r3, #2
 800a682:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a68e:	693b      	ldr	r3, [r7, #16]
 800a690:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a694:	2b01      	cmp	r3, #1
 800a696:	d002      	beq.n	800a69e <USBH_MSC_SCSI_Inquiry+0x2c>
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d03d      	beq.n	800a718 <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800a69c:	e089      	b.n	800a7b2 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 800a69e:	693b      	ldr	r3, [r7, #16]
 800a6a0:	2224      	movs	r2, #36	@ 0x24
 800a6a2:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a6a4:	693b      	ldr	r3, [r7, #16]
 800a6a6:	2280      	movs	r2, #128	@ 0x80
 800a6a8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	220a      	movs	r2, #10
 800a6b0:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	3363      	adds	r3, #99	@ 0x63
 800a6b8:	220a      	movs	r2, #10
 800a6ba:	2100      	movs	r1, #0
 800a6bc:	4618      	mov	r0, r3
 800a6be:	f005 fa6d 	bl	800fb9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 800a6c2:	693b      	ldr	r3, [r7, #16]
 800a6c4:	2212      	movs	r2, #18
 800a6c6:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800a6ca:	7afb      	ldrb	r3, [r7, #11]
 800a6cc:	015b      	lsls	r3, r3, #5
 800a6ce:	b2da      	uxtb	r2, r3
 800a6d0:	693b      	ldr	r3, [r7, #16]
 800a6d2:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800a6d6:	693b      	ldr	r3, [r7, #16]
 800a6d8:	2200      	movs	r2, #0
 800a6da:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800a6de:	693b      	ldr	r3, [r7, #16]
 800a6e0:	2200      	movs	r2, #0
 800a6e2:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800a6e6:	693b      	ldr	r3, [r7, #16]
 800a6e8:	2224      	movs	r2, #36	@ 0x24
 800a6ea:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800a6ee:	693b      	ldr	r3, [r7, #16]
 800a6f0:	2200      	movs	r2, #0
 800a6f2:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	2202      	movs	r2, #2
 800a702:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a706:	693b      	ldr	r3, [r7, #16]
 800a708:	f103 0210 	add.w	r2, r3, #16
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a712:	2301      	movs	r3, #1
 800a714:	75fb      	strb	r3, [r7, #23]
      break;
 800a716:	e04c      	b.n	800a7b2 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a718:	7afb      	ldrb	r3, [r7, #11]
 800a71a:	4619      	mov	r1, r3
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f7ff fcad 	bl	800a07c <USBH_MSC_BOT_Process>
 800a722:	4603      	mov	r3, r0
 800a724:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a726:	7dfb      	ldrb	r3, [r7, #23]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d141      	bne.n	800a7b0 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800a72c:	2222      	movs	r2, #34	@ 0x22
 800a72e:	2100      	movs	r1, #0
 800a730:	6878      	ldr	r0, [r7, #4]
 800a732:	f005 fa33 	bl	800fb9c <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800a736:	693b      	ldr	r3, [r7, #16]
 800a738:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a73c:	781b      	ldrb	r3, [r3, #0]
 800a73e:	f003 031f 	and.w	r3, r3, #31
 800a742:	b2da      	uxtb	r2, r3
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 800a748:	693b      	ldr	r3, [r7, #16]
 800a74a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	095b      	lsrs	r3, r3, #5
 800a752:	b2da      	uxtb	r2, r3
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 800a758:	693b      	ldr	r3, [r7, #16]
 800a75a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a75e:	3301      	adds	r3, #1
 800a760:	781b      	ldrb	r3, [r3, #0]
 800a762:	b25b      	sxtb	r3, r3
 800a764:	2b00      	cmp	r3, #0
 800a766:	da03      	bge.n	800a770 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	2201      	movs	r2, #1
 800a76c:	709a      	strb	r2, [r3, #2]
 800a76e:	e002      	b.n	800a776 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	2200      	movs	r2, #0
 800a774:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	1cd8      	adds	r0, r3, #3
 800a77a:	693b      	ldr	r3, [r7, #16]
 800a77c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a780:	3308      	adds	r3, #8
 800a782:	2208      	movs	r2, #8
 800a784:	4619      	mov	r1, r3
 800a786:	f005 faa8 	bl	800fcda <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	f103 000c 	add.w	r0, r3, #12
 800a790:	693b      	ldr	r3, [r7, #16]
 800a792:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a796:	3310      	adds	r3, #16
 800a798:	2210      	movs	r2, #16
 800a79a:	4619      	mov	r1, r3
 800a79c:	f005 fa9d 	bl	800fcda <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	331d      	adds	r3, #29
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800a7aa:	3220      	adds	r2, #32
 800a7ac:	6812      	ldr	r2, [r2, #0]
 800a7ae:	601a      	str	r2, [r3, #0]
      break;
 800a7b0:	bf00      	nop
  }

  return error;
 800a7b2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7b4:	4618      	mov	r0, r3
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}

0800a7bc <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800a7bc:	b580      	push	{r7, lr}
 800a7be:	b086      	sub	sp, #24
 800a7c0:	af00      	add	r7, sp, #0
 800a7c2:	60f8      	str	r0, [r7, #12]
 800a7c4:	460b      	mov	r3, r1
 800a7c6:	607a      	str	r2, [r7, #4]
 800a7c8:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800a7ca:	2302      	movs	r3, #2
 800a7cc:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a7d4:	69db      	ldr	r3, [r3, #28]
 800a7d6:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800a7d8:	693b      	ldr	r3, [r7, #16]
 800a7da:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d002      	beq.n	800a7e8 <USBH_MSC_SCSI_RequestSense+0x2c>
 800a7e2:	2b02      	cmp	r3, #2
 800a7e4:	d03d      	beq.n	800a862 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 800a7e6:	e063      	b.n	800a8b0 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800a7e8:	693b      	ldr	r3, [r7, #16]
 800a7ea:	220e      	movs	r2, #14
 800a7ec:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2280      	movs	r2, #128	@ 0x80
 800a7f2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	220a      	movs	r2, #10
 800a7fa:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800a7fe:	693b      	ldr	r3, [r7, #16]
 800a800:	3363      	adds	r3, #99	@ 0x63
 800a802:	2210      	movs	r2, #16
 800a804:	2100      	movs	r1, #0
 800a806:	4618      	mov	r0, r3
 800a808:	f005 f9c8 	bl	800fb9c <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	2203      	movs	r2, #3
 800a810:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800a814:	7afb      	ldrb	r3, [r7, #11]
 800a816:	015b      	lsls	r3, r3, #5
 800a818:	b2da      	uxtb	r2, r3
 800a81a:	693b      	ldr	r3, [r7, #16]
 800a81c:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800a820:	693b      	ldr	r3, [r7, #16]
 800a822:	2200      	movs	r2, #0
 800a824:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800a828:	693b      	ldr	r3, [r7, #16]
 800a82a:	2200      	movs	r2, #0
 800a82c:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 800a830:	693b      	ldr	r3, [r7, #16]
 800a832:	220e      	movs	r2, #14
 800a834:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	2200      	movs	r2, #0
 800a83c:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2202      	movs	r2, #2
 800a84c:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800a850:	693b      	ldr	r3, [r7, #16]
 800a852:	f103 0210 	add.w	r2, r3, #16
 800a856:	693b      	ldr	r3, [r7, #16]
 800a858:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 800a85c:	2301      	movs	r3, #1
 800a85e:	75fb      	strb	r3, [r7, #23]
      break;
 800a860:	e026      	b.n	800a8b0 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 800a862:	7afb      	ldrb	r3, [r7, #11]
 800a864:	4619      	mov	r1, r3
 800a866:	68f8      	ldr	r0, [r7, #12]
 800a868:	f7ff fc08 	bl	800a07c <USBH_MSC_BOT_Process>
 800a86c:	4603      	mov	r3, r0
 800a86e:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800a870:	7dfb      	ldrb	r3, [r7, #23]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d11b      	bne.n	800a8ae <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 800a876:	693b      	ldr	r3, [r7, #16]
 800a878:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a87c:	3302      	adds	r3, #2
 800a87e:	781b      	ldrb	r3, [r3, #0]
 800a880:	f003 030f 	and.w	r3, r3, #15
 800a884:	b2da      	uxtb	r2, r3
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a890:	7b1a      	ldrb	r2, [r3, #12]
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 800a896:	693b      	ldr	r3, [r7, #16]
 800a898:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800a89c:	7b5a      	ldrb	r2, [r3, #13]
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	785b      	ldrb	r3, [r3, #1]
 800a8a6:	2b3a      	cmp	r3, #58	@ 0x3a
 800a8a8:	d101      	bne.n	800a8ae <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800a8aa:	2304      	movs	r3, #4
 800a8ac:	75fb      	strb	r3, [r7, #23]
      break;
 800a8ae:	bf00      	nop
  }

  return error;
 800a8b0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	3718      	adds	r7, #24
 800a8b6:	46bd      	mov	sp, r7
 800a8b8:	bd80      	pop	{r7, pc}

0800a8ba <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a8ba:	b590      	push	{r4, r7, lr}
 800a8bc:	b089      	sub	sp, #36	@ 0x24
 800a8be:	af04      	add	r7, sp, #16
 800a8c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 800a8c2:	2301      	movs	r3, #1
 800a8c4:	2201      	movs	r2, #1
 800a8c6:	2106      	movs	r1, #6
 800a8c8:	6878      	ldr	r0, [r7, #4]
 800a8ca:	f001 ffcd 	bl	800c868 <USBH_FindInterface>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a8d2:	7bfb      	ldrb	r3, [r7, #15]
 800a8d4:	2bff      	cmp	r3, #255	@ 0xff
 800a8d6:	d002      	beq.n	800a8de <USBH_MTP_InterfaceInit+0x24>
 800a8d8:	7bfb      	ldrb	r3, [r7, #15]
 800a8da:	2b09      	cmp	r3, #9
 800a8dc:	d901      	bls.n	800a8e2 <USBH_MTP_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
    return USBH_FAIL;
 800a8de:	2302      	movs	r3, #2
 800a8e0:	e18e      	b.n	800ac00 <USBH_MTP_InterfaceInit+0x346>
  }

  (void)USBH_SelectInterface(phost, interface);
 800a8e2:	7bfb      	ldrb	r3, [r7, #15]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	6878      	ldr	r0, [r7, #4]
 800a8e8:	f001 ffa2 	bl	800c830 <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
 800a8ee:	4619      	mov	r1, r3
 800a8f0:	6878      	ldr	r0, [r7, #4]
 800a8f2:	f001 ff9d 	bl	800c830 <USBH_SelectInterface>
 800a8f6:	4603      	mov	r3, r0
 800a8f8:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a8fa:	7bbb      	ldrb	r3, [r7, #14]
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d001      	beq.n	800a904 <USBH_MTP_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 800a900:	2302      	movs	r3, #2
 800a902:	e17d      	b.n	800ac00 <USBH_MTP_InterfaceInit+0x346>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 800a904:	6878      	ldr	r0, [r7, #4]
 800a906:	f000 f97f 	bl	800ac08 <MTP_FindCtlEndpoint>
 800a90a:	4603      	mov	r3, r0
 800a90c:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 800a90e:	7b7b      	ldrb	r3, [r7, #13]
 800a910:	2bff      	cmp	r3, #255	@ 0xff
 800a912:	d002      	beq.n	800a91a <USBH_MTP_InterfaceInit+0x60>
 800a914:	7b7b      	ldrb	r3, [r7, #13]
 800a916:	2b04      	cmp	r3, #4
 800a918:	d901      	bls.n	800a91e <USBH_MTP_InterfaceInit+0x64>
  {
    USBH_DbgLog("Invalid Control endpoint number");
    return USBH_FAIL;
 800a91a:	2302      	movs	r3, #2
 800a91c:	e170      	b.n	800ac00 <USBH_MTP_InterfaceInit+0x346>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 800a924:	f242 10d0 	movw	r0, #8656	@ 0x21d0
 800a928:	f004 fe3c 	bl	800f5a4 <malloc>
 800a92c:	4603      	mov	r3, r0
 800a92e:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a936:	69db      	ldr	r3, [r3, #28]
 800a938:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d101      	bne.n	800a944 <USBH_MTP_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
    return USBH_FAIL;
 800a940:	2302      	movs	r3, #2
 800a942:	e15d      	b.n	800ac00 <USBH_MTP_InterfaceInit+0x346>
  }

  /* Initialize mtp handler */
  (void)USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 800a944:	f242 12d0 	movw	r2, #8656	@ 0x21d0
 800a948:	2100      	movs	r1, #0
 800a94a:	68b8      	ldr	r0, [r7, #8]
 800a94c:	f005 f926 	bl	800fb9c <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800a950:	7bfb      	ldrb	r3, [r7, #15]
 800a952:	7b79      	ldrb	r1, [r7, #13]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	3101      	adds	r1, #1
 800a958:	00c9      	lsls	r1, r1, #3
 800a95a:	2032      	movs	r0, #50	@ 0x32
 800a95c:	fb00 f303 	mul.w	r3, r0, r3
 800a960:	440b      	add	r3, r1
 800a962:	4413      	add	r3, r2
 800a964:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800a968:	781a      	ldrb	r2, [r3, #0]
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a970:	f883 2d31 	strb.w	r2, [r3, #3377]	@ 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800a974:	7bfb      	ldrb	r3, [r7, #15]
 800a976:	7b79      	ldrb	r1, [r7, #13]
 800a978:	687a      	ldr	r2, [r7, #4]
 800a97a:	3101      	adds	r1, #1
 800a97c:	00c9      	lsls	r1, r1, #3
 800a97e:	2032      	movs	r0, #50	@ 0x32
 800a980:	fb00 f303 	mul.w	r3, r0, r3
 800a984:	440b      	add	r3, r1
 800a986:	4413      	add	r3, r2
 800a988:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800a98c:	881a      	ldrh	r2, [r3, #0]
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a994:	f8a3 2d36 	strh.w	r2, [r3, #3382]	@ 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a99e:	f893 3d31 	ldrb.w	r3, [r3, #3377]	@ 0xd31
 800a9a2:	4619      	mov	r1, r3
 800a9a4:	6878      	ldr	r0, [r7, #4]
 800a9a6:	f003 fb84 	bl	800e0b2 <USBH_AllocPipe>
 800a9aa:	4603      	mov	r3, r0
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	68bb      	ldr	r3, [r7, #8]
 800a9b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9b4:	f883 2d2e 	strb.w	r2, [r3, #3374]	@ 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 800a9b8:	7bfb      	ldrb	r3, [r7, #15]
 800a9ba:	7b79      	ldrb	r1, [r7, #13]
 800a9bc:	687a      	ldr	r2, [r7, #4]
 800a9be:	3101      	adds	r1, #1
 800a9c0:	00c9      	lsls	r1, r1, #3
 800a9c2:	2032      	movs	r0, #50	@ 0x32
 800a9c4:	fb00 f303 	mul.w	r3, r0, r3
 800a9c8:	440b      	add	r3, r1
 800a9ca:	4413      	add	r3, r2
 800a9cc:	f203 334a 	addw	r3, r3, #842	@ 0x34a
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	461a      	mov	r2, r3
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9da:	f8a3 2d44 	strh.w	r2, [r3, #3396]	@ 0xd44

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->NotificationPipe, MTP_Handle->NotificationEp,
 800a9de:	68bb      	ldr	r3, [r7, #8]
 800a9e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9e4:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	@ 0xd2e
 800a9e8:	68bb      	ldr	r3, [r7, #8]
 800a9ea:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9ee:	f893 0d31 	ldrb.w	r0, [r3, #3377]	@ 0xd31
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aa04:	f8b2 2d36 	ldrh.w	r2, [r2, #3382]	@ 0xd36
 800aa08:	9202      	str	r2, [sp, #8]
 800aa0a:	2203      	movs	r2, #3
 800aa0c:	9201      	str	r2, [sp, #4]
 800aa0e:	9300      	str	r3, [sp, #0]
 800aa10:	4623      	mov	r3, r4
 800aa12:	4602      	mov	r2, r0
 800aa14:	6878      	ldr	r0, [r7, #4]
 800aa16:	f003 fb1d 	bl	800e054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      MTP_Handle->NotificationEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa20:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800aa24:	2200      	movs	r2, #0
 800aa26:	4619      	mov	r1, r3
 800aa28:	6878      	ldr	r0, [r7, #4]
 800aa2a:	f004 fd01 	bl	800f430 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 800aa2e:	6878      	ldr	r0, [r7, #4]
 800aa30:	f000 f99e 	bl	800ad70 <MTP_FindDataInEndpoint>
 800aa34:	4603      	mov	r3, r0
 800aa36:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 800aa38:	7b7b      	ldrb	r3, [r7, #13]
 800aa3a:	2bff      	cmp	r3, #255	@ 0xff
 800aa3c:	d002      	beq.n	800aa44 <USBH_MTP_InterfaceInit+0x18a>
 800aa3e:	7b7b      	ldrb	r3, [r7, #13]
 800aa40:	2b04      	cmp	r3, #4
 800aa42:	d901      	bls.n	800aa48 <USBH_MTP_InterfaceInit+0x18e>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
    return USBH_FAIL;
 800aa44:	2302      	movs	r3, #2
 800aa46:	e0db      	b.n	800ac00 <USBH_MTP_InterfaceInit+0x346>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	7b79      	ldrb	r1, [r7, #13]
 800aa4c:	687a      	ldr	r2, [r7, #4]
 800aa4e:	3101      	adds	r1, #1
 800aa50:	00c9      	lsls	r1, r1, #3
 800aa52:	2032      	movs	r0, #50	@ 0x32
 800aa54:	fb00 f303 	mul.w	r3, r0, r3
 800aa58:	440b      	add	r3, r1
 800aa5a:	4413      	add	r3, r2
 800aa5c:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800aa60:	781a      	ldrb	r2, [r3, #0]
 800aa62:	68bb      	ldr	r3, [r7, #8]
 800aa64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa68:	f883 2d30 	strb.w	r2, [r3, #3376]	@ 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800aa6c:	7bfb      	ldrb	r3, [r7, #15]
 800aa6e:	7b79      	ldrb	r1, [r7, #13]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	3101      	adds	r1, #1
 800aa74:	00c9      	lsls	r1, r1, #3
 800aa76:	2032      	movs	r0, #50	@ 0x32
 800aa78:	fb00 f303 	mul.w	r3, r0, r3
 800aa7c:	440b      	add	r3, r1
 800aa7e:	4413      	add	r3, r2
 800aa80:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800aa84:	881a      	ldrh	r2, [r3, #0]
 800aa86:	68bb      	ldr	r3, [r7, #8]
 800aa88:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa8c:	f8a3 2d34 	strh.w	r2, [r3, #3380]	@ 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 800aa90:	68bb      	ldr	r3, [r7, #8]
 800aa92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aa96:	f893 3d30 	ldrb.w	r3, [r3, #3376]	@ 0xd30
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	6878      	ldr	r0, [r7, #4]
 800aa9e:	f003 fb08 	bl	800e0b2 <USBH_AllocPipe>
 800aaa2:	4603      	mov	r3, r0
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	68bb      	ldr	r3, [r7, #8]
 800aaa8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaac:	f883 2d2c 	strb.w	r2, [r3, #3372]	@ 0xd2c

  /* Open pipe for DATA IN endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 800aab0:	68bb      	ldr	r3, [r7, #8]
 800aab2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aab6:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aac0:	f893 0d30 	ldrb.w	r0, [r3, #3376]	@ 0xd30
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aad0:	68ba      	ldr	r2, [r7, #8]
 800aad2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aad6:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	@ 0xd34
 800aada:	9202      	str	r2, [sp, #8]
 800aadc:	2202      	movs	r2, #2
 800aade:	9201      	str	r2, [sp, #4]
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	4623      	mov	r3, r4
 800aae4:	4602      	mov	r2, r0
 800aae6:	6878      	ldr	r0, [r7, #4]
 800aae8:	f003 fab4 	bl	800e054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataInEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 800aaec:	68bb      	ldr	r3, [r7, #8]
 800aaee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aaf2:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800aaf6:	2200      	movs	r2, #0
 800aaf8:	4619      	mov	r1, r3
 800aafa:	6878      	ldr	r0, [r7, #4]
 800aafc:	f004 fc98 	bl	800f430 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 800ab00:	6878      	ldr	r0, [r7, #4]
 800ab02:	f000 f8db 	bl	800acbc <MTP_FindDataOutEndpoint>
 800ab06:	4603      	mov	r3, r0
 800ab08:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 800ab0a:	7b7b      	ldrb	r3, [r7, #13]
 800ab0c:	2bff      	cmp	r3, #255	@ 0xff
 800ab0e:	d002      	beq.n	800ab16 <USBH_MTP_InterfaceInit+0x25c>
 800ab10:	7b7b      	ldrb	r3, [r7, #13]
 800ab12:	2b04      	cmp	r3, #4
 800ab14:	d901      	bls.n	800ab1a <USBH_MTP_InterfaceInit+0x260>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
    return USBH_FAIL;
 800ab16:	2302      	movs	r3, #2
 800ab18:	e072      	b.n	800ac00 <USBH_MTP_InterfaceInit+0x346>
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 800ab1a:	7bfb      	ldrb	r3, [r7, #15]
 800ab1c:	7b79      	ldrb	r1, [r7, #13]
 800ab1e:	687a      	ldr	r2, [r7, #4]
 800ab20:	3101      	adds	r1, #1
 800ab22:	00c9      	lsls	r1, r1, #3
 800ab24:	2032      	movs	r0, #50	@ 0x32
 800ab26:	fb00 f303 	mul.w	r3, r0, r3
 800ab2a:	440b      	add	r3, r1
 800ab2c:	4413      	add	r3, r2
 800ab2e:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800ab32:	781a      	ldrb	r2, [r3, #0]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab3a:	f883 2d2f 	strb.w	r2, [r3, #3375]	@ 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 800ab3e:	7bfb      	ldrb	r3, [r7, #15]
 800ab40:	7b79      	ldrb	r1, [r7, #13]
 800ab42:	687a      	ldr	r2, [r7, #4]
 800ab44:	3101      	adds	r1, #1
 800ab46:	00c9      	lsls	r1, r1, #3
 800ab48:	2032      	movs	r0, #50	@ 0x32
 800ab4a:	fb00 f303 	mul.w	r3, r0, r3
 800ab4e:	440b      	add	r3, r1
 800ab50:	4413      	add	r3, r2
 800ab52:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800ab56:	881a      	ldrh	r2, [r3, #0]
 800ab58:	68bb      	ldr	r3, [r7, #8]
 800ab5a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab5e:	f8a3 2d32 	strh.w	r2, [r3, #3378]	@ 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 800ab62:	68bb      	ldr	r3, [r7, #8]
 800ab64:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab68:	f893 3d2f 	ldrb.w	r3, [r3, #3375]	@ 0xd2f
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	6878      	ldr	r0, [r7, #4]
 800ab70:	f003 fa9f 	bl	800e0b2 <USBH_AllocPipe>
 800ab74:	4603      	mov	r3, r0
 800ab76:	461a      	mov	r2, r3
 800ab78:	68bb      	ldr	r3, [r7, #8]
 800ab7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab7e:	f883 2d2d 	strb.w	r2, [r3, #3373]	@ 0xd2d

  /* Open pipe for DATA OUT endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 800ab82:	68bb      	ldr	r3, [r7, #8]
 800ab84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab88:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	@ 0xd2d
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ab92:	f893 0d2f 	ldrb.w	r0, [r3, #3375]	@ 0xd2f
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aba2:	68ba      	ldr	r2, [r7, #8]
 800aba4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800aba8:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800abac:	9202      	str	r2, [sp, #8]
 800abae:	2202      	movs	r2, #2
 800abb0:	9201      	str	r2, [sp, #4]
 800abb2:	9300      	str	r3, [sp, #0]
 800abb4:	4623      	mov	r3, r4
 800abb6:	4602      	mov	r2, r0
 800abb8:	6878      	ldr	r0, [r7, #4]
 800abba:	f003 fa4b 	bl	800e054 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataOutEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abc4:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800abc8:	2200      	movs	r2, #0
 800abca:	4619      	mov	r1, r3
 800abcc:	6878      	ldr	r0, [r7, #4]
 800abce:	f004 fc2f 	bl	800f430 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 800abd2:	68bb      	ldr	r3, [r7, #8]
 800abd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abd8:	2202      	movs	r2, #2
 800abda:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
  MTP_Handle->is_ready = 0U;
 800abde:	68bb      	ldr	r3, [r7, #8]
 800abe0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800abe4:	461a      	mov	r2, r3
 800abe6:	2300      	movs	r3, #0
 800abe8:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 800abec:	68bb      	ldr	r3, [r7, #8]
 800abee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800abf2:	2200      	movs	r2, #0
 800abf4:	f883 2d3c 	strb.w	r2, [r3, #3388]	@ 0xd3c

  return USBH_PTP_Init(phost);
 800abf8:	6878      	ldr	r0, [r7, #4]
 800abfa:	f000 fb53 	bl	800b2a4 <USBH_PTP_Init>
 800abfe:	4603      	mov	r3, r0
}
 800ac00:	4618      	mov	r0, r3
 800ac02:	3714      	adds	r7, #20
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd90      	pop	{r4, r7, pc}

0800ac08 <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 800ac08:	b480      	push	{r7}
 800ac0a:	b085      	sub	sp, #20
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800ac10:	2300      	movs	r3, #0
 800ac12:	73fb      	strb	r3, [r7, #15]
 800ac14:	e048      	b.n	800aca8 <MTP_FindCtlEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800ac16:	7bfb      	ldrb	r3, [r7, #15]
 800ac18:	687a      	ldr	r2, [r7, #4]
 800ac1a:	2132      	movs	r1, #50	@ 0x32
 800ac1c:	fb01 f303 	mul.w	r3, r1, r3
 800ac20:	4413      	add	r3, r2
 800ac22:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800ac26:	781b      	ldrb	r3, [r3, #0]
 800ac28:	2b06      	cmp	r3, #6
 800ac2a:	d13a      	bne.n	800aca2 <MTP_FindCtlEndpoint+0x9a>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	73bb      	strb	r3, [r7, #14]
 800ac30:	e034      	b.n	800ac9c <MTP_FindCtlEndpoint+0x94>
      {
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800ac32:	7bfb      	ldrb	r3, [r7, #15]
 800ac34:	7bb9      	ldrb	r1, [r7, #14]
 800ac36:	687a      	ldr	r2, [r7, #4]
 800ac38:	3101      	adds	r1, #1
 800ac3a:	00c9      	lsls	r1, r1, #3
 800ac3c:	2032      	movs	r0, #50	@ 0x32
 800ac3e:	fb00 f303 	mul.w	r3, r0, r3
 800ac42:	440b      	add	r3, r1
 800ac44:	4413      	add	r3, r2
 800ac46:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800ac4a:	781b      	ldrb	r3, [r3, #0]
 800ac4c:	b25b      	sxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	da21      	bge.n	800ac96 <MTP_FindCtlEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
 800ac54:	7bb9      	ldrb	r1, [r7, #14]
 800ac56:	687a      	ldr	r2, [r7, #4]
 800ac58:	3101      	adds	r1, #1
 800ac5a:	00c9      	lsls	r1, r1, #3
 800ac5c:	2032      	movs	r0, #50	@ 0x32
 800ac5e:	fb00 f303 	mul.w	r3, r0, r3
 800ac62:	440b      	add	r3, r1
 800ac64:	4413      	add	r3, r2
 800ac66:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800ac6a:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d012      	beq.n	800ac96 <MTP_FindCtlEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 800ac70:	7bfb      	ldrb	r3, [r7, #15]
 800ac72:	7bb9      	ldrb	r1, [r7, #14]
 800ac74:	687a      	ldr	r2, [r7, #4]
 800ac76:	3101      	adds	r1, #1
 800ac78:	00c9      	lsls	r1, r1, #3
 800ac7a:	2032      	movs	r0, #50	@ 0x32
 800ac7c:	fb00 f303 	mul.w	r3, r0, r3
 800ac80:	440b      	add	r3, r1
 800ac82:	4413      	add	r3, r2
 800ac84:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800ac88:	781b      	ldrb	r3, [r3, #0]
 800ac8a:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800ac8e:	2b03      	cmp	r3, #3
 800ac90:	d101      	bne.n	800ac96 <MTP_FindCtlEndpoint+0x8e>
        {
          return endpoint;
 800ac92:	7bbb      	ldrb	r3, [r7, #14]
 800ac94:	e00c      	b.n	800acb0 <MTP_FindCtlEndpoint+0xa8>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800ac96:	7bbb      	ldrb	r3, [r7, #14]
 800ac98:	3301      	adds	r3, #1
 800ac9a:	73bb      	strb	r3, [r7, #14]
 800ac9c:	7bbb      	ldrb	r3, [r7, #14]
 800ac9e:	2b04      	cmp	r3, #4
 800aca0:	d9c7      	bls.n	800ac32 <MTP_FindCtlEndpoint+0x2a>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800aca2:	7bfb      	ldrb	r3, [r7, #15]
 800aca4:	3301      	adds	r3, #1
 800aca6:	73fb      	strb	r3, [r7, #15]
 800aca8:	7bfb      	ldrb	r3, [r7, #15]
 800acaa:	2b09      	cmp	r3, #9
 800acac:	d9b3      	bls.n	800ac16 <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800acae:	23ff      	movs	r3, #255	@ 0xff
}
 800acb0:	4618      	mov	r0, r3
 800acb2:	3714      	adds	r7, #20
 800acb4:	46bd      	mov	sp, r7
 800acb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acba:	4770      	bx	lr

0800acbc <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 800acbc:	b480      	push	{r7}
 800acbe:	b085      	sub	sp, #20
 800acc0:	af00      	add	r7, sp, #0
 800acc2:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800acc4:	2300      	movs	r3, #0
 800acc6:	73fb      	strb	r3, [r7, #15]
 800acc8:	e048      	b.n	800ad5c <MTP_FindDataOutEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800acca:	7bfb      	ldrb	r3, [r7, #15]
 800accc:	687a      	ldr	r2, [r7, #4]
 800acce:	2132      	movs	r1, #50	@ 0x32
 800acd0:	fb01 f303 	mul.w	r3, r1, r3
 800acd4:	4413      	add	r3, r2
 800acd6:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800acda:	781b      	ldrb	r3, [r3, #0]
 800acdc:	2b06      	cmp	r3, #6
 800acde:	d13a      	bne.n	800ad56 <MTP_FindDataOutEndpoint+0x9a>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800ace0:	2300      	movs	r3, #0
 800ace2:	73bb      	strb	r3, [r7, #14]
 800ace4:	e034      	b.n	800ad50 <MTP_FindDataOutEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800ace6:	7bfb      	ldrb	r3, [r7, #15]
 800ace8:	7bb9      	ldrb	r1, [r7, #14]
 800acea:	687a      	ldr	r2, [r7, #4]
 800acec:	3101      	adds	r1, #1
 800acee:	00c9      	lsls	r1, r1, #3
 800acf0:	2032      	movs	r0, #50	@ 0x32
 800acf2:	fb00 f303 	mul.w	r3, r0, r3
 800acf6:	440b      	add	r3, r1
 800acf8:	4413      	add	r3, r2
 800acfa:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800acfe:	781b      	ldrb	r3, [r3, #0]
 800ad00:	b25b      	sxtb	r3, r3
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	db21      	blt.n	800ad4a <MTP_FindDataOutEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800ad06:	7bfb      	ldrb	r3, [r7, #15]
 800ad08:	7bb9      	ldrb	r1, [r7, #14]
 800ad0a:	687a      	ldr	r2, [r7, #4]
 800ad0c:	3101      	adds	r1, #1
 800ad0e:	00c9      	lsls	r1, r1, #3
 800ad10:	2032      	movs	r0, #50	@ 0x32
 800ad12:	fb00 f303 	mul.w	r3, r0, r3
 800ad16:	440b      	add	r3, r1
 800ad18:	4413      	add	r3, r2
 800ad1a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800ad1e:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d012      	beq.n	800ad4a <MTP_FindDataOutEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800ad24:	7bfb      	ldrb	r3, [r7, #15]
 800ad26:	7bb9      	ldrb	r1, [r7, #14]
 800ad28:	687a      	ldr	r2, [r7, #4]
 800ad2a:	3101      	adds	r1, #1
 800ad2c:	00c9      	lsls	r1, r1, #3
 800ad2e:	2032      	movs	r0, #50	@ 0x32
 800ad30:	fb00 f303 	mul.w	r3, r0, r3
 800ad34:	440b      	add	r3, r1
 800ad36:	4413      	add	r3, r2
 800ad38:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800ad3c:	781b      	ldrb	r3, [r3, #0]
 800ad3e:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d001      	beq.n	800ad4a <MTP_FindDataOutEndpoint+0x8e>
        {
          return endpoint;
 800ad46:	7bbb      	ldrb	r3, [r7, #14]
 800ad48:	e00c      	b.n	800ad64 <MTP_FindDataOutEndpoint+0xa8>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800ad4a:	7bbb      	ldrb	r3, [r7, #14]
 800ad4c:	3301      	adds	r3, #1
 800ad4e:	73bb      	strb	r3, [r7, #14]
 800ad50:	7bbb      	ldrb	r3, [r7, #14]
 800ad52:	2b04      	cmp	r3, #4
 800ad54:	d9c7      	bls.n	800ace6 <MTP_FindDataOutEndpoint+0x2a>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800ad56:	7bfb      	ldrb	r3, [r7, #15]
 800ad58:	3301      	adds	r3, #1
 800ad5a:	73fb      	strb	r3, [r7, #15]
 800ad5c:	7bfb      	ldrb	r3, [r7, #15]
 800ad5e:	2b09      	cmp	r3, #9
 800ad60:	d9b3      	bls.n	800acca <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800ad62:	23ff      	movs	r3, #255	@ 0xff
}
 800ad64:	4618      	mov	r0, r3
 800ad66:	3714      	adds	r7, #20
 800ad68:	46bd      	mov	sp, r7
 800ad6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6e:	4770      	bx	lr

0800ad70 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 800ad70:	b480      	push	{r7}
 800ad72:	b085      	sub	sp, #20
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800ad78:	2300      	movs	r3, #0
 800ad7a:	73fb      	strb	r3, [r7, #15]
 800ad7c:	e048      	b.n	800ae10 <MTP_FindDataInEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 800ad7e:	7bfb      	ldrb	r3, [r7, #15]
 800ad80:	687a      	ldr	r2, [r7, #4]
 800ad82:	2132      	movs	r1, #50	@ 0x32
 800ad84:	fb01 f303 	mul.w	r3, r1, r3
 800ad88:	4413      	add	r3, r2
 800ad8a:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	2b06      	cmp	r3, #6
 800ad92:	d13a      	bne.n	800ae0a <MTP_FindDataInEndpoint+0x9a>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800ad94:	2300      	movs	r3, #0
 800ad96:	73bb      	strb	r3, [r7, #14]
 800ad98:	e034      	b.n	800ae04 <MTP_FindDataInEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800ad9a:	7bfb      	ldrb	r3, [r7, #15]
 800ad9c:	7bb9      	ldrb	r1, [r7, #14]
 800ad9e:	687a      	ldr	r2, [r7, #4]
 800ada0:	3101      	adds	r1, #1
 800ada2:	00c9      	lsls	r1, r1, #3
 800ada4:	2032      	movs	r0, #50	@ 0x32
 800ada6:	fb00 f303 	mul.w	r3, r0, r3
 800adaa:	440b      	add	r3, r1
 800adac:	4413      	add	r3, r2
 800adae:	f203 3346 	addw	r3, r3, #838	@ 0x346
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	b25b      	sxtb	r3, r3
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	da21      	bge.n	800adfe <MTP_FindDataInEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800adba:	7bfb      	ldrb	r3, [r7, #15]
 800adbc:	7bb9      	ldrb	r1, [r7, #14]
 800adbe:	687a      	ldr	r2, [r7, #4]
 800adc0:	3101      	adds	r1, #1
 800adc2:	00c9      	lsls	r1, r1, #3
 800adc4:	2032      	movs	r0, #50	@ 0x32
 800adc6:	fb00 f303 	mul.w	r3, r0, r3
 800adca:	440b      	add	r3, r1
 800adcc:	4413      	add	r3, r2
 800adce:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800add2:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 800add4:	2b00      	cmp	r3, #0
 800add6:	d012      	beq.n	800adfe <MTP_FindDataInEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 800add8:	7bfb      	ldrb	r3, [r7, #15]
 800adda:	7bb9      	ldrb	r1, [r7, #14]
 800addc:	687a      	ldr	r2, [r7, #4]
 800adde:	3101      	adds	r1, #1
 800ade0:	00c9      	lsls	r1, r1, #3
 800ade2:	2032      	movs	r0, #50	@ 0x32
 800ade4:	fb00 f303 	mul.w	r3, r0, r3
 800ade8:	440b      	add	r3, r1
 800adea:	4413      	add	r3, r2
 800adec:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800adf0:	781b      	ldrb	r3, [r3, #0]
 800adf2:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d001      	beq.n	800adfe <MTP_FindDataInEndpoint+0x8e>
        {
          return endpoint;
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	e00c      	b.n	800ae18 <MTP_FindDataInEndpoint+0xa8>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 800adfe:	7bbb      	ldrb	r3, [r7, #14]
 800ae00:	3301      	adds	r3, #1
 800ae02:	73bb      	strb	r3, [r7, #14]
 800ae04:	7bbb      	ldrb	r3, [r7, #14]
 800ae06:	2b04      	cmp	r3, #4
 800ae08:	d9c7      	bls.n	800ad9a <MTP_FindDataInEndpoint+0x2a>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 800ae0a:	7bfb      	ldrb	r3, [r7, #15]
 800ae0c:	3301      	adds	r3, #1
 800ae0e:	73fb      	strb	r3, [r7, #15]
 800ae10:	7bfb      	ldrb	r3, [r7, #15]
 800ae12:	2b09      	cmp	r3, #9
 800ae14:	d9b3      	bls.n	800ad7e <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 800ae16:	23ff      	movs	r3, #255	@ 0xff
}
 800ae18:	4618      	mov	r0, r3
 800ae1a:	3714      	adds	r7, #20
 800ae1c:	46bd      	mov	sp, r7
 800ae1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae22:	4770      	bx	lr

0800ae24 <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b084      	sub	sp, #16
 800ae28:	af00      	add	r7, sp, #0
 800ae2a:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ae32:	69db      	ldr	r3, [r3, #28]
 800ae34:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae3c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d017      	beq.n	800ae74 <USBH_MTP_InterfaceDeInit+0x50>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae4a:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f003 f91e 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 800ae56:	68fb      	ldr	r3, [r7, #12]
 800ae58:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae5c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800ae60:	4619      	mov	r1, r3
 800ae62:	6878      	ldr	r0, [r7, #4]
 800ae64:	f003 f947 	bl	800e0f6 <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 800ae68:	68fb      	ldr	r3, [r7, #12]
 800ae6a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae6e:	2200      	movs	r2, #0
 800ae70:	f883 2d2d 	strb.w	r2, [r3, #3373]	@ 0xd2d
  }

  if (MTP_Handle->DataInPipe != 0U)
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae7a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d017      	beq.n	800aeb2 <USBH_MTP_InterfaceDeInit+0x8e>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 800ae82:	68fb      	ldr	r3, [r7, #12]
 800ae84:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae88:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800ae8c:	4619      	mov	r1, r3
 800ae8e:	6878      	ldr	r0, [r7, #4]
 800ae90:	f003 f8ff 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800ae9a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800ae9e:	4619      	mov	r1, r3
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f003 f928 	bl	800e0f6 <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeac:	2200      	movs	r2, #0
 800aeae:	f883 2d2c 	strb.w	r2, [r3, #3372]	@ 0xd2c
  }

  if (MTP_Handle->NotificationPipe != 0U)
 800aeb2:	68fb      	ldr	r3, [r7, #12]
 800aeb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeb8:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d017      	beq.n	800aef0 <USBH_MTP_InterfaceDeInit+0xcc>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aec6:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800aeca:	4619      	mov	r1, r3
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f003 f8e0 	bl	800e092 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aed8:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800aedc:	4619      	mov	r1, r3
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f003 f909 	bl	800e0f6 <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800aeea:	2200      	movs	r2, #0
 800aeec:	f883 2d2e 	strb.w	r2, [r3, #3374]	@ 0xd2e
  }

  if (phost->pActiveClass->pData != NULL)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800aef6:	69db      	ldr	r3, [r3, #28]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d00b      	beq.n	800af14 <USBH_MTP_InterfaceDeInit+0xf0>
  {
    USBH_free(phost->pActiveClass->pData);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800af02:	69db      	ldr	r3, [r3, #28]
 800af04:	4618      	mov	r0, r3
 800af06:	f004 fb55 	bl	800f5b4 <free>
    phost->pActiveClass->pData = 0U;
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800af10:	2200      	movs	r2, #0
 800af12:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800af14:	2300      	movs	r3, #0
}
 800af16:	4618      	mov	r0, r3
 800af18:	3710      	adds	r7, #16
 800af1a:	46bd      	mov	sp, r7
 800af1c:	bd80      	pop	{r7, pc}

0800af1e <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 800af1e:	b480      	push	{r7}
 800af20:	b083      	sub	sp, #12
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 800af26:	2300      	movs	r3, #0
}
 800af28:	4618      	mov	r0, r3
 800af2a:	370c      	adds	r7, #12
 800af2c:	46bd      	mov	sp, r7
 800af2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af32:	4770      	bx	lr

0800af34 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 800af34:	b580      	push	{r7, lr}
 800af36:	b086      	sub	sp, #24
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800af3c:	2301      	movs	r3, #1
 800af3e:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800af46:	69db      	ldr	r3, [r3, #28]
 800af48:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 800af4a:	2300      	movs	r3, #0
 800af4c:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 800af4e:	68fb      	ldr	r3, [r7, #12]
 800af50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af54:	f893 3d38 	ldrb.w	r3, [r3, #3384]	@ 0xd38
 800af58:	2b05      	cmp	r3, #5
 800af5a:	f200 80b7 	bhi.w	800b0cc <USBH_MTP_Process+0x198>
 800af5e:	a201      	add	r2, pc, #4	@ (adr r2, 800af64 <USBH_MTP_Process+0x30>)
 800af60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800af64:	0800b0c1 	.word	0x0800b0c1
 800af68:	0800af9f 	.word	0x0800af9f
 800af6c:	0800af7d 	.word	0x0800af7d
 800af70:	0800b0cd 	.word	0x0800b0cd
 800af74:	0800afc3 	.word	0x0800afc3
 800af78:	0800b00f 	.word	0x0800b00f
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 800af7c:	2101      	movs	r1, #1
 800af7e:	6878      	ldr	r0, [r7, #4]
 800af80:	f001 f996 	bl	800c2b0 <USBH_PTP_OpenSession>
 800af84:	4603      	mov	r3, r0
 800af86:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800af88:	7dfb      	ldrb	r3, [r7, #23]
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	f040 80a0 	bne.w	800b0d0 <USBH_MTP_Process+0x19c>
      {
        USBH_UsrLog("MTP Session #0 Opened");
        MTP_Handle->state = MTP_GETDEVICEINFO;
 800af90:	68fb      	ldr	r3, [r7, #12]
 800af92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800af96:	2201      	movs	r2, #1
 800af98:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800af9c:	e098      	b.n	800b0d0 <USBH_MTP_Process+0x19c>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4619      	mov	r1, r3
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	f001 f9e9 	bl	800c37a <USBH_PTP_GetDeviceInfo>
 800afa8:	4603      	mov	r3, r0
 800afaa:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800afac:	7dfb      	ldrb	r3, [r7, #23]
 800afae:	2b00      	cmp	r3, #0
 800afb0:	f040 8090 	bne.w	800b0d4 <USBH_MTP_Process+0x1a0>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800afba:	2204      	movs	r2, #4
 800afbc:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800afc0:	e088      	b.n	800b0d4 <USBH_MTP_Process+0x1a0>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	f603 1304 	addw	r3, r3, #2308	@ 0x904
 800afc8:	4619      	mov	r1, r3
 800afca:	6878      	ldr	r0, [r7, #4]
 800afcc:	f001 fa54 	bl	800c478 <USBH_PTP_GetStorageIds>
 800afd0:	4603      	mov	r3, r0
 800afd2:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800afd4:	7dfb      	ldrb	r3, [r7, #23]
 800afd6:	2b00      	cmp	r3, #0
 800afd8:	d17e      	bne.n	800b0d8 <USBH_MTP_Process+0x1a4>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
        for (idx = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800afda:	2300      	movs	r3, #0
 800afdc:	613b      	str	r3, [r7, #16]
 800afde:	e002      	b.n	800afe6 <USBH_MTP_Process+0xb2>
 800afe0:	693b      	ldr	r3, [r7, #16]
 800afe2:	3301      	adds	r3, #1
 800afe4:	613b      	str	r3, [r7, #16]
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 800afec:	693a      	ldr	r2, [r7, #16]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d3f6      	bcc.n	800afe0 <USBH_MTP_Process+0xac>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
        }

        MTP_Handle->current_storage_unit = 0U;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aff8:	461a      	mov	r2, r3
 800affa:	2300      	movs	r3, #0
 800affc:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b006:	2205      	movs	r2, #5
 800b008:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b00c:	e064      	b.n	800b0d8 <USBH_MTP_Process+0x1a4>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b014:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800b018:	68fa      	ldr	r2, [r7, #12]
 800b01a:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800b01e:	009b      	lsls	r3, r3, #2
 800b020:	4413      	add	r3, r2
 800b022:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b02a:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800b02e:	4613      	mov	r3, r2
 800b030:	011b      	lsls	r3, r3, #4
 800b032:	4413      	add	r3, r2
 800b034:	015b      	lsls	r3, r3, #5
 800b036:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 800b03a:	68fa      	ldr	r2, [r7, #12]
 800b03c:	4413      	add	r3, r2
 800b03e:	461a      	mov	r2, r3
 800b040:	6878      	ldr	r0, [r7, #4]
 800b042:	f001 fa98 	bl	800c576 <USBH_PTP_GetStorageInfo>
 800b046:	4603      	mov	r3, r0
 800b048:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800b04a:	7dfb      	ldrb	r3, [r7, #23]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d145      	bne.n	800b0dc <USBH_MTP_Process+0x1a8>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b056:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800b05a:	3301      	adds	r3, #1
 800b05c:	68fa      	ldr	r2, [r7, #12]
 800b05e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b062:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b06c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 800b076:	429a      	cmp	r2, r3
 800b078:	d330      	bcc.n	800b0dc <USBH_MTP_Process+0x1a8>
        {
          MTP_Handle->state = MTP_IDLE;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b080:	2200      	movs	r2, #0
 800b082:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
          MTP_Handle->is_ready = 1U;
 800b086:	68fb      	ldr	r3, [r7, #12]
 800b088:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b08c:	461a      	mov	r2, r3
 800b08e:	2301      	movs	r3, #1
 800b090:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 800b094:	68fb      	ldr	r3, [r7, #12]
 800b096:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b09a:	461a      	mov	r2, r3
 800b09c:	2300      	movs	r3, #0
 800b09e:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800b0a8:	68fa      	ldr	r2, [r7, #12]
 800b0aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b0ae:	f8c2 3d18 	str.w	r3, [r2, #3352]	@ 0xd18

          USBH_UsrLog("MTP Class initialized.");
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800b0b8:	2102      	movs	r1, #2
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b0be:	e00d      	b.n	800b0dc <USBH_MTP_Process+0x1a8>

    case  MTP_IDLE:
      (void)USBH_MTP_Events(phost);
 800b0c0:	6878      	ldr	r0, [r7, #4]
 800b0c2:	f000 f81c 	bl	800b0fe <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

      status = USBH_OK;
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	75fb      	strb	r3, [r7, #23]
      break;
 800b0ca:	e008      	b.n	800b0de <USBH_MTP_Process+0x1aa>

    default:
      break;
 800b0cc:	bf00      	nop
 800b0ce:	e006      	b.n	800b0de <USBH_MTP_Process+0x1aa>
      break;
 800b0d0:	bf00      	nop
 800b0d2:	e004      	b.n	800b0de <USBH_MTP_Process+0x1aa>
      break;
 800b0d4:	bf00      	nop
 800b0d6:	e002      	b.n	800b0de <USBH_MTP_Process+0x1aa>
      break;
 800b0d8:	bf00      	nop
 800b0da:	e000      	b.n	800b0de <USBH_MTP_Process+0x1aa>
      break;
 800b0dc:	bf00      	nop
  }

  return status;
 800b0de:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	3718      	adds	r7, #24
 800b0e4:	46bd      	mov	sp, r7
 800b0e6:	bd80      	pop	{r7, pc}

0800b0e8 <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 800b0e8:	b480      	push	{r7}
 800b0ea:	b083      	sub	sp, #12
 800b0ec:	af00      	add	r7, sp, #0
 800b0ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800b0f0:	2300      	movs	r3, #0
}
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	370c      	adds	r7, #12
 800b0f6:	46bd      	mov	sp, r7
 800b0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0fc:	4770      	bx	lr

0800b0fe <USBH_MTP_Events>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 800b0fe:	b580      	push	{r7, lr}
 800b100:	b084      	sub	sp, #16
 800b102:	af00      	add	r7, sp, #0
 800b104:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b106:	2301      	movs	r3, #1
 800b108:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b10a:	687b      	ldr	r3, [r7, #4]
 800b10c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b110:	69db      	ldr	r3, [r3, #28]
 800b112:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 800b114:	68bb      	ldr	r3, [r7, #8]
 800b116:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b11a:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	@ 0xd3c
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d002      	beq.n	800b128 <USBH_MTP_Events+0x2a>
 800b122:	2b01      	cmp	r3, #1
 800b124:	d028      	beq.n	800b178 <USBH_MTP_Events+0x7a>

      }
      break;

    default:
      break;
 800b126:	e064      	b.n	800b1f2 <USBH_MTP_Events+0xf4>
      if ((phost->Timer & 1U) == 0U)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800b12e:	f003 0301 	and.w	r3, r3, #1
 800b132:	2b00      	cmp	r3, #0
 800b134:	d15a      	bne.n	800b1ec <USBH_MTP_Events+0xee>
        MTP_Handle->events.timer = phost->Timer;
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b142:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 800b146:	68bb      	ldr	r3, [r7, #8]
 800b148:	f503 51ea 	add.w	r1, r3, #7488	@ 0x1d40
 800b14c:	3108      	adds	r1, #8
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b154:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	@ 0xd36
        (void)USBH_InterruptReceiveData(phost,
 800b158:	b2da      	uxtb	r2, r3
 800b15a:	68bb      	ldr	r3, [r7, #8]
 800b15c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b160:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800b164:	6878      	ldr	r0, [r7, #4]
 800b166:	f002 ff3b 	bl	800dfe0 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 800b16a:	68bb      	ldr	r3, [r7, #8]
 800b16c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b170:	2201      	movs	r2, #1
 800b172:	f883 2d3c 	strb.w	r2, [r3, #3388]	@ 0xd3c
      break;
 800b176:	e039      	b.n	800b1ec <USBH_MTP_Events+0xee>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 800b178:	68bb      	ldr	r3, [r7, #8]
 800b17a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b17e:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800b182:	4619      	mov	r1, r3
 800b184:	6878      	ldr	r0, [r7, #4]
 800b186:	f004 f929 	bl	800f3dc <USBH_LL_GetURBState>
 800b18a:	4603      	mov	r3, r0
 800b18c:	2b01      	cmp	r3, #1
 800b18e:	d102      	bne.n	800b196 <USBH_MTP_Events+0x98>
        MTP_DecodeEvent(phost);
 800b190:	6878      	ldr	r0, [r7, #4]
 800b192:	f000 f833 	bl	800b1fc <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 800b19c:	68bb      	ldr	r3, [r7, #8]
 800b19e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1a2:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	68ba      	ldr	r2, [r7, #8]
 800b1aa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b1ae:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	@ 0xd44
 800b1b2:	4293      	cmp	r3, r2
 800b1b4:	d31c      	bcc.n	800b1f0 <USBH_MTP_Events+0xf2>
        MTP_Handle->events.timer = phost->Timer;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b1c2:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 800b1c6:	68bb      	ldr	r3, [r7, #8]
 800b1c8:	f503 51ea 	add.w	r1, r3, #7488	@ 0x1d40
 800b1cc:	3108      	adds	r1, #8
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1d4:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	@ 0xd36
        (void)USBH_InterruptReceiveData(phost,
 800b1d8:	b2da      	uxtb	r2, r3
 800b1da:	68bb      	ldr	r3, [r7, #8]
 800b1dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b1e0:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800b1e4:	6878      	ldr	r0, [r7, #4]
 800b1e6:	f002 fefb 	bl	800dfe0 <USBH_InterruptReceiveData>
      break;
 800b1ea:	e001      	b.n	800b1f0 <USBH_MTP_Events+0xf2>
      break;
 800b1ec:	bf00      	nop
 800b1ee:	e000      	b.n	800b1f2 <USBH_MTP_Events+0xf4>
      break;
 800b1f0:	bf00      	nop
  }

  return status;
 800b1f2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f4:	4618      	mov	r0, r3
 800b1f6:	3710      	adds	r7, #16
 800b1f8:	46bd      	mov	sp, r7
 800b1fa:	bd80      	pop	{r7, pc}

0800b1fc <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b20a:	69db      	ldr	r3, [r3, #28]
 800b20c:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800b20e:	697b      	ldr	r3, [r7, #20]
 800b210:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b214:	f8b3 3d4e 	ldrh.w	r3, [r3, #3406]	@ 0xd4e
 800b218:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 800b21a:	697b      	ldr	r3, [r7, #20]
 800b21c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b220:	f8d3 3d54 	ldr.w	r3, [r3, #3412]	@ 0xd54
 800b224:	60fb      	str	r3, [r7, #12]

  switch (code)
 800b226:	8a7b      	ldrh	r3, [r7, #18]
 800b228:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800b22c:	2b0e      	cmp	r3, #14
 800b22e:	d821      	bhi.n	800b274 <MTP_DecodeEvent+0x78>
 800b230:	a201      	add	r2, pc, #4	@ (adr r2, 800b238 <MTP_DecodeEvent+0x3c>)
 800b232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b236:	bf00      	nop
 800b238:	0800b275 	.word	0x0800b275
 800b23c:	0800b275 	.word	0x0800b275
 800b240:	0800b275 	.word	0x0800b275
 800b244:	0800b275 	.word	0x0800b275
 800b248:	0800b275 	.word	0x0800b275
 800b24c:	0800b275 	.word	0x0800b275
 800b250:	0800b275 	.word	0x0800b275
 800b254:	0800b275 	.word	0x0800b275
 800b258:	0800b275 	.word	0x0800b275
 800b25c:	0800b275 	.word	0x0800b275
 800b260:	0800b275 	.word	0x0800b275
 800b264:	0800b275 	.word	0x0800b275
 800b268:	0800b275 	.word	0x0800b275
 800b26c:	0800b275 	.word	0x0800b275
 800b270:	0800b275 	.word	0x0800b275
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
      break;

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
      break;
 800b274:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 800b276:	8a7b      	ldrh	r3, [r7, #18]
 800b278:	68fa      	ldr	r2, [r7, #12]
 800b27a:	4619      	mov	r1, r3
 800b27c:	6878      	ldr	r0, [r7, #4]
 800b27e:	f000 f805 	bl	800b28c <USBH_MTP_EventsCallback>
}
 800b282:	bf00      	nop
 800b284:	3718      	adds	r7, #24
 800b286:	46bd      	mov	sp, r7
 800b288:	bd80      	pop	{r7, pc}
 800b28a:	bf00      	nop

0800b28c <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 800b28c:	b480      	push	{r7}
 800b28e:	b085      	sub	sp, #20
 800b290:	af00      	add	r7, sp, #0
 800b292:	60f8      	str	r0, [r7, #12]
 800b294:	60b9      	str	r1, [r7, #8]
 800b296:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 800b298:	bf00      	nop
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b085      	sub	sp, #20
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b2b2:	69db      	ldr	r3, [r3, #28]
 800b2b4:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2bc:	2200      	movs	r2, #0
 800b2be:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b2c8:	2201      	movs	r2, #1
 800b2ca:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61

  return USBH_OK;
 800b2ce:	2300      	movs	r3, #0
}
 800b2d0:	4618      	mov	r0, r3
 800b2d2:	3714      	adds	r7, #20
 800b2d4:	46bd      	mov	sp, r7
 800b2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2da:	4770      	bx	lr

0800b2dc <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b090      	sub	sp, #64	@ 0x40
 800b2e0:	af02      	add	r7, sp, #8
 800b2e2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b2e4:	2301      	movs	r3, #1
 800b2e6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b2f6:	69db      	ldr	r3, [r3, #28]
 800b2f8:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 800b2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b2fc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b300:	f893 3d60 	ldrb.w	r3, [r3, #3424]	@ 0xd60
 800b304:	2b09      	cmp	r3, #9
 800b306:	f200 8270 	bhi.w	800b7ea <USBH_PTP_Process+0x50e>
 800b30a:	a201      	add	r2, pc, #4	@ (adr r2, 800b310 <USBH_PTP_Process+0x34>)
 800b30c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b310:	0800b7eb 	.word	0x0800b7eb
 800b314:	0800b339 	.word	0x0800b339
 800b318:	0800b36f 	.word	0x0800b36f
 800b31c:	0800b413 	.word	0x0800b413
 800b320:	0800b449 	.word	0x0800b449
 800b324:	0800b5a1 	.word	0x0800b5a1
 800b328:	0800b5d3 	.word	0x0800b5d3
 800b32c:	0800b74d 	.word	0x0800b74d
 800b330:	0800b775 	.word	0x0800b775
 800b334:	0800b7dd 	.word	0x0800b7dd
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      (void)USBH_BulkSendData(phost,
                              (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 800b338:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b33a:	f503 51eb 	add.w	r1, r3, #7520	@ 0x1d60
 800b33e:	3104      	adds	r1, #4
                              (uint16_t)MTP_Handle->ptp.op_container.length,
 800b340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b346:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	@ 0xd64
      (void)USBH_BulkSendData(phost,
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b34e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b352:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800b356:	2001      	movs	r0, #1
 800b358:	9000      	str	r0, [sp, #0]
 800b35a:	6878      	ldr	r0, [r7, #4]
 800b35c:	f002 fdfd 	bl	800df5a <USBH_BulkSendData>
                              MTP_Handle->DataOutPipe,
                              1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 800b360:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b362:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b366:	2202      	movs	r2, #2
 800b368:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b36c:	e246      	b.n	800b7fc <USBH_PTP_Process+0x520>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800b36e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b370:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b374:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800b378:	4619      	mov	r1, r3
 800b37a:	6878      	ldr	r0, [r7, #4]
 800b37c:	f004 f82e 	bl	800f3dc <USBH_LL_GetURBState>
 800b380:	4603      	mov	r3, r0
 800b382:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800b386:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b38a:	2b01      	cmp	r3, #1
 800b38c:	d12a      	bne.n	800b3e4 <USBH_PTP_Process+0x108>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 800b38e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b390:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b394:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d106      	bne.n	800b3aa <USBH_PTP_Process+0xce>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800b39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b39e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3a2:	2207      	movs	r2, #7
 800b3a4:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
#endif
      }
      else
      {
      }
      break;
 800b3a8:	e221      	b.n	800b7ee <USBH_PTP_Process+0x512>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 800b3aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ac:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b3b0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d106      	bne.n	800b3c6 <USBH_PTP_Process+0xea>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800b3b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3be:	2203      	movs	r2, #3
 800b3c0:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b3c4:	e213      	b.n	800b7ee <USBH_PTP_Process+0x512>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b3cc:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800b3d0:	2b02      	cmp	r3, #2
 800b3d2:	f040 820c 	bne.w	800b7ee <USBH_PTP_Process+0x512>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 800b3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3d8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3dc:	2205      	movs	r2, #5
 800b3de:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b3e2:	e204      	b.n	800b7ee <USBH_PTP_Process+0x512>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b3e4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b3e8:	2b02      	cmp	r3, #2
 800b3ea:	d106      	bne.n	800b3fa <USBH_PTP_Process+0x11e>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800b3ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3ee:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3f2:	2201      	movs	r2, #1
 800b3f4:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b3f8:	e1f9      	b.n	800b7ee <USBH_PTP_Process+0x512>
      else if (URB_Status == USBH_URB_STALL)
 800b3fa:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b3fe:	2b05      	cmp	r3, #5
 800b400:	f040 81f5 	bne.w	800b7ee <USBH_PTP_Process+0x512>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b406:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b40a:	2209      	movs	r2, #9
 800b40c:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b410:	e1ed      	b.n	800b7ee <USBH_PTP_Process+0x512>

    case PTP_DATA_OUT_PHASE_STATE:

      (void)USBH_BulkSendData(phost,
 800b412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b414:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b418:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800b41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b422:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	@ 0xd32
 800b426:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b428:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b42c:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800b430:	2001      	movs	r0, #1
 800b432:	9000      	str	r0, [sp, #0]
 800b434:	6878      	ldr	r0, [r7, #4]
 800b436:	f002 fd90 	bl	800df5a <USBH_BulkSendData>
                              MTP_Handle->DataOutEpSize,
                              MTP_Handle->DataOutPipe,
                              1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b440:	2204      	movs	r2, #4
 800b442:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b446:	e1d9      	b.n	800b7fc <USBH_PTP_Process+0x520>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b44e:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800b452:	4619      	mov	r1, r3
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f003 ffc1 	bl	800f3dc <USBH_LL_GetURBState>
 800b45a:	4603      	mov	r3, r0
 800b45c:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800b460:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b464:	2b01      	cmp	r3, #1
 800b466:	f040 8084 	bne.w	800b572 <USBH_PTP_Process+0x296>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 800b46a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b470:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800b474:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b476:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b47a:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800b47e:	4293      	cmp	r3, r2
 800b480:	d94d      	bls.n	800b51e <USBH_PTP_Process+0x242>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800b482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b484:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b488:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800b48c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b48e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b492:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800b496:	4413      	add	r3, r2
 800b498:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b49a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b49e:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800b4a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b4a8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800b4ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ae:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b4b2:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800b4b6:	1a9b      	subs	r3, r3, r2
 800b4b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ba:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b4be:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800b4c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4c4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b4c8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800b4cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4ce:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b4d2:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800b4d6:	4413      	add	r3, r2
 800b4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b4da:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b4de:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800b4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b4e8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800b4ec:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800b4f0:	d31c      	bcc.n	800b52c <USBH_PTP_Process+0x250>
          {
            PTP_BufferFullCallback(phost);
 800b4f2:	6878      	ldr	r0, [r7, #4]
 800b4f4:	f000 fa2e 	bl	800b954 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800b4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b4fe:	461a      	mov	r2, r3
 800b500:	2300      	movs	r3, #0
 800b502:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 800b506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b508:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b50c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800b510:	3301      	adds	r3, #1
 800b512:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b514:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b518:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
 800b51c:	e006      	b.n	800b52c <USBH_PTP_Process+0x250>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 800b51e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b520:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b524:	461a      	mov	r2, r3
 800b526:	2300      	movs	r3, #0
 800b528:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 800b52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b532:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800b536:	2b00      	cmp	r3, #0
 800b538:	d014      	beq.n	800b564 <USBH_PTP_Process+0x288>
        {
          (void)USBH_BulkSendData(phost,
 800b53a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b540:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800b544:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b546:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b54a:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	@ 0xd32
 800b54e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b550:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b554:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800b558:	2001      	movs	r0, #1
 800b55a:	9000      	str	r0, [sp, #0]
 800b55c:	6878      	ldr	r0, [r7, #4]
 800b55e:	f002 fcfc 	bl	800df5a <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 800b562:	e146      	b.n	800b7f2 <USBH_PTP_Process+0x516>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 800b564:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b56a:	2207      	movs	r2, #7
 800b56c:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b570:	e13f      	b.n	800b7f2 <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_NOTREADY)
 800b572:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b576:	2b02      	cmp	r3, #2
 800b578:	d106      	bne.n	800b588 <USBH_PTP_Process+0x2ac>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800b57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b580:	2203      	movs	r2, #3
 800b582:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b586:	e134      	b.n	800b7f2 <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_STALL)
 800b588:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b58c:	2b05      	cmp	r3, #5
 800b58e:	f040 8130 	bne.w	800b7f2 <USBH_PTP_Process+0x516>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b592:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b598:	2209      	movs	r2, #9
 800b59a:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b59e:	e128      	b.n	800b7f2 <USBH_PTP_Process+0x516>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost,
 800b5a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5a2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b5a6:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800b5aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5b0:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	@ 0xd34
 800b5b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5b6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5ba:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800b5be:	6878      	ldr	r0, [r7, #4]
 800b5c0:	f002 fcf0 	bl	800dfa4 <USBH_BulkReceiveData>
                                 MTP_Handle->ptp.data_ptr,
                                 MTP_Handle->DataInEpSize,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 800b5c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5ca:	2206      	movs	r2, #6
 800b5cc:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b5d0:	e114      	b.n	800b7fc <USBH_PTP_Process+0x520>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800b5d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5d8:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800b5dc:	4619      	mov	r1, r3
 800b5de:	6878      	ldr	r0, [r7, #4]
 800b5e0:	f003 fefc 	bl	800f3dc <USBH_LL_GetURBState>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800b5ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	f040 80a1 	bne.w	800b736 <USBH_PTP_Process+0x45a>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 800b5f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5fa:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800b5fe:	4619      	mov	r1, r3
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	f003 fe59 	bl	800f2b8 <USBH_LL_GetLastXferSize>
 800b606:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800b608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b60e:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b616:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800b61a:	f8c1 21c0 	str.w	r2, [r1, #448]	@ 0x1c0
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d111      	bne.n	800b646 <USBH_PTP_Process+0x36a>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 800b622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b624:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b628:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b630:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b634:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 800b638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b63a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b63e:	461a      	mov	r2, r3
 800b640:	2300      	movs	r3, #0
 800b642:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 800b646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b648:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b64c:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	@ 0xd34
 800b650:	461a      	mov	r2, r3
 800b652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b654:	4293      	cmp	r3, r2
 800b656:	d35b      	bcc.n	800b710 <USBH_PTP_Process+0x434>
 800b658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b65a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b65e:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800b662:	2b00      	cmp	r3, #0
 800b664:	d054      	beq.n	800b710 <USBH_PTP_Process+0x434>
        {
          MTP_Handle->ptp.data_ptr += len;
 800b666:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b668:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b66c:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 800b670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b672:	4413      	add	r3, r2
 800b674:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b676:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b67a:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= len;
 800b67e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b680:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b684:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 800b688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b68a:	1ad3      	subs	r3, r2, r3
 800b68c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b68e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b692:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += len;
 800b696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b698:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b69c:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 800b6a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b6a2:	4413      	add	r3, r2
 800b6a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6a6:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b6aa:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800b6ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6b0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b6b4:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800b6b8:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800b6bc:	d314      	bcc.n	800b6e8 <USBH_PTP_Process+0x40c>
          {
            PTP_BufferFullCallback(phost);
 800b6be:	6878      	ldr	r0, [r7, #4]
 800b6c0:	f000 f948 	bl	800b954 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800b6c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6c6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b6ca:	461a      	mov	r2, r3
 800b6cc:	2300      	movs	r3, #0
 800b6ce:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 800b6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6d4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b6d8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800b6dc:	3301      	adds	r3, #1
 800b6de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b6e0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b6e4:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
          }

          /* Continue receiving data*/
          (void)USBH_BulkReceiveData(phost,
 800b6e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6ea:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b6ee:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800b6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6f8:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	@ 0xd34
 800b6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b6fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b702:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f002 fc4c 	bl	800dfa4 <USBH_BulkReceiveData>
 800b70c:	bf00      	nop
      }
      else
      {
        /* .. */
      }
      break;
 800b70e:	e072      	b.n	800b7f6 <USBH_PTP_Process+0x51a>
          MTP_Handle->ptp.data_length -= len;
 800b710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b712:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b716:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 800b71a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b71c:	1ad3      	subs	r3, r2, r3
 800b71e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b720:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b724:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800b728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b72a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b72e:	2207      	movs	r2, #7
 800b730:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b734:	e05f      	b.n	800b7f6 <USBH_PTP_Process+0x51a>
      else if (URB_Status == USBH_URB_STALL)
 800b736:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b73a:	2b05      	cmp	r3, #5
 800b73c:	d15b      	bne.n	800b7f6 <USBH_PTP_Process+0x51a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b73e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b740:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b744:	2209      	movs	r2, #9
 800b746:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b74a:	e054      	b.n	800b7f6 <USBH_PTP_Process+0x51a>

    case PTP_RESPONSE_STATE:
      (void)USBH_BulkReceiveData(phost,
                                 (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 800b74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b74e:	f503 5106 	add.w	r1, r3, #8576	@ 0x2180
 800b752:	3104      	adds	r1, #4
      (void)USBH_BulkReceiveData(phost,
 800b754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b756:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b75a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800b75e:	223f      	movs	r2, #63	@ 0x3f
 800b760:	6878      	ldr	r0, [r7, #4]
 800b762:	f002 fc1f 	bl	800dfa4 <USBH_BulkReceiveData>
                                 PTP_USB_BULK_REQ_RESP_MAX_LEN,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 800b766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b768:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b76c:	2208      	movs	r2, #8
 800b76e:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b772:	e043      	b.n	800b7fc <USBH_PTP_Process+0x520>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800b774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b776:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b77a:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800b77e:	4619      	mov	r1, r3
 800b780:	6878      	ldr	r0, [r7, #4]
 800b782:	f003 fe2b 	bl	800f3dc <USBH_LL_GetURBState>
 800b786:	4603      	mov	r3, r0
 800b788:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800b78c:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b790:	2b01      	cmp	r3, #1
 800b792:	d118      	bne.n	800b7c6 <USBH_PTP_Process+0x4ea>
      {
        (void)USBH_PTP_GetResponse(phost, &ptp_container);
 800b794:	f107 0308 	add.w	r3, r7, #8
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f88f 	bl	800b8be <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 800b7a0:	893b      	ldrh	r3, [r7, #8]
 800b7a2:	f242 0201 	movw	r2, #8193	@ 0x2001
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d103      	bne.n	800b7b2 <USBH_PTP_Process+0x4d6>
        {
          status = USBH_OK;
 800b7aa:	2300      	movs	r3, #0
 800b7ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800b7b0:	e002      	b.n	800b7b8 <USBH_PTP_Process+0x4dc>
        }
        else
        {
          status = USBH_FAIL;
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7be:	2201      	movs	r2, #1
 800b7c0:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      }
      else
      {
        /* .. */
      }
      break;
 800b7c4:	e019      	b.n	800b7fa <USBH_PTP_Process+0x51e>
      else if (URB_Status == USBH_URB_STALL)
 800b7c6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800b7ca:	2b05      	cmp	r3, #5
 800b7cc:	d115      	bne.n	800b7fa <USBH_PTP_Process+0x51e>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800b7ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7d4:	2209      	movs	r2, #9
 800b7d6:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800b7da:	e00e      	b.n	800b7fa <USBH_PTP_Process+0x51e>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800b7dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b7e2:	2201      	movs	r2, #1
 800b7e4:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      break;
 800b7e8:	e008      	b.n	800b7fc <USBH_PTP_Process+0x520>

    default:
      break;
 800b7ea:	bf00      	nop
 800b7ec:	e006      	b.n	800b7fc <USBH_PTP_Process+0x520>
      break;
 800b7ee:	bf00      	nop
 800b7f0:	e004      	b.n	800b7fc <USBH_PTP_Process+0x520>
      break;
 800b7f2:	bf00      	nop
 800b7f4:	e002      	b.n	800b7fc <USBH_PTP_Process+0x520>
      break;
 800b7f6:	bf00      	nop
 800b7f8:	e000      	b.n	800b7fc <USBH_PTP_Process+0x520>
      break;
 800b7fa:	bf00      	nop
  }
  return status;
 800b7fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b800:	4618      	mov	r0, r3
 800b802:	3738      	adds	r7, #56	@ 0x38
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 800b808:	b580      	push	{r7, lr}
 800b80a:	b084      	sub	sp, #16
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	6078      	str	r0, [r7, #4]
 800b810:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b81c:	69db      	ldr	r3, [r3, #28]
 800b81e:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  (void)USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 800b820:	68bb      	ldr	r3, [r7, #8]
 800b822:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 800b826:	3304      	adds	r3, #4
 800b828:	2220      	movs	r2, #32
 800b82a:	2100      	movs	r1, #0
 800b82c:	4618      	mov	r0, r3
 800b82e:	f004 f9b5 	bl	800fb9c <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - ((sizeof(uint32_t) * (5U - (uint32_t)req->Nparam)));
 800b832:	683b      	ldr	r3, [r7, #0]
 800b834:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b838:	3303      	adds	r3, #3
 800b83a:	009b      	lsls	r3, r3, #2
 800b83c:	68ba      	ldr	r2, [r7, #8]
 800b83e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b842:	f8c2 3d64 	str.w	r3, [r2, #3428]	@ 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 800b846:	68bb      	ldr	r3, [r7, #8]
 800b848:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b84c:	2201      	movs	r2, #1
 800b84e:	f8a3 2d68 	strh.w	r2, [r3, #3432]	@ 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	881a      	ldrh	r2, [r3, #0]
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b85c:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	@ 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 800b860:	683b      	ldr	r3, [r7, #0]
 800b862:	689b      	ldr	r3, [r3, #8]
 800b864:	68ba      	ldr	r2, [r7, #8]
 800b866:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b86a:	f8c2 3d6c 	str.w	r3, [r2, #3436]	@ 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	68db      	ldr	r3, [r3, #12]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b878:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	691b      	ldr	r3, [r3, #16]
 800b880:	68ba      	ldr	r2, [r7, #8]
 800b882:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b886:	f8c2 3d74 	str.w	r3, [r2, #3444]	@ 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800b88a:	683b      	ldr	r3, [r7, #0]
 800b88c:	695b      	ldr	r3, [r3, #20]
 800b88e:	68ba      	ldr	r2, [r7, #8]
 800b890:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b894:	f8c2 3d78 	str.w	r3, [r2, #3448]	@ 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 800b898:	683b      	ldr	r3, [r7, #0]
 800b89a:	699b      	ldr	r3, [r3, #24]
 800b89c:	68ba      	ldr	r2, [r7, #8]
 800b89e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b8a2:	f8c2 3d7c 	str.w	r3, [r2, #3452]	@ 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	69db      	ldr	r3, [r3, #28]
 800b8aa:	68ba      	ldr	r2, [r7, #8]
 800b8ac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800b8b0:	f8c2 3d80 	str.w	r3, [r2, #3456]	@ 0xd80

  return status;
 800b8b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3710      	adds	r7, #16
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 800b8be:	b480      	push	{r7}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af00      	add	r7, sp, #0
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b8d2:	69db      	ldr	r3, [r3, #28]
 800b8d4:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 800b8d6:	68bb      	ldr	r3, [r7, #8]
 800b8d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b8dc:	f8b3 218a 	ldrh.w	r2, [r3, #394]	@ 0x18a
 800b8e0:	683b      	ldr	r3, [r7, #0]
 800b8e2:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b8ea:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 800b8ee:	683b      	ldr	r3, [r7, #0]
 800b8f0:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 800b8f2:	68bb      	ldr	r3, [r7, #8]
 800b8f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b8f8:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800b900:	68bb      	ldr	r3, [r7, #8]
 800b902:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b906:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800b90a:	683b      	ldr	r3, [r7, #0]
 800b90c:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800b90e:	68bb      	ldr	r3, [r7, #8]
 800b910:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b914:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b922:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 800b926:	683b      	ldr	r3, [r7, #0]
 800b928:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800b92a:	68bb      	ldr	r3, [r7, #8]
 800b92c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b930:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800b934:	683b      	ldr	r3, [r7, #0]
 800b936:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b93e:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 800b942:	683b      	ldr	r3, [r7, #0]
 800b944:	61da      	str	r2, [r3, #28]

  return status;
 800b946:	7bfb      	ldrb	r3, [r7, #15]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	b084      	sub	sp, #16
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b962:	69db      	ldr	r3, [r3, #28]
 800b964:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 800b966:	68fb      	ldr	r3, [r7, #12]
 800b968:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b96c:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	@ 0xd8a
 800b970:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800b974:	3b01      	subs	r3, #1
 800b976:	2b1a      	cmp	r3, #26
 800b978:	d874      	bhi.n	800ba64 <PTP_BufferFullCallback+0x110>
 800b97a:	a201      	add	r2, pc, #4	@ (adr r2, 800b980 <PTP_BufferFullCallback+0x2c>)
 800b97c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b980:	0800b9ed 	.word	0x0800b9ed
 800b984:	0800ba65 	.word	0x0800ba65
 800b988:	0800ba65 	.word	0x0800ba65
 800b98c:	0800ba65 	.word	0x0800ba65
 800b990:	0800ba65 	.word	0x0800ba65
 800b994:	0800ba65 	.word	0x0800ba65
 800b998:	0800ba65 	.word	0x0800ba65
 800b99c:	0800ba65 	.word	0x0800ba65
 800b9a0:	0800b9f9 	.word	0x0800b9f9
 800b9a4:	0800ba65 	.word	0x0800ba65
 800b9a8:	0800ba65 	.word	0x0800ba65
 800b9ac:	0800ba65 	.word	0x0800ba65
 800b9b0:	0800ba3d 	.word	0x0800ba3d
 800b9b4:	0800ba65 	.word	0x0800ba65
 800b9b8:	0800ba65 	.word	0x0800ba65
 800b9bc:	0800ba65 	.word	0x0800ba65
 800b9c0:	0800ba65 	.word	0x0800ba65
 800b9c4:	0800ba65 	.word	0x0800ba65
 800b9c8:	0800ba65 	.word	0x0800ba65
 800b9cc:	0800ba65 	.word	0x0800ba65
 800b9d0:	0800ba65 	.word	0x0800ba65
 800b9d4:	0800ba65 	.word	0x0800ba65
 800b9d8:	0800ba65 	.word	0x0800ba65
 800b9dc:	0800ba65 	.word	0x0800ba65
 800b9e0:	0800ba65 	.word	0x0800ba65
 800b9e4:	0800ba65 	.word	0x0800ba65
 800b9e8:	0800b9f9 	.word	0x0800b9f9
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	4619      	mov	r1, r3
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f000 f841 	bl	800ba78 <PTP_DecodeDeviceInfo>
      break;
 800b9f6:	e03a      	b.n	800ba6e <PTP_BufferFullCallback+0x11a>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800b9f8:	68fb      	ldr	r3, [r7, #12]
 800b9fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b9fe:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800ba02:	2b00      	cmp	r3, #0
 800ba04:	d130      	bne.n	800ba68 <PTP_BufferFullCallback+0x114>
      {
        /* copy it to object */
        (void)USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data,
 800ba06:	68fb      	ldr	r3, [r7, #12]
 800ba08:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba0c:	f8d3 01c4 	ldr.w	r0, [r3, #452]	@ 0x1c4
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800ba16:	3310      	adds	r3, #16
 800ba18:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 800ba1c:	4619      	mov	r1, r3
 800ba1e:	f004 f95c 	bl	800fcda <memcpy>
                          PTP_USB_BULK_PAYLOAD_LEN_READ);

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800ba22:	68fb      	ldr	r3, [r7, #12]
 800ba24:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba28:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800ba2c:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800ba30:	68fa      	ldr	r2, [r7, #12]
 800ba32:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ba36:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      }
      break;
 800ba3a:	e015      	b.n	800ba68 <PTP_BufferFullCallback+0x114>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba42:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d110      	bne.n	800ba6c <PTP_BufferFullCallback+0x118>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba50:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800ba54:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800ba58:	68fa      	ldr	r2, [r7, #12]
 800ba5a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800ba5e:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      }
      break;
 800ba62:	e003      	b.n	800ba6c <PTP_BufferFullCallback+0x118>

    default:
      break;
 800ba64:	bf00      	nop
 800ba66:	e002      	b.n	800ba6e <PTP_BufferFullCallback+0x11a>
      break;
 800ba68:	bf00      	nop
 800ba6a:	e000      	b.n	800ba6e <PTP_BufferFullCallback+0x11a>
      break;
 800ba6c:	bf00      	nop


  }
}
 800ba6e:	bf00      	nop
 800ba70:	3710      	adds	r7, #16
 800ba72:	46bd      	mov	sp, r7
 800ba74:	bd80      	pop	{r7, pc}
 800ba76:	bf00      	nop

0800ba78 <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b086      	sub	sp, #24
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ba88:	69db      	ldr	r3, [r3, #28]
 800ba8a:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800ba8c:	697b      	ldr	r3, [r7, #20]
 800ba8e:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800ba92:	3310      	adds	r3, #16
 800ba94:	613b      	str	r3, [r7, #16]

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 800ba96:	697b      	ldr	r3, [r7, #20]
 800ba98:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ba9c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800baa0:	2b00      	cmp	r3, #0
 800baa2:	f040 80f9 	bne.w	800bc98 <PTP_DecodeDeviceInfo+0x220>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800baa6:	693b      	ldr	r3, [r7, #16]
 800baa8:	781b      	ldrb	r3, [r3, #0]
 800baaa:	461a      	mov	r2, r3
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	3301      	adds	r3, #1
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	021b      	lsls	r3, r3, #8
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	4313      	orrs	r3, r2
 800bab8:	b29a      	uxth	r2, r3
 800baba:	683b      	ldr	r3, [r7, #0]
 800babc:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 800babe:	693b      	ldr	r3, [r7, #16]
 800bac0:	3302      	adds	r3, #2
 800bac2:	781b      	ldrb	r3, [r3, #0]
 800bac4:	461a      	mov	r2, r3
 800bac6:	693b      	ldr	r3, [r7, #16]
 800bac8:	3303      	adds	r3, #3
 800baca:	781b      	ldrb	r3, [r3, #0]
 800bacc:	021b      	lsls	r3, r3, #8
 800bace:	431a      	orrs	r2, r3
 800bad0:	693b      	ldr	r3, [r7, #16]
 800bad2:	3304      	adds	r3, #4
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	041b      	lsls	r3, r3, #16
 800bad8:	431a      	orrs	r2, r3
 800bada:	693b      	ldr	r3, [r7, #16]
 800badc:	3305      	adds	r3, #5
 800bade:	781b      	ldrb	r3, [r3, #0]
 800bae0:	061b      	lsls	r3, r3, #24
 800bae2:	431a      	orrs	r2, r3
 800bae4:	683b      	ldr	r3, [r7, #0]
 800bae6:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	3306      	adds	r3, #6
 800baec:	781b      	ldrb	r3, [r3, #0]
 800baee:	461a      	mov	r2, r3
 800baf0:	693b      	ldr	r3, [r7, #16]
 800baf2:	3307      	adds	r3, #7
 800baf4:	781b      	ldrb	r3, [r3, #0]
 800baf6:	021b      	lsls	r3, r3, #8
 800baf8:	b29b      	uxth	r3, r3
 800bafa:	4313      	orrs	r3, r2
 800bafc:	b29a      	uxth	r2, r3
 800bafe:	683b      	ldr	r3, [r7, #0]
 800bb00:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800bb02:	683b      	ldr	r3, [r7, #0]
 800bb04:	f103 000a 	add.w	r0, r3, #10
 800bb08:	693b      	ldr	r3, [r7, #16]
 800bb0a:	3308      	adds	r3, #8
 800bb0c:	f107 020a 	add.w	r2, r7, #10
 800bb10:	4619      	mov	r1, r3
 800bb12:	f000 fafa 	bl	800c10a <PTP_GetString>

    totallen = (uint32_t)(len * 2U) + 1U;
 800bb16:	897b      	ldrh	r3, [r7, #10]
 800bb18:	005b      	lsls	r3, r3, #1
 800bb1a:	3301      	adds	r3, #1
 800bb1c:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	3308      	adds	r3, #8
 800bb22:	693a      	ldr	r2, [r7, #16]
 800bb24:	4413      	add	r3, r2
 800bb26:	781b      	ldrb	r3, [r3, #0]
 800bb28:	4619      	mov	r1, r3
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	3309      	adds	r3, #9
 800bb2e:	693a      	ldr	r2, [r7, #16]
 800bb30:	4413      	add	r3, r2
 800bb32:	781b      	ldrb	r3, [r3, #0]
 800bb34:	021b      	lsls	r3, r3, #8
 800bb36:	b29b      	uxth	r3, r3
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	683b      	ldr	r3, [r7, #0]
 800bb3e:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800bb42:	683b      	ldr	r3, [r7, #0]
 800bb44:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	330a      	adds	r3, #10
 800bb4c:	461a      	mov	r2, r3
 800bb4e:	6939      	ldr	r1, [r7, #16]
 800bb50:	f000 fb09 	bl	800c166 <PTP_GetArray16>
 800bb54:	4602      	mov	r2, r0
 800bb56:	683b      	ldr	r3, [r7, #0]
 800bb58:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->OperationsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800bb62:	005a      	lsls	r2, r3, #1
 800bb64:	68fb      	ldr	r3, [r7, #12]
 800bb66:	4413      	add	r3, r2
 800bb68:	3304      	adds	r3, #4
 800bb6a:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	330a      	adds	r3, #10
 800bb76:	461a      	mov	r2, r3
 800bb78:	6939      	ldr	r1, [r7, #16]
 800bb7a:	f000 faf4 	bl	800c166 <PTP_GetArray16>
 800bb7e:	4602      	mov	r2, r0
 800bb80:	683b      	ldr	r3, [r7, #0]
 800bb82:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->EventsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800bb8c:	005a      	lsls	r2, r3, #1
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	4413      	add	r3, r2
 800bb92:	3304      	adds	r3, #4
 800bb94:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 800bb96:	683b      	ldr	r3, [r7, #0]
 800bb98:	f503 702a 	add.w	r0, r3, #680	@ 0x2a8
 800bb9c:	68fb      	ldr	r3, [r7, #12]
 800bb9e:	330a      	adds	r3, #10
 800bba0:	461a      	mov	r2, r3
 800bba2:	6939      	ldr	r1, [r7, #16]
 800bba4:	f000 fadf 	bl	800c166 <PTP_GetArray16>
 800bba8:	4602      	mov	r2, r0
 800bbaa:	683b      	ldr	r3, [r7, #0]
 800bbac:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->DevicePropertiesSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800bbb0:	683b      	ldr	r3, [r7, #0]
 800bbb2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bbb6:	005a      	lsls	r2, r3, #1
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	4413      	add	r3, r2
 800bbbc:	3304      	adds	r3, #4
 800bbbe:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800bbc0:	683b      	ldr	r3, [r7, #0]
 800bbc2:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	330a      	adds	r3, #10
 800bbca:	461a      	mov	r2, r3
 800bbcc:	6939      	ldr	r1, [r7, #16]
 800bbce:	f000 faca 	bl	800c166 <PTP_GetArray16>
 800bbd2:	4602      	mov	r2, r0
 800bbd4:	683b      	ldr	r3, [r7, #0]
 800bbd6:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->CaptureFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	f8d3 3370 	ldr.w	r3, [r3, #880]	@ 0x370
 800bbe0:	005a      	lsls	r2, r3, #1
 800bbe2:	68fb      	ldr	r3, [r7, #12]
 800bbe4:	4413      	add	r3, r2
 800bbe6:	3304      	adds	r3, #4
 800bbe8:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800bbea:	683b      	ldr	r3, [r7, #0]
 800bbec:	f503 6088 	add.w	r0, r3, #1088	@ 0x440
 800bbf0:	68fb      	ldr	r3, [r7, #12]
 800bbf2:	330a      	adds	r3, #10
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	6939      	ldr	r1, [r7, #16]
 800bbf8:	f000 fab5 	bl	800c166 <PTP_GetArray16>
 800bbfc:	4602      	mov	r2, r0
 800bbfe:	683b      	ldr	r3, [r7, #0]
 800bc00:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->ImageFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800bc04:	683b      	ldr	r3, [r7, #0]
 800bc06:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 800bc0a:	005a      	lsls	r2, r3, #1
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	4413      	add	r3, r2
 800bc10:	3304      	adds	r3, #4
 800bc12:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800bc14:	683b      	ldr	r3, [r7, #0]
 800bc16:	f503 60a1 	add.w	r0, r3, #1288	@ 0x508
 800bc1a:	68fb      	ldr	r3, [r7, #12]
 800bc1c:	330a      	adds	r3, #10
 800bc1e:	693a      	ldr	r2, [r7, #16]
 800bc20:	4413      	add	r3, r2
 800bc22:	f107 020a 	add.w	r2, r7, #10
 800bc26:	4619      	mov	r1, r3
 800bc28:	f000 fa6f 	bl	800c10a <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800bc2c:	897b      	ldrh	r3, [r7, #10]
 800bc2e:	005a      	lsls	r2, r3, #1
 800bc30:	68fb      	ldr	r3, [r7, #12]
 800bc32:	4413      	add	r3, r2
 800bc34:	3301      	adds	r3, #1
 800bc36:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	f203 6007 	addw	r0, r3, #1543	@ 0x607
 800bc3e:	68fb      	ldr	r3, [r7, #12]
 800bc40:	330a      	adds	r3, #10
 800bc42:	693a      	ldr	r2, [r7, #16]
 800bc44:	4413      	add	r3, r2
 800bc46:	f107 020a 	add.w	r2, r7, #10
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f000 fa5d 	bl	800c10a <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800bc50:	897b      	ldrh	r3, [r7, #10]
 800bc52:	005a      	lsls	r2, r3, #1
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	4413      	add	r3, r2
 800bc58:	3301      	adds	r3, #1
 800bc5a:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	f203 7006 	addw	r0, r3, #1798	@ 0x706
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	330a      	adds	r3, #10
 800bc66:	693a      	ldr	r2, [r7, #16]
 800bc68:	4413      	add	r3, r2
 800bc6a:	f107 020a 	add.w	r2, r7, #10
 800bc6e:	4619      	mov	r1, r3
 800bc70:	f000 fa4b 	bl	800c10a <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800bc74:	897b      	ldrh	r3, [r7, #10]
 800bc76:	005a      	lsls	r2, r3, #1
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 800bc80:	683b      	ldr	r3, [r7, #0]
 800bc82:	f603 0005 	addw	r0, r3, #2053	@ 0x805
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	330a      	adds	r3, #10
 800bc8a:	693a      	ldr	r2, [r7, #16]
 800bc8c:	4413      	add	r3, r2
 800bc8e:	f107 020a 	add.w	r2, r7, #10
 800bc92:	4619      	mov	r1, r3
 800bc94:	f000 fa39 	bl	800c10a <PTP_GetString>
  }
}
 800bc98:	bf00      	nop
 800bc9a:	3718      	adds	r7, #24
 800bc9c:	46bd      	mov	sp, r7
 800bc9e:	bd80      	pop	{r7, pc}

0800bca0 <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 800bca0:	b580      	push	{r7, lr}
 800bca2:	b084      	sub	sp, #16
 800bca4:	af00      	add	r7, sp, #0
 800bca6:	6078      	str	r0, [r7, #4]
 800bca8:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bcb0:	69db      	ldr	r3, [r3, #28]
 800bcb2:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800bcba:	3310      	adds	r3, #16
 800bcbc:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800bcbe:	683b      	ldr	r3, [r7, #0]
 800bcc0:	3304      	adds	r3, #4
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	68b9      	ldr	r1, [r7, #8]
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f000 fa8e 	bl	800c1e8 <PTP_GetArray32>
 800bccc:	4602      	mov	r2, r0
 800bcce:	683b      	ldr	r3, [r7, #0]
 800bcd0:	601a      	str	r2, [r3, #0]
}
 800bcd2:	bf00      	nop
 800bcd4:	3710      	adds	r7, #16
 800bcd6:	46bd      	mov	sp, r7
 800bcd8:	bd80      	pop	{r7, pc}

0800bcda <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 800bcda:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bcde:	b0c2      	sub	sp, #264	@ 0x108
 800bce0:	af00      	add	r7, sp, #0
 800bce2:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 800bce6:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 800bcea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800bcee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800bcf2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bcf6:	69db      	ldr	r3, [r3, #28]
 800bcf8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800bcfc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800bd00:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800bd04:	3310      	adds	r3, #16
 800bd06:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800bd0a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd0e:	781b      	ldrb	r3, [r3, #0]
 800bd10:	461a      	mov	r2, r3
 800bd12:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd16:	3301      	adds	r3, #1
 800bd18:	781b      	ldrb	r3, [r3, #0]
 800bd1a:	021b      	lsls	r3, r3, #8
 800bd1c:	b29b      	uxth	r3, r3
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	b29b      	uxth	r3, r3
 800bd22:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800bd26:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800bd28:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd2c:	3302      	adds	r3, #2
 800bd2e:	781b      	ldrb	r3, [r3, #0]
 800bd30:	461a      	mov	r2, r3
 800bd32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd36:	3303      	adds	r3, #3
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	021b      	lsls	r3, r3, #8
 800bd3c:	b29b      	uxth	r3, r3
 800bd3e:	4313      	orrs	r3, r2
 800bd40:	b29b      	uxth	r3, r3
 800bd42:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800bd46:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800bd48:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd4c:	3304      	adds	r3, #4
 800bd4e:	781b      	ldrb	r3, [r3, #0]
 800bd50:	461a      	mov	r2, r3
 800bd52:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd56:	3305      	adds	r3, #5
 800bd58:	781b      	ldrb	r3, [r3, #0]
 800bd5a:	021b      	lsls	r3, r3, #8
 800bd5c:	b29b      	uxth	r3, r3
 800bd5e:	4313      	orrs	r3, r2
 800bd60:	b29b      	uxth	r3, r3
 800bd62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800bd66:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800bd68:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd6c:	3306      	adds	r3, #6
 800bd6e:	781b      	ldrb	r3, [r3, #0]
 800bd70:	b2db      	uxtb	r3, r3
 800bd72:	2200      	movs	r2, #0
 800bd74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800bd78:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800bd7c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bd80:	3307      	adds	r3, #7
 800bd82:	781b      	ldrb	r3, [r3, #0]
 800bd84:	b2db      	uxtb	r3, r3
 800bd86:	2200      	movs	r2, #0
 800bd88:	461c      	mov	r4, r3
 800bd8a:	4615      	mov	r5, r2
 800bd8c:	f04f 0200 	mov.w	r2, #0
 800bd90:	f04f 0300 	mov.w	r3, #0
 800bd94:	022b      	lsls	r3, r5, #8
 800bd96:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800bd9a:	0222      	lsls	r2, r4, #8
 800bd9c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800bda0:	4621      	mov	r1, r4
 800bda2:	ea41 0a02 	orr.w	sl, r1, r2
 800bda6:	4629      	mov	r1, r5
 800bda8:	ea41 0b03 	orr.w	fp, r1, r3
 800bdac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bdb0:	3308      	adds	r3, #8
 800bdb2:	781b      	ldrb	r3, [r3, #0]
 800bdb4:	b2db      	uxtb	r3, r3
 800bdb6:	2200      	movs	r2, #0
 800bdb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800bdbc:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800bdc0:	f04f 0200 	mov.w	r2, #0
 800bdc4:	f04f 0300 	mov.w	r3, #0
 800bdc8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800bdcc:	4629      	mov	r1, r5
 800bdce:	040b      	lsls	r3, r1, #16
 800bdd0:	4621      	mov	r1, r4
 800bdd2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800bdd6:	4621      	mov	r1, r4
 800bdd8:	040a      	lsls	r2, r1, #16
 800bdda:	ea4a 0102 	orr.w	r1, sl, r2
 800bdde:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800bde2:	ea4b 0303 	orr.w	r3, fp, r3
 800bde6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800bdea:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bdee:	3309      	adds	r3, #9
 800bdf0:	781b      	ldrb	r3, [r3, #0]
 800bdf2:	b2db      	uxtb	r3, r3
 800bdf4:	2200      	movs	r2, #0
 800bdf6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800bdfa:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800bdfe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800be02:	460b      	mov	r3, r1
 800be04:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800be08:	460b      	mov	r3, r1
 800be0a:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800be0e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800be12:	460b      	mov	r3, r1
 800be14:	ea43 0308 	orr.w	r3, r3, r8
 800be18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800be1c:	4613      	mov	r3, r2
 800be1e:	ea43 0309 	orr.w	r3, r3, r9
 800be22:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800be26:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800be2a:	330a      	adds	r3, #10
 800be2c:	781b      	ldrb	r3, [r3, #0]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2200      	movs	r2, #0
 800be32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800be36:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800be3a:	f04f 0200 	mov.w	r2, #0
 800be3e:	f04f 0300 	mov.w	r3, #0
 800be42:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800be46:	000b      	movs	r3, r1
 800be48:	2200      	movs	r2, #0
 800be4a:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800be4e:	4621      	mov	r1, r4
 800be50:	4311      	orrs	r1, r2
 800be52:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800be56:	4629      	mov	r1, r5
 800be58:	4319      	orrs	r1, r3
 800be5a:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 800be5e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800be62:	330b      	adds	r3, #11
 800be64:	781b      	ldrb	r3, [r3, #0]
 800be66:	b2db      	uxtb	r3, r3
 800be68:	2200      	movs	r2, #0
 800be6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800be6e:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800be72:	f04f 0200 	mov.w	r2, #0
 800be76:	f04f 0300 	mov.w	r3, #0
 800be7a:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800be7e:	020b      	lsls	r3, r1, #8
 800be80:	2200      	movs	r2, #0
 800be82:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800be86:	4621      	mov	r1, r4
 800be88:	4311      	orrs	r1, r2
 800be8a:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800be8e:	4629      	mov	r1, r5
 800be90:	4319      	orrs	r1, r3
 800be92:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 800be96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800be9a:	330c      	adds	r3, #12
 800be9c:	781b      	ldrb	r3, [r3, #0]
 800be9e:	b2db      	uxtb	r3, r3
 800bea0:	2200      	movs	r2, #0
 800bea2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800bea6:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800beaa:	f04f 0200 	mov.w	r2, #0
 800beae:	f04f 0300 	mov.w	r3, #0
 800beb2:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800beb6:	040b      	lsls	r3, r1, #16
 800beb8:	2200      	movs	r2, #0
 800beba:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800bebe:	4621      	mov	r1, r4
 800bec0:	4311      	orrs	r1, r2
 800bec2:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800bec6:	4629      	mov	r1, r5
 800bec8:	4319      	orrs	r1, r3
 800beca:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800bece:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bed2:	330d      	adds	r3, #13
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	b2db      	uxtb	r3, r3
 800bed8:	2200      	movs	r2, #0
 800beda:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800bede:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800bee2:	f04f 0200 	mov.w	r2, #0
 800bee6:	f04f 0300 	mov.w	r3, #0
 800beea:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800beee:	060b      	lsls	r3, r1, #24
 800bef0:	2200      	movs	r2, #0
 800bef2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800bef6:	4621      	mov	r1, r4
 800bef8:	4311      	orrs	r1, r2
 800befa:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800befe:	4629      	mov	r1, r5
 800bf00:	4319      	orrs	r1, r3
 800bf02:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800bf06:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800bf0a:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800bf0e:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800bf12:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bf16:	330e      	adds	r3, #14
 800bf18:	781b      	ldrb	r3, [r3, #0]
 800bf1a:	b2db      	uxtb	r3, r3
 800bf1c:	2200      	movs	r2, #0
 800bf1e:	67bb      	str	r3, [r7, #120]	@ 0x78
 800bf20:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800bf22:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bf26:	330f      	adds	r3, #15
 800bf28:	781b      	ldrb	r3, [r3, #0]
 800bf2a:	b2db      	uxtb	r3, r3
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	673b      	str	r3, [r7, #112]	@ 0x70
 800bf30:	677a      	str	r2, [r7, #116]	@ 0x74
 800bf32:	f04f 0200 	mov.w	r2, #0
 800bf36:	f04f 0300 	mov.w	r3, #0
 800bf3a:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800bf3e:	4629      	mov	r1, r5
 800bf40:	020b      	lsls	r3, r1, #8
 800bf42:	4621      	mov	r1, r4
 800bf44:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800bf48:	4621      	mov	r1, r4
 800bf4a:	020a      	lsls	r2, r1, #8
 800bf4c:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800bf50:	4621      	mov	r1, r4
 800bf52:	4311      	orrs	r1, r2
 800bf54:	66b9      	str	r1, [r7, #104]	@ 0x68
 800bf56:	4629      	mov	r1, r5
 800bf58:	4319      	orrs	r1, r3
 800bf5a:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800bf5c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bf60:	3310      	adds	r3, #16
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	b2db      	uxtb	r3, r3
 800bf66:	2200      	movs	r2, #0
 800bf68:	663b      	str	r3, [r7, #96]	@ 0x60
 800bf6a:	667a      	str	r2, [r7, #100]	@ 0x64
 800bf6c:	f04f 0200 	mov.w	r2, #0
 800bf70:	f04f 0300 	mov.w	r3, #0
 800bf74:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800bf78:	4629      	mov	r1, r5
 800bf7a:	040b      	lsls	r3, r1, #16
 800bf7c:	4621      	mov	r1, r4
 800bf7e:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800bf82:	4621      	mov	r1, r4
 800bf84:	040a      	lsls	r2, r1, #16
 800bf86:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800bf8a:	4621      	mov	r1, r4
 800bf8c:	4311      	orrs	r1, r2
 800bf8e:	65b9      	str	r1, [r7, #88]	@ 0x58
 800bf90:	4629      	mov	r1, r5
 800bf92:	4319      	orrs	r1, r3
 800bf94:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800bf96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bf9a:	3311      	adds	r3, #17
 800bf9c:	781b      	ldrb	r3, [r3, #0]
 800bf9e:	b2db      	uxtb	r3, r3
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	653b      	str	r3, [r7, #80]	@ 0x50
 800bfa4:	657a      	str	r2, [r7, #84]	@ 0x54
 800bfa6:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800bfaa:	460b      	mov	r3, r1
 800bfac:	0a1b      	lsrs	r3, r3, #8
 800bfae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bfb0:	460b      	mov	r3, r1
 800bfb2:	061b      	lsls	r3, r3, #24
 800bfb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfb6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800bfba:	4623      	mov	r3, r4
 800bfbc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800bfc0:	4602      	mov	r2, r0
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	643b      	str	r3, [r7, #64]	@ 0x40
 800bfc6:	462b      	mov	r3, r5
 800bfc8:	460a      	mov	r2, r1
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bfce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800bfd2:	3312      	adds	r3, #18
 800bfd4:	781b      	ldrb	r3, [r3, #0]
 800bfd6:	b2db      	uxtb	r3, r3
 800bfd8:	2200      	movs	r2, #0
 800bfda:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bfdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800bfde:	f04f 0200 	mov.w	r2, #0
 800bfe2:	f04f 0300 	mov.w	r3, #0
 800bfe6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800bfe8:	000b      	movs	r3, r1
 800bfea:	2200      	movs	r2, #0
 800bfec:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800bff0:	4621      	mov	r1, r4
 800bff2:	4311      	orrs	r1, r2
 800bff4:	6339      	str	r1, [r7, #48]	@ 0x30
 800bff6:	4629      	mov	r1, r5
 800bff8:	4319      	orrs	r1, r3
 800bffa:	6379      	str	r1, [r7, #52]	@ 0x34
 800bffc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c000:	3313      	adds	r3, #19
 800c002:	781b      	ldrb	r3, [r3, #0]
 800c004:	b2db      	uxtb	r3, r3
 800c006:	2200      	movs	r2, #0
 800c008:	62bb      	str	r3, [r7, #40]	@ 0x28
 800c00a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800c00c:	f04f 0200 	mov.w	r2, #0
 800c010:	f04f 0300 	mov.w	r3, #0
 800c014:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c016:	020b      	lsls	r3, r1, #8
 800c018:	2200      	movs	r2, #0
 800c01a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800c01e:	4621      	mov	r1, r4
 800c020:	4311      	orrs	r1, r2
 800c022:	6239      	str	r1, [r7, #32]
 800c024:	4629      	mov	r1, r5
 800c026:	4319      	orrs	r1, r3
 800c028:	6279      	str	r1, [r7, #36]	@ 0x24
 800c02a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c02e:	3314      	adds	r3, #20
 800c030:	781b      	ldrb	r3, [r3, #0]
 800c032:	b2db      	uxtb	r3, r3
 800c034:	2200      	movs	r2, #0
 800c036:	61bb      	str	r3, [r7, #24]
 800c038:	61fa      	str	r2, [r7, #28]
 800c03a:	f04f 0200 	mov.w	r2, #0
 800c03e:	f04f 0300 	mov.w	r3, #0
 800c042:	69b9      	ldr	r1, [r7, #24]
 800c044:	040b      	lsls	r3, r1, #16
 800c046:	2200      	movs	r2, #0
 800c048:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c04c:	4621      	mov	r1, r4
 800c04e:	4311      	orrs	r1, r2
 800c050:	6139      	str	r1, [r7, #16]
 800c052:	4629      	mov	r1, r5
 800c054:	4319      	orrs	r1, r3
 800c056:	6179      	str	r1, [r7, #20]
 800c058:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c05c:	3315      	adds	r3, #21
 800c05e:	781b      	ldrb	r3, [r3, #0]
 800c060:	b2db      	uxtb	r3, r3
 800c062:	2200      	movs	r2, #0
 800c064:	60bb      	str	r3, [r7, #8]
 800c066:	60fa      	str	r2, [r7, #12]
 800c068:	f04f 0200 	mov.w	r2, #0
 800c06c:	f04f 0300 	mov.w	r3, #0
 800c070:	68b9      	ldr	r1, [r7, #8]
 800c072:	060b      	lsls	r3, r1, #24
 800c074:	2200      	movs	r2, #0
 800c076:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c07a:	4621      	mov	r1, r4
 800c07c:	4311      	orrs	r1, r2
 800c07e:	6039      	str	r1, [r7, #0]
 800c080:	4629      	mov	r1, r5
 800c082:	4319      	orrs	r1, r3
 800c084:	6079      	str	r1, [r7, #4]
 800c086:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c08a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c08e:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800c092:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c096:	3316      	adds	r3, #22
 800c098:	781b      	ldrb	r3, [r3, #0]
 800c09a:	461a      	mov	r2, r3
 800c09c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c0a0:	3317      	adds	r3, #23
 800c0a2:	781b      	ldrb	r3, [r3, #0]
 800c0a4:	021b      	lsls	r3, r3, #8
 800c0a6:	431a      	orrs	r2, r3
 800c0a8:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c0ac:	3318      	adds	r3, #24
 800c0ae:	781b      	ldrb	r3, [r3, #0]
 800c0b0:	041b      	lsls	r3, r3, #16
 800c0b2:	431a      	orrs	r2, r3
 800c0b4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c0b8:	3319      	adds	r3, #25
 800c0ba:	781b      	ldrb	r3, [r3, #0]
 800c0bc:	061b      	lsls	r3, r3, #24
 800c0be:	431a      	orrs	r2, r3
 800c0c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c0c4:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800c0c6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c0ca:	f103 001c 	add.w	r0, r3, #28
 800c0ce:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800c0d2:	331a      	adds	r3, #26
 800c0d4:	f107 02fe 	add.w	r2, r7, #254	@ 0xfe
 800c0d8:	4619      	mov	r1, r3
 800c0da:	f000 f816 	bl	800c10a <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + (len * 2U) + 1U], &len);
 800c0de:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800c0e2:	f203 101b 	addw	r0, r3, #283	@ 0x11b
 800c0e6:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800c0ea:	005b      	lsls	r3, r3, #1
 800c0ec:	331b      	adds	r3, #27
 800c0ee:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800c0f2:	4413      	add	r3, r2
 800c0f4:	f107 02fe 	add.w	r2, r7, #254	@ 0xfe
 800c0f8:	4619      	mov	r1, r3
 800c0fa:	f000 f806 	bl	800c10a <PTP_GetString>
}
 800c0fe:	bf00      	nop
 800c100:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800c104:	46bd      	mov	sp, r7
 800c106:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800c10a <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 800c10a:	b480      	push	{r7}
 800c10c:	b087      	sub	sp, #28
 800c10e:	af00      	add	r7, sp, #0
 800c110:	60f8      	str	r0, [r7, #12]
 800c112:	60b9      	str	r1, [r7, #8]
 800c114:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 800c116:	68bb      	ldr	r3, [r7, #8]
 800c118:	781b      	ldrb	r3, [r3, #0]
 800c11a:	461a      	mov	r2, r3
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800c120:	68bb      	ldr	r3, [r7, #8]
 800c122:	781b      	ldrb	r3, [r3, #0]
 800c124:	005b      	lsls	r3, r3, #1
 800c126:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 800c128:	68bb      	ldr	r3, [r7, #8]
 800c12a:	3301      	adds	r3, #1
 800c12c:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 800c12e:	2300      	movs	r3, #0
 800c130:	82fb      	strh	r3, [r7, #22]
 800c132:	e00b      	b.n	800c14c <PTP_GetString+0x42>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 800c134:	8afb      	ldrh	r3, [r7, #22]
 800c136:	68ba      	ldr	r2, [r7, #8]
 800c138:	4413      	add	r3, r2
 800c13a:	781a      	ldrb	r2, [r3, #0]
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	701a      	strb	r2, [r3, #0]
    str++;
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	3301      	adds	r3, #1
 800c144:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 800c146:	8afb      	ldrh	r3, [r7, #22]
 800c148:	3302      	adds	r3, #2
 800c14a:	82fb      	strh	r3, [r7, #22]
 800c14c:	8afa      	ldrh	r2, [r7, #22]
 800c14e:	8abb      	ldrh	r3, [r7, #20]
 800c150:	429a      	cmp	r2, r3
 800c152:	d3ef      	bcc.n	800c134 <PTP_GetString+0x2a>
  }
  *str = 0U; /* mark end of string */
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	2200      	movs	r2, #0
 800c158:	701a      	strb	r2, [r3, #0]
}
 800c15a:	bf00      	nop
 800c15c:	371c      	adds	r7, #28
 800c15e:	46bd      	mov	sp, r7
 800c160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c164:	4770      	bx	lr

0800c166 <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800c166:	b480      	push	{r7}
 800c168:	b087      	sub	sp, #28
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	60f8      	str	r0, [r7, #12]
 800c16e:	60b9      	str	r1, [r7, #8]
 800c170:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800c172:	2300      	movs	r3, #0
 800c174:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800c176:	68ba      	ldr	r2, [r7, #8]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	4413      	add	r3, r2
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	4619      	mov	r1, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	3301      	adds	r3, #1
 800c184:	68ba      	ldr	r2, [r7, #8]
 800c186:	4413      	add	r3, r2
 800c188:	781b      	ldrb	r3, [r3, #0]
 800c18a:	021b      	lsls	r3, r3, #8
 800c18c:	ea41 0203 	orr.w	r2, r1, r3
 800c190:	687b      	ldr	r3, [r7, #4]
 800c192:	3302      	adds	r3, #2
 800c194:	68b9      	ldr	r1, [r7, #8]
 800c196:	440b      	add	r3, r1
 800c198:	781b      	ldrb	r3, [r3, #0]
 800c19a:	041b      	lsls	r3, r3, #16
 800c19c:	431a      	orrs	r2, r3
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	3303      	adds	r3, #3
 800c1a2:	68b9      	ldr	r1, [r7, #8]
 800c1a4:	440b      	add	r3, r1
 800c1a6:	781b      	ldrb	r3, [r3, #0]
 800c1a8:	061b      	lsls	r3, r3, #24
 800c1aa:	4313      	orrs	r3, r2
 800c1ac:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800c1ae:	e010      	b.n	800c1d2 <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800c1b0:	697b      	ldr	r3, [r7, #20]
 800c1b2:	3302      	adds	r3, #2
 800c1b4:	005a      	lsls	r2, r3, #1
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	4413      	add	r3, r2
 800c1ba:	68ba      	ldr	r2, [r7, #8]
 800c1bc:	4413      	add	r3, r2
 800c1be:	7819      	ldrb	r1, [r3, #0]
 800c1c0:	697b      	ldr	r3, [r7, #20]
 800c1c2:	005b      	lsls	r3, r3, #1
 800c1c4:	68fa      	ldr	r2, [r7, #12]
 800c1c6:	4413      	add	r3, r2
 800c1c8:	460a      	mov	r2, r1
 800c1ca:	801a      	strh	r2, [r3, #0]
    idx++;
 800c1cc:	697b      	ldr	r3, [r7, #20]
 800c1ce:	3301      	adds	r3, #1
 800c1d0:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800c1d2:	693a      	ldr	r2, [r7, #16]
 800c1d4:	697b      	ldr	r3, [r7, #20]
 800c1d6:	429a      	cmp	r2, r3
 800c1d8:	d8ea      	bhi.n	800c1b0 <PTP_GetArray16+0x4a>
  }
  return size;
 800c1da:	693b      	ldr	r3, [r7, #16]
}
 800c1dc:	4618      	mov	r0, r3
 800c1de:	371c      	adds	r7, #28
 800c1e0:	46bd      	mov	sp, r7
 800c1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1e6:	4770      	bx	lr

0800c1e8 <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 800c1e8:	b480      	push	{r7}
 800c1ea:	b087      	sub	sp, #28
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	60f8      	str	r0, [r7, #12]
 800c1f0:	60b9      	str	r1, [r7, #8]
 800c1f2:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800c1f4:	2300      	movs	r3, #0
 800c1f6:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800c1f8:	68ba      	ldr	r2, [r7, #8]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	4413      	add	r3, r2
 800c1fe:	781b      	ldrb	r3, [r3, #0]
 800c200:	4619      	mov	r1, r3
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	3301      	adds	r3, #1
 800c206:	68ba      	ldr	r2, [r7, #8]
 800c208:	4413      	add	r3, r2
 800c20a:	781b      	ldrb	r3, [r3, #0]
 800c20c:	021b      	lsls	r3, r3, #8
 800c20e:	ea41 0203 	orr.w	r2, r1, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	3302      	adds	r3, #2
 800c216:	68b9      	ldr	r1, [r7, #8]
 800c218:	440b      	add	r3, r1
 800c21a:	781b      	ldrb	r3, [r3, #0]
 800c21c:	041b      	lsls	r3, r3, #16
 800c21e:	431a      	orrs	r2, r3
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	3303      	adds	r3, #3
 800c224:	68b9      	ldr	r1, [r7, #8]
 800c226:	440b      	add	r3, r1
 800c228:	781b      	ldrb	r3, [r3, #0]
 800c22a:	061b      	lsls	r3, r3, #24
 800c22c:	4313      	orrs	r3, r2
 800c22e:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800c230:	e033      	b.n	800c29a <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	3301      	adds	r3, #1
 800c236:	009a      	lsls	r2, r3, #2
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	4413      	add	r3, r2
 800c23c:	68ba      	ldr	r2, [r7, #8]
 800c23e:	4413      	add	r3, r2
 800c240:	781b      	ldrb	r3, [r3, #0]
 800c242:	4619      	mov	r1, r3
 800c244:	697b      	ldr	r3, [r7, #20]
 800c246:	3301      	adds	r3, #1
 800c248:	009a      	lsls	r2, r3, #2
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	4413      	add	r3, r2
 800c24e:	3301      	adds	r3, #1
 800c250:	68ba      	ldr	r2, [r7, #8]
 800c252:	4413      	add	r3, r2
 800c254:	781b      	ldrb	r3, [r3, #0]
 800c256:	021b      	lsls	r3, r3, #8
 800c258:	ea41 0203 	orr.w	r2, r1, r3
 800c25c:	697b      	ldr	r3, [r7, #20]
 800c25e:	3301      	adds	r3, #1
 800c260:	0099      	lsls	r1, r3, #2
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	440b      	add	r3, r1
 800c266:	3302      	adds	r3, #2
 800c268:	68b9      	ldr	r1, [r7, #8]
 800c26a:	440b      	add	r3, r1
 800c26c:	781b      	ldrb	r3, [r3, #0]
 800c26e:	041b      	lsls	r3, r3, #16
 800c270:	ea42 0103 	orr.w	r1, r2, r3
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	3301      	adds	r3, #1
 800c278:	009a      	lsls	r2, r3, #2
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	4413      	add	r3, r2
 800c27e:	3303      	adds	r3, #3
 800c280:	68ba      	ldr	r2, [r7, #8]
 800c282:	4413      	add	r3, r2
 800c284:	781b      	ldrb	r3, [r3, #0]
 800c286:	061a      	lsls	r2, r3, #24
 800c288:	697b      	ldr	r3, [r7, #20]
 800c28a:	009b      	lsls	r3, r3, #2
 800c28c:	68f8      	ldr	r0, [r7, #12]
 800c28e:	4403      	add	r3, r0
 800c290:	430a      	orrs	r2, r1
 800c292:	601a      	str	r2, [r3, #0]
    idx++;
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	3301      	adds	r3, #1
 800c298:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	697b      	ldr	r3, [r7, #20]
 800c29e:	429a      	cmp	r2, r3
 800c2a0:	d8c7      	bhi.n	800c232 <PTP_GetArray32+0x4a>
  }
  return size;
 800c2a2:	693b      	ldr	r3, [r7, #16]
}
 800c2a4:	4618      	mov	r0, r3
 800c2a6:	371c      	adds	r7, #28
 800c2a8:	46bd      	mov	sp, r7
 800c2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ae:	4770      	bx	lr

0800c2b0 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 800c2b0:	b580      	push	{r7, lr}
 800c2b2:	b08e      	sub	sp, #56	@ 0x38
 800c2b4:	af00      	add	r7, sp, #0
 800c2b6:	6078      	str	r0, [r7, #4]
 800c2b8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c2ba:	2301      	movs	r3, #1
 800c2bc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800c2c6:	69db      	ldr	r3, [r3, #28]
 800c2c8:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c2ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c2d0:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d002      	beq.n	800c2de <USBH_PTP_OpenSession+0x2e>
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d041      	beq.n	800c360 <USBH_PTP_OpenSession+0xb0>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 800c2dc:	e047      	b.n	800c36e <USBH_PTP_OpenSession+0xbe>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 800c2de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2e0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c2e4:	461a      	mov	r2, r3
 800c2e6:	2300      	movs	r3, #0
 800c2e8:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
      MTP_Handle->ptp.session_id = session;
 800c2ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2ee:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c2f2:	461a      	mov	r2, r3
 800c2f4:	683b      	ldr	r3, [r7, #0]
 800c2f6:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800c2fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c2fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c300:	461a      	mov	r2, r3
 800c302:	2300      	movs	r3, #0
 800c304:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 800c308:	f241 0302 	movw	r3, #4098	@ 0x1002
 800c30c:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 800c30e:	683b      	ldr	r3, [r7, #0]
 800c310:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800c312:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c314:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c318:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800c31c:	1c5a      	adds	r2, r3, #1
 800c31e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c320:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800c324:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800c328:	617b      	str	r3, [r7, #20]
      ptp_container.Param1 = session;
 800c32a:	683b      	ldr	r3, [r7, #0]
 800c32c:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 800c32e:	2301      	movs	r3, #1
 800c330:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800c334:	f107 030c 	add.w	r3, r7, #12
 800c338:	4619      	mov	r1, r3
 800c33a:	6878      	ldr	r0, [r7, #4]
 800c33c:	f7ff fa64 	bl	800b808 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c340:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c342:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c346:	2201      	movs	r2, #1
 800c348:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c34e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c352:	2202      	movs	r2, #2
 800c354:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800c358:	2301      	movs	r3, #1
 800c35a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800c35e:	e006      	b.n	800c36e <USBH_PTP_OpenSession+0xbe>
      status = USBH_PTP_Process(phost);
 800c360:	6878      	ldr	r0, [r7, #4]
 800c362:	f7fe ffbb 	bl	800b2dc <USBH_PTP_Process>
 800c366:	4603      	mov	r3, r0
 800c368:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800c36c:	bf00      	nop
  }
  return status;
 800c36e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c372:	4618      	mov	r0, r3
 800c374:	3738      	adds	r7, #56	@ 0x38
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}

0800c37a <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800c37a:	b580      	push	{r7, lr}
 800c37c:	b08e      	sub	sp, #56	@ 0x38
 800c37e:	af00      	add	r7, sp, #0
 800c380:	6078      	str	r0, [r7, #4]
 800c382:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c384:	2301      	movs	r3, #1
 800c386:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800c390:	69db      	ldr	r3, [r3, #28]
 800c392:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c394:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c396:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c39a:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800c39e:	2b01      	cmp	r3, #1
 800c3a0:	d002      	beq.n	800c3a8 <USBH_PTP_GetDeviceInfo+0x2e>
 800c3a2:	2b02      	cmp	r3, #2
 800c3a4:	d053      	beq.n	800c44e <USBH_PTP_GetDeviceInfo+0xd4>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 800c3a6:	e061      	b.n	800c46c <USBH_PTP_GetDeviceInfo+0xf2>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800c3a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3aa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c3ae:	461a      	mov	r2, r3
 800c3b0:	2302      	movs	r3, #2
 800c3b2:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800c3b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3b8:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800c3bc:	3304      	adds	r3, #4
 800c3be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c3c0:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800c3c4:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800c3c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3ca:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c3ce:	461a      	mov	r2, r3
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800c3d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3d8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c3dc:	461a      	mov	r2, r3
 800c3de:	2300      	movs	r3, #0
 800c3e0:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3e6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800c3f2:	f241 0301 	movw	r3, #4097	@ 0x1001
 800c3f6:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c3fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c3fe:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c402:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800c404:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c406:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c40a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800c40e:	1c5a      	adds	r2, r3, #1
 800c410:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c412:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800c416:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800c41a:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800c41c:	2300      	movs	r3, #0
 800c41e:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800c422:	f107 030c 	add.w	r3, r7, #12
 800c426:	4619      	mov	r1, r3
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f7ff f9ed 	bl	800b808 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c42e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c430:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c434:	2201      	movs	r2, #1
 800c436:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c43c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c440:	2202      	movs	r2, #2
 800c442:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800c446:	2301      	movs	r3, #1
 800c448:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800c44c:	e00e      	b.n	800c46c <USBH_PTP_GetDeviceInfo+0xf2>
      status = USBH_PTP_Process(phost);
 800c44e:	6878      	ldr	r0, [r7, #4]
 800c450:	f7fe ff44 	bl	800b2dc <USBH_PTP_Process>
 800c454:	4603      	mov	r3, r0
 800c456:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (status == USBH_OK)
 800c45a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c45e:	2b00      	cmp	r3, #0
 800c460:	d103      	bne.n	800c46a <USBH_PTP_GetDeviceInfo+0xf0>
        PTP_DecodeDeviceInfo(phost, dev_info);
 800c462:	6839      	ldr	r1, [r7, #0]
 800c464:	6878      	ldr	r0, [r7, #4]
 800c466:	f7ff fb07 	bl	800ba78 <PTP_DecodeDeviceInfo>
      break;
 800c46a:	bf00      	nop
  }
  return status;
 800c46c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c470:	4618      	mov	r0, r3
 800c472:	3738      	adds	r7, #56	@ 0x38
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}

0800c478 <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 800c478:	b580      	push	{r7, lr}
 800c47a:	b08e      	sub	sp, #56	@ 0x38
 800c47c:	af00      	add	r7, sp, #0
 800c47e:	6078      	str	r0, [r7, #4]
 800c480:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800c482:	2301      	movs	r3, #1
 800c484:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800c48e:	69db      	ldr	r3, [r3, #28]
 800c490:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c498:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800c49c:	2b01      	cmp	r3, #1
 800c49e:	d002      	beq.n	800c4a6 <USBH_PTP_GetStorageIds+0x2e>
 800c4a0:	2b02      	cmp	r3, #2
 800c4a2:	d053      	beq.n	800c54c <USBH_PTP_GetStorageIds+0xd4>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 800c4a4:	e061      	b.n	800c56a <USBH_PTP_GetStorageIds+0xf2>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800c4a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c4ac:	461a      	mov	r2, r3
 800c4ae:	2302      	movs	r3, #2
 800c4b0:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800c4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4b6:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c4be:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800c4c2:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800c4c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800c4d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c4da:	461a      	mov	r2, r3
 800c4dc:	2300      	movs	r3, #0
 800c4de:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800c4e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c4e8:	461a      	mov	r2, r3
 800c4ea:	2300      	movs	r3, #0
 800c4ec:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 800c4f0:	f241 0304 	movw	r3, #4100	@ 0x1004
 800c4f4:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800c4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c4f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c4fc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c500:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800c502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c504:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c508:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800c50c:	1c5a      	adds	r2, r3, #1
 800c50e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800c510:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800c514:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800c518:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800c51a:	2300      	movs	r3, #0
 800c51c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800c520:	f107 030c 	add.w	r3, r7, #12
 800c524:	4619      	mov	r1, r3
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f7ff f96e 	bl	800b808 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c52c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c52e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c532:	2201      	movs	r2, #1
 800c534:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800c53a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c53e:	2202      	movs	r2, #2
 800c540:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800c544:	2301      	movs	r3, #1
 800c546:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800c54a:	e00e      	b.n	800c56a <USBH_PTP_GetStorageIds+0xf2>
      status = USBH_PTP_Process(phost);
 800c54c:	6878      	ldr	r0, [r7, #4]
 800c54e:	f7fe fec5 	bl	800b2dc <USBH_PTP_Process>
 800c552:	4603      	mov	r3, r0
 800c554:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (status == USBH_OK)
 800c558:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d103      	bne.n	800c568 <USBH_PTP_GetStorageIds+0xf0>
        PTP_GetStorageIDs(phost, storage_ids);
 800c560:	6839      	ldr	r1, [r7, #0]
 800c562:	6878      	ldr	r0, [r7, #4]
 800c564:	f7ff fb9c 	bl	800bca0 <PTP_GetStorageIDs>
      break;
 800c568:	bf00      	nop
  }
  return status;
 800c56a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800c56e:	4618      	mov	r0, r3
 800c570:	3738      	adds	r7, #56	@ 0x38
 800c572:	46bd      	mov	sp, r7
 800c574:	bd80      	pop	{r7, pc}

0800c576 <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 800c576:	b580      	push	{r7, lr}
 800c578:	b090      	sub	sp, #64	@ 0x40
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	60f8      	str	r0, [r7, #12]
 800c57e:	60b9      	str	r1, [r7, #8]
 800c580:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800c582:	2301      	movs	r3, #1
 800c584:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800c58e:	69db      	ldr	r3, [r3, #28]
 800c590:	63bb      	str	r3, [r7, #56]	@ 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800c592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c594:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c598:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800c59c:	2b01      	cmp	r3, #1
 800c59e:	d002      	beq.n	800c5a6 <USBH_PTP_GetStorageInfo+0x30>
 800c5a0:	2b02      	cmp	r3, #2
 800c5a2:	d055      	beq.n	800c650 <USBH_PTP_GetStorageInfo+0xda>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 800c5a4:	e064      	b.n	800c670 <USBH_PTP_GetStorageInfo+0xfa>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800c5a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5a8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c5ac:	461a      	mov	r2, r3
 800c5ae:	2302      	movs	r3, #2
 800c5b0:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5b6:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800c5ba:	3304      	adds	r3, #4
 800c5bc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c5be:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800c5c2:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800c5c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5c8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c5cc:	461a      	mov	r2, r3
 800c5ce:	2300      	movs	r3, #0
 800c5d0:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800c5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5d6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c5da:	461a      	mov	r2, r3
 800c5dc:	2300      	movs	r3, #0
 800c5de:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800c5e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c5e8:	461a      	mov	r2, r3
 800c5ea:	2300      	movs	r3, #0
 800c5ec:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 800c5f0:	f241 0305 	movw	r3, #4101	@ 0x1005
 800c5f4:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800c5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c5f8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c5fc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800c600:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800c602:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c604:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800c608:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800c60c:	1c5a      	adds	r2, r3, #1
 800c60e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800c610:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800c614:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800c618:	61fb      	str	r3, [r7, #28]
      ptp_container.Param1 = storage_id;
 800c61a:	68bb      	ldr	r3, [r7, #8]
 800c61c:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 800c61e:	2301      	movs	r3, #1
 800c620:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800c624:	f107 0314 	add.w	r3, r7, #20
 800c628:	4619      	mov	r1, r3
 800c62a:	68f8      	ldr	r0, [r7, #12]
 800c62c:	f7ff f8ec 	bl	800b808 <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800c630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c632:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c636:	2201      	movs	r2, #1
 800c638:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800c63c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c63e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800c642:	2202      	movs	r2, #2
 800c644:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800c648:	2301      	movs	r3, #1
 800c64a:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 800c64e:	e00f      	b.n	800c670 <USBH_PTP_GetStorageInfo+0xfa>
      status = USBH_PTP_Process(phost);
 800c650:	68f8      	ldr	r0, [r7, #12]
 800c652:	f7fe fe43 	bl	800b2dc <USBH_PTP_Process>
 800c656:	4603      	mov	r3, r0
 800c658:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      if (status == USBH_OK)
 800c65c:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800c660:	2b00      	cmp	r3, #0
 800c662:	d104      	bne.n	800c66e <USBH_PTP_GetStorageInfo+0xf8>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 800c664:	687a      	ldr	r2, [r7, #4]
 800c666:	68b9      	ldr	r1, [r7, #8]
 800c668:	68f8      	ldr	r0, [r7, #12]
 800c66a:	f7ff fb36 	bl	800bcda <PTP_GetStorageInfo>
      break;
 800c66e:	bf00      	nop
  }
  return status;
 800c670:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800c674:	4618      	mov	r0, r3
 800c676:	3740      	adds	r7, #64	@ 0x40
 800c678:	46bd      	mov	sp, r7
 800c67a:	bd80      	pop	{r7, pc}

0800c67c <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800c67c:	b580      	push	{r7, lr}
 800c67e:	b084      	sub	sp, #16
 800c680:	af00      	add	r7, sp, #0
 800c682:	60f8      	str	r0, [r7, #12]
 800c684:	60b9      	str	r1, [r7, #8]
 800c686:	4613      	mov	r3, r2
 800c688:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	2b00      	cmp	r3, #0
 800c68e:	d101      	bne.n	800c694 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800c690:	2302      	movs	r3, #2
 800c692:	e029      	b.n	800c6e8 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800c694:	68fb      	ldr	r3, [r7, #12]
 800c696:	79fa      	ldrb	r2, [r7, #7]
 800c698:	f883 259c 	strb.w	r2, [r3, #1436]	@ 0x59c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800c69c:	68fb      	ldr	r3, [r7, #12]
 800c69e:	2200      	movs	r2, #0
 800c6a0:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
  phost->ClassNumber = 0U;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2200      	movs	r2, #0
 800c6a8:	f8c3 2550 	str.w	r2, [r3, #1360]	@ 0x550

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800c6ac:	68f8      	ldr	r0, [r7, #12]
 800c6ae:	f000 f81f 	bl	800c6f0 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	2200      	movs	r2, #0
 800c6b6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	2200      	movs	r2, #0
 800c6be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	2200      	movs	r2, #0
 800c6c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800c6d2:	68bb      	ldr	r3, [r7, #8]
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d003      	beq.n	800c6e0 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	68ba      	ldr	r2, [r7, #8]
 800c6dc:	f8c3 25a4 	str.w	r2, [r3, #1444]	@ 0x5a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800c6e0:	68f8      	ldr	r0, [r7, #12]
 800c6e2:	f002 fd35 	bl	800f150 <USBH_LL_Init>

  return USBH_OK;
 800c6e6:	2300      	movs	r3, #0
}
 800c6e8:	4618      	mov	r0, r3
 800c6ea:	3710      	adds	r7, #16
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}

0800c6f0 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800c6f0:	b580      	push	{r7, lr}
 800c6f2:	b084      	sub	sp, #16
 800c6f4:	af00      	add	r7, sp, #0
 800c6f6:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	60fb      	str	r3, [r7, #12]
 800c700:	e00a      	b.n	800c718 <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800c702:	687a      	ldr	r2, [r7, #4]
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800c70a:	009b      	lsls	r3, r3, #2
 800c70c:	4413      	add	r3, r2
 800c70e:	2200      	movs	r2, #0
 800c710:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	3301      	adds	r3, #1
 800c716:	60fb      	str	r3, [r7, #12]
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	2b0f      	cmp	r3, #15
 800c71c:	d9f1      	bls.n	800c702 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c71e:	2300      	movs	r3, #0
 800c720:	60fb      	str	r3, [r7, #12]
 800c722:	e009      	b.n	800c738 <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	4413      	add	r3, r2
 800c72a:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c72e:	2200      	movs	r2, #0
 800c730:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	3301      	adds	r3, #1
 800c736:	60fb      	str	r3, [r7, #12]
 800c738:	68fb      	ldr	r3, [r7, #12]
 800c73a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c73e:	d3f1      	bcc.n	800c724 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	2200      	movs	r2, #0
 800c744:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	2200      	movs	r2, #0
 800c74a:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	2201      	movs	r2, #1
 800c750:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800c752:	687b      	ldr	r3, [r7, #4]
 800c754:	2200      	movs	r2, #0
 800c756:	f8c3 2594 	str.w	r2, [r3, #1428]	@ 0x594

  phost->Control.state = CTRL_SETUP;
 800c75a:	687b      	ldr	r3, [r7, #4]
 800c75c:	2201      	movs	r2, #1
 800c75e:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2240      	movs	r2, #64	@ 0x40
 800c764:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800c766:	687b      	ldr	r3, [r7, #4]
 800c768:	2200      	movs	r2, #0
 800c76a:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2200      	movs	r2, #0
 800c770:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	2201      	movs	r2, #1
 800c778:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800c77c:	687b      	ldr	r3, [r7, #4]
 800c77e:	2200      	movs	r2, #0
 800c780:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	2200      	movs	r2, #0
 800c788:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	331c      	adds	r3, #28
 800c790:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c794:	2100      	movs	r1, #0
 800c796:	4618      	mov	r0, r3
 800c798:	f003 fa00 	bl	800fb9c <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c7a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c7a6:	2100      	movs	r1, #0
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f003 f9f7 	bl	800fb9c <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c7b4:	2212      	movs	r2, #18
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	4618      	mov	r0, r3
 800c7ba:	f003 f9ef 	bl	800fb9c <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c7c4:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800c7c8:	2100      	movs	r1, #0
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f003 f9e6 	bl	800fb9c <memset>

  return USBH_OK;
 800c7d0:	2300      	movs	r3, #0
}
 800c7d2:	4618      	mov	r0, r3
 800c7d4:	3710      	adds	r7, #16
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800c7da:	b480      	push	{r7}
 800c7dc:	b085      	sub	sp, #20
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]
 800c7e2:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800c7e4:	2300      	movs	r3, #0
 800c7e6:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800c7e8:	683b      	ldr	r3, [r7, #0]
 800c7ea:	2b00      	cmp	r3, #0
 800c7ec:	d017      	beq.n	800c81e <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 800c7f4:	2b04      	cmp	r3, #4
 800c7f6:	d80f      	bhi.n	800c818 <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 800c7fe:	1c59      	adds	r1, r3, #1
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	f8c2 1550 	str.w	r1, [r2, #1360]	@ 0x550
 800c806:	687a      	ldr	r2, [r7, #4]
 800c808:	f503 73a7 	add.w	r3, r3, #334	@ 0x14e
 800c80c:	6839      	ldr	r1, [r7, #0]
 800c80e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800c812:	2300      	movs	r3, #0
 800c814:	73fb      	strb	r3, [r7, #15]
 800c816:	e004      	b.n	800c822 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800c818:	2302      	movs	r3, #2
 800c81a:	73fb      	strb	r3, [r7, #15]
 800c81c:	e001      	b.n	800c822 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800c81e:	2302      	movs	r3, #2
 800c820:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c822:	7bfb      	ldrb	r3, [r7, #15]
}
 800c824:	4618      	mov	r0, r3
 800c826:	3714      	adds	r7, #20
 800c828:	46bd      	mov	sp, r7
 800c82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82e:	4770      	bx	lr

0800c830 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800c830:	b480      	push	{r7}
 800c832:	b085      	sub	sp, #20
 800c834:	af00      	add	r7, sp, #0
 800c836:	6078      	str	r0, [r7, #4]
 800c838:	460b      	mov	r3, r1
 800c83a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800c83c:	2300      	movs	r3, #0
 800c83e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800c846:	78fa      	ldrb	r2, [r7, #3]
 800c848:	429a      	cmp	r2, r3
 800c84a:	d204      	bcs.n	800c856 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	78fa      	ldrb	r2, [r7, #3]
 800c850:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800c854:	e001      	b.n	800c85a <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800c856:	2302      	movs	r3, #2
 800c858:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c85a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c85c:	4618      	mov	r0, r3
 800c85e:	3714      	adds	r7, #20
 800c860:	46bd      	mov	sp, r7
 800c862:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c866:	4770      	bx	lr

0800c868 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800c868:	b480      	push	{r7}
 800c86a:	b087      	sub	sp, #28
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	4608      	mov	r0, r1
 800c872:	4611      	mov	r1, r2
 800c874:	461a      	mov	r2, r3
 800c876:	4603      	mov	r3, r0
 800c878:	70fb      	strb	r3, [r7, #3]
 800c87a:	460b      	mov	r3, r1
 800c87c:	70bb      	strb	r3, [r7, #2]
 800c87e:	4613      	mov	r3, r2
 800c880:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c882:	2300      	movs	r3, #0
 800c884:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c886:	2300      	movs	r3, #0
 800c888:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c890:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c892:	e025      	b.n	800c8e0 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c894:	7dfb      	ldrb	r3, [r7, #23]
 800c896:	2232      	movs	r2, #50	@ 0x32
 800c898:	fb02 f303 	mul.w	r3, r2, r3
 800c89c:	3308      	adds	r3, #8
 800c89e:	68fa      	ldr	r2, [r7, #12]
 800c8a0:	4413      	add	r3, r2
 800c8a2:	3302      	adds	r3, #2
 800c8a4:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8a6:	693b      	ldr	r3, [r7, #16]
 800c8a8:	795b      	ldrb	r3, [r3, #5]
 800c8aa:	78fa      	ldrb	r2, [r7, #3]
 800c8ac:	429a      	cmp	r2, r3
 800c8ae:	d002      	beq.n	800c8b6 <USBH_FindInterface+0x4e>
 800c8b0:	78fb      	ldrb	r3, [r7, #3]
 800c8b2:	2bff      	cmp	r3, #255	@ 0xff
 800c8b4:	d111      	bne.n	800c8da <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800c8ba:	78ba      	ldrb	r2, [r7, #2]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d002      	beq.n	800c8c6 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8c0:	78bb      	ldrb	r3, [r7, #2]
 800c8c2:	2bff      	cmp	r3, #255	@ 0xff
 800c8c4:	d109      	bne.n	800c8da <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8c6:	693b      	ldr	r3, [r7, #16]
 800c8c8:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800c8ca:	787a      	ldrb	r2, [r7, #1]
 800c8cc:	429a      	cmp	r2, r3
 800c8ce:	d002      	beq.n	800c8d6 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800c8d0:	787b      	ldrb	r3, [r7, #1]
 800c8d2:	2bff      	cmp	r3, #255	@ 0xff
 800c8d4:	d101      	bne.n	800c8da <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800c8d6:	7dfb      	ldrb	r3, [r7, #23]
 800c8d8:	e006      	b.n	800c8e8 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800c8da:	7dfb      	ldrb	r3, [r7, #23]
 800c8dc:	3301      	adds	r3, #1
 800c8de:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c8e0:	7dfb      	ldrb	r3, [r7, #23]
 800c8e2:	2b09      	cmp	r3, #9
 800c8e4:	d9d6      	bls.n	800c894 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800c8e6:	23ff      	movs	r3, #255	@ 0xff
}
 800c8e8:	4618      	mov	r0, r3
 800c8ea:	371c      	adds	r7, #28
 800c8ec:	46bd      	mov	sp, r7
 800c8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8f2:	4770      	bx	lr

0800c8f4 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800c8f4:	b480      	push	{r7}
 800c8f6:	b087      	sub	sp, #28
 800c8f8:	af00      	add	r7, sp, #0
 800c8fa:	6078      	str	r0, [r7, #4]
 800c8fc:	460b      	mov	r3, r1
 800c8fe:	70fb      	strb	r3, [r7, #3]
 800c900:	4613      	mov	r3, r2
 800c902:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800c904:	2300      	movs	r3, #0
 800c906:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c908:	2300      	movs	r3, #0
 800c90a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c912:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c914:	e017      	b.n	800c946 <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800c916:	7dfb      	ldrb	r3, [r7, #23]
 800c918:	2232      	movs	r2, #50	@ 0x32
 800c91a:	fb02 f303 	mul.w	r3, r2, r3
 800c91e:	3308      	adds	r3, #8
 800c920:	68fa      	ldr	r2, [r7, #12]
 800c922:	4413      	add	r3, r2
 800c924:	3302      	adds	r3, #2
 800c926:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800c928:	693b      	ldr	r3, [r7, #16]
 800c92a:	789b      	ldrb	r3, [r3, #2]
 800c92c:	78fa      	ldrb	r2, [r7, #3]
 800c92e:	429a      	cmp	r2, r3
 800c930:	d106      	bne.n	800c940 <USBH_FindInterfaceIndex+0x4c>
 800c932:	693b      	ldr	r3, [r7, #16]
 800c934:	78db      	ldrb	r3, [r3, #3]
 800c936:	78ba      	ldrb	r2, [r7, #2]
 800c938:	429a      	cmp	r2, r3
 800c93a:	d101      	bne.n	800c940 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800c93c:	7dfb      	ldrb	r3, [r7, #23]
 800c93e:	e006      	b.n	800c94e <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 800c940:	7dfb      	ldrb	r3, [r7, #23]
 800c942:	3301      	adds	r3, #1
 800c944:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800c946:	7dfb      	ldrb	r3, [r7, #23]
 800c948:	2b09      	cmp	r3, #9
 800c94a:	d9e4      	bls.n	800c916 <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800c94c:	23ff      	movs	r3, #255	@ 0xff
}
 800c94e:	4618      	mov	r0, r3
 800c950:	371c      	adds	r7, #28
 800c952:	46bd      	mov	sp, r7
 800c954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c958:	4770      	bx	lr

0800c95a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800c95a:	b580      	push	{r7, lr}
 800c95c:	b082      	sub	sp, #8
 800c95e:	af00      	add	r7, sp, #0
 800c960:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800c962:	6878      	ldr	r0, [r7, #4]
 800c964:	f002 fc30 	bl	800f1c8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800c968:	2101      	movs	r1, #1
 800c96a:	6878      	ldr	r0, [r7, #4]
 800c96c:	f002 fd49 	bl	800f402 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800c970:	2300      	movs	r3, #0
}
 800c972:	4618      	mov	r0, r3
 800c974:	3708      	adds	r7, #8
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}
	...

0800c97c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b088      	sub	sp, #32
 800c980:	af04      	add	r7, sp, #16
 800c982:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800c984:	2302      	movs	r3, #2
 800c986:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800c988:	2300      	movs	r3, #0
 800c98a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800c98c:	687b      	ldr	r3, [r7, #4]
 800c98e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800c992:	b2db      	uxtb	r3, r3
 800c994:	2b01      	cmp	r3, #1
 800c996:	d102      	bne.n	800c99e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800c998:	687b      	ldr	r3, [r7, #4]
 800c99a:	2203      	movs	r2, #3
 800c99c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	781b      	ldrb	r3, [r3, #0]
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	2b0b      	cmp	r3, #11
 800c9a6:	f200 81bd 	bhi.w	800cd24 <USBH_Process+0x3a8>
 800c9aa:	a201      	add	r2, pc, #4	@ (adr r2, 800c9b0 <USBH_Process+0x34>)
 800c9ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c9b0:	0800c9e1 	.word	0x0800c9e1
 800c9b4:	0800ca13 	.word	0x0800ca13
 800c9b8:	0800ca7b 	.word	0x0800ca7b
 800c9bc:	0800ccbf 	.word	0x0800ccbf
 800c9c0:	0800cd25 	.word	0x0800cd25
 800c9c4:	0800cb1b 	.word	0x0800cb1b
 800c9c8:	0800cc65 	.word	0x0800cc65
 800c9cc:	0800cb51 	.word	0x0800cb51
 800c9d0:	0800cb71 	.word	0x0800cb71
 800c9d4:	0800cb8f 	.word	0x0800cb8f
 800c9d8:	0800cbd3 	.word	0x0800cbd3
 800c9dc:	0800cca7 	.word	0x0800cca7
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800c9e6:	b2db      	uxtb	r3, r3
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	f000 819d 	beq.w	800cd28 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	2201      	movs	r2, #1
 800c9f2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800c9f4:	20c8      	movs	r0, #200	@ 0xc8
 800c9f6:	f002 fd81 	bl	800f4fc <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800c9fa:	6878      	ldr	r0, [r7, #4]
 800c9fc:	f002 fc41 	bl	800f282 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ca00:	687b      	ldr	r3, [r7, #4]
 800ca02:	2200      	movs	r2, #0
 800ca04:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	f8c3 2598 	str.w	r2, [r3, #1432]	@ 0x598
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ca10:	e18a      	b.n	800cd28 <USBH_Process+0x3ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ca12:	687b      	ldr	r3, [r7, #4]
 800ca14:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ca18:	2b01      	cmp	r3, #1
 800ca1a:	d107      	bne.n	800ca2c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ca1c:	687b      	ldr	r3, [r7, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2202      	movs	r2, #2
 800ca28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ca2a:	e18c      	b.n	800cd46 <USBH_Process+0x3ca>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
 800ca32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca36:	d914      	bls.n	800ca62 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ca3e:	3301      	adds	r3, #1
 800ca40:	b2da      	uxtb	r2, r3
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800ca4e:	2b03      	cmp	r3, #3
 800ca50:	d903      	bls.n	800ca5a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	220d      	movs	r2, #13
 800ca56:	701a      	strb	r2, [r3, #0]
      break;
 800ca58:	e175      	b.n	800cd46 <USBH_Process+0x3ca>
            phost->gState = HOST_IDLE;
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	2200      	movs	r2, #0
 800ca5e:	701a      	strb	r2, [r3, #0]
      break;
 800ca60:	e171      	b.n	800cd46 <USBH_Process+0x3ca>
          phost->Timeout += 10U;
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
 800ca68:	f103 020a 	add.w	r2, r3, #10
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	f8c3 2598 	str.w	r2, [r3, #1432]	@ 0x598
          USBH_Delay(10U);
 800ca72:	200a      	movs	r0, #10
 800ca74:	f002 fd42 	bl	800f4fc <USBH_Delay>
      break;
 800ca78:	e165      	b.n	800cd46 <USBH_Process+0x3ca>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800ca7a:	687b      	ldr	r3, [r7, #4]
 800ca7c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d005      	beq.n	800ca90 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800ca8a:	2104      	movs	r1, #4
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800ca90:	2064      	movs	r0, #100	@ 0x64
 800ca92:	f002 fd33 	bl	800f4fc <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800ca96:	6878      	ldr	r0, [r7, #4]
 800ca98:	f002 fbcc 	bl	800f234 <USBH_LL_GetSpeed>
 800ca9c:	4603      	mov	r3, r0
 800ca9e:	461a      	mov	r2, r3
 800caa0:	687b      	ldr	r3, [r7, #4]
 800caa2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800caa6:	687b      	ldr	r3, [r7, #4]
 800caa8:	2205      	movs	r2, #5
 800caaa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800caac:	2100      	movs	r1, #0
 800caae:	6878      	ldr	r0, [r7, #4]
 800cab0:	f001 faff 	bl	800e0b2 <USBH_AllocPipe>
 800cab4:	4603      	mov	r3, r0
 800cab6:	461a      	mov	r2, r3
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800cabc:	2180      	movs	r1, #128	@ 0x80
 800cabe:	6878      	ldr	r0, [r7, #4]
 800cac0:	f001 faf7 	bl	800e0b2 <USBH_AllocPipe>
 800cac4:	4603      	mov	r3, r0
 800cac6:	461a      	mov	r2, r3
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	7919      	ldrb	r1, [r3, #4]
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cadc:	687a      	ldr	r2, [r7, #4]
 800cade:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800cae0:	9202      	str	r2, [sp, #8]
 800cae2:	2200      	movs	r2, #0
 800cae4:	9201      	str	r2, [sp, #4]
 800cae6:	9300      	str	r3, [sp, #0]
 800cae8:	4603      	mov	r3, r0
 800caea:	2280      	movs	r2, #128	@ 0x80
 800caec:	6878      	ldr	r0, [r7, #4]
 800caee:	f001 fab1 	bl	800e054 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	7959      	ldrb	r1, [r3, #5]
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800cb02:	687a      	ldr	r2, [r7, #4]
 800cb04:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800cb06:	9202      	str	r2, [sp, #8]
 800cb08:	2200      	movs	r2, #0
 800cb0a:	9201      	str	r2, [sp, #4]
 800cb0c:	9300      	str	r3, [sp, #0]
 800cb0e:	4603      	mov	r3, r0
 800cb10:	2200      	movs	r2, #0
 800cb12:	6878      	ldr	r0, [r7, #4]
 800cb14:	f001 fa9e 	bl	800e054 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb18:	e115      	b.n	800cd46 <USBH_Process+0x3ca>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800cb1a:	6878      	ldr	r0, [r7, #4]
 800cb1c:	f000 f918 	bl	800cd50 <USBH_HandleEnum>
 800cb20:	4603      	mov	r3, r0
 800cb22:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800cb24:	7bbb      	ldrb	r3, [r7, #14]
 800cb26:	b2db      	uxtb	r3, r3
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	f040 80ff 	bne.w	800cd2c <USBH_Process+0x3b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800cb2e:	687b      	ldr	r3, [r7, #4]
 800cb30:	2200      	movs	r2, #0
 800cb32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800cb3c:	2b01      	cmp	r3, #1
 800cb3e:	d103      	bne.n	800cb48 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	2208      	movs	r2, #8
 800cb44:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800cb46:	e0f1      	b.n	800cd2c <USBH_Process+0x3b0>
          phost->gState = HOST_INPUT;
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	2207      	movs	r2, #7
 800cb4c:	701a      	strb	r2, [r3, #0]
      break;
 800cb4e:	e0ed      	b.n	800cd2c <USBH_Process+0x3b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	f000 80ea 	beq.w	800cd30 <USBH_Process+0x3b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800cb62:	2101      	movs	r1, #1
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	2208      	movs	r2, #8
 800cb6c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800cb6e:	e0df      	b.n	800cd30 <USBH_Process+0x3b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800cb70:	687b      	ldr	r3, [r7, #4]
 800cb72:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800cb76:	4619      	mov	r1, r3
 800cb78:	6878      	ldr	r0, [r7, #4]
 800cb7a:	f000 fc3c 	bl	800d3f6 <USBH_SetCfg>
 800cb7e:	4603      	mov	r3, r0
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	f040 80d7 	bne.w	800cd34 <USBH_Process+0x3b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	2209      	movs	r2, #9
 800cb8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cb8c:	e0d2      	b.n	800cd34 <USBH_Process+0x3b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800cb94:	f003 0320 	and.w	r3, r3, #32
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d016      	beq.n	800cbca <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800cb9c:	2101      	movs	r1, #1
 800cb9e:	6878      	ldr	r0, [r7, #4]
 800cba0:	f000 fc73 	bl	800d48a <USBH_SetFeature>
 800cba4:	4603      	mov	r3, r0
 800cba6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cba8:	7bbb      	ldrb	r3, [r7, #14]
 800cbaa:	b2db      	uxtb	r3, r3
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d103      	bne.n	800cbb8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	220a      	movs	r2, #10
 800cbb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cbb6:	e0bf      	b.n	800cd38 <USBH_Process+0x3bc>
        else if (status == USBH_NOT_SUPPORTED)
 800cbb8:	7bbb      	ldrb	r3, [r7, #14]
 800cbba:	b2db      	uxtb	r3, r3
 800cbbc:	2b03      	cmp	r3, #3
 800cbbe:	f040 80bb 	bne.w	800cd38 <USBH_Process+0x3bc>
          phost->gState = HOST_CHECK_CLASS;
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	220a      	movs	r2, #10
 800cbc6:	701a      	strb	r2, [r3, #0]
      break;
 800cbc8:	e0b6      	b.n	800cd38 <USBH_Process+0x3bc>
        phost->gState = HOST_CHECK_CLASS;
 800cbca:	687b      	ldr	r3, [r7, #4]
 800cbcc:	220a      	movs	r2, #10
 800cbce:	701a      	strb	r2, [r3, #0]
      break;
 800cbd0:	e0b2      	b.n	800cd38 <USBH_Process+0x3bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	f000 80af 	beq.w	800cd3c <USBH_Process+0x3c0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800cbde:	687b      	ldr	r3, [r7, #4]
 800cbe0:	2200      	movs	r2, #0
 800cbe2:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cbe6:	2300      	movs	r3, #0
 800cbe8:	73fb      	strb	r3, [r7, #15]
 800cbea:	e018      	b.n	800cc1e <USBH_Process+0x2a2>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800cbec:	7bfa      	ldrb	r2, [r7, #15]
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	f502 72a7 	add.w	r2, r2, #334	@ 0x14e
 800cbf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cbf8:	791a      	ldrb	r2, [r3, #4]
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800cc00:	429a      	cmp	r2, r3
 800cc02:	d109      	bne.n	800cc18 <USBH_Process+0x29c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800cc04:	7bfa      	ldrb	r2, [r7, #15]
 800cc06:	687b      	ldr	r3, [r7, #4]
 800cc08:	f502 72a7 	add.w	r2, r2, #334	@ 0x14e
 800cc0c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
            break;
 800cc16:	e005      	b.n	800cc24 <USBH_Process+0x2a8>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800cc18:	7bfb      	ldrb	r3, [r7, #15]
 800cc1a:	3301      	adds	r3, #1
 800cc1c:	73fb      	strb	r3, [r7, #15]
 800cc1e:	7bfb      	ldrb	r3, [r7, #15]
 800cc20:	2b04      	cmp	r3, #4
 800cc22:	d9e3      	bls.n	800cbec <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d016      	beq.n	800cc5c <USBH_Process+0x2e0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800cc34:	689b      	ldr	r3, [r3, #8]
 800cc36:	6878      	ldr	r0, [r7, #4]
 800cc38:	4798      	blx	r3
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d109      	bne.n	800cc54 <USBH_Process+0x2d8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800cc40:	687b      	ldr	r3, [r7, #4]
 800cc42:	2206      	movs	r2, #6
 800cc44:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800cc4c:	2103      	movs	r1, #3
 800cc4e:	6878      	ldr	r0, [r7, #4]
 800cc50:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc52:	e073      	b.n	800cd3c <USBH_Process+0x3c0>
            phost->gState = HOST_ABORT_STATE;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	220d      	movs	r2, #13
 800cc58:	701a      	strb	r2, [r3, #0]
      break;
 800cc5a:	e06f      	b.n	800cd3c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	220d      	movs	r2, #13
 800cc60:	701a      	strb	r2, [r3, #0]
      break;
 800cc62:	e06b      	b.n	800cd3c <USBH_Process+0x3c0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800cc64:	687b      	ldr	r3, [r7, #4]
 800cc66:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d017      	beq.n	800cc9e <USBH_Process+0x322>
      {
        status = phost->pActiveClass->Requests(phost);
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	6878      	ldr	r0, [r7, #4]
 800cc78:	4798      	blx	r3
 800cc7a:	4603      	mov	r3, r0
 800cc7c:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800cc7e:	7bbb      	ldrb	r3, [r7, #14]
 800cc80:	b2db      	uxtb	r3, r3
 800cc82:	2b00      	cmp	r3, #0
 800cc84:	d103      	bne.n	800cc8e <USBH_Process+0x312>
        {
          phost->gState = HOST_CLASS;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	220b      	movs	r2, #11
 800cc8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cc8c:	e058      	b.n	800cd40 <USBH_Process+0x3c4>
        else if (status == USBH_FAIL)
 800cc8e:	7bbb      	ldrb	r3, [r7, #14]
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b02      	cmp	r3, #2
 800cc94:	d154      	bne.n	800cd40 <USBH_Process+0x3c4>
          phost->gState = HOST_ABORT_STATE;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	220d      	movs	r2, #13
 800cc9a:	701a      	strb	r2, [r3, #0]
      break;
 800cc9c:	e050      	b.n	800cd40 <USBH_Process+0x3c4>
        phost->gState = HOST_ABORT_STATE;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	220d      	movs	r2, #13
 800cca2:	701a      	strb	r2, [r3, #0]
      break;
 800cca4:	e04c      	b.n	800cd40 <USBH_Process+0x3c4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d049      	beq.n	800cd44 <USBH_Process+0x3c8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ccb6:	695b      	ldr	r3, [r3, #20]
 800ccb8:	6878      	ldr	r0, [r7, #4]
 800ccba:	4798      	blx	r3
      }
      break;
 800ccbc:	e042      	b.n	800cd44 <USBH_Process+0x3c8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	2200      	movs	r2, #0
 800ccc2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800ccc6:	6878      	ldr	r0, [r7, #4]
 800ccc8:	f7ff fd12 	bl	800c6f0 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ccd2:	2b00      	cmp	r3, #0
 800ccd4:	d009      	beq.n	800ccea <USBH_Process+0x36e>
      {
        phost->pActiveClass->DeInit(phost);
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ccdc:	68db      	ldr	r3, [r3, #12]
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	2200      	movs	r2, #0
 800cce6:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
      }

      if (phost->pUser != NULL)
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d005      	beq.n	800cd00 <USBH_Process+0x384>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800ccf4:	687b      	ldr	r3, [r7, #4]
 800ccf6:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800ccfa:	2105      	movs	r1, #5
 800ccfc:	6878      	ldr	r0, [r7, #4]
 800ccfe:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800cd06:	b2db      	uxtb	r3, r3
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d107      	bne.n	800cd1c <USBH_Process+0x3a0>
      {
        phost->device.is_ReEnumerated = 0U;
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	2200      	movs	r2, #0
 800cd10:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800cd14:	6878      	ldr	r0, [r7, #4]
 800cd16:	f7ff fe20 	bl	800c95a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800cd1a:	e014      	b.n	800cd46 <USBH_Process+0x3ca>
        (void)USBH_LL_Start(phost);
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f002 fa53 	bl	800f1c8 <USBH_LL_Start>
      break;
 800cd22:	e010      	b.n	800cd46 <USBH_Process+0x3ca>

    case HOST_ABORT_STATE:
    default :
      break;
 800cd24:	bf00      	nop
 800cd26:	e00e      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd28:	bf00      	nop
 800cd2a:	e00c      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd2c:	bf00      	nop
 800cd2e:	e00a      	b.n	800cd46 <USBH_Process+0x3ca>
    break;
 800cd30:	bf00      	nop
 800cd32:	e008      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd34:	bf00      	nop
 800cd36:	e006      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd38:	bf00      	nop
 800cd3a:	e004      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd3c:	bf00      	nop
 800cd3e:	e002      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd40:	bf00      	nop
 800cd42:	e000      	b.n	800cd46 <USBH_Process+0x3ca>
      break;
 800cd44:	bf00      	nop
  }
  return USBH_OK;
 800cd46:	2300      	movs	r3, #0
}
 800cd48:	4618      	mov	r0, r3
 800cd4a:	3710      	adds	r7, #16
 800cd4c:	46bd      	mov	sp, r7
 800cd4e:	bd80      	pop	{r7, pc}

0800cd50 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af04      	add	r7, sp, #16
 800cd56:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800cd58:	2301      	movs	r3, #1
 800cd5a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800cd5c:	2301      	movs	r3, #1
 800cd5e:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	785b      	ldrb	r3, [r3, #1]
 800cd64:	2b07      	cmp	r3, #7
 800cd66:	f200 81bd 	bhi.w	800d0e4 <USBH_HandleEnum+0x394>
 800cd6a:	a201      	add	r2, pc, #4	@ (adr r2, 800cd70 <USBH_HandleEnum+0x20>)
 800cd6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd70:	0800cd91 	.word	0x0800cd91
 800cd74:	0800ce4b 	.word	0x0800ce4b
 800cd78:	0800ceb5 	.word	0x0800ceb5
 800cd7c:	0800cf3f 	.word	0x0800cf3f
 800cd80:	0800cfa9 	.word	0x0800cfa9
 800cd84:	0800d019 	.word	0x0800d019
 800cd88:	0800d05f 	.word	0x0800d05f
 800cd8c:	0800d0a5 	.word	0x0800d0a5
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800cd90:	2108      	movs	r1, #8
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f000 fa4c 	bl	800d230 <USBH_Get_DevDesc>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cd9c:	7bbb      	ldrb	r3, [r7, #14]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d12e      	bne.n	800ce00 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2201      	movs	r2, #1
 800cdb0:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cdb2:	687b      	ldr	r3, [r7, #4]
 800cdb4:	7919      	ldrb	r1, [r3, #4]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cdc2:	687a      	ldr	r2, [r7, #4]
 800cdc4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800cdc6:	9202      	str	r2, [sp, #8]
 800cdc8:	2200      	movs	r2, #0
 800cdca:	9201      	str	r2, [sp, #4]
 800cdcc:	9300      	str	r3, [sp, #0]
 800cdce:	4603      	mov	r3, r0
 800cdd0:	2280      	movs	r2, #128	@ 0x80
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f001 f93e 	bl	800e054 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	7959      	ldrb	r1, [r3, #5]
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cdec:	9202      	str	r2, [sp, #8]
 800cdee:	2200      	movs	r2, #0
 800cdf0:	9201      	str	r2, [sp, #4]
 800cdf2:	9300      	str	r3, [sp, #0]
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2200      	movs	r2, #0
 800cdf8:	6878      	ldr	r0, [r7, #4]
 800cdfa:	f001 f92b 	bl	800e054 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cdfe:	e173      	b.n	800d0e8 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
 800ce02:	2b03      	cmp	r3, #3
 800ce04:	f040 8170 	bne.w	800d0e8 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce0e:	3301      	adds	r3, #1
 800ce10:	b2da      	uxtb	r2, r3
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce1e:	2b03      	cmp	r3, #3
 800ce20:	d903      	bls.n	800ce2a <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	220d      	movs	r2, #13
 800ce26:	701a      	strb	r2, [r3, #0]
      break;
 800ce28:	e15e      	b.n	800d0e8 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	795b      	ldrb	r3, [r3, #5]
 800ce2e:	4619      	mov	r1, r3
 800ce30:	6878      	ldr	r0, [r7, #4]
 800ce32:	f001 f960 	bl	800e0f6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	791b      	ldrb	r3, [r3, #4]
 800ce3a:	4619      	mov	r1, r3
 800ce3c:	6878      	ldr	r0, [r7, #4]
 800ce3e:	f001 f95a 	bl	800e0f6 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	2200      	movs	r2, #0
 800ce46:	701a      	strb	r2, [r3, #0]
      break;
 800ce48:	e14e      	b.n	800d0e8 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800ce4a:	2112      	movs	r1, #18
 800ce4c:	6878      	ldr	r0, [r7, #4]
 800ce4e:	f000 f9ef 	bl	800d230 <USBH_Get_DevDesc>
 800ce52:	4603      	mov	r3, r0
 800ce54:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800ce56:	7bbb      	ldrb	r3, [r7, #14]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d103      	bne.n	800ce64 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800ce5c:	687b      	ldr	r3, [r7, #4]
 800ce5e:	2202      	movs	r2, #2
 800ce60:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800ce62:	e143      	b.n	800d0ec <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800ce64:	7bbb      	ldrb	r3, [r7, #14]
 800ce66:	2b03      	cmp	r3, #3
 800ce68:	f040 8140 	bne.w	800d0ec <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce72:	3301      	adds	r3, #1
 800ce74:	b2da      	uxtb	r2, r3
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800ce82:	2b03      	cmp	r3, #3
 800ce84:	d903      	bls.n	800ce8e <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	220d      	movs	r2, #13
 800ce8a:	701a      	strb	r2, [r3, #0]
      break;
 800ce8c:	e12e      	b.n	800d0ec <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	795b      	ldrb	r3, [r3, #5]
 800ce92:	4619      	mov	r1, r3
 800ce94:	6878      	ldr	r0, [r7, #4]
 800ce96:	f001 f92e 	bl	800e0f6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ce9a:	687b      	ldr	r3, [r7, #4]
 800ce9c:	791b      	ldrb	r3, [r3, #4]
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f001 f928 	bl	800e0f6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2200      	movs	r2, #0
 800ceaa:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800ceac:	687b      	ldr	r3, [r7, #4]
 800ceae:	2200      	movs	r2, #0
 800ceb0:	701a      	strb	r2, [r3, #0]
      break;
 800ceb2:	e11b      	b.n	800d0ec <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800ceb4:	2101      	movs	r1, #1
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	f000 fa79 	bl	800d3ae <USBH_SetAddress>
 800cebc:	4603      	mov	r3, r0
 800cebe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cec0:	7bbb      	ldrb	r3, [r7, #14]
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d130      	bne.n	800cf28 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800cec6:	2002      	movs	r0, #2
 800cec8:	f002 fb18 	bl	800f4fc <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2201      	movs	r2, #1
 800ced0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2203      	movs	r2, #3
 800ced8:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	7919      	ldrb	r1, [r3, #4]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800ceea:	687a      	ldr	r2, [r7, #4]
 800ceec:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800ceee:	9202      	str	r2, [sp, #8]
 800cef0:	2200      	movs	r2, #0
 800cef2:	9201      	str	r2, [sp, #4]
 800cef4:	9300      	str	r3, [sp, #0]
 800cef6:	4603      	mov	r3, r0
 800cef8:	2280      	movs	r2, #128	@ 0x80
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f001 f8aa 	bl	800e054 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	7959      	ldrb	r1, [r3, #5]
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800cf10:	687a      	ldr	r2, [r7, #4]
 800cf12:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800cf14:	9202      	str	r2, [sp, #8]
 800cf16:	2200      	movs	r2, #0
 800cf18:	9201      	str	r2, [sp, #4]
 800cf1a:	9300      	str	r3, [sp, #0]
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2200      	movs	r2, #0
 800cf20:	6878      	ldr	r0, [r7, #4]
 800cf22:	f001 f897 	bl	800e054 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800cf26:	e0e3      	b.n	800d0f0 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf28:	7bbb      	ldrb	r3, [r7, #14]
 800cf2a:	2b03      	cmp	r3, #3
 800cf2c:	f040 80e0 	bne.w	800d0f0 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800cf30:	687b      	ldr	r3, [r7, #4]
 800cf32:	220d      	movs	r2, #13
 800cf34:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2200      	movs	r2, #0
 800cf3a:	705a      	strb	r2, [r3, #1]
      break;
 800cf3c:	e0d8      	b.n	800d0f0 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800cf3e:	2109      	movs	r1, #9
 800cf40:	6878      	ldr	r0, [r7, #4]
 800cf42:	f000 f9a1 	bl	800d288 <USBH_Get_CfgDesc>
 800cf46:	4603      	mov	r3, r0
 800cf48:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cf4a:	7bbb      	ldrb	r3, [r7, #14]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d103      	bne.n	800cf58 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	2204      	movs	r2, #4
 800cf54:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cf56:	e0cd      	b.n	800d0f4 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cf58:	7bbb      	ldrb	r3, [r7, #14]
 800cf5a:	2b03      	cmp	r3, #3
 800cf5c:	f040 80ca 	bne.w	800d0f4 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf66:	3301      	adds	r3, #1
 800cf68:	b2da      	uxtb	r2, r3
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cf76:	2b03      	cmp	r3, #3
 800cf78:	d903      	bls.n	800cf82 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800cf7a:	687b      	ldr	r3, [r7, #4]
 800cf7c:	220d      	movs	r2, #13
 800cf7e:	701a      	strb	r2, [r3, #0]
      break;
 800cf80:	e0b8      	b.n	800d0f4 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	795b      	ldrb	r3, [r3, #5]
 800cf86:	4619      	mov	r1, r3
 800cf88:	6878      	ldr	r0, [r7, #4]
 800cf8a:	f001 f8b4 	bl	800e0f6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	791b      	ldrb	r3, [r3, #4]
 800cf92:	4619      	mov	r1, r3
 800cf94:	6878      	ldr	r0, [r7, #4]
 800cf96:	f001 f8ae 	bl	800e0f6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	2200      	movs	r2, #0
 800cf9e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	2200      	movs	r2, #0
 800cfa4:	701a      	strb	r2, [r3, #0]
      break;
 800cfa6:	e0a5      	b.n	800d0f4 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800cfae:	4619      	mov	r1, r3
 800cfb0:	6878      	ldr	r0, [r7, #4]
 800cfb2:	f000 f969 	bl	800d288 <USBH_Get_CfgDesc>
 800cfb6:	4603      	mov	r3, r0
 800cfb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800cfba:	7bbb      	ldrb	r3, [r7, #14]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d103      	bne.n	800cfc8 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2205      	movs	r2, #5
 800cfc4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800cfc6:	e097      	b.n	800d0f8 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800cfc8:	7bbb      	ldrb	r3, [r7, #14]
 800cfca:	2b03      	cmp	r3, #3
 800cfcc:	f040 8094 	bne.w	800d0f8 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cfd6:	3301      	adds	r3, #1
 800cfd8:	b2da      	uxtb	r2, r3
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800cfe6:	2b03      	cmp	r3, #3
 800cfe8:	d903      	bls.n	800cff2 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	220d      	movs	r2, #13
 800cfee:	701a      	strb	r2, [r3, #0]
      break;
 800cff0:	e082      	b.n	800d0f8 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	795b      	ldrb	r3, [r3, #5]
 800cff6:	4619      	mov	r1, r3
 800cff8:	6878      	ldr	r0, [r7, #4]
 800cffa:	f001 f87c 	bl	800e0f6 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	791b      	ldrb	r3, [r3, #4]
 800d002:	4619      	mov	r1, r3
 800d004:	6878      	ldr	r0, [r7, #4]
 800d006:	f001 f876 	bl	800e0f6 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	2200      	movs	r2, #0
 800d014:	701a      	strb	r2, [r3, #0]
      break;
 800d016:	e06f      	b.n	800d0f8 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800d01e:	2b00      	cmp	r3, #0
 800d020:	d019      	beq.n	800d056 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800d02e:	23ff      	movs	r3, #255	@ 0xff
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f000 f953 	bl	800d2dc <USBH_Get_StringDesc>
 800d036:	4603      	mov	r3, r0
 800d038:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d03a:	7bbb      	ldrb	r3, [r7, #14]
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d103      	bne.n	800d048 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	2206      	movs	r2, #6
 800d044:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d046:	e059      	b.n	800d0fc <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d048:	7bbb      	ldrb	r3, [r7, #14]
 800d04a:	2b03      	cmp	r3, #3
 800d04c:	d156      	bne.n	800d0fc <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	2206      	movs	r2, #6
 800d052:	705a      	strb	r2, [r3, #1]
      break;
 800d054:	e052      	b.n	800d0fc <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2206      	movs	r2, #6
 800d05a:	705a      	strb	r2, [r3, #1]
      break;
 800d05c:	e04e      	b.n	800d0fc <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800d05e:	687b      	ldr	r3, [r7, #4]
 800d060:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800d064:	2b00      	cmp	r3, #0
 800d066:	d019      	beq.n	800d09c <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800d074:	23ff      	movs	r3, #255	@ 0xff
 800d076:	6878      	ldr	r0, [r7, #4]
 800d078:	f000 f930 	bl	800d2dc <USBH_Get_StringDesc>
 800d07c:	4603      	mov	r3, r0
 800d07e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d080:	7bbb      	ldrb	r3, [r7, #14]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d103      	bne.n	800d08e <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d086:	687b      	ldr	r3, [r7, #4]
 800d088:	2207      	movs	r2, #7
 800d08a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d08c:	e038      	b.n	800d100 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	2b03      	cmp	r3, #3
 800d092:	d135      	bne.n	800d100 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	2207      	movs	r2, #7
 800d098:	705a      	strb	r2, [r3, #1]
      break;
 800d09a:	e031      	b.n	800d100 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2207      	movs	r2, #7
 800d0a0:	705a      	strb	r2, [r3, #1]
      break;
 800d0a2:	e02d      	b.n	800d100 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d017      	beq.n	800d0de <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800d0ba:	23ff      	movs	r3, #255	@ 0xff
 800d0bc:	6878      	ldr	r0, [r7, #4]
 800d0be:	f000 f90d 	bl	800d2dc <USBH_Get_StringDesc>
 800d0c2:	4603      	mov	r3, r0
 800d0c4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800d0c6:	7bbb      	ldrb	r3, [r7, #14]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d102      	bne.n	800d0d2 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800d0d0:	e018      	b.n	800d104 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800d0d2:	7bbb      	ldrb	r3, [r7, #14]
 800d0d4:	2b03      	cmp	r3, #3
 800d0d6:	d115      	bne.n	800d104 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800d0d8:	2300      	movs	r3, #0
 800d0da:	73fb      	strb	r3, [r7, #15]
      break;
 800d0dc:	e012      	b.n	800d104 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800d0de:	2300      	movs	r3, #0
 800d0e0:	73fb      	strb	r3, [r7, #15]
      break;
 800d0e2:	e00f      	b.n	800d104 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800d0e4:	bf00      	nop
 800d0e6:	e00e      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d0e8:	bf00      	nop
 800d0ea:	e00c      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d0ec:	bf00      	nop
 800d0ee:	e00a      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d0f0:	bf00      	nop
 800d0f2:	e008      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d0f4:	bf00      	nop
 800d0f6:	e006      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d0f8:	bf00      	nop
 800d0fa:	e004      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d0fc:	bf00      	nop
 800d0fe:	e002      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d100:	bf00      	nop
 800d102:	e000      	b.n	800d106 <USBH_HandleEnum+0x3b6>
      break;
 800d104:	bf00      	nop
  }
  return Status;
 800d106:	7bfb      	ldrb	r3, [r7, #15]
}
 800d108:	4618      	mov	r0, r3
 800d10a:	3710      	adds	r7, #16
 800d10c:	46bd      	mov	sp, r7
 800d10e:	bd80      	pop	{r7, pc}

0800d110 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800d110:	b480      	push	{r7}
 800d112:	b083      	sub	sp, #12
 800d114:	af00      	add	r7, sp, #0
 800d116:	6078      	str	r0, [r7, #4]
 800d118:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	683a      	ldr	r2, [r7, #0]
 800d11e:	f8c3 2594 	str.w	r2, [r3, #1428]	@ 0x594
}
 800d122:	bf00      	nop
 800d124:	370c      	adds	r7, #12
 800d126:	46bd      	mov	sp, r7
 800d128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d12c:	4770      	bx	lr

0800d12e <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800d12e:	b580      	push	{r7, lr}
 800d130:	b082      	sub	sp, #8
 800d132:	af00      	add	r7, sp, #0
 800d134:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800d13c:	1c5a      	adds	r2, r3, #1
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	f8c3 2594 	str.w	r2, [r3, #1428]	@ 0x594
  USBH_HandleSof(phost);
 800d144:	6878      	ldr	r0, [r7, #4]
 800d146:	f000 f804 	bl	800d152 <USBH_HandleSof>
}
 800d14a:	bf00      	nop
 800d14c:	3708      	adds	r7, #8
 800d14e:	46bd      	mov	sp, r7
 800d150:	bd80      	pop	{r7, pc}

0800d152 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800d152:	b580      	push	{r7, lr}
 800d154:	b082      	sub	sp, #8
 800d156:	af00      	add	r7, sp, #0
 800d158:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	781b      	ldrb	r3, [r3, #0]
 800d15e:	b2db      	uxtb	r3, r3
 800d160:	2b0b      	cmp	r3, #11
 800d162:	d10a      	bne.n	800d17a <USBH_HandleSof+0x28>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d005      	beq.n	800d17a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800d174:	699b      	ldr	r3, [r3, #24]
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	4798      	blx	r3
  }
}
 800d17a:	bf00      	nop
 800d17c:	3708      	adds	r7, #8
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}

0800d182 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800d182:	b480      	push	{r7}
 800d184:	b083      	sub	sp, #12
 800d186:	af00      	add	r7, sp, #0
 800d188:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	2201      	movs	r2, #1
 800d18e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800d192:	bf00      	nop
}
 800d194:	370c      	adds	r7, #12
 800d196:	46bd      	mov	sp, r7
 800d198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d19c:	4770      	bx	lr

0800d19e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800d19e:	b480      	push	{r7}
 800d1a0:	b083      	sub	sp, #12
 800d1a2:	af00      	add	r7, sp, #0
 800d1a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2200      	movs	r2, #0
 800d1aa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800d1ae:	bf00      	nop
}
 800d1b0:	370c      	adds	r7, #12
 800d1b2:	46bd      	mov	sp, r7
 800d1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b8:	4770      	bx	lr

0800d1ba <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800d1ba:	b480      	push	{r7}
 800d1bc:	b083      	sub	sp, #12
 800d1be:	af00      	add	r7, sp, #0
 800d1c0:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800d1c2:	687b      	ldr	r3, [r7, #4]
 800d1c4:	2201      	movs	r2, #1
 800d1c6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	2200      	movs	r2, #0
 800d1ce:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d1da:	2300      	movs	r3, #0
}
 800d1dc:	4618      	mov	r0, r3
 800d1de:	370c      	adds	r7, #12
 800d1e0:	46bd      	mov	sp, r7
 800d1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e6:	4770      	bx	lr

0800d1e8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b082      	sub	sp, #8
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2201      	movs	r2, #1
 800d1f4:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	2200      	movs	r2, #0
 800d204:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f001 fff8 	bl	800f1fe <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	791b      	ldrb	r3, [r3, #4]
 800d212:	4619      	mov	r1, r3
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 ff6e 	bl	800e0f6 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	795b      	ldrb	r3, [r3, #5]
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f000 ff68 	bl	800e0f6 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800d226:	2300      	movs	r3, #0
}
 800d228:	4618      	mov	r0, r3
 800d22a:	3708      	adds	r7, #8
 800d22c:	46bd      	mov	sp, r7
 800d22e:	bd80      	pop	{r7, pc}

0800d230 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d230:	b580      	push	{r7, lr}
 800d232:	b086      	sub	sp, #24
 800d234:	af02      	add	r7, sp, #8
 800d236:	6078      	str	r0, [r7, #4]
 800d238:	460b      	mov	r3, r1
 800d23a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800d23c:	887b      	ldrh	r3, [r7, #2]
 800d23e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d242:	d901      	bls.n	800d248 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d244:	2303      	movs	r3, #3
 800d246:	e01b      	b.n	800d280 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d24e:	887b      	ldrh	r3, [r7, #2]
 800d250:	9300      	str	r3, [sp, #0]
 800d252:	4613      	mov	r3, r2
 800d254:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d258:	2100      	movs	r1, #0
 800d25a:	6878      	ldr	r0, [r7, #4]
 800d25c:	f000 f872 	bl	800d344 <USBH_GetDescriptor>
 800d260:	4603      	mov	r3, r0
 800d262:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800d264:	7bfb      	ldrb	r3, [r7, #15]
 800d266:	2b00      	cmp	r3, #0
 800d268:	d109      	bne.n	800d27e <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d270:	887a      	ldrh	r2, [r7, #2]
 800d272:	4619      	mov	r1, r3
 800d274:	6878      	ldr	r0, [r7, #4]
 800d276:	f000 f951 	bl	800d51c <USBH_ParseDevDesc>
 800d27a:	4603      	mov	r3, r0
 800d27c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d27e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d280:	4618      	mov	r0, r3
 800d282:	3710      	adds	r7, #16
 800d284:	46bd      	mov	sp, r7
 800d286:	bd80      	pop	{r7, pc}

0800d288 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800d288:	b580      	push	{r7, lr}
 800d28a:	b086      	sub	sp, #24
 800d28c:	af02      	add	r7, sp, #8
 800d28e:	6078      	str	r0, [r7, #4]
 800d290:	460b      	mov	r3, r1
 800d292:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	331c      	adds	r3, #28
 800d298:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800d29a:	887b      	ldrh	r3, [r7, #2]
 800d29c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2a0:	d901      	bls.n	800d2a6 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d2a2:	2303      	movs	r3, #3
 800d2a4:	e016      	b.n	800d2d4 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800d2a6:	887b      	ldrh	r3, [r7, #2]
 800d2a8:	9300      	str	r3, [sp, #0]
 800d2aa:	68bb      	ldr	r3, [r7, #8]
 800d2ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d2b0:	2100      	movs	r1, #0
 800d2b2:	6878      	ldr	r0, [r7, #4]
 800d2b4:	f000 f846 	bl	800d344 <USBH_GetDescriptor>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800d2bc:	7bfb      	ldrb	r3, [r7, #15]
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	d107      	bne.n	800d2d2 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800d2c2:	887b      	ldrh	r3, [r7, #2]
 800d2c4:	461a      	mov	r2, r3
 800d2c6:	68b9      	ldr	r1, [r7, #8]
 800d2c8:	6878      	ldr	r0, [r7, #4]
 800d2ca:	f000 f9d7 	bl	800d67c <USBH_ParseCfgDesc>
 800d2ce:	4603      	mov	r3, r0
 800d2d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d2d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d2d4:	4618      	mov	r0, r3
 800d2d6:	3710      	adds	r7, #16
 800d2d8:	46bd      	mov	sp, r7
 800d2da:	bd80      	pop	{r7, pc}

0800d2dc <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800d2dc:	b580      	push	{r7, lr}
 800d2de:	b088      	sub	sp, #32
 800d2e0:	af02      	add	r7, sp, #8
 800d2e2:	60f8      	str	r0, [r7, #12]
 800d2e4:	607a      	str	r2, [r7, #4]
 800d2e6:	461a      	mov	r2, r3
 800d2e8:	460b      	mov	r3, r1
 800d2ea:	72fb      	strb	r3, [r7, #11]
 800d2ec:	4613      	mov	r3, r2
 800d2ee:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800d2f0:	893b      	ldrh	r3, [r7, #8]
 800d2f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d2f6:	d802      	bhi.n	800d2fe <USBH_Get_StringDesc+0x22>
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d101      	bne.n	800d302 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800d2fe:	2303      	movs	r3, #3
 800d300:	e01c      	b.n	800d33c <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800d302:	7afb      	ldrb	r3, [r7, #11]
 800d304:	b29b      	uxth	r3, r3
 800d306:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800d30a:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800d30c:	68fb      	ldr	r3, [r7, #12]
 800d30e:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800d312:	893b      	ldrh	r3, [r7, #8]
 800d314:	9300      	str	r3, [sp, #0]
 800d316:	460b      	mov	r3, r1
 800d318:	2100      	movs	r1, #0
 800d31a:	68f8      	ldr	r0, [r7, #12]
 800d31c:	f000 f812 	bl	800d344 <USBH_GetDescriptor>
 800d320:	4603      	mov	r3, r0
 800d322:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800d324:	7dfb      	ldrb	r3, [r7, #23]
 800d326:	2b00      	cmp	r3, #0
 800d328:	d107      	bne.n	800d33a <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800d32a:	68fb      	ldr	r3, [r7, #12]
 800d32c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d330:	893a      	ldrh	r2, [r7, #8]
 800d332:	6879      	ldr	r1, [r7, #4]
 800d334:	4618      	mov	r0, r3
 800d336:	f000 fbb5 	bl	800daa4 <USBH_ParseStringDesc>
  }

  return status;
 800d33a:	7dfb      	ldrb	r3, [r7, #23]
}
 800d33c:	4618      	mov	r0, r3
 800d33e:	3718      	adds	r7, #24
 800d340:	46bd      	mov	sp, r7
 800d342:	bd80      	pop	{r7, pc}

0800d344 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800d344:	b580      	push	{r7, lr}
 800d346:	b084      	sub	sp, #16
 800d348:	af00      	add	r7, sp, #0
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	607b      	str	r3, [r7, #4]
 800d34e:	460b      	mov	r3, r1
 800d350:	72fb      	strb	r3, [r7, #11]
 800d352:	4613      	mov	r3, r2
 800d354:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	789b      	ldrb	r3, [r3, #2]
 800d35a:	2b01      	cmp	r3, #1
 800d35c:	d11c      	bne.n	800d398 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800d35e:	7afb      	ldrb	r3, [r7, #11]
 800d360:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800d364:	b2da      	uxtb	r2, r3
 800d366:	68fb      	ldr	r3, [r7, #12]
 800d368:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800d36a:	68fb      	ldr	r3, [r7, #12]
 800d36c:	2206      	movs	r2, #6
 800d36e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	893a      	ldrh	r2, [r7, #8]
 800d374:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800d376:	893b      	ldrh	r3, [r7, #8]
 800d378:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d37c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d380:	d104      	bne.n	800d38c <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	f240 4209 	movw	r2, #1033	@ 0x409
 800d388:	829a      	strh	r2, [r3, #20]
 800d38a:	e002      	b.n	800d392 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	2200      	movs	r2, #0
 800d390:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	8b3a      	ldrh	r2, [r7, #24]
 800d396:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800d398:	8b3b      	ldrh	r3, [r7, #24]
 800d39a:	461a      	mov	r2, r3
 800d39c:	6879      	ldr	r1, [r7, #4]
 800d39e:	68f8      	ldr	r0, [r7, #12]
 800d3a0:	f000 fbcd 	bl	800db3e <USBH_CtlReq>
 800d3a4:	4603      	mov	r3, r0
}
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	3710      	adds	r7, #16
 800d3aa:	46bd      	mov	sp, r7
 800d3ac:	bd80      	pop	{r7, pc}

0800d3ae <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800d3ae:	b580      	push	{r7, lr}
 800d3b0:	b082      	sub	sp, #8
 800d3b2:	af00      	add	r7, sp, #0
 800d3b4:	6078      	str	r0, [r7, #4]
 800d3b6:	460b      	mov	r3, r1
 800d3b8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	789b      	ldrb	r3, [r3, #2]
 800d3be:	2b01      	cmp	r3, #1
 800d3c0:	d10f      	bne.n	800d3e2 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800d3c2:	687b      	ldr	r3, [r7, #4]
 800d3c4:	2200      	movs	r2, #0
 800d3c6:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	2205      	movs	r2, #5
 800d3cc:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800d3ce:	78fb      	ldrb	r3, [r7, #3]
 800d3d0:	b29a      	uxth	r2, r3
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	2200      	movs	r2, #0
 800d3da:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	2200      	movs	r2, #0
 800d3e0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d3e2:	2200      	movs	r2, #0
 800d3e4:	2100      	movs	r1, #0
 800d3e6:	6878      	ldr	r0, [r7, #4]
 800d3e8:	f000 fba9 	bl	800db3e <USBH_CtlReq>
 800d3ec:	4603      	mov	r3, r0
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3708      	adds	r7, #8
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}

0800d3f6 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800d3f6:	b580      	push	{r7, lr}
 800d3f8:	b082      	sub	sp, #8
 800d3fa:	af00      	add	r7, sp, #0
 800d3fc:	6078      	str	r0, [r7, #4]
 800d3fe:	460b      	mov	r3, r1
 800d400:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	789b      	ldrb	r3, [r3, #2]
 800d406:	2b01      	cmp	r3, #1
 800d408:	d10e      	bne.n	800d428 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	2200      	movs	r2, #0
 800d40e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	2209      	movs	r2, #9
 800d414:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	887a      	ldrh	r2, [r7, #2]
 800d41a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d41c:	687b      	ldr	r3, [r7, #4]
 800d41e:	2200      	movs	r2, #0
 800d420:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2200      	movs	r2, #0
 800d426:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d428:	2200      	movs	r2, #0
 800d42a:	2100      	movs	r1, #0
 800d42c:	6878      	ldr	r0, [r7, #4]
 800d42e:	f000 fb86 	bl	800db3e <USBH_CtlReq>
 800d432:	4603      	mov	r3, r0
}
 800d434:	4618      	mov	r0, r3
 800d436:	3708      	adds	r7, #8
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b082      	sub	sp, #8
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	460b      	mov	r3, r1
 800d446:	70fb      	strb	r3, [r7, #3]
 800d448:	4613      	mov	r3, r2
 800d44a:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	789b      	ldrb	r3, [r3, #2]
 800d450:	2b01      	cmp	r3, #1
 800d452:	d110      	bne.n	800d476 <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2201      	movs	r2, #1
 800d458:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	220b      	movs	r2, #11
 800d45e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800d460:	78bb      	ldrb	r3, [r7, #2]
 800d462:	b29a      	uxth	r2, r3
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d468:	78fb      	ldrb	r3, [r7, #3]
 800d46a:	b29a      	uxth	r2, r3
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2200      	movs	r2, #0
 800d474:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	6878      	ldr	r0, [r7, #4]
 800d47c:	f000 fb5f 	bl	800db3e <USBH_CtlReq>
 800d480:	4603      	mov	r3, r0
}
 800d482:	4618      	mov	r0, r3
 800d484:	3708      	adds	r7, #8
 800d486:	46bd      	mov	sp, r7
 800d488:	bd80      	pop	{r7, pc}

0800d48a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800d48a:	b580      	push	{r7, lr}
 800d48c:	b082      	sub	sp, #8
 800d48e:	af00      	add	r7, sp, #0
 800d490:	6078      	str	r0, [r7, #4]
 800d492:	460b      	mov	r3, r1
 800d494:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	789b      	ldrb	r3, [r3, #2]
 800d49a:	2b01      	cmp	r3, #1
 800d49c:	d10f      	bne.n	800d4be <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	2200      	movs	r2, #0
 800d4a2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	2203      	movs	r2, #3
 800d4a8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800d4aa:	78fb      	ldrb	r3, [r7, #3]
 800d4ac:	b29a      	uxth	r2, r3
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d4b8:	687b      	ldr	r3, [r7, #4]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d4be:	2200      	movs	r2, #0
 800d4c0:	2100      	movs	r1, #0
 800d4c2:	6878      	ldr	r0, [r7, #4]
 800d4c4:	f000 fb3b 	bl	800db3e <USBH_CtlReq>
 800d4c8:	4603      	mov	r3, r0
}
 800d4ca:	4618      	mov	r0, r3
 800d4cc:	3708      	adds	r7, #8
 800d4ce:	46bd      	mov	sp, r7
 800d4d0:	bd80      	pop	{r7, pc}

0800d4d2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800d4d2:	b580      	push	{r7, lr}
 800d4d4:	b082      	sub	sp, #8
 800d4d6:	af00      	add	r7, sp, #0
 800d4d8:	6078      	str	r0, [r7, #4]
 800d4da:	460b      	mov	r3, r1
 800d4dc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800d4de:	687b      	ldr	r3, [r7, #4]
 800d4e0:	789b      	ldrb	r3, [r3, #2]
 800d4e2:	2b01      	cmp	r3, #1
 800d4e4:	d10f      	bne.n	800d506 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	2202      	movs	r2, #2
 800d4ea:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	2201      	movs	r2, #1
 800d4f0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2200      	movs	r2, #0
 800d4f6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800d4f8:	78fb      	ldrb	r3, [r7, #3]
 800d4fa:	b29a      	uxth	r2, r3
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	2200      	movs	r2, #0
 800d504:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800d506:	2200      	movs	r2, #0
 800d508:	2100      	movs	r1, #0
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	f000 fb17 	bl	800db3e <USBH_CtlReq>
 800d510:	4603      	mov	r3, r0
}
 800d512:	4618      	mov	r0, r3
 800d514:	3708      	adds	r7, #8
 800d516:	46bd      	mov	sp, r7
 800d518:	bd80      	pop	{r7, pc}
	...

0800d51c <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d51c:	b480      	push	{r7}
 800d51e:	b087      	sub	sp, #28
 800d520:	af00      	add	r7, sp, #0
 800d522:	60f8      	str	r0, [r7, #12]
 800d524:	60b9      	str	r1, [r7, #8]
 800d526:	4613      	mov	r3, r2
 800d528:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d530:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800d532:	2300      	movs	r3, #0
 800d534:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800d536:	68bb      	ldr	r3, [r7, #8]
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d101      	bne.n	800d540 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800d53c:	2302      	movs	r3, #2
 800d53e:	e094      	b.n	800d66a <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800d540:	68bb      	ldr	r3, [r7, #8]
 800d542:	781a      	ldrb	r2, [r3, #0]
 800d544:	693b      	ldr	r3, [r7, #16]
 800d546:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800d548:	68bb      	ldr	r3, [r7, #8]
 800d54a:	785a      	ldrb	r2, [r3, #1]
 800d54c:	693b      	ldr	r3, [r7, #16]
 800d54e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800d550:	68bb      	ldr	r3, [r7, #8]
 800d552:	3302      	adds	r3, #2
 800d554:	781b      	ldrb	r3, [r3, #0]
 800d556:	461a      	mov	r2, r3
 800d558:	68bb      	ldr	r3, [r7, #8]
 800d55a:	3303      	adds	r3, #3
 800d55c:	781b      	ldrb	r3, [r3, #0]
 800d55e:	021b      	lsls	r3, r3, #8
 800d560:	b29b      	uxth	r3, r3
 800d562:	4313      	orrs	r3, r2
 800d564:	b29a      	uxth	r2, r3
 800d566:	693b      	ldr	r3, [r7, #16]
 800d568:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800d56a:	68bb      	ldr	r3, [r7, #8]
 800d56c:	791a      	ldrb	r2, [r3, #4]
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800d572:	68bb      	ldr	r3, [r7, #8]
 800d574:	795a      	ldrb	r2, [r3, #5]
 800d576:	693b      	ldr	r3, [r7, #16]
 800d578:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	799a      	ldrb	r2, [r3, #6]
 800d57e:	693b      	ldr	r3, [r7, #16]
 800d580:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	79da      	ldrb	r2, [r3, #7]
 800d586:	693b      	ldr	r3, [r7, #16]
 800d588:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d590:	2b00      	cmp	r3, #0
 800d592:	d004      	beq.n	800d59e <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800d59a:	2b01      	cmp	r3, #1
 800d59c:	d11b      	bne.n	800d5d6 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800d59e:	693b      	ldr	r3, [r7, #16]
 800d5a0:	79db      	ldrb	r3, [r3, #7]
 800d5a2:	2b20      	cmp	r3, #32
 800d5a4:	dc0f      	bgt.n	800d5c6 <USBH_ParseDevDesc+0xaa>
 800d5a6:	2b08      	cmp	r3, #8
 800d5a8:	db0f      	blt.n	800d5ca <USBH_ParseDevDesc+0xae>
 800d5aa:	3b08      	subs	r3, #8
 800d5ac:	4a32      	ldr	r2, [pc, #200]	@ (800d678 <USBH_ParseDevDesc+0x15c>)
 800d5ae:	fa22 f303 	lsr.w	r3, r2, r3
 800d5b2:	f003 0301 	and.w	r3, r3, #1
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	bf14      	ite	ne
 800d5ba:	2301      	movne	r3, #1
 800d5bc:	2300      	moveq	r3, #0
 800d5be:	b2db      	uxtb	r3, r3
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	d106      	bne.n	800d5d2 <USBH_ParseDevDesc+0xb6>
 800d5c4:	e001      	b.n	800d5ca <USBH_ParseDevDesc+0xae>
 800d5c6:	2b40      	cmp	r3, #64	@ 0x40
 800d5c8:	d003      	beq.n	800d5d2 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800d5ca:	693b      	ldr	r3, [r7, #16]
 800d5cc:	2208      	movs	r2, #8
 800d5ce:	71da      	strb	r2, [r3, #7]
        break;
 800d5d0:	e000      	b.n	800d5d4 <USBH_ParseDevDesc+0xb8>
        break;
 800d5d2:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800d5d4:	e00e      	b.n	800d5f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d5dc:	2b02      	cmp	r3, #2
 800d5de:	d107      	bne.n	800d5f0 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800d5e0:	693b      	ldr	r3, [r7, #16]
 800d5e2:	79db      	ldrb	r3, [r3, #7]
 800d5e4:	2b08      	cmp	r3, #8
 800d5e6:	d005      	beq.n	800d5f4 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	2208      	movs	r2, #8
 800d5ec:	71da      	strb	r2, [r3, #7]
 800d5ee:	e001      	b.n	800d5f4 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800d5f0:	2303      	movs	r3, #3
 800d5f2:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800d5f4:	88fb      	ldrh	r3, [r7, #6]
 800d5f6:	2b08      	cmp	r3, #8
 800d5f8:	d936      	bls.n	800d668 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800d5fa:	68bb      	ldr	r3, [r7, #8]
 800d5fc:	3308      	adds	r3, #8
 800d5fe:	781b      	ldrb	r3, [r3, #0]
 800d600:	461a      	mov	r2, r3
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	3309      	adds	r3, #9
 800d606:	781b      	ldrb	r3, [r3, #0]
 800d608:	021b      	lsls	r3, r3, #8
 800d60a:	b29b      	uxth	r3, r3
 800d60c:	4313      	orrs	r3, r2
 800d60e:	b29a      	uxth	r2, r3
 800d610:	693b      	ldr	r3, [r7, #16]
 800d612:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800d614:	68bb      	ldr	r3, [r7, #8]
 800d616:	330a      	adds	r3, #10
 800d618:	781b      	ldrb	r3, [r3, #0]
 800d61a:	461a      	mov	r2, r3
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	330b      	adds	r3, #11
 800d620:	781b      	ldrb	r3, [r3, #0]
 800d622:	021b      	lsls	r3, r3, #8
 800d624:	b29b      	uxth	r3, r3
 800d626:	4313      	orrs	r3, r2
 800d628:	b29a      	uxth	r2, r3
 800d62a:	693b      	ldr	r3, [r7, #16]
 800d62c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	330c      	adds	r3, #12
 800d632:	781b      	ldrb	r3, [r3, #0]
 800d634:	461a      	mov	r2, r3
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	330d      	adds	r3, #13
 800d63a:	781b      	ldrb	r3, [r3, #0]
 800d63c:	021b      	lsls	r3, r3, #8
 800d63e:	b29b      	uxth	r3, r3
 800d640:	4313      	orrs	r3, r2
 800d642:	b29a      	uxth	r2, r3
 800d644:	693b      	ldr	r3, [r7, #16]
 800d646:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	7b9a      	ldrb	r2, [r3, #14]
 800d64c:	693b      	ldr	r3, [r7, #16]
 800d64e:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800d650:	68bb      	ldr	r3, [r7, #8]
 800d652:	7bda      	ldrb	r2, [r3, #15]
 800d654:	693b      	ldr	r3, [r7, #16]
 800d656:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800d658:	68bb      	ldr	r3, [r7, #8]
 800d65a:	7c1a      	ldrb	r2, [r3, #16]
 800d65c:	693b      	ldr	r3, [r7, #16]
 800d65e:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	7c5a      	ldrb	r2, [r3, #17]
 800d664:	693b      	ldr	r3, [r7, #16]
 800d666:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800d668:	7dfb      	ldrb	r3, [r7, #23]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	371c      	adds	r7, #28
 800d66e:	46bd      	mov	sp, r7
 800d670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d674:	4770      	bx	lr
 800d676:	bf00      	nop
 800d678:	01000101 	.word	0x01000101

0800d67c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800d67c:	b580      	push	{r7, lr}
 800d67e:	b08c      	sub	sp, #48	@ 0x30
 800d680:	af00      	add	r7, sp, #0
 800d682:	60f8      	str	r0, [r7, #12]
 800d684:	60b9      	str	r1, [r7, #8]
 800d686:	4613      	mov	r3, r2
 800d688:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d690:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800d692:	2300      	movs	r3, #0
 800d694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800d698:	2300      	movs	r3, #0
 800d69a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800d69e:	2300      	movs	r3, #0
 800d6a0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800d6a4:	68bb      	ldr	r3, [r7, #8]
 800d6a6:	2b00      	cmp	r3, #0
 800d6a8:	d101      	bne.n	800d6ae <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800d6aa:	2302      	movs	r3, #2
 800d6ac:	e0da      	b.n	800d864 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800d6ae:	68bb      	ldr	r3, [r7, #8]
 800d6b0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800d6b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6b4:	781b      	ldrb	r3, [r3, #0]
 800d6b6:	2b09      	cmp	r3, #9
 800d6b8:	d002      	beq.n	800d6c0 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800d6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d6bc:	2209      	movs	r2, #9
 800d6be:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800d6c0:	68bb      	ldr	r3, [r7, #8]
 800d6c2:	781a      	ldrb	r2, [r3, #0]
 800d6c4:	6a3b      	ldr	r3, [r7, #32]
 800d6c6:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	785a      	ldrb	r2, [r3, #1]
 800d6cc:	6a3b      	ldr	r3, [r7, #32]
 800d6ce:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	3302      	adds	r3, #2
 800d6d4:	781b      	ldrb	r3, [r3, #0]
 800d6d6:	461a      	mov	r2, r3
 800d6d8:	68bb      	ldr	r3, [r7, #8]
 800d6da:	3303      	adds	r3, #3
 800d6dc:	781b      	ldrb	r3, [r3, #0]
 800d6de:	021b      	lsls	r3, r3, #8
 800d6e0:	b29b      	uxth	r3, r3
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	b29b      	uxth	r3, r3
 800d6e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d6ea:	bf28      	it	cs
 800d6ec:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800d6f0:	b29a      	uxth	r2, r3
 800d6f2:	6a3b      	ldr	r3, [r7, #32]
 800d6f4:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800d6f6:	68bb      	ldr	r3, [r7, #8]
 800d6f8:	791a      	ldrb	r2, [r3, #4]
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800d6fe:	68bb      	ldr	r3, [r7, #8]
 800d700:	795a      	ldrb	r2, [r3, #5]
 800d702:	6a3b      	ldr	r3, [r7, #32]
 800d704:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800d706:	68bb      	ldr	r3, [r7, #8]
 800d708:	799a      	ldrb	r2, [r3, #6]
 800d70a:	6a3b      	ldr	r3, [r7, #32]
 800d70c:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800d70e:	68bb      	ldr	r3, [r7, #8]
 800d710:	79da      	ldrb	r2, [r3, #7]
 800d712:	6a3b      	ldr	r3, [r7, #32]
 800d714:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800d716:	68bb      	ldr	r3, [r7, #8]
 800d718:	7a1a      	ldrb	r2, [r3, #8]
 800d71a:	6a3b      	ldr	r3, [r7, #32]
 800d71c:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800d71e:	88fb      	ldrh	r3, [r7, #6]
 800d720:	2b09      	cmp	r3, #9
 800d722:	f240 809d 	bls.w	800d860 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800d726:	2309      	movs	r3, #9
 800d728:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d72a:	2300      	movs	r3, #0
 800d72c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d72e:	e081      	b.n	800d834 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d730:	f107 0316 	add.w	r3, r7, #22
 800d734:	4619      	mov	r1, r3
 800d736:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d738:	f000 f9e7 	bl	800db0a <USBH_GetNextDesc>
 800d73c:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800d73e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d740:	785b      	ldrb	r3, [r3, #1]
 800d742:	2b04      	cmp	r3, #4
 800d744:	d176      	bne.n	800d834 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800d746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d748:	781b      	ldrb	r3, [r3, #0]
 800d74a:	2b09      	cmp	r3, #9
 800d74c:	d002      	beq.n	800d754 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800d74e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d750:	2209      	movs	r2, #9
 800d752:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800d754:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d758:	2232      	movs	r2, #50	@ 0x32
 800d75a:	fb02 f303 	mul.w	r3, r2, r3
 800d75e:	3308      	adds	r3, #8
 800d760:	6a3a      	ldr	r2, [r7, #32]
 800d762:	4413      	add	r3, r2
 800d764:	3302      	adds	r3, #2
 800d766:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800d768:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d76a:	69f8      	ldr	r0, [r7, #28]
 800d76c:	f000 f87e 	bl	800d86c <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800d770:	2300      	movs	r3, #0
 800d772:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800d776:	2300      	movs	r3, #0
 800d778:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d77a:	e043      	b.n	800d804 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800d77c:	f107 0316 	add.w	r3, r7, #22
 800d780:	4619      	mov	r1, r3
 800d782:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d784:	f000 f9c1 	bl	800db0a <USBH_GetNextDesc>
 800d788:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800d78a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d78c:	785b      	ldrb	r3, [r3, #1]
 800d78e:	2b05      	cmp	r3, #5
 800d790:	d138      	bne.n	800d804 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800d792:	69fb      	ldr	r3, [r7, #28]
 800d794:	795b      	ldrb	r3, [r3, #5]
 800d796:	2b01      	cmp	r3, #1
 800d798:	d113      	bne.n	800d7c2 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d79a:	69fb      	ldr	r3, [r7, #28]
 800d79c:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800d79e:	2b02      	cmp	r3, #2
 800d7a0:	d003      	beq.n	800d7aa <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800d7a2:	69fb      	ldr	r3, [r7, #28]
 800d7a4:	799b      	ldrb	r3, [r3, #6]
 800d7a6:	2b03      	cmp	r3, #3
 800d7a8:	d10b      	bne.n	800d7c2 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7aa:	69fb      	ldr	r3, [r7, #28]
 800d7ac:	79db      	ldrb	r3, [r3, #7]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d10b      	bne.n	800d7ca <USBH_ParseCfgDesc+0x14e>
 800d7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7b4:	781b      	ldrb	r3, [r3, #0]
 800d7b6:	2b09      	cmp	r3, #9
 800d7b8:	d007      	beq.n	800d7ca <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800d7ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7bc:	2209      	movs	r2, #9
 800d7be:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7c0:	e003      	b.n	800d7ca <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800d7c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7c4:	2207      	movs	r2, #7
 800d7c6:	701a      	strb	r2, [r3, #0]
 800d7c8:	e000      	b.n	800d7cc <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800d7ca:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800d7cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d7d0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d7d4:	3201      	adds	r2, #1
 800d7d6:	00d2      	lsls	r2, r2, #3
 800d7d8:	2132      	movs	r1, #50	@ 0x32
 800d7da:	fb01 f303 	mul.w	r3, r1, r3
 800d7de:	4413      	add	r3, r2
 800d7e0:	3308      	adds	r3, #8
 800d7e2:	6a3a      	ldr	r2, [r7, #32]
 800d7e4:	4413      	add	r3, r2
 800d7e6:	3304      	adds	r3, #4
 800d7e8:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800d7ea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800d7ec:	69b9      	ldr	r1, [r7, #24]
 800d7ee:	68f8      	ldr	r0, [r7, #12]
 800d7f0:	f000 f870 	bl	800d8d4 <USBH_ParseEPDesc>
 800d7f4:	4603      	mov	r3, r0
 800d7f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800d7fa:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800d7fe:	3301      	adds	r3, #1
 800d800:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800d804:	69fb      	ldr	r3, [r7, #28]
 800d806:	791b      	ldrb	r3, [r3, #4]
 800d808:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d80c:	429a      	cmp	r2, r3
 800d80e:	d204      	bcs.n	800d81a <USBH_ParseCfgDesc+0x19e>
 800d810:	6a3b      	ldr	r3, [r7, #32]
 800d812:	885a      	ldrh	r2, [r3, #2]
 800d814:	8afb      	ldrh	r3, [r7, #22]
 800d816:	429a      	cmp	r2, r3
 800d818:	d8b0      	bhi.n	800d77c <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800d81a:	69fb      	ldr	r3, [r7, #28]
 800d81c:	791b      	ldrb	r3, [r3, #4]
 800d81e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800d822:	429a      	cmp	r2, r3
 800d824:	d201      	bcs.n	800d82a <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800d826:	2303      	movs	r3, #3
 800d828:	e01c      	b.n	800d864 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800d82a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d82e:	3301      	adds	r3, #1
 800d830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800d834:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800d838:	2b09      	cmp	r3, #9
 800d83a:	d805      	bhi.n	800d848 <USBH_ParseCfgDesc+0x1cc>
 800d83c:	6a3b      	ldr	r3, [r7, #32]
 800d83e:	885a      	ldrh	r2, [r3, #2]
 800d840:	8afb      	ldrh	r3, [r7, #22]
 800d842:	429a      	cmp	r2, r3
 800d844:	f63f af74 	bhi.w	800d730 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800d848:	6a3b      	ldr	r3, [r7, #32]
 800d84a:	791b      	ldrb	r3, [r3, #4]
 800d84c:	2b0a      	cmp	r3, #10
 800d84e:	bf28      	it	cs
 800d850:	230a      	movcs	r3, #10
 800d852:	b2db      	uxtb	r3, r3
 800d854:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800d858:	429a      	cmp	r2, r3
 800d85a:	d201      	bcs.n	800d860 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800d85c:	2303      	movs	r3, #3
 800d85e:	e001      	b.n	800d864 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800d860:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800d864:	4618      	mov	r0, r3
 800d866:	3730      	adds	r7, #48	@ 0x30
 800d868:	46bd      	mov	sp, r7
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800d86c:	b480      	push	{r7}
 800d86e:	b083      	sub	sp, #12
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
 800d874:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	781a      	ldrb	r2, [r3, #0]
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800d87e:	683b      	ldr	r3, [r7, #0]
 800d880:	785a      	ldrb	r2, [r3, #1]
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800d886:	683b      	ldr	r3, [r7, #0]
 800d888:	789a      	ldrb	r2, [r3, #2]
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800d88e:	683b      	ldr	r3, [r7, #0]
 800d890:	78da      	ldrb	r2, [r3, #3]
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800d896:	683b      	ldr	r3, [r7, #0]
 800d898:	3304      	adds	r3, #4
 800d89a:	781b      	ldrb	r3, [r3, #0]
 800d89c:	2b05      	cmp	r3, #5
 800d89e:	bf28      	it	cs
 800d8a0:	2305      	movcs	r3, #5
 800d8a2:	b2da      	uxtb	r2, r3
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800d8a8:	683b      	ldr	r3, [r7, #0]
 800d8aa:	795a      	ldrb	r2, [r3, #5]
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800d8b0:	683b      	ldr	r3, [r7, #0]
 800d8b2:	799a      	ldrb	r2, [r3, #6]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	79da      	ldrb	r2, [r3, #7]
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	7a1a      	ldrb	r2, [r3, #8]
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	721a      	strb	r2, [r3, #8]
}
 800d8c8:	bf00      	nop
 800d8ca:	370c      	adds	r7, #12
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8d2:	4770      	bx	lr

0800d8d4 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800d8d4:	b480      	push	{r7}
 800d8d6:	b087      	sub	sp, #28
 800d8d8:	af00      	add	r7, sp, #0
 800d8da:	60f8      	str	r0, [r7, #12]
 800d8dc:	60b9      	str	r1, [r7, #8]
 800d8de:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800d8e0:	2300      	movs	r3, #0
 800d8e2:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	781a      	ldrb	r2, [r3, #0]
 800d8e8:	68bb      	ldr	r3, [r7, #8]
 800d8ea:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	785a      	ldrb	r2, [r3, #1]
 800d8f0:	68bb      	ldr	r3, [r7, #8]
 800d8f2:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	789a      	ldrb	r2, [r3, #2]
 800d8f8:	68bb      	ldr	r3, [r7, #8]
 800d8fa:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	78da      	ldrb	r2, [r3, #3]
 800d900:	68bb      	ldr	r3, [r7, #8]
 800d902:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	3304      	adds	r3, #4
 800d908:	781b      	ldrb	r3, [r3, #0]
 800d90a:	461a      	mov	r2, r3
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	3305      	adds	r3, #5
 800d910:	781b      	ldrb	r3, [r3, #0]
 800d912:	021b      	lsls	r3, r3, #8
 800d914:	b29b      	uxth	r3, r3
 800d916:	4313      	orrs	r3, r2
 800d918:	b29a      	uxth	r2, r3
 800d91a:	68bb      	ldr	r3, [r7, #8]
 800d91c:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	799a      	ldrb	r2, [r3, #6]
 800d922:	68bb      	ldr	r3, [r7, #8]
 800d924:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d926:	68bb      	ldr	r3, [r7, #8]
 800d928:	889b      	ldrh	r3, [r3, #4]
 800d92a:	2b00      	cmp	r3, #0
 800d92c:	d009      	beq.n	800d942 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d92e:	68bb      	ldr	r3, [r7, #8]
 800d930:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800d932:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d936:	d804      	bhi.n	800d942 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800d938:	68bb      	ldr	r3, [r7, #8]
 800d93a:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800d93c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d940:	d901      	bls.n	800d946 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800d942:	2303      	movs	r3, #3
 800d944:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800d946:	68fb      	ldr	r3, [r7, #12]
 800d948:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d136      	bne.n	800d9be <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800d950:	68bb      	ldr	r3, [r7, #8]
 800d952:	78db      	ldrb	r3, [r3, #3]
 800d954:	f003 0303 	and.w	r3, r3, #3
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d108      	bne.n	800d96e <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800d95c:	68bb      	ldr	r3, [r7, #8]
 800d95e:	889b      	ldrh	r3, [r3, #4]
 800d960:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d964:	f240 8097 	bls.w	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d968:	2303      	movs	r3, #3
 800d96a:	75fb      	strb	r3, [r7, #23]
 800d96c:	e093      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800d96e:	68bb      	ldr	r3, [r7, #8]
 800d970:	78db      	ldrb	r3, [r3, #3]
 800d972:	f003 0303 	and.w	r3, r3, #3
 800d976:	2b00      	cmp	r3, #0
 800d978:	d107      	bne.n	800d98a <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d97a:	68bb      	ldr	r3, [r7, #8]
 800d97c:	889b      	ldrh	r3, [r3, #4]
 800d97e:	2b40      	cmp	r3, #64	@ 0x40
 800d980:	f240 8089 	bls.w	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d984:	2303      	movs	r3, #3
 800d986:	75fb      	strb	r3, [r7, #23]
 800d988:	e085      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d98a:	68bb      	ldr	r3, [r7, #8]
 800d98c:	78db      	ldrb	r3, [r3, #3]
 800d98e:	f003 0303 	and.w	r3, r3, #3
 800d992:	2b01      	cmp	r3, #1
 800d994:	d005      	beq.n	800d9a2 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800d996:	68bb      	ldr	r3, [r7, #8]
 800d998:	78db      	ldrb	r3, [r3, #3]
 800d99a:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800d99e:	2b03      	cmp	r3, #3
 800d9a0:	d10a      	bne.n	800d9b8 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d9a2:	68bb      	ldr	r3, [r7, #8]
 800d9a4:	799b      	ldrb	r3, [r3, #6]
 800d9a6:	2b00      	cmp	r3, #0
 800d9a8:	d003      	beq.n	800d9b2 <USBH_ParseEPDesc+0xde>
 800d9aa:	68bb      	ldr	r3, [r7, #8]
 800d9ac:	799b      	ldrb	r3, [r3, #6]
 800d9ae:	2b10      	cmp	r3, #16
 800d9b0:	d970      	bls.n	800da94 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800d9b2:	2303      	movs	r3, #3
 800d9b4:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800d9b6:	e06d      	b.n	800da94 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800d9b8:	2303      	movs	r3, #3
 800d9ba:	75fb      	strb	r3, [r7, #23]
 800d9bc:	e06b      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800d9c4:	2b01      	cmp	r3, #1
 800d9c6:	d13c      	bne.n	800da42 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d9c8:	68bb      	ldr	r3, [r7, #8]
 800d9ca:	78db      	ldrb	r3, [r3, #3]
 800d9cc:	f003 0303 	and.w	r3, r3, #3
 800d9d0:	2b02      	cmp	r3, #2
 800d9d2:	d005      	beq.n	800d9e0 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800d9d4:	68bb      	ldr	r3, [r7, #8]
 800d9d6:	78db      	ldrb	r3, [r3, #3]
 800d9d8:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800d9dc:	2b00      	cmp	r3, #0
 800d9de:	d106      	bne.n	800d9ee <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d9e0:	68bb      	ldr	r3, [r7, #8]
 800d9e2:	889b      	ldrh	r3, [r3, #4]
 800d9e4:	2b40      	cmp	r3, #64	@ 0x40
 800d9e6:	d956      	bls.n	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800d9e8:	2303      	movs	r3, #3
 800d9ea:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800d9ec:	e053      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800d9ee:	68bb      	ldr	r3, [r7, #8]
 800d9f0:	78db      	ldrb	r3, [r3, #3]
 800d9f2:	f003 0303 	and.w	r3, r3, #3
 800d9f6:	2b01      	cmp	r3, #1
 800d9f8:	d10e      	bne.n	800da18 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800d9fa:	68bb      	ldr	r3, [r7, #8]
 800d9fc:	799b      	ldrb	r3, [r3, #6]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d007      	beq.n	800da12 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800da02:	68bb      	ldr	r3, [r7, #8]
 800da04:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800da06:	2b10      	cmp	r3, #16
 800da08:	d803      	bhi.n	800da12 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800da0e:	2b40      	cmp	r3, #64	@ 0x40
 800da10:	d941      	bls.n	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800da12:	2303      	movs	r3, #3
 800da14:	75fb      	strb	r3, [r7, #23]
 800da16:	e03e      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800da18:	68bb      	ldr	r3, [r7, #8]
 800da1a:	78db      	ldrb	r3, [r3, #3]
 800da1c:	f003 0303 	and.w	r3, r3, #3
 800da20:	2b03      	cmp	r3, #3
 800da22:	d10b      	bne.n	800da3c <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800da24:	68bb      	ldr	r3, [r7, #8]
 800da26:	799b      	ldrb	r3, [r3, #6]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d004      	beq.n	800da36 <USBH_ParseEPDesc+0x162>
 800da2c:	68bb      	ldr	r3, [r7, #8]
 800da2e:	889b      	ldrh	r3, [r3, #4]
 800da30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800da34:	d32f      	bcc.n	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800da36:	2303      	movs	r3, #3
 800da38:	75fb      	strb	r3, [r7, #23]
 800da3a:	e02c      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800da3c:	2303      	movs	r3, #3
 800da3e:	75fb      	strb	r3, [r7, #23]
 800da40:	e029      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800da42:	68fb      	ldr	r3, [r7, #12]
 800da44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800da48:	2b02      	cmp	r3, #2
 800da4a:	d120      	bne.n	800da8e <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800da4c:	68bb      	ldr	r3, [r7, #8]
 800da4e:	78db      	ldrb	r3, [r3, #3]
 800da50:	f003 0303 	and.w	r3, r3, #3
 800da54:	2b00      	cmp	r3, #0
 800da56:	d106      	bne.n	800da66 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	889b      	ldrh	r3, [r3, #4]
 800da5c:	2b08      	cmp	r3, #8
 800da5e:	d01a      	beq.n	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800da60:	2303      	movs	r3, #3
 800da62:	75fb      	strb	r3, [r7, #23]
 800da64:	e017      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800da66:	68bb      	ldr	r3, [r7, #8]
 800da68:	78db      	ldrb	r3, [r3, #3]
 800da6a:	f003 0303 	and.w	r3, r3, #3
 800da6e:	2b03      	cmp	r3, #3
 800da70:	d10a      	bne.n	800da88 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800da72:	68bb      	ldr	r3, [r7, #8]
 800da74:	799b      	ldrb	r3, [r3, #6]
 800da76:	2b00      	cmp	r3, #0
 800da78:	d003      	beq.n	800da82 <USBH_ParseEPDesc+0x1ae>
 800da7a:	68bb      	ldr	r3, [r7, #8]
 800da7c:	889b      	ldrh	r3, [r3, #4]
 800da7e:	2b08      	cmp	r3, #8
 800da80:	d909      	bls.n	800da96 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800da82:	2303      	movs	r3, #3
 800da84:	75fb      	strb	r3, [r7, #23]
 800da86:	e006      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800da88:	2303      	movs	r3, #3
 800da8a:	75fb      	strb	r3, [r7, #23]
 800da8c:	e003      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800da8e:	2303      	movs	r3, #3
 800da90:	75fb      	strb	r3, [r7, #23]
 800da92:	e000      	b.n	800da96 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800da94:	bf00      	nop
  }

  return status;
 800da96:	7dfb      	ldrb	r3, [r7, #23]
}
 800da98:	4618      	mov	r0, r3
 800da9a:	371c      	adds	r7, #28
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800daa4:	b480      	push	{r7}
 800daa6:	b087      	sub	sp, #28
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	4613      	mov	r3, r2
 800dab0:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	3301      	adds	r3, #1
 800dab6:	781b      	ldrb	r3, [r3, #0]
 800dab8:	2b03      	cmp	r3, #3
 800daba:	d120      	bne.n	800dafe <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	781b      	ldrb	r3, [r3, #0]
 800dac0:	1e9a      	subs	r2, r3, #2
 800dac2:	88fb      	ldrh	r3, [r7, #6]
 800dac4:	4293      	cmp	r3, r2
 800dac6:	bf28      	it	cs
 800dac8:	4613      	movcs	r3, r2
 800daca:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800dacc:	68fb      	ldr	r3, [r7, #12]
 800dace:	3302      	adds	r3, #2
 800dad0:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800dad2:	2300      	movs	r3, #0
 800dad4:	82fb      	strh	r3, [r7, #22]
 800dad6:	e00b      	b.n	800daf0 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800dad8:	8afb      	ldrh	r3, [r7, #22]
 800dada:	68fa      	ldr	r2, [r7, #12]
 800dadc:	4413      	add	r3, r2
 800dade:	781a      	ldrb	r2, [r3, #0]
 800dae0:	68bb      	ldr	r3, [r7, #8]
 800dae2:	701a      	strb	r2, [r3, #0]
      pdest++;
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	3301      	adds	r3, #1
 800dae8:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800daea:	8afb      	ldrh	r3, [r7, #22]
 800daec:	3302      	adds	r3, #2
 800daee:	82fb      	strh	r3, [r7, #22]
 800daf0:	8afa      	ldrh	r2, [r7, #22]
 800daf2:	8abb      	ldrh	r3, [r7, #20]
 800daf4:	429a      	cmp	r2, r3
 800daf6:	d3ef      	bcc.n	800dad8 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800daf8:	68bb      	ldr	r3, [r7, #8]
 800dafa:	2200      	movs	r2, #0
 800dafc:	701a      	strb	r2, [r3, #0]
  }
}
 800dafe:	bf00      	nop
 800db00:	371c      	adds	r7, #28
 800db02:	46bd      	mov	sp, r7
 800db04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db08:	4770      	bx	lr

0800db0a <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800db0a:	b480      	push	{r7}
 800db0c:	b085      	sub	sp, #20
 800db0e:	af00      	add	r7, sp, #0
 800db10:	6078      	str	r0, [r7, #4]
 800db12:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800db14:	683b      	ldr	r3, [r7, #0]
 800db16:	881b      	ldrh	r3, [r3, #0]
 800db18:	687a      	ldr	r2, [r7, #4]
 800db1a:	7812      	ldrb	r2, [r2, #0]
 800db1c:	4413      	add	r3, r2
 800db1e:	b29a      	uxth	r2, r3
 800db20:	683b      	ldr	r3, [r7, #0]
 800db22:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	781b      	ldrb	r3, [r3, #0]
 800db28:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800db2a:	687b      	ldr	r3, [r7, #4]
 800db2c:	4413      	add	r3, r2
 800db2e:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800db30:	68fb      	ldr	r3, [r7, #12]
}
 800db32:	4618      	mov	r0, r3
 800db34:	3714      	adds	r7, #20
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr

0800db3e <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800db3e:	b580      	push	{r7, lr}
 800db40:	b086      	sub	sp, #24
 800db42:	af00      	add	r7, sp, #0
 800db44:	60f8      	str	r0, [r7, #12]
 800db46:	60b9      	str	r1, [r7, #8]
 800db48:	4613      	mov	r3, r2
 800db4a:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800db4c:	2301      	movs	r3, #1
 800db4e:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	789b      	ldrb	r3, [r3, #2]
 800db54:	2b01      	cmp	r3, #1
 800db56:	d002      	beq.n	800db5e <USBH_CtlReq+0x20>
 800db58:	2b02      	cmp	r3, #2
 800db5a:	d00f      	beq.n	800db7c <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800db5c:	e027      	b.n	800dbae <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	68ba      	ldr	r2, [r7, #8]
 800db62:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800db64:	68fb      	ldr	r3, [r7, #12]
 800db66:	88fa      	ldrh	r2, [r7, #6]
 800db68:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800db6a:	68fb      	ldr	r3, [r7, #12]
 800db6c:	2201      	movs	r2, #1
 800db6e:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800db70:	68fb      	ldr	r3, [r7, #12]
 800db72:	2202      	movs	r2, #2
 800db74:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800db76:	2301      	movs	r3, #1
 800db78:	75fb      	strb	r3, [r7, #23]
      break;
 800db7a:	e018      	b.n	800dbae <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800db7c:	68f8      	ldr	r0, [r7, #12]
 800db7e:	f000 f81b 	bl	800dbb8 <USBH_HandleControl>
 800db82:	4603      	mov	r3, r0
 800db84:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800db86:	7dfb      	ldrb	r3, [r7, #23]
 800db88:	2b00      	cmp	r3, #0
 800db8a:	d002      	beq.n	800db92 <USBH_CtlReq+0x54>
 800db8c:	7dfb      	ldrb	r3, [r7, #23]
 800db8e:	2b03      	cmp	r3, #3
 800db90:	d106      	bne.n	800dba0 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800db92:	68fb      	ldr	r3, [r7, #12]
 800db94:	2201      	movs	r2, #1
 800db96:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	2200      	movs	r2, #0
 800db9c:	761a      	strb	r2, [r3, #24]
      break;
 800db9e:	e005      	b.n	800dbac <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800dba0:	7dfb      	ldrb	r3, [r7, #23]
 800dba2:	2b02      	cmp	r3, #2
 800dba4:	d102      	bne.n	800dbac <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800dba6:	68fb      	ldr	r3, [r7, #12]
 800dba8:	2201      	movs	r2, #1
 800dbaa:	709a      	strb	r2, [r3, #2]
      break;
 800dbac:	bf00      	nop
  }
  return status;
 800dbae:	7dfb      	ldrb	r3, [r7, #23]
}
 800dbb0:	4618      	mov	r0, r3
 800dbb2:	3718      	adds	r7, #24
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	bd80      	pop	{r7, pc}

0800dbb8 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800dbb8:	b580      	push	{r7, lr}
 800dbba:	b086      	sub	sp, #24
 800dbbc:	af02      	add	r7, sp, #8
 800dbbe:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800dbc0:	2301      	movs	r3, #1
 800dbc2:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800dbc4:	2300      	movs	r3, #0
 800dbc6:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	7e1b      	ldrb	r3, [r3, #24]
 800dbcc:	3b01      	subs	r3, #1
 800dbce:	2b0a      	cmp	r3, #10
 800dbd0:	f200 8156 	bhi.w	800de80 <USBH_HandleControl+0x2c8>
 800dbd4:	a201      	add	r2, pc, #4	@ (adr r2, 800dbdc <USBH_HandleControl+0x24>)
 800dbd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbda:	bf00      	nop
 800dbdc:	0800dc09 	.word	0x0800dc09
 800dbe0:	0800dc23 	.word	0x0800dc23
 800dbe4:	0800dc8d 	.word	0x0800dc8d
 800dbe8:	0800dcb3 	.word	0x0800dcb3
 800dbec:	0800dceb 	.word	0x0800dceb
 800dbf0:	0800dd15 	.word	0x0800dd15
 800dbf4:	0800dd67 	.word	0x0800dd67
 800dbf8:	0800dd89 	.word	0x0800dd89
 800dbfc:	0800ddc5 	.word	0x0800ddc5
 800dc00:	0800ddeb 	.word	0x0800ddeb
 800dc04:	0800de29 	.word	0x0800de29
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	f103 0110 	add.w	r1, r3, #16
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	795b      	ldrb	r3, [r3, #5]
 800dc12:	461a      	mov	r2, r3
 800dc14:	6878      	ldr	r0, [r7, #4]
 800dc16:	f000 f943 	bl	800dea0 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800dc1a:	687b      	ldr	r3, [r7, #4]
 800dc1c:	2202      	movs	r2, #2
 800dc1e:	761a      	strb	r2, [r3, #24]
      break;
 800dc20:	e139      	b.n	800de96 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	795b      	ldrb	r3, [r3, #5]
 800dc26:	4619      	mov	r1, r3
 800dc28:	6878      	ldr	r0, [r7, #4]
 800dc2a:	f001 fbd7 	bl	800f3dc <USBH_LL_GetURBState>
 800dc2e:	4603      	mov	r3, r0
 800dc30:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800dc32:	7bbb      	ldrb	r3, [r7, #14]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d11e      	bne.n	800dc76 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800dc38:	687b      	ldr	r3, [r7, #4]
 800dc3a:	7c1b      	ldrb	r3, [r3, #16]
 800dc3c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800dc40:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	8adb      	ldrh	r3, [r3, #22]
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d00a      	beq.n	800dc60 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800dc4a:	7b7b      	ldrb	r3, [r7, #13]
 800dc4c:	2b80      	cmp	r3, #128	@ 0x80
 800dc4e:	d103      	bne.n	800dc58 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2203      	movs	r2, #3
 800dc54:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dc56:	e115      	b.n	800de84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2205      	movs	r2, #5
 800dc5c:	761a      	strb	r2, [r3, #24]
      break;
 800dc5e:	e111      	b.n	800de84 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800dc60:	7b7b      	ldrb	r3, [r7, #13]
 800dc62:	2b80      	cmp	r3, #128	@ 0x80
 800dc64:	d103      	bne.n	800dc6e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800dc66:	687b      	ldr	r3, [r7, #4]
 800dc68:	2209      	movs	r2, #9
 800dc6a:	761a      	strb	r2, [r3, #24]
      break;
 800dc6c:	e10a      	b.n	800de84 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	2207      	movs	r2, #7
 800dc72:	761a      	strb	r2, [r3, #24]
      break;
 800dc74:	e106      	b.n	800de84 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800dc76:	7bbb      	ldrb	r3, [r7, #14]
 800dc78:	2b04      	cmp	r3, #4
 800dc7a:	d003      	beq.n	800dc84 <USBH_HandleControl+0xcc>
 800dc7c:	7bbb      	ldrb	r3, [r7, #14]
 800dc7e:	2b02      	cmp	r3, #2
 800dc80:	f040 8100 	bne.w	800de84 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	220b      	movs	r2, #11
 800dc88:	761a      	strb	r2, [r3, #24]
      break;
 800dc8a:	e0fb      	b.n	800de84 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800dc92:	b29a      	uxth	r2, r3
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	6899      	ldr	r1, [r3, #8]
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	899a      	ldrh	r2, [r3, #12]
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	791b      	ldrb	r3, [r3, #4]
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f000 f93a 	bl	800df1e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	2204      	movs	r2, #4
 800dcae:	761a      	strb	r2, [r3, #24]
      break;
 800dcb0:	e0f1      	b.n	800de96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	791b      	ldrb	r3, [r3, #4]
 800dcb6:	4619      	mov	r1, r3
 800dcb8:	6878      	ldr	r0, [r7, #4]
 800dcba:	f001 fb8f 	bl	800f3dc <USBH_LL_GetURBState>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800dcc2:	7bbb      	ldrb	r3, [r7, #14]
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d102      	bne.n	800dcce <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2209      	movs	r2, #9
 800dccc:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800dcce:	7bbb      	ldrb	r3, [r7, #14]
 800dcd0:	2b05      	cmp	r3, #5
 800dcd2:	d102      	bne.n	800dcda <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800dcd4:	2303      	movs	r3, #3
 800dcd6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dcd8:	e0d6      	b.n	800de88 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800dcda:	7bbb      	ldrb	r3, [r7, #14]
 800dcdc:	2b04      	cmp	r3, #4
 800dcde:	f040 80d3 	bne.w	800de88 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	220b      	movs	r2, #11
 800dce6:	761a      	strb	r2, [r3, #24]
      break;
 800dce8:	e0ce      	b.n	800de88 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800dcea:	687b      	ldr	r3, [r7, #4]
 800dcec:	6899      	ldr	r1, [r3, #8]
 800dcee:	687b      	ldr	r3, [r7, #4]
 800dcf0:	899a      	ldrh	r2, [r3, #12]
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	795b      	ldrb	r3, [r3, #5]
 800dcf6:	2001      	movs	r0, #1
 800dcf8:	9000      	str	r0, [sp, #0]
 800dcfa:	6878      	ldr	r0, [r7, #4]
 800dcfc:	f000 f8ea 	bl	800ded4 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800dd06:	b29a      	uxth	r2, r3
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	2206      	movs	r2, #6
 800dd10:	761a      	strb	r2, [r3, #24]
      break;
 800dd12:	e0c0      	b.n	800de96 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	795b      	ldrb	r3, [r3, #5]
 800dd18:	4619      	mov	r1, r3
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f001 fb5e 	bl	800f3dc <USBH_LL_GetURBState>
 800dd20:	4603      	mov	r3, r0
 800dd22:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd24:	7bbb      	ldrb	r3, [r7, #14]
 800dd26:	2b01      	cmp	r3, #1
 800dd28:	d103      	bne.n	800dd32 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	2207      	movs	r2, #7
 800dd2e:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dd30:	e0ac      	b.n	800de8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800dd32:	7bbb      	ldrb	r3, [r7, #14]
 800dd34:	2b05      	cmp	r3, #5
 800dd36:	d105      	bne.n	800dd44 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	220c      	movs	r2, #12
 800dd3c:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800dd3e:	2303      	movs	r3, #3
 800dd40:	73fb      	strb	r3, [r7, #15]
      break;
 800dd42:	e0a3      	b.n	800de8c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800dd44:	7bbb      	ldrb	r3, [r7, #14]
 800dd46:	2b02      	cmp	r3, #2
 800dd48:	d103      	bne.n	800dd52 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800dd4a:	687b      	ldr	r3, [r7, #4]
 800dd4c:	2205      	movs	r2, #5
 800dd4e:	761a      	strb	r2, [r3, #24]
      break;
 800dd50:	e09c      	b.n	800de8c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800dd52:	7bbb      	ldrb	r3, [r7, #14]
 800dd54:	2b04      	cmp	r3, #4
 800dd56:	f040 8099 	bne.w	800de8c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	220b      	movs	r2, #11
 800dd5e:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800dd60:	2302      	movs	r3, #2
 800dd62:	73fb      	strb	r3, [r7, #15]
      break;
 800dd64:	e092      	b.n	800de8c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	791b      	ldrb	r3, [r3, #4]
 800dd6a:	2200      	movs	r2, #0
 800dd6c:	2100      	movs	r1, #0
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f000 f8d5 	bl	800df1e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800dd7a:	b29a      	uxth	r2, r3
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800dd80:	687b      	ldr	r3, [r7, #4]
 800dd82:	2208      	movs	r2, #8
 800dd84:	761a      	strb	r2, [r3, #24]

      break;
 800dd86:	e086      	b.n	800de96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800dd88:	687b      	ldr	r3, [r7, #4]
 800dd8a:	791b      	ldrb	r3, [r3, #4]
 800dd8c:	4619      	mov	r1, r3
 800dd8e:	6878      	ldr	r0, [r7, #4]
 800dd90:	f001 fb24 	bl	800f3dc <USBH_LL_GetURBState>
 800dd94:	4603      	mov	r3, r0
 800dd96:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800dd98:	7bbb      	ldrb	r3, [r7, #14]
 800dd9a:	2b01      	cmp	r3, #1
 800dd9c:	d105      	bne.n	800ddaa <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	220d      	movs	r2, #13
 800dda2:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800dda4:	2300      	movs	r3, #0
 800dda6:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800dda8:	e072      	b.n	800de90 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ddaa:	7bbb      	ldrb	r3, [r7, #14]
 800ddac:	2b04      	cmp	r3, #4
 800ddae:	d103      	bne.n	800ddb8 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	220b      	movs	r2, #11
 800ddb4:	761a      	strb	r2, [r3, #24]
      break;
 800ddb6:	e06b      	b.n	800de90 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ddb8:	7bbb      	ldrb	r3, [r7, #14]
 800ddba:	2b05      	cmp	r3, #5
 800ddbc:	d168      	bne.n	800de90 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ddbe:	2303      	movs	r3, #3
 800ddc0:	73fb      	strb	r3, [r7, #15]
      break;
 800ddc2:	e065      	b.n	800de90 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	795b      	ldrb	r3, [r3, #5]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	9200      	str	r2, [sp, #0]
 800ddcc:	2200      	movs	r2, #0
 800ddce:	2100      	movs	r1, #0
 800ddd0:	6878      	ldr	r0, [r7, #4]
 800ddd2:	f000 f87f 	bl	800ded4 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800dddc:	b29a      	uxth	r2, r3
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	220a      	movs	r2, #10
 800dde6:	761a      	strb	r2, [r3, #24]
      break;
 800dde8:	e055      	b.n	800de96 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	795b      	ldrb	r3, [r3, #5]
 800ddee:	4619      	mov	r1, r3
 800ddf0:	6878      	ldr	r0, [r7, #4]
 800ddf2:	f001 faf3 	bl	800f3dc <USBH_LL_GetURBState>
 800ddf6:	4603      	mov	r3, r0
 800ddf8:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ddfa:	7bbb      	ldrb	r3, [r7, #14]
 800ddfc:	2b01      	cmp	r3, #1
 800ddfe:	d105      	bne.n	800de0c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800de00:	2300      	movs	r3, #0
 800de02:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800de04:	687b      	ldr	r3, [r7, #4]
 800de06:	220d      	movs	r2, #13
 800de08:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800de0a:	e043      	b.n	800de94 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800de0c:	7bbb      	ldrb	r3, [r7, #14]
 800de0e:	2b02      	cmp	r3, #2
 800de10:	d103      	bne.n	800de1a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	2209      	movs	r2, #9
 800de16:	761a      	strb	r2, [r3, #24]
      break;
 800de18:	e03c      	b.n	800de94 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800de1a:	7bbb      	ldrb	r3, [r7, #14]
 800de1c:	2b04      	cmp	r3, #4
 800de1e:	d139      	bne.n	800de94 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	220b      	movs	r2, #11
 800de24:	761a      	strb	r2, [r3, #24]
      break;
 800de26:	e035      	b.n	800de94 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	7e5b      	ldrb	r3, [r3, #25]
 800de2c:	3301      	adds	r3, #1
 800de2e:	b2da      	uxtb	r2, r3
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	765a      	strb	r2, [r3, #25]
 800de34:	687b      	ldr	r3, [r7, #4]
 800de36:	7e5b      	ldrb	r3, [r3, #25]
 800de38:	2b02      	cmp	r3, #2
 800de3a:	d806      	bhi.n	800de4a <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800de48:	e025      	b.n	800de96 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800de50:	2106      	movs	r1, #6
 800de52:	6878      	ldr	r0, [r7, #4]
 800de54:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800de56:	687b      	ldr	r3, [r7, #4]
 800de58:	2200      	movs	r2, #0
 800de5a:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	795b      	ldrb	r3, [r3, #5]
 800de60:	4619      	mov	r1, r3
 800de62:	6878      	ldr	r0, [r7, #4]
 800de64:	f000 f947 	bl	800e0f6 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	791b      	ldrb	r3, [r3, #4]
 800de6c:	4619      	mov	r1, r3
 800de6e:	6878      	ldr	r0, [r7, #4]
 800de70:	f000 f941 	bl	800e0f6 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800de74:	687b      	ldr	r3, [r7, #4]
 800de76:	2200      	movs	r2, #0
 800de78:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800de7a:	2302      	movs	r3, #2
 800de7c:	73fb      	strb	r3, [r7, #15]
      break;
 800de7e:	e00a      	b.n	800de96 <USBH_HandleControl+0x2de>

    default:
      break;
 800de80:	bf00      	nop
 800de82:	e008      	b.n	800de96 <USBH_HandleControl+0x2de>
      break;
 800de84:	bf00      	nop
 800de86:	e006      	b.n	800de96 <USBH_HandleControl+0x2de>
      break;
 800de88:	bf00      	nop
 800de8a:	e004      	b.n	800de96 <USBH_HandleControl+0x2de>
      break;
 800de8c:	bf00      	nop
 800de8e:	e002      	b.n	800de96 <USBH_HandleControl+0x2de>
      break;
 800de90:	bf00      	nop
 800de92:	e000      	b.n	800de96 <USBH_HandleControl+0x2de>
      break;
 800de94:	bf00      	nop
  }

  return status;
 800de96:	7bfb      	ldrb	r3, [r7, #15]
}
 800de98:	4618      	mov	r0, r3
 800de9a:	3710      	adds	r7, #16
 800de9c:	46bd      	mov	sp, r7
 800de9e:	bd80      	pop	{r7, pc}

0800dea0 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b088      	sub	sp, #32
 800dea4:	af04      	add	r7, sp, #16
 800dea6:	60f8      	str	r0, [r7, #12]
 800dea8:	60b9      	str	r1, [r7, #8]
 800deaa:	4613      	mov	r3, r2
 800deac:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800deae:	79f9      	ldrb	r1, [r7, #7]
 800deb0:	2300      	movs	r3, #0
 800deb2:	9303      	str	r3, [sp, #12]
 800deb4:	2308      	movs	r3, #8
 800deb6:	9302      	str	r3, [sp, #8]
 800deb8:	68bb      	ldr	r3, [r7, #8]
 800deba:	9301      	str	r3, [sp, #4]
 800debc:	2300      	movs	r3, #0
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	2300      	movs	r3, #0
 800dec2:	2200      	movs	r2, #0
 800dec4:	68f8      	ldr	r0, [r7, #12]
 800dec6:	f001 fa58 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800deca:	2300      	movs	r3, #0
}
 800decc:	4618      	mov	r0, r3
 800dece:	3710      	adds	r7, #16
 800ded0:	46bd      	mov	sp, r7
 800ded2:	bd80      	pop	{r7, pc}

0800ded4 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ded4:	b580      	push	{r7, lr}
 800ded6:	b088      	sub	sp, #32
 800ded8:	af04      	add	r7, sp, #16
 800deda:	60f8      	str	r0, [r7, #12]
 800dedc:	60b9      	str	r1, [r7, #8]
 800dede:	4611      	mov	r1, r2
 800dee0:	461a      	mov	r2, r3
 800dee2:	460b      	mov	r3, r1
 800dee4:	80fb      	strh	r3, [r7, #6]
 800dee6:	4613      	mov	r3, r2
 800dee8:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800def0:	2b00      	cmp	r3, #0
 800def2:	d001      	beq.n	800def8 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800def4:	2300      	movs	r3, #0
 800def6:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800def8:	7979      	ldrb	r1, [r7, #5]
 800defa:	7e3b      	ldrb	r3, [r7, #24]
 800defc:	9303      	str	r3, [sp, #12]
 800defe:	88fb      	ldrh	r3, [r7, #6]
 800df00:	9302      	str	r3, [sp, #8]
 800df02:	68bb      	ldr	r3, [r7, #8]
 800df04:	9301      	str	r3, [sp, #4]
 800df06:	2301      	movs	r3, #1
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	2300      	movs	r3, #0
 800df0c:	2200      	movs	r2, #0
 800df0e:	68f8      	ldr	r0, [r7, #12]
 800df10:	f001 fa33 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800df14:	2300      	movs	r3, #0
}
 800df16:	4618      	mov	r0, r3
 800df18:	3710      	adds	r7, #16
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b088      	sub	sp, #32
 800df22:	af04      	add	r7, sp, #16
 800df24:	60f8      	str	r0, [r7, #12]
 800df26:	60b9      	str	r1, [r7, #8]
 800df28:	4611      	mov	r1, r2
 800df2a:	461a      	mov	r2, r3
 800df2c:	460b      	mov	r3, r1
 800df2e:	80fb      	strh	r3, [r7, #6]
 800df30:	4613      	mov	r3, r2
 800df32:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df34:	7979      	ldrb	r1, [r7, #5]
 800df36:	2300      	movs	r3, #0
 800df38:	9303      	str	r3, [sp, #12]
 800df3a:	88fb      	ldrh	r3, [r7, #6]
 800df3c:	9302      	str	r3, [sp, #8]
 800df3e:	68bb      	ldr	r3, [r7, #8]
 800df40:	9301      	str	r3, [sp, #4]
 800df42:	2301      	movs	r3, #1
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2300      	movs	r3, #0
 800df48:	2201      	movs	r2, #1
 800df4a:	68f8      	ldr	r0, [r7, #12]
 800df4c:	f001 fa15 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800df50:	2300      	movs	r3, #0

}
 800df52:	4618      	mov	r0, r3
 800df54:	3710      	adds	r7, #16
 800df56:	46bd      	mov	sp, r7
 800df58:	bd80      	pop	{r7, pc}

0800df5a <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800df5a:	b580      	push	{r7, lr}
 800df5c:	b088      	sub	sp, #32
 800df5e:	af04      	add	r7, sp, #16
 800df60:	60f8      	str	r0, [r7, #12]
 800df62:	60b9      	str	r1, [r7, #8]
 800df64:	4611      	mov	r1, r2
 800df66:	461a      	mov	r2, r3
 800df68:	460b      	mov	r3, r1
 800df6a:	80fb      	strh	r3, [r7, #6]
 800df6c:	4613      	mov	r3, r2
 800df6e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800df76:	2b00      	cmp	r3, #0
 800df78:	d001      	beq.n	800df7e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800df7a:	2300      	movs	r3, #0
 800df7c:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800df7e:	7979      	ldrb	r1, [r7, #5]
 800df80:	7e3b      	ldrb	r3, [r7, #24]
 800df82:	9303      	str	r3, [sp, #12]
 800df84:	88fb      	ldrh	r3, [r7, #6]
 800df86:	9302      	str	r3, [sp, #8]
 800df88:	68bb      	ldr	r3, [r7, #8]
 800df8a:	9301      	str	r3, [sp, #4]
 800df8c:	2301      	movs	r3, #1
 800df8e:	9300      	str	r3, [sp, #0]
 800df90:	2302      	movs	r3, #2
 800df92:	2200      	movs	r2, #0
 800df94:	68f8      	ldr	r0, [r7, #12]
 800df96:	f001 f9f0 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800df9a:	2300      	movs	r3, #0
}
 800df9c:	4618      	mov	r0, r3
 800df9e:	3710      	adds	r7, #16
 800dfa0:	46bd      	mov	sp, r7
 800dfa2:	bd80      	pop	{r7, pc}

0800dfa4 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800dfa4:	b580      	push	{r7, lr}
 800dfa6:	b088      	sub	sp, #32
 800dfa8:	af04      	add	r7, sp, #16
 800dfaa:	60f8      	str	r0, [r7, #12]
 800dfac:	60b9      	str	r1, [r7, #8]
 800dfae:	4611      	mov	r1, r2
 800dfb0:	461a      	mov	r2, r3
 800dfb2:	460b      	mov	r3, r1
 800dfb4:	80fb      	strh	r3, [r7, #6]
 800dfb6:	4613      	mov	r3, r2
 800dfb8:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dfba:	7979      	ldrb	r1, [r7, #5]
 800dfbc:	2300      	movs	r3, #0
 800dfbe:	9303      	str	r3, [sp, #12]
 800dfc0:	88fb      	ldrh	r3, [r7, #6]
 800dfc2:	9302      	str	r3, [sp, #8]
 800dfc4:	68bb      	ldr	r3, [r7, #8]
 800dfc6:	9301      	str	r3, [sp, #4]
 800dfc8:	2301      	movs	r3, #1
 800dfca:	9300      	str	r3, [sp, #0]
 800dfcc:	2302      	movs	r3, #2
 800dfce:	2201      	movs	r2, #1
 800dfd0:	68f8      	ldr	r0, [r7, #12]
 800dfd2:	f001 f9d2 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800dfd6:	2300      	movs	r3, #0
}
 800dfd8:	4618      	mov	r0, r3
 800dfda:	3710      	adds	r7, #16
 800dfdc:	46bd      	mov	sp, r7
 800dfde:	bd80      	pop	{r7, pc}

0800dfe0 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800dfe0:	b580      	push	{r7, lr}
 800dfe2:	b088      	sub	sp, #32
 800dfe4:	af04      	add	r7, sp, #16
 800dfe6:	60f8      	str	r0, [r7, #12]
 800dfe8:	60b9      	str	r1, [r7, #8]
 800dfea:	4611      	mov	r1, r2
 800dfec:	461a      	mov	r2, r3
 800dfee:	460b      	mov	r3, r1
 800dff0:	71fb      	strb	r3, [r7, #7]
 800dff2:	4613      	mov	r3, r2
 800dff4:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800dff6:	79fb      	ldrb	r3, [r7, #7]
 800dff8:	b29b      	uxth	r3, r3
 800dffa:	79b9      	ldrb	r1, [r7, #6]
 800dffc:	2200      	movs	r2, #0
 800dffe:	9203      	str	r2, [sp, #12]
 800e000:	9302      	str	r3, [sp, #8]
 800e002:	68bb      	ldr	r3, [r7, #8]
 800e004:	9301      	str	r3, [sp, #4]
 800e006:	2301      	movs	r3, #1
 800e008:	9300      	str	r3, [sp, #0]
 800e00a:	2303      	movs	r3, #3
 800e00c:	2201      	movs	r2, #1
 800e00e:	68f8      	ldr	r0, [r7, #12]
 800e010:	f001 f9b3 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e014:	2300      	movs	r3, #0
}
 800e016:	4618      	mov	r0, r3
 800e018:	3710      	adds	r7, #16
 800e01a:	46bd      	mov	sp, r7
 800e01c:	bd80      	pop	{r7, pc}

0800e01e <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800e01e:	b580      	push	{r7, lr}
 800e020:	b088      	sub	sp, #32
 800e022:	af04      	add	r7, sp, #16
 800e024:	60f8      	str	r0, [r7, #12]
 800e026:	60b9      	str	r1, [r7, #8]
 800e028:	607a      	str	r2, [r7, #4]
 800e02a:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	b29b      	uxth	r3, r3
 800e030:	78f9      	ldrb	r1, [r7, #3]
 800e032:	2200      	movs	r2, #0
 800e034:	9203      	str	r2, [sp, #12]
 800e036:	9302      	str	r3, [sp, #8]
 800e038:	68bb      	ldr	r3, [r7, #8]
 800e03a:	9301      	str	r3, [sp, #4]
 800e03c:	2301      	movs	r3, #1
 800e03e:	9300      	str	r3, [sp, #0]
 800e040:	2301      	movs	r3, #1
 800e042:	2200      	movs	r2, #0
 800e044:	68f8      	ldr	r0, [r7, #12]
 800e046:	f001 f998 	bl	800f37a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800e04a:	2300      	movs	r3, #0
}
 800e04c:	4618      	mov	r0, r3
 800e04e:	3710      	adds	r7, #16
 800e050:	46bd      	mov	sp, r7
 800e052:	bd80      	pop	{r7, pc}

0800e054 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800e054:	b580      	push	{r7, lr}
 800e056:	b086      	sub	sp, #24
 800e058:	af04      	add	r7, sp, #16
 800e05a:	6078      	str	r0, [r7, #4]
 800e05c:	4608      	mov	r0, r1
 800e05e:	4611      	mov	r1, r2
 800e060:	461a      	mov	r2, r3
 800e062:	4603      	mov	r3, r0
 800e064:	70fb      	strb	r3, [r7, #3]
 800e066:	460b      	mov	r3, r1
 800e068:	70bb      	strb	r3, [r7, #2]
 800e06a:	4613      	mov	r3, r2
 800e06c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800e06e:	7878      	ldrb	r0, [r7, #1]
 800e070:	78ba      	ldrb	r2, [r7, #2]
 800e072:	78f9      	ldrb	r1, [r7, #3]
 800e074:	8b3b      	ldrh	r3, [r7, #24]
 800e076:	9302      	str	r3, [sp, #8]
 800e078:	7d3b      	ldrb	r3, [r7, #20]
 800e07a:	9301      	str	r3, [sp, #4]
 800e07c:	7c3b      	ldrb	r3, [r7, #16]
 800e07e:	9300      	str	r3, [sp, #0]
 800e080:	4603      	mov	r3, r0
 800e082:	6878      	ldr	r0, [r7, #4]
 800e084:	f001 f92b 	bl	800f2de <USBH_LL_OpenPipe>

  return USBH_OK;
 800e088:	2300      	movs	r3, #0
}
 800e08a:	4618      	mov	r0, r3
 800e08c:	3708      	adds	r7, #8
 800e08e:	46bd      	mov	sp, r7
 800e090:	bd80      	pop	{r7, pc}

0800e092 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800e092:	b580      	push	{r7, lr}
 800e094:	b082      	sub	sp, #8
 800e096:	af00      	add	r7, sp, #0
 800e098:	6078      	str	r0, [r7, #4]
 800e09a:	460b      	mov	r3, r1
 800e09c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800e09e:	78fb      	ldrb	r3, [r7, #3]
 800e0a0:	4619      	mov	r1, r3
 800e0a2:	6878      	ldr	r0, [r7, #4]
 800e0a4:	f001 f94a 	bl	800f33c <USBH_LL_ClosePipe>

  return USBH_OK;
 800e0a8:	2300      	movs	r3, #0
}
 800e0aa:	4618      	mov	r0, r3
 800e0ac:	3708      	adds	r7, #8
 800e0ae:	46bd      	mov	sp, r7
 800e0b0:	bd80      	pop	{r7, pc}

0800e0b2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800e0b2:	b580      	push	{r7, lr}
 800e0b4:	b084      	sub	sp, #16
 800e0b6:	af00      	add	r7, sp, #0
 800e0b8:	6078      	str	r0, [r7, #4]
 800e0ba:	460b      	mov	r3, r1
 800e0bc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800e0be:	6878      	ldr	r0, [r7, #4]
 800e0c0:	f000 f839 	bl	800e136 <USBH_GetFreePipe>
 800e0c4:	4603      	mov	r3, r0
 800e0c6:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800e0c8:	89fb      	ldrh	r3, [r7, #14]
 800e0ca:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800e0ce:	4293      	cmp	r3, r2
 800e0d0:	d00b      	beq.n	800e0ea <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800e0d2:	78fa      	ldrb	r2, [r7, #3]
 800e0d4:	89fb      	ldrh	r3, [r7, #14]
 800e0d6:	f003 030f 	and.w	r3, r3, #15
 800e0da:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800e0de:	6879      	ldr	r1, [r7, #4]
 800e0e0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e0e4:	009b      	lsls	r3, r3, #2
 800e0e6:	440b      	add	r3, r1
 800e0e8:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800e0ea:	89fb      	ldrh	r3, [r7, #14]
 800e0ec:	b2db      	uxtb	r3, r3
}
 800e0ee:	4618      	mov	r0, r3
 800e0f0:	3710      	adds	r7, #16
 800e0f2:	46bd      	mov	sp, r7
 800e0f4:	bd80      	pop	{r7, pc}

0800e0f6 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800e0f6:	b480      	push	{r7}
 800e0f8:	b083      	sub	sp, #12
 800e0fa:	af00      	add	r7, sp, #0
 800e0fc:	6078      	str	r0, [r7, #4]
 800e0fe:	460b      	mov	r3, r1
 800e100:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800e102:	78fb      	ldrb	r3, [r7, #3]
 800e104:	2b0f      	cmp	r3, #15
 800e106:	d80f      	bhi.n	800e128 <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800e108:	78fb      	ldrb	r3, [r7, #3]
 800e10a:	687a      	ldr	r2, [r7, #4]
 800e10c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e110:	009b      	lsls	r3, r3, #2
 800e112:	4413      	add	r3, r2
 800e114:	685a      	ldr	r2, [r3, #4]
 800e116:	78fb      	ldrb	r3, [r7, #3]
 800e118:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800e11c:	6879      	ldr	r1, [r7, #4]
 800e11e:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e122:	009b      	lsls	r3, r3, #2
 800e124:	440b      	add	r3, r1
 800e126:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800e128:	2300      	movs	r3, #0
}
 800e12a:	4618      	mov	r0, r3
 800e12c:	370c      	adds	r7, #12
 800e12e:	46bd      	mov	sp, r7
 800e130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e134:	4770      	bx	lr

0800e136 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800e136:	b480      	push	{r7}
 800e138:	b085      	sub	sp, #20
 800e13a:	af00      	add	r7, sp, #0
 800e13c:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800e13e:	2300      	movs	r3, #0
 800e140:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e142:	2300      	movs	r3, #0
 800e144:	73fb      	strb	r3, [r7, #15]
 800e146:	e010      	b.n	800e16a <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800e148:	7bfb      	ldrb	r3, [r7, #15]
 800e14a:	687a      	ldr	r2, [r7, #4]
 800e14c:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4413      	add	r3, r2
 800e154:	685b      	ldr	r3, [r3, #4]
 800e156:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e15a:	2b00      	cmp	r3, #0
 800e15c:	d102      	bne.n	800e164 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800e15e:	7bfb      	ldrb	r3, [r7, #15]
 800e160:	b29b      	uxth	r3, r3
 800e162:	e007      	b.n	800e174 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800e164:	7bfb      	ldrb	r3, [r7, #15]
 800e166:	3301      	adds	r3, #1
 800e168:	73fb      	strb	r3, [r7, #15]
 800e16a:	7bfb      	ldrb	r3, [r7, #15]
 800e16c:	2b0f      	cmp	r3, #15
 800e16e:	d9eb      	bls.n	800e148 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800e170:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800e174:	4618      	mov	r0, r3
 800e176:	3714      	adds	r7, #20
 800e178:	46bd      	mov	sp, r7
 800e17a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e17e:	4770      	bx	lr

0800e180 <MX_USB_HOST_Init>:
static uint8_t hex_to_byte(const uint8_t *hex);

static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id);

void MX_USB_HOST_Init(void)
{
 800e180:	b580      	push	{r7, lr}
 800e182:	af00      	add	r7, sp, #0
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800e184:	2201      	movs	r2, #1
 800e186:	4921      	ldr	r1, [pc, #132]	@ (800e20c <MX_USB_HOST_Init+0x8c>)
 800e188:	4821      	ldr	r0, [pc, #132]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e18a:	f7fe fa77 	bl	800c67c <USBH_Init>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d001      	beq.n	800e198 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800e194:	f7f2 fd06 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800e198:	491e      	ldr	r1, [pc, #120]	@ (800e214 <MX_USB_HOST_Init+0x94>)
 800e19a:	481d      	ldr	r0, [pc, #116]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e19c:	f7fe fb1d 	bl	800c7da <USBH_RegisterClass>
 800e1a0:	4603      	mov	r3, r0
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d001      	beq.n	800e1aa <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800e1a6:	f7f2 fcfd 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800e1aa:	491b      	ldr	r1, [pc, #108]	@ (800e218 <MX_USB_HOST_Init+0x98>)
 800e1ac:	4818      	ldr	r0, [pc, #96]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e1ae:	f7fe fb14 	bl	800c7da <USBH_RegisterClass>
 800e1b2:	4603      	mov	r3, r0
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d001      	beq.n	800e1bc <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 800e1b8:	f7f2 fcf4 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800e1bc:	4917      	ldr	r1, [pc, #92]	@ (800e21c <MX_USB_HOST_Init+0x9c>)
 800e1be:	4814      	ldr	r0, [pc, #80]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e1c0:	f7fe fb0b 	bl	800c7da <USBH_RegisterClass>
 800e1c4:	4603      	mov	r3, r0
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d001      	beq.n	800e1ce <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800e1ca:	f7f2 fceb 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800e1ce:	4914      	ldr	r1, [pc, #80]	@ (800e220 <MX_USB_HOST_Init+0xa0>)
 800e1d0:	480f      	ldr	r0, [pc, #60]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e1d2:	f7fe fb02 	bl	800c7da <USBH_RegisterClass>
 800e1d6:	4603      	mov	r3, r0
 800e1d8:	2b00      	cmp	r3, #0
 800e1da:	d001      	beq.n	800e1e0 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800e1dc:	f7f2 fce2 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 800e1e0:	4910      	ldr	r1, [pc, #64]	@ (800e224 <MX_USB_HOST_Init+0xa4>)
 800e1e2:	480b      	ldr	r0, [pc, #44]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e1e4:	f7fe faf9 	bl	800c7da <USBH_RegisterClass>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b00      	cmp	r3, #0
 800e1ec:	d001      	beq.n	800e1f2 <MX_USB_HOST_Init+0x72>
  {
    Error_Handler();
 800e1ee:	f7f2 fcd9 	bl	8000ba4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800e1f2:	4807      	ldr	r0, [pc, #28]	@ (800e210 <MX_USB_HOST_Init+0x90>)
 800e1f4:	f7fe fbb1 	bl	800c95a <USBH_Start>
 800e1f8:	4603      	mov	r3, r0
 800e1fa:	2b00      	cmp	r3, #0
 800e1fc:	d001      	beq.n	800e202 <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800e1fe:	f7f2 fcd1 	bl	8000ba4 <Error_Handler>
  }
  printf("USB Host Init Successful\r\n");
 800e202:	4809      	ldr	r0, [pc, #36]	@ (800e228 <MX_USB_HOST_Init+0xa8>)
 800e204:	f001 fbb6 	bl	800f974 <puts>
}
 800e208:	bf00      	nop
 800e20a:	bd80      	pop	{r7, pc}
 800e20c:	0800e241 	.word	0x0800e241
 800e210:	20004b44 	.word	0x20004b44
 800e214:	20000040 	.word	0x20000040
 800e218:	20000060 	.word	0x20000060
 800e21c:	200000a0 	.word	0x200000a0
 800e220:	20000080 	.word	0x20000080
 800e224:	200000c0 	.word	0x200000c0
 800e228:	080109b0 	.word	0x080109b0

0800e22c <MX_USB_HOST_Process>:

void MX_USB_HOST_Process(void)
{
 800e22c:	b580      	push	{r7, lr}
 800e22e:	af00      	add	r7, sp, #0
  USBH_Process(&hUsbHostFS);
 800e230:	4802      	ldr	r0, [pc, #8]	@ (800e23c <MX_USB_HOST_Process+0x10>)
 800e232:	f7fe fba3 	bl	800c97c <USBH_Process>
}
 800e236:	bf00      	nop
 800e238:	bd80      	pop	{r7, pc}
 800e23a:	bf00      	nop
 800e23c:	20004b44 	.word	0x20004b44

0800e240 <USBH_UserProcess>:
static void USBH_UserProcess(USBH_HandleTypeDef *phost, uint8_t id)
{
 800e240:	b580      	push	{r7, lr}
 800e242:	b082      	sub	sp, #8
 800e244:	af00      	add	r7, sp, #0
 800e246:	6078      	str	r0, [r7, #4]
 800e248:	460b      	mov	r3, r1
 800e24a:	70fb      	strb	r3, [r7, #3]
  switch(id)
 800e24c:	78fb      	ldrb	r3, [r7, #3]
 800e24e:	3b01      	subs	r3, #1
 800e250:	2b04      	cmp	r3, #4
 800e252:	d827      	bhi.n	800e2a4 <USBH_UserProcess+0x64>
 800e254:	a201      	add	r2, pc, #4	@ (adr r2, 800e25c <USBH_UserProcess+0x1c>)
 800e256:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e25a:	bf00      	nop
 800e25c:	0800e2a5 	.word	0x0800e2a5
 800e260:	0800e295 	.word	0x0800e295
 800e264:	0800e2a5 	.word	0x0800e2a5
 800e268:	0800e29d 	.word	0x0800e29d
 800e26c:	0800e271 	.word	0x0800e271
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800e270:	4b10      	ldr	r3, [pc, #64]	@ (800e2b4 <USBH_UserProcess+0x74>)
 800e272:	2203      	movs	r2, #3
 800e274:	701a      	strb	r2, [r3, #0]
  // Reset programming state if device disconnected during programming
  if (arduino_prog_state != ARDUINO_PROG_IDLE &&
 800e276:	4b10      	ldr	r3, [pc, #64]	@ (800e2b8 <USBH_UserProcess+0x78>)
 800e278:	781b      	ldrb	r3, [r3, #0]
 800e27a:	2b00      	cmp	r3, #0
 800e27c:	d014      	beq.n	800e2a8 <USBH_UserProcess+0x68>
      arduino_prog_state != ARDUINO_PROG_COMPLETED) {
 800e27e:	4b0e      	ldr	r3, [pc, #56]	@ (800e2b8 <USBH_UserProcess+0x78>)
 800e280:	781b      	ldrb	r3, [r3, #0]
  if (arduino_prog_state != ARDUINO_PROG_IDLE &&
 800e282:	2b06      	cmp	r3, #6
 800e284:	d010      	beq.n	800e2a8 <USBH_UserProcess+0x68>
      arduino_prog_state = ARDUINO_PROG_ERROR;
 800e286:	4b0c      	ldr	r3, [pc, #48]	@ (800e2b8 <USBH_UserProcess+0x78>)
 800e288:	2207      	movs	r2, #7
 800e28a:	701a      	strb	r2, [r3, #0]
      printf("USB device disconnected during programming\r\n");
 800e28c:	480b      	ldr	r0, [pc, #44]	@ (800e2bc <USBH_UserProcess+0x7c>)
 800e28e:	f001 fb71 	bl	800f974 <puts>
  }
  break;
 800e292:	e009      	b.n	800e2a8 <USBH_UserProcess+0x68>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800e294:	4b07      	ldr	r3, [pc, #28]	@ (800e2b4 <USBH_UserProcess+0x74>)
 800e296:	2202      	movs	r2, #2
 800e298:	701a      	strb	r2, [r3, #0]
  break;
 800e29a:	e006      	b.n	800e2aa <USBH_UserProcess+0x6a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800e29c:	4b05      	ldr	r3, [pc, #20]	@ (800e2b4 <USBH_UserProcess+0x74>)
 800e29e:	2201      	movs	r2, #1
 800e2a0:	701a      	strb	r2, [r3, #0]
  break;
 800e2a2:	e002      	b.n	800e2aa <USBH_UserProcess+0x6a>

  default:
  break;
 800e2a4:	bf00      	nop
 800e2a6:	e000      	b.n	800e2aa <USBH_UserProcess+0x6a>
  break;
 800e2a8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800e2aa:	bf00      	nop
 800e2ac:	3708      	adds	r7, #8
 800e2ae:	46bd      	mov	sp, r7
 800e2b0:	bd80      	pop	{r7, pc}
 800e2b2:	bf00      	nop
 800e2b4:	200050ec 	.word	0x200050ec
 800e2b8:	200050ed 	.word	0x200050ed
 800e2bc:	080109cc 	.word	0x080109cc

0800e2c0 <check_usb_device>:

/**
  * @}
  */
const char* check_usb_device(void)
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
    static char board_name[MAX_BOARD_NAME_LENGTH] = "No Device";  // Static local storage
    // Check the application state to determine the USB connection status
    if (Appli_state == APPLICATION_READY) {
 800e2c6:	4b1c      	ldr	r3, [pc, #112]	@ (800e338 <check_usb_device+0x78>)
 800e2c8:	781b      	ldrb	r3, [r3, #0]
 800e2ca:	2b02      	cmp	r3, #2
 800e2cc:	d115      	bne.n	800e2fa <check_usb_device+0x3a>
        // Device is connected and ready
        USBH_DevDescTypeDef *dev_desc = &hUsbHostFS.device.DevDesc;
 800e2ce:	4b1b      	ldr	r3, [pc, #108]	@ (800e33c <check_usb_device+0x7c>)
 800e2d0:	607b      	str	r3, [r7, #4]

        // Classify and return the device's board name
        const char* detected = classify_usb_device(dev_desc->idVendor, dev_desc->idProduct, dev_desc->bDeviceClass);
 800e2d2:	687b      	ldr	r3, [r7, #4]
 800e2d4:	8918      	ldrh	r0, [r3, #8]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	8959      	ldrh	r1, [r3, #10]
 800e2da:	687b      	ldr	r3, [r7, #4]
 800e2dc:	791b      	ldrb	r3, [r3, #4]
 800e2de:	461a      	mov	r2, r3
 800e2e0:	f000 f834 	bl	800e34c <classify_usb_device>
 800e2e4:	6038      	str	r0, [r7, #0]
        strncpy(board_name, detected, MAX_BOARD_NAME_LENGTH - 1);
 800e2e6:	2231      	movs	r2, #49	@ 0x31
 800e2e8:	6839      	ldr	r1, [r7, #0]
 800e2ea:	4815      	ldr	r0, [pc, #84]	@ (800e340 <check_usb_device+0x80>)
 800e2ec:	f001 fc5e 	bl	800fbac <strncpy>
        board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0';  // Ensure null termination
 800e2f0:	4b13      	ldr	r3, [pc, #76]	@ (800e340 <check_usb_device+0x80>)
 800e2f2:	2200      	movs	r2, #0
 800e2f4:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e2f8:	e019      	b.n	800e32e <check_usb_device+0x6e>
    }
    else if (Appli_state == APPLICATION_DISCONNECT) {
 800e2fa:	4b0f      	ldr	r3, [pc, #60]	@ (800e338 <check_usb_device+0x78>)
 800e2fc:	781b      	ldrb	r3, [r3, #0]
 800e2fe:	2b03      	cmp	r3, #3
 800e300:	d10c      	bne.n	800e31c <check_usb_device+0x5c>
        // Device has been disconnected
        printf("USB Device Disconnected\n");
 800e302:	4810      	ldr	r0, [pc, #64]	@ (800e344 <check_usb_device+0x84>)
 800e304:	f001 fb36 	bl	800f974 <puts>
        strncpy(board_name, "No Device", MAX_BOARD_NAME_LENGTH - 1);
 800e308:	2231      	movs	r2, #49	@ 0x31
 800e30a:	490f      	ldr	r1, [pc, #60]	@ (800e348 <check_usb_device+0x88>)
 800e30c:	480c      	ldr	r0, [pc, #48]	@ (800e340 <check_usb_device+0x80>)
 800e30e:	f001 fc4d 	bl	800fbac <strncpy>
        board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0';
 800e312:	4b0b      	ldr	r3, [pc, #44]	@ (800e340 <check_usb_device+0x80>)
 800e314:	2200      	movs	r2, #0
 800e316:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800e31a:	e008      	b.n	800e32e <check_usb_device+0x6e>
    }
    else {
        // No device detected, or in an idle state
        strncpy(board_name, "No Device", MAX_BOARD_NAME_LENGTH - 1);
 800e31c:	2231      	movs	r2, #49	@ 0x31
 800e31e:	490a      	ldr	r1, [pc, #40]	@ (800e348 <check_usb_device+0x88>)
 800e320:	4807      	ldr	r0, [pc, #28]	@ (800e340 <check_usb_device+0x80>)
 800e322:	f001 fc43 	bl	800fbac <strncpy>
        board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0';
 800e326:	4b06      	ldr	r3, [pc, #24]	@ (800e340 <check_usb_device+0x80>)
 800e328:	2200      	movs	r2, #0
 800e32a:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    }

    return board_name;
 800e32e:	4b04      	ldr	r3, [pc, #16]	@ (800e340 <check_usb_device+0x80>)
}
 800e330:	4618      	mov	r0, r3
 800e332:	3708      	adds	r7, #8
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	200050ec 	.word	0x200050ec
 800e33c:	20004e6a 	.word	0x20004e6a
 800e340:	200000e0 	.word	0x200000e0
 800e344:	080109f8 	.word	0x080109f8
 800e348:	08010a10 	.word	0x08010a10

0800e34c <classify_usb_device>:

const char* classify_usb_device(uint16_t vid, uint16_t pid, uint8_t classCode) {
 800e34c:	b580      	push	{r7, lr}
 800e34e:	b082      	sub	sp, #8
 800e350:	af00      	add	r7, sp, #0
 800e352:	4603      	mov	r3, r0
 800e354:	80fb      	strh	r3, [r7, #6]
 800e356:	460b      	mov	r3, r1
 800e358:	80bb      	strh	r3, [r7, #4]
 800e35a:	4613      	mov	r3, r2
 800e35c:	70fb      	strb	r3, [r7, #3]
    static char detected_board_name[MAX_BOARD_NAME_LENGTH];  // Static so it persists after the function exits

    if (vid == 0x2341 && (pid == 0x0043 || pid == 0x0010)) {
 800e35e:	88fb      	ldrh	r3, [r7, #6]
 800e360:	f242 3241 	movw	r2, #9025	@ 0x2341
 800e364:	4293      	cmp	r3, r2
 800e366:	d10b      	bne.n	800e380 <classify_usb_device+0x34>
 800e368:	88bb      	ldrh	r3, [r7, #4]
 800e36a:	2b43      	cmp	r3, #67	@ 0x43
 800e36c:	d002      	beq.n	800e374 <classify_usb_device+0x28>
 800e36e:	88bb      	ldrh	r3, [r7, #4]
 800e370:	2b10      	cmp	r3, #16
 800e372:	d105      	bne.n	800e380 <classify_usb_device+0x34>
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "Arduino UNO R3");
 800e374:	4a13      	ldr	r2, [pc, #76]	@ (800e3c4 <classify_usb_device+0x78>)
 800e376:	2132      	movs	r1, #50	@ 0x32
 800e378:	4813      	ldr	r0, [pc, #76]	@ (800e3c8 <classify_usb_device+0x7c>)
 800e37a:	f001 fb03 	bl	800f984 <sniprintf>
 800e37e:	e01b      	b.n	800e3b8 <classify_usb_device+0x6c>
    } else if (vid == 0x2341 && pid == 0x0001) {
 800e380:	88fb      	ldrh	r3, [r7, #6]
 800e382:	f242 3241 	movw	r2, #9025	@ 0x2341
 800e386:	4293      	cmp	r3, r2
 800e388:	d108      	bne.n	800e39c <classify_usb_device+0x50>
 800e38a:	88bb      	ldrh	r3, [r7, #4]
 800e38c:	2b01      	cmp	r3, #1
 800e38e:	d105      	bne.n	800e39c <classify_usb_device+0x50>
        // This is the Arduino in bootloader mode (different PID)
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "Arduino UNO R3 (Bootloader)");
 800e390:	4a0e      	ldr	r2, [pc, #56]	@ (800e3cc <classify_usb_device+0x80>)
 800e392:	2132      	movs	r1, #50	@ 0x32
 800e394:	480c      	ldr	r0, [pc, #48]	@ (800e3c8 <classify_usb_device+0x7c>)
 800e396:	f001 faf5 	bl	800f984 <sniprintf>
 800e39a:	e00d      	b.n	800e3b8 <classify_usb_device+0x6c>
    } else if (classCode == 0x02) {
 800e39c:	78fb      	ldrb	r3, [r7, #3]
 800e39e:	2b02      	cmp	r3, #2
 800e3a0:	d105      	bne.n	800e3ae <classify_usb_device+0x62>
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "USB Serial Device");
 800e3a2:	4a0b      	ldr	r2, [pc, #44]	@ (800e3d0 <classify_usb_device+0x84>)
 800e3a4:	2132      	movs	r1, #50	@ 0x32
 800e3a6:	4808      	ldr	r0, [pc, #32]	@ (800e3c8 <classify_usb_device+0x7c>)
 800e3a8:	f001 faec 	bl	800f984 <sniprintf>
 800e3ac:	e004      	b.n	800e3b8 <classify_usb_device+0x6c>
    } else {
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "Unknown Device");
 800e3ae:	4a09      	ldr	r2, [pc, #36]	@ (800e3d4 <classify_usb_device+0x88>)
 800e3b0:	2132      	movs	r1, #50	@ 0x32
 800e3b2:	4805      	ldr	r0, [pc, #20]	@ (800e3c8 <classify_usb_device+0x7c>)
 800e3b4:	f001 fae6 	bl	800f984 <sniprintf>
    }

    return detected_board_name;
 800e3b8:	4b03      	ldr	r3, [pc, #12]	@ (800e3c8 <classify_usb_device+0x7c>)
}
 800e3ba:	4618      	mov	r0, r3
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	08010a1c 	.word	0x08010a1c
 800e3c8:	20005110 	.word	0x20005110
 800e3cc:	08010a2c 	.word	0x08010a2c
 800e3d0:	08010a48 	.word	0x08010a48
 800e3d4:	08010a5c 	.word	0x08010a5c

0800e3d8 <trigger_arduino_bootloader>:

#define ARDUINO_RESET_PIN    GPIO_PIN_3
#define ARDUINO_RESET_PORT   GPIOB

USBH_StatusTypeDef trigger_arduino_bootloader(void)
{
 800e3d8:	b580      	push	{r7, lr}
 800e3da:	af00      	add	r7, sp, #0

    printf("Triggering Arduino bootloader...\r\n");
 800e3dc:	480d      	ldr	r0, [pc, #52]	@ (800e414 <trigger_arduino_bootloader+0x3c>)
 800e3de:	f001 fac9 	bl	800f974 <puts>

    HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_RESET);
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	2108      	movs	r1, #8
 800e3e6:	480c      	ldr	r0, [pc, #48]	@ (800e418 <trigger_arduino_bootloader+0x40>)
 800e3e8:	f7f3 fa08 	bl	80017fc <HAL_GPIO_WritePin>
    HAL_Delay(ARDUINO_RESET_PULSE_DURATION);
 800e3ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800e3f0:	f7f2 feb8 	bl	8001164 <HAL_Delay>
    HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_SET);
 800e3f4:	2201      	movs	r2, #1
 800e3f6:	2108      	movs	r1, #8
 800e3f8:	4807      	ldr	r0, [pc, #28]	@ (800e418 <trigger_arduino_bootloader+0x40>)
 800e3fa:	f7f3 f9ff 	bl	80017fc <HAL_GPIO_WritePin>
    HAL_Delay(300);
 800e3fe:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800e402:	f7f2 feaf 	bl	8001164 <HAL_Delay>

    arduino_prog_state = ARDUINO_PROG_RESET_SENT;
 800e406:	4b05      	ldr	r3, [pc, #20]	@ (800e41c <trigger_arduino_bootloader+0x44>)
 800e408:	2201      	movs	r2, #1
 800e40a:	701a      	strb	r2, [r3, #0]
    return USBH_OK;
 800e40c:	2300      	movs	r3, #0
}
 800e40e:	4618      	mov	r0, r3
 800e410:	bd80      	pop	{r7, pc}
 800e412:	bf00      	nop
 800e414:	08010a6c 	.word	0x08010a6c
 800e418:	40020400 	.word	0x40020400
 800e41c:	200050ed 	.word	0x200050ed

0800e420 <send_stk_command>:
            printf("URB Status: UNKNOWN (0x%02X)\r\n", status);
            break;
    }
}

USBH_StatusTypeDef send_stk_command(uint8_t cmd, uint8_t *params, uint8_t param_len) {
 800e420:	b580      	push	{r7, lr}
 800e422:	b090      	sub	sp, #64	@ 0x40
 800e424:	af00      	add	r7, sp, #0
 800e426:	4603      	mov	r3, r0
 800e428:	6039      	str	r1, [r7, #0]
 800e42a:	71fb      	strb	r3, [r7, #7]
 800e42c:	4613      	mov	r3, r2
 800e42e:	71bb      	strb	r3, [r7, #6]
    // Create a local buffer for transmission
    uint8_t tx_buffer[32]; // Temporary buffer, 32 bytes should be enough

    // Set communication parameters (115200 8N1)
    CDC_LineCodingTypeDef linecoding;
    linecoding.b.dwDTERate = 115200;
 800e430:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 800e434:	60fb      	str	r3, [r7, #12]
    linecoding.b.bCharFormat = 0;
 800e436:	2300      	movs	r3, #0
 800e438:	743b      	strb	r3, [r7, #16]
    linecoding.b.bParityType = 0;
 800e43a:	2300      	movs	r3, #0
 800e43c:	747b      	strb	r3, [r7, #17]
    linecoding.b.bDataBits = 8;
 800e43e:	2308      	movs	r3, #8
 800e440:	74bb      	strb	r3, [r7, #18]
    USBH_CDC_SetLineCoding(&hUsbHostFS, &linecoding);
 800e442:	f107 030c 	add.w	r3, r7, #12
 800e446:	4619      	mov	r1, r3
 800e448:	4839      	ldr	r0, [pc, #228]	@ (800e530 <send_stk_command+0x110>)
 800e44a:	f7fa fa7a 	bl	8008942 <USBH_CDC_SetLineCoding>
    uint32_t timeout = HAL_GetTick() + 1000; // 1 second timeout
 800e44e:	f7f2 fe7d 	bl	800114c <HAL_GetTick>
 800e452:	4603      	mov	r3, r0
 800e454:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800e458:	63fb      	str	r3, [r7, #60]	@ 0x3c
    USBH_HandleTypeDef *phost = &hUsbHostFS;
 800e45a:	4b35      	ldr	r3, [pc, #212]	@ (800e530 <send_stk_command+0x110>)
 800e45c:	63bb      	str	r3, [r7, #56]	@ 0x38
        CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e45e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e460:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800e464:	69db      	ldr	r3, [r3, #28]
 800e466:	637b      	str	r3, [r7, #52]	@ 0x34
        while (CDC_Handle->state != CDC_IDLE_STATE && CDC_Handle->state != CDC_TRANSFER_DATA) {
 800e468:	e00f      	b.n	800e48a <send_stk_command+0x6a>
            // Process USB events to make the state machine progress
            MX_USB_HOST_Process();
 800e46a:	f7ff fedf 	bl	800e22c <MX_USB_HOST_Process>


            // Check for timeout
            if (HAL_GetTick() > timeout) {
 800e46e:	f7f2 fe6d 	bl	800114c <HAL_GetTick>
 800e472:	4602      	mov	r2, r0
 800e474:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e476:	4293      	cmp	r3, r2
 800e478:	d204      	bcs.n	800e484 <send_stk_command+0x64>
                printf("Timeout waiting for CDC state to return to IDLE\r\n");
 800e47a:	482e      	ldr	r0, [pc, #184]	@ (800e534 <send_stk_command+0x114>)
 800e47c:	f001 fa7a 	bl	800f974 <puts>
                return USBH_FAIL;
 800e480:	2302      	movs	r3, #2
 800e482:	e051      	b.n	800e528 <send_stk_command+0x108>
            }

            HAL_Delay(10); // Small delay to not hog CPU
 800e484:	200a      	movs	r0, #10
 800e486:	f7f2 fe6d 	bl	8001164 <HAL_Delay>
        while (CDC_Handle->state != CDC_IDLE_STATE && CDC_Handle->state != CDC_TRANSFER_DATA) {
 800e48a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e48c:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e490:	2b00      	cmp	r3, #0
 800e492:	d004      	beq.n	800e49e <send_stk_command+0x7e>
 800e494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e496:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e49a:	2b03      	cmp	r3, #3
 800e49c:	d1e5      	bne.n	800e46a <send_stk_command+0x4a>
        }
    // Build command packet
    tx_buffer[0] = cmd;
 800e49e:	79fb      	ldrb	r3, [r7, #7]
 800e4a0:	753b      	strb	r3, [r7, #20]

    // Add parameters if any
    if (params != NULL && param_len > 0) {
 800e4a2:	683b      	ldr	r3, [r7, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d00a      	beq.n	800e4be <send_stk_command+0x9e>
 800e4a8:	79bb      	ldrb	r3, [r7, #6]
 800e4aa:	2b00      	cmp	r3, #0
 800e4ac:	d007      	beq.n	800e4be <send_stk_command+0x9e>
        memcpy(&tx_buffer[1], params, param_len);
 800e4ae:	79ba      	ldrb	r2, [r7, #6]
 800e4b0:	f107 0314 	add.w	r3, r7, #20
 800e4b4:	3301      	adds	r3, #1
 800e4b6:	6839      	ldr	r1, [r7, #0]
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	f001 fc0e 	bl	800fcda <memcpy>
    }

    // Add CRC/EOP
    tx_buffer[param_len + 1] = STK_CRC_EOP;
 800e4be:	79bb      	ldrb	r3, [r7, #6]
 800e4c0:	3301      	adds	r3, #1
 800e4c2:	3340      	adds	r3, #64	@ 0x40
 800e4c4:	443b      	add	r3, r7
 800e4c6:	2220      	movs	r2, #32
 800e4c8:	f803 2c2c 	strb.w	r2, [r3, #-44]

    printf("Sending STK command: 0x%02X 0x%02X\r\n",
 800e4cc:	79fb      	ldrb	r3, [r7, #7]
 800e4ce:	2220      	movs	r2, #32
 800e4d0:	4619      	mov	r1, r3
 800e4d2:	4819      	ldr	r0, [pc, #100]	@ (800e538 <send_stk_command+0x118>)
 800e4d4:	f001 f9e6 	bl	800f8a4 <iprintf>
           cmd, STK_CRC_EOP);

    // For simple cases like STK_GET_SYNC
    if (cmd == STK_GET_SYNC) {
 800e4d8:	79fb      	ldrb	r3, [r7, #7]
 800e4da:	2b30      	cmp	r3, #48	@ 0x30
 800e4dc:	d103      	bne.n	800e4e6 <send_stk_command+0xc6>
        tx_buffer[0] = STK_GET_SYNC;
 800e4de:	2330      	movs	r3, #48	@ 0x30
 800e4e0:	753b      	strb	r3, [r7, #20]
        tx_buffer[1] = STK_CRC_EOP;
 800e4e2:	2320      	movs	r3, #32
 800e4e4:	757b      	strb	r3, [r7, #21]
    }
    printCDCstatus();
 800e4e6:	f000 f82f 	bl	800e548 <printCDCstatus>

    if (USBH_CDC_Transmit(&hUsbHostFS, tx_buffer, param_len + 2) == USBH_OK) {
 800e4ea:	79bb      	ldrb	r3, [r7, #6]
 800e4ec:	3302      	adds	r3, #2
 800e4ee:	461a      	mov	r2, r3
 800e4f0:	f107 0314 	add.w	r3, r7, #20
 800e4f4:	4619      	mov	r1, r3
 800e4f6:	480e      	ldr	r0, [pc, #56]	@ (800e530 <send_stk_command+0x110>)
 800e4f8:	f7fa fa5e 	bl	80089b8 <USBH_CDC_Transmit>
 800e4fc:	4603      	mov	r3, r0
 800e4fe:	2b00      	cmp	r3, #0
 800e500:	d109      	bne.n	800e516 <send_stk_command+0xf6>
        printf("Command sent successfully\r\n");
 800e502:	480e      	ldr	r0, [pc, #56]	@ (800e53c <send_stk_command+0x11c>)
 800e504:	f001 fa36 	bl	800f974 <puts>
        printCDCstatus();
 800e508:	f000 f81e 	bl	800e548 <printCDCstatus>

        arduino_prog_state = ARDUINO_WAIT_RESPONSE;
 800e50c:	4b0c      	ldr	r3, [pc, #48]	@ (800e540 <send_stk_command+0x120>)
 800e50e:	2203      	movs	r2, #3
 800e510:	701a      	strb	r2, [r3, #0]
        return USBH_OK;
 800e512:	2300      	movs	r3, #0
 800e514:	e008      	b.n	800e528 <send_stk_command+0x108>
    } else {
        printCDCstatus();
 800e516:	f000 f817 	bl	800e548 <printCDCstatus>

        printf("Failed to send command\r\n");
 800e51a:	480a      	ldr	r0, [pc, #40]	@ (800e544 <send_stk_command+0x124>)
 800e51c:	f001 fa2a 	bl	800f974 <puts>
        arduino_prog_state = ARDUINO_PROG_ERROR;
 800e520:	4b07      	ldr	r3, [pc, #28]	@ (800e540 <send_stk_command+0x120>)
 800e522:	2207      	movs	r2, #7
 800e524:	701a      	strb	r2, [r3, #0]
        return USBH_FAIL;
 800e526:	2302      	movs	r3, #2
    }
}
 800e528:	4618      	mov	r0, r3
 800e52a:	3740      	adds	r7, #64	@ 0x40
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	20004b44 	.word	0x20004b44
 800e534:	08010cc8 	.word	0x08010cc8
 800e538:	08010cfc 	.word	0x08010cfc
 800e53c:	08010d24 	.word	0x08010d24
 800e540:	200050ed 	.word	0x200050ed
 800e544:	08010d40 	.word	0x08010d40

0800e548 <printCDCstatus>:

void printCDCstatus(){
 800e548:	b580      	push	{r7, lr}
 800e54a:	b082      	sub	sp, #8
 800e54c:	af00      	add	r7, sp, #0

    USBH_HandleTypeDef *phost = &hUsbHostFS;
 800e54e:	4b1d      	ldr	r3, [pc, #116]	@ (800e5c4 <printCDCstatus+0x7c>)
 800e550:	607b      	str	r3, [r7, #4]
    CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800e558:	69db      	ldr	r3, [r3, #28]
 800e55a:	603b      	str	r3, [r7, #0]
    if (CDC_Handle->state == CDC_IDLE_STATE) {
 800e55c:	683b      	ldr	r3, [r7, #0]
 800e55e:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e562:	2b00      	cmp	r3, #0
 800e564:	d103      	bne.n	800e56e <printCDCstatus+0x26>
        printf("CDC is IDLE\r\n");
 800e566:	4818      	ldr	r0, [pc, #96]	@ (800e5c8 <printCDCstatus+0x80>)
 800e568:	f001 fa04 	bl	800f974 <puts>
    } else if (CDC_Handle->state == CDC_ERROR_STATE) {
        printf("CDC is in ERROR STATE\r\n");
    } else {
        printf("Unknown CDC State\r\n");
    }
}
 800e56c:	e026      	b.n	800e5bc <printCDCstatus+0x74>
    } else if (CDC_Handle->state == CDC_SET_LINE_CODING_STATE) {
 800e56e:	683b      	ldr	r3, [r7, #0]
 800e570:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e574:	2b01      	cmp	r3, #1
 800e576:	d103      	bne.n	800e580 <printCDCstatus+0x38>
        printf("CDC is in SET LINE CODING STATE\r\n");
 800e578:	4814      	ldr	r0, [pc, #80]	@ (800e5cc <printCDCstatus+0x84>)
 800e57a:	f001 f9fb 	bl	800f974 <puts>
}
 800e57e:	e01d      	b.n	800e5bc <printCDCstatus+0x74>
    } else if (CDC_Handle->state == CDC_GET_LAST_LINE_CODING_STATE) {
 800e580:	683b      	ldr	r3, [r7, #0]
 800e582:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e586:	2b02      	cmp	r3, #2
 800e588:	d103      	bne.n	800e592 <printCDCstatus+0x4a>
        printf("CDC is in GET LAST LINE CODING STATE\r\n");
 800e58a:	4811      	ldr	r0, [pc, #68]	@ (800e5d0 <printCDCstatus+0x88>)
 800e58c:	f001 f9f2 	bl	800f974 <puts>
}
 800e590:	e014      	b.n	800e5bc <printCDCstatus+0x74>
    } else if (CDC_Handle->state == CDC_TRANSFER_DATA) {
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e598:	2b03      	cmp	r3, #3
 800e59a:	d103      	bne.n	800e5a4 <printCDCstatus+0x5c>
        printf("CDC is in TRANSFER DATA state\r\n");
 800e59c:	480d      	ldr	r0, [pc, #52]	@ (800e5d4 <printCDCstatus+0x8c>)
 800e59e:	f001 f9e9 	bl	800f974 <puts>
}
 800e5a2:	e00b      	b.n	800e5bc <printCDCstatus+0x74>
    } else if (CDC_Handle->state == CDC_ERROR_STATE) {
 800e5a4:	683b      	ldr	r3, [r7, #0]
 800e5a6:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800e5aa:	2b04      	cmp	r3, #4
 800e5ac:	d103      	bne.n	800e5b6 <printCDCstatus+0x6e>
        printf("CDC is in ERROR STATE\r\n");
 800e5ae:	480a      	ldr	r0, [pc, #40]	@ (800e5d8 <printCDCstatus+0x90>)
 800e5b0:	f001 f9e0 	bl	800f974 <puts>
}
 800e5b4:	e002      	b.n	800e5bc <printCDCstatus+0x74>
        printf("Unknown CDC State\r\n");
 800e5b6:	4809      	ldr	r0, [pc, #36]	@ (800e5dc <printCDCstatus+0x94>)
 800e5b8:	f001 f9dc 	bl	800f974 <puts>
}
 800e5bc:	bf00      	nop
 800e5be:	3708      	adds	r7, #8
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	bd80      	pop	{r7, pc}
 800e5c4:	20004b44 	.word	0x20004b44
 800e5c8:	08010d58 	.word	0x08010d58
 800e5cc:	08010d68 	.word	0x08010d68
 800e5d0:	08010d8c 	.word	0x08010d8c
 800e5d4:	08010db4 	.word	0x08010db4
 800e5d8:	08010dd4 	.word	0x08010dd4
 800e5dc:	08010dec 	.word	0x08010dec

0800e5e0 <receive_stk_response>:

void receive_stk_response(uint8_t *rx_buffer) {
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b086      	sub	sp, #24
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
    // Clear the buffer first
    memset(rx_buffer, 0, RX_BUFF_SIZE);
 800e5e8:	2240      	movs	r2, #64	@ 0x40
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	6878      	ldr	r0, [r7, #4]
 800e5ee:	f001 fad5 	bl	800fb9c <memset>

    // Start the receive operation
    USBH_StatusTypeDef status = USBH_CDC_Receive(&hUsbHostFS, rx_buffer, 2);
 800e5f2:	2202      	movs	r2, #2
 800e5f4:	6879      	ldr	r1, [r7, #4]
 800e5f6:	482f      	ldr	r0, [pc, #188]	@ (800e6b4 <receive_stk_response+0xd4>)
 800e5f8:	f7fa fa0c 	bl	8008a14 <USBH_CDC_Receive>
 800e5fc:	4603      	mov	r3, r0
 800e5fe:	75fb      	strb	r3, [r7, #23]

    if (status != USBH_OK) {
 800e600:	7dfb      	ldrb	r3, [r7, #23]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d008      	beq.n	800e618 <receive_stk_response+0x38>
        printf("Failed to start receive operation, status: %d\r\n", status);
 800e606:	7dfb      	ldrb	r3, [r7, #23]
 800e608:	4619      	mov	r1, r3
 800e60a:	482b      	ldr	r0, [pc, #172]	@ (800e6b8 <receive_stk_response+0xd8>)
 800e60c:	f001 f94a 	bl	800f8a4 <iprintf>
        arduino_prog_state = ARDUINO_PROG_ERROR;
 800e610:	4b2a      	ldr	r3, [pc, #168]	@ (800e6bc <receive_stk_response+0xdc>)
 800e612:	2207      	movs	r2, #7
 800e614:	701a      	strb	r2, [r3, #0]
        return;
 800e616:	e04a      	b.n	800e6ae <receive_stk_response+0xce>
    }

    // Set up a timeout - use 500ms like in the Python code
    uint32_t start_time = HAL_GetTick();
 800e618:	f7f2 fd98 	bl	800114c <HAL_GetTick>
 800e61c:	6138      	str	r0, [r7, #16]
    uint32_t timeout = 500; // 500ms timeout
 800e61e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800e622:	60fb      	str	r3, [r7, #12]

    // Poll until we actually get data
    while (1) {
        // Process USB host tasks while waiting
        MX_USB_HOST_Process();
 800e624:	f7ff fe02 	bl	800e22c <MX_USB_HOST_Process>

        // Check if we've received data using GetLastReceivedDataSize
        uint16_t received_size = USBH_CDC_GetLastReceivedDataSize(&hUsbHostFS);
 800e628:	4822      	ldr	r0, [pc, #136]	@ (800e6b4 <receive_stk_response+0xd4>)
 800e62a:	f7fa f9a7 	bl	800897c <USBH_CDC_GetLastReceivedDataSize>
 800e62e:	4603      	mov	r3, r0
 800e630:	817b      	strh	r3, [r7, #10]

        if (received_size > 0) {
 800e632:	897b      	ldrh	r3, [r7, #10]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d027      	beq.n	800e688 <receive_stk_response+0xa8>
            // Data received!
            printf("Response received: 0x%02X 0x%02X\r\n", rx_buffer[0], rx_buffer[1]);
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	781b      	ldrb	r3, [r3, #0]
 800e63c:	4619      	mov	r1, r3
 800e63e:	687b      	ldr	r3, [r7, #4]
 800e640:	3301      	adds	r3, #1
 800e642:	781b      	ldrb	r3, [r3, #0]
 800e644:	461a      	mov	r2, r3
 800e646:	481e      	ldr	r0, [pc, #120]	@ (800e6c0 <receive_stk_response+0xe0>)
 800e648:	f001 f92c 	bl	800f8a4 <iprintf>

            if (rx_buffer[0] == STK_INSYNC && rx_buffer[1] == STK_OK) {
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	781b      	ldrb	r3, [r3, #0]
 800e650:	2b14      	cmp	r3, #20
 800e652:	d10b      	bne.n	800e66c <receive_stk_response+0x8c>
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	3301      	adds	r3, #1
 800e658:	781b      	ldrb	r3, [r3, #0]
 800e65a:	2b10      	cmp	r3, #16
 800e65c:	d106      	bne.n	800e66c <receive_stk_response+0x8c>
                printf("SUCCESS! Bootloader responded correctly!\r\n");
 800e65e:	4819      	ldr	r0, [pc, #100]	@ (800e6c4 <receive_stk_response+0xe4>)
 800e660:	f001 f988 	bl	800f974 <puts>
                arduino_prog_state = ARDUINO_PROG_BOOTLOADER_READY;
 800e664:	4b15      	ldr	r3, [pc, #84]	@ (800e6bc <receive_stk_response+0xdc>)
 800e666:	2202      	movs	r2, #2
 800e668:	701a      	strb	r2, [r3, #0]
            } else {
                printf("Invalid response. Expected 0x14 0x10, got 0x%02X 0x%02X\r\n",
                      rx_buffer[0], rx_buffer[1]);
                arduino_prog_state = ARDUINO_PROG_ERROR;
            }
            break;
 800e66a:	e020      	b.n	800e6ae <receive_stk_response+0xce>
                      rx_buffer[0], rx_buffer[1]);
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	781b      	ldrb	r3, [r3, #0]
                printf("Invalid response. Expected 0x14 0x10, got 0x%02X 0x%02X\r\n",
 800e670:	4619      	mov	r1, r3
                      rx_buffer[0], rx_buffer[1]);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	3301      	adds	r3, #1
 800e676:	781b      	ldrb	r3, [r3, #0]
                printf("Invalid response. Expected 0x14 0x10, got 0x%02X 0x%02X\r\n",
 800e678:	461a      	mov	r2, r3
 800e67a:	4813      	ldr	r0, [pc, #76]	@ (800e6c8 <receive_stk_response+0xe8>)
 800e67c:	f001 f912 	bl	800f8a4 <iprintf>
                arduino_prog_state = ARDUINO_PROG_ERROR;
 800e680:	4b0e      	ldr	r3, [pc, #56]	@ (800e6bc <receive_stk_response+0xdc>)
 800e682:	2207      	movs	r2, #7
 800e684:	701a      	strb	r2, [r3, #0]
            break;
 800e686:	e012      	b.n	800e6ae <receive_stk_response+0xce>
        }

        // Check for timeout
        if (HAL_GetTick() - start_time > timeout) {
 800e688:	f7f2 fd60 	bl	800114c <HAL_GetTick>
 800e68c:	4602      	mov	r2, r0
 800e68e:	693b      	ldr	r3, [r7, #16]
 800e690:	1ad3      	subs	r3, r2, r3
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	429a      	cmp	r2, r3
 800e696:	d206      	bcs.n	800e6a6 <receive_stk_response+0xc6>
            printf("Timeout waiting for bootloader response\r\n");
 800e698:	480c      	ldr	r0, [pc, #48]	@ (800e6cc <receive_stk_response+0xec>)
 800e69a:	f001 f96b 	bl	800f974 <puts>
            arduino_prog_state = ARDUINO_PROG_ERROR;
 800e69e:	4b07      	ldr	r3, [pc, #28]	@ (800e6bc <receive_stk_response+0xdc>)
 800e6a0:	2207      	movs	r2, #7
 800e6a2:	701a      	strb	r2, [r3, #0]
            break;
 800e6a4:	e003      	b.n	800e6ae <receive_stk_response+0xce>
        }

        // Small delay to prevent hogging the CPU
        HAL_Delay(1);
 800e6a6:	2001      	movs	r0, #1
 800e6a8:	f7f2 fd5c 	bl	8001164 <HAL_Delay>
    while (1) {
 800e6ac:	e7ba      	b.n	800e624 <receive_stk_response+0x44>
    }
}
 800e6ae:	3718      	adds	r7, #24
 800e6b0:	46bd      	mov	sp, r7
 800e6b2:	bd80      	pop	{r7, pc}
 800e6b4:	20004b44 	.word	0x20004b44
 800e6b8:	08010e00 	.word	0x08010e00
 800e6bc:	200050ed 	.word	0x200050ed
 800e6c0:	08010e30 	.word	0x08010e30
 800e6c4:	08010af4 	.word	0x08010af4
 800e6c8:	08010e54 	.word	0x08010e54
 800e6cc:	08010b48 	.word	0x08010b48

0800e6d0 <calculate_checksum>:

uint8_t calculate_checksum(uint8_t *data, uint8_t length) {
 800e6d0:	b480      	push	{r7}
 800e6d2:	b085      	sub	sp, #20
 800e6d4:	af00      	add	r7, sp, #0
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	460b      	mov	r3, r1
 800e6da:	70fb      	strb	r3, [r7, #3]
    uint8_t sum = 0;
 800e6dc:	2300      	movs	r3, #0
 800e6de:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 800e6e0:	2300      	movs	r3, #0
 800e6e2:	73bb      	strb	r3, [r7, #14]
 800e6e4:	e009      	b.n	800e6fa <calculate_checksum+0x2a>
        sum += data[i];
 800e6e6:	7bbb      	ldrb	r3, [r7, #14]
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	4413      	add	r3, r2
 800e6ec:	781a      	ldrb	r2, [r3, #0]
 800e6ee:	7bfb      	ldrb	r3, [r7, #15]
 800e6f0:	4413      	add	r3, r2
 800e6f2:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < length; i++) {
 800e6f4:	7bbb      	ldrb	r3, [r7, #14]
 800e6f6:	3301      	adds	r3, #1
 800e6f8:	73bb      	strb	r3, [r7, #14]
 800e6fa:	7bba      	ldrb	r2, [r7, #14]
 800e6fc:	78fb      	ldrb	r3, [r7, #3]
 800e6fe:	429a      	cmp	r2, r3
 800e700:	d3f1      	bcc.n	800e6e6 <calculate_checksum+0x16>
    }
    return (uint8_t)(~sum + 1);  // Two's complement
 800e702:	7bfb      	ldrb	r3, [r7, #15]
 800e704:	425b      	negs	r3, r3
 800e706:	b2db      	uxtb	r3, r3
}
 800e708:	4618      	mov	r0, r3
 800e70a:	3714      	adds	r7, #20
 800e70c:	46bd      	mov	sp, r7
 800e70e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e712:	4770      	bx	lr

0800e714 <program_page>:

// Function to send one page (8 lines) in Intel HEX format
USBH_StatusTypeDef program_page(uint16_t address, uint8_t *data, uint16_t length) {
 800e714:	b580      	push	{r7, lr}
 800e716:	b08a      	sub	sp, #40	@ 0x28
 800e718:	af00      	add	r7, sp, #0
 800e71a:	4603      	mov	r3, r0
 800e71c:	6039      	str	r1, [r7, #0]
 800e71e:	80fb      	strh	r3, [r7, #6]
 800e720:	4613      	mov	r3, r2
 800e722:	80bb      	strh	r3, [r7, #4]
    USBH_StatusTypeDef status;
    uint8_t hex_buffer[HEX_LINE_SIZE]; // Buffer for one HEX line (23 bytes)

    // Ensure the data length is at least PAGE_SIZE
    if (length < PAGE_SIZE) {
 800e724:	88bb      	ldrh	r3, [r7, #4]
 800e726:	2b7f      	cmp	r3, #127	@ 0x7f
 800e728:	d804      	bhi.n	800e734 <program_page+0x20>
        printf("Error: Data length is less than PAGE_SIZE\r\n");
 800e72a:	482e      	ldr	r0, [pc, #184]	@ (800e7e4 <program_page+0xd0>)
 800e72c:	f001 f922 	bl	800f974 <puts>
        return USBH_FAIL;
 800e730:	2302      	movs	r3, #2
 800e732:	e053      	b.n	800e7dc <program_page+0xc8>
    }

    // Generate and send HEX format lines
    for (int i = 0; i < LINES_PER_PAGE; i++) {
 800e734:	2300      	movs	r3, #0
 800e736:	623b      	str	r3, [r7, #32]
 800e738:	e04c      	b.n	800e7d4 <program_page+0xc0>
        // Clear the buffer
        memset(hex_buffer, 0, HEX_LINE_SIZE);
 800e73a:	f107 0308 	add.w	r3, r7, #8
 800e73e:	2217      	movs	r2, #23
 800e740:	2100      	movs	r1, #0
 800e742:	4618      	mov	r0, r3
 800e744:	f001 fa2a 	bl	800fb9c <memset>

        // Start of HEX line
        hex_buffer[0] = ':';  // Start code
 800e748:	233a      	movs	r3, #58	@ 0x3a
 800e74a:	723b      	strb	r3, [r7, #8]
        hex_buffer[1] = DATA_BYTES_PER_LINE; // Byte count (16 bytes per line)
 800e74c:	2310      	movs	r3, #16
 800e74e:	727b      	strb	r3, [r7, #9]
        hex_buffer[2] = (address >> 8) & 0xFF; // Address high byte
 800e750:	88fb      	ldrh	r3, [r7, #6]
 800e752:	0a1b      	lsrs	r3, r3, #8
 800e754:	b29b      	uxth	r3, r3
 800e756:	b2db      	uxtb	r3, r3
 800e758:	72bb      	strb	r3, [r7, #10]
        hex_buffer[3] = address & 0xFF;  // Address low byte
 800e75a:	88fb      	ldrh	r3, [r7, #6]
 800e75c:	b2db      	uxtb	r3, r3
 800e75e:	72fb      	strb	r3, [r7, #11]
        hex_buffer[4] = 0x00; // Record type (00 = data)
 800e760:	2300      	movs	r3, #0
 800e762:	733b      	strb	r3, [r7, #12]

        // Copy 16 bytes of actual data
        memcpy(&hex_buffer[5], &data[i * DATA_BYTES_PER_LINE], DATA_BYTES_PER_LINE);
 800e764:	6a3b      	ldr	r3, [r7, #32]
 800e766:	011b      	lsls	r3, r3, #4
 800e768:	461a      	mov	r2, r3
 800e76a:	683b      	ldr	r3, [r7, #0]
 800e76c:	1899      	adds	r1, r3, r2
 800e76e:	f107 0308 	add.w	r3, r7, #8
 800e772:	3305      	adds	r3, #5
 800e774:	2210      	movs	r2, #16
 800e776:	4618      	mov	r0, r3
 800e778:	f001 faaf 	bl	800fcda <memcpy>

        // Calculate checksum
        hex_buffer[21] = calculate_checksum(&hex_buffer[1], 20);
 800e77c:	f107 0308 	add.w	r3, r7, #8
 800e780:	3301      	adds	r3, #1
 800e782:	2114      	movs	r1, #20
 800e784:	4618      	mov	r0, r3
 800e786:	f7ff ffa3 	bl	800e6d0 <calculate_checksum>
 800e78a:	4603      	mov	r3, r0
 800e78c:	777b      	strb	r3, [r7, #29]

        // Add line terminators
        hex_buffer[22] = '\r';
 800e78e:	230d      	movs	r3, #13
 800e790:	77bb      	strb	r3, [r7, #30]
        hex_buffer[23] = '\n';
 800e792:	230a      	movs	r3, #10
 800e794:	77fb      	strb	r3, [r7, #31]

        // Send the HEX line over USB
        status =  USBH_CDC_Transmit(&hUsbHostFS, hex_buffer, HEX_LINE_SIZE);
 800e796:	f107 0308 	add.w	r3, r7, #8
 800e79a:	2217      	movs	r2, #23
 800e79c:	4619      	mov	r1, r3
 800e79e:	4812      	ldr	r0, [pc, #72]	@ (800e7e8 <program_page+0xd4>)
 800e7a0:	f7fa f90a 	bl	80089b8 <USBH_CDC_Transmit>
 800e7a4:	4603      	mov	r3, r0
 800e7a6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
       while(status != USBH_OK){
 800e7aa:	e009      	b.n	800e7c0 <program_page+0xac>
    	   status =  USBH_CDC_Transmit(&hUsbHostFS, hex_buffer, HEX_LINE_SIZE);
 800e7ac:	f107 0308 	add.w	r3, r7, #8
 800e7b0:	2217      	movs	r2, #23
 800e7b2:	4619      	mov	r1, r3
 800e7b4:	480c      	ldr	r0, [pc, #48]	@ (800e7e8 <program_page+0xd4>)
 800e7b6:	f7fa f8ff 	bl	80089b8 <USBH_CDC_Transmit>
 800e7ba:	4603      	mov	r3, r0
 800e7bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
       while(status != USBH_OK){
 800e7c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d1f1      	bne.n	800e7ac <program_page+0x98>
       }
        // Increment address by 16 bytes for next line
        address += DATA_BYTES_PER_LINE;
 800e7c8:	88fb      	ldrh	r3, [r7, #6]
 800e7ca:	3310      	adds	r3, #16
 800e7cc:	80fb      	strh	r3, [r7, #6]
    for (int i = 0; i < LINES_PER_PAGE; i++) {
 800e7ce:	6a3b      	ldr	r3, [r7, #32]
 800e7d0:	3301      	adds	r3, #1
 800e7d2:	623b      	str	r3, [r7, #32]
 800e7d4:	6a3b      	ldr	r3, [r7, #32]
 800e7d6:	2b07      	cmp	r3, #7
 800e7d8:	ddaf      	ble.n	800e73a <program_page+0x26>
    }

    return USBH_OK;
 800e7da:	2300      	movs	r3, #0
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3728      	adds	r7, #40	@ 0x28
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	bd80      	pop	{r7, pc}
 800e7e4:	08010e90 	.word	0x08010e90
 800e7e8:	20004b44 	.word	0x20004b44

0800e7ec <hex_to_byte>:
static uint8_t hex_to_byte(const uint8_t *hex)
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b085      	sub	sp, #20
 800e7f0:	af00      	add	r7, sp, #0
 800e7f2:	6078      	str	r0, [r7, #4]
	uint8_t byte = 0;
 800e7f4:	2300      	movs	r3, #0
 800e7f6:	73fb      	strb	r3, [r7, #15]

	for (int i = 0; i < 2; i++) {
 800e7f8:	2300      	movs	r3, #0
 800e7fa:	60bb      	str	r3, [r7, #8]
 800e7fc:	e04f      	b.n	800e89e <hex_to_byte+0xb2>
		byte <<= 4;
 800e7fe:	7bfb      	ldrb	r3, [r7, #15]
 800e800:	011b      	lsls	r3, r3, #4
 800e802:	73fb      	strb	r3, [r7, #15]
		if (hex[i] >= '0' && hex[i] <= '9') {
 800e804:	68bb      	ldr	r3, [r7, #8]
 800e806:	687a      	ldr	r2, [r7, #4]
 800e808:	4413      	add	r3, r2
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	2b2f      	cmp	r3, #47	@ 0x2f
 800e80e:	d912      	bls.n	800e836 <hex_to_byte+0x4a>
 800e810:	68bb      	ldr	r3, [r7, #8]
 800e812:	687a      	ldr	r2, [r7, #4]
 800e814:	4413      	add	r3, r2
 800e816:	781b      	ldrb	r3, [r3, #0]
 800e818:	2b39      	cmp	r3, #57	@ 0x39
 800e81a:	d80c      	bhi.n	800e836 <hex_to_byte+0x4a>
			byte |= (hex[i] - '0');
 800e81c:	68bb      	ldr	r3, [r7, #8]
 800e81e:	687a      	ldr	r2, [r7, #4]
 800e820:	4413      	add	r3, r2
 800e822:	781b      	ldrb	r3, [r3, #0]
 800e824:	3b30      	subs	r3, #48	@ 0x30
 800e826:	b2db      	uxtb	r3, r3
 800e828:	b25a      	sxtb	r2, r3
 800e82a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e82e:	4313      	orrs	r3, r2
 800e830:	b25b      	sxtb	r3, r3
 800e832:	73fb      	strb	r3, [r7, #15]
 800e834:	e030      	b.n	800e898 <hex_to_byte+0xac>
		}
		else if (hex[i] >= 'A' && hex[i] <= 'F') {
 800e836:	68bb      	ldr	r3, [r7, #8]
 800e838:	687a      	ldr	r2, [r7, #4]
 800e83a:	4413      	add	r3, r2
 800e83c:	781b      	ldrb	r3, [r3, #0]
 800e83e:	2b40      	cmp	r3, #64	@ 0x40
 800e840:	d912      	bls.n	800e868 <hex_to_byte+0x7c>
 800e842:	68bb      	ldr	r3, [r7, #8]
 800e844:	687a      	ldr	r2, [r7, #4]
 800e846:	4413      	add	r3, r2
 800e848:	781b      	ldrb	r3, [r3, #0]
 800e84a:	2b46      	cmp	r3, #70	@ 0x46
 800e84c:	d80c      	bhi.n	800e868 <hex_to_byte+0x7c>
			byte |= (hex[i] - 'A' + 10);
 800e84e:	68bb      	ldr	r3, [r7, #8]
 800e850:	687a      	ldr	r2, [r7, #4]
 800e852:	4413      	add	r3, r2
 800e854:	781b      	ldrb	r3, [r3, #0]
 800e856:	3b37      	subs	r3, #55	@ 0x37
 800e858:	b2db      	uxtb	r3, r3
 800e85a:	b25a      	sxtb	r2, r3
 800e85c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e860:	4313      	orrs	r3, r2
 800e862:	b25b      	sxtb	r3, r3
 800e864:	73fb      	strb	r3, [r7, #15]
 800e866:	e017      	b.n	800e898 <hex_to_byte+0xac>
		}
		else if (hex[i] >= 'a' && hex[i] <= 'f') {
 800e868:	68bb      	ldr	r3, [r7, #8]
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	4413      	add	r3, r2
 800e86e:	781b      	ldrb	r3, [r3, #0]
 800e870:	2b60      	cmp	r3, #96	@ 0x60
 800e872:	d911      	bls.n	800e898 <hex_to_byte+0xac>
 800e874:	68bb      	ldr	r3, [r7, #8]
 800e876:	687a      	ldr	r2, [r7, #4]
 800e878:	4413      	add	r3, r2
 800e87a:	781b      	ldrb	r3, [r3, #0]
 800e87c:	2b66      	cmp	r3, #102	@ 0x66
 800e87e:	d80b      	bhi.n	800e898 <hex_to_byte+0xac>
			byte |= (hex[i] - 'a' + 10);
 800e880:	68bb      	ldr	r3, [r7, #8]
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	4413      	add	r3, r2
 800e886:	781b      	ldrb	r3, [r3, #0]
 800e888:	3b57      	subs	r3, #87	@ 0x57
 800e88a:	b2db      	uxtb	r3, r3
 800e88c:	b25a      	sxtb	r2, r3
 800e88e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800e892:	4313      	orrs	r3, r2
 800e894:	b25b      	sxtb	r3, r3
 800e896:	73fb      	strb	r3, [r7, #15]
	for (int i = 0; i < 2; i++) {
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	3301      	adds	r3, #1
 800e89c:	60bb      	str	r3, [r7, #8]
 800e89e:	68bb      	ldr	r3, [r7, #8]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	ddac      	ble.n	800e7fe <hex_to_byte+0x12>
		}
	}

	return byte;
 800e8a4:	7bfb      	ldrb	r3, [r7, #15]
}
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	3714      	adds	r7, #20
 800e8aa:	46bd      	mov	sp, r7
 800e8ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8b0:	4770      	bx	lr

0800e8b2 <parse_and_program_hex_line>:
    	int parse_and_program_hex_line(const char *hex_line, uint32_t *base_address)
    	{
 800e8b2:	b590      	push	{r4, r7, lr}
 800e8b4:	b0a9      	sub	sp, #164	@ 0xa4
 800e8b6:	af00      	add	r7, sp, #0
 800e8b8:	6078      	str	r0, [r7, #4]
 800e8ba:	6039      	str	r1, [r7, #0]
    	    uint8_t length, type;
    	    uint16_t address;
    	    uint8_t data[PROG_PAGE_SIZE];
    	    uint8_t checksum, calculated_checksum = 0;
 800e8bc:	2300      	movs	r3, #0
 800e8be:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	    int match =0;
 800e8c2:	2300      	movs	r3, #0
 800e8c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

      	    // Parse length
    	    length = hex_to_byte((const uint8_t *)hex_line);
 800e8c8:	6878      	ldr	r0, [r7, #4]
 800e8ca:	f7ff ff8f 	bl	800e7ec <hex_to_byte>
 800e8ce:	4603      	mov	r3, r0
 800e8d0:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    	    calculated_checksum += length;
 800e8d4:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 800e8d8:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e8dc:	4413      	add	r3, r2
 800e8de:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	    hex_line += 2;
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	3302      	adds	r3, #2
 800e8e6:	607b      	str	r3, [r7, #4]

    	    // Parse address
    	    address = (uint16_t)hex_to_byte((const uint8_t *)hex_line) << 8;
 800e8e8:	6878      	ldr	r0, [r7, #4]
 800e8ea:	f7ff ff7f 	bl	800e7ec <hex_to_byte>
 800e8ee:	4603      	mov	r3, r0
 800e8f0:	021b      	lsls	r3, r3, #8
 800e8f2:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    	    calculated_checksum += hex_to_byte((const uint8_t *)hex_line);
 800e8f6:	6878      	ldr	r0, [r7, #4]
 800e8f8:	f7ff ff78 	bl	800e7ec <hex_to_byte>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	461a      	mov	r2, r3
 800e900:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e904:	4413      	add	r3, r2
 800e906:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	    hex_line += 2;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	3302      	adds	r3, #2
 800e90e:	607b      	str	r3, [r7, #4]

    	    address |= hex_to_byte((const uint8_t *)hex_line);
 800e910:	6878      	ldr	r0, [r7, #4]
 800e912:	f7ff ff6b 	bl	800e7ec <hex_to_byte>
 800e916:	4603      	mov	r3, r0
 800e918:	461a      	mov	r2, r3
 800e91a:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800e91e:	4313      	orrs	r3, r2
 800e920:	f8a7 3094 	strh.w	r3, [r7, #148]	@ 0x94
    	    calculated_checksum += hex_to_byte((const uint8_t *)hex_line);
 800e924:	6878      	ldr	r0, [r7, #4]
 800e926:	f7ff ff61 	bl	800e7ec <hex_to_byte>
 800e92a:	4603      	mov	r3, r0
 800e92c:	461a      	mov	r2, r3
 800e92e:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e932:	4413      	add	r3, r2
 800e934:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	    hex_line += 2;
 800e938:	687b      	ldr	r3, [r7, #4]
 800e93a:	3302      	adds	r3, #2
 800e93c:	607b      	str	r3, [r7, #4]

    	    // Parse record type
    	    type = hex_to_byte((const uint8_t *)hex_line);
 800e93e:	6878      	ldr	r0, [r7, #4]
 800e940:	f7ff ff54 	bl	800e7ec <hex_to_byte>
 800e944:	4603      	mov	r3, r0
 800e946:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
    	    calculated_checksum += type;
 800e94a:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 800e94e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e952:	4413      	add	r3, r2
 800e954:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	    hex_line += 2;
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	3302      	adds	r3, #2
 800e95c:	607b      	str	r3, [r7, #4]

    	    // Handle different record types
    	    switch (type) {
 800e95e:	f897 3093 	ldrb.w	r3, [r7, #147]	@ 0x93
 800e962:	2b00      	cmp	r3, #0
 800e964:	d002      	beq.n	800e96c <parse_and_program_hex_line+0xba>
 800e966:	2b01      	cmp	r3, #1
 800e968:	d078      	beq.n	800ea5c <parse_and_program_hex_line+0x1aa>
 800e96a:	e05a      	b.n	800ea22 <parse_and_program_hex_line+0x170>
    	        case HEX_RECORD_TYPE_DATA:
    	            // Data record
    	            for (uint8_t i = 0; i < length; i++) {
 800e96c:	2300      	movs	r3, #0
 800e96e:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800e972:	e01e      	b.n	800e9b2 <parse_and_program_hex_line+0x100>
    	                data[i] = hex_to_byte((const uint8_t *)hex_line);
 800e974:	f897 409e 	ldrb.w	r4, [r7, #158]	@ 0x9e
 800e978:	6878      	ldr	r0, [r7, #4]
 800e97a:	f7ff ff37 	bl	800e7ec <hex_to_byte>
 800e97e:	4603      	mov	r3, r0
 800e980:	461a      	mov	r2, r3
 800e982:	f104 03a0 	add.w	r3, r4, #160	@ 0xa0
 800e986:	443b      	add	r3, r7
 800e988:	f803 2c94 	strb.w	r2, [r3, #-148]
    	                calculated_checksum += data[i];
 800e98c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800e990:	33a0      	adds	r3, #160	@ 0xa0
 800e992:	443b      	add	r3, r7
 800e994:	f813 2c94 	ldrb.w	r2, [r3, #-148]
 800e998:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e99c:	4413      	add	r3, r2
 800e99e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	                hex_line += 2;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	3302      	adds	r3, #2
 800e9a6:	607b      	str	r3, [r7, #4]
    	            for (uint8_t i = 0; i < length; i++) {
 800e9a8:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 800e9ac:	3301      	adds	r3, #1
 800e9ae:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
 800e9b2:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 800e9b6:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800e9ba:	429a      	cmp	r2, r3
 800e9bc:	d3da      	bcc.n	800e974 <parse_and_program_hex_line+0xc2>
    	            }

    	            // Parse checksum
    	            checksum = hex_to_byte((const uint8_t *)hex_line);
 800e9be:	6878      	ldr	r0, [r7, #4]
 800e9c0:	f7ff ff14 	bl	800e7ec <hex_to_byte>
 800e9c4:	4603      	mov	r3, r0
 800e9c6:	f887 3092 	strb.w	r3, [r7, #146]	@ 0x92
    	            calculated_checksum = ~calculated_checksum + 1; // Two's complement
 800e9ca:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e9ce:	425b      	negs	r3, r3
 800e9d0:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

    	            if (checksum == calculated_checksum) {
 800e9d4:	f897 2092 	ldrb.w	r2, [r7, #146]	@ 0x92
 800e9d8:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800e9dc:	429a      	cmp	r2, r3
 800e9de:	d107      	bne.n	800e9f0 <parse_and_program_hex_line+0x13e>
    	               // printf("Checksum error in HEX line\r\n");
                        match = 1;
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    	            	match = -1;
    	            	break;
    	            }

    	            // Program the data if checksums match
    	            if(match==1){
 800e9e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800e9ea:	2b01      	cmp	r3, #1
 800e9ec:	d136      	bne.n	800ea5c <parse_and_program_hex_line+0x1aa>
 800e9ee:	e004      	b.n	800e9fa <parse_and_program_hex_line+0x148>
    	            	match = -1;
 800e9f0:	f04f 33ff 	mov.w	r3, #4294967295
 800e9f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    	            	break;
 800e9f8:	e031      	b.n	800ea5e <parse_and_program_hex_line+0x1ac>
						uint32_t full_address = *base_address | address;
 800e9fa:	683b      	ldr	r3, [r7, #0]
 800e9fc:	681a      	ldr	r2, [r3, #0]
 800e9fe:	f8b7 3094 	ldrh.w	r3, [r7, #148]	@ 0x94
 800ea02:	4313      	orrs	r3, r2
 800ea04:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
						program_page((uint16_t)(full_address >> 1), data, length); // Divide by 2 for word addressing
 800ea08:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800ea0c:	085b      	lsrs	r3, r3, #1
 800ea0e:	b29b      	uxth	r3, r3
 800ea10:	f897 2097 	ldrb.w	r2, [r7, #151]	@ 0x97
 800ea14:	b292      	uxth	r2, r2
 800ea16:	f107 010c 	add.w	r1, r7, #12
 800ea1a:	4618      	mov	r0, r3
 800ea1c:	f7ff fe7a 	bl	800e714 <program_page>
						break;
 800ea20:	e01d      	b.n	800ea5e <parse_and_program_hex_line+0x1ac>
    	            // End of file record
    	            break;

    	        default:
    	            // Skip other record types
    	            for (uint8_t i = 0; i < length; i++) {
 800ea22:	2300      	movs	r3, #0
 800ea24:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 800ea28:	e011      	b.n	800ea4e <parse_and_program_hex_line+0x19c>
    	                calculated_checksum += hex_to_byte((const uint8_t *)hex_line);
 800ea2a:	6878      	ldr	r0, [r7, #4]
 800ea2c:	f7ff fede 	bl	800e7ec <hex_to_byte>
 800ea30:	4603      	mov	r3, r0
 800ea32:	461a      	mov	r2, r3
 800ea34:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 800ea38:	4413      	add	r3, r2
 800ea3a:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
    	                hex_line += 2;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	3302      	adds	r3, #2
 800ea42:	607b      	str	r3, [r7, #4]
    	            for (uint8_t i = 0; i < length; i++) {
 800ea44:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 800ea48:	3301      	adds	r3, #1
 800ea4a:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
 800ea4e:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 800ea52:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800ea56:	429a      	cmp	r2, r3
 800ea58:	d3e7      	bcc.n	800ea2a <parse_and_program_hex_line+0x178>
    	            }
    	            break;
 800ea5a:	e000      	b.n	800ea5e <parse_and_program_hex_line+0x1ac>
    	            break;
 800ea5c:	bf00      	nop
    	    }
    	    return 0;
 800ea5e:	2300      	movs	r3, #0
    	}
 800ea60:	4618      	mov	r0, r3
 800ea62:	37a4      	adds	r7, #164	@ 0xa4
 800ea64:	46bd      	mov	sp, r7
 800ea66:	bd90      	pop	{r4, r7, pc}

0800ea68 <program_hex_file>:

USBH_StatusTypeDef program_hex_file(const char *hex_data, uint32_t size)
{
 800ea68:	b580      	push	{r7, lr}
 800ea6a:	b0c8      	sub	sp, #288	@ 0x120
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ea72:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800ea76:	6018      	str	r0, [r3, #0]
 800ea78:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ea7c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800ea80:	6019      	str	r1, [r3, #0]
	USBH_StatusTypeDef status;
	char line_buffer[256];
	uint32_t base_address = 0;
 800ea82:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800ea86:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	601a      	str	r2, [r3, #0]
	int line_length = 0;
 800ea8e:	2300      	movs	r3, #0
 800ea90:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
	int i = 0;
 800ea94:	2300      	movs	r3, #0
 800ea96:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
	int result;

	while (i < size) {
 800ea9a:	e085      	b.n	800eba8 <program_hex_file+0x140>

		if(hex_data[i] == ':'){
 800ea9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eaa0:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800eaa4:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800eaa8:	6812      	ldr	r2, [r2, #0]
 800eaaa:	4413      	add	r3, r2
 800eaac:	781b      	ldrb	r3, [r3, #0]
 800eaae:	2b3a      	cmp	r3, #58	@ 0x3a
 800eab0:	d17a      	bne.n	800eba8 <program_hex_file+0x140>
			//start of line
			i=i+1;
 800eab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eab6:	3301      	adds	r3, #1
 800eab8:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		    line_length = 0;
 800eabc:	2300      	movs	r3, #0
 800eabe:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		    int j=0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c

		    while (hex_data[j]!='\r' && hex_data[j]!='\n'){
 800eac8:	e020      	b.n	800eb0c <program_hex_file+0xa4>
			  line_buffer[j] = hex_data[j];
 800eaca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eace:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800ead2:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800ead6:	6812      	ldr	r2, [r2, #0]
 800ead8:	4413      	add	r3, r2
 800eada:	7819      	ldrb	r1, [r3, #0]
 800eadc:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800eae0:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800eae4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eae8:	4413      	add	r3, r2
 800eaea:	460a      	mov	r2, r1
 800eaec:	701a      	strb	r2, [r3, #0]
			  line_length++;
 800eaee:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800eaf2:	3301      	adds	r3, #1
 800eaf4:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
			  j++;
 800eaf8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eafc:	3301      	adds	r3, #1
 800eafe:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
			  i++;
 800eb02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb06:	3301      	adds	r3, #1
 800eb08:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
		    while (hex_data[j]!='\r' && hex_data[j]!='\n'){
 800eb0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb10:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800eb14:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800eb18:	6812      	ldr	r2, [r2, #0]
 800eb1a:	4413      	add	r3, r2
 800eb1c:	781b      	ldrb	r3, [r3, #0]
 800eb1e:	2b0d      	cmp	r3, #13
 800eb20:	d00a      	beq.n	800eb38 <program_hex_file+0xd0>
 800eb22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb26:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800eb2a:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 800eb2e:	6812      	ldr	r2, [r2, #0]
 800eb30:	4413      	add	r3, r2
 800eb32:	781b      	ldrb	r3, [r3, #0]
 800eb34:	2b0a      	cmp	r3, #10
 800eb36:	d1c8      	bne.n	800eaca <program_hex_file+0x62>
		    }
		    line_buffer[j] = '\0';
 800eb38:	f507 7390 	add.w	r3, r7, #288	@ 0x120
 800eb3c:	f5a3 728a 	sub.w	r2, r3, #276	@ 0x114
 800eb40:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800eb44:	4413      	add	r3, r2
 800eb46:	2200      	movs	r2, #0
 800eb48:	701a      	strb	r2, [r3, #0]
		    line_length++;
 800eb4a:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800eb4e:	3301      	adds	r3, #1
 800eb50:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		// Parse and program the line
		result = parse_and_program_hex_line(line_buffer, &base_address);
 800eb54:	f107 0208 	add.w	r2, r7, #8
 800eb58:	f107 030c 	add.w	r3, r7, #12
 800eb5c:	4611      	mov	r1, r2
 800eb5e:	4618      	mov	r0, r3
 800eb60:	f7ff fea7 	bl	800e8b2 <parse_and_program_hex_line>
 800eb64:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110

		while (result != 0) {
 800eb68:	e009      	b.n	800eb7e <program_hex_file+0x116>
			result = parse_and_program_hex_line(line_buffer, &base_address);
 800eb6a:	f107 0208 	add.w	r2, r7, #8
 800eb6e:	f107 030c 	add.w	r3, r7, #12
 800eb72:	4611      	mov	r1, r2
 800eb74:	4618      	mov	r0, r3
 800eb76:	f7ff fe9c 	bl	800e8b2 <parse_and_program_hex_line>
 800eb7a:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
		while (result != 0) {
 800eb7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800eb82:	2b00      	cmp	r3, #0
 800eb84:	d1f1      	bne.n	800eb6a <program_hex_file+0x102>
		}

		line_length = 0;
 800eb86:	2300      	movs	r3, #0
 800eb88:	f8c7 3118 	str.w	r3, [r7, #280]	@ 0x118
		i++;
 800eb8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb90:	3301      	adds	r3, #1
 800eb92:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114


		if (i >= size) {
 800eb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800eb9a:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800eb9e:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800eba2:	6812      	ldr	r2, [r2, #0]
 800eba4:	429a      	cmp	r2, r3
 800eba6:	d90a      	bls.n	800ebbe <program_hex_file+0x156>
	while (i < size) {
 800eba8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800ebac:	f507 7290 	add.w	r2, r7, #288	@ 0x120
 800ebb0:	f5a2 7290 	sub.w	r2, r2, #288	@ 0x120
 800ebb4:	6812      	ldr	r2, [r2, #0]
 800ebb6:	429a      	cmp	r2, r3
 800ebb8:	f63f af70 	bhi.w	800ea9c <program_hex_file+0x34>
 800ebbc:	e000      	b.n	800ebc0 <program_hex_file+0x158>
			break; // End of file
 800ebbe:	bf00      	nop

	}
	}

	// Exit programming mode
	status = send_stk_command(STK_LEAVE_PROGMODE, NULL, 0);
 800ebc0:	2200      	movs	r2, #0
 800ebc2:	2100      	movs	r1, #0
 800ebc4:	2051      	movs	r0, #81	@ 0x51
 800ebc6:	f7ff fc2b 	bl	800e420 <send_stk_command>
 800ebca:	4603      	mov	r3, r0
 800ebcc:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f

	while(status != USBH_OK){
 800ebd0:	e007      	b.n	800ebe2 <program_hex_file+0x17a>
     status = send_stk_command(STK_LEAVE_PROGMODE, NULL, 0);
 800ebd2:	2200      	movs	r2, #0
 800ebd4:	2100      	movs	r1, #0
 800ebd6:	2051      	movs	r0, #81	@ 0x51
 800ebd8:	f7ff fc22 	bl	800e420 <send_stk_command>
 800ebdc:	4603      	mov	r3, r0
 800ebde:	f887 311f 	strb.w	r3, [r7, #287]	@ 0x11f
	while(status != USBH_OK){
 800ebe2:	f897 311f 	ldrb.w	r3, [r7, #287]	@ 0x11f
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d1f3      	bne.n	800ebd2 <program_hex_file+0x16a>
	}

	arduino_prog_state = ARDUINO_PROG_PROGRAMMED;
 800ebea:	4b04      	ldr	r3, [pc, #16]	@ (800ebfc <program_hex_file+0x194>)
 800ebec:	2204      	movs	r2, #4
 800ebee:	701a      	strb	r2, [r3, #0]

	return USBH_OK;
 800ebf0:	2300      	movs	r3, #0
}
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f507 7790 	add.w	r7, r7, #288	@ 0x120
 800ebf8:	46bd      	mov	sp, r7
 800ebfa:	bd80      	pop	{r7, pc}
 800ebfc:	200050ed 	.word	0x200050ed

0800ec00 <get_programming_state>:
ArduinoProgrammingState get_programming_state(void)
{
 800ec00:	b480      	push	{r7}
 800ec02:	af00      	add	r7, sp, #0
	return arduino_prog_state;
 800ec04:	4b03      	ldr	r3, [pc, #12]	@ (800ec14 <get_programming_state+0x14>)
 800ec06:	781b      	ldrb	r3, [r3, #0]
}
 800ec08:	4618      	mov	r0, r3
 800ec0a:	46bd      	mov	sp, r7
 800ec0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec10:	4770      	bx	lr
 800ec12:	bf00      	nop
 800ec14:	200050ed 	.word	0x200050ed

0800ec18 <reset_programming_state>:

void reset_programming_state(void)
{
 800ec18:	b480      	push	{r7}
 800ec1a:	af00      	add	r7, sp, #0
	arduino_prog_state = ARDUINO_PROG_IDLE;
 800ec1c:	4b03      	ldr	r3, [pc, #12]	@ (800ec2c <reset_programming_state+0x14>)
 800ec1e:	2200      	movs	r2, #0
 800ec20:	701a      	strb	r2, [r3, #0]
}
 800ec22:	bf00      	nop
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	200050ed 	.word	0x200050ed

0800ec30 <verify_hex_file>:

USBH_StatusTypeDef verify_hex_file(const char *hex_data, uint32_t size)
{
 800ec30:	b590      	push	{r4, r7, lr}
 800ec32:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 800ec36:	af00      	add	r7, sp, #0
 800ec38:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ec3c:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800ec40:	6018      	str	r0, [r3, #0]
 800ec42:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ec46:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 800ec4a:	6019      	str	r1, [r3, #0]
	USBH_StatusTypeDef status;
	char line_buffer[256];
	uint32_t base_address = 0;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
	int line_length = 0;
 800ec52:	2300      	movs	r3, #0
 800ec54:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
	int i = 0;
 800ec58:	2300      	movs	r3, #0
 800ec5a:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
	uint8_t params[4];

	//printf("Starting verification of hex file...\r\n");


	while (i < size) {
 800ec5e:	e1a4      	b.n	800efaa <verify_hex_file+0x37a>
		// Find start of line (colon)
		while (i < size && hex_data[i] != ':') {
			i++;
 800ec60:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ec64:	3301      	adds	r3, #1
 800ec66:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
		while (i < size && hex_data[i] != ':') {
 800ec6a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ec6e:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ec72:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800ec76:	6812      	ldr	r2, [r2, #0]
 800ec78:	429a      	cmp	r2, r3
 800ec7a:	d90a      	bls.n	800ec92 <verify_hex_file+0x62>
 800ec7c:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ec80:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ec84:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 800ec88:	6812      	ldr	r2, [r2, #0]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	781b      	ldrb	r3, [r3, #0]
 800ec8e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ec90:	d1e6      	bne.n	800ec60 <verify_hex_file+0x30>
		}

		if (i >= size) {
 800ec92:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ec96:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ec9a:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800ec9e:	6812      	ldr	r2, [r2, #0]
 800eca0:	429a      	cmp	r2, r3
 800eca2:	f240 818d 	bls.w	800efc0 <verify_hex_file+0x390>
			break; // End of file
		}

		// Read line into buffer
		line_length = 0;
 800eca6:	2300      	movs	r3, #0
 800eca8:	f8c7 3234 	str.w	r3, [r7, #564]	@ 0x234
		while (i < size && hex_data[i] != '\n' && hex_data[i] != '\r' && line_length < 255) {
 800ecac:	e016      	b.n	800ecdc <verify_hex_file+0xac>
			line_buffer[line_length++] = hex_data[i++];
 800ecae:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ecb2:	1c5a      	adds	r2, r3, #1
 800ecb4:	f8c7 2230 	str.w	r2, [r7, #560]	@ 0x230
 800ecb8:	461a      	mov	r2, r3
 800ecba:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ecbe:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	441a      	add	r2, r3
 800ecc6:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800ecca:	1c59      	adds	r1, r3, #1
 800eccc:	f8c7 1234 	str.w	r1, [r7, #564]	@ 0x234
 800ecd0:	7811      	ldrb	r1, [r2, #0]
 800ecd2:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ecd6:	f5a2 7292 	sub.w	r2, r2, #292	@ 0x124
 800ecda:	54d1      	strb	r1, [r2, r3]
		while (i < size && hex_data[i] != '\n' && hex_data[i] != '\r' && line_length < 255) {
 800ecdc:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ece0:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ece4:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800ece8:	6812      	ldr	r2, [r2, #0]
 800ecea:	429a      	cmp	r2, r3
 800ecec:	d919      	bls.n	800ed22 <verify_hex_file+0xf2>
 800ecee:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ecf2:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ecf6:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 800ecfa:	6812      	ldr	r2, [r2, #0]
 800ecfc:	4413      	add	r3, r2
 800ecfe:	781b      	ldrb	r3, [r3, #0]
 800ed00:	2b0a      	cmp	r3, #10
 800ed02:	d00e      	beq.n	800ed22 <verify_hex_file+0xf2>
 800ed04:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ed08:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ed0c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 800ed10:	6812      	ldr	r2, [r2, #0]
 800ed12:	4413      	add	r3, r2
 800ed14:	781b      	ldrb	r3, [r3, #0]
 800ed16:	2b0d      	cmp	r3, #13
 800ed18:	d003      	beq.n	800ed22 <verify_hex_file+0xf2>
 800ed1a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800ed1e:	2bfe      	cmp	r3, #254	@ 0xfe
 800ed20:	ddc5      	ble.n	800ecae <verify_hex_file+0x7e>
		}
		line_buffer[line_length] = '\0';
 800ed22:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ed26:	f5a3 7292 	sub.w	r2, r3, #292	@ 0x124
 800ed2a:	f8d7 3234 	ldr.w	r3, [r7, #564]	@ 0x234
 800ed2e:	4413      	add	r3, r2
 800ed30:	2200      	movs	r2, #0
 800ed32:	701a      	strb	r2, [r3, #0]

		// Skip line if it doesn't start with ':'
		if (line_buffer[0] != ':') {
 800ed34:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ed38:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800ed3c:	781b      	ldrb	r3, [r3, #0]
 800ed3e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ed40:	d000      	beq.n	800ed44 <verify_hex_file+0x114>
			continue;
 800ed42:	e132      	b.n	800efaa <verify_hex_file+0x37a>
		}

		// Parse line
		const char *line_ptr = line_buffer + 1; // Skip ':'
 800ed44:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 800ed48:	3301      	adds	r3, #1
 800ed4a:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

		// Parse length
		length = hex_to_byte((const uint8_t *)line_ptr);
 800ed4e:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800ed52:	f7ff fd4b 	bl	800e7ec <hex_to_byte>
 800ed56:	4603      	mov	r3, r0
 800ed58:	f887 3223 	strb.w	r3, [r7, #547]	@ 0x223
		line_ptr += 2;
 800ed5c:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800ed60:	3302      	adds	r3, #2
 800ed62:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

		// Parse address
		address = (uint16_t)hex_to_byte((const uint8_t *)line_ptr) << 8;
 800ed66:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800ed6a:	f7ff fd3f 	bl	800e7ec <hex_to_byte>
 800ed6e:	4603      	mov	r3, r0
 800ed70:	021b      	lsls	r3, r3, #8
 800ed72:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
		line_ptr += 2;
 800ed76:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800ed7a:	3302      	adds	r3, #2
 800ed7c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
		address |= hex_to_byte((const uint8_t *)line_ptr);
 800ed80:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800ed84:	f7ff fd32 	bl	800e7ec <hex_to_byte>
 800ed88:	4603      	mov	r3, r0
 800ed8a:	461a      	mov	r2, r3
 800ed8c:	f8b7 3220 	ldrh.w	r3, [r7, #544]	@ 0x220
 800ed90:	4313      	orrs	r3, r2
 800ed92:	f8a7 3220 	strh.w	r3, [r7, #544]	@ 0x220
		line_ptr += 2;
 800ed96:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800ed9a:	3302      	adds	r3, #2
 800ed9c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

		// Parse record type
		type = hex_to_byte((const uint8_t *)line_ptr);
 800eda0:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800eda4:	f7ff fd22 	bl	800e7ec <hex_to_byte>
 800eda8:	4603      	mov	r3, r0
 800edaa:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
		line_ptr += 2;
 800edae:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800edb2:	3302      	adds	r3, #2
 800edb4:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c

		if (type == HEX_RECORD_TYPE_DATA) {
 800edb8:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800edbc:	2b00      	cmp	r3, #0
 800edbe:	f040 80ef 	bne.w	800efa0 <verify_hex_file+0x370>
			// Parse data
			for (uint8_t j = 0; j < length; j++) {
 800edc2:	2300      	movs	r3, #0
 800edc4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 800edc8:	e016      	b.n	800edf8 <verify_hex_file+0x1c8>
				data[j] = hex_to_byte((const uint8_t *)line_ptr);
 800edca:	f897 422b 	ldrb.w	r4, [r7, #555]	@ 0x22b
 800edce:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800edd2:	f7ff fd0b 	bl	800e7ec <hex_to_byte>
 800edd6:	4603      	mov	r3, r0
 800edd8:	461a      	mov	r2, r3
 800edda:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800edde:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800ede2:	551a      	strb	r2, [r3, r4]
				line_ptr += 2;
 800ede4:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800ede8:	3302      	adds	r3, #2
 800edea:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			for (uint8_t j = 0; j < length; j++) {
 800edee:	f897 322b 	ldrb.w	r3, [r7, #555]	@ 0x22b
 800edf2:	3301      	adds	r3, #1
 800edf4:	f887 322b 	strb.w	r3, [r7, #555]	@ 0x22b
 800edf8:	f897 222b 	ldrb.w	r2, [r7, #555]	@ 0x22b
 800edfc:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 800ee00:	429a      	cmp	r2, r3
 800ee02:	d3e2      	bcc.n	800edca <verify_hex_file+0x19a>
			}

			// Calculate full address
			uint32_t full_address = base_address | address;
 800ee04:	f8b7 3220 	ldrh.w	r3, [r7, #544]	@ 0x220
 800ee08:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 800ee0c:	4313      	orrs	r3, r2
 800ee0e:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
			uint16_t word_address = (uint16_t)(full_address >> 1); // Divide by 2 for word addressing
 800ee12:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 800ee16:	085b      	lsrs	r3, r3, #1
 800ee18:	f8a7 3216 	strh.w	r3, [r7, #534]	@ 0x216

			// Load address
			params[0] = (uint8_t)(word_address & 0xFF);    // Low byte
 800ee1c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800ee20:	b2da      	uxtb	r2, r3
 800ee22:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ee26:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800ee2a:	701a      	strb	r2, [r3, #0]
			params[1] = (uint8_t)((word_address >> 8) & 0xFF); // High byte
 800ee2c:	f8b7 3216 	ldrh.w	r3, [r7, #534]	@ 0x216
 800ee30:	0a1b      	lsrs	r3, r3, #8
 800ee32:	b29b      	uxth	r3, r3
 800ee34:	b2da      	uxtb	r2, r3
 800ee36:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ee3a:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 800ee3e:	705a      	strb	r2, [r3, #1]

			status = send_stk_command(STK_LOAD_ADDRESS, params, 2);
 800ee40:	f107 0310 	add.w	r3, r7, #16
 800ee44:	2202      	movs	r2, #2
 800ee46:	4619      	mov	r1, r3
 800ee48:	2055      	movs	r0, #85	@ 0x55
 800ee4a:	f7ff fae9 	bl	800e420 <send_stk_command>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
			if (status != USBH_OK) {
 800ee54:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d008      	beq.n	800ee6e <verify_hex_file+0x23e>
				printf("Failed to load address during verification\r\n");
 800ee5c:	485c      	ldr	r0, [pc, #368]	@ (800efd0 <verify_hex_file+0x3a0>)
 800ee5e:	f000 fd89 	bl	800f974 <puts>
				arduino_prog_state = ARDUINO_PROG_ERROR;
 800ee62:	4b5c      	ldr	r3, [pc, #368]	@ (800efd4 <verify_hex_file+0x3a4>)
 800ee64:	2207      	movs	r2, #7
 800ee66:	701a      	strb	r2, [r3, #0]
				return status;
 800ee68:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 800ee6c:	e0ab      	b.n	800efc6 <verify_hex_file+0x396>
			}

			// Read page
			uint8_t read_cmd[3];
			read_cmd[0] = (uint8_t)(length >> 8); // Length high byte
 800ee6e:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 800ee72:	121b      	asrs	r3, r3, #8
 800ee74:	b2da      	uxtb	r2, r3
 800ee76:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ee7a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ee7e:	701a      	strb	r2, [r3, #0]
			read_cmd[1] = (uint8_t)(length & 0xFF); // Length low byte
 800ee80:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ee84:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ee88:	f897 2223 	ldrb.w	r2, [r7, #547]	@ 0x223
 800ee8c:	705a      	strb	r2, [r3, #1]
			read_cmd[2] = 'F'; // Memory type: 'F' for Flash
 800ee8e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800ee92:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 800ee96:	2246      	movs	r2, #70	@ 0x46
 800ee98:	709a      	strb	r2, [r3, #2]

			status = send_stk_command(STK_READ_PAGE, read_cmd, 3);
 800ee9a:	f107 030c 	add.w	r3, r7, #12
 800ee9e:	2203      	movs	r2, #3
 800eea0:	4619      	mov	r1, r3
 800eea2:	2074      	movs	r0, #116	@ 0x74
 800eea4:	f7ff fabc 	bl	800e420 <send_stk_command>
 800eea8:	4603      	mov	r3, r0
 800eeaa:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
			printf("Status: 0x%02X\r\n", status);
 800eeae:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 800eeb2:	4619      	mov	r1, r3
 800eeb4:	4848      	ldr	r0, [pc, #288]	@ (800efd8 <verify_hex_file+0x3a8>)
 800eeb6:	f000 fcf5 	bl	800f8a4 <iprintf>


			// Receive data
			 status = USBH_FAIL;
 800eeba:	2302      	movs	r3, #2
 800eebc:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
			 while(status != USBH_OK){
 800eec0:	e00c      	b.n	800eedc <verify_hex_file+0x2ac>
				status =USBH_CDC_Receive(&hUsbHostFS, read_data, length + 2);// Typically INSYNC + OK
 800eec2:	f897 3223 	ldrb.w	r3, [r7, #547]	@ 0x223
 800eec6:	3302      	adds	r3, #2
 800eec8:	461a      	mov	r2, r3
 800eeca:	f107 0314 	add.w	r3, r7, #20
 800eece:	4619      	mov	r1, r3
 800eed0:	4842      	ldr	r0, [pc, #264]	@ (800efdc <verify_hex_file+0x3ac>)
 800eed2:	f7f9 fd9f 	bl	8008a14 <USBH_CDC_Receive>
 800eed6:	4603      	mov	r3, r0
 800eed8:	f887 322a 	strb.w	r3, [r7, #554]	@ 0x22a
			 while(status != USBH_OK){
 800eedc:	f897 322a 	ldrb.w	r3, [r7, #554]	@ 0x22a
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d1ee      	bne.n	800eec2 <verify_hex_file+0x292>
			 }
			 // Check for valid response (INSYNC + OK)
			 if (stk_response_buffer[0] != STK_INSYNC) {
 800eee4:	4b3e      	ldr	r3, [pc, #248]	@ (800efe0 <verify_hex_file+0x3b0>)
 800eee6:	781b      	ldrb	r3, [r3, #0]
 800eee8:	2b14      	cmp	r3, #20
 800eeea:	d001      	beq.n	800eef0 <verify_hex_file+0x2c0>
				//printf("Invalid INSYNC byte received: 0x%02X\r\n", stk_response_buffer[0]);
				return USBH_FAIL;
 800eeec:	2302      	movs	r3, #2
 800eeee:	e06a      	b.n	800efc6 <verify_hex_file+0x396>
			 }

			 if (stk_response_buffer[1] != STK_OK) {
 800eef0:	4b3b      	ldr	r3, [pc, #236]	@ (800efe0 <verify_hex_file+0x3b0>)
 800eef2:	785b      	ldrb	r3, [r3, #1]
 800eef4:	2b10      	cmp	r3, #16
 800eef6:	d001      	beq.n	800eefc <verify_hex_file+0x2cc>
			   // printf("Invalid OK byte received: 0x%02X\r\n", stk_response_buffer[1]);
				return USBH_FAIL;
 800eef8:	2302      	movs	r3, #2
 800eefa:	e064      	b.n	800efc6 <verify_hex_file+0x396>
			 }

			 else if(stk_response_buffer[0] == STK_INSYNC && stk_response_buffer[1] == STK_OK){
 800eefc:	4b38      	ldr	r3, [pc, #224]	@ (800efe0 <verify_hex_file+0x3b0>)
 800eefe:	781b      	ldrb	r3, [r3, #0]
 800ef00:	2b14      	cmp	r3, #20
 800ef02:	d108      	bne.n	800ef16 <verify_hex_file+0x2e6>
 800ef04:	4b36      	ldr	r3, [pc, #216]	@ (800efe0 <verify_hex_file+0x3b0>)
 800ef06:	785b      	ldrb	r3, [r3, #1]
 800ef08:	2b10      	cmp	r3, #16
 800ef0a:	d104      	bne.n	800ef16 <verify_hex_file+0x2e6>
				 arduino_prog_state = ARDUINO_PROG_BOOTLOADER_READY;
 800ef0c:	4b31      	ldr	r3, [pc, #196]	@ (800efd4 <verify_hex_file+0x3a4>)
 800ef0e:	2202      	movs	r2, #2
 800ef10:	701a      	strb	r2, [r3, #0]
				 return USBH_OK;
 800ef12:	2300      	movs	r3, #0
 800ef14:	e057      	b.n	800efc6 <verify_hex_file+0x396>
						   full_address + j, data[j], read_data[j + 1]);
					arduino_prog_state = ARDUINO_PROG_ERROR;
					return USBH_FAIL;
				}
			}
		} else if (type == HEX_RECORD_TYPE_EOF) {
 800ef16:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800ef1a:	2b01      	cmp	r3, #1
 800ef1c:	d052      	beq.n	800efc4 <verify_hex_file+0x394>
			// End of file
			break;
		} else if (type == HEX_RECORD_TYPE_EXT_LINEAR_ADDR) {
 800ef1e:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 800ef22:	2b04      	cmp	r3, #4
 800ef24:	d11d      	bne.n	800ef62 <verify_hex_file+0x332>
			// Update base address
			base_address = (uint32_t)hex_to_byte((const uint8_t *)line_ptr) << 24;
 800ef26:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800ef2a:	f7ff fc5f 	bl	800e7ec <hex_to_byte>
 800ef2e:	4603      	mov	r3, r0
 800ef30:	061b      	lsls	r3, r3, #24
 800ef32:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
			line_ptr += 2;
 800ef36:	f8d7 322c 	ldr.w	r3, [r7, #556]	@ 0x22c
 800ef3a:	3302      	adds	r3, #2
 800ef3c:	f8c7 322c 	str.w	r3, [r7, #556]	@ 0x22c
			base_address |= (uint32_t)hex_to_byte((const uint8_t *)line_ptr) << 16;
 800ef40:	f8d7 022c 	ldr.w	r0, [r7, #556]	@ 0x22c
 800ef44:	f7ff fc52 	bl	800e7ec <hex_to_byte>
 800ef48:	4603      	mov	r3, r0
 800ef4a:	041b      	lsls	r3, r3, #16
 800ef4c:	f8d7 2224 	ldr.w	r2, [r7, #548]	@ 0x224
 800ef50:	4313      	orrs	r3, r2
 800ef52:	f8c7 3224 	str.w	r3, [r7, #548]	@ 0x224
		}

		// Skip remaining EOL characters
		while (i < size && (hex_data[i] == '\n' || hex_data[i] == '\r')) {
 800ef56:	e004      	b.n	800ef62 <verify_hex_file+0x332>
			i++;
 800ef58:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ef5c:	3301      	adds	r3, #1
 800ef5e:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
		while (i < size && (hex_data[i] == '\n' || hex_data[i] == '\r')) {
 800ef62:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ef66:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ef6a:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800ef6e:	6812      	ldr	r2, [r2, #0]
 800ef70:	429a      	cmp	r2, r3
 800ef72:	d915      	bls.n	800efa0 <verify_hex_file+0x370>
 800ef74:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ef78:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ef7c:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 800ef80:	6812      	ldr	r2, [r2, #0]
 800ef82:	4413      	add	r3, r2
 800ef84:	781b      	ldrb	r3, [r3, #0]
 800ef86:	2b0a      	cmp	r3, #10
 800ef88:	d0e6      	beq.n	800ef58 <verify_hex_file+0x328>
 800ef8a:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800ef8e:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800ef92:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 800ef96:	6812      	ldr	r2, [r2, #0]
 800ef98:	4413      	add	r3, r2
 800ef9a:	781b      	ldrb	r3, [r3, #0]
 800ef9c:	2b0d      	cmp	r3, #13
 800ef9e:	d0db      	beq.n	800ef58 <verify_hex_file+0x328>
		}
	}

	//printf("Verification completed successfully\r\n");
	arduino_prog_state = ARDUINO_PROG_VERIFIED;
 800efa0:	4b0c      	ldr	r3, [pc, #48]	@ (800efd4 <verify_hex_file+0x3a4>)
 800efa2:	2205      	movs	r2, #5
 800efa4:	701a      	strb	r2, [r3, #0]

	return USBH_OK;
 800efa6:	2300      	movs	r3, #0
 800efa8:	e00d      	b.n	800efc6 <verify_hex_file+0x396>
	while (i < size) {
 800efaa:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 800efae:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800efb2:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800efb6:	6812      	ldr	r2, [r2, #0]
 800efb8:	429a      	cmp	r2, r3
 800efba:	f63f ae56 	bhi.w	800ec6a <verify_hex_file+0x3a>
 800efbe:	e002      	b.n	800efc6 <verify_hex_file+0x396>
			break; // End of file
 800efc0:	bf00      	nop
 800efc2:	e000      	b.n	800efc6 <verify_hex_file+0x396>
			break;
 800efc4:	bf00      	nop
}
}
 800efc6:	4618      	mov	r0, r3
 800efc8:	f507 770f 	add.w	r7, r7, #572	@ 0x23c
 800efcc:	46bd      	mov	sp, r7
 800efce:	bd90      	pop	{r4, r7, pc}
 800efd0:	08010ebc 	.word	0x08010ebc
 800efd4:	200050ed 	.word	0x200050ed
 800efd8:	08010ee8 	.word	0x08010ee8
 800efdc:	20004b44 	.word	0x20004b44
 800efe0:	200050f0 	.word	0x200050f0

0800efe4 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800efe4:	b580      	push	{r7, lr}
 800efe6:	b08a      	sub	sp, #40	@ 0x28
 800efe8:	af00      	add	r7, sp, #0
 800efea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800efec:	f107 0314 	add.w	r3, r7, #20
 800eff0:	2200      	movs	r2, #0
 800eff2:	601a      	str	r2, [r3, #0]
 800eff4:	605a      	str	r2, [r3, #4]
 800eff6:	609a      	str	r2, [r3, #8]
 800eff8:	60da      	str	r2, [r3, #12]
 800effa:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800effc:	687b      	ldr	r3, [r7, #4]
 800effe:	681b      	ldr	r3, [r3, #0]
 800f000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800f004:	d147      	bne.n	800f096 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f006:	2300      	movs	r3, #0
 800f008:	613b      	str	r3, [r7, #16]
 800f00a:	4b25      	ldr	r3, [pc, #148]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f00c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f00e:	4a24      	ldr	r2, [pc, #144]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f010:	f043 0301 	orr.w	r3, r3, #1
 800f014:	6313      	str	r3, [r2, #48]	@ 0x30
 800f016:	4b22      	ldr	r3, [pc, #136]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f01a:	f003 0301 	and.w	r3, r3, #1
 800f01e:	613b      	str	r3, [r7, #16]
 800f020:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800f022:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f026:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800f028:	2300      	movs	r3, #0
 800f02a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f02c:	2300      	movs	r3, #0
 800f02e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f030:	f107 0314 	add.w	r3, r7, #20
 800f034:	4619      	mov	r1, r3
 800f036:	481b      	ldr	r0, [pc, #108]	@ (800f0a4 <HAL_HCD_MspInit+0xc0>)
 800f038:	f7f2 fa5c 	bl	80014f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800f03c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800f040:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f042:	2302      	movs	r3, #2
 800f044:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f046:	2300      	movs	r3, #0
 800f048:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800f04a:	2303      	movs	r3, #3
 800f04c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800f04e:	230a      	movs	r3, #10
 800f050:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f052:	f107 0314 	add.w	r3, r7, #20
 800f056:	4619      	mov	r1, r3
 800f058:	4812      	ldr	r0, [pc, #72]	@ (800f0a4 <HAL_HCD_MspInit+0xc0>)
 800f05a:	f7f2 fa4b 	bl	80014f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800f05e:	4b10      	ldr	r3, [pc, #64]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f060:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f062:	4a0f      	ldr	r2, [pc, #60]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f064:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f068:	6353      	str	r3, [r2, #52]	@ 0x34
 800f06a:	2300      	movs	r3, #0
 800f06c:	60fb      	str	r3, [r7, #12]
 800f06e:	4b0c      	ldr	r3, [pc, #48]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f070:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f072:	4a0b      	ldr	r2, [pc, #44]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f074:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800f078:	6453      	str	r3, [r2, #68]	@ 0x44
 800f07a:	4b09      	ldr	r3, [pc, #36]	@ (800f0a0 <HAL_HCD_MspInit+0xbc>)
 800f07c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f07e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800f082:	60fb      	str	r3, [r7, #12]
 800f084:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800f086:	2200      	movs	r2, #0
 800f088:	2100      	movs	r1, #0
 800f08a:	2043      	movs	r0, #67	@ 0x43
 800f08c:	f7f2 f969 	bl	8001362 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800f090:	2043      	movs	r0, #67	@ 0x43
 800f092:	f7f2 f982 	bl	800139a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800f096:	bf00      	nop
 800f098:	3728      	adds	r7, #40	@ 0x28
 800f09a:	46bd      	mov	sp, r7
 800f09c:	bd80      	pop	{r7, pc}
 800f09e:	bf00      	nop
 800f0a0:	40023800 	.word	0x40023800
 800f0a4:	40020000 	.word	0x40020000

0800f0a8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0a8:	b580      	push	{r7, lr}
 800f0aa:	b082      	sub	sp, #8
 800f0ac:	af00      	add	r7, sp, #0
 800f0ae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f0b6:	4618      	mov	r0, r3
 800f0b8:	f7fe f839 	bl	800d12e <USBH_LL_IncTimer>
}
 800f0bc:	bf00      	nop
 800f0be:	3708      	adds	r7, #8
 800f0c0:	46bd      	mov	sp, r7
 800f0c2:	bd80      	pop	{r7, pc}

0800f0c4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0c4:	b580      	push	{r7, lr}
 800f0c6:	b082      	sub	sp, #8
 800f0c8:	af00      	add	r7, sp, #0
 800f0ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f7fe f871 	bl	800d1ba <USBH_LL_Connect>
}
 800f0d8:	bf00      	nop
 800f0da:	3708      	adds	r7, #8
 800f0dc:	46bd      	mov	sp, r7
 800f0de:	bd80      	pop	{r7, pc}

0800f0e0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800f0e0:	b580      	push	{r7, lr}
 800f0e2:	b082      	sub	sp, #8
 800f0e4:	af00      	add	r7, sp, #0
 800f0e6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7fe f87a 	bl	800d1e8 <USBH_LL_Disconnect>
}
 800f0f4:	bf00      	nop
 800f0f6:	3708      	adds	r7, #8
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800f0fc:	b480      	push	{r7}
 800f0fe:	b083      	sub	sp, #12
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
 800f108:	4613      	mov	r3, r2
 800f10a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800f10c:	bf00      	nop
 800f10e:	370c      	adds	r7, #12
 800f110:	46bd      	mov	sp, r7
 800f112:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f116:	4770      	bx	lr

0800f118 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f118:	b580      	push	{r7, lr}
 800f11a:	b082      	sub	sp, #8
 800f11c:	af00      	add	r7, sp, #0
 800f11e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f126:	4618      	mov	r0, r3
 800f128:	f7fe f82b 	bl	800d182 <USBH_LL_PortEnabled>
}
 800f12c:	bf00      	nop
 800f12e:	3708      	adds	r7, #8
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800f134:	b580      	push	{r7, lr}
 800f136:	b082      	sub	sp, #8
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800f142:	4618      	mov	r0, r3
 800f144:	f7fe f82b 	bl	800d19e <USBH_LL_PortDisabled>
}
 800f148:	bf00      	nop
 800f14a:	3708      	adds	r7, #8
 800f14c:	46bd      	mov	sp, r7
 800f14e:	bd80      	pop	{r7, pc}

0800f150 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800f150:	b580      	push	{r7, lr}
 800f152:	b082      	sub	sp, #8
 800f154:	af00      	add	r7, sp, #0
 800f156:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f893 359c 	ldrb.w	r3, [r3, #1436]	@ 0x59c
 800f15e:	2b01      	cmp	r3, #1
 800f160:	d12a      	bne.n	800f1b8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800f162:	4a18      	ldr	r2, [pc, #96]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800f16a:	687b      	ldr	r3, [r7, #4]
 800f16c:	4a15      	ldr	r2, [pc, #84]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f16e:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800f172:	4b14      	ldr	r3, [pc, #80]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f174:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800f178:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800f17a:	4b12      	ldr	r3, [pc, #72]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f17c:	2208      	movs	r2, #8
 800f17e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800f180:	4b10      	ldr	r3, [pc, #64]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f182:	2201      	movs	r2, #1
 800f184:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800f186:	4b0f      	ldr	r3, [pc, #60]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f188:	2200      	movs	r2, #0
 800f18a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800f18c:	4b0d      	ldr	r3, [pc, #52]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f18e:	2202      	movs	r2, #2
 800f190:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800f192:	4b0c      	ldr	r3, [pc, #48]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f194:	2200      	movs	r2, #0
 800f196:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800f198:	480a      	ldr	r0, [pc, #40]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f19a:	f7f2 fb48 	bl	800182e <HAL_HCD_Init>
 800f19e:	4603      	mov	r3, r0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d001      	beq.n	800f1a8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800f1a4:	f7f1 fcfe 	bl	8000ba4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800f1a8:	4806      	ldr	r0, [pc, #24]	@ (800f1c4 <USBH_LL_Init+0x74>)
 800f1aa:	f7f2 ffa9 	bl	8002100 <HAL_HCD_GetCurrentFrame>
 800f1ae:	4603      	mov	r3, r0
 800f1b0:	4619      	mov	r1, r3
 800f1b2:	6878      	ldr	r0, [r7, #4]
 800f1b4:	f7fd ffac 	bl	800d110 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800f1b8:	2300      	movs	r3, #0
}
 800f1ba:	4618      	mov	r0, r3
 800f1bc:	3708      	adds	r7, #8
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	bd80      	pop	{r7, pc}
 800f1c2:	bf00      	nop
 800f1c4:	20005144 	.word	0x20005144

0800f1c8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f1c8:	b580      	push	{r7, lr}
 800f1ca:	b084      	sub	sp, #16
 800f1cc:	af00      	add	r7, sp, #0
 800f1ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d0:	2300      	movs	r3, #0
 800f1d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1d4:	2300      	movs	r3, #0
 800f1d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f1de:	4618      	mov	r0, r3
 800f1e0:	f7f2 ff16 	bl	8002010 <HAL_HCD_Start>
 800f1e4:	4603      	mov	r3, r0
 800f1e6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1e8:	7bfb      	ldrb	r3, [r7, #15]
 800f1ea:	4618      	mov	r0, r3
 800f1ec:	f000 f992 	bl	800f514 <USBH_Get_USB_Status>
 800f1f0:	4603      	mov	r3, r0
 800f1f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1f4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	3710      	adds	r7, #16
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd80      	pop	{r7, pc}

0800f1fe <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f1fe:	b580      	push	{r7, lr}
 800f200:	b084      	sub	sp, #16
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f206:	2300      	movs	r3, #0
 800f208:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f20a:	2300      	movs	r3, #0
 800f20c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f214:	4618      	mov	r0, r3
 800f216:	f7f2 ff1e 	bl	8002056 <HAL_HCD_Stop>
 800f21a:	4603      	mov	r3, r0
 800f21c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f21e:	7bfb      	ldrb	r3, [r7, #15]
 800f220:	4618      	mov	r0, r3
 800f222:	f000 f977 	bl	800f514 <USBH_Get_USB_Status>
 800f226:	4603      	mov	r3, r0
 800f228:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f22a:	7bbb      	ldrb	r3, [r7, #14]
}
 800f22c:	4618      	mov	r0, r3
 800f22e:	3710      	adds	r7, #16
 800f230:	46bd      	mov	sp, r7
 800f232:	bd80      	pop	{r7, pc}

0800f234 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f234:	b580      	push	{r7, lr}
 800f236:	b084      	sub	sp, #16
 800f238:	af00      	add	r7, sp, #0
 800f23a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f23c:	2301      	movs	r3, #1
 800f23e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f240:	687b      	ldr	r3, [r7, #4]
 800f242:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f246:	4618      	mov	r0, r3
 800f248:	f7f2 ff68 	bl	800211c <HAL_HCD_GetCurrentSpeed>
 800f24c:	4603      	mov	r3, r0
 800f24e:	2b02      	cmp	r3, #2
 800f250:	d00c      	beq.n	800f26c <USBH_LL_GetSpeed+0x38>
 800f252:	2b02      	cmp	r3, #2
 800f254:	d80d      	bhi.n	800f272 <USBH_LL_GetSpeed+0x3e>
 800f256:	2b00      	cmp	r3, #0
 800f258:	d002      	beq.n	800f260 <USBH_LL_GetSpeed+0x2c>
 800f25a:	2b01      	cmp	r3, #1
 800f25c:	d003      	beq.n	800f266 <USBH_LL_GetSpeed+0x32>
 800f25e:	e008      	b.n	800f272 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f260:	2300      	movs	r3, #0
 800f262:	73fb      	strb	r3, [r7, #15]
    break;
 800f264:	e008      	b.n	800f278 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f266:	2301      	movs	r3, #1
 800f268:	73fb      	strb	r3, [r7, #15]
    break;
 800f26a:	e005      	b.n	800f278 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f26c:	2302      	movs	r3, #2
 800f26e:	73fb      	strb	r3, [r7, #15]
    break;
 800f270:	e002      	b.n	800f278 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f272:	2301      	movs	r3, #1
 800f274:	73fb      	strb	r3, [r7, #15]
    break;
 800f276:	bf00      	nop
  }
  return  speed;
 800f278:	7bfb      	ldrb	r3, [r7, #15]
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3710      	adds	r7, #16
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}

0800f282 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f282:	b580      	push	{r7, lr}
 800f284:	b084      	sub	sp, #16
 800f286:	af00      	add	r7, sp, #0
 800f288:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f28a:	2300      	movs	r3, #0
 800f28c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f28e:	2300      	movs	r3, #0
 800f290:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f292:	687b      	ldr	r3, [r7, #4]
 800f294:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f298:	4618      	mov	r0, r3
 800f29a:	f7f2 fef9 	bl	8002090 <HAL_HCD_ResetPort>
 800f29e:	4603      	mov	r3, r0
 800f2a0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f2a2:	7bfb      	ldrb	r3, [r7, #15]
 800f2a4:	4618      	mov	r0, r3
 800f2a6:	f000 f935 	bl	800f514 <USBH_Get_USB_Status>
 800f2aa:	4603      	mov	r3, r0
 800f2ac:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f2ae:	7bbb      	ldrb	r3, [r7, #14]
}
 800f2b0:	4618      	mov	r0, r3
 800f2b2:	3710      	adds	r7, #16
 800f2b4:	46bd      	mov	sp, r7
 800f2b6:	bd80      	pop	{r7, pc}

0800f2b8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f2b8:	b580      	push	{r7, lr}
 800f2ba:	b082      	sub	sp, #8
 800f2bc:	af00      	add	r7, sp, #0
 800f2be:	6078      	str	r0, [r7, #4]
 800f2c0:	460b      	mov	r3, r1
 800f2c2:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f2c4:	687b      	ldr	r3, [r7, #4]
 800f2c6:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f2ca:	78fa      	ldrb	r2, [r7, #3]
 800f2cc:	4611      	mov	r1, r2
 800f2ce:	4618      	mov	r0, r3
 800f2d0:	f7f2 ff01 	bl	80020d6 <HAL_HCD_HC_GetXferCount>
 800f2d4:	4603      	mov	r3, r0
}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}

0800f2de <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f2de:	b590      	push	{r4, r7, lr}
 800f2e0:	b089      	sub	sp, #36	@ 0x24
 800f2e2:	af04      	add	r7, sp, #16
 800f2e4:	6078      	str	r0, [r7, #4]
 800f2e6:	4608      	mov	r0, r1
 800f2e8:	4611      	mov	r1, r2
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	4603      	mov	r3, r0
 800f2ee:	70fb      	strb	r3, [r7, #3]
 800f2f0:	460b      	mov	r3, r1
 800f2f2:	70bb      	strb	r3, [r7, #2]
 800f2f4:	4613      	mov	r3, r2
 800f2f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2fc:	2300      	movs	r3, #0
 800f2fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	f8d3 05a0 	ldr.w	r0, [r3, #1440]	@ 0x5a0
 800f306:	787c      	ldrb	r4, [r7, #1]
 800f308:	78ba      	ldrb	r2, [r7, #2]
 800f30a:	78f9      	ldrb	r1, [r7, #3]
 800f30c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f30e:	9302      	str	r3, [sp, #8]
 800f310:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f314:	9301      	str	r3, [sp, #4]
 800f316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f31a:	9300      	str	r3, [sp, #0]
 800f31c:	4623      	mov	r3, r4
 800f31e:	f7f2 faed 	bl	80018fc <HAL_HCD_HC_Init>
 800f322:	4603      	mov	r3, r0
 800f324:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f326:	7bfb      	ldrb	r3, [r7, #15]
 800f328:	4618      	mov	r0, r3
 800f32a:	f000 f8f3 	bl	800f514 <USBH_Get_USB_Status>
 800f32e:	4603      	mov	r3, r0
 800f330:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f332:	7bbb      	ldrb	r3, [r7, #14]
}
 800f334:	4618      	mov	r0, r3
 800f336:	3714      	adds	r7, #20
 800f338:	46bd      	mov	sp, r7
 800f33a:	bd90      	pop	{r4, r7, pc}

0800f33c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f33c:	b580      	push	{r7, lr}
 800f33e:	b084      	sub	sp, #16
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
 800f344:	460b      	mov	r3, r1
 800f346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f348:	2300      	movs	r3, #0
 800f34a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f34c:	2300      	movs	r3, #0
 800f34e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f356:	78fa      	ldrb	r2, [r7, #3]
 800f358:	4611      	mov	r1, r2
 800f35a:	4618      	mov	r0, r3
 800f35c:	f7f2 fb86 	bl	8001a6c <HAL_HCD_HC_Halt>
 800f360:	4603      	mov	r3, r0
 800f362:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f364:	7bfb      	ldrb	r3, [r7, #15]
 800f366:	4618      	mov	r0, r3
 800f368:	f000 f8d4 	bl	800f514 <USBH_Get_USB_Status>
 800f36c:	4603      	mov	r3, r0
 800f36e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f370:	7bbb      	ldrb	r3, [r7, #14]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3710      	adds	r7, #16
 800f376:	46bd      	mov	sp, r7
 800f378:	bd80      	pop	{r7, pc}

0800f37a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800f37a:	b590      	push	{r4, r7, lr}
 800f37c:	b089      	sub	sp, #36	@ 0x24
 800f37e:	af04      	add	r7, sp, #16
 800f380:	6078      	str	r0, [r7, #4]
 800f382:	4608      	mov	r0, r1
 800f384:	4611      	mov	r1, r2
 800f386:	461a      	mov	r2, r3
 800f388:	4603      	mov	r3, r0
 800f38a:	70fb      	strb	r3, [r7, #3]
 800f38c:	460b      	mov	r3, r1
 800f38e:	70bb      	strb	r3, [r7, #2]
 800f390:	4613      	mov	r3, r2
 800f392:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f398:	2300      	movs	r3, #0
 800f39a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	f8d3 05a0 	ldr.w	r0, [r3, #1440]	@ 0x5a0
 800f3a2:	787c      	ldrb	r4, [r7, #1]
 800f3a4:	78ba      	ldrb	r2, [r7, #2]
 800f3a6:	78f9      	ldrb	r1, [r7, #3]
 800f3a8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f3ac:	9303      	str	r3, [sp, #12]
 800f3ae:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f3b0:	9302      	str	r3, [sp, #8]
 800f3b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f3b4:	9301      	str	r3, [sp, #4]
 800f3b6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f3ba:	9300      	str	r3, [sp, #0]
 800f3bc:	4623      	mov	r3, r4
 800f3be:	f7f2 fb79 	bl	8001ab4 <HAL_HCD_HC_SubmitRequest>
 800f3c2:	4603      	mov	r3, r0
 800f3c4:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800f3c6:	7bfb      	ldrb	r3, [r7, #15]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	f000 f8a3 	bl	800f514 <USBH_Get_USB_Status>
 800f3ce:	4603      	mov	r3, r0
 800f3d0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f3d2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f3d4:	4618      	mov	r0, r3
 800f3d6:	3714      	adds	r7, #20
 800f3d8:	46bd      	mov	sp, r7
 800f3da:	bd90      	pop	{r4, r7, pc}

0800f3dc <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b082      	sub	sp, #8
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
 800f3e4:	460b      	mov	r3, r1
 800f3e6:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f3ee:	78fa      	ldrb	r2, [r7, #3]
 800f3f0:	4611      	mov	r1, r2
 800f3f2:	4618      	mov	r0, r3
 800f3f4:	f7f2 fe5a 	bl	80020ac <HAL_HCD_HC_GetURBState>
 800f3f8:	4603      	mov	r3, r0
}
 800f3fa:	4618      	mov	r0, r3
 800f3fc:	3708      	adds	r7, #8
 800f3fe:	46bd      	mov	sp, r7
 800f400:	bd80      	pop	{r7, pc}

0800f402 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f402:	b580      	push	{r7, lr}
 800f404:	b082      	sub	sp, #8
 800f406:	af00      	add	r7, sp, #0
 800f408:	6078      	str	r0, [r7, #4]
 800f40a:	460b      	mov	r3, r1
 800f40c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	f893 359c 	ldrb.w	r3, [r3, #1436]	@ 0x59c
 800f414:	2b01      	cmp	r3, #1
 800f416:	d103      	bne.n	800f420 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800f418:	78fb      	ldrb	r3, [r7, #3]
 800f41a:	4618      	mov	r0, r3
 800f41c:	f000 f8a6 	bl	800f56c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800f420:	20c8      	movs	r0, #200	@ 0xc8
 800f422:	f7f1 fe9f 	bl	8001164 <HAL_Delay>
  return USBH_OK;
 800f426:	2300      	movs	r3, #0
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3708      	adds	r7, #8
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f430:	b480      	push	{r7}
 800f432:	b085      	sub	sp, #20
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	460b      	mov	r3, r1
 800f43a:	70fb      	strb	r3, [r7, #3]
 800f43c:	4613      	mov	r3, r2
 800f43e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f440:	687b      	ldr	r3, [r7, #4]
 800f442:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f446:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f448:	78fa      	ldrb	r2, [r7, #3]
 800f44a:	68f9      	ldr	r1, [r7, #12]
 800f44c:	4613      	mov	r3, r2
 800f44e:	011b      	lsls	r3, r3, #4
 800f450:	1a9b      	subs	r3, r3, r2
 800f452:	009b      	lsls	r3, r3, #2
 800f454:	440b      	add	r3, r1
 800f456:	3317      	adds	r3, #23
 800f458:	781b      	ldrb	r3, [r3, #0]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d00a      	beq.n	800f474 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f45e:	78fa      	ldrb	r2, [r7, #3]
 800f460:	68f9      	ldr	r1, [r7, #12]
 800f462:	4613      	mov	r3, r2
 800f464:	011b      	lsls	r3, r3, #4
 800f466:	1a9b      	subs	r3, r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	440b      	add	r3, r1
 800f46c:	333c      	adds	r3, #60	@ 0x3c
 800f46e:	78ba      	ldrb	r2, [r7, #2]
 800f470:	701a      	strb	r2, [r3, #0]
 800f472:	e009      	b.n	800f488 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f474:	78fa      	ldrb	r2, [r7, #3]
 800f476:	68f9      	ldr	r1, [r7, #12]
 800f478:	4613      	mov	r3, r2
 800f47a:	011b      	lsls	r3, r3, #4
 800f47c:	1a9b      	subs	r3, r3, r2
 800f47e:	009b      	lsls	r3, r3, #2
 800f480:	440b      	add	r3, r1
 800f482:	333d      	adds	r3, #61	@ 0x3d
 800f484:	78ba      	ldrb	r2, [r7, #2]
 800f486:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f488:	2300      	movs	r3, #0
}
 800f48a:	4618      	mov	r0, r3
 800f48c:	3714      	adds	r7, #20
 800f48e:	46bd      	mov	sp, r7
 800f490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f494:	4770      	bx	lr

0800f496 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f496:	b480      	push	{r7}
 800f498:	b085      	sub	sp, #20
 800f49a:	af00      	add	r7, sp, #0
 800f49c:	6078      	str	r0, [r7, #4]
 800f49e:	460b      	mov	r3, r1
 800f4a0:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800f4a2:	2300      	movs	r3, #0
 800f4a4:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800f4ac:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800f4ae:	78fa      	ldrb	r2, [r7, #3]
 800f4b0:	68b9      	ldr	r1, [r7, #8]
 800f4b2:	4613      	mov	r3, r2
 800f4b4:	011b      	lsls	r3, r3, #4
 800f4b6:	1a9b      	subs	r3, r3, r2
 800f4b8:	009b      	lsls	r3, r3, #2
 800f4ba:	440b      	add	r3, r1
 800f4bc:	3317      	adds	r3, #23
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	2b00      	cmp	r3, #0
 800f4c2:	d00a      	beq.n	800f4da <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800f4c4:	78fa      	ldrb	r2, [r7, #3]
 800f4c6:	68b9      	ldr	r1, [r7, #8]
 800f4c8:	4613      	mov	r3, r2
 800f4ca:	011b      	lsls	r3, r3, #4
 800f4cc:	1a9b      	subs	r3, r3, r2
 800f4ce:	009b      	lsls	r3, r3, #2
 800f4d0:	440b      	add	r3, r1
 800f4d2:	333c      	adds	r3, #60	@ 0x3c
 800f4d4:	781b      	ldrb	r3, [r3, #0]
 800f4d6:	73fb      	strb	r3, [r7, #15]
 800f4d8:	e009      	b.n	800f4ee <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800f4da:	78fa      	ldrb	r2, [r7, #3]
 800f4dc:	68b9      	ldr	r1, [r7, #8]
 800f4de:	4613      	mov	r3, r2
 800f4e0:	011b      	lsls	r3, r3, #4
 800f4e2:	1a9b      	subs	r3, r3, r2
 800f4e4:	009b      	lsls	r3, r3, #2
 800f4e6:	440b      	add	r3, r1
 800f4e8:	333d      	adds	r3, #61	@ 0x3d
 800f4ea:	781b      	ldrb	r3, [r3, #0]
 800f4ec:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800f4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800f4f0:	4618      	mov	r0, r3
 800f4f2:	3714      	adds	r7, #20
 800f4f4:	46bd      	mov	sp, r7
 800f4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4fa:	4770      	bx	lr

0800f4fc <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f4fc:	b580      	push	{r7, lr}
 800f4fe:	b082      	sub	sp, #8
 800f500:	af00      	add	r7, sp, #0
 800f502:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f7f1 fe2d 	bl	8001164 <HAL_Delay>
}
 800f50a:	bf00      	nop
 800f50c:	3708      	adds	r7, #8
 800f50e:	46bd      	mov	sp, r7
 800f510:	bd80      	pop	{r7, pc}
	...

0800f514 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f514:	b480      	push	{r7}
 800f516:	b085      	sub	sp, #20
 800f518:	af00      	add	r7, sp, #0
 800f51a:	4603      	mov	r3, r0
 800f51c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f51e:	2300      	movs	r3, #0
 800f520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f522:	79fb      	ldrb	r3, [r7, #7]
 800f524:	2b03      	cmp	r3, #3
 800f526:	d817      	bhi.n	800f558 <USBH_Get_USB_Status+0x44>
 800f528:	a201      	add	r2, pc, #4	@ (adr r2, 800f530 <USBH_Get_USB_Status+0x1c>)
 800f52a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f52e:	bf00      	nop
 800f530:	0800f541 	.word	0x0800f541
 800f534:	0800f547 	.word	0x0800f547
 800f538:	0800f54d 	.word	0x0800f54d
 800f53c:	0800f553 	.word	0x0800f553
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f540:	2300      	movs	r3, #0
 800f542:	73fb      	strb	r3, [r7, #15]
    break;
 800f544:	e00b      	b.n	800f55e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f546:	2302      	movs	r3, #2
 800f548:	73fb      	strb	r3, [r7, #15]
    break;
 800f54a:	e008      	b.n	800f55e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f54c:	2301      	movs	r3, #1
 800f54e:	73fb      	strb	r3, [r7, #15]
    break;
 800f550:	e005      	b.n	800f55e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f552:	2302      	movs	r3, #2
 800f554:	73fb      	strb	r3, [r7, #15]
    break;
 800f556:	e002      	b.n	800f55e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f558:	2302      	movs	r3, #2
 800f55a:	73fb      	strb	r3, [r7, #15]
    break;
 800f55c:	bf00      	nop
  }
  return usb_status;
 800f55e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f560:	4618      	mov	r0, r3
 800f562:	3714      	adds	r7, #20
 800f564:	46bd      	mov	sp, r7
 800f566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f56a:	4770      	bx	lr

0800f56c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800f56c:	b580      	push	{r7, lr}
 800f56e:	b084      	sub	sp, #16
 800f570:	af00      	add	r7, sp, #0
 800f572:	4603      	mov	r3, r0
 800f574:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800f576:	79fb      	ldrb	r3, [r7, #7]
 800f578:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800f57a:	79fb      	ldrb	r3, [r7, #7]
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d102      	bne.n	800f586 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800f580:	2300      	movs	r3, #0
 800f582:	73fb      	strb	r3, [r7, #15]
 800f584:	e001      	b.n	800f58a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800f586:	2301      	movs	r3, #1
 800f588:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_7,(GPIO_PinState)data);
 800f58a:	7bfb      	ldrb	r3, [r7, #15]
 800f58c:	461a      	mov	r2, r3
 800f58e:	2180      	movs	r1, #128	@ 0x80
 800f590:	4803      	ldr	r0, [pc, #12]	@ (800f5a0 <MX_DriverVbusFS+0x34>)
 800f592:	f7f2 f933 	bl	80017fc <HAL_GPIO_WritePin>
}
 800f596:	bf00      	nop
 800f598:	3710      	adds	r7, #16
 800f59a:	46bd      	mov	sp, r7
 800f59c:	bd80      	pop	{r7, pc}
 800f59e:	bf00      	nop
 800f5a0:	40020000 	.word	0x40020000

0800f5a4 <malloc>:
 800f5a4:	4b02      	ldr	r3, [pc, #8]	@ (800f5b0 <malloc+0xc>)
 800f5a6:	4601      	mov	r1, r0
 800f5a8:	6818      	ldr	r0, [r3, #0]
 800f5aa:	f000 b82d 	b.w	800f608 <_malloc_r>
 800f5ae:	bf00      	nop
 800f5b0:	20000120 	.word	0x20000120

0800f5b4 <free>:
 800f5b4:	4b02      	ldr	r3, [pc, #8]	@ (800f5c0 <free+0xc>)
 800f5b6:	4601      	mov	r1, r0
 800f5b8:	6818      	ldr	r0, [r3, #0]
 800f5ba:	f000 bb9d 	b.w	800fcf8 <_free_r>
 800f5be:	bf00      	nop
 800f5c0:	20000120 	.word	0x20000120

0800f5c4 <sbrk_aligned>:
 800f5c4:	b570      	push	{r4, r5, r6, lr}
 800f5c6:	4e0f      	ldr	r6, [pc, #60]	@ (800f604 <sbrk_aligned+0x40>)
 800f5c8:	460c      	mov	r4, r1
 800f5ca:	6831      	ldr	r1, [r6, #0]
 800f5cc:	4605      	mov	r5, r0
 800f5ce:	b911      	cbnz	r1, 800f5d6 <sbrk_aligned+0x12>
 800f5d0:	f000 fb34 	bl	800fc3c <_sbrk_r>
 800f5d4:	6030      	str	r0, [r6, #0]
 800f5d6:	4621      	mov	r1, r4
 800f5d8:	4628      	mov	r0, r5
 800f5da:	f000 fb2f 	bl	800fc3c <_sbrk_r>
 800f5de:	1c43      	adds	r3, r0, #1
 800f5e0:	d103      	bne.n	800f5ea <sbrk_aligned+0x26>
 800f5e2:	f04f 34ff 	mov.w	r4, #4294967295
 800f5e6:	4620      	mov	r0, r4
 800f5e8:	bd70      	pop	{r4, r5, r6, pc}
 800f5ea:	1cc4      	adds	r4, r0, #3
 800f5ec:	f024 0403 	bic.w	r4, r4, #3
 800f5f0:	42a0      	cmp	r0, r4
 800f5f2:	d0f8      	beq.n	800f5e6 <sbrk_aligned+0x22>
 800f5f4:	1a21      	subs	r1, r4, r0
 800f5f6:	4628      	mov	r0, r5
 800f5f8:	f000 fb20 	bl	800fc3c <_sbrk_r>
 800f5fc:	3001      	adds	r0, #1
 800f5fe:	d1f2      	bne.n	800f5e6 <sbrk_aligned+0x22>
 800f600:	e7ef      	b.n	800f5e2 <sbrk_aligned+0x1e>
 800f602:	bf00      	nop
 800f604:	20005524 	.word	0x20005524

0800f608 <_malloc_r>:
 800f608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f60c:	1ccd      	adds	r5, r1, #3
 800f60e:	f025 0503 	bic.w	r5, r5, #3
 800f612:	3508      	adds	r5, #8
 800f614:	2d0c      	cmp	r5, #12
 800f616:	bf38      	it	cc
 800f618:	250c      	movcc	r5, #12
 800f61a:	2d00      	cmp	r5, #0
 800f61c:	4606      	mov	r6, r0
 800f61e:	db01      	blt.n	800f624 <_malloc_r+0x1c>
 800f620:	42a9      	cmp	r1, r5
 800f622:	d904      	bls.n	800f62e <_malloc_r+0x26>
 800f624:	230c      	movs	r3, #12
 800f626:	6033      	str	r3, [r6, #0]
 800f628:	2000      	movs	r0, #0
 800f62a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f62e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f704 <_malloc_r+0xfc>
 800f632:	f000 f869 	bl	800f708 <__malloc_lock>
 800f636:	f8d8 3000 	ldr.w	r3, [r8]
 800f63a:	461c      	mov	r4, r3
 800f63c:	bb44      	cbnz	r4, 800f690 <_malloc_r+0x88>
 800f63e:	4629      	mov	r1, r5
 800f640:	4630      	mov	r0, r6
 800f642:	f7ff ffbf 	bl	800f5c4 <sbrk_aligned>
 800f646:	1c43      	adds	r3, r0, #1
 800f648:	4604      	mov	r4, r0
 800f64a:	d158      	bne.n	800f6fe <_malloc_r+0xf6>
 800f64c:	f8d8 4000 	ldr.w	r4, [r8]
 800f650:	4627      	mov	r7, r4
 800f652:	2f00      	cmp	r7, #0
 800f654:	d143      	bne.n	800f6de <_malloc_r+0xd6>
 800f656:	2c00      	cmp	r4, #0
 800f658:	d04b      	beq.n	800f6f2 <_malloc_r+0xea>
 800f65a:	6823      	ldr	r3, [r4, #0]
 800f65c:	4639      	mov	r1, r7
 800f65e:	4630      	mov	r0, r6
 800f660:	eb04 0903 	add.w	r9, r4, r3
 800f664:	f000 faea 	bl	800fc3c <_sbrk_r>
 800f668:	4581      	cmp	r9, r0
 800f66a:	d142      	bne.n	800f6f2 <_malloc_r+0xea>
 800f66c:	6821      	ldr	r1, [r4, #0]
 800f66e:	1a6d      	subs	r5, r5, r1
 800f670:	4629      	mov	r1, r5
 800f672:	4630      	mov	r0, r6
 800f674:	f7ff ffa6 	bl	800f5c4 <sbrk_aligned>
 800f678:	3001      	adds	r0, #1
 800f67a:	d03a      	beq.n	800f6f2 <_malloc_r+0xea>
 800f67c:	6823      	ldr	r3, [r4, #0]
 800f67e:	442b      	add	r3, r5
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	f8d8 3000 	ldr.w	r3, [r8]
 800f686:	685a      	ldr	r2, [r3, #4]
 800f688:	bb62      	cbnz	r2, 800f6e4 <_malloc_r+0xdc>
 800f68a:	f8c8 7000 	str.w	r7, [r8]
 800f68e:	e00f      	b.n	800f6b0 <_malloc_r+0xa8>
 800f690:	6822      	ldr	r2, [r4, #0]
 800f692:	1b52      	subs	r2, r2, r5
 800f694:	d420      	bmi.n	800f6d8 <_malloc_r+0xd0>
 800f696:	2a0b      	cmp	r2, #11
 800f698:	d917      	bls.n	800f6ca <_malloc_r+0xc2>
 800f69a:	1961      	adds	r1, r4, r5
 800f69c:	42a3      	cmp	r3, r4
 800f69e:	6025      	str	r5, [r4, #0]
 800f6a0:	bf18      	it	ne
 800f6a2:	6059      	strne	r1, [r3, #4]
 800f6a4:	6863      	ldr	r3, [r4, #4]
 800f6a6:	bf08      	it	eq
 800f6a8:	f8c8 1000 	streq.w	r1, [r8]
 800f6ac:	5162      	str	r2, [r4, r5]
 800f6ae:	604b      	str	r3, [r1, #4]
 800f6b0:	4630      	mov	r0, r6
 800f6b2:	f000 f82f 	bl	800f714 <__malloc_unlock>
 800f6b6:	f104 000b 	add.w	r0, r4, #11
 800f6ba:	1d23      	adds	r3, r4, #4
 800f6bc:	f020 0007 	bic.w	r0, r0, #7
 800f6c0:	1ac2      	subs	r2, r0, r3
 800f6c2:	bf1c      	itt	ne
 800f6c4:	1a1b      	subne	r3, r3, r0
 800f6c6:	50a3      	strne	r3, [r4, r2]
 800f6c8:	e7af      	b.n	800f62a <_malloc_r+0x22>
 800f6ca:	6862      	ldr	r2, [r4, #4]
 800f6cc:	42a3      	cmp	r3, r4
 800f6ce:	bf0c      	ite	eq
 800f6d0:	f8c8 2000 	streq.w	r2, [r8]
 800f6d4:	605a      	strne	r2, [r3, #4]
 800f6d6:	e7eb      	b.n	800f6b0 <_malloc_r+0xa8>
 800f6d8:	4623      	mov	r3, r4
 800f6da:	6864      	ldr	r4, [r4, #4]
 800f6dc:	e7ae      	b.n	800f63c <_malloc_r+0x34>
 800f6de:	463c      	mov	r4, r7
 800f6e0:	687f      	ldr	r7, [r7, #4]
 800f6e2:	e7b6      	b.n	800f652 <_malloc_r+0x4a>
 800f6e4:	461a      	mov	r2, r3
 800f6e6:	685b      	ldr	r3, [r3, #4]
 800f6e8:	42a3      	cmp	r3, r4
 800f6ea:	d1fb      	bne.n	800f6e4 <_malloc_r+0xdc>
 800f6ec:	2300      	movs	r3, #0
 800f6ee:	6053      	str	r3, [r2, #4]
 800f6f0:	e7de      	b.n	800f6b0 <_malloc_r+0xa8>
 800f6f2:	230c      	movs	r3, #12
 800f6f4:	6033      	str	r3, [r6, #0]
 800f6f6:	4630      	mov	r0, r6
 800f6f8:	f000 f80c 	bl	800f714 <__malloc_unlock>
 800f6fc:	e794      	b.n	800f628 <_malloc_r+0x20>
 800f6fe:	6005      	str	r5, [r0, #0]
 800f700:	e7d6      	b.n	800f6b0 <_malloc_r+0xa8>
 800f702:	bf00      	nop
 800f704:	20005528 	.word	0x20005528

0800f708 <__malloc_lock>:
 800f708:	4801      	ldr	r0, [pc, #4]	@ (800f710 <__malloc_lock+0x8>)
 800f70a:	f000 bae4 	b.w	800fcd6 <__retarget_lock_acquire_recursive>
 800f70e:	bf00      	nop
 800f710:	2000566c 	.word	0x2000566c

0800f714 <__malloc_unlock>:
 800f714:	4801      	ldr	r0, [pc, #4]	@ (800f71c <__malloc_unlock+0x8>)
 800f716:	f000 badf 	b.w	800fcd8 <__retarget_lock_release_recursive>
 800f71a:	bf00      	nop
 800f71c:	2000566c 	.word	0x2000566c

0800f720 <std>:
 800f720:	2300      	movs	r3, #0
 800f722:	b510      	push	{r4, lr}
 800f724:	4604      	mov	r4, r0
 800f726:	e9c0 3300 	strd	r3, r3, [r0]
 800f72a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f72e:	6083      	str	r3, [r0, #8]
 800f730:	8181      	strh	r1, [r0, #12]
 800f732:	6643      	str	r3, [r0, #100]	@ 0x64
 800f734:	81c2      	strh	r2, [r0, #14]
 800f736:	6183      	str	r3, [r0, #24]
 800f738:	4619      	mov	r1, r3
 800f73a:	2208      	movs	r2, #8
 800f73c:	305c      	adds	r0, #92	@ 0x5c
 800f73e:	f000 fa2d 	bl	800fb9c <memset>
 800f742:	4b0d      	ldr	r3, [pc, #52]	@ (800f778 <std+0x58>)
 800f744:	6263      	str	r3, [r4, #36]	@ 0x24
 800f746:	4b0d      	ldr	r3, [pc, #52]	@ (800f77c <std+0x5c>)
 800f748:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f74a:	4b0d      	ldr	r3, [pc, #52]	@ (800f780 <std+0x60>)
 800f74c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f74e:	4b0d      	ldr	r3, [pc, #52]	@ (800f784 <std+0x64>)
 800f750:	6323      	str	r3, [r4, #48]	@ 0x30
 800f752:	4b0d      	ldr	r3, [pc, #52]	@ (800f788 <std+0x68>)
 800f754:	6224      	str	r4, [r4, #32]
 800f756:	429c      	cmp	r4, r3
 800f758:	d006      	beq.n	800f768 <std+0x48>
 800f75a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f75e:	4294      	cmp	r4, r2
 800f760:	d002      	beq.n	800f768 <std+0x48>
 800f762:	33d0      	adds	r3, #208	@ 0xd0
 800f764:	429c      	cmp	r4, r3
 800f766:	d105      	bne.n	800f774 <std+0x54>
 800f768:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f76c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f770:	f000 bab0 	b.w	800fcd4 <__retarget_lock_init_recursive>
 800f774:	bd10      	pop	{r4, pc}
 800f776:	bf00      	nop
 800f778:	0800f9ed 	.word	0x0800f9ed
 800f77c:	0800fa0f 	.word	0x0800fa0f
 800f780:	0800fa47 	.word	0x0800fa47
 800f784:	0800fa6b 	.word	0x0800fa6b
 800f788:	2000552c 	.word	0x2000552c

0800f78c <stdio_exit_handler>:
 800f78c:	4a02      	ldr	r2, [pc, #8]	@ (800f798 <stdio_exit_handler+0xc>)
 800f78e:	4903      	ldr	r1, [pc, #12]	@ (800f79c <stdio_exit_handler+0x10>)
 800f790:	4803      	ldr	r0, [pc, #12]	@ (800f7a0 <stdio_exit_handler+0x14>)
 800f792:	f000 b869 	b.w	800f868 <_fwalk_sglue>
 800f796:	bf00      	nop
 800f798:	20000114 	.word	0x20000114
 800f79c:	080106e5 	.word	0x080106e5
 800f7a0:	20000124 	.word	0x20000124

0800f7a4 <cleanup_stdio>:
 800f7a4:	6841      	ldr	r1, [r0, #4]
 800f7a6:	4b0c      	ldr	r3, [pc, #48]	@ (800f7d8 <cleanup_stdio+0x34>)
 800f7a8:	4299      	cmp	r1, r3
 800f7aa:	b510      	push	{r4, lr}
 800f7ac:	4604      	mov	r4, r0
 800f7ae:	d001      	beq.n	800f7b4 <cleanup_stdio+0x10>
 800f7b0:	f000 ff98 	bl	80106e4 <_fflush_r>
 800f7b4:	68a1      	ldr	r1, [r4, #8]
 800f7b6:	4b09      	ldr	r3, [pc, #36]	@ (800f7dc <cleanup_stdio+0x38>)
 800f7b8:	4299      	cmp	r1, r3
 800f7ba:	d002      	beq.n	800f7c2 <cleanup_stdio+0x1e>
 800f7bc:	4620      	mov	r0, r4
 800f7be:	f000 ff91 	bl	80106e4 <_fflush_r>
 800f7c2:	68e1      	ldr	r1, [r4, #12]
 800f7c4:	4b06      	ldr	r3, [pc, #24]	@ (800f7e0 <cleanup_stdio+0x3c>)
 800f7c6:	4299      	cmp	r1, r3
 800f7c8:	d004      	beq.n	800f7d4 <cleanup_stdio+0x30>
 800f7ca:	4620      	mov	r0, r4
 800f7cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f7d0:	f000 bf88 	b.w	80106e4 <_fflush_r>
 800f7d4:	bd10      	pop	{r4, pc}
 800f7d6:	bf00      	nop
 800f7d8:	2000552c 	.word	0x2000552c
 800f7dc:	20005594 	.word	0x20005594
 800f7e0:	200055fc 	.word	0x200055fc

0800f7e4 <global_stdio_init.part.0>:
 800f7e4:	b510      	push	{r4, lr}
 800f7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800f814 <global_stdio_init.part.0+0x30>)
 800f7e8:	4c0b      	ldr	r4, [pc, #44]	@ (800f818 <global_stdio_init.part.0+0x34>)
 800f7ea:	4a0c      	ldr	r2, [pc, #48]	@ (800f81c <global_stdio_init.part.0+0x38>)
 800f7ec:	601a      	str	r2, [r3, #0]
 800f7ee:	4620      	mov	r0, r4
 800f7f0:	2200      	movs	r2, #0
 800f7f2:	2104      	movs	r1, #4
 800f7f4:	f7ff ff94 	bl	800f720 <std>
 800f7f8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f7fc:	2201      	movs	r2, #1
 800f7fe:	2109      	movs	r1, #9
 800f800:	f7ff ff8e 	bl	800f720 <std>
 800f804:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f808:	2202      	movs	r2, #2
 800f80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f80e:	2112      	movs	r1, #18
 800f810:	f7ff bf86 	b.w	800f720 <std>
 800f814:	20005664 	.word	0x20005664
 800f818:	2000552c 	.word	0x2000552c
 800f81c:	0800f78d 	.word	0x0800f78d

0800f820 <__sfp_lock_acquire>:
 800f820:	4801      	ldr	r0, [pc, #4]	@ (800f828 <__sfp_lock_acquire+0x8>)
 800f822:	f000 ba58 	b.w	800fcd6 <__retarget_lock_acquire_recursive>
 800f826:	bf00      	nop
 800f828:	2000566d 	.word	0x2000566d

0800f82c <__sfp_lock_release>:
 800f82c:	4801      	ldr	r0, [pc, #4]	@ (800f834 <__sfp_lock_release+0x8>)
 800f82e:	f000 ba53 	b.w	800fcd8 <__retarget_lock_release_recursive>
 800f832:	bf00      	nop
 800f834:	2000566d 	.word	0x2000566d

0800f838 <__sinit>:
 800f838:	b510      	push	{r4, lr}
 800f83a:	4604      	mov	r4, r0
 800f83c:	f7ff fff0 	bl	800f820 <__sfp_lock_acquire>
 800f840:	6a23      	ldr	r3, [r4, #32]
 800f842:	b11b      	cbz	r3, 800f84c <__sinit+0x14>
 800f844:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f848:	f7ff bff0 	b.w	800f82c <__sfp_lock_release>
 800f84c:	4b04      	ldr	r3, [pc, #16]	@ (800f860 <__sinit+0x28>)
 800f84e:	6223      	str	r3, [r4, #32]
 800f850:	4b04      	ldr	r3, [pc, #16]	@ (800f864 <__sinit+0x2c>)
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	2b00      	cmp	r3, #0
 800f856:	d1f5      	bne.n	800f844 <__sinit+0xc>
 800f858:	f7ff ffc4 	bl	800f7e4 <global_stdio_init.part.0>
 800f85c:	e7f2      	b.n	800f844 <__sinit+0xc>
 800f85e:	bf00      	nop
 800f860:	0800f7a5 	.word	0x0800f7a5
 800f864:	20005664 	.word	0x20005664

0800f868 <_fwalk_sglue>:
 800f868:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f86c:	4607      	mov	r7, r0
 800f86e:	4688      	mov	r8, r1
 800f870:	4614      	mov	r4, r2
 800f872:	2600      	movs	r6, #0
 800f874:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f878:	f1b9 0901 	subs.w	r9, r9, #1
 800f87c:	d505      	bpl.n	800f88a <_fwalk_sglue+0x22>
 800f87e:	6824      	ldr	r4, [r4, #0]
 800f880:	2c00      	cmp	r4, #0
 800f882:	d1f7      	bne.n	800f874 <_fwalk_sglue+0xc>
 800f884:	4630      	mov	r0, r6
 800f886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f88a:	89ab      	ldrh	r3, [r5, #12]
 800f88c:	2b01      	cmp	r3, #1
 800f88e:	d907      	bls.n	800f8a0 <_fwalk_sglue+0x38>
 800f890:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f894:	3301      	adds	r3, #1
 800f896:	d003      	beq.n	800f8a0 <_fwalk_sglue+0x38>
 800f898:	4629      	mov	r1, r5
 800f89a:	4638      	mov	r0, r7
 800f89c:	47c0      	blx	r8
 800f89e:	4306      	orrs	r6, r0
 800f8a0:	3568      	adds	r5, #104	@ 0x68
 800f8a2:	e7e9      	b.n	800f878 <_fwalk_sglue+0x10>

0800f8a4 <iprintf>:
 800f8a4:	b40f      	push	{r0, r1, r2, r3}
 800f8a6:	b507      	push	{r0, r1, r2, lr}
 800f8a8:	4906      	ldr	r1, [pc, #24]	@ (800f8c4 <iprintf+0x20>)
 800f8aa:	ab04      	add	r3, sp, #16
 800f8ac:	6808      	ldr	r0, [r1, #0]
 800f8ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8b2:	6881      	ldr	r1, [r0, #8]
 800f8b4:	9301      	str	r3, [sp, #4]
 800f8b6:	f000 fbeb 	bl	8010090 <_vfiprintf_r>
 800f8ba:	b003      	add	sp, #12
 800f8bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f8c0:	b004      	add	sp, #16
 800f8c2:	4770      	bx	lr
 800f8c4:	20000120 	.word	0x20000120

0800f8c8 <_puts_r>:
 800f8c8:	6a03      	ldr	r3, [r0, #32]
 800f8ca:	b570      	push	{r4, r5, r6, lr}
 800f8cc:	6884      	ldr	r4, [r0, #8]
 800f8ce:	4605      	mov	r5, r0
 800f8d0:	460e      	mov	r6, r1
 800f8d2:	b90b      	cbnz	r3, 800f8d8 <_puts_r+0x10>
 800f8d4:	f7ff ffb0 	bl	800f838 <__sinit>
 800f8d8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f8da:	07db      	lsls	r3, r3, #31
 800f8dc:	d405      	bmi.n	800f8ea <_puts_r+0x22>
 800f8de:	89a3      	ldrh	r3, [r4, #12]
 800f8e0:	0598      	lsls	r0, r3, #22
 800f8e2:	d402      	bmi.n	800f8ea <_puts_r+0x22>
 800f8e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f8e6:	f000 f9f6 	bl	800fcd6 <__retarget_lock_acquire_recursive>
 800f8ea:	89a3      	ldrh	r3, [r4, #12]
 800f8ec:	0719      	lsls	r1, r3, #28
 800f8ee:	d502      	bpl.n	800f8f6 <_puts_r+0x2e>
 800f8f0:	6923      	ldr	r3, [r4, #16]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	d135      	bne.n	800f962 <_puts_r+0x9a>
 800f8f6:	4621      	mov	r1, r4
 800f8f8:	4628      	mov	r0, r5
 800f8fa:	f000 f8f9 	bl	800faf0 <__swsetup_r>
 800f8fe:	b380      	cbz	r0, 800f962 <_puts_r+0x9a>
 800f900:	f04f 35ff 	mov.w	r5, #4294967295
 800f904:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f906:	07da      	lsls	r2, r3, #31
 800f908:	d405      	bmi.n	800f916 <_puts_r+0x4e>
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	059b      	lsls	r3, r3, #22
 800f90e:	d402      	bmi.n	800f916 <_puts_r+0x4e>
 800f910:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f912:	f000 f9e1 	bl	800fcd8 <__retarget_lock_release_recursive>
 800f916:	4628      	mov	r0, r5
 800f918:	bd70      	pop	{r4, r5, r6, pc}
 800f91a:	2b00      	cmp	r3, #0
 800f91c:	da04      	bge.n	800f928 <_puts_r+0x60>
 800f91e:	69a2      	ldr	r2, [r4, #24]
 800f920:	429a      	cmp	r2, r3
 800f922:	dc17      	bgt.n	800f954 <_puts_r+0x8c>
 800f924:	290a      	cmp	r1, #10
 800f926:	d015      	beq.n	800f954 <_puts_r+0x8c>
 800f928:	6823      	ldr	r3, [r4, #0]
 800f92a:	1c5a      	adds	r2, r3, #1
 800f92c:	6022      	str	r2, [r4, #0]
 800f92e:	7019      	strb	r1, [r3, #0]
 800f930:	68a3      	ldr	r3, [r4, #8]
 800f932:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f936:	3b01      	subs	r3, #1
 800f938:	60a3      	str	r3, [r4, #8]
 800f93a:	2900      	cmp	r1, #0
 800f93c:	d1ed      	bne.n	800f91a <_puts_r+0x52>
 800f93e:	2b00      	cmp	r3, #0
 800f940:	da11      	bge.n	800f966 <_puts_r+0x9e>
 800f942:	4622      	mov	r2, r4
 800f944:	210a      	movs	r1, #10
 800f946:	4628      	mov	r0, r5
 800f948:	f000 f893 	bl	800fa72 <__swbuf_r>
 800f94c:	3001      	adds	r0, #1
 800f94e:	d0d7      	beq.n	800f900 <_puts_r+0x38>
 800f950:	250a      	movs	r5, #10
 800f952:	e7d7      	b.n	800f904 <_puts_r+0x3c>
 800f954:	4622      	mov	r2, r4
 800f956:	4628      	mov	r0, r5
 800f958:	f000 f88b 	bl	800fa72 <__swbuf_r>
 800f95c:	3001      	adds	r0, #1
 800f95e:	d1e7      	bne.n	800f930 <_puts_r+0x68>
 800f960:	e7ce      	b.n	800f900 <_puts_r+0x38>
 800f962:	3e01      	subs	r6, #1
 800f964:	e7e4      	b.n	800f930 <_puts_r+0x68>
 800f966:	6823      	ldr	r3, [r4, #0]
 800f968:	1c5a      	adds	r2, r3, #1
 800f96a:	6022      	str	r2, [r4, #0]
 800f96c:	220a      	movs	r2, #10
 800f96e:	701a      	strb	r2, [r3, #0]
 800f970:	e7ee      	b.n	800f950 <_puts_r+0x88>
	...

0800f974 <puts>:
 800f974:	4b02      	ldr	r3, [pc, #8]	@ (800f980 <puts+0xc>)
 800f976:	4601      	mov	r1, r0
 800f978:	6818      	ldr	r0, [r3, #0]
 800f97a:	f7ff bfa5 	b.w	800f8c8 <_puts_r>
 800f97e:	bf00      	nop
 800f980:	20000120 	.word	0x20000120

0800f984 <sniprintf>:
 800f984:	b40c      	push	{r2, r3}
 800f986:	b530      	push	{r4, r5, lr}
 800f988:	4b17      	ldr	r3, [pc, #92]	@ (800f9e8 <sniprintf+0x64>)
 800f98a:	1e0c      	subs	r4, r1, #0
 800f98c:	681d      	ldr	r5, [r3, #0]
 800f98e:	b09d      	sub	sp, #116	@ 0x74
 800f990:	da08      	bge.n	800f9a4 <sniprintf+0x20>
 800f992:	238b      	movs	r3, #139	@ 0x8b
 800f994:	602b      	str	r3, [r5, #0]
 800f996:	f04f 30ff 	mov.w	r0, #4294967295
 800f99a:	b01d      	add	sp, #116	@ 0x74
 800f99c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f9a0:	b002      	add	sp, #8
 800f9a2:	4770      	bx	lr
 800f9a4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800f9a8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800f9ac:	bf14      	ite	ne
 800f9ae:	f104 33ff 	addne.w	r3, r4, #4294967295
 800f9b2:	4623      	moveq	r3, r4
 800f9b4:	9304      	str	r3, [sp, #16]
 800f9b6:	9307      	str	r3, [sp, #28]
 800f9b8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800f9bc:	9002      	str	r0, [sp, #8]
 800f9be:	9006      	str	r0, [sp, #24]
 800f9c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800f9c4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800f9c6:	ab21      	add	r3, sp, #132	@ 0x84
 800f9c8:	a902      	add	r1, sp, #8
 800f9ca:	4628      	mov	r0, r5
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	f000 fa39 	bl	800fe44 <_svfiprintf_r>
 800f9d2:	1c43      	adds	r3, r0, #1
 800f9d4:	bfbc      	itt	lt
 800f9d6:	238b      	movlt	r3, #139	@ 0x8b
 800f9d8:	602b      	strlt	r3, [r5, #0]
 800f9da:	2c00      	cmp	r4, #0
 800f9dc:	d0dd      	beq.n	800f99a <sniprintf+0x16>
 800f9de:	9b02      	ldr	r3, [sp, #8]
 800f9e0:	2200      	movs	r2, #0
 800f9e2:	701a      	strb	r2, [r3, #0]
 800f9e4:	e7d9      	b.n	800f99a <sniprintf+0x16>
 800f9e6:	bf00      	nop
 800f9e8:	20000120 	.word	0x20000120

0800f9ec <__sread>:
 800f9ec:	b510      	push	{r4, lr}
 800f9ee:	460c      	mov	r4, r1
 800f9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f9f4:	f000 f910 	bl	800fc18 <_read_r>
 800f9f8:	2800      	cmp	r0, #0
 800f9fa:	bfab      	itete	ge
 800f9fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f9fe:	89a3      	ldrhlt	r3, [r4, #12]
 800fa00:	181b      	addge	r3, r3, r0
 800fa02:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800fa06:	bfac      	ite	ge
 800fa08:	6563      	strge	r3, [r4, #84]	@ 0x54
 800fa0a:	81a3      	strhlt	r3, [r4, #12]
 800fa0c:	bd10      	pop	{r4, pc}

0800fa0e <__swrite>:
 800fa0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa12:	461f      	mov	r7, r3
 800fa14:	898b      	ldrh	r3, [r1, #12]
 800fa16:	05db      	lsls	r3, r3, #23
 800fa18:	4605      	mov	r5, r0
 800fa1a:	460c      	mov	r4, r1
 800fa1c:	4616      	mov	r6, r2
 800fa1e:	d505      	bpl.n	800fa2c <__swrite+0x1e>
 800fa20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa24:	2302      	movs	r3, #2
 800fa26:	2200      	movs	r2, #0
 800fa28:	f000 f8e4 	bl	800fbf4 <_lseek_r>
 800fa2c:	89a3      	ldrh	r3, [r4, #12]
 800fa2e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fa32:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fa36:	81a3      	strh	r3, [r4, #12]
 800fa38:	4632      	mov	r2, r6
 800fa3a:	463b      	mov	r3, r7
 800fa3c:	4628      	mov	r0, r5
 800fa3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa42:	f000 b90b 	b.w	800fc5c <_write_r>

0800fa46 <__sseek>:
 800fa46:	b510      	push	{r4, lr}
 800fa48:	460c      	mov	r4, r1
 800fa4a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa4e:	f000 f8d1 	bl	800fbf4 <_lseek_r>
 800fa52:	1c43      	adds	r3, r0, #1
 800fa54:	89a3      	ldrh	r3, [r4, #12]
 800fa56:	bf15      	itete	ne
 800fa58:	6560      	strne	r0, [r4, #84]	@ 0x54
 800fa5a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800fa5e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800fa62:	81a3      	strheq	r3, [r4, #12]
 800fa64:	bf18      	it	ne
 800fa66:	81a3      	strhne	r3, [r4, #12]
 800fa68:	bd10      	pop	{r4, pc}

0800fa6a <__sclose>:
 800fa6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fa6e:	f000 b8b1 	b.w	800fbd4 <_close_r>

0800fa72 <__swbuf_r>:
 800fa72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fa74:	460e      	mov	r6, r1
 800fa76:	4614      	mov	r4, r2
 800fa78:	4605      	mov	r5, r0
 800fa7a:	b118      	cbz	r0, 800fa84 <__swbuf_r+0x12>
 800fa7c:	6a03      	ldr	r3, [r0, #32]
 800fa7e:	b90b      	cbnz	r3, 800fa84 <__swbuf_r+0x12>
 800fa80:	f7ff feda 	bl	800f838 <__sinit>
 800fa84:	69a3      	ldr	r3, [r4, #24]
 800fa86:	60a3      	str	r3, [r4, #8]
 800fa88:	89a3      	ldrh	r3, [r4, #12]
 800fa8a:	071a      	lsls	r2, r3, #28
 800fa8c:	d501      	bpl.n	800fa92 <__swbuf_r+0x20>
 800fa8e:	6923      	ldr	r3, [r4, #16]
 800fa90:	b943      	cbnz	r3, 800faa4 <__swbuf_r+0x32>
 800fa92:	4621      	mov	r1, r4
 800fa94:	4628      	mov	r0, r5
 800fa96:	f000 f82b 	bl	800faf0 <__swsetup_r>
 800fa9a:	b118      	cbz	r0, 800faa4 <__swbuf_r+0x32>
 800fa9c:	f04f 37ff 	mov.w	r7, #4294967295
 800faa0:	4638      	mov	r0, r7
 800faa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800faa4:	6823      	ldr	r3, [r4, #0]
 800faa6:	6922      	ldr	r2, [r4, #16]
 800faa8:	1a98      	subs	r0, r3, r2
 800faaa:	6963      	ldr	r3, [r4, #20]
 800faac:	b2f6      	uxtb	r6, r6
 800faae:	4283      	cmp	r3, r0
 800fab0:	4637      	mov	r7, r6
 800fab2:	dc05      	bgt.n	800fac0 <__swbuf_r+0x4e>
 800fab4:	4621      	mov	r1, r4
 800fab6:	4628      	mov	r0, r5
 800fab8:	f000 fe14 	bl	80106e4 <_fflush_r>
 800fabc:	2800      	cmp	r0, #0
 800fabe:	d1ed      	bne.n	800fa9c <__swbuf_r+0x2a>
 800fac0:	68a3      	ldr	r3, [r4, #8]
 800fac2:	3b01      	subs	r3, #1
 800fac4:	60a3      	str	r3, [r4, #8]
 800fac6:	6823      	ldr	r3, [r4, #0]
 800fac8:	1c5a      	adds	r2, r3, #1
 800faca:	6022      	str	r2, [r4, #0]
 800facc:	701e      	strb	r6, [r3, #0]
 800face:	6962      	ldr	r2, [r4, #20]
 800fad0:	1c43      	adds	r3, r0, #1
 800fad2:	429a      	cmp	r2, r3
 800fad4:	d004      	beq.n	800fae0 <__swbuf_r+0x6e>
 800fad6:	89a3      	ldrh	r3, [r4, #12]
 800fad8:	07db      	lsls	r3, r3, #31
 800fada:	d5e1      	bpl.n	800faa0 <__swbuf_r+0x2e>
 800fadc:	2e0a      	cmp	r6, #10
 800fade:	d1df      	bne.n	800faa0 <__swbuf_r+0x2e>
 800fae0:	4621      	mov	r1, r4
 800fae2:	4628      	mov	r0, r5
 800fae4:	f000 fdfe 	bl	80106e4 <_fflush_r>
 800fae8:	2800      	cmp	r0, #0
 800faea:	d0d9      	beq.n	800faa0 <__swbuf_r+0x2e>
 800faec:	e7d6      	b.n	800fa9c <__swbuf_r+0x2a>
	...

0800faf0 <__swsetup_r>:
 800faf0:	b538      	push	{r3, r4, r5, lr}
 800faf2:	4b29      	ldr	r3, [pc, #164]	@ (800fb98 <__swsetup_r+0xa8>)
 800faf4:	4605      	mov	r5, r0
 800faf6:	6818      	ldr	r0, [r3, #0]
 800faf8:	460c      	mov	r4, r1
 800fafa:	b118      	cbz	r0, 800fb04 <__swsetup_r+0x14>
 800fafc:	6a03      	ldr	r3, [r0, #32]
 800fafe:	b90b      	cbnz	r3, 800fb04 <__swsetup_r+0x14>
 800fb00:	f7ff fe9a 	bl	800f838 <__sinit>
 800fb04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb08:	0719      	lsls	r1, r3, #28
 800fb0a:	d422      	bmi.n	800fb52 <__swsetup_r+0x62>
 800fb0c:	06da      	lsls	r2, r3, #27
 800fb0e:	d407      	bmi.n	800fb20 <__swsetup_r+0x30>
 800fb10:	2209      	movs	r2, #9
 800fb12:	602a      	str	r2, [r5, #0]
 800fb14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb18:	81a3      	strh	r3, [r4, #12]
 800fb1a:	f04f 30ff 	mov.w	r0, #4294967295
 800fb1e:	e033      	b.n	800fb88 <__swsetup_r+0x98>
 800fb20:	0758      	lsls	r0, r3, #29
 800fb22:	d512      	bpl.n	800fb4a <__swsetup_r+0x5a>
 800fb24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb26:	b141      	cbz	r1, 800fb3a <__swsetup_r+0x4a>
 800fb28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb2c:	4299      	cmp	r1, r3
 800fb2e:	d002      	beq.n	800fb36 <__swsetup_r+0x46>
 800fb30:	4628      	mov	r0, r5
 800fb32:	f000 f8e1 	bl	800fcf8 <_free_r>
 800fb36:	2300      	movs	r3, #0
 800fb38:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb3a:	89a3      	ldrh	r3, [r4, #12]
 800fb3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800fb40:	81a3      	strh	r3, [r4, #12]
 800fb42:	2300      	movs	r3, #0
 800fb44:	6063      	str	r3, [r4, #4]
 800fb46:	6923      	ldr	r3, [r4, #16]
 800fb48:	6023      	str	r3, [r4, #0]
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	f043 0308 	orr.w	r3, r3, #8
 800fb50:	81a3      	strh	r3, [r4, #12]
 800fb52:	6923      	ldr	r3, [r4, #16]
 800fb54:	b94b      	cbnz	r3, 800fb6a <__swsetup_r+0x7a>
 800fb56:	89a3      	ldrh	r3, [r4, #12]
 800fb58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800fb5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fb60:	d003      	beq.n	800fb6a <__swsetup_r+0x7a>
 800fb62:	4621      	mov	r1, r4
 800fb64:	4628      	mov	r0, r5
 800fb66:	f000 fe0b 	bl	8010780 <__smakebuf_r>
 800fb6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb6e:	f013 0201 	ands.w	r2, r3, #1
 800fb72:	d00a      	beq.n	800fb8a <__swsetup_r+0x9a>
 800fb74:	2200      	movs	r2, #0
 800fb76:	60a2      	str	r2, [r4, #8]
 800fb78:	6962      	ldr	r2, [r4, #20]
 800fb7a:	4252      	negs	r2, r2
 800fb7c:	61a2      	str	r2, [r4, #24]
 800fb7e:	6922      	ldr	r2, [r4, #16]
 800fb80:	b942      	cbnz	r2, 800fb94 <__swsetup_r+0xa4>
 800fb82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800fb86:	d1c5      	bne.n	800fb14 <__swsetup_r+0x24>
 800fb88:	bd38      	pop	{r3, r4, r5, pc}
 800fb8a:	0799      	lsls	r1, r3, #30
 800fb8c:	bf58      	it	pl
 800fb8e:	6962      	ldrpl	r2, [r4, #20]
 800fb90:	60a2      	str	r2, [r4, #8]
 800fb92:	e7f4      	b.n	800fb7e <__swsetup_r+0x8e>
 800fb94:	2000      	movs	r0, #0
 800fb96:	e7f7      	b.n	800fb88 <__swsetup_r+0x98>
 800fb98:	20000120 	.word	0x20000120

0800fb9c <memset>:
 800fb9c:	4402      	add	r2, r0
 800fb9e:	4603      	mov	r3, r0
 800fba0:	4293      	cmp	r3, r2
 800fba2:	d100      	bne.n	800fba6 <memset+0xa>
 800fba4:	4770      	bx	lr
 800fba6:	f803 1b01 	strb.w	r1, [r3], #1
 800fbaa:	e7f9      	b.n	800fba0 <memset+0x4>

0800fbac <strncpy>:
 800fbac:	b510      	push	{r4, lr}
 800fbae:	3901      	subs	r1, #1
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	b132      	cbz	r2, 800fbc2 <strncpy+0x16>
 800fbb4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800fbb8:	f803 4b01 	strb.w	r4, [r3], #1
 800fbbc:	3a01      	subs	r2, #1
 800fbbe:	2c00      	cmp	r4, #0
 800fbc0:	d1f7      	bne.n	800fbb2 <strncpy+0x6>
 800fbc2:	441a      	add	r2, r3
 800fbc4:	2100      	movs	r1, #0
 800fbc6:	4293      	cmp	r3, r2
 800fbc8:	d100      	bne.n	800fbcc <strncpy+0x20>
 800fbca:	bd10      	pop	{r4, pc}
 800fbcc:	f803 1b01 	strb.w	r1, [r3], #1
 800fbd0:	e7f9      	b.n	800fbc6 <strncpy+0x1a>
	...

0800fbd4 <_close_r>:
 800fbd4:	b538      	push	{r3, r4, r5, lr}
 800fbd6:	4d06      	ldr	r5, [pc, #24]	@ (800fbf0 <_close_r+0x1c>)
 800fbd8:	2300      	movs	r3, #0
 800fbda:	4604      	mov	r4, r0
 800fbdc:	4608      	mov	r0, r1
 800fbde:	602b      	str	r3, [r5, #0]
 800fbe0:	f7f1 f8a8 	bl	8000d34 <_close>
 800fbe4:	1c43      	adds	r3, r0, #1
 800fbe6:	d102      	bne.n	800fbee <_close_r+0x1a>
 800fbe8:	682b      	ldr	r3, [r5, #0]
 800fbea:	b103      	cbz	r3, 800fbee <_close_r+0x1a>
 800fbec:	6023      	str	r3, [r4, #0]
 800fbee:	bd38      	pop	{r3, r4, r5, pc}
 800fbf0:	20005668 	.word	0x20005668

0800fbf4 <_lseek_r>:
 800fbf4:	b538      	push	{r3, r4, r5, lr}
 800fbf6:	4d07      	ldr	r5, [pc, #28]	@ (800fc14 <_lseek_r+0x20>)
 800fbf8:	4604      	mov	r4, r0
 800fbfa:	4608      	mov	r0, r1
 800fbfc:	4611      	mov	r1, r2
 800fbfe:	2200      	movs	r2, #0
 800fc00:	602a      	str	r2, [r5, #0]
 800fc02:	461a      	mov	r2, r3
 800fc04:	f7f1 f8bd 	bl	8000d82 <_lseek>
 800fc08:	1c43      	adds	r3, r0, #1
 800fc0a:	d102      	bne.n	800fc12 <_lseek_r+0x1e>
 800fc0c:	682b      	ldr	r3, [r5, #0]
 800fc0e:	b103      	cbz	r3, 800fc12 <_lseek_r+0x1e>
 800fc10:	6023      	str	r3, [r4, #0]
 800fc12:	bd38      	pop	{r3, r4, r5, pc}
 800fc14:	20005668 	.word	0x20005668

0800fc18 <_read_r>:
 800fc18:	b538      	push	{r3, r4, r5, lr}
 800fc1a:	4d07      	ldr	r5, [pc, #28]	@ (800fc38 <_read_r+0x20>)
 800fc1c:	4604      	mov	r4, r0
 800fc1e:	4608      	mov	r0, r1
 800fc20:	4611      	mov	r1, r2
 800fc22:	2200      	movs	r2, #0
 800fc24:	602a      	str	r2, [r5, #0]
 800fc26:	461a      	mov	r2, r3
 800fc28:	f7f1 f838 	bl	8000c9c <_read>
 800fc2c:	1c43      	adds	r3, r0, #1
 800fc2e:	d102      	bne.n	800fc36 <_read_r+0x1e>
 800fc30:	682b      	ldr	r3, [r5, #0]
 800fc32:	b103      	cbz	r3, 800fc36 <_read_r+0x1e>
 800fc34:	6023      	str	r3, [r4, #0]
 800fc36:	bd38      	pop	{r3, r4, r5, pc}
 800fc38:	20005668 	.word	0x20005668

0800fc3c <_sbrk_r>:
 800fc3c:	b538      	push	{r3, r4, r5, lr}
 800fc3e:	4d06      	ldr	r5, [pc, #24]	@ (800fc58 <_sbrk_r+0x1c>)
 800fc40:	2300      	movs	r3, #0
 800fc42:	4604      	mov	r4, r0
 800fc44:	4608      	mov	r0, r1
 800fc46:	602b      	str	r3, [r5, #0]
 800fc48:	f7f1 f8a8 	bl	8000d9c <_sbrk>
 800fc4c:	1c43      	adds	r3, r0, #1
 800fc4e:	d102      	bne.n	800fc56 <_sbrk_r+0x1a>
 800fc50:	682b      	ldr	r3, [r5, #0]
 800fc52:	b103      	cbz	r3, 800fc56 <_sbrk_r+0x1a>
 800fc54:	6023      	str	r3, [r4, #0]
 800fc56:	bd38      	pop	{r3, r4, r5, pc}
 800fc58:	20005668 	.word	0x20005668

0800fc5c <_write_r>:
 800fc5c:	b538      	push	{r3, r4, r5, lr}
 800fc5e:	4d07      	ldr	r5, [pc, #28]	@ (800fc7c <_write_r+0x20>)
 800fc60:	4604      	mov	r4, r0
 800fc62:	4608      	mov	r0, r1
 800fc64:	4611      	mov	r1, r2
 800fc66:	2200      	movs	r2, #0
 800fc68:	602a      	str	r2, [r5, #0]
 800fc6a:	461a      	mov	r2, r3
 800fc6c:	f7f1 f846 	bl	8000cfc <_write>
 800fc70:	1c43      	adds	r3, r0, #1
 800fc72:	d102      	bne.n	800fc7a <_write_r+0x1e>
 800fc74:	682b      	ldr	r3, [r5, #0]
 800fc76:	b103      	cbz	r3, 800fc7a <_write_r+0x1e>
 800fc78:	6023      	str	r3, [r4, #0]
 800fc7a:	bd38      	pop	{r3, r4, r5, pc}
 800fc7c:	20005668 	.word	0x20005668

0800fc80 <__errno>:
 800fc80:	4b01      	ldr	r3, [pc, #4]	@ (800fc88 <__errno+0x8>)
 800fc82:	6818      	ldr	r0, [r3, #0]
 800fc84:	4770      	bx	lr
 800fc86:	bf00      	nop
 800fc88:	20000120 	.word	0x20000120

0800fc8c <__libc_init_array>:
 800fc8c:	b570      	push	{r4, r5, r6, lr}
 800fc8e:	4d0d      	ldr	r5, [pc, #52]	@ (800fcc4 <__libc_init_array+0x38>)
 800fc90:	4c0d      	ldr	r4, [pc, #52]	@ (800fcc8 <__libc_init_array+0x3c>)
 800fc92:	1b64      	subs	r4, r4, r5
 800fc94:	10a4      	asrs	r4, r4, #2
 800fc96:	2600      	movs	r6, #0
 800fc98:	42a6      	cmp	r6, r4
 800fc9a:	d109      	bne.n	800fcb0 <__libc_init_array+0x24>
 800fc9c:	4d0b      	ldr	r5, [pc, #44]	@ (800fccc <__libc_init_array+0x40>)
 800fc9e:	4c0c      	ldr	r4, [pc, #48]	@ (800fcd0 <__libc_init_array+0x44>)
 800fca0:	f000 fe1c 	bl	80108dc <_init>
 800fca4:	1b64      	subs	r4, r4, r5
 800fca6:	10a4      	asrs	r4, r4, #2
 800fca8:	2600      	movs	r6, #0
 800fcaa:	42a6      	cmp	r6, r4
 800fcac:	d105      	bne.n	800fcba <__libc_init_array+0x2e>
 800fcae:	bd70      	pop	{r4, r5, r6, pc}
 800fcb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcb4:	4798      	blx	r3
 800fcb6:	3601      	adds	r6, #1
 800fcb8:	e7ee      	b.n	800fc98 <__libc_init_array+0xc>
 800fcba:	f855 3b04 	ldr.w	r3, [r5], #4
 800fcbe:	4798      	blx	r3
 800fcc0:	3601      	adds	r6, #1
 800fcc2:	e7f2      	b.n	800fcaa <__libc_init_array+0x1e>
 800fcc4:	08011030 	.word	0x08011030
 800fcc8:	08011030 	.word	0x08011030
 800fccc:	08011030 	.word	0x08011030
 800fcd0:	08011034 	.word	0x08011034

0800fcd4 <__retarget_lock_init_recursive>:
 800fcd4:	4770      	bx	lr

0800fcd6 <__retarget_lock_acquire_recursive>:
 800fcd6:	4770      	bx	lr

0800fcd8 <__retarget_lock_release_recursive>:
 800fcd8:	4770      	bx	lr

0800fcda <memcpy>:
 800fcda:	440a      	add	r2, r1
 800fcdc:	4291      	cmp	r1, r2
 800fcde:	f100 33ff 	add.w	r3, r0, #4294967295
 800fce2:	d100      	bne.n	800fce6 <memcpy+0xc>
 800fce4:	4770      	bx	lr
 800fce6:	b510      	push	{r4, lr}
 800fce8:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fcec:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fcf0:	4291      	cmp	r1, r2
 800fcf2:	d1f9      	bne.n	800fce8 <memcpy+0xe>
 800fcf4:	bd10      	pop	{r4, pc}
	...

0800fcf8 <_free_r>:
 800fcf8:	b538      	push	{r3, r4, r5, lr}
 800fcfa:	4605      	mov	r5, r0
 800fcfc:	2900      	cmp	r1, #0
 800fcfe:	d041      	beq.n	800fd84 <_free_r+0x8c>
 800fd00:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fd04:	1f0c      	subs	r4, r1, #4
 800fd06:	2b00      	cmp	r3, #0
 800fd08:	bfb8      	it	lt
 800fd0a:	18e4      	addlt	r4, r4, r3
 800fd0c:	f7ff fcfc 	bl	800f708 <__malloc_lock>
 800fd10:	4a1d      	ldr	r2, [pc, #116]	@ (800fd88 <_free_r+0x90>)
 800fd12:	6813      	ldr	r3, [r2, #0]
 800fd14:	b933      	cbnz	r3, 800fd24 <_free_r+0x2c>
 800fd16:	6063      	str	r3, [r4, #4]
 800fd18:	6014      	str	r4, [r2, #0]
 800fd1a:	4628      	mov	r0, r5
 800fd1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fd20:	f7ff bcf8 	b.w	800f714 <__malloc_unlock>
 800fd24:	42a3      	cmp	r3, r4
 800fd26:	d908      	bls.n	800fd3a <_free_r+0x42>
 800fd28:	6820      	ldr	r0, [r4, #0]
 800fd2a:	1821      	adds	r1, r4, r0
 800fd2c:	428b      	cmp	r3, r1
 800fd2e:	bf01      	itttt	eq
 800fd30:	6819      	ldreq	r1, [r3, #0]
 800fd32:	685b      	ldreq	r3, [r3, #4]
 800fd34:	1809      	addeq	r1, r1, r0
 800fd36:	6021      	streq	r1, [r4, #0]
 800fd38:	e7ed      	b.n	800fd16 <_free_r+0x1e>
 800fd3a:	461a      	mov	r2, r3
 800fd3c:	685b      	ldr	r3, [r3, #4]
 800fd3e:	b10b      	cbz	r3, 800fd44 <_free_r+0x4c>
 800fd40:	42a3      	cmp	r3, r4
 800fd42:	d9fa      	bls.n	800fd3a <_free_r+0x42>
 800fd44:	6811      	ldr	r1, [r2, #0]
 800fd46:	1850      	adds	r0, r2, r1
 800fd48:	42a0      	cmp	r0, r4
 800fd4a:	d10b      	bne.n	800fd64 <_free_r+0x6c>
 800fd4c:	6820      	ldr	r0, [r4, #0]
 800fd4e:	4401      	add	r1, r0
 800fd50:	1850      	adds	r0, r2, r1
 800fd52:	4283      	cmp	r3, r0
 800fd54:	6011      	str	r1, [r2, #0]
 800fd56:	d1e0      	bne.n	800fd1a <_free_r+0x22>
 800fd58:	6818      	ldr	r0, [r3, #0]
 800fd5a:	685b      	ldr	r3, [r3, #4]
 800fd5c:	6053      	str	r3, [r2, #4]
 800fd5e:	4408      	add	r0, r1
 800fd60:	6010      	str	r0, [r2, #0]
 800fd62:	e7da      	b.n	800fd1a <_free_r+0x22>
 800fd64:	d902      	bls.n	800fd6c <_free_r+0x74>
 800fd66:	230c      	movs	r3, #12
 800fd68:	602b      	str	r3, [r5, #0]
 800fd6a:	e7d6      	b.n	800fd1a <_free_r+0x22>
 800fd6c:	6820      	ldr	r0, [r4, #0]
 800fd6e:	1821      	adds	r1, r4, r0
 800fd70:	428b      	cmp	r3, r1
 800fd72:	bf04      	itt	eq
 800fd74:	6819      	ldreq	r1, [r3, #0]
 800fd76:	685b      	ldreq	r3, [r3, #4]
 800fd78:	6063      	str	r3, [r4, #4]
 800fd7a:	bf04      	itt	eq
 800fd7c:	1809      	addeq	r1, r1, r0
 800fd7e:	6021      	streq	r1, [r4, #0]
 800fd80:	6054      	str	r4, [r2, #4]
 800fd82:	e7ca      	b.n	800fd1a <_free_r+0x22>
 800fd84:	bd38      	pop	{r3, r4, r5, pc}
 800fd86:	bf00      	nop
 800fd88:	20005528 	.word	0x20005528

0800fd8c <__ssputs_r>:
 800fd8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fd90:	688e      	ldr	r6, [r1, #8]
 800fd92:	461f      	mov	r7, r3
 800fd94:	42be      	cmp	r6, r7
 800fd96:	680b      	ldr	r3, [r1, #0]
 800fd98:	4682      	mov	sl, r0
 800fd9a:	460c      	mov	r4, r1
 800fd9c:	4690      	mov	r8, r2
 800fd9e:	d82d      	bhi.n	800fdfc <__ssputs_r+0x70>
 800fda0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fda4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800fda8:	d026      	beq.n	800fdf8 <__ssputs_r+0x6c>
 800fdaa:	6965      	ldr	r5, [r4, #20]
 800fdac:	6909      	ldr	r1, [r1, #16]
 800fdae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800fdb2:	eba3 0901 	sub.w	r9, r3, r1
 800fdb6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800fdba:	1c7b      	adds	r3, r7, #1
 800fdbc:	444b      	add	r3, r9
 800fdbe:	106d      	asrs	r5, r5, #1
 800fdc0:	429d      	cmp	r5, r3
 800fdc2:	bf38      	it	cc
 800fdc4:	461d      	movcc	r5, r3
 800fdc6:	0553      	lsls	r3, r2, #21
 800fdc8:	d527      	bpl.n	800fe1a <__ssputs_r+0x8e>
 800fdca:	4629      	mov	r1, r5
 800fdcc:	f7ff fc1c 	bl	800f608 <_malloc_r>
 800fdd0:	4606      	mov	r6, r0
 800fdd2:	b360      	cbz	r0, 800fe2e <__ssputs_r+0xa2>
 800fdd4:	6921      	ldr	r1, [r4, #16]
 800fdd6:	464a      	mov	r2, r9
 800fdd8:	f7ff ff7f 	bl	800fcda <memcpy>
 800fddc:	89a3      	ldrh	r3, [r4, #12]
 800fdde:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800fde2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fde6:	81a3      	strh	r3, [r4, #12]
 800fde8:	6126      	str	r6, [r4, #16]
 800fdea:	6165      	str	r5, [r4, #20]
 800fdec:	444e      	add	r6, r9
 800fdee:	eba5 0509 	sub.w	r5, r5, r9
 800fdf2:	6026      	str	r6, [r4, #0]
 800fdf4:	60a5      	str	r5, [r4, #8]
 800fdf6:	463e      	mov	r6, r7
 800fdf8:	42be      	cmp	r6, r7
 800fdfa:	d900      	bls.n	800fdfe <__ssputs_r+0x72>
 800fdfc:	463e      	mov	r6, r7
 800fdfe:	6820      	ldr	r0, [r4, #0]
 800fe00:	4632      	mov	r2, r6
 800fe02:	4641      	mov	r1, r8
 800fe04:	f000 fcf8 	bl	80107f8 <memmove>
 800fe08:	68a3      	ldr	r3, [r4, #8]
 800fe0a:	1b9b      	subs	r3, r3, r6
 800fe0c:	60a3      	str	r3, [r4, #8]
 800fe0e:	6823      	ldr	r3, [r4, #0]
 800fe10:	4433      	add	r3, r6
 800fe12:	6023      	str	r3, [r4, #0]
 800fe14:	2000      	movs	r0, #0
 800fe16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fe1a:	462a      	mov	r2, r5
 800fe1c:	f000 fd28 	bl	8010870 <_realloc_r>
 800fe20:	4606      	mov	r6, r0
 800fe22:	2800      	cmp	r0, #0
 800fe24:	d1e0      	bne.n	800fde8 <__ssputs_r+0x5c>
 800fe26:	6921      	ldr	r1, [r4, #16]
 800fe28:	4650      	mov	r0, sl
 800fe2a:	f7ff ff65 	bl	800fcf8 <_free_r>
 800fe2e:	230c      	movs	r3, #12
 800fe30:	f8ca 3000 	str.w	r3, [sl]
 800fe34:	89a3      	ldrh	r3, [r4, #12]
 800fe36:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fe3a:	81a3      	strh	r3, [r4, #12]
 800fe3c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe40:	e7e9      	b.n	800fe16 <__ssputs_r+0x8a>
	...

0800fe44 <_svfiprintf_r>:
 800fe44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe48:	4698      	mov	r8, r3
 800fe4a:	898b      	ldrh	r3, [r1, #12]
 800fe4c:	061b      	lsls	r3, r3, #24
 800fe4e:	b09d      	sub	sp, #116	@ 0x74
 800fe50:	4607      	mov	r7, r0
 800fe52:	460d      	mov	r5, r1
 800fe54:	4614      	mov	r4, r2
 800fe56:	d510      	bpl.n	800fe7a <_svfiprintf_r+0x36>
 800fe58:	690b      	ldr	r3, [r1, #16]
 800fe5a:	b973      	cbnz	r3, 800fe7a <_svfiprintf_r+0x36>
 800fe5c:	2140      	movs	r1, #64	@ 0x40
 800fe5e:	f7ff fbd3 	bl	800f608 <_malloc_r>
 800fe62:	6028      	str	r0, [r5, #0]
 800fe64:	6128      	str	r0, [r5, #16]
 800fe66:	b930      	cbnz	r0, 800fe76 <_svfiprintf_r+0x32>
 800fe68:	230c      	movs	r3, #12
 800fe6a:	603b      	str	r3, [r7, #0]
 800fe6c:	f04f 30ff 	mov.w	r0, #4294967295
 800fe70:	b01d      	add	sp, #116	@ 0x74
 800fe72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe76:	2340      	movs	r3, #64	@ 0x40
 800fe78:	616b      	str	r3, [r5, #20]
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	9309      	str	r3, [sp, #36]	@ 0x24
 800fe7e:	2320      	movs	r3, #32
 800fe80:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800fe84:	f8cd 800c 	str.w	r8, [sp, #12]
 800fe88:	2330      	movs	r3, #48	@ 0x30
 800fe8a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8010028 <_svfiprintf_r+0x1e4>
 800fe8e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800fe92:	f04f 0901 	mov.w	r9, #1
 800fe96:	4623      	mov	r3, r4
 800fe98:	469a      	mov	sl, r3
 800fe9a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800fe9e:	b10a      	cbz	r2, 800fea4 <_svfiprintf_r+0x60>
 800fea0:	2a25      	cmp	r2, #37	@ 0x25
 800fea2:	d1f9      	bne.n	800fe98 <_svfiprintf_r+0x54>
 800fea4:	ebba 0b04 	subs.w	fp, sl, r4
 800fea8:	d00b      	beq.n	800fec2 <_svfiprintf_r+0x7e>
 800feaa:	465b      	mov	r3, fp
 800feac:	4622      	mov	r2, r4
 800feae:	4629      	mov	r1, r5
 800feb0:	4638      	mov	r0, r7
 800feb2:	f7ff ff6b 	bl	800fd8c <__ssputs_r>
 800feb6:	3001      	adds	r0, #1
 800feb8:	f000 80a7 	beq.w	801000a <_svfiprintf_r+0x1c6>
 800febc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800febe:	445a      	add	r2, fp
 800fec0:	9209      	str	r2, [sp, #36]	@ 0x24
 800fec2:	f89a 3000 	ldrb.w	r3, [sl]
 800fec6:	2b00      	cmp	r3, #0
 800fec8:	f000 809f 	beq.w	801000a <_svfiprintf_r+0x1c6>
 800fecc:	2300      	movs	r3, #0
 800fece:	f04f 32ff 	mov.w	r2, #4294967295
 800fed2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800fed6:	f10a 0a01 	add.w	sl, sl, #1
 800feda:	9304      	str	r3, [sp, #16]
 800fedc:	9307      	str	r3, [sp, #28]
 800fede:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800fee2:	931a      	str	r3, [sp, #104]	@ 0x68
 800fee4:	4654      	mov	r4, sl
 800fee6:	2205      	movs	r2, #5
 800fee8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800feec:	484e      	ldr	r0, [pc, #312]	@ (8010028 <_svfiprintf_r+0x1e4>)
 800feee:	f7f0 f98f 	bl	8000210 <memchr>
 800fef2:	9a04      	ldr	r2, [sp, #16]
 800fef4:	b9d8      	cbnz	r0, 800ff2e <_svfiprintf_r+0xea>
 800fef6:	06d0      	lsls	r0, r2, #27
 800fef8:	bf44      	itt	mi
 800fefa:	2320      	movmi	r3, #32
 800fefc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff00:	0711      	lsls	r1, r2, #28
 800ff02:	bf44      	itt	mi
 800ff04:	232b      	movmi	r3, #43	@ 0x2b
 800ff06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ff0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ff0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff10:	d015      	beq.n	800ff3e <_svfiprintf_r+0xfa>
 800ff12:	9a07      	ldr	r2, [sp, #28]
 800ff14:	4654      	mov	r4, sl
 800ff16:	2000      	movs	r0, #0
 800ff18:	f04f 0c0a 	mov.w	ip, #10
 800ff1c:	4621      	mov	r1, r4
 800ff1e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ff22:	3b30      	subs	r3, #48	@ 0x30
 800ff24:	2b09      	cmp	r3, #9
 800ff26:	d94b      	bls.n	800ffc0 <_svfiprintf_r+0x17c>
 800ff28:	b1b0      	cbz	r0, 800ff58 <_svfiprintf_r+0x114>
 800ff2a:	9207      	str	r2, [sp, #28]
 800ff2c:	e014      	b.n	800ff58 <_svfiprintf_r+0x114>
 800ff2e:	eba0 0308 	sub.w	r3, r0, r8
 800ff32:	fa09 f303 	lsl.w	r3, r9, r3
 800ff36:	4313      	orrs	r3, r2
 800ff38:	9304      	str	r3, [sp, #16]
 800ff3a:	46a2      	mov	sl, r4
 800ff3c:	e7d2      	b.n	800fee4 <_svfiprintf_r+0xa0>
 800ff3e:	9b03      	ldr	r3, [sp, #12]
 800ff40:	1d19      	adds	r1, r3, #4
 800ff42:	681b      	ldr	r3, [r3, #0]
 800ff44:	9103      	str	r1, [sp, #12]
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	bfbb      	ittet	lt
 800ff4a:	425b      	neglt	r3, r3
 800ff4c:	f042 0202 	orrlt.w	r2, r2, #2
 800ff50:	9307      	strge	r3, [sp, #28]
 800ff52:	9307      	strlt	r3, [sp, #28]
 800ff54:	bfb8      	it	lt
 800ff56:	9204      	strlt	r2, [sp, #16]
 800ff58:	7823      	ldrb	r3, [r4, #0]
 800ff5a:	2b2e      	cmp	r3, #46	@ 0x2e
 800ff5c:	d10a      	bne.n	800ff74 <_svfiprintf_r+0x130>
 800ff5e:	7863      	ldrb	r3, [r4, #1]
 800ff60:	2b2a      	cmp	r3, #42	@ 0x2a
 800ff62:	d132      	bne.n	800ffca <_svfiprintf_r+0x186>
 800ff64:	9b03      	ldr	r3, [sp, #12]
 800ff66:	1d1a      	adds	r2, r3, #4
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	9203      	str	r2, [sp, #12]
 800ff6c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ff70:	3402      	adds	r4, #2
 800ff72:	9305      	str	r3, [sp, #20]
 800ff74:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8010038 <_svfiprintf_r+0x1f4>
 800ff78:	7821      	ldrb	r1, [r4, #0]
 800ff7a:	2203      	movs	r2, #3
 800ff7c:	4650      	mov	r0, sl
 800ff7e:	f7f0 f947 	bl	8000210 <memchr>
 800ff82:	b138      	cbz	r0, 800ff94 <_svfiprintf_r+0x150>
 800ff84:	9b04      	ldr	r3, [sp, #16]
 800ff86:	eba0 000a 	sub.w	r0, r0, sl
 800ff8a:	2240      	movs	r2, #64	@ 0x40
 800ff8c:	4082      	lsls	r2, r0
 800ff8e:	4313      	orrs	r3, r2
 800ff90:	3401      	adds	r4, #1
 800ff92:	9304      	str	r3, [sp, #16]
 800ff94:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ff98:	4824      	ldr	r0, [pc, #144]	@ (801002c <_svfiprintf_r+0x1e8>)
 800ff9a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ff9e:	2206      	movs	r2, #6
 800ffa0:	f7f0 f936 	bl	8000210 <memchr>
 800ffa4:	2800      	cmp	r0, #0
 800ffa6:	d036      	beq.n	8010016 <_svfiprintf_r+0x1d2>
 800ffa8:	4b21      	ldr	r3, [pc, #132]	@ (8010030 <_svfiprintf_r+0x1ec>)
 800ffaa:	bb1b      	cbnz	r3, 800fff4 <_svfiprintf_r+0x1b0>
 800ffac:	9b03      	ldr	r3, [sp, #12]
 800ffae:	3307      	adds	r3, #7
 800ffb0:	f023 0307 	bic.w	r3, r3, #7
 800ffb4:	3308      	adds	r3, #8
 800ffb6:	9303      	str	r3, [sp, #12]
 800ffb8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffba:	4433      	add	r3, r6
 800ffbc:	9309      	str	r3, [sp, #36]	@ 0x24
 800ffbe:	e76a      	b.n	800fe96 <_svfiprintf_r+0x52>
 800ffc0:	fb0c 3202 	mla	r2, ip, r2, r3
 800ffc4:	460c      	mov	r4, r1
 800ffc6:	2001      	movs	r0, #1
 800ffc8:	e7a8      	b.n	800ff1c <_svfiprintf_r+0xd8>
 800ffca:	2300      	movs	r3, #0
 800ffcc:	3401      	adds	r4, #1
 800ffce:	9305      	str	r3, [sp, #20]
 800ffd0:	4619      	mov	r1, r3
 800ffd2:	f04f 0c0a 	mov.w	ip, #10
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ffdc:	3a30      	subs	r2, #48	@ 0x30
 800ffde:	2a09      	cmp	r2, #9
 800ffe0:	d903      	bls.n	800ffea <_svfiprintf_r+0x1a6>
 800ffe2:	2b00      	cmp	r3, #0
 800ffe4:	d0c6      	beq.n	800ff74 <_svfiprintf_r+0x130>
 800ffe6:	9105      	str	r1, [sp, #20]
 800ffe8:	e7c4      	b.n	800ff74 <_svfiprintf_r+0x130>
 800ffea:	fb0c 2101 	mla	r1, ip, r1, r2
 800ffee:	4604      	mov	r4, r0
 800fff0:	2301      	movs	r3, #1
 800fff2:	e7f0      	b.n	800ffd6 <_svfiprintf_r+0x192>
 800fff4:	ab03      	add	r3, sp, #12
 800fff6:	9300      	str	r3, [sp, #0]
 800fff8:	462a      	mov	r2, r5
 800fffa:	4b0e      	ldr	r3, [pc, #56]	@ (8010034 <_svfiprintf_r+0x1f0>)
 800fffc:	a904      	add	r1, sp, #16
 800fffe:	4638      	mov	r0, r7
 8010000:	f3af 8000 	nop.w
 8010004:	1c42      	adds	r2, r0, #1
 8010006:	4606      	mov	r6, r0
 8010008:	d1d6      	bne.n	800ffb8 <_svfiprintf_r+0x174>
 801000a:	89ab      	ldrh	r3, [r5, #12]
 801000c:	065b      	lsls	r3, r3, #25
 801000e:	f53f af2d 	bmi.w	800fe6c <_svfiprintf_r+0x28>
 8010012:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010014:	e72c      	b.n	800fe70 <_svfiprintf_r+0x2c>
 8010016:	ab03      	add	r3, sp, #12
 8010018:	9300      	str	r3, [sp, #0]
 801001a:	462a      	mov	r2, r5
 801001c:	4b05      	ldr	r3, [pc, #20]	@ (8010034 <_svfiprintf_r+0x1f0>)
 801001e:	a904      	add	r1, sp, #16
 8010020:	4638      	mov	r0, r7
 8010022:	f000 f9bb 	bl	801039c <_printf_i>
 8010026:	e7ed      	b.n	8010004 <_svfiprintf_r+0x1c0>
 8010028:	08010ff4 	.word	0x08010ff4
 801002c:	08010ffe 	.word	0x08010ffe
 8010030:	00000000 	.word	0x00000000
 8010034:	0800fd8d 	.word	0x0800fd8d
 8010038:	08010ffa 	.word	0x08010ffa

0801003c <__sfputc_r>:
 801003c:	6893      	ldr	r3, [r2, #8]
 801003e:	3b01      	subs	r3, #1
 8010040:	2b00      	cmp	r3, #0
 8010042:	b410      	push	{r4}
 8010044:	6093      	str	r3, [r2, #8]
 8010046:	da08      	bge.n	801005a <__sfputc_r+0x1e>
 8010048:	6994      	ldr	r4, [r2, #24]
 801004a:	42a3      	cmp	r3, r4
 801004c:	db01      	blt.n	8010052 <__sfputc_r+0x16>
 801004e:	290a      	cmp	r1, #10
 8010050:	d103      	bne.n	801005a <__sfputc_r+0x1e>
 8010052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010056:	f7ff bd0c 	b.w	800fa72 <__swbuf_r>
 801005a:	6813      	ldr	r3, [r2, #0]
 801005c:	1c58      	adds	r0, r3, #1
 801005e:	6010      	str	r0, [r2, #0]
 8010060:	7019      	strb	r1, [r3, #0]
 8010062:	4608      	mov	r0, r1
 8010064:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010068:	4770      	bx	lr

0801006a <__sfputs_r>:
 801006a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801006c:	4606      	mov	r6, r0
 801006e:	460f      	mov	r7, r1
 8010070:	4614      	mov	r4, r2
 8010072:	18d5      	adds	r5, r2, r3
 8010074:	42ac      	cmp	r4, r5
 8010076:	d101      	bne.n	801007c <__sfputs_r+0x12>
 8010078:	2000      	movs	r0, #0
 801007a:	e007      	b.n	801008c <__sfputs_r+0x22>
 801007c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010080:	463a      	mov	r2, r7
 8010082:	4630      	mov	r0, r6
 8010084:	f7ff ffda 	bl	801003c <__sfputc_r>
 8010088:	1c43      	adds	r3, r0, #1
 801008a:	d1f3      	bne.n	8010074 <__sfputs_r+0xa>
 801008c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010090 <_vfiprintf_r>:
 8010090:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010094:	460d      	mov	r5, r1
 8010096:	b09d      	sub	sp, #116	@ 0x74
 8010098:	4614      	mov	r4, r2
 801009a:	4698      	mov	r8, r3
 801009c:	4606      	mov	r6, r0
 801009e:	b118      	cbz	r0, 80100a8 <_vfiprintf_r+0x18>
 80100a0:	6a03      	ldr	r3, [r0, #32]
 80100a2:	b90b      	cbnz	r3, 80100a8 <_vfiprintf_r+0x18>
 80100a4:	f7ff fbc8 	bl	800f838 <__sinit>
 80100a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100aa:	07d9      	lsls	r1, r3, #31
 80100ac:	d405      	bmi.n	80100ba <_vfiprintf_r+0x2a>
 80100ae:	89ab      	ldrh	r3, [r5, #12]
 80100b0:	059a      	lsls	r2, r3, #22
 80100b2:	d402      	bmi.n	80100ba <_vfiprintf_r+0x2a>
 80100b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100b6:	f7ff fe0e 	bl	800fcd6 <__retarget_lock_acquire_recursive>
 80100ba:	89ab      	ldrh	r3, [r5, #12]
 80100bc:	071b      	lsls	r3, r3, #28
 80100be:	d501      	bpl.n	80100c4 <_vfiprintf_r+0x34>
 80100c0:	692b      	ldr	r3, [r5, #16]
 80100c2:	b99b      	cbnz	r3, 80100ec <_vfiprintf_r+0x5c>
 80100c4:	4629      	mov	r1, r5
 80100c6:	4630      	mov	r0, r6
 80100c8:	f7ff fd12 	bl	800faf0 <__swsetup_r>
 80100cc:	b170      	cbz	r0, 80100ec <_vfiprintf_r+0x5c>
 80100ce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80100d0:	07dc      	lsls	r4, r3, #31
 80100d2:	d504      	bpl.n	80100de <_vfiprintf_r+0x4e>
 80100d4:	f04f 30ff 	mov.w	r0, #4294967295
 80100d8:	b01d      	add	sp, #116	@ 0x74
 80100da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80100de:	89ab      	ldrh	r3, [r5, #12]
 80100e0:	0598      	lsls	r0, r3, #22
 80100e2:	d4f7      	bmi.n	80100d4 <_vfiprintf_r+0x44>
 80100e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80100e6:	f7ff fdf7 	bl	800fcd8 <__retarget_lock_release_recursive>
 80100ea:	e7f3      	b.n	80100d4 <_vfiprintf_r+0x44>
 80100ec:	2300      	movs	r3, #0
 80100ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80100f0:	2320      	movs	r3, #32
 80100f2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80100f6:	f8cd 800c 	str.w	r8, [sp, #12]
 80100fa:	2330      	movs	r3, #48	@ 0x30
 80100fc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80102ac <_vfiprintf_r+0x21c>
 8010100:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010104:	f04f 0901 	mov.w	r9, #1
 8010108:	4623      	mov	r3, r4
 801010a:	469a      	mov	sl, r3
 801010c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010110:	b10a      	cbz	r2, 8010116 <_vfiprintf_r+0x86>
 8010112:	2a25      	cmp	r2, #37	@ 0x25
 8010114:	d1f9      	bne.n	801010a <_vfiprintf_r+0x7a>
 8010116:	ebba 0b04 	subs.w	fp, sl, r4
 801011a:	d00b      	beq.n	8010134 <_vfiprintf_r+0xa4>
 801011c:	465b      	mov	r3, fp
 801011e:	4622      	mov	r2, r4
 8010120:	4629      	mov	r1, r5
 8010122:	4630      	mov	r0, r6
 8010124:	f7ff ffa1 	bl	801006a <__sfputs_r>
 8010128:	3001      	adds	r0, #1
 801012a:	f000 80a7 	beq.w	801027c <_vfiprintf_r+0x1ec>
 801012e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010130:	445a      	add	r2, fp
 8010132:	9209      	str	r2, [sp, #36]	@ 0x24
 8010134:	f89a 3000 	ldrb.w	r3, [sl]
 8010138:	2b00      	cmp	r3, #0
 801013a:	f000 809f 	beq.w	801027c <_vfiprintf_r+0x1ec>
 801013e:	2300      	movs	r3, #0
 8010140:	f04f 32ff 	mov.w	r2, #4294967295
 8010144:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010148:	f10a 0a01 	add.w	sl, sl, #1
 801014c:	9304      	str	r3, [sp, #16]
 801014e:	9307      	str	r3, [sp, #28]
 8010150:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010154:	931a      	str	r3, [sp, #104]	@ 0x68
 8010156:	4654      	mov	r4, sl
 8010158:	2205      	movs	r2, #5
 801015a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801015e:	4853      	ldr	r0, [pc, #332]	@ (80102ac <_vfiprintf_r+0x21c>)
 8010160:	f7f0 f856 	bl	8000210 <memchr>
 8010164:	9a04      	ldr	r2, [sp, #16]
 8010166:	b9d8      	cbnz	r0, 80101a0 <_vfiprintf_r+0x110>
 8010168:	06d1      	lsls	r1, r2, #27
 801016a:	bf44      	itt	mi
 801016c:	2320      	movmi	r3, #32
 801016e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010172:	0713      	lsls	r3, r2, #28
 8010174:	bf44      	itt	mi
 8010176:	232b      	movmi	r3, #43	@ 0x2b
 8010178:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801017c:	f89a 3000 	ldrb.w	r3, [sl]
 8010180:	2b2a      	cmp	r3, #42	@ 0x2a
 8010182:	d015      	beq.n	80101b0 <_vfiprintf_r+0x120>
 8010184:	9a07      	ldr	r2, [sp, #28]
 8010186:	4654      	mov	r4, sl
 8010188:	2000      	movs	r0, #0
 801018a:	f04f 0c0a 	mov.w	ip, #10
 801018e:	4621      	mov	r1, r4
 8010190:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010194:	3b30      	subs	r3, #48	@ 0x30
 8010196:	2b09      	cmp	r3, #9
 8010198:	d94b      	bls.n	8010232 <_vfiprintf_r+0x1a2>
 801019a:	b1b0      	cbz	r0, 80101ca <_vfiprintf_r+0x13a>
 801019c:	9207      	str	r2, [sp, #28]
 801019e:	e014      	b.n	80101ca <_vfiprintf_r+0x13a>
 80101a0:	eba0 0308 	sub.w	r3, r0, r8
 80101a4:	fa09 f303 	lsl.w	r3, r9, r3
 80101a8:	4313      	orrs	r3, r2
 80101aa:	9304      	str	r3, [sp, #16]
 80101ac:	46a2      	mov	sl, r4
 80101ae:	e7d2      	b.n	8010156 <_vfiprintf_r+0xc6>
 80101b0:	9b03      	ldr	r3, [sp, #12]
 80101b2:	1d19      	adds	r1, r3, #4
 80101b4:	681b      	ldr	r3, [r3, #0]
 80101b6:	9103      	str	r1, [sp, #12]
 80101b8:	2b00      	cmp	r3, #0
 80101ba:	bfbb      	ittet	lt
 80101bc:	425b      	neglt	r3, r3
 80101be:	f042 0202 	orrlt.w	r2, r2, #2
 80101c2:	9307      	strge	r3, [sp, #28]
 80101c4:	9307      	strlt	r3, [sp, #28]
 80101c6:	bfb8      	it	lt
 80101c8:	9204      	strlt	r2, [sp, #16]
 80101ca:	7823      	ldrb	r3, [r4, #0]
 80101cc:	2b2e      	cmp	r3, #46	@ 0x2e
 80101ce:	d10a      	bne.n	80101e6 <_vfiprintf_r+0x156>
 80101d0:	7863      	ldrb	r3, [r4, #1]
 80101d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80101d4:	d132      	bne.n	801023c <_vfiprintf_r+0x1ac>
 80101d6:	9b03      	ldr	r3, [sp, #12]
 80101d8:	1d1a      	adds	r2, r3, #4
 80101da:	681b      	ldr	r3, [r3, #0]
 80101dc:	9203      	str	r2, [sp, #12]
 80101de:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80101e2:	3402      	adds	r4, #2
 80101e4:	9305      	str	r3, [sp, #20]
 80101e6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80102bc <_vfiprintf_r+0x22c>
 80101ea:	7821      	ldrb	r1, [r4, #0]
 80101ec:	2203      	movs	r2, #3
 80101ee:	4650      	mov	r0, sl
 80101f0:	f7f0 f80e 	bl	8000210 <memchr>
 80101f4:	b138      	cbz	r0, 8010206 <_vfiprintf_r+0x176>
 80101f6:	9b04      	ldr	r3, [sp, #16]
 80101f8:	eba0 000a 	sub.w	r0, r0, sl
 80101fc:	2240      	movs	r2, #64	@ 0x40
 80101fe:	4082      	lsls	r2, r0
 8010200:	4313      	orrs	r3, r2
 8010202:	3401      	adds	r4, #1
 8010204:	9304      	str	r3, [sp, #16]
 8010206:	f814 1b01 	ldrb.w	r1, [r4], #1
 801020a:	4829      	ldr	r0, [pc, #164]	@ (80102b0 <_vfiprintf_r+0x220>)
 801020c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8010210:	2206      	movs	r2, #6
 8010212:	f7ef fffd 	bl	8000210 <memchr>
 8010216:	2800      	cmp	r0, #0
 8010218:	d03f      	beq.n	801029a <_vfiprintf_r+0x20a>
 801021a:	4b26      	ldr	r3, [pc, #152]	@ (80102b4 <_vfiprintf_r+0x224>)
 801021c:	bb1b      	cbnz	r3, 8010266 <_vfiprintf_r+0x1d6>
 801021e:	9b03      	ldr	r3, [sp, #12]
 8010220:	3307      	adds	r3, #7
 8010222:	f023 0307 	bic.w	r3, r3, #7
 8010226:	3308      	adds	r3, #8
 8010228:	9303      	str	r3, [sp, #12]
 801022a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801022c:	443b      	add	r3, r7
 801022e:	9309      	str	r3, [sp, #36]	@ 0x24
 8010230:	e76a      	b.n	8010108 <_vfiprintf_r+0x78>
 8010232:	fb0c 3202 	mla	r2, ip, r2, r3
 8010236:	460c      	mov	r4, r1
 8010238:	2001      	movs	r0, #1
 801023a:	e7a8      	b.n	801018e <_vfiprintf_r+0xfe>
 801023c:	2300      	movs	r3, #0
 801023e:	3401      	adds	r4, #1
 8010240:	9305      	str	r3, [sp, #20]
 8010242:	4619      	mov	r1, r3
 8010244:	f04f 0c0a 	mov.w	ip, #10
 8010248:	4620      	mov	r0, r4
 801024a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801024e:	3a30      	subs	r2, #48	@ 0x30
 8010250:	2a09      	cmp	r2, #9
 8010252:	d903      	bls.n	801025c <_vfiprintf_r+0x1cc>
 8010254:	2b00      	cmp	r3, #0
 8010256:	d0c6      	beq.n	80101e6 <_vfiprintf_r+0x156>
 8010258:	9105      	str	r1, [sp, #20]
 801025a:	e7c4      	b.n	80101e6 <_vfiprintf_r+0x156>
 801025c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010260:	4604      	mov	r4, r0
 8010262:	2301      	movs	r3, #1
 8010264:	e7f0      	b.n	8010248 <_vfiprintf_r+0x1b8>
 8010266:	ab03      	add	r3, sp, #12
 8010268:	9300      	str	r3, [sp, #0]
 801026a:	462a      	mov	r2, r5
 801026c:	4b12      	ldr	r3, [pc, #72]	@ (80102b8 <_vfiprintf_r+0x228>)
 801026e:	a904      	add	r1, sp, #16
 8010270:	4630      	mov	r0, r6
 8010272:	f3af 8000 	nop.w
 8010276:	4607      	mov	r7, r0
 8010278:	1c78      	adds	r0, r7, #1
 801027a:	d1d6      	bne.n	801022a <_vfiprintf_r+0x19a>
 801027c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801027e:	07d9      	lsls	r1, r3, #31
 8010280:	d405      	bmi.n	801028e <_vfiprintf_r+0x1fe>
 8010282:	89ab      	ldrh	r3, [r5, #12]
 8010284:	059a      	lsls	r2, r3, #22
 8010286:	d402      	bmi.n	801028e <_vfiprintf_r+0x1fe>
 8010288:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801028a:	f7ff fd25 	bl	800fcd8 <__retarget_lock_release_recursive>
 801028e:	89ab      	ldrh	r3, [r5, #12]
 8010290:	065b      	lsls	r3, r3, #25
 8010292:	f53f af1f 	bmi.w	80100d4 <_vfiprintf_r+0x44>
 8010296:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010298:	e71e      	b.n	80100d8 <_vfiprintf_r+0x48>
 801029a:	ab03      	add	r3, sp, #12
 801029c:	9300      	str	r3, [sp, #0]
 801029e:	462a      	mov	r2, r5
 80102a0:	4b05      	ldr	r3, [pc, #20]	@ (80102b8 <_vfiprintf_r+0x228>)
 80102a2:	a904      	add	r1, sp, #16
 80102a4:	4630      	mov	r0, r6
 80102a6:	f000 f879 	bl	801039c <_printf_i>
 80102aa:	e7e4      	b.n	8010276 <_vfiprintf_r+0x1e6>
 80102ac:	08010ff4 	.word	0x08010ff4
 80102b0:	08010ffe 	.word	0x08010ffe
 80102b4:	00000000 	.word	0x00000000
 80102b8:	0801006b 	.word	0x0801006b
 80102bc:	08010ffa 	.word	0x08010ffa

080102c0 <_printf_common>:
 80102c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80102c4:	4616      	mov	r6, r2
 80102c6:	4698      	mov	r8, r3
 80102c8:	688a      	ldr	r2, [r1, #8]
 80102ca:	690b      	ldr	r3, [r1, #16]
 80102cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80102d0:	4293      	cmp	r3, r2
 80102d2:	bfb8      	it	lt
 80102d4:	4613      	movlt	r3, r2
 80102d6:	6033      	str	r3, [r6, #0]
 80102d8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80102dc:	4607      	mov	r7, r0
 80102de:	460c      	mov	r4, r1
 80102e0:	b10a      	cbz	r2, 80102e6 <_printf_common+0x26>
 80102e2:	3301      	adds	r3, #1
 80102e4:	6033      	str	r3, [r6, #0]
 80102e6:	6823      	ldr	r3, [r4, #0]
 80102e8:	0699      	lsls	r1, r3, #26
 80102ea:	bf42      	ittt	mi
 80102ec:	6833      	ldrmi	r3, [r6, #0]
 80102ee:	3302      	addmi	r3, #2
 80102f0:	6033      	strmi	r3, [r6, #0]
 80102f2:	6825      	ldr	r5, [r4, #0]
 80102f4:	f015 0506 	ands.w	r5, r5, #6
 80102f8:	d106      	bne.n	8010308 <_printf_common+0x48>
 80102fa:	f104 0a19 	add.w	sl, r4, #25
 80102fe:	68e3      	ldr	r3, [r4, #12]
 8010300:	6832      	ldr	r2, [r6, #0]
 8010302:	1a9b      	subs	r3, r3, r2
 8010304:	42ab      	cmp	r3, r5
 8010306:	dc26      	bgt.n	8010356 <_printf_common+0x96>
 8010308:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801030c:	6822      	ldr	r2, [r4, #0]
 801030e:	3b00      	subs	r3, #0
 8010310:	bf18      	it	ne
 8010312:	2301      	movne	r3, #1
 8010314:	0692      	lsls	r2, r2, #26
 8010316:	d42b      	bmi.n	8010370 <_printf_common+0xb0>
 8010318:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801031c:	4641      	mov	r1, r8
 801031e:	4638      	mov	r0, r7
 8010320:	47c8      	blx	r9
 8010322:	3001      	adds	r0, #1
 8010324:	d01e      	beq.n	8010364 <_printf_common+0xa4>
 8010326:	6823      	ldr	r3, [r4, #0]
 8010328:	6922      	ldr	r2, [r4, #16]
 801032a:	f003 0306 	and.w	r3, r3, #6
 801032e:	2b04      	cmp	r3, #4
 8010330:	bf02      	ittt	eq
 8010332:	68e5      	ldreq	r5, [r4, #12]
 8010334:	6833      	ldreq	r3, [r6, #0]
 8010336:	1aed      	subeq	r5, r5, r3
 8010338:	68a3      	ldr	r3, [r4, #8]
 801033a:	bf0c      	ite	eq
 801033c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8010340:	2500      	movne	r5, #0
 8010342:	4293      	cmp	r3, r2
 8010344:	bfc4      	itt	gt
 8010346:	1a9b      	subgt	r3, r3, r2
 8010348:	18ed      	addgt	r5, r5, r3
 801034a:	2600      	movs	r6, #0
 801034c:	341a      	adds	r4, #26
 801034e:	42b5      	cmp	r5, r6
 8010350:	d11a      	bne.n	8010388 <_printf_common+0xc8>
 8010352:	2000      	movs	r0, #0
 8010354:	e008      	b.n	8010368 <_printf_common+0xa8>
 8010356:	2301      	movs	r3, #1
 8010358:	4652      	mov	r2, sl
 801035a:	4641      	mov	r1, r8
 801035c:	4638      	mov	r0, r7
 801035e:	47c8      	blx	r9
 8010360:	3001      	adds	r0, #1
 8010362:	d103      	bne.n	801036c <_printf_common+0xac>
 8010364:	f04f 30ff 	mov.w	r0, #4294967295
 8010368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801036c:	3501      	adds	r5, #1
 801036e:	e7c6      	b.n	80102fe <_printf_common+0x3e>
 8010370:	18e1      	adds	r1, r4, r3
 8010372:	1c5a      	adds	r2, r3, #1
 8010374:	2030      	movs	r0, #48	@ 0x30
 8010376:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801037a:	4422      	add	r2, r4
 801037c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8010380:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8010384:	3302      	adds	r3, #2
 8010386:	e7c7      	b.n	8010318 <_printf_common+0x58>
 8010388:	2301      	movs	r3, #1
 801038a:	4622      	mov	r2, r4
 801038c:	4641      	mov	r1, r8
 801038e:	4638      	mov	r0, r7
 8010390:	47c8      	blx	r9
 8010392:	3001      	adds	r0, #1
 8010394:	d0e6      	beq.n	8010364 <_printf_common+0xa4>
 8010396:	3601      	adds	r6, #1
 8010398:	e7d9      	b.n	801034e <_printf_common+0x8e>
	...

0801039c <_printf_i>:
 801039c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80103a0:	7e0f      	ldrb	r7, [r1, #24]
 80103a2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80103a4:	2f78      	cmp	r7, #120	@ 0x78
 80103a6:	4691      	mov	r9, r2
 80103a8:	4680      	mov	r8, r0
 80103aa:	460c      	mov	r4, r1
 80103ac:	469a      	mov	sl, r3
 80103ae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80103b2:	d807      	bhi.n	80103c4 <_printf_i+0x28>
 80103b4:	2f62      	cmp	r7, #98	@ 0x62
 80103b6:	d80a      	bhi.n	80103ce <_printf_i+0x32>
 80103b8:	2f00      	cmp	r7, #0
 80103ba:	f000 80d2 	beq.w	8010562 <_printf_i+0x1c6>
 80103be:	2f58      	cmp	r7, #88	@ 0x58
 80103c0:	f000 80b9 	beq.w	8010536 <_printf_i+0x19a>
 80103c4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80103c8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80103cc:	e03a      	b.n	8010444 <_printf_i+0xa8>
 80103ce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80103d2:	2b15      	cmp	r3, #21
 80103d4:	d8f6      	bhi.n	80103c4 <_printf_i+0x28>
 80103d6:	a101      	add	r1, pc, #4	@ (adr r1, 80103dc <_printf_i+0x40>)
 80103d8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80103dc:	08010435 	.word	0x08010435
 80103e0:	08010449 	.word	0x08010449
 80103e4:	080103c5 	.word	0x080103c5
 80103e8:	080103c5 	.word	0x080103c5
 80103ec:	080103c5 	.word	0x080103c5
 80103f0:	080103c5 	.word	0x080103c5
 80103f4:	08010449 	.word	0x08010449
 80103f8:	080103c5 	.word	0x080103c5
 80103fc:	080103c5 	.word	0x080103c5
 8010400:	080103c5 	.word	0x080103c5
 8010404:	080103c5 	.word	0x080103c5
 8010408:	08010549 	.word	0x08010549
 801040c:	08010473 	.word	0x08010473
 8010410:	08010503 	.word	0x08010503
 8010414:	080103c5 	.word	0x080103c5
 8010418:	080103c5 	.word	0x080103c5
 801041c:	0801056b 	.word	0x0801056b
 8010420:	080103c5 	.word	0x080103c5
 8010424:	08010473 	.word	0x08010473
 8010428:	080103c5 	.word	0x080103c5
 801042c:	080103c5 	.word	0x080103c5
 8010430:	0801050b 	.word	0x0801050b
 8010434:	6833      	ldr	r3, [r6, #0]
 8010436:	1d1a      	adds	r2, r3, #4
 8010438:	681b      	ldr	r3, [r3, #0]
 801043a:	6032      	str	r2, [r6, #0]
 801043c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8010440:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8010444:	2301      	movs	r3, #1
 8010446:	e09d      	b.n	8010584 <_printf_i+0x1e8>
 8010448:	6833      	ldr	r3, [r6, #0]
 801044a:	6820      	ldr	r0, [r4, #0]
 801044c:	1d19      	adds	r1, r3, #4
 801044e:	6031      	str	r1, [r6, #0]
 8010450:	0606      	lsls	r6, r0, #24
 8010452:	d501      	bpl.n	8010458 <_printf_i+0xbc>
 8010454:	681d      	ldr	r5, [r3, #0]
 8010456:	e003      	b.n	8010460 <_printf_i+0xc4>
 8010458:	0645      	lsls	r5, r0, #25
 801045a:	d5fb      	bpl.n	8010454 <_printf_i+0xb8>
 801045c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8010460:	2d00      	cmp	r5, #0
 8010462:	da03      	bge.n	801046c <_printf_i+0xd0>
 8010464:	232d      	movs	r3, #45	@ 0x2d
 8010466:	426d      	negs	r5, r5
 8010468:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801046c:	4859      	ldr	r0, [pc, #356]	@ (80105d4 <_printf_i+0x238>)
 801046e:	230a      	movs	r3, #10
 8010470:	e011      	b.n	8010496 <_printf_i+0xfa>
 8010472:	6821      	ldr	r1, [r4, #0]
 8010474:	6833      	ldr	r3, [r6, #0]
 8010476:	0608      	lsls	r0, r1, #24
 8010478:	f853 5b04 	ldr.w	r5, [r3], #4
 801047c:	d402      	bmi.n	8010484 <_printf_i+0xe8>
 801047e:	0649      	lsls	r1, r1, #25
 8010480:	bf48      	it	mi
 8010482:	b2ad      	uxthmi	r5, r5
 8010484:	2f6f      	cmp	r7, #111	@ 0x6f
 8010486:	4853      	ldr	r0, [pc, #332]	@ (80105d4 <_printf_i+0x238>)
 8010488:	6033      	str	r3, [r6, #0]
 801048a:	bf14      	ite	ne
 801048c:	230a      	movne	r3, #10
 801048e:	2308      	moveq	r3, #8
 8010490:	2100      	movs	r1, #0
 8010492:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8010496:	6866      	ldr	r6, [r4, #4]
 8010498:	60a6      	str	r6, [r4, #8]
 801049a:	2e00      	cmp	r6, #0
 801049c:	bfa2      	ittt	ge
 801049e:	6821      	ldrge	r1, [r4, #0]
 80104a0:	f021 0104 	bicge.w	r1, r1, #4
 80104a4:	6021      	strge	r1, [r4, #0]
 80104a6:	b90d      	cbnz	r5, 80104ac <_printf_i+0x110>
 80104a8:	2e00      	cmp	r6, #0
 80104aa:	d04b      	beq.n	8010544 <_printf_i+0x1a8>
 80104ac:	4616      	mov	r6, r2
 80104ae:	fbb5 f1f3 	udiv	r1, r5, r3
 80104b2:	fb03 5711 	mls	r7, r3, r1, r5
 80104b6:	5dc7      	ldrb	r7, [r0, r7]
 80104b8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80104bc:	462f      	mov	r7, r5
 80104be:	42bb      	cmp	r3, r7
 80104c0:	460d      	mov	r5, r1
 80104c2:	d9f4      	bls.n	80104ae <_printf_i+0x112>
 80104c4:	2b08      	cmp	r3, #8
 80104c6:	d10b      	bne.n	80104e0 <_printf_i+0x144>
 80104c8:	6823      	ldr	r3, [r4, #0]
 80104ca:	07df      	lsls	r7, r3, #31
 80104cc:	d508      	bpl.n	80104e0 <_printf_i+0x144>
 80104ce:	6923      	ldr	r3, [r4, #16]
 80104d0:	6861      	ldr	r1, [r4, #4]
 80104d2:	4299      	cmp	r1, r3
 80104d4:	bfde      	ittt	le
 80104d6:	2330      	movle	r3, #48	@ 0x30
 80104d8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80104dc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80104e0:	1b92      	subs	r2, r2, r6
 80104e2:	6122      	str	r2, [r4, #16]
 80104e4:	f8cd a000 	str.w	sl, [sp]
 80104e8:	464b      	mov	r3, r9
 80104ea:	aa03      	add	r2, sp, #12
 80104ec:	4621      	mov	r1, r4
 80104ee:	4640      	mov	r0, r8
 80104f0:	f7ff fee6 	bl	80102c0 <_printf_common>
 80104f4:	3001      	adds	r0, #1
 80104f6:	d14a      	bne.n	801058e <_printf_i+0x1f2>
 80104f8:	f04f 30ff 	mov.w	r0, #4294967295
 80104fc:	b004      	add	sp, #16
 80104fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010502:	6823      	ldr	r3, [r4, #0]
 8010504:	f043 0320 	orr.w	r3, r3, #32
 8010508:	6023      	str	r3, [r4, #0]
 801050a:	4833      	ldr	r0, [pc, #204]	@ (80105d8 <_printf_i+0x23c>)
 801050c:	2778      	movs	r7, #120	@ 0x78
 801050e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8010512:	6823      	ldr	r3, [r4, #0]
 8010514:	6831      	ldr	r1, [r6, #0]
 8010516:	061f      	lsls	r7, r3, #24
 8010518:	f851 5b04 	ldr.w	r5, [r1], #4
 801051c:	d402      	bmi.n	8010524 <_printf_i+0x188>
 801051e:	065f      	lsls	r7, r3, #25
 8010520:	bf48      	it	mi
 8010522:	b2ad      	uxthmi	r5, r5
 8010524:	6031      	str	r1, [r6, #0]
 8010526:	07d9      	lsls	r1, r3, #31
 8010528:	bf44      	itt	mi
 801052a:	f043 0320 	orrmi.w	r3, r3, #32
 801052e:	6023      	strmi	r3, [r4, #0]
 8010530:	b11d      	cbz	r5, 801053a <_printf_i+0x19e>
 8010532:	2310      	movs	r3, #16
 8010534:	e7ac      	b.n	8010490 <_printf_i+0xf4>
 8010536:	4827      	ldr	r0, [pc, #156]	@ (80105d4 <_printf_i+0x238>)
 8010538:	e7e9      	b.n	801050e <_printf_i+0x172>
 801053a:	6823      	ldr	r3, [r4, #0]
 801053c:	f023 0320 	bic.w	r3, r3, #32
 8010540:	6023      	str	r3, [r4, #0]
 8010542:	e7f6      	b.n	8010532 <_printf_i+0x196>
 8010544:	4616      	mov	r6, r2
 8010546:	e7bd      	b.n	80104c4 <_printf_i+0x128>
 8010548:	6833      	ldr	r3, [r6, #0]
 801054a:	6825      	ldr	r5, [r4, #0]
 801054c:	6961      	ldr	r1, [r4, #20]
 801054e:	1d18      	adds	r0, r3, #4
 8010550:	6030      	str	r0, [r6, #0]
 8010552:	062e      	lsls	r6, r5, #24
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	d501      	bpl.n	801055c <_printf_i+0x1c0>
 8010558:	6019      	str	r1, [r3, #0]
 801055a:	e002      	b.n	8010562 <_printf_i+0x1c6>
 801055c:	0668      	lsls	r0, r5, #25
 801055e:	d5fb      	bpl.n	8010558 <_printf_i+0x1bc>
 8010560:	8019      	strh	r1, [r3, #0]
 8010562:	2300      	movs	r3, #0
 8010564:	6123      	str	r3, [r4, #16]
 8010566:	4616      	mov	r6, r2
 8010568:	e7bc      	b.n	80104e4 <_printf_i+0x148>
 801056a:	6833      	ldr	r3, [r6, #0]
 801056c:	1d1a      	adds	r2, r3, #4
 801056e:	6032      	str	r2, [r6, #0]
 8010570:	681e      	ldr	r6, [r3, #0]
 8010572:	6862      	ldr	r2, [r4, #4]
 8010574:	2100      	movs	r1, #0
 8010576:	4630      	mov	r0, r6
 8010578:	f7ef fe4a 	bl	8000210 <memchr>
 801057c:	b108      	cbz	r0, 8010582 <_printf_i+0x1e6>
 801057e:	1b80      	subs	r0, r0, r6
 8010580:	6060      	str	r0, [r4, #4]
 8010582:	6863      	ldr	r3, [r4, #4]
 8010584:	6123      	str	r3, [r4, #16]
 8010586:	2300      	movs	r3, #0
 8010588:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801058c:	e7aa      	b.n	80104e4 <_printf_i+0x148>
 801058e:	6923      	ldr	r3, [r4, #16]
 8010590:	4632      	mov	r2, r6
 8010592:	4649      	mov	r1, r9
 8010594:	4640      	mov	r0, r8
 8010596:	47d0      	blx	sl
 8010598:	3001      	adds	r0, #1
 801059a:	d0ad      	beq.n	80104f8 <_printf_i+0x15c>
 801059c:	6823      	ldr	r3, [r4, #0]
 801059e:	079b      	lsls	r3, r3, #30
 80105a0:	d413      	bmi.n	80105ca <_printf_i+0x22e>
 80105a2:	68e0      	ldr	r0, [r4, #12]
 80105a4:	9b03      	ldr	r3, [sp, #12]
 80105a6:	4298      	cmp	r0, r3
 80105a8:	bfb8      	it	lt
 80105aa:	4618      	movlt	r0, r3
 80105ac:	e7a6      	b.n	80104fc <_printf_i+0x160>
 80105ae:	2301      	movs	r3, #1
 80105b0:	4632      	mov	r2, r6
 80105b2:	4649      	mov	r1, r9
 80105b4:	4640      	mov	r0, r8
 80105b6:	47d0      	blx	sl
 80105b8:	3001      	adds	r0, #1
 80105ba:	d09d      	beq.n	80104f8 <_printf_i+0x15c>
 80105bc:	3501      	adds	r5, #1
 80105be:	68e3      	ldr	r3, [r4, #12]
 80105c0:	9903      	ldr	r1, [sp, #12]
 80105c2:	1a5b      	subs	r3, r3, r1
 80105c4:	42ab      	cmp	r3, r5
 80105c6:	dcf2      	bgt.n	80105ae <_printf_i+0x212>
 80105c8:	e7eb      	b.n	80105a2 <_printf_i+0x206>
 80105ca:	2500      	movs	r5, #0
 80105cc:	f104 0619 	add.w	r6, r4, #25
 80105d0:	e7f5      	b.n	80105be <_printf_i+0x222>
 80105d2:	bf00      	nop
 80105d4:	08011005 	.word	0x08011005
 80105d8:	08011016 	.word	0x08011016

080105dc <__sflush_r>:
 80105dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80105e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80105e4:	0716      	lsls	r6, r2, #28
 80105e6:	4605      	mov	r5, r0
 80105e8:	460c      	mov	r4, r1
 80105ea:	d454      	bmi.n	8010696 <__sflush_r+0xba>
 80105ec:	684b      	ldr	r3, [r1, #4]
 80105ee:	2b00      	cmp	r3, #0
 80105f0:	dc02      	bgt.n	80105f8 <__sflush_r+0x1c>
 80105f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	dd48      	ble.n	801068a <__sflush_r+0xae>
 80105f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80105fa:	2e00      	cmp	r6, #0
 80105fc:	d045      	beq.n	801068a <__sflush_r+0xae>
 80105fe:	2300      	movs	r3, #0
 8010600:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010604:	682f      	ldr	r7, [r5, #0]
 8010606:	6a21      	ldr	r1, [r4, #32]
 8010608:	602b      	str	r3, [r5, #0]
 801060a:	d030      	beq.n	801066e <__sflush_r+0x92>
 801060c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801060e:	89a3      	ldrh	r3, [r4, #12]
 8010610:	0759      	lsls	r1, r3, #29
 8010612:	d505      	bpl.n	8010620 <__sflush_r+0x44>
 8010614:	6863      	ldr	r3, [r4, #4]
 8010616:	1ad2      	subs	r2, r2, r3
 8010618:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801061a:	b10b      	cbz	r3, 8010620 <__sflush_r+0x44>
 801061c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801061e:	1ad2      	subs	r2, r2, r3
 8010620:	2300      	movs	r3, #0
 8010622:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8010624:	6a21      	ldr	r1, [r4, #32]
 8010626:	4628      	mov	r0, r5
 8010628:	47b0      	blx	r6
 801062a:	1c43      	adds	r3, r0, #1
 801062c:	89a3      	ldrh	r3, [r4, #12]
 801062e:	d106      	bne.n	801063e <__sflush_r+0x62>
 8010630:	6829      	ldr	r1, [r5, #0]
 8010632:	291d      	cmp	r1, #29
 8010634:	d82b      	bhi.n	801068e <__sflush_r+0xb2>
 8010636:	4a2a      	ldr	r2, [pc, #168]	@ (80106e0 <__sflush_r+0x104>)
 8010638:	410a      	asrs	r2, r1
 801063a:	07d6      	lsls	r6, r2, #31
 801063c:	d427      	bmi.n	801068e <__sflush_r+0xb2>
 801063e:	2200      	movs	r2, #0
 8010640:	6062      	str	r2, [r4, #4]
 8010642:	04d9      	lsls	r1, r3, #19
 8010644:	6922      	ldr	r2, [r4, #16]
 8010646:	6022      	str	r2, [r4, #0]
 8010648:	d504      	bpl.n	8010654 <__sflush_r+0x78>
 801064a:	1c42      	adds	r2, r0, #1
 801064c:	d101      	bne.n	8010652 <__sflush_r+0x76>
 801064e:	682b      	ldr	r3, [r5, #0]
 8010650:	b903      	cbnz	r3, 8010654 <__sflush_r+0x78>
 8010652:	6560      	str	r0, [r4, #84]	@ 0x54
 8010654:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8010656:	602f      	str	r7, [r5, #0]
 8010658:	b1b9      	cbz	r1, 801068a <__sflush_r+0xae>
 801065a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801065e:	4299      	cmp	r1, r3
 8010660:	d002      	beq.n	8010668 <__sflush_r+0x8c>
 8010662:	4628      	mov	r0, r5
 8010664:	f7ff fb48 	bl	800fcf8 <_free_r>
 8010668:	2300      	movs	r3, #0
 801066a:	6363      	str	r3, [r4, #52]	@ 0x34
 801066c:	e00d      	b.n	801068a <__sflush_r+0xae>
 801066e:	2301      	movs	r3, #1
 8010670:	4628      	mov	r0, r5
 8010672:	47b0      	blx	r6
 8010674:	4602      	mov	r2, r0
 8010676:	1c50      	adds	r0, r2, #1
 8010678:	d1c9      	bne.n	801060e <__sflush_r+0x32>
 801067a:	682b      	ldr	r3, [r5, #0]
 801067c:	2b00      	cmp	r3, #0
 801067e:	d0c6      	beq.n	801060e <__sflush_r+0x32>
 8010680:	2b1d      	cmp	r3, #29
 8010682:	d001      	beq.n	8010688 <__sflush_r+0xac>
 8010684:	2b16      	cmp	r3, #22
 8010686:	d11e      	bne.n	80106c6 <__sflush_r+0xea>
 8010688:	602f      	str	r7, [r5, #0]
 801068a:	2000      	movs	r0, #0
 801068c:	e022      	b.n	80106d4 <__sflush_r+0xf8>
 801068e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010692:	b21b      	sxth	r3, r3
 8010694:	e01b      	b.n	80106ce <__sflush_r+0xf2>
 8010696:	690f      	ldr	r7, [r1, #16]
 8010698:	2f00      	cmp	r7, #0
 801069a:	d0f6      	beq.n	801068a <__sflush_r+0xae>
 801069c:	0793      	lsls	r3, r2, #30
 801069e:	680e      	ldr	r6, [r1, #0]
 80106a0:	bf08      	it	eq
 80106a2:	694b      	ldreq	r3, [r1, #20]
 80106a4:	600f      	str	r7, [r1, #0]
 80106a6:	bf18      	it	ne
 80106a8:	2300      	movne	r3, #0
 80106aa:	eba6 0807 	sub.w	r8, r6, r7
 80106ae:	608b      	str	r3, [r1, #8]
 80106b0:	f1b8 0f00 	cmp.w	r8, #0
 80106b4:	dde9      	ble.n	801068a <__sflush_r+0xae>
 80106b6:	6a21      	ldr	r1, [r4, #32]
 80106b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80106ba:	4643      	mov	r3, r8
 80106bc:	463a      	mov	r2, r7
 80106be:	4628      	mov	r0, r5
 80106c0:	47b0      	blx	r6
 80106c2:	2800      	cmp	r0, #0
 80106c4:	dc08      	bgt.n	80106d8 <__sflush_r+0xfc>
 80106c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80106ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106ce:	81a3      	strh	r3, [r4, #12]
 80106d0:	f04f 30ff 	mov.w	r0, #4294967295
 80106d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80106d8:	4407      	add	r7, r0
 80106da:	eba8 0800 	sub.w	r8, r8, r0
 80106de:	e7e7      	b.n	80106b0 <__sflush_r+0xd4>
 80106e0:	dfbffffe 	.word	0xdfbffffe

080106e4 <_fflush_r>:
 80106e4:	b538      	push	{r3, r4, r5, lr}
 80106e6:	690b      	ldr	r3, [r1, #16]
 80106e8:	4605      	mov	r5, r0
 80106ea:	460c      	mov	r4, r1
 80106ec:	b913      	cbnz	r3, 80106f4 <_fflush_r+0x10>
 80106ee:	2500      	movs	r5, #0
 80106f0:	4628      	mov	r0, r5
 80106f2:	bd38      	pop	{r3, r4, r5, pc}
 80106f4:	b118      	cbz	r0, 80106fe <_fflush_r+0x1a>
 80106f6:	6a03      	ldr	r3, [r0, #32]
 80106f8:	b90b      	cbnz	r3, 80106fe <_fflush_r+0x1a>
 80106fa:	f7ff f89d 	bl	800f838 <__sinit>
 80106fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010702:	2b00      	cmp	r3, #0
 8010704:	d0f3      	beq.n	80106ee <_fflush_r+0xa>
 8010706:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8010708:	07d0      	lsls	r0, r2, #31
 801070a:	d404      	bmi.n	8010716 <_fflush_r+0x32>
 801070c:	0599      	lsls	r1, r3, #22
 801070e:	d402      	bmi.n	8010716 <_fflush_r+0x32>
 8010710:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8010712:	f7ff fae0 	bl	800fcd6 <__retarget_lock_acquire_recursive>
 8010716:	4628      	mov	r0, r5
 8010718:	4621      	mov	r1, r4
 801071a:	f7ff ff5f 	bl	80105dc <__sflush_r>
 801071e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8010720:	07da      	lsls	r2, r3, #31
 8010722:	4605      	mov	r5, r0
 8010724:	d4e4      	bmi.n	80106f0 <_fflush_r+0xc>
 8010726:	89a3      	ldrh	r3, [r4, #12]
 8010728:	059b      	lsls	r3, r3, #22
 801072a:	d4e1      	bmi.n	80106f0 <_fflush_r+0xc>
 801072c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801072e:	f7ff fad3 	bl	800fcd8 <__retarget_lock_release_recursive>
 8010732:	e7dd      	b.n	80106f0 <_fflush_r+0xc>

08010734 <__swhatbuf_r>:
 8010734:	b570      	push	{r4, r5, r6, lr}
 8010736:	460c      	mov	r4, r1
 8010738:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801073c:	2900      	cmp	r1, #0
 801073e:	b096      	sub	sp, #88	@ 0x58
 8010740:	4615      	mov	r5, r2
 8010742:	461e      	mov	r6, r3
 8010744:	da0d      	bge.n	8010762 <__swhatbuf_r+0x2e>
 8010746:	89a3      	ldrh	r3, [r4, #12]
 8010748:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801074c:	f04f 0100 	mov.w	r1, #0
 8010750:	bf14      	ite	ne
 8010752:	2340      	movne	r3, #64	@ 0x40
 8010754:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8010758:	2000      	movs	r0, #0
 801075a:	6031      	str	r1, [r6, #0]
 801075c:	602b      	str	r3, [r5, #0]
 801075e:	b016      	add	sp, #88	@ 0x58
 8010760:	bd70      	pop	{r4, r5, r6, pc}
 8010762:	466a      	mov	r2, sp
 8010764:	f000 f862 	bl	801082c <_fstat_r>
 8010768:	2800      	cmp	r0, #0
 801076a:	dbec      	blt.n	8010746 <__swhatbuf_r+0x12>
 801076c:	9901      	ldr	r1, [sp, #4]
 801076e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010772:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8010776:	4259      	negs	r1, r3
 8010778:	4159      	adcs	r1, r3
 801077a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801077e:	e7eb      	b.n	8010758 <__swhatbuf_r+0x24>

08010780 <__smakebuf_r>:
 8010780:	898b      	ldrh	r3, [r1, #12]
 8010782:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010784:	079d      	lsls	r5, r3, #30
 8010786:	4606      	mov	r6, r0
 8010788:	460c      	mov	r4, r1
 801078a:	d507      	bpl.n	801079c <__smakebuf_r+0x1c>
 801078c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010790:	6023      	str	r3, [r4, #0]
 8010792:	6123      	str	r3, [r4, #16]
 8010794:	2301      	movs	r3, #1
 8010796:	6163      	str	r3, [r4, #20]
 8010798:	b003      	add	sp, #12
 801079a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801079c:	ab01      	add	r3, sp, #4
 801079e:	466a      	mov	r2, sp
 80107a0:	f7ff ffc8 	bl	8010734 <__swhatbuf_r>
 80107a4:	9f00      	ldr	r7, [sp, #0]
 80107a6:	4605      	mov	r5, r0
 80107a8:	4639      	mov	r1, r7
 80107aa:	4630      	mov	r0, r6
 80107ac:	f7fe ff2c 	bl	800f608 <_malloc_r>
 80107b0:	b948      	cbnz	r0, 80107c6 <__smakebuf_r+0x46>
 80107b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80107b6:	059a      	lsls	r2, r3, #22
 80107b8:	d4ee      	bmi.n	8010798 <__smakebuf_r+0x18>
 80107ba:	f023 0303 	bic.w	r3, r3, #3
 80107be:	f043 0302 	orr.w	r3, r3, #2
 80107c2:	81a3      	strh	r3, [r4, #12]
 80107c4:	e7e2      	b.n	801078c <__smakebuf_r+0xc>
 80107c6:	89a3      	ldrh	r3, [r4, #12]
 80107c8:	6020      	str	r0, [r4, #0]
 80107ca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80107ce:	81a3      	strh	r3, [r4, #12]
 80107d0:	9b01      	ldr	r3, [sp, #4]
 80107d2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80107d6:	b15b      	cbz	r3, 80107f0 <__smakebuf_r+0x70>
 80107d8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80107dc:	4630      	mov	r0, r6
 80107de:	f000 f837 	bl	8010850 <_isatty_r>
 80107e2:	b128      	cbz	r0, 80107f0 <__smakebuf_r+0x70>
 80107e4:	89a3      	ldrh	r3, [r4, #12]
 80107e6:	f023 0303 	bic.w	r3, r3, #3
 80107ea:	f043 0301 	orr.w	r3, r3, #1
 80107ee:	81a3      	strh	r3, [r4, #12]
 80107f0:	89a3      	ldrh	r3, [r4, #12]
 80107f2:	431d      	orrs	r5, r3
 80107f4:	81a5      	strh	r5, [r4, #12]
 80107f6:	e7cf      	b.n	8010798 <__smakebuf_r+0x18>

080107f8 <memmove>:
 80107f8:	4288      	cmp	r0, r1
 80107fa:	b510      	push	{r4, lr}
 80107fc:	eb01 0402 	add.w	r4, r1, r2
 8010800:	d902      	bls.n	8010808 <memmove+0x10>
 8010802:	4284      	cmp	r4, r0
 8010804:	4623      	mov	r3, r4
 8010806:	d807      	bhi.n	8010818 <memmove+0x20>
 8010808:	1e43      	subs	r3, r0, #1
 801080a:	42a1      	cmp	r1, r4
 801080c:	d008      	beq.n	8010820 <memmove+0x28>
 801080e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010812:	f803 2f01 	strb.w	r2, [r3, #1]!
 8010816:	e7f8      	b.n	801080a <memmove+0x12>
 8010818:	4402      	add	r2, r0
 801081a:	4601      	mov	r1, r0
 801081c:	428a      	cmp	r2, r1
 801081e:	d100      	bne.n	8010822 <memmove+0x2a>
 8010820:	bd10      	pop	{r4, pc}
 8010822:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8010826:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801082a:	e7f7      	b.n	801081c <memmove+0x24>

0801082c <_fstat_r>:
 801082c:	b538      	push	{r3, r4, r5, lr}
 801082e:	4d07      	ldr	r5, [pc, #28]	@ (801084c <_fstat_r+0x20>)
 8010830:	2300      	movs	r3, #0
 8010832:	4604      	mov	r4, r0
 8010834:	4608      	mov	r0, r1
 8010836:	4611      	mov	r1, r2
 8010838:	602b      	str	r3, [r5, #0]
 801083a:	f7f0 fa87 	bl	8000d4c <_fstat>
 801083e:	1c43      	adds	r3, r0, #1
 8010840:	d102      	bne.n	8010848 <_fstat_r+0x1c>
 8010842:	682b      	ldr	r3, [r5, #0]
 8010844:	b103      	cbz	r3, 8010848 <_fstat_r+0x1c>
 8010846:	6023      	str	r3, [r4, #0]
 8010848:	bd38      	pop	{r3, r4, r5, pc}
 801084a:	bf00      	nop
 801084c:	20005668 	.word	0x20005668

08010850 <_isatty_r>:
 8010850:	b538      	push	{r3, r4, r5, lr}
 8010852:	4d06      	ldr	r5, [pc, #24]	@ (801086c <_isatty_r+0x1c>)
 8010854:	2300      	movs	r3, #0
 8010856:	4604      	mov	r4, r0
 8010858:	4608      	mov	r0, r1
 801085a:	602b      	str	r3, [r5, #0]
 801085c:	f7f0 fa86 	bl	8000d6c <_isatty>
 8010860:	1c43      	adds	r3, r0, #1
 8010862:	d102      	bne.n	801086a <_isatty_r+0x1a>
 8010864:	682b      	ldr	r3, [r5, #0]
 8010866:	b103      	cbz	r3, 801086a <_isatty_r+0x1a>
 8010868:	6023      	str	r3, [r4, #0]
 801086a:	bd38      	pop	{r3, r4, r5, pc}
 801086c:	20005668 	.word	0x20005668

08010870 <_realloc_r>:
 8010870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010874:	4680      	mov	r8, r0
 8010876:	4615      	mov	r5, r2
 8010878:	460c      	mov	r4, r1
 801087a:	b921      	cbnz	r1, 8010886 <_realloc_r+0x16>
 801087c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010880:	4611      	mov	r1, r2
 8010882:	f7fe bec1 	b.w	800f608 <_malloc_r>
 8010886:	b92a      	cbnz	r2, 8010894 <_realloc_r+0x24>
 8010888:	f7ff fa36 	bl	800fcf8 <_free_r>
 801088c:	2400      	movs	r4, #0
 801088e:	4620      	mov	r0, r4
 8010890:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010894:	f000 f81a 	bl	80108cc <_malloc_usable_size_r>
 8010898:	4285      	cmp	r5, r0
 801089a:	4606      	mov	r6, r0
 801089c:	d802      	bhi.n	80108a4 <_realloc_r+0x34>
 801089e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80108a2:	d8f4      	bhi.n	801088e <_realloc_r+0x1e>
 80108a4:	4629      	mov	r1, r5
 80108a6:	4640      	mov	r0, r8
 80108a8:	f7fe feae 	bl	800f608 <_malloc_r>
 80108ac:	4607      	mov	r7, r0
 80108ae:	2800      	cmp	r0, #0
 80108b0:	d0ec      	beq.n	801088c <_realloc_r+0x1c>
 80108b2:	42b5      	cmp	r5, r6
 80108b4:	462a      	mov	r2, r5
 80108b6:	4621      	mov	r1, r4
 80108b8:	bf28      	it	cs
 80108ba:	4632      	movcs	r2, r6
 80108bc:	f7ff fa0d 	bl	800fcda <memcpy>
 80108c0:	4621      	mov	r1, r4
 80108c2:	4640      	mov	r0, r8
 80108c4:	f7ff fa18 	bl	800fcf8 <_free_r>
 80108c8:	463c      	mov	r4, r7
 80108ca:	e7e0      	b.n	801088e <_realloc_r+0x1e>

080108cc <_malloc_usable_size_r>:
 80108cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80108d0:	1f18      	subs	r0, r3, #4
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	bfbc      	itt	lt
 80108d6:	580b      	ldrlt	r3, [r1, r0]
 80108d8:	18c0      	addlt	r0, r0, r3
 80108da:	4770      	bx	lr

080108dc <_init>:
 80108dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108de:	bf00      	nop
 80108e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108e2:	bc08      	pop	{r3}
 80108e4:	469e      	mov	lr, r3
 80108e6:	4770      	bx	lr

080108e8 <_fini>:
 80108e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80108ea:	bf00      	nop
 80108ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80108ee:	bc08      	pop	{r3}
 80108f0:	469e      	mov	lr, r3
 80108f2:	4770      	bx	lr
