
USBDetect.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ec7c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  0800ee1c  0800ee1c  0000fe1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f0dc  0800f0dc  000111a4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800f0dc  0800f0dc  000100dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f0e4  0800f0e4  000111a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f0e4  0800f0e4  000100e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f0e8  0800f0e8  000100e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001a4  20000000  0800f0ec  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bb0  200001a4  0800f290  000111a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d54  0800f290  00011d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000111a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   000202da  00000000  00000000  000111d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052cc  00000000  00000000  000314ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001308  00000000  00000000  00036780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e6c  00000000  00000000  00037a88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dc72  00000000  00000000  000388f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001cb60  00000000  00000000  00056566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000955ce  00000000  00000000  000730c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00108694  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000056ac  00000000  00000000  001086d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0010dd84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001a4 	.word	0x200001a4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ee04 	.word	0x0800ee04

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001a8 	.word	0x200001a8
 80001dc:	0800ee04 	.word	0x0800ee04

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b08a      	sub	sp, #40	@ 0x28
 80005d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005e2:	2300      	movs	r3, #0
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	4b2d      	ldr	r3, [pc, #180]	@ (800069c <MX_GPIO_Init+0xd0>)
 80005e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ea:	4a2c      	ldr	r2, [pc, #176]	@ (800069c <MX_GPIO_Init+0xd0>)
 80005ec:	f043 0304 	orr.w	r3, r3, #4
 80005f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005f2:	4b2a      	ldr	r3, [pc, #168]	@ (800069c <MX_GPIO_Init+0xd0>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f6:	f003 0304 	and.w	r3, r3, #4
 80005fa:	613b      	str	r3, [r7, #16]
 80005fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fe:	2300      	movs	r3, #0
 8000600:	60fb      	str	r3, [r7, #12]
 8000602:	4b26      	ldr	r3, [pc, #152]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	4a25      	ldr	r2, [pc, #148]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000608:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800060c:	6313      	str	r3, [r2, #48]	@ 0x30
 800060e:	4b23      	ldr	r3, [pc, #140]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000616:	60fb      	str	r3, [r7, #12]
 8000618:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800061a:	2300      	movs	r3, #0
 800061c:	60bb      	str	r3, [r7, #8]
 800061e:	4b1f      	ldr	r3, [pc, #124]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000622:	4a1e      	ldr	r2, [pc, #120]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000624:	f043 0301 	orr.w	r3, r3, #1
 8000628:	6313      	str	r3, [r2, #48]	@ 0x30
 800062a:	4b1c      	ldr	r3, [pc, #112]	@ (800069c <MX_GPIO_Init+0xd0>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062e:	f003 0301 	and.w	r3, r3, #1
 8000632:	60bb      	str	r3, [r7, #8]
 8000634:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000636:	2300      	movs	r3, #0
 8000638:	607b      	str	r3, [r7, #4]
 800063a:	4b18      	ldr	r3, [pc, #96]	@ (800069c <MX_GPIO_Init+0xd0>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800063e:	4a17      	ldr	r2, [pc, #92]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	@ 0x30
 8000646:	4b15      	ldr	r3, [pc, #84]	@ (800069c <MX_GPIO_Init+0xd0>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2120      	movs	r1, #32
 8000656:	4812      	ldr	r0, [pc, #72]	@ (80006a0 <MX_GPIO_Init+0xd4>)
 8000658:	f000 fde4 	bl	8001224 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000662:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000666:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000668:	2300      	movs	r3, #0
 800066a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066c:	f107 0314 	add.w	r3, r7, #20
 8000670:	4619      	mov	r1, r3
 8000672:	480c      	ldr	r0, [pc, #48]	@ (80006a4 <MX_GPIO_Init+0xd8>)
 8000674:	f000 fc52 	bl	8000f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000678:	2320      	movs	r3, #32
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_GPIO_Init+0xd4>)
 8000690:	f000 fc44 	bl	8000f1c <HAL_GPIO_Init>

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	@ 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40023800 	.word	0x40023800
 80006a0:	40020000 	.word	0x40020000
 80006a4:	40020800 	.word	0x40020800

080006a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b082      	sub	sp, #8
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ae:	f000 fa8d 	bl	8000bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006b2:	f000 f851 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006b6:	f7ff ff89 	bl	80005cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006ba:	f000 f9eb 	bl	8000a94 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 80006be:	f00c fd91 	bl	800d1e4 <MX_USB_HOST_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      const char* detected_device = check_usb_device();  // Get the name of the detected device
 80006c2:	f00c fe21 	bl	800d308 <check_usb_device>
 80006c6:	6078      	str	r0, [r7, #4]
      strncpy(detected_board_name, detected_device, MAX_BOARD_NAME_LENGTH - 1);
 80006c8:	2231      	movs	r2, #49	@ 0x31
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	481a      	ldr	r0, [pc, #104]	@ (8000738 <main+0x90>)
 80006ce:	f00d fd03 	bl	800e0d8 <strncpy>
      detected_board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0'; // Ensure null termination
 80006d2:	4b19      	ldr	r3, [pc, #100]	@ (8000738 <main+0x90>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31

      if (strcmp(detected_board_name, "No Device") == 0) {
 80006da:	4918      	ldr	r1, [pc, #96]	@ (800073c <main+0x94>)
 80006dc:	4816      	ldr	r0, [pc, #88]	@ (8000738 <main+0x90>)
 80006de:	f7ff fd7f 	bl	80001e0 <strcmp>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d103      	bne.n	80006f0 <main+0x48>
          // If no device is detected, do nothing or handle accordingly
          printf("No USB device detected.\r\n");
 80006e8:	4815      	ldr	r0, [pc, #84]	@ (8000740 <main+0x98>)
 80006ea:	f00d fbd7 	bl	800de9c <puts>
 80006ee:	e01c      	b.n	800072a <main+0x82>
      } else {
          // If a device is detected, check if it matches the selected board
          if (strcmp(detected_board_name, selected_board_name) == 0) {
 80006f0:	4914      	ldr	r1, [pc, #80]	@ (8000744 <main+0x9c>)
 80006f2:	4811      	ldr	r0, [pc, #68]	@ (8000738 <main+0x90>)
 80006f4:	f7ff fd74 	bl	80001e0 <strcmp>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d110      	bne.n	8000720 <main+0x78>
              printf("Detected board matches the selected board: %s\r\n", detected_board_name);
 80006fe:	490e      	ldr	r1, [pc, #56]	@ (8000738 <main+0x90>)
 8000700:	4811      	ldr	r0, [pc, #68]	@ (8000748 <main+0xa0>)
 8000702:	f00d fb63 	bl	800ddcc <iprintf>
              if (strcmp(detected_board_name, "Arduino UNO R3") == 0) {  // Corrected comparison
 8000706:	4911      	ldr	r1, [pc, #68]	@ (800074c <main+0xa4>)
 8000708:	480b      	ldr	r0, [pc, #44]	@ (8000738 <main+0x90>)
 800070a:	f7ff fd69 	bl	80001e0 <strcmp>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d10a      	bne.n	800072a <main+0x82>
                      printf("Triggering bootloader\r\n");
 8000714:	480e      	ldr	r0, [pc, #56]	@ (8000750 <main+0xa8>)
 8000716:	f00d fbc1 	bl	800de9c <puts>
                      trigger_arduino_bootloader();
 800071a:	f00c fe77 	bl	800d40c <trigger_arduino_bootloader>
 800071e:	e004      	b.n	800072a <main+0x82>
                  }
          } else {
              printf("Board mismatch! Detected: %s, Selected: %s\r\n", detected_board_name, selected_board_name);
 8000720:	4a08      	ldr	r2, [pc, #32]	@ (8000744 <main+0x9c>)
 8000722:	4905      	ldr	r1, [pc, #20]	@ (8000738 <main+0x90>)
 8000724:	480b      	ldr	r0, [pc, #44]	@ (8000754 <main+0xac>)
 8000726:	f00d fb51 	bl	800ddcc <iprintf>
          }
      }

      MX_USB_HOST_Process();  // Process USB Host tasks
 800072a:	f00c fdb1 	bl	800d290 <MX_USB_HOST_Process>
      HAL_Delay(250);  // Small delay to avoid too fast polling
 800072e:	20fa      	movs	r0, #250	@ 0xfa
 8000730:	f000 fabe 	bl	8000cb0 <HAL_Delay>
  {
 8000734:	e7c5      	b.n	80006c2 <main+0x1a>
 8000736:	bf00      	nop
 8000738:	20000000 	.word	0x20000000
 800073c:	0800ee1c 	.word	0x0800ee1c
 8000740:	0800ee28 	.word	0x0800ee28
 8000744:	20000034 	.word	0x20000034
 8000748:	0800ee44 	.word	0x0800ee44
 800074c:	0800ee74 	.word	0x0800ee74
 8000750:	0800ee84 	.word	0x0800ee84
 8000754:	0800ee9c 	.word	0x0800ee9c

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	@ 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	@ 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f00d fcae 	bl	800e0c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b2a      	ldr	r3, [pc, #168]	@ (800082c <SystemClock_Config+0xd4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000784:	4a29      	ldr	r2, [pc, #164]	@ (800082c <SystemClock_Config+0xd4>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	@ 0x40
 800078c:	4b27      	ldr	r3, [pc, #156]	@ (800082c <SystemClock_Config+0xd4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b24      	ldr	r3, [pc, #144]	@ (8000830 <SystemClock_Config+0xd8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80007a4:	4a22      	ldr	r2, [pc, #136]	@ (8000830 <SystemClock_Config+0xd8>)
 80007a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	4b20      	ldr	r3, [pc, #128]	@ (8000830 <SystemClock_Config+0xd8>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80007b4:	607b      	str	r3, [r7, #4]
 80007b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80007b8:	2303      	movs	r3, #3
 80007ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007bc:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 80007c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	2301      	movs	r3, #1
 80007c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c6:	2310      	movs	r3, #16
 80007c8:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007ca:	2302      	movs	r3, #2
 80007cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007ce:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80007d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80007d4:	2304      	movs	r3, #4
 80007d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80007d8:	2348      	movs	r3, #72	@ 0x48
 80007da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80007dc:	2304      	movs	r3, #4
 80007de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007e0:	2303      	movs	r3, #3
 80007e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e4:	f107 0320 	add.w	r3, r7, #32
 80007e8:	4618      	mov	r0, r3
 80007ea:	f002 fe69 	bl	80034c0 <HAL_RCC_OscConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007f4:	f000 f81e 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007f8:	230f      	movs	r3, #15
 80007fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000800:	2300      	movs	r3, #0
 8000802:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000804:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000808:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080a:	2300      	movs	r3, #0
 800080c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800080e:	f107 030c 	add.w	r3, r7, #12
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f003 f8cb 	bl	80039b0 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000820:	f000 f808 	bl	8000834 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	@ 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}
 800082c:	40023800 	.word	0x40023800
 8000830:	40007000 	.word	0x40007000

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800083c:	bf00      	nop
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b083      	sub	sp, #12
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b10      	ldr	r3, [pc, #64]	@ (800088c <HAL_MspInit+0x4c>)
 800084c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800084e:	4a0f      	ldr	r2, [pc, #60]	@ (800088c <HAL_MspInit+0x4c>)
 8000850:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000854:	6453      	str	r3, [r2, #68]	@ 0x44
 8000856:	4b0d      	ldr	r3, [pc, #52]	@ (800088c <HAL_MspInit+0x4c>)
 8000858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800085a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	603b      	str	r3, [r7, #0]
 8000866:	4b09      	ldr	r3, [pc, #36]	@ (800088c <HAL_MspInit+0x4c>)
 8000868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800086a:	4a08      	ldr	r2, [pc, #32]	@ (800088c <HAL_MspInit+0x4c>)
 800086c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000870:	6413      	str	r3, [r2, #64]	@ 0x40
 8000872:	4b06      	ldr	r3, [pc, #24]	@ (800088c <HAL_MspInit+0x4c>)
 8000874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800087a:	603b      	str	r3, [r7, #0]
 800087c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800087e:	bf00      	nop
 8000880:	370c      	adds	r7, #12
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop
 800088c:	40023800 	.word	0x40023800

08000890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000890:	b480      	push	{r7}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000894:	bf00      	nop
 8000896:	e7fd      	b.n	8000894 <NMI_Handler+0x4>

08000898 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800089c:	bf00      	nop
 800089e:	e7fd      	b.n	800089c <HardFault_Handler+0x4>

080008a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008a0:	b480      	push	{r7}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008a4:	bf00      	nop
 80008a6:	e7fd      	b.n	80008a4 <MemManage_Handler+0x4>

080008a8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ac:	bf00      	nop
 80008ae:	e7fd      	b.n	80008ac <BusFault_Handler+0x4>

080008b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008b0:	b480      	push	{r7}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008b4:	bf00      	nop
 80008b6:	e7fd      	b.n	80008b4 <UsageFault_Handler+0x4>

080008b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr

080008c6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008ca:	bf00      	nop
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr

080008d4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008d8:	bf00      	nop
 80008da:	46bd      	mov	sp, r7
 80008dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e0:	4770      	bx	lr

080008e2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008e2:	b580      	push	{r7, lr}
 80008e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008e6:	f000 f9c3 	bl	8000c70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
	...

080008f0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80008f4:	4802      	ldr	r0, [pc, #8]	@ (8000900 <OTG_FS_IRQHandler+0x10>)
 80008f6:	f000 ff8f 	bl	8001818 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	bd80      	pop	{r7, pc}
 80008fe:	bf00      	nop
 8000900:	20000828 	.word	0x20000828

08000904 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e00a      	b.n	800092c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000916:	f3af 8000 	nop.w
 800091a:	4601      	mov	r1, r0
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	b2ca      	uxtb	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	dbf0      	blt.n	8000916 <_read+0x12>
  }

  return len;
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <__io_putchar>:
extern UART_HandleTypeDef huart2;  // Ensure huart2 is declared

int __io_putchar(int ch) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)&ch, 1, HAL_MAX_DELAY);
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	f04f 33ff 	mov.w	r3, #4294967295
 800094e:	2201      	movs	r2, #1
 8000950:	4803      	ldr	r0, [pc, #12]	@ (8000960 <__io_putchar+0x20>)
 8000952:	f003 fa9d 	bl	8003e90 <HAL_UART_Transmit>
    return ch;
 8000956:	687b      	ldr	r3, [r7, #4]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200001c4 	.word	0x200001c4

08000964 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len) {
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af00      	add	r7, sp, #0
 800096a:	60f8      	str	r0, [r7, #12]
 800096c:	60b9      	str	r1, [r7, #8]
 800096e:	607a      	str	r2, [r7, #4]
    (void)file;
    for (int i = 0; i < len; i++) {
 8000970:	2300      	movs	r3, #0
 8000972:	617b      	str	r3, [r7, #20]
 8000974:	e009      	b.n	800098a <_write+0x26>
        __io_putchar(*ptr++);
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	1c5a      	adds	r2, r3, #1
 800097a:	60ba      	str	r2, [r7, #8]
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff ffde 	bl	8000940 <__io_putchar>
    for (int i = 0; i < len; i++) {
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	3301      	adds	r3, #1
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	697a      	ldr	r2, [r7, #20]
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	429a      	cmp	r2, r3
 8000990:	dbf1      	blt.n	8000976 <_write+0x12>
    }
    return len;
 8000992:	687b      	ldr	r3, [r7, #4]
}
 8000994:	4618      	mov	r0, r3
 8000996:	3718      	adds	r7, #24
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <_close>:

int _close(int file)
{
 800099c:	b480      	push	{r7}
 800099e:	b083      	sub	sp, #12
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80009a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	370c      	adds	r7, #12
 80009ac:	46bd      	mov	sp, r7
 80009ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b2:	4770      	bx	lr

080009b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009be:	683b      	ldr	r3, [r7, #0]
 80009c0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80009c4:	605a      	str	r2, [r3, #4]
  return 0;
 80009c6:	2300      	movs	r3, #0
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	370c      	adds	r7, #12
 80009cc:	46bd      	mov	sp, r7
 80009ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d2:	4770      	bx	lr

080009d4 <_isatty>:

int _isatty(int file)
{
 80009d4:	b480      	push	{r7}
 80009d6:	b083      	sub	sp, #12
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009dc:	2301      	movs	r3, #1
}
 80009de:	4618      	mov	r0, r3
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr

080009ea <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009ea:	b480      	push	{r7}
 80009ec:	b085      	sub	sp, #20
 80009ee:	af00      	add	r7, sp, #0
 80009f0:	60f8      	str	r0, [r7, #12]
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009f6:	2300      	movs	r3, #0
}
 80009f8:	4618      	mov	r0, r3
 80009fa:	3714      	adds	r7, #20
 80009fc:	46bd      	mov	sp, r7
 80009fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a02:	4770      	bx	lr

08000a04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b086      	sub	sp, #24
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a0c:	4a14      	ldr	r2, [pc, #80]	@ (8000a60 <_sbrk+0x5c>)
 8000a0e:	4b15      	ldr	r3, [pc, #84]	@ (8000a64 <_sbrk+0x60>)
 8000a10:	1ad3      	subs	r3, r2, r3
 8000a12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a14:	697b      	ldr	r3, [r7, #20]
 8000a16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a18:	4b13      	ldr	r3, [pc, #76]	@ (8000a68 <_sbrk+0x64>)
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a20:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <_sbrk+0x64>)
 8000a22:	4a12      	ldr	r2, [pc, #72]	@ (8000a6c <_sbrk+0x68>)
 8000a24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a26:	4b10      	ldr	r3, [pc, #64]	@ (8000a68 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d207      	bcs.n	8000a44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a34:	f00d fbba 	bl	800e1ac <__errno>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a3e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a42:	e009      	b.n	8000a58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a44:	4b08      	ldr	r3, [pc, #32]	@ (8000a68 <_sbrk+0x64>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a4a:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <_sbrk+0x64>)
 8000a4c:	681a      	ldr	r2, [r3, #0]
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	4413      	add	r3, r2
 8000a52:	4a05      	ldr	r2, [pc, #20]	@ (8000a68 <_sbrk+0x64>)
 8000a54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3718      	adds	r7, #24
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20018000 	.word	0x20018000
 8000a64:	00000400 	.word	0x00000400
 8000a68:	200001c0 	.word	0x200001c0
 8000a6c:	20000d58 	.word	0x20000d58

08000a70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a74:	4b06      	ldr	r3, [pc, #24]	@ (8000a90 <SystemInit+0x20>)
 8000a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a7a:	4a05      	ldr	r2, [pc, #20]	@ (8000a90 <SystemInit+0x20>)
 8000a7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a84:	bf00      	nop
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	e000ed00 	.word	0xe000ed00

08000a94 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a98:	4b11      	ldr	r3, [pc, #68]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000a9a:	4a12      	ldr	r2, [pc, #72]	@ (8000ae4 <MX_USART2_UART_Init+0x50>)
 8000a9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000aa4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000aa6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000aac:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ab8:	4b09      	ldr	r3, [pc, #36]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000aba:	220c      	movs	r2, #12
 8000abc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000abe:	4b08      	ldr	r3, [pc, #32]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ac4:	4b06      	ldr	r3, [pc, #24]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000aca:	4805      	ldr	r0, [pc, #20]	@ (8000ae0 <MX_USART2_UART_Init+0x4c>)
 8000acc:	f003 f990 	bl	8003df0 <HAL_UART_Init>
 8000ad0:	4603      	mov	r3, r0
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d001      	beq.n	8000ada <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000ad6:	f7ff fead 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ada:	bf00      	nop
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200001c4 	.word	0x200001c4
 8000ae4:	40004400 	.word	0x40004400

08000ae8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b08a      	sub	sp, #40	@ 0x28
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000af0:	f107 0314 	add.w	r3, r7, #20
 8000af4:	2200      	movs	r2, #0
 8000af6:	601a      	str	r2, [r3, #0]
 8000af8:	605a      	str	r2, [r3, #4]
 8000afa:	609a      	str	r2, [r3, #8]
 8000afc:	60da      	str	r2, [r3, #12]
 8000afe:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a19      	ldr	r2, [pc, #100]	@ (8000b6c <HAL_UART_MspInit+0x84>)
 8000b06:	4293      	cmp	r3, r2
 8000b08:	d12b      	bne.n	8000b62 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	613b      	str	r3, [r7, #16]
 8000b0e:	4b18      	ldr	r3, [pc, #96]	@ (8000b70 <HAL_UART_MspInit+0x88>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	4a17      	ldr	r2, [pc, #92]	@ (8000b70 <HAL_UART_MspInit+0x88>)
 8000b14:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1a:	4b15      	ldr	r3, [pc, #84]	@ (8000b70 <HAL_UART_MspInit+0x88>)
 8000b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b22:	613b      	str	r3, [r7, #16]
 8000b24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	4b11      	ldr	r3, [pc, #68]	@ (8000b70 <HAL_UART_MspInit+0x88>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a10      	ldr	r2, [pc, #64]	@ (8000b70 <HAL_UART_MspInit+0x88>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b0e      	ldr	r3, [pc, #56]	@ (8000b70 <HAL_UART_MspInit+0x88>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000b42:	230c      	movs	r3, #12
 8000b44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b46:	2302      	movs	r3, #2
 8000b48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b52:	2307      	movs	r3, #7
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4805      	ldr	r0, [pc, #20]	@ (8000b74 <HAL_UART_MspInit+0x8c>)
 8000b5e:	f000 f9dd 	bl	8000f1c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b62:	bf00      	nop
 8000b64:	3728      	adds	r7, #40	@ 0x28
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40004400 	.word	0x40004400
 8000b70:	40023800 	.word	0x40023800
 8000b74:	40020000 	.word	0x40020000

08000b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b78:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000bb0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b7c:	f7ff ff78 	bl	8000a70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480c      	ldr	r0, [pc, #48]	@ (8000bb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b82:	490d      	ldr	r1, [pc, #52]	@ (8000bb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b84:	4a0d      	ldr	r2, [pc, #52]	@ (8000bbc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0a      	ldr	r2, [pc, #40]	@ (8000bc0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b98:	4c0a      	ldr	r4, [pc, #40]	@ (8000bc4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000ba6:	f00d fb07 	bl	800e1b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000baa:	f7ff fd7d 	bl	80006a8 <main>
  bx  lr    
 8000bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000bb0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000bb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bb8:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8000bbc:	0800f0ec 	.word	0x0800f0ec
  ldr r2, =_sbss
 8000bc0:	200001a4 	.word	0x200001a4
  ldr r4, =_ebss
 8000bc4:	20000d54 	.word	0x20000d54

08000bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bc8:	e7fe      	b.n	8000bc8 <ADC_IRQHandler>
	...

08000bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c0c <HAL_Init+0x40>)
 8000bd2:	681b      	ldr	r3, [r3, #0]
 8000bd4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c0c <HAL_Init+0x40>)
 8000bd6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	@ (8000c0c <HAL_Init+0x40>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	@ (8000c0c <HAL_Init+0x40>)
 8000be2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be8:	4b08      	ldr	r3, [pc, #32]	@ (8000c0c <HAL_Init+0x40>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	4a07      	ldr	r2, [pc, #28]	@ (8000c0c <HAL_Init+0x40>)
 8000bee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bf4:	2003      	movs	r0, #3
 8000bf6:	f000 f94f 	bl	8000e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bfa:	2000      	movs	r0, #0
 8000bfc:	f000 f808 	bl	8000c10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c00:	f7ff fe1e 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023c00 	.word	0x40023c00

08000c10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c18:	4b12      	ldr	r3, [pc, #72]	@ (8000c64 <HAL_InitTick+0x54>)
 8000c1a:	681a      	ldr	r2, [r3, #0]
 8000c1c:	4b12      	ldr	r3, [pc, #72]	@ (8000c68 <HAL_InitTick+0x58>)
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	4619      	mov	r1, r3
 8000c22:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c26:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 f967 	bl	8000f02 <HAL_SYSTICK_Config>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e00e      	b.n	8000c5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	2b0f      	cmp	r3, #15
 8000c42:	d80a      	bhi.n	8000c5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c44:	2200      	movs	r2, #0
 8000c46:	6879      	ldr	r1, [r7, #4]
 8000c48:	f04f 30ff 	mov.w	r0, #4294967295
 8000c4c:	f000 f92f 	bl	8000eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c50:	4a06      	ldr	r2, [pc, #24]	@ (8000c6c <HAL_InitTick+0x5c>)
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c56:	2300      	movs	r3, #0
 8000c58:	e000      	b.n	8000c5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	3708      	adds	r7, #8
 8000c60:	46bd      	mov	sp, r7
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000068 	.word	0x20000068
 8000c68:	20000070 	.word	0x20000070
 8000c6c:	2000006c 	.word	0x2000006c

08000c70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <HAL_IncTick+0x20>)
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	461a      	mov	r2, r3
 8000c7a:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4413      	add	r3, r2
 8000c80:	4a04      	ldr	r2, [pc, #16]	@ (8000c94 <HAL_IncTick+0x24>)
 8000c82:	6013      	str	r3, [r2, #0]
}
 8000c84:	bf00      	nop
 8000c86:	46bd      	mov	sp, r7
 8000c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8c:	4770      	bx	lr
 8000c8e:	bf00      	nop
 8000c90:	20000070 	.word	0x20000070
 8000c94:	2000020c 	.word	0x2000020c

08000c98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c9c:	4b03      	ldr	r3, [pc, #12]	@ (8000cac <HAL_GetTick+0x14>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	2000020c 	.word	0x2000020c

08000cb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cb8:	f7ff ffee 	bl	8000c98 <HAL_GetTick>
 8000cbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cc8:	d005      	beq.n	8000cd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000cca:	4b0a      	ldr	r3, [pc, #40]	@ (8000cf4 <HAL_Delay+0x44>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	461a      	mov	r2, r3
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	4413      	add	r3, r2
 8000cd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffde 	bl	8000c98 <HAL_GetTick>
 8000cdc:	4602      	mov	r2, r0
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	68fa      	ldr	r2, [r7, #12]
 8000ce4:	429a      	cmp	r2, r3
 8000ce6:	d8f7      	bhi.n	8000cd8 <HAL_Delay+0x28>
  {
  }
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3710      	adds	r7, #16
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000070 	.word	0x20000070

08000cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b085      	sub	sp, #20
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	f003 0307 	and.w	r3, r3, #7
 8000d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d08:	4b0c      	ldr	r3, [pc, #48]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d0e:	68ba      	ldr	r2, [r7, #8]
 8000d10:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d14:	4013      	ands	r3, r2
 8000d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d1c:	68bb      	ldr	r3, [r7, #8]
 8000d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d20:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d2a:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <__NVIC_SetPriorityGrouping+0x44>)
 8000d2c:	68bb      	ldr	r3, [r7, #8]
 8000d2e:	60d3      	str	r3, [r2, #12]
}
 8000d30:	bf00      	nop
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d44:	4b04      	ldr	r3, [pc, #16]	@ (8000d58 <__NVIC_GetPriorityGrouping+0x18>)
 8000d46:	68db      	ldr	r3, [r3, #12]
 8000d48:	0a1b      	lsrs	r3, r3, #8
 8000d4a:	f003 0307 	and.w	r3, r3, #7
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00

08000d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b083      	sub	sp, #12
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	4603      	mov	r3, r0
 8000d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	db0b      	blt.n	8000d86 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d6e:	79fb      	ldrb	r3, [r7, #7]
 8000d70:	f003 021f 	and.w	r2, r3, #31
 8000d74:	4907      	ldr	r1, [pc, #28]	@ (8000d94 <__NVIC_EnableIRQ+0x38>)
 8000d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d7a:	095b      	lsrs	r3, r3, #5
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d86:	bf00      	nop
 8000d88:	370c      	adds	r7, #12
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000e100 	.word	0xe000e100

08000d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	db0a      	blt.n	8000dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	b2da      	uxtb	r2, r3
 8000db0:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <__NVIC_SetPriority+0x4c>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	0112      	lsls	r2, r2, #4
 8000db8:	b2d2      	uxtb	r2, r2
 8000dba:	440b      	add	r3, r1
 8000dbc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dc0:	e00a      	b.n	8000dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	b2da      	uxtb	r2, r3
 8000dc6:	4908      	ldr	r1, [pc, #32]	@ (8000de8 <__NVIC_SetPriority+0x50>)
 8000dc8:	79fb      	ldrb	r3, [r7, #7]
 8000dca:	f003 030f 	and.w	r3, r3, #15
 8000dce:	3b04      	subs	r3, #4
 8000dd0:	0112      	lsls	r2, r2, #4
 8000dd2:	b2d2      	uxtb	r2, r2
 8000dd4:	440b      	add	r3, r1
 8000dd6:	761a      	strb	r2, [r3, #24]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr
 8000de4:	e000e100 	.word	0xe000e100
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b089      	sub	sp, #36	@ 0x24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	60f8      	str	r0, [r7, #12]
 8000df4:	60b9      	str	r1, [r7, #8]
 8000df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	f1c3 0307 	rsb	r3, r3, #7
 8000e06:	2b04      	cmp	r3, #4
 8000e08:	bf28      	it	cs
 8000e0a:	2304      	movcs	r3, #4
 8000e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	3304      	adds	r3, #4
 8000e12:	2b06      	cmp	r3, #6
 8000e14:	d902      	bls.n	8000e1c <NVIC_EncodePriority+0x30>
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	3b03      	subs	r3, #3
 8000e1a:	e000      	b.n	8000e1e <NVIC_EncodePriority+0x32>
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	f04f 32ff 	mov.w	r2, #4294967295
 8000e24:	69bb      	ldr	r3, [r7, #24]
 8000e26:	fa02 f303 	lsl.w	r3, r2, r3
 8000e2a:	43da      	mvns	r2, r3
 8000e2c:	68bb      	ldr	r3, [r7, #8]
 8000e2e:	401a      	ands	r2, r3
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e34:	f04f 31ff 	mov.w	r1, #4294967295
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e3e:	43d9      	mvns	r1, r3
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e44:	4313      	orrs	r3, r2
         );
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3724      	adds	r7, #36	@ 0x24
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e50:	4770      	bx	lr
	...

08000e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e64:	d301      	bcc.n	8000e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e66:	2301      	movs	r3, #1
 8000e68:	e00f      	b.n	8000e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <SysTick_Config+0x40>)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e72:	210f      	movs	r1, #15
 8000e74:	f04f 30ff 	mov.w	r0, #4294967295
 8000e78:	f7ff ff8e 	bl	8000d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e7c:	4b05      	ldr	r3, [pc, #20]	@ (8000e94 <SysTick_Config+0x40>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e82:	4b04      	ldr	r3, [pc, #16]	@ (8000e94 <SysTick_Config+0x40>)
 8000e84:	2207      	movs	r2, #7
 8000e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	e000e010 	.word	0xe000e010

08000e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ea0:	6878      	ldr	r0, [r7, #4]
 8000ea2:	f7ff ff29 	bl	8000cf8 <__NVIC_SetPriorityGrouping>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}

08000eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000eae:	b580      	push	{r7, lr}
 8000eb0:	b086      	sub	sp, #24
 8000eb2:	af00      	add	r7, sp, #0
 8000eb4:	4603      	mov	r3, r0
 8000eb6:	60b9      	str	r1, [r7, #8]
 8000eb8:	607a      	str	r2, [r7, #4]
 8000eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ec0:	f7ff ff3e 	bl	8000d40 <__NVIC_GetPriorityGrouping>
 8000ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	68b9      	ldr	r1, [r7, #8]
 8000eca:	6978      	ldr	r0, [r7, #20]
 8000ecc:	f7ff ff8e 	bl	8000dec <NVIC_EncodePriority>
 8000ed0:	4602      	mov	r2, r0
 8000ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ed6:	4611      	mov	r1, r2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff5d 	bl	8000d98 <__NVIC_SetPriority>
}
 8000ede:	bf00      	nop
 8000ee0:	3718      	adds	r7, #24
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}

08000ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ee6:	b580      	push	{r7, lr}
 8000ee8:	b082      	sub	sp, #8
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	4603      	mov	r3, r0
 8000eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ff31 	bl	8000d5c <__NVIC_EnableIRQ>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}

08000f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f02:	b580      	push	{r7, lr}
 8000f04:	b082      	sub	sp, #8
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000f0a:	6878      	ldr	r0, [r7, #4]
 8000f0c:	f7ff ffa2 	bl	8000e54 <SysTick_Config>
 8000f10:	4603      	mov	r3, r0
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
	...

08000f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b089      	sub	sp, #36	@ 0x24
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f26:	2300      	movs	r3, #0
 8000f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
 8000f36:	e159      	b.n	80011ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f38:	2201      	movs	r2, #1
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	697a      	ldr	r2, [r7, #20]
 8000f48:	4013      	ands	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f4c:	693a      	ldr	r2, [r7, #16]
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	f040 8148 	bne.w	80011e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f003 0303 	and.w	r3, r3, #3
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d005      	beq.n	8000f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f62:	683b      	ldr	r3, [r7, #0]
 8000f64:	685b      	ldr	r3, [r3, #4]
 8000f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d130      	bne.n	8000fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	005b      	lsls	r3, r3, #1
 8000f78:	2203      	movs	r2, #3
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	69ba      	ldr	r2, [r7, #24]
 8000f82:	4013      	ands	r3, r2
 8000f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	68da      	ldr	r2, [r3, #12]
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fac:	43db      	mvns	r3, r3
 8000fae:	69ba      	ldr	r2, [r7, #24]
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	091b      	lsrs	r3, r3, #4
 8000fba:	f003 0201 	and.w	r2, r3, #1
 8000fbe:	69fb      	ldr	r3, [r7, #28]
 8000fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4313      	orrs	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fd0:	683b      	ldr	r3, [r7, #0]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	2b03      	cmp	r3, #3
 8000fda:	d017      	beq.n	800100c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	68db      	ldr	r3, [r3, #12]
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fe2:	69fb      	ldr	r3, [r7, #28]
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	2203      	movs	r2, #3
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43db      	mvns	r3, r3
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	689a      	ldr	r2, [r3, #8]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	69ba      	ldr	r2, [r7, #24]
 8001002:	4313      	orrs	r3, r2
 8001004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f003 0303 	and.w	r3, r3, #3
 8001014:	2b02      	cmp	r3, #2
 8001016:	d123      	bne.n	8001060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001018:	69fb      	ldr	r3, [r7, #28]
 800101a:	08da      	lsrs	r2, r3, #3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	3208      	adds	r2, #8
 8001020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	f003 0307 	and.w	r3, r3, #7
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	220f      	movs	r2, #15
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	4013      	ands	r3, r2
 800103a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	691a      	ldr	r2, [r3, #16]
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	4313      	orrs	r3, r2
 8001050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	08da      	lsrs	r2, r3, #3
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	3208      	adds	r2, #8
 800105a:	69b9      	ldr	r1, [r7, #24]
 800105c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	2203      	movs	r2, #3
 800106c:	fa02 f303 	lsl.w	r3, r2, r3
 8001070:	43db      	mvns	r3, r3
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	4013      	ands	r3, r2
 8001076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	f003 0203 	and.w	r2, r3, #3
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	005b      	lsls	r3, r3, #1
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	69ba      	ldr	r2, [r7, #24]
 800108a:	4313      	orrs	r3, r2
 800108c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800109c:	2b00      	cmp	r3, #0
 800109e:	f000 80a2 	beq.w	80011e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a2:	2300      	movs	r3, #0
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	4b57      	ldr	r3, [pc, #348]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010aa:	4a56      	ldr	r2, [pc, #344]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80010b2:	4b54      	ldr	r3, [pc, #336]	@ (8001204 <HAL_GPIO_Init+0x2e8>)
 80010b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010be:	4a52      	ldr	r2, [pc, #328]	@ (8001208 <HAL_GPIO_Init+0x2ec>)
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	089b      	lsrs	r3, r3, #2
 80010c4:	3302      	adds	r3, #2
 80010c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	f003 0303 	and.w	r3, r3, #3
 80010d2:	009b      	lsls	r3, r3, #2
 80010d4:	220f      	movs	r2, #15
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	69ba      	ldr	r2, [r7, #24]
 80010de:	4013      	ands	r3, r2
 80010e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a49      	ldr	r2, [pc, #292]	@ (800120c <HAL_GPIO_Init+0x2f0>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d019      	beq.n	800111e <HAL_GPIO_Init+0x202>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a48      	ldr	r2, [pc, #288]	@ (8001210 <HAL_GPIO_Init+0x2f4>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d013      	beq.n	800111a <HAL_GPIO_Init+0x1fe>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a47      	ldr	r2, [pc, #284]	@ (8001214 <HAL_GPIO_Init+0x2f8>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d00d      	beq.n	8001116 <HAL_GPIO_Init+0x1fa>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	4a46      	ldr	r2, [pc, #280]	@ (8001218 <HAL_GPIO_Init+0x2fc>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d007      	beq.n	8001112 <HAL_GPIO_Init+0x1f6>
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4a45      	ldr	r2, [pc, #276]	@ (800121c <HAL_GPIO_Init+0x300>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d101      	bne.n	800110e <HAL_GPIO_Init+0x1f2>
 800110a:	2304      	movs	r3, #4
 800110c:	e008      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800110e:	2307      	movs	r3, #7
 8001110:	e006      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001112:	2303      	movs	r3, #3
 8001114:	e004      	b.n	8001120 <HAL_GPIO_Init+0x204>
 8001116:	2302      	movs	r3, #2
 8001118:	e002      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111a:	2301      	movs	r3, #1
 800111c:	e000      	b.n	8001120 <HAL_GPIO_Init+0x204>
 800111e:	2300      	movs	r3, #0
 8001120:	69fa      	ldr	r2, [r7, #28]
 8001122:	f002 0203 	and.w	r2, r2, #3
 8001126:	0092      	lsls	r2, r2, #2
 8001128:	4093      	lsls	r3, r2
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4313      	orrs	r3, r2
 800112e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001130:	4935      	ldr	r1, [pc, #212]	@ (8001208 <HAL_GPIO_Init+0x2ec>)
 8001132:	69fb      	ldr	r3, [r7, #28]
 8001134:	089b      	lsrs	r3, r3, #2
 8001136:	3302      	adds	r3, #2
 8001138:	69ba      	ldr	r2, [r7, #24]
 800113a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800113e:	4b38      	ldr	r3, [pc, #224]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001144:	693b      	ldr	r3, [r7, #16]
 8001146:	43db      	mvns	r3, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4013      	ands	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	693b      	ldr	r3, [r7, #16]
 800115e:	4313      	orrs	r3, r2
 8001160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001162:	4a2f      	ldr	r2, [pc, #188]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001168:	4b2d      	ldr	r3, [pc, #180]	@ (8001220 <HAL_GPIO_Init+0x304>)
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800116e:	693b      	ldr	r3, [r7, #16]
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001184:	69ba      	ldr	r2, [r7, #24]
 8001186:	693b      	ldr	r3, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800118c:	4a24      	ldr	r2, [pc, #144]	@ (8001220 <HAL_GPIO_Init+0x304>)
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001192:	4b23      	ldr	r3, [pc, #140]	@ (8001220 <HAL_GPIO_Init+0x304>)
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80011ae:	69ba      	ldr	r2, [r7, #24]
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011b8:	69bb      	ldr	r3, [r7, #24]
 80011ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011bc:	4b18      	ldr	r3, [pc, #96]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011c2:	693b      	ldr	r3, [r7, #16]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	69ba      	ldr	r2, [r7, #24]
 80011c8:	4013      	ands	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80011d8:	69ba      	ldr	r2, [r7, #24]
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	4313      	orrs	r3, r2
 80011de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001220 <HAL_GPIO_Init+0x304>)
 80011e2:	69bb      	ldr	r3, [r7, #24]
 80011e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	3301      	adds	r3, #1
 80011ea:	61fb      	str	r3, [r7, #28]
 80011ec:	69fb      	ldr	r3, [r7, #28]
 80011ee:	2b0f      	cmp	r3, #15
 80011f0:	f67f aea2 	bls.w	8000f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011f4:	bf00      	nop
 80011f6:	bf00      	nop
 80011f8:	3724      	adds	r7, #36	@ 0x24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40013800 	.word	0x40013800
 800120c:	40020000 	.word	0x40020000
 8001210:	40020400 	.word	0x40020400
 8001214:	40020800 	.word	0x40020800
 8001218:	40020c00 	.word	0x40020c00
 800121c:	40021000 	.word	0x40021000
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001224:	b480      	push	{r7}
 8001226:	b083      	sub	sp, #12
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
 8001230:	4613      	mov	r3, r2
 8001232:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001234:	787b      	ldrb	r3, [r7, #1]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800123a:	887a      	ldrh	r2, [r7, #2]
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001240:	e003      	b.n	800124a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001242:	887b      	ldrh	r3, [r7, #2]
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	619a      	str	r2, [r3, #24]
}
 800124a:	bf00      	nop
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001256:	b580      	push	{r7, lr}
 8001258:	b086      	sub	sp, #24
 800125a:	af02      	add	r7, sp, #8
 800125c:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d101      	bne.n	8001268 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001264:	2301      	movs	r3, #1
 8001266:	e059      	b.n	800131c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001274:	b2db      	uxtb	r3, r3
 8001276:	2b00      	cmp	r3, #0
 8001278:	d106      	bne.n	8001288 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2200      	movs	r2, #0
 800127e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f00c f942 	bl	800d50c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2203      	movs	r2, #3
 800128c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001296:	d102      	bne.n	800129e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2200      	movs	r2, #0
 800129c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4618      	mov	r0, r3
 80012a4:	f003 fa25 	bl	80046f2 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	6818      	ldr	r0, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	7c1a      	ldrb	r2, [r3, #16]
 80012b0:	f88d 2000 	strb.w	r2, [sp]
 80012b4:	3304      	adds	r3, #4
 80012b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012b8:	f003 f9a6 	bl	8004608 <USB_CoreInit>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d005      	beq.n	80012ce <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2202      	movs	r2, #2
 80012c6:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e026      	b.n	800131c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	2101      	movs	r1, #1
 80012d4:	4618      	mov	r0, r3
 80012d6:	f003 fa1d 	bl	8004714 <USB_SetCurrentMode>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d005      	beq.n	80012ec <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2202      	movs	r2, #2
 80012e4:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	e017      	b.n	800131c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	6818      	ldr	r0, [r3, #0]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7c1a      	ldrb	r2, [r3, #16]
 80012f4:	f88d 2000 	strb.w	r2, [sp]
 80012f8:	3304      	adds	r3, #4
 80012fa:	cb0e      	ldmia	r3, {r1, r2, r3}
 80012fc:	f003 fbc0 	bl	8004a80 <USB_HostInit>
 8001300:	4603      	mov	r3, r0
 8001302:	2b00      	cmp	r3, #0
 8001304:	d005      	beq.n	8001312 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	2202      	movs	r2, #2
 800130a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	e004      	b.n	800131c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800131a:	2300      	movs	r3, #0
}
 800131c:	4618      	mov	r0, r3
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b08b      	sub	sp, #44	@ 0x2c
 8001328:	af04      	add	r7, sp, #16
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	4608      	mov	r0, r1
 800132e:	4611      	mov	r1, r2
 8001330:	461a      	mov	r2, r3
 8001332:	4603      	mov	r3, r0
 8001334:	70fb      	strb	r3, [r7, #3]
 8001336:	460b      	mov	r3, r1
 8001338:	70bb      	strb	r3, [r7, #2]
 800133a:	4613      	mov	r3, r2
 800133c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800133e:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001340:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001348:	2b01      	cmp	r3, #1
 800134a:	d101      	bne.n	8001350 <HAL_HCD_HC_Init+0x2c>
 800134c:	2302      	movs	r3, #2
 800134e:	e09d      	b.n	800148c <HAL_HCD_HC_Init+0x168>
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2201      	movs	r2, #1
 8001354:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001358:	78fa      	ldrb	r2, [r7, #3]
 800135a:	6879      	ldr	r1, [r7, #4]
 800135c:	4613      	mov	r3, r2
 800135e:	011b      	lsls	r3, r3, #4
 8001360:	1a9b      	subs	r3, r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	440b      	add	r3, r1
 8001366:	3319      	adds	r3, #25
 8001368:	2200      	movs	r2, #0
 800136a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 800136c:	78fa      	ldrb	r2, [r7, #3]
 800136e:	6879      	ldr	r1, [r7, #4]
 8001370:	4613      	mov	r3, r2
 8001372:	011b      	lsls	r3, r3, #4
 8001374:	1a9b      	subs	r3, r3, r2
 8001376:	009b      	lsls	r3, r3, #2
 8001378:	440b      	add	r3, r1
 800137a:	3314      	adds	r3, #20
 800137c:	787a      	ldrb	r2, [r7, #1]
 800137e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001380:	78fa      	ldrb	r2, [r7, #3]
 8001382:	6879      	ldr	r1, [r7, #4]
 8001384:	4613      	mov	r3, r2
 8001386:	011b      	lsls	r3, r3, #4
 8001388:	1a9b      	subs	r3, r3, r2
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	440b      	add	r3, r1
 800138e:	3315      	adds	r3, #21
 8001390:	78fa      	ldrb	r2, [r7, #3]
 8001392:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001394:	78fa      	ldrb	r2, [r7, #3]
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	011b      	lsls	r3, r3, #4
 800139c:	1a9b      	subs	r3, r3, r2
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	440b      	add	r3, r1
 80013a2:	3326      	adds	r3, #38	@ 0x26
 80013a4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80013a8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80013aa:	78fa      	ldrb	r2, [r7, #3]
 80013ac:	78bb      	ldrb	r3, [r7, #2]
 80013ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80013b2:	b2d8      	uxtb	r0, r3
 80013b4:	6879      	ldr	r1, [r7, #4]
 80013b6:	4613      	mov	r3, r2
 80013b8:	011b      	lsls	r3, r3, #4
 80013ba:	1a9b      	subs	r3, r3, r2
 80013bc:	009b      	lsls	r3, r3, #2
 80013be:	440b      	add	r3, r1
 80013c0:	3316      	adds	r3, #22
 80013c2:	4602      	mov	r2, r0
 80013c4:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80013c6:	78fb      	ldrb	r3, [r7, #3]
 80013c8:	4619      	mov	r1, r3
 80013ca:	6878      	ldr	r0, [r7, #4]
 80013cc:	f000 fbc8 	bl	8001b60 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80013d0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	da0a      	bge.n	80013ee <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80013d8:	78fa      	ldrb	r2, [r7, #3]
 80013da:	6879      	ldr	r1, [r7, #4]
 80013dc:	4613      	mov	r3, r2
 80013de:	011b      	lsls	r3, r3, #4
 80013e0:	1a9b      	subs	r3, r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	440b      	add	r3, r1
 80013e6:	3317      	adds	r3, #23
 80013e8:	2201      	movs	r2, #1
 80013ea:	701a      	strb	r2, [r3, #0]
 80013ec:	e009      	b.n	8001402 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80013ee:	78fa      	ldrb	r2, [r7, #3]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	4613      	mov	r3, r2
 80013f4:	011b      	lsls	r3, r3, #4
 80013f6:	1a9b      	subs	r3, r3, r2
 80013f8:	009b      	lsls	r3, r3, #2
 80013fa:	440b      	add	r3, r1
 80013fc:	3317      	adds	r3, #23
 80013fe:	2200      	movs	r2, #0
 8001400:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f003 fc88 	bl	8004d1c <USB_GetHostSpeed>
 800140c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800140e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001412:	2b01      	cmp	r3, #1
 8001414:	d10b      	bne.n	800142e <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001416:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800141a:	2b01      	cmp	r3, #1
 800141c:	d107      	bne.n	800142e <HAL_HCD_HC_Init+0x10a>
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d104      	bne.n	800142e <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	2bbc      	cmp	r3, #188	@ 0xbc
 8001428:	d901      	bls.n	800142e <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800142a:	23bc      	movs	r3, #188	@ 0xbc
 800142c:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800142e:	78fa      	ldrb	r2, [r7, #3]
 8001430:	6879      	ldr	r1, [r7, #4]
 8001432:	4613      	mov	r3, r2
 8001434:	011b      	lsls	r3, r3, #4
 8001436:	1a9b      	subs	r3, r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	440b      	add	r3, r1
 800143c:	3318      	adds	r3, #24
 800143e:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001442:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8001444:	78fa      	ldrb	r2, [r7, #3]
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	b298      	uxth	r0, r3
 800144a:	6879      	ldr	r1, [r7, #4]
 800144c:	4613      	mov	r3, r2
 800144e:	011b      	lsls	r3, r3, #4
 8001450:	1a9b      	subs	r3, r3, r2
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	440b      	add	r3, r1
 8001456:	3328      	adds	r3, #40	@ 0x28
 8001458:	4602      	mov	r2, r0
 800145a:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6818      	ldr	r0, [r3, #0]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	b29b      	uxth	r3, r3
 8001464:	787c      	ldrb	r4, [r7, #1]
 8001466:	78ba      	ldrb	r2, [r7, #2]
 8001468:	78f9      	ldrb	r1, [r7, #3]
 800146a:	9302      	str	r3, [sp, #8]
 800146c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4623      	mov	r3, r4
 800147a:	f003 fc77 	bl	8004d6c <USB_HC_Init>
 800147e:	4603      	mov	r3, r0
 8001480:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800148a:	7bfb      	ldrb	r3, [r7, #15]
}
 800148c:	4618      	mov	r0, r3
 800148e:	371c      	adds	r7, #28
 8001490:	46bd      	mov	sp, r7
 8001492:	bd90      	pop	{r4, r7, pc}

08001494 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	460b      	mov	r3, r1
 800149e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80014a0:	2300      	movs	r3, #0
 80014a2:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80014aa:	2b01      	cmp	r3, #1
 80014ac:	d101      	bne.n	80014b2 <HAL_HCD_HC_Halt+0x1e>
 80014ae:	2302      	movs	r3, #2
 80014b0:	e00f      	b.n	80014d2 <HAL_HCD_HC_Halt+0x3e>
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	2201      	movs	r2, #1
 80014b6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	78fa      	ldrb	r2, [r7, #3]
 80014c0:	4611      	mov	r1, r2
 80014c2:	4618      	mov	r0, r3
 80014c4:	f003 ffbd 	bl	8005442 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80014d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3710      	adds	r7, #16
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b082      	sub	sp, #8
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
 80014e4:	4608      	mov	r0, r1
 80014e6:	4611      	mov	r1, r2
 80014e8:	461a      	mov	r2, r3
 80014ea:	4603      	mov	r3, r0
 80014ec:	70fb      	strb	r3, [r7, #3]
 80014ee:	460b      	mov	r3, r1
 80014f0:	70bb      	strb	r3, [r7, #2]
 80014f2:	4613      	mov	r3, r2
 80014f4:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80014f6:	78fa      	ldrb	r2, [r7, #3]
 80014f8:	6879      	ldr	r1, [r7, #4]
 80014fa:	4613      	mov	r3, r2
 80014fc:	011b      	lsls	r3, r3, #4
 80014fe:	1a9b      	subs	r3, r3, r2
 8001500:	009b      	lsls	r3, r3, #2
 8001502:	440b      	add	r3, r1
 8001504:	3317      	adds	r3, #23
 8001506:	78ba      	ldrb	r2, [r7, #2]
 8001508:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800150a:	78fa      	ldrb	r2, [r7, #3]
 800150c:	6879      	ldr	r1, [r7, #4]
 800150e:	4613      	mov	r3, r2
 8001510:	011b      	lsls	r3, r3, #4
 8001512:	1a9b      	subs	r3, r3, r2
 8001514:	009b      	lsls	r3, r3, #2
 8001516:	440b      	add	r3, r1
 8001518:	3326      	adds	r3, #38	@ 0x26
 800151a:	787a      	ldrb	r2, [r7, #1]
 800151c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800151e:	7c3b      	ldrb	r3, [r7, #16]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d114      	bne.n	800154e <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001524:	78fa      	ldrb	r2, [r7, #3]
 8001526:	6879      	ldr	r1, [r7, #4]
 8001528:	4613      	mov	r3, r2
 800152a:	011b      	lsls	r3, r3, #4
 800152c:	1a9b      	subs	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	332a      	adds	r3, #42	@ 0x2a
 8001534:	2203      	movs	r2, #3
 8001536:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001538:	78fa      	ldrb	r2, [r7, #3]
 800153a:	6879      	ldr	r1, [r7, #4]
 800153c:	4613      	mov	r3, r2
 800153e:	011b      	lsls	r3, r3, #4
 8001540:	1a9b      	subs	r3, r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	440b      	add	r3, r1
 8001546:	3319      	adds	r3, #25
 8001548:	7f3a      	ldrb	r2, [r7, #28]
 800154a:	701a      	strb	r2, [r3, #0]
 800154c:	e009      	b.n	8001562 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800154e:	78fa      	ldrb	r2, [r7, #3]
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	4613      	mov	r3, r2
 8001554:	011b      	lsls	r3, r3, #4
 8001556:	1a9b      	subs	r3, r3, r2
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	440b      	add	r3, r1
 800155c:	332a      	adds	r3, #42	@ 0x2a
 800155e:	2202      	movs	r2, #2
 8001560:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001562:	787b      	ldrb	r3, [r7, #1]
 8001564:	2b03      	cmp	r3, #3
 8001566:	f200 8102 	bhi.w	800176e <HAL_HCD_HC_SubmitRequest+0x292>
 800156a:	a201      	add	r2, pc, #4	@ (adr r2, 8001570 <HAL_HCD_HC_SubmitRequest+0x94>)
 800156c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001570:	08001581 	.word	0x08001581
 8001574:	08001759 	.word	0x08001759
 8001578:	08001645 	.word	0x08001645
 800157c:	080016cf 	.word	0x080016cf
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8001580:	7c3b      	ldrb	r3, [r7, #16]
 8001582:	2b01      	cmp	r3, #1
 8001584:	f040 80f5 	bne.w	8001772 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8001588:	78bb      	ldrb	r3, [r7, #2]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d12d      	bne.n	80015ea <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800158e:	8b3b      	ldrh	r3, [r7, #24]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d109      	bne.n	80015a8 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8001594:	78fa      	ldrb	r2, [r7, #3]
 8001596:	6879      	ldr	r1, [r7, #4]
 8001598:	4613      	mov	r3, r2
 800159a:	011b      	lsls	r3, r3, #4
 800159c:	1a9b      	subs	r3, r3, r2
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	440b      	add	r3, r1
 80015a2:	333d      	adds	r3, #61	@ 0x3d
 80015a4:	2201      	movs	r2, #1
 80015a6:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80015a8:	78fa      	ldrb	r2, [r7, #3]
 80015aa:	6879      	ldr	r1, [r7, #4]
 80015ac:	4613      	mov	r3, r2
 80015ae:	011b      	lsls	r3, r3, #4
 80015b0:	1a9b      	subs	r3, r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	440b      	add	r3, r1
 80015b6:	333d      	adds	r3, #61	@ 0x3d
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10a      	bne.n	80015d4 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	6879      	ldr	r1, [r7, #4]
 80015c2:	4613      	mov	r3, r2
 80015c4:	011b      	lsls	r3, r3, #4
 80015c6:	1a9b      	subs	r3, r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	440b      	add	r3, r1
 80015cc:	332a      	adds	r3, #42	@ 0x2a
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80015d2:	e0ce      	b.n	8001772 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80015d4:	78fa      	ldrb	r2, [r7, #3]
 80015d6:	6879      	ldr	r1, [r7, #4]
 80015d8:	4613      	mov	r3, r2
 80015da:	011b      	lsls	r3, r3, #4
 80015dc:	1a9b      	subs	r3, r3, r2
 80015de:	009b      	lsls	r3, r3, #2
 80015e0:	440b      	add	r3, r1
 80015e2:	332a      	adds	r3, #42	@ 0x2a
 80015e4:	2202      	movs	r2, #2
 80015e6:	701a      	strb	r2, [r3, #0]
      break;
 80015e8:	e0c3      	b.n	8001772 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80015ea:	78fa      	ldrb	r2, [r7, #3]
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	4613      	mov	r3, r2
 80015f0:	011b      	lsls	r3, r3, #4
 80015f2:	1a9b      	subs	r3, r3, r2
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	440b      	add	r3, r1
 80015f8:	331a      	adds	r3, #26
 80015fa:	781b      	ldrb	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	f040 80b8 	bne.w	8001772 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8001602:	78fa      	ldrb	r2, [r7, #3]
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	4613      	mov	r3, r2
 8001608:	011b      	lsls	r3, r3, #4
 800160a:	1a9b      	subs	r3, r3, r2
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	440b      	add	r3, r1
 8001610:	333c      	adds	r3, #60	@ 0x3c
 8001612:	781b      	ldrb	r3, [r3, #0]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d10a      	bne.n	800162e <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001618:	78fa      	ldrb	r2, [r7, #3]
 800161a:	6879      	ldr	r1, [r7, #4]
 800161c:	4613      	mov	r3, r2
 800161e:	011b      	lsls	r3, r3, #4
 8001620:	1a9b      	subs	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	332a      	adds	r3, #42	@ 0x2a
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]
      break;
 800162c:	e0a1      	b.n	8001772 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800162e:	78fa      	ldrb	r2, [r7, #3]
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	4613      	mov	r3, r2
 8001634:	011b      	lsls	r3, r3, #4
 8001636:	1a9b      	subs	r3, r3, r2
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	440b      	add	r3, r1
 800163c:	332a      	adds	r3, #42	@ 0x2a
 800163e:	2202      	movs	r2, #2
 8001640:	701a      	strb	r2, [r3, #0]
      break;
 8001642:	e096      	b.n	8001772 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001644:	78bb      	ldrb	r3, [r7, #2]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d120      	bne.n	800168c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800164a:	78fa      	ldrb	r2, [r7, #3]
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	4613      	mov	r3, r2
 8001650:	011b      	lsls	r3, r3, #4
 8001652:	1a9b      	subs	r3, r3, r2
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	440b      	add	r3, r1
 8001658:	333d      	adds	r3, #61	@ 0x3d
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d10a      	bne.n	8001676 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001660:	78fa      	ldrb	r2, [r7, #3]
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	4613      	mov	r3, r2
 8001666:	011b      	lsls	r3, r3, #4
 8001668:	1a9b      	subs	r3, r3, r2
 800166a:	009b      	lsls	r3, r3, #2
 800166c:	440b      	add	r3, r1
 800166e:	332a      	adds	r3, #42	@ 0x2a
 8001670:	2200      	movs	r2, #0
 8001672:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001674:	e07e      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001676:	78fa      	ldrb	r2, [r7, #3]
 8001678:	6879      	ldr	r1, [r7, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	011b      	lsls	r3, r3, #4
 800167e:	1a9b      	subs	r3, r3, r2
 8001680:	009b      	lsls	r3, r3, #2
 8001682:	440b      	add	r3, r1
 8001684:	332a      	adds	r3, #42	@ 0x2a
 8001686:	2202      	movs	r2, #2
 8001688:	701a      	strb	r2, [r3, #0]
      break;
 800168a:	e073      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800168c:	78fa      	ldrb	r2, [r7, #3]
 800168e:	6879      	ldr	r1, [r7, #4]
 8001690:	4613      	mov	r3, r2
 8001692:	011b      	lsls	r3, r3, #4
 8001694:	1a9b      	subs	r3, r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	440b      	add	r3, r1
 800169a:	333c      	adds	r3, #60	@ 0x3c
 800169c:	781b      	ldrb	r3, [r3, #0]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d10a      	bne.n	80016b8 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016a2:	78fa      	ldrb	r2, [r7, #3]
 80016a4:	6879      	ldr	r1, [r7, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	011b      	lsls	r3, r3, #4
 80016aa:	1a9b      	subs	r3, r3, r2
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	332a      	adds	r3, #42	@ 0x2a
 80016b2:	2200      	movs	r2, #0
 80016b4:	701a      	strb	r2, [r3, #0]
      break;
 80016b6:	e05d      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80016b8:	78fa      	ldrb	r2, [r7, #3]
 80016ba:	6879      	ldr	r1, [r7, #4]
 80016bc:	4613      	mov	r3, r2
 80016be:	011b      	lsls	r3, r3, #4
 80016c0:	1a9b      	subs	r3, r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	332a      	adds	r3, #42	@ 0x2a
 80016c8:	2202      	movs	r2, #2
 80016ca:	701a      	strb	r2, [r3, #0]
      break;
 80016cc:	e052      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80016ce:	78bb      	ldrb	r3, [r7, #2]
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d120      	bne.n	8001716 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80016d4:	78fa      	ldrb	r2, [r7, #3]
 80016d6:	6879      	ldr	r1, [r7, #4]
 80016d8:	4613      	mov	r3, r2
 80016da:	011b      	lsls	r3, r3, #4
 80016dc:	1a9b      	subs	r3, r3, r2
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	440b      	add	r3, r1
 80016e2:	333d      	adds	r3, #61	@ 0x3d
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d10a      	bne.n	8001700 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	011b      	lsls	r3, r3, #4
 80016f2:	1a9b      	subs	r3, r3, r2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	440b      	add	r3, r1
 80016f8:	332a      	adds	r3, #42	@ 0x2a
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80016fe:	e039      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001700:	78fa      	ldrb	r2, [r7, #3]
 8001702:	6879      	ldr	r1, [r7, #4]
 8001704:	4613      	mov	r3, r2
 8001706:	011b      	lsls	r3, r3, #4
 8001708:	1a9b      	subs	r3, r3, r2
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	332a      	adds	r3, #42	@ 0x2a
 8001710:	2202      	movs	r2, #2
 8001712:	701a      	strb	r2, [r3, #0]
      break;
 8001714:	e02e      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001716:	78fa      	ldrb	r2, [r7, #3]
 8001718:	6879      	ldr	r1, [r7, #4]
 800171a:	4613      	mov	r3, r2
 800171c:	011b      	lsls	r3, r3, #4
 800171e:	1a9b      	subs	r3, r3, r2
 8001720:	009b      	lsls	r3, r3, #2
 8001722:	440b      	add	r3, r1
 8001724:	333c      	adds	r3, #60	@ 0x3c
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d10a      	bne.n	8001742 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800172c:	78fa      	ldrb	r2, [r7, #3]
 800172e:	6879      	ldr	r1, [r7, #4]
 8001730:	4613      	mov	r3, r2
 8001732:	011b      	lsls	r3, r3, #4
 8001734:	1a9b      	subs	r3, r3, r2
 8001736:	009b      	lsls	r3, r3, #2
 8001738:	440b      	add	r3, r1
 800173a:	332a      	adds	r3, #42	@ 0x2a
 800173c:	2200      	movs	r2, #0
 800173e:	701a      	strb	r2, [r3, #0]
      break;
 8001740:	e018      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001742:	78fa      	ldrb	r2, [r7, #3]
 8001744:	6879      	ldr	r1, [r7, #4]
 8001746:	4613      	mov	r3, r2
 8001748:	011b      	lsls	r3, r3, #4
 800174a:	1a9b      	subs	r3, r3, r2
 800174c:	009b      	lsls	r3, r3, #2
 800174e:	440b      	add	r3, r1
 8001750:	332a      	adds	r3, #42	@ 0x2a
 8001752:	2202      	movs	r2, #2
 8001754:	701a      	strb	r2, [r3, #0]
      break;
 8001756:	e00d      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001758:	78fa      	ldrb	r2, [r7, #3]
 800175a:	6879      	ldr	r1, [r7, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	011b      	lsls	r3, r3, #4
 8001760:	1a9b      	subs	r3, r3, r2
 8001762:	009b      	lsls	r3, r3, #2
 8001764:	440b      	add	r3, r1
 8001766:	332a      	adds	r3, #42	@ 0x2a
 8001768:	2200      	movs	r2, #0
 800176a:	701a      	strb	r2, [r3, #0]
      break;
 800176c:	e002      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800176e:	bf00      	nop
 8001770:	e000      	b.n	8001774 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8001772:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001774:	78fa      	ldrb	r2, [r7, #3]
 8001776:	6879      	ldr	r1, [r7, #4]
 8001778:	4613      	mov	r3, r2
 800177a:	011b      	lsls	r3, r3, #4
 800177c:	1a9b      	subs	r3, r3, r2
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	440b      	add	r3, r1
 8001782:	332c      	adds	r3, #44	@ 0x2c
 8001784:	697a      	ldr	r2, [r7, #20]
 8001786:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001788:	78fa      	ldrb	r2, [r7, #3]
 800178a:	8b39      	ldrh	r1, [r7, #24]
 800178c:	6878      	ldr	r0, [r7, #4]
 800178e:	4613      	mov	r3, r2
 8001790:	011b      	lsls	r3, r3, #4
 8001792:	1a9b      	subs	r3, r3, r2
 8001794:	009b      	lsls	r3, r3, #2
 8001796:	4403      	add	r3, r0
 8001798:	3334      	adds	r3, #52	@ 0x34
 800179a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800179c:	78fa      	ldrb	r2, [r7, #3]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	011b      	lsls	r3, r3, #4
 80017a4:	1a9b      	subs	r3, r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	334c      	adds	r3, #76	@ 0x4c
 80017ac:	2200      	movs	r2, #0
 80017ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80017b0:	78fa      	ldrb	r2, [r7, #3]
 80017b2:	6879      	ldr	r1, [r7, #4]
 80017b4:	4613      	mov	r3, r2
 80017b6:	011b      	lsls	r3, r3, #4
 80017b8:	1a9b      	subs	r3, r3, r2
 80017ba:	009b      	lsls	r3, r3, #2
 80017bc:	440b      	add	r3, r1
 80017be:	3338      	adds	r3, #56	@ 0x38
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80017c4:	78fa      	ldrb	r2, [r7, #3]
 80017c6:	6879      	ldr	r1, [r7, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	011b      	lsls	r3, r3, #4
 80017cc:	1a9b      	subs	r3, r3, r2
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	440b      	add	r3, r1
 80017d2:	3315      	adds	r3, #21
 80017d4:	78fa      	ldrb	r2, [r7, #3]
 80017d6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	4613      	mov	r3, r2
 80017de:	011b      	lsls	r3, r3, #4
 80017e0:	1a9b      	subs	r3, r3, r2
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	440b      	add	r3, r1
 80017e6:	334d      	adds	r3, #77	@ 0x4d
 80017e8:	2200      	movs	r2, #0
 80017ea:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6818      	ldr	r0, [r3, #0]
 80017f0:	78fa      	ldrb	r2, [r7, #3]
 80017f2:	4613      	mov	r3, r2
 80017f4:	011b      	lsls	r3, r3, #4
 80017f6:	1a9b      	subs	r3, r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	3310      	adds	r3, #16
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	4413      	add	r3, r2
 8001800:	1d19      	adds	r1, r3, #4
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	799b      	ldrb	r3, [r3, #6]
 8001806:	461a      	mov	r2, r3
 8001808:	f003 fbc6 	bl	8004f98 <USB_HC_StartXfer>
 800180c:	4603      	mov	r3, r0
}
 800180e:	4618      	mov	r0, r3
 8001810:	3708      	adds	r7, #8
 8001812:	46bd      	mov	sp, r7
 8001814:	bd80      	pop	{r7, pc}
 8001816:	bf00      	nop

08001818 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4618      	mov	r0, r3
 8001830:	f003 f8e6 	bl	8004a00 <USB_GetMode>
 8001834:	4603      	mov	r3, r0
 8001836:	2b01      	cmp	r3, #1
 8001838:	f040 80fb 	bne.w	8001a32 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4618      	mov	r0, r3
 8001842:	f003 f8a9 	bl	8004998 <USB_ReadInterrupts>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	f000 80f1 	beq.w	8001a30 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	4618      	mov	r0, r3
 8001854:	f003 f8a0 	bl	8004998 <USB_ReadInterrupts>
 8001858:	4603      	mov	r3, r0
 800185a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800185e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001862:	d104      	bne.n	800186e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800186c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f003 f890 	bl	8004998 <USB_ReadInterrupts>
 8001878:	4603      	mov	r3, r0
 800187a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800187e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001882:	d104      	bne.n	800188e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800188c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4618      	mov	r0, r3
 8001894:	f003 f880 	bl	8004998 <USB_ReadInterrupts>
 8001898:	4603      	mov	r3, r0
 800189a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800189e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80018a2:	d104      	bne.n	80018ae <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80018ac:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f003 f870 	bl	8004998 <USB_ReadInterrupts>
 80018b8:	4603      	mov	r3, r0
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d103      	bne.n	80018ca <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	2202      	movs	r2, #2
 80018c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f003 f862 	bl	8004998 <USB_ReadInterrupts>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80018da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80018de:	d120      	bne.n	8001922 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80018e8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 0301 	and.w	r3, r3, #1
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d113      	bne.n	8001922 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80018fa:	2110      	movs	r1, #16
 80018fc:	6938      	ldr	r0, [r7, #16]
 80018fe:	f002 ff55 	bl	80047ac <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001902:	6938      	ldr	r0, [r7, #16]
 8001904:	f002 ff84 	bl	8004810 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	7a5b      	ldrb	r3, [r3, #9]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d105      	bne.n	800191c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	2101      	movs	r1, #1
 8001916:	4618      	mov	r0, r3
 8001918:	f003 f960 	bl	8004bdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f00b fe73 	bl	800d608 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4618      	mov	r0, r3
 8001928:	f003 f836 	bl	8004998 <USB_ReadInterrupts>
 800192c:	4603      	mov	r3, r0
 800192e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001932:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001936:	d102      	bne.n	800193e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8001938:	6878      	ldr	r0, [r7, #4]
 800193a:	f001 fd4d 	bl	80033d8 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f003 f828 	bl	8004998 <USB_ReadInterrupts>
 8001948:	4603      	mov	r3, r0
 800194a:	f003 0308 	and.w	r3, r3, #8
 800194e:	2b08      	cmp	r3, #8
 8001950:	d106      	bne.n	8001960 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001952:	6878      	ldr	r0, [r7, #4]
 8001954:	f00b fe3c 	bl	800d5d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	2208      	movs	r2, #8
 800195e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4618      	mov	r0, r3
 8001966:	f003 f817 	bl	8004998 <USB_ReadInterrupts>
 800196a:	4603      	mov	r3, r0
 800196c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001970:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8001974:	d139      	bne.n	80019ea <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4618      	mov	r0, r3
 800197c:	f003 fd50 	bl	8005420 <USB_HC_ReadInterrupt>
 8001980:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001982:	2300      	movs	r3, #0
 8001984:	617b      	str	r3, [r7, #20]
 8001986:	e025      	b.n	80019d4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	68ba      	ldr	r2, [r7, #8]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
 8001994:	f003 0301 	and.w	r3, r3, #1
 8001998:	2b00      	cmp	r3, #0
 800199a:	d018      	beq.n	80019ce <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	015a      	lsls	r2, r3, #5
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	4413      	add	r3, r2
 80019a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019ae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80019b2:	d106      	bne.n	80019c2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	4619      	mov	r1, r3
 80019ba:	6878      	ldr	r0, [r7, #4]
 80019bc:	f000 f905 	bl	8001bca <HCD_HC_IN_IRQHandler>
 80019c0:	e005      	b.n	80019ce <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	4619      	mov	r1, r3
 80019c8:	6878      	ldr	r0, [r7, #4]
 80019ca:	f000 ff67 	bl	800289c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80019ce:	697b      	ldr	r3, [r7, #20]
 80019d0:	3301      	adds	r3, #1
 80019d2:	617b      	str	r3, [r7, #20]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	795b      	ldrb	r3, [r3, #5]
 80019d8:	461a      	mov	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4293      	cmp	r3, r2
 80019de:	d3d3      	bcc.n	8001988 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80019e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f002 ffd2 	bl	8004998 <USB_ReadInterrupts>
 80019f4:	4603      	mov	r3, r0
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	2b10      	cmp	r3, #16
 80019fc:	d101      	bne.n	8001a02 <HAL_HCD_IRQHandler+0x1ea>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_HCD_IRQHandler+0x1ec>
 8001a02:	2300      	movs	r3, #0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d014      	beq.n	8001a32 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	699a      	ldr	r2, [r3, #24]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0210 	bic.w	r2, r2, #16
 8001a16:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001a18:	6878      	ldr	r0, [r7, #4]
 8001a1a:	f001 fbfe 	bl	800321a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	699a      	ldr	r2, [r3, #24]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	f042 0210 	orr.w	r2, r2, #16
 8001a2c:	619a      	str	r2, [r3, #24]
 8001a2e:	e000      	b.n	8001a32 <HAL_HCD_IRQHandler+0x21a>
      return;
 8001a30:	bf00      	nop
    }
  }
}
 8001a32:	3718      	adds	r7, #24
 8001a34:	46bd      	mov	sp, r7
 8001a36:	bd80      	pop	{r7, pc}

08001a38 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b082      	sub	sp, #8
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d101      	bne.n	8001a4e <HAL_HCD_Start+0x16>
 8001a4a:	2302      	movs	r3, #2
 8001a4c:	e013      	b.n	8001a76 <HAL_HCD_Start+0x3e>
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2201      	movs	r2, #1
 8001a52:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	2101      	movs	r1, #1
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f003 f924 	bl	8004caa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f002 fe32 	bl	80046d0 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001a74:	2300      	movs	r3, #0
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3708      	adds	r7, #8
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}

08001a7e <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	b082      	sub	sp, #8
 8001a82:	af00      	add	r7, sp, #0
 8001a84:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d101      	bne.n	8001a94 <HAL_HCD_Stop+0x16>
 8001a90:	2302      	movs	r3, #2
 8001a92:	e00d      	b.n	8001ab0 <HAL_HCD_Stop+0x32>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f003 fdee 	bl	8005682 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8001aae:	2300      	movs	r3, #0
}
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	3708      	adds	r7, #8
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	bd80      	pop	{r7, pc}

08001ab8 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f003 f8c6 	bl	8004c56 <USB_ResetPort>
 8001aca:	4603      	mov	r3, r0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}

08001ad4 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001ae0:	78fa      	ldrb	r2, [r7, #3]
 8001ae2:	6879      	ldr	r1, [r7, #4]
 8001ae4:	4613      	mov	r3, r2
 8001ae6:	011b      	lsls	r3, r3, #4
 8001ae8:	1a9b      	subs	r3, r3, r2
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	440b      	add	r3, r1
 8001aee:	334c      	adds	r3, #76	@ 0x4c
 8001af0:	781b      	ldrb	r3, [r3, #0]
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	460b      	mov	r3, r1
 8001b08:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001b0a:	78fa      	ldrb	r2, [r7, #3]
 8001b0c:	6879      	ldr	r1, [r7, #4]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	011b      	lsls	r3, r3, #4
 8001b12:	1a9b      	subs	r3, r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	440b      	add	r3, r1
 8001b18:	3338      	adds	r3, #56	@ 0x38
 8001b1a:	681b      	ldr	r3, [r3, #0]
}
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr

08001b28 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b082      	sub	sp, #8
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4618      	mov	r0, r3
 8001b36:	f003 f908 	bl	8004d4a <USB_GetCurrentFrame>
 8001b3a:	4603      	mov	r3, r0
}
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4618      	mov	r0, r3
 8001b52:	f003 f8e3 	bl	8004d1c <USB_GetHostSpeed>
 8001b56:	4603      	mov	r3, r0
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}

08001b60 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8001b6c:	78fa      	ldrb	r2, [r7, #3]
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	011b      	lsls	r3, r3, #4
 8001b74:	1a9b      	subs	r3, r3, r2
 8001b76:	009b      	lsls	r3, r3, #2
 8001b78:	440b      	add	r3, r1
 8001b7a:	331a      	adds	r3, #26
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8001b80:	78fa      	ldrb	r2, [r7, #3]
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	4613      	mov	r3, r2
 8001b86:	011b      	lsls	r3, r3, #4
 8001b88:	1a9b      	subs	r3, r3, r2
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	440b      	add	r3, r1
 8001b8e:	331b      	adds	r3, #27
 8001b90:	2200      	movs	r2, #0
 8001b92:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8001b94:	78fa      	ldrb	r2, [r7, #3]
 8001b96:	6879      	ldr	r1, [r7, #4]
 8001b98:	4613      	mov	r3, r2
 8001b9a:	011b      	lsls	r3, r3, #4
 8001b9c:	1a9b      	subs	r3, r3, r2
 8001b9e:	009b      	lsls	r3, r3, #2
 8001ba0:	440b      	add	r3, r1
 8001ba2:	3325      	adds	r3, #37	@ 0x25
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8001ba8:	78fa      	ldrb	r2, [r7, #3]
 8001baa:	6879      	ldr	r1, [r7, #4]
 8001bac:	4613      	mov	r3, r2
 8001bae:	011b      	lsls	r3, r3, #4
 8001bb0:	1a9b      	subs	r3, r3, r2
 8001bb2:	009b      	lsls	r3, r3, #2
 8001bb4:	440b      	add	r3, r1
 8001bb6:	3324      	adds	r3, #36	@ 0x24
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b086      	sub	sp, #24
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
 8001bd2:	460b      	mov	r3, r1
 8001bd4:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001bdc:	697b      	ldr	r3, [r7, #20]
 8001bde:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	78fa      	ldrb	r2, [r7, #3]
 8001be6:	4611      	mov	r1, r2
 8001be8:	4618      	mov	r0, r3
 8001bea:	f002 fee8 	bl	80049be <USB_ReadChInterrupts>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	2b04      	cmp	r3, #4
 8001bf6:	d11a      	bne.n	8001c2e <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8001bf8:	78fb      	ldrb	r3, [r7, #3]
 8001bfa:	015a      	lsls	r2, r3, #5
 8001bfc:	693b      	ldr	r3, [r7, #16]
 8001bfe:	4413      	add	r3, r2
 8001c00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c04:	461a      	mov	r2, r3
 8001c06:	2304      	movs	r3, #4
 8001c08:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001c0a:	78fa      	ldrb	r2, [r7, #3]
 8001c0c:	6879      	ldr	r1, [r7, #4]
 8001c0e:	4613      	mov	r3, r2
 8001c10:	011b      	lsls	r3, r3, #4
 8001c12:	1a9b      	subs	r3, r3, r2
 8001c14:	009b      	lsls	r3, r3, #2
 8001c16:	440b      	add	r3, r1
 8001c18:	334d      	adds	r3, #77	@ 0x4d
 8001c1a:	2207      	movs	r2, #7
 8001c1c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	78fa      	ldrb	r2, [r7, #3]
 8001c24:	4611      	mov	r1, r2
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fc0b 	bl	8005442 <USB_HC_Halt>
 8001c2c:	e09e      	b.n	8001d6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	78fa      	ldrb	r2, [r7, #3]
 8001c34:	4611      	mov	r1, r2
 8001c36:	4618      	mov	r0, r3
 8001c38:	f002 fec1 	bl	80049be <USB_ReadChInterrupts>
 8001c3c:	4603      	mov	r3, r0
 8001c3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001c46:	d11b      	bne.n	8001c80 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	015a      	lsls	r2, r3, #5
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	4413      	add	r3, r2
 8001c50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001c54:	461a      	mov	r2, r3
 8001c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c5a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8001c5c:	78fa      	ldrb	r2, [r7, #3]
 8001c5e:	6879      	ldr	r1, [r7, #4]
 8001c60:	4613      	mov	r3, r2
 8001c62:	011b      	lsls	r3, r3, #4
 8001c64:	1a9b      	subs	r3, r3, r2
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	440b      	add	r3, r1
 8001c6a:	334d      	adds	r3, #77	@ 0x4d
 8001c6c:	2208      	movs	r2, #8
 8001c6e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	78fa      	ldrb	r2, [r7, #3]
 8001c76:	4611      	mov	r1, r2
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f003 fbe2 	bl	8005442 <USB_HC_Halt>
 8001c7e:	e075      	b.n	8001d6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	78fa      	ldrb	r2, [r7, #3]
 8001c86:	4611      	mov	r1, r2
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f002 fe98 	bl	80049be <USB_ReadChInterrupts>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	f003 0308 	and.w	r3, r3, #8
 8001c94:	2b08      	cmp	r3, #8
 8001c96:	d11a      	bne.n	8001cce <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8001c98:	78fb      	ldrb	r3, [r7, #3]
 8001c9a:	015a      	lsls	r2, r3, #5
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2308      	movs	r3, #8
 8001ca8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	6879      	ldr	r1, [r7, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	011b      	lsls	r3, r3, #4
 8001cb2:	1a9b      	subs	r3, r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	440b      	add	r3, r1
 8001cb8:	334d      	adds	r3, #77	@ 0x4d
 8001cba:	2206      	movs	r2, #6
 8001cbc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	78fa      	ldrb	r2, [r7, #3]
 8001cc4:	4611      	mov	r1, r2
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f003 fbbb 	bl	8005442 <USB_HC_Halt>
 8001ccc:	e04e      	b.n	8001d6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	78fa      	ldrb	r2, [r7, #3]
 8001cd4:	4611      	mov	r1, r2
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f002 fe71 	bl	80049be <USB_ReadChInterrupts>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ce2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ce6:	d11b      	bne.n	8001d20 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	015a      	lsls	r2, r3, #5
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	4413      	add	r3, r2
 8001cf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001cf4:	461a      	mov	r2, r3
 8001cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cfa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8001cfc:	78fa      	ldrb	r2, [r7, #3]
 8001cfe:	6879      	ldr	r1, [r7, #4]
 8001d00:	4613      	mov	r3, r2
 8001d02:	011b      	lsls	r3, r3, #4
 8001d04:	1a9b      	subs	r3, r3, r2
 8001d06:	009b      	lsls	r3, r3, #2
 8001d08:	440b      	add	r3, r1
 8001d0a:	334d      	adds	r3, #77	@ 0x4d
 8001d0c:	2209      	movs	r2, #9
 8001d0e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	78fa      	ldrb	r2, [r7, #3]
 8001d16:	4611      	mov	r1, r2
 8001d18:	4618      	mov	r0, r3
 8001d1a:	f003 fb92 	bl	8005442 <USB_HC_Halt>
 8001d1e:	e025      	b.n	8001d6c <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	78fa      	ldrb	r2, [r7, #3]
 8001d26:	4611      	mov	r1, r2
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f002 fe48 	bl	80049be <USB_ReadChInterrupts>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d34:	2b80      	cmp	r3, #128	@ 0x80
 8001d36:	d119      	bne.n	8001d6c <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	015a      	lsls	r2, r3, #5
 8001d3c:	693b      	ldr	r3, [r7, #16]
 8001d3e:	4413      	add	r3, r2
 8001d40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001d44:	461a      	mov	r2, r3
 8001d46:	2380      	movs	r3, #128	@ 0x80
 8001d48:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8001d4a:	78fa      	ldrb	r2, [r7, #3]
 8001d4c:	6879      	ldr	r1, [r7, #4]
 8001d4e:	4613      	mov	r3, r2
 8001d50:	011b      	lsls	r3, r3, #4
 8001d52:	1a9b      	subs	r3, r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	440b      	add	r3, r1
 8001d58:	334d      	adds	r3, #77	@ 0x4d
 8001d5a:	2207      	movs	r2, #7
 8001d5c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	78fa      	ldrb	r2, [r7, #3]
 8001d64:	4611      	mov	r1, r2
 8001d66:	4618      	mov	r0, r3
 8001d68:	f003 fb6b 	bl	8005442 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	78fa      	ldrb	r2, [r7, #3]
 8001d72:	4611      	mov	r1, r2
 8001d74:	4618      	mov	r0, r3
 8001d76:	f002 fe22 	bl	80049be <USB_ReadChInterrupts>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001d80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001d84:	d112      	bne.n	8001dac <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	78fa      	ldrb	r2, [r7, #3]
 8001d8c:	4611      	mov	r1, r2
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f003 fb57 	bl	8005442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	015a      	lsls	r2, r3, #5
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4413      	add	r3, r2
 8001d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001da0:	461a      	mov	r2, r3
 8001da2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001da6:	6093      	str	r3, [r2, #8]
 8001da8:	f000 bd75 	b.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	78fa      	ldrb	r2, [r7, #3]
 8001db2:	4611      	mov	r1, r2
 8001db4:	4618      	mov	r0, r3
 8001db6:	f002 fe02 	bl	80049be <USB_ReadChInterrupts>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f003 0301 	and.w	r3, r3, #1
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	f040 8128 	bne.w	8002016 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8001dc6:	78fb      	ldrb	r3, [r7, #3]
 8001dc8:	015a      	lsls	r2, r3, #5
 8001dca:	693b      	ldr	r3, [r7, #16]
 8001dcc:	4413      	add	r3, r2
 8001dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	2320      	movs	r3, #32
 8001dd6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8001dd8:	78fa      	ldrb	r2, [r7, #3]
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	4613      	mov	r3, r2
 8001dde:	011b      	lsls	r3, r3, #4
 8001de0:	1a9b      	subs	r3, r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	331b      	adds	r3, #27
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d119      	bne.n	8001e22 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8001dee:	78fa      	ldrb	r2, [r7, #3]
 8001df0:	6879      	ldr	r1, [r7, #4]
 8001df2:	4613      	mov	r3, r2
 8001df4:	011b      	lsls	r3, r3, #4
 8001df6:	1a9b      	subs	r3, r3, r2
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	440b      	add	r3, r1
 8001dfc:	331b      	adds	r3, #27
 8001dfe:	2200      	movs	r2, #0
 8001e00:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	015a      	lsls	r2, r3, #5
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	4413      	add	r3, r2
 8001e0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	78fa      	ldrb	r2, [r7, #3]
 8001e12:	0151      	lsls	r1, r2, #5
 8001e14:	693a      	ldr	r2, [r7, #16]
 8001e16:	440a      	add	r2, r1
 8001e18:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001e1c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e20:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	799b      	ldrb	r3, [r3, #6]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d01b      	beq.n	8001e62 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8001e2a:	78fa      	ldrb	r2, [r7, #3]
 8001e2c:	6879      	ldr	r1, [r7, #4]
 8001e2e:	4613      	mov	r3, r2
 8001e30:	011b      	lsls	r3, r3, #4
 8001e32:	1a9b      	subs	r3, r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	440b      	add	r3, r1
 8001e38:	3330      	adds	r3, #48	@ 0x30
 8001e3a:	6819      	ldr	r1, [r3, #0]
 8001e3c:	78fb      	ldrb	r3, [r7, #3]
 8001e3e:	015a      	lsls	r2, r3, #5
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	4413      	add	r3, r2
 8001e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001e4e:	78fa      	ldrb	r2, [r7, #3]
 8001e50:	1ac9      	subs	r1, r1, r3
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	011b      	lsls	r3, r3, #4
 8001e58:	1a9b      	subs	r3, r3, r2
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4403      	add	r3, r0
 8001e5e:	3338      	adds	r3, #56	@ 0x38
 8001e60:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8001e62:	78fa      	ldrb	r2, [r7, #3]
 8001e64:	6879      	ldr	r1, [r7, #4]
 8001e66:	4613      	mov	r3, r2
 8001e68:	011b      	lsls	r3, r3, #4
 8001e6a:	1a9b      	subs	r3, r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	440b      	add	r3, r1
 8001e70:	334d      	adds	r3, #77	@ 0x4d
 8001e72:	2201      	movs	r2, #1
 8001e74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8001e76:	78fa      	ldrb	r2, [r7, #3]
 8001e78:	6879      	ldr	r1, [r7, #4]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	011b      	lsls	r3, r3, #4
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	009b      	lsls	r3, r3, #2
 8001e82:	440b      	add	r3, r1
 8001e84:	3344      	adds	r3, #68	@ 0x44
 8001e86:	2200      	movs	r2, #0
 8001e88:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8001e8a:	78fb      	ldrb	r3, [r7, #3]
 8001e8c:	015a      	lsls	r2, r3, #5
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	4413      	add	r3, r2
 8001e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001e96:	461a      	mov	r2, r3
 8001e98:	2301      	movs	r3, #1
 8001e9a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001e9c:	78fa      	ldrb	r2, [r7, #3]
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	4613      	mov	r3, r2
 8001ea2:	011b      	lsls	r3, r3, #4
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	009b      	lsls	r3, r3, #2
 8001ea8:	440b      	add	r3, r1
 8001eaa:	3326      	adds	r3, #38	@ 0x26
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d00a      	beq.n	8001ec8 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8001eb2:	78fa      	ldrb	r2, [r7, #3]
 8001eb4:	6879      	ldr	r1, [r7, #4]
 8001eb6:	4613      	mov	r3, r2
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	1a9b      	subs	r3, r3, r2
 8001ebc:	009b      	lsls	r3, r3, #2
 8001ebe:	440b      	add	r3, r1
 8001ec0:	3326      	adds	r3, #38	@ 0x26
 8001ec2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8001ec4:	2b02      	cmp	r3, #2
 8001ec6:	d110      	bne.n	8001eea <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	78fa      	ldrb	r2, [r7, #3]
 8001ece:	4611      	mov	r1, r2
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f003 fab6 	bl	8005442 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	015a      	lsls	r2, r3, #5
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	4413      	add	r3, r2
 8001ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001ee2:	461a      	mov	r2, r3
 8001ee4:	2310      	movs	r3, #16
 8001ee6:	6093      	str	r3, [r2, #8]
 8001ee8:	e03d      	b.n	8001f66 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001eea:	78fa      	ldrb	r2, [r7, #3]
 8001eec:	6879      	ldr	r1, [r7, #4]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	011b      	lsls	r3, r3, #4
 8001ef2:	1a9b      	subs	r3, r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	440b      	add	r3, r1
 8001ef8:	3326      	adds	r3, #38	@ 0x26
 8001efa:	781b      	ldrb	r3, [r3, #0]
 8001efc:	2b03      	cmp	r3, #3
 8001efe:	d00a      	beq.n	8001f16 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8001f00:	78fa      	ldrb	r2, [r7, #3]
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	4613      	mov	r3, r2
 8001f06:	011b      	lsls	r3, r3, #4
 8001f08:	1a9b      	subs	r3, r3, r2
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	440b      	add	r3, r1
 8001f0e:	3326      	adds	r3, #38	@ 0x26
 8001f10:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d127      	bne.n	8001f66 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8001f16:	78fb      	ldrb	r3, [r7, #3]
 8001f18:	015a      	lsls	r2, r3, #5
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	78fa      	ldrb	r2, [r7, #3]
 8001f26:	0151      	lsls	r1, r2, #5
 8001f28:	693a      	ldr	r2, [r7, #16]
 8001f2a:	440a      	add	r2, r1
 8001f2c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8001f30:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001f34:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8001f36:	78fa      	ldrb	r2, [r7, #3]
 8001f38:	6879      	ldr	r1, [r7, #4]
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	011b      	lsls	r3, r3, #4
 8001f3e:	1a9b      	subs	r3, r3, r2
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	440b      	add	r3, r1
 8001f44:	334c      	adds	r3, #76	@ 0x4c
 8001f46:	2201      	movs	r2, #1
 8001f48:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8001f4a:	78fa      	ldrb	r2, [r7, #3]
 8001f4c:	6879      	ldr	r1, [r7, #4]
 8001f4e:	4613      	mov	r3, r2
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	1a9b      	subs	r3, r3, r2
 8001f54:	009b      	lsls	r3, r3, #2
 8001f56:	440b      	add	r3, r1
 8001f58:	334c      	adds	r3, #76	@ 0x4c
 8001f5a:	781a      	ldrb	r2, [r3, #0]
 8001f5c:	78fb      	ldrb	r3, [r7, #3]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	6878      	ldr	r0, [r7, #4]
 8001f62:	f00b fb5f 	bl	800d624 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	799b      	ldrb	r3, [r3, #6]
 8001f6a:	2b01      	cmp	r3, #1
 8001f6c:	d13b      	bne.n	8001fe6 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	6879      	ldr	r1, [r7, #4]
 8001f72:	4613      	mov	r3, r2
 8001f74:	011b      	lsls	r3, r3, #4
 8001f76:	1a9b      	subs	r3, r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	3338      	adds	r3, #56	@ 0x38
 8001f7e:	6819      	ldr	r1, [r3, #0]
 8001f80:	78fa      	ldrb	r2, [r7, #3]
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	1a9b      	subs	r3, r3, r2
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	4403      	add	r3, r0
 8001f8e:	3328      	adds	r3, #40	@ 0x28
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	440b      	add	r3, r1
 8001f94:	1e59      	subs	r1, r3, #1
 8001f96:	78fa      	ldrb	r2, [r7, #3]
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4613      	mov	r3, r2
 8001f9c:	011b      	lsls	r3, r3, #4
 8001f9e:	1a9b      	subs	r3, r3, r2
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	4403      	add	r3, r0
 8001fa4:	3328      	adds	r3, #40	@ 0x28
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fac:	f003 0301 	and.w	r3, r3, #1
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f000 8470 	beq.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8001fb6:	78fa      	ldrb	r2, [r7, #3]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	011b      	lsls	r3, r3, #4
 8001fbe:	1a9b      	subs	r3, r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	333c      	adds	r3, #60	@ 0x3c
 8001fc6:	781b      	ldrb	r3, [r3, #0]
 8001fc8:	78fa      	ldrb	r2, [r7, #3]
 8001fca:	f083 0301 	eor.w	r3, r3, #1
 8001fce:	b2d8      	uxtb	r0, r3
 8001fd0:	6879      	ldr	r1, [r7, #4]
 8001fd2:	4613      	mov	r3, r2
 8001fd4:	011b      	lsls	r3, r3, #4
 8001fd6:	1a9b      	subs	r3, r3, r2
 8001fd8:	009b      	lsls	r3, r3, #2
 8001fda:	440b      	add	r3, r1
 8001fdc:	333c      	adds	r3, #60	@ 0x3c
 8001fde:	4602      	mov	r2, r0
 8001fe0:	701a      	strb	r2, [r3, #0]
 8001fe2:	f000 bc58 	b.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8001fe6:	78fa      	ldrb	r2, [r7, #3]
 8001fe8:	6879      	ldr	r1, [r7, #4]
 8001fea:	4613      	mov	r3, r2
 8001fec:	011b      	lsls	r3, r3, #4
 8001fee:	1a9b      	subs	r3, r3, r2
 8001ff0:	009b      	lsls	r3, r3, #2
 8001ff2:	440b      	add	r3, r1
 8001ff4:	333c      	adds	r3, #60	@ 0x3c
 8001ff6:	781b      	ldrb	r3, [r3, #0]
 8001ff8:	78fa      	ldrb	r2, [r7, #3]
 8001ffa:	f083 0301 	eor.w	r3, r3, #1
 8001ffe:	b2d8      	uxtb	r0, r3
 8002000:	6879      	ldr	r1, [r7, #4]
 8002002:	4613      	mov	r3, r2
 8002004:	011b      	lsls	r3, r3, #4
 8002006:	1a9b      	subs	r3, r3, r2
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	440b      	add	r3, r1
 800200c:	333c      	adds	r3, #60	@ 0x3c
 800200e:	4602      	mov	r2, r0
 8002010:	701a      	strb	r2, [r3, #0]
 8002012:	f000 bc40 	b.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f002 fccd 	bl	80049be <USB_ReadChInterrupts>
 8002024:	4603      	mov	r3, r0
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b20      	cmp	r3, #32
 800202c:	d131      	bne.n	8002092 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800202e:	78fb      	ldrb	r3, [r7, #3]
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	4413      	add	r3, r2
 8002036:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800203a:	461a      	mov	r2, r3
 800203c:	2320      	movs	r3, #32
 800203e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002040:	78fa      	ldrb	r2, [r7, #3]
 8002042:	6879      	ldr	r1, [r7, #4]
 8002044:	4613      	mov	r3, r2
 8002046:	011b      	lsls	r3, r3, #4
 8002048:	1a9b      	subs	r3, r3, r2
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	440b      	add	r3, r1
 800204e:	331a      	adds	r3, #26
 8002050:	781b      	ldrb	r3, [r3, #0]
 8002052:	2b01      	cmp	r3, #1
 8002054:	f040 841f 	bne.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002058:	78fa      	ldrb	r2, [r7, #3]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	1a9b      	subs	r3, r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	331b      	adds	r3, #27
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800206c:	78fa      	ldrb	r2, [r7, #3]
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	011b      	lsls	r3, r3, #4
 8002074:	1a9b      	subs	r3, r3, r2
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	440b      	add	r3, r1
 800207a:	334d      	adds	r3, #77	@ 0x4d
 800207c:	2203      	movs	r2, #3
 800207e:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	78fa      	ldrb	r2, [r7, #3]
 8002086:	4611      	mov	r1, r2
 8002088:	4618      	mov	r0, r3
 800208a:	f003 f9da 	bl	8005442 <USB_HC_Halt>
 800208e:	f000 bc02 	b.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	78fa      	ldrb	r2, [r7, #3]
 8002098:	4611      	mov	r1, r2
 800209a:	4618      	mov	r0, r3
 800209c:	f002 fc8f 	bl	80049be <USB_ReadChInterrupts>
 80020a0:	4603      	mov	r3, r0
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	f040 8305 	bne.w	80026b6 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80020ac:	78fb      	ldrb	r3, [r7, #3]
 80020ae:	015a      	lsls	r2, r3, #5
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	4413      	add	r3, r2
 80020b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80020b8:	461a      	mov	r2, r3
 80020ba:	2302      	movs	r3, #2
 80020bc:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80020be:	78fa      	ldrb	r2, [r7, #3]
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	011b      	lsls	r3, r3, #4
 80020c6:	1a9b      	subs	r3, r3, r2
 80020c8:	009b      	lsls	r3, r3, #2
 80020ca:	440b      	add	r3, r1
 80020cc:	334d      	adds	r3, #77	@ 0x4d
 80020ce:	781b      	ldrb	r3, [r3, #0]
 80020d0:	2b01      	cmp	r3, #1
 80020d2:	d114      	bne.n	80020fe <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80020d4:	78fa      	ldrb	r2, [r7, #3]
 80020d6:	6879      	ldr	r1, [r7, #4]
 80020d8:	4613      	mov	r3, r2
 80020da:	011b      	lsls	r3, r3, #4
 80020dc:	1a9b      	subs	r3, r3, r2
 80020de:	009b      	lsls	r3, r3, #2
 80020e0:	440b      	add	r3, r1
 80020e2:	334d      	adds	r3, #77	@ 0x4d
 80020e4:	2202      	movs	r2, #2
 80020e6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	334c      	adds	r3, #76	@ 0x4c
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
 80020fc:	e2cc      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80020fe:	78fa      	ldrb	r2, [r7, #3]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	011b      	lsls	r3, r3, #4
 8002106:	1a9b      	subs	r3, r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	334d      	adds	r3, #77	@ 0x4d
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b06      	cmp	r3, #6
 8002112:	d114      	bne.n	800213e <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002114:	78fa      	ldrb	r2, [r7, #3]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	011b      	lsls	r3, r3, #4
 800211c:	1a9b      	subs	r3, r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	334d      	adds	r3, #77	@ 0x4d
 8002124:	2202      	movs	r2, #2
 8002126:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002128:	78fa      	ldrb	r2, [r7, #3]
 800212a:	6879      	ldr	r1, [r7, #4]
 800212c:	4613      	mov	r3, r2
 800212e:	011b      	lsls	r3, r3, #4
 8002130:	1a9b      	subs	r3, r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	440b      	add	r3, r1
 8002136:	334c      	adds	r3, #76	@ 0x4c
 8002138:	2205      	movs	r2, #5
 800213a:	701a      	strb	r2, [r3, #0]
 800213c:	e2ac      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800213e:	78fa      	ldrb	r2, [r7, #3]
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	011b      	lsls	r3, r3, #4
 8002146:	1a9b      	subs	r3, r3, r2
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	440b      	add	r3, r1
 800214c:	334d      	adds	r3, #77	@ 0x4d
 800214e:	781b      	ldrb	r3, [r3, #0]
 8002150:	2b07      	cmp	r3, #7
 8002152:	d00b      	beq.n	800216c <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002154:	78fa      	ldrb	r2, [r7, #3]
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	4613      	mov	r3, r2
 800215a:	011b      	lsls	r3, r3, #4
 800215c:	1a9b      	subs	r3, r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	440b      	add	r3, r1
 8002162:	334d      	adds	r3, #77	@ 0x4d
 8002164:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002166:	2b09      	cmp	r3, #9
 8002168:	f040 80a6 	bne.w	80022b8 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	334d      	adds	r3, #77	@ 0x4d
 800217c:	2202      	movs	r2, #2
 800217e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002180:	78fa      	ldrb	r2, [r7, #3]
 8002182:	6879      	ldr	r1, [r7, #4]
 8002184:	4613      	mov	r3, r2
 8002186:	011b      	lsls	r3, r3, #4
 8002188:	1a9b      	subs	r3, r3, r2
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	440b      	add	r3, r1
 800218e:	3344      	adds	r3, #68	@ 0x44
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	1c59      	adds	r1, r3, #1
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	4613      	mov	r3, r2
 8002198:	011b      	lsls	r3, r3, #4
 800219a:	1a9b      	subs	r3, r3, r2
 800219c:	009b      	lsls	r3, r3, #2
 800219e:	4403      	add	r3, r0
 80021a0:	3344      	adds	r3, #68	@ 0x44
 80021a2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80021a4:	78fa      	ldrb	r2, [r7, #3]
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	1a9b      	subs	r3, r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3344      	adds	r3, #68	@ 0x44
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2b02      	cmp	r3, #2
 80021b8:	d943      	bls.n	8002242 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80021ba:	78fa      	ldrb	r2, [r7, #3]
 80021bc:	6879      	ldr	r1, [r7, #4]
 80021be:	4613      	mov	r3, r2
 80021c0:	011b      	lsls	r3, r3, #4
 80021c2:	1a9b      	subs	r3, r3, r2
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	440b      	add	r3, r1
 80021c8:	3344      	adds	r3, #68	@ 0x44
 80021ca:	2200      	movs	r2, #0
 80021cc:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 80021ce:	78fa      	ldrb	r2, [r7, #3]
 80021d0:	6879      	ldr	r1, [r7, #4]
 80021d2:	4613      	mov	r3, r2
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	1a9b      	subs	r3, r3, r2
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	440b      	add	r3, r1
 80021dc:	331a      	adds	r3, #26
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	2b01      	cmp	r3, #1
 80021e2:	d123      	bne.n	800222c <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 80021e4:	78fa      	ldrb	r2, [r7, #3]
 80021e6:	6879      	ldr	r1, [r7, #4]
 80021e8:	4613      	mov	r3, r2
 80021ea:	011b      	lsls	r3, r3, #4
 80021ec:	1a9b      	subs	r3, r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	440b      	add	r3, r1
 80021f2:	331b      	adds	r3, #27
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 80021f8:	78fa      	ldrb	r2, [r7, #3]
 80021fa:	6879      	ldr	r1, [r7, #4]
 80021fc:	4613      	mov	r3, r2
 80021fe:	011b      	lsls	r3, r3, #4
 8002200:	1a9b      	subs	r3, r3, r2
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	440b      	add	r3, r1
 8002206:	331c      	adds	r3, #28
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	78fa      	ldrb	r2, [r7, #3]
 800221c:	0151      	lsls	r1, r2, #5
 800221e:	693a      	ldr	r2, [r7, #16]
 8002220:	440a      	add	r2, r1
 8002222:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002226:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800222a:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 800222c:	78fa      	ldrb	r2, [r7, #3]
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	334c      	adds	r3, #76	@ 0x4c
 800223c:	2204      	movs	r2, #4
 800223e:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002240:	e229      	b.n	8002696 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002242:	78fa      	ldrb	r2, [r7, #3]
 8002244:	6879      	ldr	r1, [r7, #4]
 8002246:	4613      	mov	r3, r2
 8002248:	011b      	lsls	r3, r3, #4
 800224a:	1a9b      	subs	r3, r3, r2
 800224c:	009b      	lsls	r3, r3, #2
 800224e:	440b      	add	r3, r1
 8002250:	334c      	adds	r3, #76	@ 0x4c
 8002252:	2202      	movs	r2, #2
 8002254:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002256:	78fa      	ldrb	r2, [r7, #3]
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	011b      	lsls	r3, r3, #4
 800225e:	1a9b      	subs	r3, r3, r2
 8002260:	009b      	lsls	r3, r3, #2
 8002262:	440b      	add	r3, r1
 8002264:	3326      	adds	r3, #38	@ 0x26
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d00b      	beq.n	8002284 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800226c:	78fa      	ldrb	r2, [r7, #3]
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	4613      	mov	r3, r2
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	1a9b      	subs	r3, r3, r2
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	440b      	add	r3, r1
 800227a:	3326      	adds	r3, #38	@ 0x26
 800227c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800227e:	2b02      	cmp	r3, #2
 8002280:	f040 8209 	bne.w	8002696 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	4413      	add	r3, r2
 800228c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800229a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80022a2:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80022a4:	78fb      	ldrb	r3, [r7, #3]
 80022a6:	015a      	lsls	r2, r3, #5
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4413      	add	r3, r2
 80022ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80022b0:	461a      	mov	r2, r3
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80022b6:	e1ee      	b.n	8002696 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80022b8:	78fa      	ldrb	r2, [r7, #3]
 80022ba:	6879      	ldr	r1, [r7, #4]
 80022bc:	4613      	mov	r3, r2
 80022be:	011b      	lsls	r3, r3, #4
 80022c0:	1a9b      	subs	r3, r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	440b      	add	r3, r1
 80022c6:	334d      	adds	r3, #77	@ 0x4d
 80022c8:	781b      	ldrb	r3, [r3, #0]
 80022ca:	2b05      	cmp	r3, #5
 80022cc:	f040 80c8 	bne.w	8002460 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80022d0:	78fa      	ldrb	r2, [r7, #3]
 80022d2:	6879      	ldr	r1, [r7, #4]
 80022d4:	4613      	mov	r3, r2
 80022d6:	011b      	lsls	r3, r3, #4
 80022d8:	1a9b      	subs	r3, r3, r2
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	440b      	add	r3, r1
 80022de:	334d      	adds	r3, #77	@ 0x4d
 80022e0:	2202      	movs	r2, #2
 80022e2:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80022e4:	78fa      	ldrb	r2, [r7, #3]
 80022e6:	6879      	ldr	r1, [r7, #4]
 80022e8:	4613      	mov	r3, r2
 80022ea:	011b      	lsls	r3, r3, #4
 80022ec:	1a9b      	subs	r3, r3, r2
 80022ee:	009b      	lsls	r3, r3, #2
 80022f0:	440b      	add	r3, r1
 80022f2:	331b      	adds	r3, #27
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	f040 81ce 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80022fc:	78fa      	ldrb	r2, [r7, #3]
 80022fe:	6879      	ldr	r1, [r7, #4]
 8002300:	4613      	mov	r3, r2
 8002302:	011b      	lsls	r3, r3, #4
 8002304:	1a9b      	subs	r3, r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	440b      	add	r3, r1
 800230a:	3326      	adds	r3, #38	@ 0x26
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b03      	cmp	r3, #3
 8002310:	d16b      	bne.n	80023ea <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002312:	78fa      	ldrb	r2, [r7, #3]
 8002314:	6879      	ldr	r1, [r7, #4]
 8002316:	4613      	mov	r3, r2
 8002318:	011b      	lsls	r3, r3, #4
 800231a:	1a9b      	subs	r3, r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	440b      	add	r3, r1
 8002320:	3348      	adds	r3, #72	@ 0x48
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	1c59      	adds	r1, r3, #1
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	4613      	mov	r3, r2
 800232a:	011b      	lsls	r3, r3, #4
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	009b      	lsls	r3, r3, #2
 8002330:	4403      	add	r3, r0
 8002332:	3348      	adds	r3, #72	@ 0x48
 8002334:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	6879      	ldr	r1, [r7, #4]
 800233a:	4613      	mov	r3, r2
 800233c:	011b      	lsls	r3, r3, #4
 800233e:	1a9b      	subs	r3, r3, r2
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	440b      	add	r3, r1
 8002344:	3348      	adds	r3, #72	@ 0x48
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	2b02      	cmp	r3, #2
 800234a:	d943      	bls.n	80023d4 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	6879      	ldr	r1, [r7, #4]
 8002350:	4613      	mov	r3, r2
 8002352:	011b      	lsls	r3, r3, #4
 8002354:	1a9b      	subs	r3, r3, r2
 8002356:	009b      	lsls	r3, r3, #2
 8002358:	440b      	add	r3, r1
 800235a:	3348      	adds	r3, #72	@ 0x48
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	331b      	adds	r3, #27
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3344      	adds	r3, #68	@ 0x44
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	2b02      	cmp	r3, #2
 8002388:	d809      	bhi.n	800239e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800238a:	78fa      	ldrb	r2, [r7, #3]
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	1a9b      	subs	r3, r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	331c      	adds	r3, #28
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800239e:	78fb      	ldrb	r3, [r7, #3]
 80023a0:	015a      	lsls	r2, r3, #5
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4413      	add	r3, r2
 80023a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	78fa      	ldrb	r2, [r7, #3]
 80023ae:	0151      	lsls	r1, r2, #5
 80023b0:	693a      	ldr	r2, [r7, #16]
 80023b2:	440a      	add	r2, r1
 80023b4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80023b8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80023bc:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	334c      	adds	r3, #76	@ 0x4c
 80023ce:	2204      	movs	r2, #4
 80023d0:	701a      	strb	r2, [r3, #0]
 80023d2:	e014      	b.n	80023fe <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	334c      	adds	r3, #76	@ 0x4c
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
 80023e8:	e009      	b.n	80023fe <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80023ea:	78fa      	ldrb	r2, [r7, #3]
 80023ec:	6879      	ldr	r1, [r7, #4]
 80023ee:	4613      	mov	r3, r2
 80023f0:	011b      	lsls	r3, r3, #4
 80023f2:	1a9b      	subs	r3, r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	440b      	add	r3, r1
 80023f8:	334c      	adds	r3, #76	@ 0x4c
 80023fa:	2202      	movs	r2, #2
 80023fc:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80023fe:	78fa      	ldrb	r2, [r7, #3]
 8002400:	6879      	ldr	r1, [r7, #4]
 8002402:	4613      	mov	r3, r2
 8002404:	011b      	lsls	r3, r3, #4
 8002406:	1a9b      	subs	r3, r3, r2
 8002408:	009b      	lsls	r3, r3, #2
 800240a:	440b      	add	r3, r1
 800240c:	3326      	adds	r3, #38	@ 0x26
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00b      	beq.n	800242c <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002414:	78fa      	ldrb	r2, [r7, #3]
 8002416:	6879      	ldr	r1, [r7, #4]
 8002418:	4613      	mov	r3, r2
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	1a9b      	subs	r3, r3, r2
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	440b      	add	r3, r1
 8002422:	3326      	adds	r3, #38	@ 0x26
 8002424:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002426:	2b02      	cmp	r3, #2
 8002428:	f040 8136 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	015a      	lsls	r2, r3, #5
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	4413      	add	r3, r2
 8002434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002442:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800244a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	015a      	lsls	r2, r3, #5
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	4413      	add	r3, r2
 8002454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002458:	461a      	mov	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	e11b      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002460:	78fa      	ldrb	r2, [r7, #3]
 8002462:	6879      	ldr	r1, [r7, #4]
 8002464:	4613      	mov	r3, r2
 8002466:	011b      	lsls	r3, r3, #4
 8002468:	1a9b      	subs	r3, r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	440b      	add	r3, r1
 800246e:	334d      	adds	r3, #77	@ 0x4d
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	2b03      	cmp	r3, #3
 8002474:	f040 8081 	bne.w	800257a <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002478:	78fa      	ldrb	r2, [r7, #3]
 800247a:	6879      	ldr	r1, [r7, #4]
 800247c:	4613      	mov	r3, r2
 800247e:	011b      	lsls	r3, r3, #4
 8002480:	1a9b      	subs	r3, r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	440b      	add	r3, r1
 8002486:	334d      	adds	r3, #77	@ 0x4d
 8002488:	2202      	movs	r2, #2
 800248a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800248c:	78fa      	ldrb	r2, [r7, #3]
 800248e:	6879      	ldr	r1, [r7, #4]
 8002490:	4613      	mov	r3, r2
 8002492:	011b      	lsls	r3, r3, #4
 8002494:	1a9b      	subs	r3, r3, r2
 8002496:	009b      	lsls	r3, r3, #2
 8002498:	440b      	add	r3, r1
 800249a:	331b      	adds	r3, #27
 800249c:	781b      	ldrb	r3, [r3, #0]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	f040 80fa 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	4613      	mov	r3, r2
 80024aa:	011b      	lsls	r3, r3, #4
 80024ac:	1a9b      	subs	r3, r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	440b      	add	r3, r1
 80024b2:	334c      	adds	r3, #76	@ 0x4c
 80024b4:	2202      	movs	r2, #2
 80024b6:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	78fa      	ldrb	r2, [r7, #3]
 80024c8:	0151      	lsls	r1, r2, #5
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	440a      	add	r2, r1
 80024ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d6:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80024d8:	78fb      	ldrb	r3, [r7, #3]
 80024da:	015a      	lsls	r2, r3, #5
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	4413      	add	r3, r2
 80024e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	78fa      	ldrb	r2, [r7, #3]
 80024e8:	0151      	lsls	r1, r2, #5
 80024ea:	693a      	ldr	r2, [r7, #16]
 80024ec:	440a      	add	r2, r1
 80024ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80024f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80024f6:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80024f8:	78fb      	ldrb	r3, [r7, #3]
 80024fa:	015a      	lsls	r2, r3, #5
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4413      	add	r3, r2
 8002500:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002504:	68db      	ldr	r3, [r3, #12]
 8002506:	78fa      	ldrb	r2, [r7, #3]
 8002508:	0151      	lsls	r1, r2, #5
 800250a:	693a      	ldr	r2, [r7, #16]
 800250c:	440a      	add	r2, r1
 800250e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002512:	f023 0320 	bic.w	r3, r3, #32
 8002516:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	4613      	mov	r3, r2
 800251e:	011b      	lsls	r3, r3, #4
 8002520:	1a9b      	subs	r3, r3, r2
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	440b      	add	r3, r1
 8002526:	3326      	adds	r3, #38	@ 0x26
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d00b      	beq.n	8002546 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800252e:	78fa      	ldrb	r2, [r7, #3]
 8002530:	6879      	ldr	r1, [r7, #4]
 8002532:	4613      	mov	r3, r2
 8002534:	011b      	lsls	r3, r3, #4
 8002536:	1a9b      	subs	r3, r3, r2
 8002538:	009b      	lsls	r3, r3, #2
 800253a:	440b      	add	r3, r1
 800253c:	3326      	adds	r3, #38	@ 0x26
 800253e:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002540:	2b02      	cmp	r3, #2
 8002542:	f040 80a9 	bne.w	8002698 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002546:	78fb      	ldrb	r3, [r7, #3]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800255c:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002564:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002566:	78fb      	ldrb	r3, [r7, #3]
 8002568:	015a      	lsls	r2, r3, #5
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	4413      	add	r3, r2
 800256e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6013      	str	r3, [r2, #0]
 8002578:	e08e      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800257a:	78fa      	ldrb	r2, [r7, #3]
 800257c:	6879      	ldr	r1, [r7, #4]
 800257e:	4613      	mov	r3, r2
 8002580:	011b      	lsls	r3, r3, #4
 8002582:	1a9b      	subs	r3, r3, r2
 8002584:	009b      	lsls	r3, r3, #2
 8002586:	440b      	add	r3, r1
 8002588:	334d      	adds	r3, #77	@ 0x4d
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	2b04      	cmp	r3, #4
 800258e:	d143      	bne.n	8002618 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002590:	78fa      	ldrb	r2, [r7, #3]
 8002592:	6879      	ldr	r1, [r7, #4]
 8002594:	4613      	mov	r3, r2
 8002596:	011b      	lsls	r3, r3, #4
 8002598:	1a9b      	subs	r3, r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	440b      	add	r3, r1
 800259e:	334d      	adds	r3, #77	@ 0x4d
 80025a0:	2202      	movs	r2, #2
 80025a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80025a4:	78fa      	ldrb	r2, [r7, #3]
 80025a6:	6879      	ldr	r1, [r7, #4]
 80025a8:	4613      	mov	r3, r2
 80025aa:	011b      	lsls	r3, r3, #4
 80025ac:	1a9b      	subs	r3, r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	440b      	add	r3, r1
 80025b2:	334c      	adds	r3, #76	@ 0x4c
 80025b4:	2202      	movs	r2, #2
 80025b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	6879      	ldr	r1, [r7, #4]
 80025bc:	4613      	mov	r3, r2
 80025be:	011b      	lsls	r3, r3, #4
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	440b      	add	r3, r1
 80025c6:	3326      	adds	r3, #38	@ 0x26
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d00a      	beq.n	80025e4 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80025ce:	78fa      	ldrb	r2, [r7, #3]
 80025d0:	6879      	ldr	r1, [r7, #4]
 80025d2:	4613      	mov	r3, r2
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	1a9b      	subs	r3, r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	440b      	add	r3, r1
 80025dc:	3326      	adds	r3, #38	@ 0x26
 80025de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80025e0:	2b02      	cmp	r3, #2
 80025e2:	d159      	bne.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80025e4:	78fb      	ldrb	r3, [r7, #3]
 80025e6:	015a      	lsls	r2, r3, #5
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4413      	add	r3, r2
 80025ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80025fa:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002602:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002604:	78fb      	ldrb	r3, [r7, #3]
 8002606:	015a      	lsls	r2, r3, #5
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	4413      	add	r3, r2
 800260c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002610:	461a      	mov	r2, r3
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6013      	str	r3, [r2, #0]
 8002616:	e03f      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8002618:	78fa      	ldrb	r2, [r7, #3]
 800261a:	6879      	ldr	r1, [r7, #4]
 800261c:	4613      	mov	r3, r2
 800261e:	011b      	lsls	r3, r3, #4
 8002620:	1a9b      	subs	r3, r3, r2
 8002622:	009b      	lsls	r3, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	334d      	adds	r3, #77	@ 0x4d
 8002628:	781b      	ldrb	r3, [r3, #0]
 800262a:	2b08      	cmp	r3, #8
 800262c:	d126      	bne.n	800267c <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800262e:	78fa      	ldrb	r2, [r7, #3]
 8002630:	6879      	ldr	r1, [r7, #4]
 8002632:	4613      	mov	r3, r2
 8002634:	011b      	lsls	r3, r3, #4
 8002636:	1a9b      	subs	r3, r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	334d      	adds	r3, #77	@ 0x4d
 800263e:	2202      	movs	r2, #2
 8002640:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002642:	78fa      	ldrb	r2, [r7, #3]
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	4613      	mov	r3, r2
 8002648:	011b      	lsls	r3, r3, #4
 800264a:	1a9b      	subs	r3, r3, r2
 800264c:	009b      	lsls	r3, r3, #2
 800264e:	440b      	add	r3, r1
 8002650:	3344      	adds	r3, #68	@ 0x44
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	1c59      	adds	r1, r3, #1
 8002656:	6878      	ldr	r0, [r7, #4]
 8002658:	4613      	mov	r3, r2
 800265a:	011b      	lsls	r3, r3, #4
 800265c:	1a9b      	subs	r3, r3, r2
 800265e:	009b      	lsls	r3, r3, #2
 8002660:	4403      	add	r3, r0
 8002662:	3344      	adds	r3, #68	@ 0x44
 8002664:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8002666:	78fa      	ldrb	r2, [r7, #3]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	011b      	lsls	r3, r3, #4
 800266e:	1a9b      	subs	r3, r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	334c      	adds	r3, #76	@ 0x4c
 8002676:	2204      	movs	r2, #4
 8002678:	701a      	strb	r2, [r3, #0]
 800267a:	e00d      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	334d      	adds	r3, #77	@ 0x4d
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	f000 8100 	beq.w	8002894 <HCD_HC_IN_IRQHandler+0xcca>
 8002694:	e000      	b.n	8002698 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002696:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002698:	78fa      	ldrb	r2, [r7, #3]
 800269a:	6879      	ldr	r1, [r7, #4]
 800269c:	4613      	mov	r3, r2
 800269e:	011b      	lsls	r3, r3, #4
 80026a0:	1a9b      	subs	r3, r3, r2
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	440b      	add	r3, r1
 80026a6:	334c      	adds	r3, #76	@ 0x4c
 80026a8:	781a      	ldrb	r2, [r3, #0]
 80026aa:	78fb      	ldrb	r3, [r7, #3]
 80026ac:	4619      	mov	r1, r3
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f00a ffb8 	bl	800d624 <HAL_HCD_HC_NotifyURBChange_Callback>
 80026b4:	e0ef      	b.n	8002896 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	4611      	mov	r1, r2
 80026be:	4618      	mov	r0, r3
 80026c0:	f002 f97d 	bl	80049be <USB_ReadChInterrupts>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026ca:	2b40      	cmp	r3, #64	@ 0x40
 80026cc:	d12f      	bne.n	800272e <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80026ce:	78fb      	ldrb	r3, [r7, #3]
 80026d0:	015a      	lsls	r2, r3, #5
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	4413      	add	r3, r2
 80026d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026da:	461a      	mov	r2, r3
 80026dc:	2340      	movs	r3, #64	@ 0x40
 80026de:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80026e0:	78fa      	ldrb	r2, [r7, #3]
 80026e2:	6879      	ldr	r1, [r7, #4]
 80026e4:	4613      	mov	r3, r2
 80026e6:	011b      	lsls	r3, r3, #4
 80026e8:	1a9b      	subs	r3, r3, r2
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	334d      	adds	r3, #77	@ 0x4d
 80026f0:	2205      	movs	r2, #5
 80026f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80026f4:	78fa      	ldrb	r2, [r7, #3]
 80026f6:	6879      	ldr	r1, [r7, #4]
 80026f8:	4613      	mov	r3, r2
 80026fa:	011b      	lsls	r3, r3, #4
 80026fc:	1a9b      	subs	r3, r3, r2
 80026fe:	009b      	lsls	r3, r3, #2
 8002700:	440b      	add	r3, r1
 8002702:	331a      	adds	r3, #26
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d109      	bne.n	800271e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800270a:	78fa      	ldrb	r2, [r7, #3]
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	011b      	lsls	r3, r3, #4
 8002712:	1a9b      	subs	r3, r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3344      	adds	r3, #68	@ 0x44
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	78fa      	ldrb	r2, [r7, #3]
 8002724:	4611      	mov	r1, r2
 8002726:	4618      	mov	r0, r3
 8002728:	f002 fe8b 	bl	8005442 <USB_HC_Halt>
 800272c:	e0b3      	b.n	8002896 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f002 f941 	bl	80049be <USB_ReadChInterrupts>
 800273c:	4603      	mov	r3, r0
 800273e:	f003 0310 	and.w	r3, r3, #16
 8002742:	2b10      	cmp	r3, #16
 8002744:	f040 80a7 	bne.w	8002896 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	6879      	ldr	r1, [r7, #4]
 800274c:	4613      	mov	r3, r2
 800274e:	011b      	lsls	r3, r3, #4
 8002750:	1a9b      	subs	r3, r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	440b      	add	r3, r1
 8002756:	3326      	adds	r3, #38	@ 0x26
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	2b03      	cmp	r3, #3
 800275c:	d11b      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800275e:	78fa      	ldrb	r2, [r7, #3]
 8002760:	6879      	ldr	r1, [r7, #4]
 8002762:	4613      	mov	r3, r2
 8002764:	011b      	lsls	r3, r3, #4
 8002766:	1a9b      	subs	r3, r3, r2
 8002768:	009b      	lsls	r3, r3, #2
 800276a:	440b      	add	r3, r1
 800276c:	3344      	adds	r3, #68	@ 0x44
 800276e:	2200      	movs	r2, #0
 8002770:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	334d      	adds	r3, #77	@ 0x4d
 8002782:	2204      	movs	r2, #4
 8002784:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f002 fe57 	bl	8005442 <USB_HC_Halt>
 8002794:	e03f      	b.n	8002816 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002796:	78fa      	ldrb	r2, [r7, #3]
 8002798:	6879      	ldr	r1, [r7, #4]
 800279a:	4613      	mov	r3, r2
 800279c:	011b      	lsls	r3, r3, #4
 800279e:	1a9b      	subs	r3, r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	440b      	add	r3, r1
 80027a4:	3326      	adds	r3, #38	@ 0x26
 80027a6:	781b      	ldrb	r3, [r3, #0]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00a      	beq.n	80027c2 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80027ac:	78fa      	ldrb	r2, [r7, #3]
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	4613      	mov	r3, r2
 80027b2:	011b      	lsls	r3, r3, #4
 80027b4:	1a9b      	subs	r3, r3, r2
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	3326      	adds	r3, #38	@ 0x26
 80027bc:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d129      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	3344      	adds	r3, #68	@ 0x44
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	799b      	ldrb	r3, [r3, #6]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d00a      	beq.n	80027f4 <HCD_HC_IN_IRQHandler+0xc2a>
 80027de:	78fa      	ldrb	r2, [r7, #3]
 80027e0:	6879      	ldr	r1, [r7, #4]
 80027e2:	4613      	mov	r3, r2
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	1a9b      	subs	r3, r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	440b      	add	r3, r1
 80027ec:	331b      	adds	r3, #27
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d110      	bne.n	8002816 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80027f4:	78fa      	ldrb	r2, [r7, #3]
 80027f6:	6879      	ldr	r1, [r7, #4]
 80027f8:	4613      	mov	r3, r2
 80027fa:	011b      	lsls	r3, r3, #4
 80027fc:	1a9b      	subs	r3, r3, r2
 80027fe:	009b      	lsls	r3, r3, #2
 8002800:	440b      	add	r3, r1
 8002802:	334d      	adds	r3, #77	@ 0x4d
 8002804:	2204      	movs	r2, #4
 8002806:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4611      	mov	r1, r2
 8002810:	4618      	mov	r0, r3
 8002812:	f002 fe16 	bl	8005442 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	331b      	adds	r3, #27
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d129      	bne.n	8002880 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	331b      	adds	r3, #27
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002840:	78fb      	ldrb	r3, [r7, #3]
 8002842:	015a      	lsls	r2, r3, #5
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	4413      	add	r3, r2
 8002848:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	78fa      	ldrb	r2, [r7, #3]
 8002850:	0151      	lsls	r1, r2, #5
 8002852:	693a      	ldr	r2, [r7, #16]
 8002854:	440a      	add	r2, r1
 8002856:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800285a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800285e:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8002860:	78fb      	ldrb	r3, [r7, #3]
 8002862:	015a      	lsls	r2, r3, #5
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4413      	add	r3, r2
 8002868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	0151      	lsls	r1, r2, #5
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	440a      	add	r2, r1
 8002876:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002880:	78fb      	ldrb	r3, [r7, #3]
 8002882:	015a      	lsls	r2, r3, #5
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	4413      	add	r3, r2
 8002888:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800288c:	461a      	mov	r2, r3
 800288e:	2310      	movs	r3, #16
 8002890:	6093      	str	r3, [r2, #8]
 8002892:	e000      	b.n	8002896 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8002894:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b086      	sub	sp, #24
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	78fa      	ldrb	r2, [r7, #3]
 80028b8:	4611      	mov	r1, r2
 80028ba:	4618      	mov	r0, r3
 80028bc:	f002 f87f 	bl	80049be <USB_ReadChInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 0304 	and.w	r3, r3, #4
 80028c6:	2b04      	cmp	r3, #4
 80028c8:	d11b      	bne.n	8002902 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80028ca:	78fb      	ldrb	r3, [r7, #3]
 80028cc:	015a      	lsls	r2, r3, #5
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	4413      	add	r3, r2
 80028d2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028d6:	461a      	mov	r2, r3
 80028d8:	2304      	movs	r3, #4
 80028da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028dc:	78fa      	ldrb	r2, [r7, #3]
 80028de:	6879      	ldr	r1, [r7, #4]
 80028e0:	4613      	mov	r3, r2
 80028e2:	011b      	lsls	r3, r3, #4
 80028e4:	1a9b      	subs	r3, r3, r2
 80028e6:	009b      	lsls	r3, r3, #2
 80028e8:	440b      	add	r3, r1
 80028ea:	334d      	adds	r3, #77	@ 0x4d
 80028ec:	2207      	movs	r2, #7
 80028ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	78fa      	ldrb	r2, [r7, #3]
 80028f6:	4611      	mov	r1, r2
 80028f8:	4618      	mov	r0, r3
 80028fa:	f002 fda2 	bl	8005442 <USB_HC_Halt>
 80028fe:	f000 bc89 	b.w	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	78fa      	ldrb	r2, [r7, #3]
 8002908:	4611      	mov	r1, r2
 800290a:	4618      	mov	r0, r3
 800290c:	f002 f857 	bl	80049be <USB_ReadChInterrupts>
 8002910:	4603      	mov	r3, r0
 8002912:	f003 0320 	and.w	r3, r3, #32
 8002916:	2b20      	cmp	r3, #32
 8002918:	f040 8082 	bne.w	8002a20 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	015a      	lsls	r2, r3, #5
 8002920:	693b      	ldr	r3, [r7, #16]
 8002922:	4413      	add	r3, r2
 8002924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002928:	461a      	mov	r2, r3
 800292a:	2320      	movs	r3, #32
 800292c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800292e:	78fa      	ldrb	r2, [r7, #3]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	4613      	mov	r3, r2
 8002934:	011b      	lsls	r3, r3, #4
 8002936:	1a9b      	subs	r3, r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3319      	adds	r3, #25
 800293e:	781b      	ldrb	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d124      	bne.n	800298e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3319      	adds	r3, #25
 8002954:	2200      	movs	r2, #0
 8002956:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002958:	78fa      	ldrb	r2, [r7, #3]
 800295a:	6879      	ldr	r1, [r7, #4]
 800295c:	4613      	mov	r3, r2
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	1a9b      	subs	r3, r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	334c      	adds	r3, #76	@ 0x4c
 8002968:	2202      	movs	r2, #2
 800296a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800296c:	78fa      	ldrb	r2, [r7, #3]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	011b      	lsls	r3, r3, #4
 8002974:	1a9b      	subs	r3, r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	334d      	adds	r3, #77	@ 0x4d
 800297c:	2203      	movs	r2, #3
 800297e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	78fa      	ldrb	r2, [r7, #3]
 8002986:	4611      	mov	r1, r2
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fd5a 	bl	8005442 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800298e:	78fa      	ldrb	r2, [r7, #3]
 8002990:	6879      	ldr	r1, [r7, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	011b      	lsls	r3, r3, #4
 8002996:	1a9b      	subs	r3, r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	440b      	add	r3, r1
 800299c:	331a      	adds	r3, #26
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	f040 8437 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x978>
 80029a6:	78fa      	ldrb	r2, [r7, #3]
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	4613      	mov	r3, r2
 80029ac:	011b      	lsls	r3, r3, #4
 80029ae:	1a9b      	subs	r3, r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	440b      	add	r3, r1
 80029b4:	331b      	adds	r3, #27
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 842b 	bne.w	8003214 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80029be:	78fa      	ldrb	r2, [r7, #3]
 80029c0:	6879      	ldr	r1, [r7, #4]
 80029c2:	4613      	mov	r3, r2
 80029c4:	011b      	lsls	r3, r3, #4
 80029c6:	1a9b      	subs	r3, r3, r2
 80029c8:	009b      	lsls	r3, r3, #2
 80029ca:	440b      	add	r3, r1
 80029cc:	3326      	adds	r3, #38	@ 0x26
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d009      	beq.n	80029e8 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	6879      	ldr	r1, [r7, #4]
 80029d8:	4613      	mov	r3, r2
 80029da:	011b      	lsls	r3, r3, #4
 80029dc:	1a9b      	subs	r3, r3, r2
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	440b      	add	r3, r1
 80029e2:	331b      	adds	r3, #27
 80029e4:	2201      	movs	r2, #1
 80029e6:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80029e8:	78fa      	ldrb	r2, [r7, #3]
 80029ea:	6879      	ldr	r1, [r7, #4]
 80029ec:	4613      	mov	r3, r2
 80029ee:	011b      	lsls	r3, r3, #4
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	440b      	add	r3, r1
 80029f6:	334d      	adds	r3, #77	@ 0x4d
 80029f8:	2203      	movs	r2, #3
 80029fa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	4611      	mov	r1, r2
 8002a04:	4618      	mov	r0, r3
 8002a06:	f002 fd1c 	bl	8005442 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8002a0a:	78fa      	ldrb	r2, [r7, #3]
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	1a9b      	subs	r3, r3, r2
 8002a14:	009b      	lsls	r3, r3, #2
 8002a16:	440b      	add	r3, r1
 8002a18:	3344      	adds	r3, #68	@ 0x44
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	601a      	str	r2, [r3, #0]
 8002a1e:	e3f9      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	78fa      	ldrb	r2, [r7, #3]
 8002a26:	4611      	mov	r1, r2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f001 ffc8 	bl	80049be <USB_ReadChInterrupts>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a34:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a38:	d111      	bne.n	8002a5e <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002a3a:	78fb      	ldrb	r3, [r7, #3]
 8002a3c:	015a      	lsls	r2, r3, #5
 8002a3e:	693b      	ldr	r3, [r7, #16]
 8002a40:	4413      	add	r3, r2
 8002a42:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a46:	461a      	mov	r2, r3
 8002a48:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002a4c:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	78fa      	ldrb	r2, [r7, #3]
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fcf3 	bl	8005442 <USB_HC_Halt>
 8002a5c:	e3da      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	78fa      	ldrb	r2, [r7, #3]
 8002a64:	4611      	mov	r1, r2
 8002a66:	4618      	mov	r0, r3
 8002a68:	f001 ffa9 	bl	80049be <USB_ReadChInterrupts>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	f003 0301 	and.w	r3, r3, #1
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d168      	bne.n	8002b48 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3344      	adds	r3, #68	@ 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f001 ff93 	bl	80049be <USB_ReadChInterrupts>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a9e:	2b40      	cmp	r3, #64	@ 0x40
 8002aa0:	d112      	bne.n	8002ac8 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	6879      	ldr	r1, [r7, #4]
 8002aa6:	4613      	mov	r3, r2
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	1a9b      	subs	r3, r3, r2
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	440b      	add	r3, r1
 8002ab0:	3319      	adds	r3, #25
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	015a      	lsls	r2, r3, #5
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	4413      	add	r3, r2
 8002abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ac2:	461a      	mov	r2, r3
 8002ac4:	2340      	movs	r3, #64	@ 0x40
 8002ac6:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8002ac8:	78fa      	ldrb	r2, [r7, #3]
 8002aca:	6879      	ldr	r1, [r7, #4]
 8002acc:	4613      	mov	r3, r2
 8002ace:	011b      	lsls	r3, r3, #4
 8002ad0:	1a9b      	subs	r3, r3, r2
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	440b      	add	r3, r1
 8002ad6:	331b      	adds	r3, #27
 8002ad8:	781b      	ldrb	r3, [r3, #0]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d019      	beq.n	8002b12 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	6879      	ldr	r1, [r7, #4]
 8002ae2:	4613      	mov	r3, r2
 8002ae4:	011b      	lsls	r3, r3, #4
 8002ae6:	1a9b      	subs	r3, r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	440b      	add	r3, r1
 8002aec:	331b      	adds	r3, #27
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002af2:	78fb      	ldrb	r3, [r7, #3]
 8002af4:	015a      	lsls	r2, r3, #5
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4413      	add	r3, r2
 8002afa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	0151      	lsls	r1, r2, #5
 8002b04:	693a      	ldr	r2, [r7, #16]
 8002b06:	440a      	add	r2, r1
 8002b08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b10:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002b12:	78fb      	ldrb	r3, [r7, #3]
 8002b14:	015a      	lsls	r2, r3, #5
 8002b16:	693b      	ldr	r3, [r7, #16]
 8002b18:	4413      	add	r3, r2
 8002b1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b1e:	461a      	mov	r2, r3
 8002b20:	2301      	movs	r3, #1
 8002b22:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8002b24:	78fa      	ldrb	r2, [r7, #3]
 8002b26:	6879      	ldr	r1, [r7, #4]
 8002b28:	4613      	mov	r3, r2
 8002b2a:	011b      	lsls	r3, r3, #4
 8002b2c:	1a9b      	subs	r3, r3, r2
 8002b2e:	009b      	lsls	r3, r3, #2
 8002b30:	440b      	add	r3, r1
 8002b32:	334d      	adds	r3, #77	@ 0x4d
 8002b34:	2201      	movs	r2, #1
 8002b36:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	4611      	mov	r1, r2
 8002b40:	4618      	mov	r0, r3
 8002b42:	f002 fc7e 	bl	8005442 <USB_HC_Halt>
 8002b46:	e365      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	4611      	mov	r1, r2
 8002b50:	4618      	mov	r0, r3
 8002b52:	f001 ff34 	bl	80049be <USB_ReadChInterrupts>
 8002b56:	4603      	mov	r3, r0
 8002b58:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b5c:	2b40      	cmp	r3, #64	@ 0x40
 8002b5e:	d139      	bne.n	8002bd4 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8002b60:	78fa      	ldrb	r2, [r7, #3]
 8002b62:	6879      	ldr	r1, [r7, #4]
 8002b64:	4613      	mov	r3, r2
 8002b66:	011b      	lsls	r3, r3, #4
 8002b68:	1a9b      	subs	r3, r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	440b      	add	r3, r1
 8002b6e:	334d      	adds	r3, #77	@ 0x4d
 8002b70:	2205      	movs	r2, #5
 8002b72:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8002b74:	78fa      	ldrb	r2, [r7, #3]
 8002b76:	6879      	ldr	r1, [r7, #4]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	011b      	lsls	r3, r3, #4
 8002b7c:	1a9b      	subs	r3, r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	440b      	add	r3, r1
 8002b82:	331a      	adds	r3, #26
 8002b84:	781b      	ldrb	r3, [r3, #0]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d109      	bne.n	8002b9e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8002b8a:	78fa      	ldrb	r2, [r7, #3]
 8002b8c:	6879      	ldr	r1, [r7, #4]
 8002b8e:	4613      	mov	r3, r2
 8002b90:	011b      	lsls	r3, r3, #4
 8002b92:	1a9b      	subs	r3, r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3319      	adds	r3, #25
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	3344      	adds	r3, #68	@ 0x44
 8002bae:	2200      	movs	r2, #0
 8002bb0:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f002 fc41 	bl	8005442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	015a      	lsls	r2, r3, #5
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bcc:	461a      	mov	r2, r3
 8002bce:	2340      	movs	r3, #64	@ 0x40
 8002bd0:	6093      	str	r3, [r2, #8]
 8002bd2:	e31f      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	78fa      	ldrb	r2, [r7, #3]
 8002bda:	4611      	mov	r1, r2
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f001 feee 	bl	80049be <USB_ReadChInterrupts>
 8002be2:	4603      	mov	r3, r0
 8002be4:	f003 0308 	and.w	r3, r3, #8
 8002be8:	2b08      	cmp	r3, #8
 8002bea:	d11a      	bne.n	8002c22 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002bec:	78fb      	ldrb	r3, [r7, #3]
 8002bee:	015a      	lsls	r2, r3, #5
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	4413      	add	r3, r2
 8002bf4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf8:	461a      	mov	r2, r3
 8002bfa:	2308      	movs	r3, #8
 8002bfc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	334d      	adds	r3, #77	@ 0x4d
 8002c0e:	2206      	movs	r2, #6
 8002c10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	78fa      	ldrb	r2, [r7, #3]
 8002c18:	4611      	mov	r1, r2
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f002 fc11 	bl	8005442 <USB_HC_Halt>
 8002c20:	e2f8      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	4611      	mov	r1, r2
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f001 fec7 	bl	80049be <USB_ReadChInterrupts>
 8002c30:	4603      	mov	r3, r0
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b10      	cmp	r3, #16
 8002c38:	d144      	bne.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	3344      	adds	r3, #68	@ 0x44
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	334d      	adds	r3, #77	@ 0x4d
 8002c5e:	2204      	movs	r2, #4
 8002c60:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8002c62:	78fa      	ldrb	r2, [r7, #3]
 8002c64:	6879      	ldr	r1, [r7, #4]
 8002c66:	4613      	mov	r3, r2
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	1a9b      	subs	r3, r3, r2
 8002c6c:	009b      	lsls	r3, r3, #2
 8002c6e:	440b      	add	r3, r1
 8002c70:	3319      	adds	r3, #25
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d114      	bne.n	8002ca2 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8002c78:	78fa      	ldrb	r2, [r7, #3]
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	4613      	mov	r3, r2
 8002c7e:	011b      	lsls	r3, r3, #4
 8002c80:	1a9b      	subs	r3, r3, r2
 8002c82:	009b      	lsls	r3, r3, #2
 8002c84:	440b      	add	r3, r1
 8002c86:	3318      	adds	r3, #24
 8002c88:	781b      	ldrb	r3, [r3, #0]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	3319      	adds	r3, #25
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	78fa      	ldrb	r2, [r7, #3]
 8002ca8:	4611      	mov	r1, r2
 8002caa:	4618      	mov	r0, r3
 8002cac:	f002 fbc9 	bl	8005442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cb0:	78fb      	ldrb	r3, [r7, #3]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	6093      	str	r3, [r2, #8]
 8002cc2:	e2a7      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	78fa      	ldrb	r2, [r7, #3]
 8002cca:	4611      	mov	r1, r2
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f001 fe76 	bl	80049be <USB_ReadChInterrupts>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cd8:	2b80      	cmp	r3, #128	@ 0x80
 8002cda:	f040 8083 	bne.w	8002de4 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	799b      	ldrb	r3, [r3, #6]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d111      	bne.n	8002d0a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	334d      	adds	r3, #77	@ 0x4d
 8002cf6:	2207      	movs	r2, #7
 8002cf8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	78fa      	ldrb	r2, [r7, #3]
 8002d00:	4611      	mov	r1, r2
 8002d02:	4618      	mov	r0, r3
 8002d04:	f002 fb9d 	bl	8005442 <USB_HC_Halt>
 8002d08:	e062      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3344      	adds	r3, #68	@ 0x44
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	1c59      	adds	r1, r3, #1
 8002d1e:	6878      	ldr	r0, [r7, #4]
 8002d20:	4613      	mov	r3, r2
 8002d22:	011b      	lsls	r3, r3, #4
 8002d24:	1a9b      	subs	r3, r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4403      	add	r3, r0
 8002d2a:	3344      	adds	r3, #68	@ 0x44
 8002d2c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	3344      	adds	r3, #68	@ 0x44
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d922      	bls.n	8002d8a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3344      	adds	r3, #68	@ 0x44
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	@ 0x4c
 8002d68:	2204      	movs	r2, #4
 8002d6a:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	334c      	adds	r3, #76	@ 0x4c
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	78fb      	ldrb	r3, [r7, #3]
 8002d80:	4619      	mov	r1, r3
 8002d82:	6878      	ldr	r0, [r7, #4]
 8002d84:	f00a fc4e 	bl	800d624 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002d88:	e022      	b.n	8002dd0 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d8a:	78fa      	ldrb	r2, [r7, #3]
 8002d8c:	6879      	ldr	r1, [r7, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	011b      	lsls	r3, r3, #4
 8002d92:	1a9b      	subs	r3, r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	334c      	adds	r3, #76	@ 0x4c
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d9e:	78fb      	ldrb	r3, [r7, #3]
 8002da0:	015a      	lsls	r2, r3, #5
 8002da2:	693b      	ldr	r3, [r7, #16]
 8002da4:	4413      	add	r3, r2
 8002da6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002db4:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002dbc:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dbe:	78fb      	ldrb	r3, [r7, #3]
 8002dc0:	015a      	lsls	r2, r3, #5
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	4413      	add	r3, r2
 8002dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dca:	461a      	mov	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	461a      	mov	r2, r3
 8002dde:	2380      	movs	r3, #128	@ 0x80
 8002de0:	6093      	str	r3, [r2, #8]
 8002de2:	e217      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f001 fde6 	bl	80049be <USB_ReadChInterrupts>
 8002df2:	4603      	mov	r3, r0
 8002df4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002df8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dfc:	d11b      	bne.n	8002e36 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	6879      	ldr	r1, [r7, #4]
 8002e02:	4613      	mov	r3, r2
 8002e04:	011b      	lsls	r3, r3, #4
 8002e06:	1a9b      	subs	r3, r3, r2
 8002e08:	009b      	lsls	r3, r3, #2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	334d      	adds	r3, #77	@ 0x4d
 8002e0e:	2209      	movs	r2, #9
 8002e10:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	78fa      	ldrb	r2, [r7, #3]
 8002e18:	4611      	mov	r1, r2
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f002 fb11 	bl	8005442 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002e20:	78fb      	ldrb	r3, [r7, #3]
 8002e22:	015a      	lsls	r2, r3, #5
 8002e24:	693b      	ldr	r3, [r7, #16]
 8002e26:	4413      	add	r3, r2
 8002e28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2c:	461a      	mov	r2, r3
 8002e2e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002e32:	6093      	str	r3, [r2, #8]
 8002e34:	e1ee      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	78fa      	ldrb	r2, [r7, #3]
 8002e3c:	4611      	mov	r1, r2
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f001 fdbd 	bl	80049be <USB_ReadChInterrupts>
 8002e44:	4603      	mov	r3, r0
 8002e46:	f003 0302 	and.w	r3, r3, #2
 8002e4a:	2b02      	cmp	r3, #2
 8002e4c:	f040 81df 	bne.w	800320e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e50:	78fb      	ldrb	r3, [r7, #3]
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2302      	movs	r3, #2
 8002e60:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	334d      	adds	r3, #77	@ 0x4d
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b01      	cmp	r3, #1
 8002e76:	f040 8093 	bne.w	8002fa0 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	6879      	ldr	r1, [r7, #4]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	011b      	lsls	r3, r3, #4
 8002e82:	1a9b      	subs	r3, r3, r2
 8002e84:	009b      	lsls	r3, r3, #2
 8002e86:	440b      	add	r3, r1
 8002e88:	334d      	adds	r3, #77	@ 0x4d
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	6879      	ldr	r1, [r7, #4]
 8002e92:	4613      	mov	r3, r2
 8002e94:	011b      	lsls	r3, r3, #4
 8002e96:	1a9b      	subs	r3, r3, r2
 8002e98:	009b      	lsls	r3, r3, #2
 8002e9a:	440b      	add	r3, r1
 8002e9c:	334c      	adds	r3, #76	@ 0x4c
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	3326      	adds	r3, #38	@ 0x26
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b02      	cmp	r3, #2
 8002eb6:	d00b      	beq.n	8002ed0 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	3326      	adds	r3, #38	@ 0x26
 8002ec8:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	f040 8190 	bne.w	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	799b      	ldrb	r3, [r3, #6]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d115      	bne.n	8002f04 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8002ed8:	78fa      	ldrb	r2, [r7, #3]
 8002eda:	6879      	ldr	r1, [r7, #4]
 8002edc:	4613      	mov	r3, r2
 8002ede:	011b      	lsls	r3, r3, #4
 8002ee0:	1a9b      	subs	r3, r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	333d      	adds	r3, #61	@ 0x3d
 8002ee8:	781b      	ldrb	r3, [r3, #0]
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	f083 0301 	eor.w	r3, r3, #1
 8002ef0:	b2d8      	uxtb	r0, r3
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	333d      	adds	r3, #61	@ 0x3d
 8002f00:	4602      	mov	r2, r0
 8002f02:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	799b      	ldrb	r3, [r3, #6]
 8002f08:	2b01      	cmp	r3, #1
 8002f0a:	f040 8171 	bne.w	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
 8002f0e:	78fa      	ldrb	r2, [r7, #3]
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	4613      	mov	r3, r2
 8002f14:	011b      	lsls	r3, r3, #4
 8002f16:	1a9b      	subs	r3, r3, r2
 8002f18:	009b      	lsls	r3, r3, #2
 8002f1a:	440b      	add	r3, r1
 8002f1c:	3334      	adds	r3, #52	@ 0x34
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 8165 	beq.w	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8002f26:	78fa      	ldrb	r2, [r7, #3]
 8002f28:	6879      	ldr	r1, [r7, #4]
 8002f2a:	4613      	mov	r3, r2
 8002f2c:	011b      	lsls	r3, r3, #4
 8002f2e:	1a9b      	subs	r3, r3, r2
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	440b      	add	r3, r1
 8002f34:	3334      	adds	r3, #52	@ 0x34
 8002f36:	6819      	ldr	r1, [r3, #0]
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4403      	add	r3, r0
 8002f46:	3328      	adds	r3, #40	@ 0x28
 8002f48:	881b      	ldrh	r3, [r3, #0]
 8002f4a:	440b      	add	r3, r1
 8002f4c:	1e59      	subs	r1, r3, #1
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4403      	add	r3, r0
 8002f5c:	3328      	adds	r3, #40	@ 0x28
 8002f5e:	881b      	ldrh	r3, [r3, #0]
 8002f60:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f64:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	f003 0301 	and.w	r3, r3, #1
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	f000 813f 	beq.w	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	333d      	adds	r3, #61	@ 0x3d
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	78fa      	ldrb	r2, [r7, #3]
 8002f86:	f083 0301 	eor.w	r3, r3, #1
 8002f8a:	b2d8      	uxtb	r0, r3
 8002f8c:	6879      	ldr	r1, [r7, #4]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	011b      	lsls	r3, r3, #4
 8002f92:	1a9b      	subs	r3, r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	440b      	add	r3, r1
 8002f98:	333d      	adds	r3, #61	@ 0x3d
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	701a      	strb	r2, [r3, #0]
 8002f9e:	e127      	b.n	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	6879      	ldr	r1, [r7, #4]
 8002fa4:	4613      	mov	r3, r2
 8002fa6:	011b      	lsls	r3, r3, #4
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	009b      	lsls	r3, r3, #2
 8002fac:	440b      	add	r3, r1
 8002fae:	334d      	adds	r3, #77	@ 0x4d
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	d120      	bne.n	8002ff8 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fb6:	78fa      	ldrb	r2, [r7, #3]
 8002fb8:	6879      	ldr	r1, [r7, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	011b      	lsls	r3, r3, #4
 8002fbe:	1a9b      	subs	r3, r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	440b      	add	r3, r1
 8002fc4:	334d      	adds	r3, #77	@ 0x4d
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fca:	78fa      	ldrb	r2, [r7, #3]
 8002fcc:	6879      	ldr	r1, [r7, #4]
 8002fce:	4613      	mov	r3, r2
 8002fd0:	011b      	lsls	r3, r3, #4
 8002fd2:	1a9b      	subs	r3, r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	440b      	add	r3, r1
 8002fd8:	331b      	adds	r3, #27
 8002fda:	781b      	ldrb	r3, [r3, #0]
 8002fdc:	2b01      	cmp	r3, #1
 8002fde:	f040 8107 	bne.w	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fe2:	78fa      	ldrb	r2, [r7, #3]
 8002fe4:	6879      	ldr	r1, [r7, #4]
 8002fe6:	4613      	mov	r3, r2
 8002fe8:	011b      	lsls	r3, r3, #4
 8002fea:	1a9b      	subs	r3, r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	440b      	add	r3, r1
 8002ff0:	334c      	adds	r3, #76	@ 0x4c
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	701a      	strb	r2, [r3, #0]
 8002ff6:	e0fb      	b.n	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	6879      	ldr	r1, [r7, #4]
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	011b      	lsls	r3, r3, #4
 8003000:	1a9b      	subs	r3, r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	334d      	adds	r3, #77	@ 0x4d
 8003008:	781b      	ldrb	r3, [r3, #0]
 800300a:	2b04      	cmp	r3, #4
 800300c:	d13a      	bne.n	8003084 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800300e:	78fa      	ldrb	r2, [r7, #3]
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	4613      	mov	r3, r2
 8003014:	011b      	lsls	r3, r3, #4
 8003016:	1a9b      	subs	r3, r3, r2
 8003018:	009b      	lsls	r3, r3, #2
 800301a:	440b      	add	r3, r1
 800301c:	334d      	adds	r3, #77	@ 0x4d
 800301e:	2202      	movs	r2, #2
 8003020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003022:	78fa      	ldrb	r2, [r7, #3]
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	4613      	mov	r3, r2
 8003028:	011b      	lsls	r3, r3, #4
 800302a:	1a9b      	subs	r3, r3, r2
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	440b      	add	r3, r1
 8003030:	334c      	adds	r3, #76	@ 0x4c
 8003032:	2202      	movs	r2, #2
 8003034:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003036:	78fa      	ldrb	r2, [r7, #3]
 8003038:	6879      	ldr	r1, [r7, #4]
 800303a:	4613      	mov	r3, r2
 800303c:	011b      	lsls	r3, r3, #4
 800303e:	1a9b      	subs	r3, r3, r2
 8003040:	009b      	lsls	r3, r3, #2
 8003042:	440b      	add	r3, r1
 8003044:	331b      	adds	r3, #27
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	2b01      	cmp	r3, #1
 800304a:	f040 80d1 	bne.w	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 800304e:	78fa      	ldrb	r2, [r7, #3]
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	4613      	mov	r3, r2
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	1a9b      	subs	r3, r3, r2
 8003058:	009b      	lsls	r3, r3, #2
 800305a:	440b      	add	r3, r1
 800305c:	331b      	adds	r3, #27
 800305e:	2200      	movs	r2, #0
 8003060:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	015a      	lsls	r2, r3, #5
 8003066:	693b      	ldr	r3, [r7, #16]
 8003068:	4413      	add	r3, r2
 800306a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	78fa      	ldrb	r2, [r7, #3]
 8003072:	0151      	lsls	r1, r2, #5
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	440a      	add	r2, r1
 8003078:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800307c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003080:	6053      	str	r3, [r2, #4]
 8003082:	e0b5      	b.n	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003084:	78fa      	ldrb	r2, [r7, #3]
 8003086:	6879      	ldr	r1, [r7, #4]
 8003088:	4613      	mov	r3, r2
 800308a:	011b      	lsls	r3, r3, #4
 800308c:	1a9b      	subs	r3, r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	334d      	adds	r3, #77	@ 0x4d
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b05      	cmp	r3, #5
 8003098:	d114      	bne.n	80030c4 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	6879      	ldr	r1, [r7, #4]
 800309e:	4613      	mov	r3, r2
 80030a0:	011b      	lsls	r3, r3, #4
 80030a2:	1a9b      	subs	r3, r3, r2
 80030a4:	009b      	lsls	r3, r3, #2
 80030a6:	440b      	add	r3, r1
 80030a8:	334d      	adds	r3, #77	@ 0x4d
 80030aa:	2202      	movs	r2, #2
 80030ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 80030ae:	78fa      	ldrb	r2, [r7, #3]
 80030b0:	6879      	ldr	r1, [r7, #4]
 80030b2:	4613      	mov	r3, r2
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	1a9b      	subs	r3, r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	440b      	add	r3, r1
 80030bc:	334c      	adds	r3, #76	@ 0x4c
 80030be:	2202      	movs	r2, #2
 80030c0:	701a      	strb	r2, [r3, #0]
 80030c2:	e095      	b.n	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 80030c4:	78fa      	ldrb	r2, [r7, #3]
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	4613      	mov	r3, r2
 80030ca:	011b      	lsls	r3, r3, #4
 80030cc:	1a9b      	subs	r3, r3, r2
 80030ce:	009b      	lsls	r3, r3, #2
 80030d0:	440b      	add	r3, r1
 80030d2:	334d      	adds	r3, #77	@ 0x4d
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	2b06      	cmp	r3, #6
 80030d8:	d114      	bne.n	8003104 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334d      	adds	r3, #77	@ 0x4d
 80030ea:	2202      	movs	r2, #2
 80030ec:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	6879      	ldr	r1, [r7, #4]
 80030f2:	4613      	mov	r3, r2
 80030f4:	011b      	lsls	r3, r3, #4
 80030f6:	1a9b      	subs	r3, r3, r2
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	440b      	add	r3, r1
 80030fc:	334c      	adds	r3, #76	@ 0x4c
 80030fe:	2205      	movs	r2, #5
 8003100:	701a      	strb	r2, [r3, #0]
 8003102:	e075      	b.n	80031f0 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003104:	78fa      	ldrb	r2, [r7, #3]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	011b      	lsls	r3, r3, #4
 800310c:	1a9b      	subs	r3, r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	334d      	adds	r3, #77	@ 0x4d
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	2b07      	cmp	r3, #7
 8003118:	d00a      	beq.n	8003130 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	334d      	adds	r3, #77	@ 0x4d
 800312a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800312c:	2b09      	cmp	r3, #9
 800312e:	d170      	bne.n	8003212 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	334d      	adds	r3, #77	@ 0x4d
 8003140:	2202      	movs	r2, #2
 8003142:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	3344      	adds	r3, #68	@ 0x44
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	1c59      	adds	r1, r3, #1
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	4613      	mov	r3, r2
 800315c:	011b      	lsls	r3, r3, #4
 800315e:	1a9b      	subs	r3, r3, r2
 8003160:	009b      	lsls	r3, r3, #2
 8003162:	4403      	add	r3, r0
 8003164:	3344      	adds	r3, #68	@ 0x44
 8003166:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	3344      	adds	r3, #68	@ 0x44
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b02      	cmp	r3, #2
 800317c:	d914      	bls.n	80031a8 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	3344      	adds	r3, #68	@ 0x44
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334c      	adds	r3, #76	@ 0x4c
 80031a2:	2204      	movs	r2, #4
 80031a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031a6:	e022      	b.n	80031ee <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334c      	adds	r3, #76	@ 0x4c
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031bc:	78fb      	ldrb	r3, [r7, #3]
 80031be:	015a      	lsls	r2, r3, #5
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4413      	add	r3, r2
 80031c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031d2:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031da:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	015a      	lsls	r2, r3, #5
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4413      	add	r3, r2
 80031e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e8:	461a      	mov	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031ee:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	6879      	ldr	r1, [r7, #4]
 80031f4:	4613      	mov	r3, r2
 80031f6:	011b      	lsls	r3, r3, #4
 80031f8:	1a9b      	subs	r3, r3, r2
 80031fa:	009b      	lsls	r3, r3, #2
 80031fc:	440b      	add	r3, r1
 80031fe:	334c      	adds	r3, #76	@ 0x4c
 8003200:	781a      	ldrb	r2, [r3, #0]
 8003202:	78fb      	ldrb	r3, [r7, #3]
 8003204:	4619      	mov	r1, r3
 8003206:	6878      	ldr	r0, [r7, #4]
 8003208:	f00a fa0c 	bl	800d624 <HAL_HCD_HC_NotifyURBChange_Callback>
 800320c:	e002      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800320e:	bf00      	nop
 8003210:	e000      	b.n	8003214 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003212:	bf00      	nop
  }
}
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b08a      	sub	sp, #40	@ 0x28
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322a:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	f003 030f 	and.w	r3, r3, #15
 800323a:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	0c5b      	lsrs	r3, r3, #17
 8003240:	f003 030f 	and.w	r3, r3, #15
 8003244:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800324e:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003250:	697b      	ldr	r3, [r7, #20]
 8003252:	2b02      	cmp	r3, #2
 8003254:	d004      	beq.n	8003260 <HCD_RXQLVL_IRQHandler+0x46>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b05      	cmp	r3, #5
 800325a:	f000 80b6 	beq.w	80033ca <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800325e:	e0b7      	b.n	80033d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003260:	693b      	ldr	r3, [r7, #16]
 8003262:	2b00      	cmp	r3, #0
 8003264:	f000 80b3 	beq.w	80033ce <HCD_RXQLVL_IRQHandler+0x1b4>
 8003268:	6879      	ldr	r1, [r7, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4613      	mov	r3, r2
 800326e:	011b      	lsls	r3, r3, #4
 8003270:	1a9b      	subs	r3, r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	440b      	add	r3, r1
 8003276:	332c      	adds	r3, #44	@ 0x2c
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b00      	cmp	r3, #0
 800327c:	f000 80a7 	beq.w	80033ce <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003280:	6879      	ldr	r1, [r7, #4]
 8003282:	69ba      	ldr	r2, [r7, #24]
 8003284:	4613      	mov	r3, r2
 8003286:	011b      	lsls	r3, r3, #4
 8003288:	1a9b      	subs	r3, r3, r2
 800328a:	009b      	lsls	r3, r3, #2
 800328c:	440b      	add	r3, r1
 800328e:	3338      	adds	r3, #56	@ 0x38
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	18d1      	adds	r1, r2, r3
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	4403      	add	r3, r0
 80032a4:	3334      	adds	r3, #52	@ 0x34
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4299      	cmp	r1, r3
 80032aa:	f200 8083 	bhi.w	80033b4 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	6879      	ldr	r1, [r7, #4]
 80032b4:	69ba      	ldr	r2, [r7, #24]
 80032b6:	4613      	mov	r3, r2
 80032b8:	011b      	lsls	r3, r3, #4
 80032ba:	1a9b      	subs	r3, r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	332c      	adds	r3, #44	@ 0x2c
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	b292      	uxth	r2, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	f001 fb0d 	bl	80048e8 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	332c      	adds	r3, #44	@ 0x2c
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	18d1      	adds	r1, r2, r3
 80032e4:	6878      	ldr	r0, [r7, #4]
 80032e6:	69ba      	ldr	r2, [r7, #24]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	4403      	add	r3, r0
 80032f2:	332c      	adds	r3, #44	@ 0x2c
 80032f4:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	69ba      	ldr	r2, [r7, #24]
 80032fa:	4613      	mov	r3, r2
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	1a9b      	subs	r3, r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	440b      	add	r3, r1
 8003304:	3338      	adds	r3, #56	@ 0x38
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	693b      	ldr	r3, [r7, #16]
 800330a:	18d1      	adds	r1, r2, r3
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	69ba      	ldr	r2, [r7, #24]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4403      	add	r3, r0
 800331a:	3338      	adds	r3, #56	@ 0x38
 800331c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800331e:	69bb      	ldr	r3, [r7, #24]
 8003320:	015a      	lsls	r2, r3, #5
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	4413      	add	r3, r2
 8003326:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332a:	691b      	ldr	r3, [r3, #16]
 800332c:	0cdb      	lsrs	r3, r3, #19
 800332e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003332:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003334:	6879      	ldr	r1, [r7, #4]
 8003336:	69ba      	ldr	r2, [r7, #24]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	3328      	adds	r3, #40	@ 0x28
 8003344:	881b      	ldrh	r3, [r3, #0]
 8003346:	461a      	mov	r2, r3
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	4293      	cmp	r3, r2
 800334c:	d13f      	bne.n	80033ce <HCD_RXQLVL_IRQHandler+0x1b4>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d03c      	beq.n	80033ce <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	4413      	add	r3, r2
 800335c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800336a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003372:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	6a3b      	ldr	r3, [r7, #32]
 800337a:	4413      	add	r3, r2
 800337c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003380:	461a      	mov	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	333c      	adds	r3, #60	@ 0x3c
 8003396:	781b      	ldrb	r3, [r3, #0]
 8003398:	f083 0301 	eor.w	r3, r3, #1
 800339c:	b2d8      	uxtb	r0, r3
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4613      	mov	r3, r2
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	1a9b      	subs	r3, r3, r2
 80033a8:	009b      	lsls	r3, r3, #2
 80033aa:	440b      	add	r3, r1
 80033ac:	333c      	adds	r3, #60	@ 0x3c
 80033ae:	4602      	mov	r2, r0
 80033b0:	701a      	strb	r2, [r3, #0]
      break;
 80033b2:	e00c      	b.n	80033ce <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334c      	adds	r3, #76	@ 0x4c
 80033c4:	2204      	movs	r2, #4
 80033c6:	701a      	strb	r2, [r3, #0]
      break;
 80033c8:	e001      	b.n	80033ce <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80033ca:	bf00      	nop
 80033cc:	e000      	b.n	80033d0 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80033ce:	bf00      	nop
  }
}
 80033d0:	bf00      	nop
 80033d2:	3728      	adds	r7, #40	@ 0x28
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	b086      	sub	sp, #24
 80033dc:	af00      	add	r7, sp, #0
 80033de:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033e6:	697b      	ldr	r3, [r7, #20]
 80033e8:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80033fe:	68bb      	ldr	r3, [r7, #8]
 8003400:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003404:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b02      	cmp	r3, #2
 800340e:	d10b      	bne.n	8003428 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	2b01      	cmp	r3, #1
 8003418:	d102      	bne.n	8003420 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f00a f8e6 	bl	800d5ec <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	f043 0302 	orr.w	r3, r3, #2
 8003426:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b08      	cmp	r3, #8
 8003430:	d132      	bne.n	8003498 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	f043 0308 	orr.w	r3, r3, #8
 8003438:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f003 0304 	and.w	r3, r3, #4
 8003440:	2b04      	cmp	r3, #4
 8003442:	d126      	bne.n	8003492 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	7a5b      	ldrb	r3, [r3, #9]
 8003448:	2b02      	cmp	r3, #2
 800344a:	d113      	bne.n	8003474 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003452:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003456:	d106      	bne.n	8003466 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2102      	movs	r1, #2
 800345e:	4618      	mov	r0, r3
 8003460:	f001 fbbc 	bl	8004bdc <USB_InitFSLSPClkSel>
 8003464:	e011      	b.n	800348a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	2101      	movs	r1, #1
 800346c:	4618      	mov	r0, r3
 800346e:	f001 fbb5 	bl	8004bdc <USB_InitFSLSPClkSel>
 8003472:	e00a      	b.n	800348a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	79db      	ldrb	r3, [r3, #7]
 8003478:	2b01      	cmp	r3, #1
 800347a:	d106      	bne.n	800348a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003482:	461a      	mov	r2, r3
 8003484:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003488:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f00a f8d8 	bl	800d640 <HAL_HCD_PortEnabled_Callback>
 8003490:	e002      	b.n	8003498 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f00a f8e2 	bl	800d65c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	f003 0320 	and.w	r3, r3, #32
 800349e:	2b20      	cmp	r3, #32
 80034a0:	d103      	bne.n	80034aa <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	f043 0320 	orr.w	r3, r3, #32
 80034a8:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80034b0:	461a      	mov	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	6013      	str	r3, [r2, #0]
}
 80034b6:	bf00      	nop
 80034b8:	3718      	adds	r7, #24
 80034ba:	46bd      	mov	sp, r7
 80034bc:	bd80      	pop	{r7, pc}
	...

080034c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b086      	sub	sp, #24
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e267      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0301 	and.w	r3, r3, #1
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d075      	beq.n	80035ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034de:	4b88      	ldr	r3, [pc, #544]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	f003 030c 	and.w	r3, r3, #12
 80034e6:	2b04      	cmp	r3, #4
 80034e8:	d00c      	beq.n	8003504 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034ea:	4b85      	ldr	r3, [pc, #532]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80034f2:	2b08      	cmp	r3, #8
 80034f4:	d112      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034f6:	4b82      	ldr	r3, [pc, #520]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003502:	d10b      	bne.n	800351c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003504:	4b7e      	ldr	r3, [pc, #504]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d05b      	beq.n	80035c8 <HAL_RCC_OscConfig+0x108>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	685b      	ldr	r3, [r3, #4]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d157      	bne.n	80035c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e242      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003524:	d106      	bne.n	8003534 <HAL_RCC_OscConfig+0x74>
 8003526:	4b76      	ldr	r3, [pc, #472]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a75      	ldr	r2, [pc, #468]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800352c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e01d      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800353c:	d10c      	bne.n	8003558 <HAL_RCC_OscConfig+0x98>
 800353e:	4b70      	ldr	r3, [pc, #448]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	4a6f      	ldr	r2, [pc, #444]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003544:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003548:	6013      	str	r3, [r2, #0]
 800354a:	4b6d      	ldr	r3, [pc, #436]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a6c      	ldr	r2, [pc, #432]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003550:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003554:	6013      	str	r3, [r2, #0]
 8003556:	e00b      	b.n	8003570 <HAL_RCC_OscConfig+0xb0>
 8003558:	4b69      	ldr	r3, [pc, #420]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a68      	ldr	r2, [pc, #416]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800355e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003562:	6013      	str	r3, [r2, #0]
 8003564:	4b66      	ldr	r3, [pc, #408]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	4a65      	ldr	r2, [pc, #404]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800356a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800356e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d013      	beq.n	80035a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003578:	f7fd fb8e 	bl	8000c98 <HAL_GetTick>
 800357c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	e008      	b.n	8003592 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003580:	f7fd fb8a 	bl	8000c98 <HAL_GetTick>
 8003584:	4602      	mov	r2, r0
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	1ad3      	subs	r3, r2, r3
 800358a:	2b64      	cmp	r3, #100	@ 0x64
 800358c:	d901      	bls.n	8003592 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e207      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003592:	4b5b      	ldr	r3, [pc, #364]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800359a:	2b00      	cmp	r3, #0
 800359c:	d0f0      	beq.n	8003580 <HAL_RCC_OscConfig+0xc0>
 800359e:	e014      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a0:	f7fd fb7a 	bl	8000c98 <HAL_GetTick>
 80035a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035a6:	e008      	b.n	80035ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035a8:	f7fd fb76 	bl	8000c98 <HAL_GetTick>
 80035ac:	4602      	mov	r2, r0
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	1ad3      	subs	r3, r2, r3
 80035b2:	2b64      	cmp	r3, #100	@ 0x64
 80035b4:	d901      	bls.n	80035ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035b6:	2303      	movs	r3, #3
 80035b8:	e1f3      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ba:	4b51      	ldr	r3, [pc, #324]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d1f0      	bne.n	80035a8 <HAL_RCC_OscConfig+0xe8>
 80035c6:	e000      	b.n	80035ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f003 0302 	and.w	r3, r3, #2
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d063      	beq.n	800369e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035d6:	4b4a      	ldr	r3, [pc, #296]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00b      	beq.n	80035fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035e2:	4b47      	ldr	r3, [pc, #284]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035e4:	689b      	ldr	r3, [r3, #8]
 80035e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80035ea:	2b08      	cmp	r3, #8
 80035ec:	d11c      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035ee:	4b44      	ldr	r3, [pc, #272]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d116      	bne.n	8003628 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	4b41      	ldr	r3, [pc, #260]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d005      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68db      	ldr	r3, [r3, #12]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e1c7      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003612:	4b3b      	ldr	r3, [pc, #236]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	691b      	ldr	r3, [r3, #16]
 800361e:	00db      	lsls	r3, r3, #3
 8003620:	4937      	ldr	r1, [pc, #220]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003622:	4313      	orrs	r3, r2
 8003624:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003626:	e03a      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	68db      	ldr	r3, [r3, #12]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d020      	beq.n	8003672 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003630:	4b34      	ldr	r3, [pc, #208]	@ (8003704 <HAL_RCC_OscConfig+0x244>)
 8003632:	2201      	movs	r2, #1
 8003634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003636:	f7fd fb2f 	bl	8000c98 <HAL_GetTick>
 800363a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800363c:	e008      	b.n	8003650 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800363e:	f7fd fb2b 	bl	8000c98 <HAL_GetTick>
 8003642:	4602      	mov	r2, r0
 8003644:	693b      	ldr	r3, [r7, #16]
 8003646:	1ad3      	subs	r3, r2, r3
 8003648:	2b02      	cmp	r3, #2
 800364a:	d901      	bls.n	8003650 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800364c:	2303      	movs	r3, #3
 800364e:	e1a8      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003650:	4b2b      	ldr	r3, [pc, #172]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0302 	and.w	r3, r3, #2
 8003658:	2b00      	cmp	r3, #0
 800365a:	d0f0      	beq.n	800363e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800365c:	4b28      	ldr	r3, [pc, #160]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4925      	ldr	r1, [pc, #148]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 800366c:	4313      	orrs	r3, r2
 800366e:	600b      	str	r3, [r1, #0]
 8003670:	e015      	b.n	800369e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003672:	4b24      	ldr	r3, [pc, #144]	@ (8003704 <HAL_RCC_OscConfig+0x244>)
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003678:	f7fd fb0e 	bl	8000c98 <HAL_GetTick>
 800367c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800367e:	e008      	b.n	8003692 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003680:	f7fd fb0a 	bl	8000c98 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	2b02      	cmp	r3, #2
 800368c:	d901      	bls.n	8003692 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e187      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f003 0302 	and.w	r3, r3, #2
 800369a:	2b00      	cmp	r3, #0
 800369c:	d1f0      	bne.n	8003680 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d036      	beq.n	8003718 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d016      	beq.n	80036e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036b2:	4b15      	ldr	r3, [pc, #84]	@ (8003708 <HAL_RCC_OscConfig+0x248>)
 80036b4:	2201      	movs	r2, #1
 80036b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b8:	f7fd faee 	bl	8000c98 <HAL_GetTick>
 80036bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036be:	e008      	b.n	80036d2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036c0:	f7fd faea 	bl	8000c98 <HAL_GetTick>
 80036c4:	4602      	mov	r2, r0
 80036c6:	693b      	ldr	r3, [r7, #16]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d901      	bls.n	80036d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036ce:	2303      	movs	r3, #3
 80036d0:	e167      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <HAL_RCC_OscConfig+0x240>)
 80036d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80036d6:	f003 0302 	and.w	r3, r3, #2
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d0f0      	beq.n	80036c0 <HAL_RCC_OscConfig+0x200>
 80036de:	e01b      	b.n	8003718 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036e0:	4b09      	ldr	r3, [pc, #36]	@ (8003708 <HAL_RCC_OscConfig+0x248>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e6:	f7fd fad7 	bl	8000c98 <HAL_GetTick>
 80036ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036ec:	e00e      	b.n	800370c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036ee:	f7fd fad3 	bl	8000c98 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	2b02      	cmp	r3, #2
 80036fa:	d907      	bls.n	800370c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e150      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003700:	40023800 	.word	0x40023800
 8003704:	42470000 	.word	0x42470000
 8003708:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800370c:	4b88      	ldr	r3, [pc, #544]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003710:	f003 0302 	and.w	r3, r3, #2
 8003714:	2b00      	cmp	r3, #0
 8003716:	d1ea      	bne.n	80036ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0304 	and.w	r3, r3, #4
 8003720:	2b00      	cmp	r3, #0
 8003722:	f000 8097 	beq.w	8003854 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003726:	2300      	movs	r3, #0
 8003728:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800372a:	4b81      	ldr	r3, [pc, #516]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800372c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800372e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10f      	bne.n	8003756 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60bb      	str	r3, [r7, #8]
 800373a:	4b7d      	ldr	r3, [pc, #500]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800373e:	4a7c      	ldr	r2, [pc, #496]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003740:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003744:	6413      	str	r3, [r2, #64]	@ 0x40
 8003746:	4b7a      	ldr	r3, [pc, #488]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800374a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800374e:	60bb      	str	r3, [r7, #8]
 8003750:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003752:	2301      	movs	r3, #1
 8003754:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003756:	4b77      	ldr	r3, [pc, #476]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800375e:	2b00      	cmp	r3, #0
 8003760:	d118      	bne.n	8003794 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003762:	4b74      	ldr	r3, [pc, #464]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	4a73      	ldr	r2, [pc, #460]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 8003768:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800376c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800376e:	f7fd fa93 	bl	8000c98 <HAL_GetTick>
 8003772:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003774:	e008      	b.n	8003788 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003776:	f7fd fa8f 	bl	8000c98 <HAL_GetTick>
 800377a:	4602      	mov	r2, r0
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	1ad3      	subs	r3, r2, r3
 8003780:	2b02      	cmp	r3, #2
 8003782:	d901      	bls.n	8003788 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003784:	2303      	movs	r3, #3
 8003786:	e10c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003788:	4b6a      	ldr	r3, [pc, #424]	@ (8003934 <HAL_RCC_OscConfig+0x474>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003790:	2b00      	cmp	r3, #0
 8003792:	d0f0      	beq.n	8003776 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	2b01      	cmp	r3, #1
 800379a:	d106      	bne.n	80037aa <HAL_RCC_OscConfig+0x2ea>
 800379c:	4b64      	ldr	r3, [pc, #400]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800379e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037a0:	4a63      	ldr	r2, [pc, #396]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037a2:	f043 0301 	orr.w	r3, r3, #1
 80037a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037a8:	e01c      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	689b      	ldr	r3, [r3, #8]
 80037ae:	2b05      	cmp	r3, #5
 80037b0:	d10c      	bne.n	80037cc <HAL_RCC_OscConfig+0x30c>
 80037b2:	4b5f      	ldr	r3, [pc, #380]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037b6:	4a5e      	ldr	r2, [pc, #376]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037b8:	f043 0304 	orr.w	r3, r3, #4
 80037bc:	6713      	str	r3, [r2, #112]	@ 0x70
 80037be:	4b5c      	ldr	r3, [pc, #368]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037c2:	4a5b      	ldr	r2, [pc, #364]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037c4:	f043 0301 	orr.w	r3, r3, #1
 80037c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037ca:	e00b      	b.n	80037e4 <HAL_RCC_OscConfig+0x324>
 80037cc:	4b58      	ldr	r3, [pc, #352]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d0:	4a57      	ldr	r2, [pc, #348]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f023 0301 	bic.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80037d8:	4b55      	ldr	r3, [pc, #340]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a54      	ldr	r2, [pc, #336]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80037de:	f023 0304 	bic.w	r3, r3, #4
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d015      	beq.n	8003818 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fd fa54 	bl	8000c98 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fd fa50 	bl	8000c98 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0cb      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800380a:	4b49      	ldr	r3, [pc, #292]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0ee      	beq.n	80037f4 <HAL_RCC_OscConfig+0x334>
 8003816:	e014      	b.n	8003842 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003818:	f7fd fa3e 	bl	8000c98 <HAL_GetTick>
 800381c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800381e:	e00a      	b.n	8003836 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003820:	f7fd fa3a 	bl	8000c98 <HAL_GetTick>
 8003824:	4602      	mov	r2, r0
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	1ad3      	subs	r3, r2, r3
 800382a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800382e:	4293      	cmp	r3, r2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e0b5      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003836:	4b3e      	ldr	r3, [pc, #248]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003838:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383a:	f003 0302 	and.w	r3, r3, #2
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1ee      	bne.n	8003820 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003842:	7dfb      	ldrb	r3, [r7, #23]
 8003844:	2b01      	cmp	r3, #1
 8003846:	d105      	bne.n	8003854 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003848:	4b39      	ldr	r3, [pc, #228]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800384a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800384c:	4a38      	ldr	r2, [pc, #224]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 800384e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003852:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	2b00      	cmp	r3, #0
 800385a:	f000 80a1 	beq.w	80039a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800385e:	4b34      	ldr	r3, [pc, #208]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f003 030c 	and.w	r3, r3, #12
 8003866:	2b08      	cmp	r3, #8
 8003868:	d05c      	beq.n	8003924 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	699b      	ldr	r3, [r3, #24]
 800386e:	2b02      	cmp	r3, #2
 8003870:	d141      	bne.n	80038f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003872:	4b31      	ldr	r3, [pc, #196]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 8003874:	2200      	movs	r2, #0
 8003876:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003878:	f7fd fa0e 	bl	8000c98 <HAL_GetTick>
 800387c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800387e:	e008      	b.n	8003892 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003880:	f7fd fa0a 	bl	8000c98 <HAL_GetTick>
 8003884:	4602      	mov	r2, r0
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	1ad3      	subs	r3, r2, r3
 800388a:	2b02      	cmp	r3, #2
 800388c:	d901      	bls.n	8003892 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e087      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003892:	4b27      	ldr	r3, [pc, #156]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d1f0      	bne.n	8003880 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	431a      	orrs	r2, r3
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	431a      	orrs	r2, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038b4:	085b      	lsrs	r3, r3, #1
 80038b6:	3b01      	subs	r3, #1
 80038b8:	041b      	lsls	r3, r3, #16
 80038ba:	431a      	orrs	r2, r3
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038c0:	061b      	lsls	r3, r3, #24
 80038c2:	491b      	ldr	r1, [pc, #108]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80038c4:	4313      	orrs	r3, r2
 80038c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038c8:	4b1b      	ldr	r3, [pc, #108]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 80038ca:	2201      	movs	r2, #1
 80038cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038ce:	f7fd f9e3 	bl	8000c98 <HAL_GetTick>
 80038d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038d4:	e008      	b.n	80038e8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038d6:	f7fd f9df 	bl	8000c98 <HAL_GetTick>
 80038da:	4602      	mov	r2, r0
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	1ad3      	subs	r3, r2, r3
 80038e0:	2b02      	cmp	r3, #2
 80038e2:	d901      	bls.n	80038e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80038e4:	2303      	movs	r3, #3
 80038e6:	e05c      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038e8:	4b11      	ldr	r3, [pc, #68]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d0f0      	beq.n	80038d6 <HAL_RCC_OscConfig+0x416>
 80038f4:	e054      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038f6:	4b10      	ldr	r3, [pc, #64]	@ (8003938 <HAL_RCC_OscConfig+0x478>)
 80038f8:	2200      	movs	r2, #0
 80038fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fc:	f7fd f9cc 	bl	8000c98 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003902:	e008      	b.n	8003916 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003904:	f7fd f9c8 	bl	8000c98 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	2b02      	cmp	r3, #2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e045      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003916:	4b06      	ldr	r3, [pc, #24]	@ (8003930 <HAL_RCC_OscConfig+0x470>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1f0      	bne.n	8003904 <HAL_RCC_OscConfig+0x444>
 8003922:	e03d      	b.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	699b      	ldr	r3, [r3, #24]
 8003928:	2b01      	cmp	r3, #1
 800392a:	d107      	bne.n	800393c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	e038      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
 8003930:	40023800 	.word	0x40023800
 8003934:	40007000 	.word	0x40007000
 8003938:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800393c:	4b1b      	ldr	r3, [pc, #108]	@ (80039ac <HAL_RCC_OscConfig+0x4ec>)
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	699b      	ldr	r3, [r3, #24]
 8003946:	2b01      	cmp	r3, #1
 8003948:	d028      	beq.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003954:	429a      	cmp	r2, r3
 8003956:	d121      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d11a      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800396c:	4013      	ands	r3, r2
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003972:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003974:	4293      	cmp	r3, r2
 8003976:	d111      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003982:	085b      	lsrs	r3, r3, #1
 8003984:	3b01      	subs	r3, #1
 8003986:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003988:	429a      	cmp	r2, r3
 800398a:	d107      	bne.n	800399c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003996:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003998:	429a      	cmp	r2, r3
 800399a:	d001      	beq.n	80039a0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800399c:	2301      	movs	r3, #1
 800399e:	e000      	b.n	80039a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3718      	adds	r7, #24
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	40023800 	.word	0x40023800

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d101      	bne.n	80039c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039c0:	2301      	movs	r3, #1
 80039c2:	e0cc      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c4:	4b68      	ldr	r3, [pc, #416]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 0307 	and.w	r3, r3, #7
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d90c      	bls.n	80039ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b65      	ldr	r3, [pc, #404]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039d4:	683a      	ldr	r2, [r7, #0]
 80039d6:	b2d2      	uxtb	r2, r2
 80039d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b63      	ldr	r3, [pc, #396]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e0b8      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0302 	and.w	r3, r3, #2
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d020      	beq.n	8003a3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0304 	and.w	r3, r3, #4
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d005      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a04:	4b59      	ldr	r3, [pc, #356]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a06:	689b      	ldr	r3, [r3, #8]
 8003a08:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0308 	and.w	r3, r3, #8
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d005      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a1c:	4b53      	ldr	r3, [pc, #332]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	4a52      	ldr	r2, [pc, #328]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a28:	4b50      	ldr	r3, [pc, #320]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	689b      	ldr	r3, [r3, #8]
 8003a34:	494d      	ldr	r1, [pc, #308]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	4313      	orrs	r3, r2
 8003a38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d044      	beq.n	8003ad0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d107      	bne.n	8003a5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a4e:	4b47      	ldr	r3, [pc, #284]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d119      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e07f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	2b02      	cmp	r3, #2
 8003a64:	d003      	beq.n	8003a6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a6a:	2b03      	cmp	r3, #3
 8003a6c:	d107      	bne.n	8003a7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a6e:	4b3f      	ldr	r3, [pc, #252]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e06f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a7e:	4b3b      	ldr	r3, [pc, #236]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0302 	and.w	r3, r3, #2
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d101      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e067      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003a8e:	4b37      	ldr	r3, [pc, #220]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f023 0203 	bic.w	r2, r3, #3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	4934      	ldr	r1, [pc, #208]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003aa0:	f7fd f8fa 	bl	8000c98 <HAL_GetTick>
 8003aa4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aa6:	e00a      	b.n	8003abe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003aa8:	f7fd f8f6 	bl	8000c98 <HAL_GetTick>
 8003aac:	4602      	mov	r2, r0
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d901      	bls.n	8003abe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aba:	2303      	movs	r3, #3
 8003abc:	e04f      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003abe:	4b2b      	ldr	r3, [pc, #172]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 020c 	and.w	r2, r3, #12
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	009b      	lsls	r3, r3, #2
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d1eb      	bne.n	8003aa8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003ad0:	4b25      	ldr	r3, [pc, #148]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	f003 0307 	and.w	r3, r3, #7
 8003ad8:	683a      	ldr	r2, [r7, #0]
 8003ada:	429a      	cmp	r2, r3
 8003adc:	d20c      	bcs.n	8003af8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ade:	4b22      	ldr	r3, [pc, #136]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	b2d2      	uxtb	r2, r2
 8003ae4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	@ (8003b68 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0307 	and.w	r3, r3, #7
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	429a      	cmp	r2, r3
 8003af2:	d001      	beq.n	8003af8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e032      	b.n	8003b5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d008      	beq.n	8003b16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b04:	4b19      	ldr	r3, [pc, #100]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	4916      	ldr	r1, [pc, #88]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0308 	and.w	r3, r3, #8
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b22:	4b12      	ldr	r3, [pc, #72]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b24:	689b      	ldr	r3, [r3, #8]
 8003b26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	00db      	lsls	r3, r3, #3
 8003b30:	490e      	ldr	r1, [pc, #56]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	4313      	orrs	r3, r2
 8003b34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b36:	f000 f821 	bl	8003b7c <HAL_RCC_GetSysClockFreq>
 8003b3a:	4602      	mov	r2, r0
 8003b3c:	4b0b      	ldr	r3, [pc, #44]	@ (8003b6c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3e:	689b      	ldr	r3, [r3, #8]
 8003b40:	091b      	lsrs	r3, r3, #4
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	490a      	ldr	r1, [pc, #40]	@ (8003b70 <HAL_RCC_ClockConfig+0x1c0>)
 8003b48:	5ccb      	ldrb	r3, [r1, r3]
 8003b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4e:	4a09      	ldr	r2, [pc, #36]	@ (8003b74 <HAL_RCC_ClockConfig+0x1c4>)
 8003b50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b52:	4b09      	ldr	r3, [pc, #36]	@ (8003b78 <HAL_RCC_ClockConfig+0x1c8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fd f85a 	bl	8000c10 <HAL_InitTick>

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3710      	adds	r7, #16
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40023c00 	.word	0x40023c00
 8003b6c:	40023800 	.word	0x40023800
 8003b70:	0800f090 	.word	0x0800f090
 8003b74:	20000068 	.word	0x20000068
 8003b78:	2000006c 	.word	0x2000006c

08003b7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003b80:	b094      	sub	sp, #80	@ 0x50
 8003b82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003b84:	2300      	movs	r3, #0
 8003b86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003b88:	2300      	movs	r3, #0
 8003b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b90:	2300      	movs	r3, #0
 8003b92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b94:	4b79      	ldr	r3, [pc, #484]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	f003 030c 	and.w	r3, r3, #12
 8003b9c:	2b08      	cmp	r3, #8
 8003b9e:	d00d      	beq.n	8003bbc <HAL_RCC_GetSysClockFreq+0x40>
 8003ba0:	2b08      	cmp	r3, #8
 8003ba2:	f200 80e1 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d002      	beq.n	8003bb0 <HAL_RCC_GetSysClockFreq+0x34>
 8003baa:	2b04      	cmp	r3, #4
 8003bac:	d003      	beq.n	8003bb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bae:	e0db      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003bb0:	4b73      	ldr	r3, [pc, #460]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bb4:	e0db      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003bb6:	4b73      	ldr	r3, [pc, #460]	@ (8003d84 <HAL_RCC_GetSysClockFreq+0x208>)
 8003bb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003bba:	e0d8      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bbc:	4b6f      	ldr	r3, [pc, #444]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003bc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bc6:	4b6d      	ldr	r3, [pc, #436]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d063      	beq.n	8003c9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bd2:	4b6a      	ldr	r3, [pc, #424]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	099b      	lsrs	r3, r3, #6
 8003bd8:	2200      	movs	r2, #0
 8003bda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003bdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003bde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003be4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003be6:	2300      	movs	r3, #0
 8003be8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003bea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003bee:	4622      	mov	r2, r4
 8003bf0:	462b      	mov	r3, r5
 8003bf2:	f04f 0000 	mov.w	r0, #0
 8003bf6:	f04f 0100 	mov.w	r1, #0
 8003bfa:	0159      	lsls	r1, r3, #5
 8003bfc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c00:	0150      	lsls	r0, r2, #5
 8003c02:	4602      	mov	r2, r0
 8003c04:	460b      	mov	r3, r1
 8003c06:	4621      	mov	r1, r4
 8003c08:	1a51      	subs	r1, r2, r1
 8003c0a:	6139      	str	r1, [r7, #16]
 8003c0c:	4629      	mov	r1, r5
 8003c0e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c12:	617b      	str	r3, [r7, #20]
 8003c14:	f04f 0200 	mov.w	r2, #0
 8003c18:	f04f 0300 	mov.w	r3, #0
 8003c1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c20:	4659      	mov	r1, fp
 8003c22:	018b      	lsls	r3, r1, #6
 8003c24:	4651      	mov	r1, sl
 8003c26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c2a:	4651      	mov	r1, sl
 8003c2c:	018a      	lsls	r2, r1, #6
 8003c2e:	4651      	mov	r1, sl
 8003c30:	ebb2 0801 	subs.w	r8, r2, r1
 8003c34:	4659      	mov	r1, fp
 8003c36:	eb63 0901 	sbc.w	r9, r3, r1
 8003c3a:	f04f 0200 	mov.w	r2, #0
 8003c3e:	f04f 0300 	mov.w	r3, #0
 8003c42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c4e:	4690      	mov	r8, r2
 8003c50:	4699      	mov	r9, r3
 8003c52:	4623      	mov	r3, r4
 8003c54:	eb18 0303 	adds.w	r3, r8, r3
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	462b      	mov	r3, r5
 8003c5c:	eb49 0303 	adc.w	r3, r9, r3
 8003c60:	60fb      	str	r3, [r7, #12]
 8003c62:	f04f 0200 	mov.w	r2, #0
 8003c66:	f04f 0300 	mov.w	r3, #0
 8003c6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003c6e:	4629      	mov	r1, r5
 8003c70:	024b      	lsls	r3, r1, #9
 8003c72:	4621      	mov	r1, r4
 8003c74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c78:	4621      	mov	r1, r4
 8003c7a:	024a      	lsls	r2, r1, #9
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c82:	2200      	movs	r2, #0
 8003c84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003c8c:	f7fc fb08 	bl	80002a0 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c98:	e058      	b.n	8003d4c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c9a:	4b38      	ldr	r3, [pc, #224]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	099b      	lsrs	r3, r3, #6
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	4611      	mov	r1, r2
 8003ca6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003caa:	623b      	str	r3, [r7, #32]
 8003cac:	2300      	movs	r3, #0
 8003cae:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003cb4:	4642      	mov	r2, r8
 8003cb6:	464b      	mov	r3, r9
 8003cb8:	f04f 0000 	mov.w	r0, #0
 8003cbc:	f04f 0100 	mov.w	r1, #0
 8003cc0:	0159      	lsls	r1, r3, #5
 8003cc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cc6:	0150      	lsls	r0, r2, #5
 8003cc8:	4602      	mov	r2, r0
 8003cca:	460b      	mov	r3, r1
 8003ccc:	4641      	mov	r1, r8
 8003cce:	ebb2 0a01 	subs.w	sl, r2, r1
 8003cd2:	4649      	mov	r1, r9
 8003cd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003cd8:	f04f 0200 	mov.w	r2, #0
 8003cdc:	f04f 0300 	mov.w	r3, #0
 8003ce0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ce4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003ce8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003cec:	ebb2 040a 	subs.w	r4, r2, sl
 8003cf0:	eb63 050b 	sbc.w	r5, r3, fp
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	00eb      	lsls	r3, r5, #3
 8003cfe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d02:	00e2      	lsls	r2, r4, #3
 8003d04:	4614      	mov	r4, r2
 8003d06:	461d      	mov	r5, r3
 8003d08:	4643      	mov	r3, r8
 8003d0a:	18e3      	adds	r3, r4, r3
 8003d0c:	603b      	str	r3, [r7, #0]
 8003d0e:	464b      	mov	r3, r9
 8003d10:	eb45 0303 	adc.w	r3, r5, r3
 8003d14:	607b      	str	r3, [r7, #4]
 8003d16:	f04f 0200 	mov.w	r2, #0
 8003d1a:	f04f 0300 	mov.w	r3, #0
 8003d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d22:	4629      	mov	r1, r5
 8003d24:	028b      	lsls	r3, r1, #10
 8003d26:	4621      	mov	r1, r4
 8003d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d2c:	4621      	mov	r1, r4
 8003d2e:	028a      	lsls	r2, r1, #10
 8003d30:	4610      	mov	r0, r2
 8003d32:	4619      	mov	r1, r3
 8003d34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d36:	2200      	movs	r2, #0
 8003d38:	61bb      	str	r3, [r7, #24]
 8003d3a:	61fa      	str	r2, [r7, #28]
 8003d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d40:	f7fc faae 	bl	80002a0 <__aeabi_uldivmod>
 8003d44:	4602      	mov	r2, r0
 8003d46:	460b      	mov	r3, r1
 8003d48:	4613      	mov	r3, r2
 8003d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d4c:	4b0b      	ldr	r3, [pc, #44]	@ (8003d7c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0c1b      	lsrs	r3, r3, #16
 8003d52:	f003 0303 	and.w	r3, r3, #3
 8003d56:	3301      	adds	r3, #1
 8003d58:	005b      	lsls	r3, r3, #1
 8003d5a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003d5c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d5e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d64:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d66:	e002      	b.n	8003d6e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d68:	4b05      	ldr	r3, [pc, #20]	@ (8003d80 <HAL_RCC_GetSysClockFreq+0x204>)
 8003d6a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d6e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003d70:	4618      	mov	r0, r3
 8003d72:	3750      	adds	r7, #80	@ 0x50
 8003d74:	46bd      	mov	sp, r7
 8003d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d7a:	bf00      	nop
 8003d7c:	40023800 	.word	0x40023800
 8003d80:	00f42400 	.word	0x00f42400
 8003d84:	007a1200 	.word	0x007a1200

08003d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d8c:	4b03      	ldr	r3, [pc, #12]	@ (8003d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr
 8003d9a:	bf00      	nop
 8003d9c:	20000068 	.word	0x20000068

08003da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003da4:	f7ff fff0 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003da8:	4602      	mov	r2, r0
 8003daa:	4b05      	ldr	r3, [pc, #20]	@ (8003dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003dac:	689b      	ldr	r3, [r3, #8]
 8003dae:	0a9b      	lsrs	r3, r3, #10
 8003db0:	f003 0307 	and.w	r3, r3, #7
 8003db4:	4903      	ldr	r1, [pc, #12]	@ (8003dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003db6:	5ccb      	ldrb	r3, [r1, r3]
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	40023800 	.word	0x40023800
 8003dc4:	0800f0a0 	.word	0x0800f0a0

08003dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003dcc:	f7ff ffdc 	bl	8003d88 <HAL_RCC_GetHCLKFreq>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	4b05      	ldr	r3, [pc, #20]	@ (8003de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003dd4:	689b      	ldr	r3, [r3, #8]
 8003dd6:	0b5b      	lsrs	r3, r3, #13
 8003dd8:	f003 0307 	and.w	r3, r3, #7
 8003ddc:	4903      	ldr	r1, [pc, #12]	@ (8003dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8003dde:	5ccb      	ldrb	r3, [r1, r3]
 8003de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003de4:	4618      	mov	r0, r3
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	40023800 	.word	0x40023800
 8003dec:	0800f0a0 	.word	0x0800f0a0

08003df0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b082      	sub	sp, #8
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d101      	bne.n	8003e02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dfe:	2301      	movs	r3, #1
 8003e00:	e042      	b.n	8003e88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fc fe66 	bl	8000ae8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2224      	movs	r2, #36	@ 0x24
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68da      	ldr	r2, [r3, #12]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f973 	bl	8004120 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	691a      	ldr	r2, [r3, #16]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	695a      	ldr	r2, [r3, #20]
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68da      	ldr	r2, [r3, #12]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2200      	movs	r2, #0
 8003e84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e86:	2300      	movs	r3, #0
}
 8003e88:	4618      	mov	r0, r3
 8003e8a:	3708      	adds	r7, #8
 8003e8c:	46bd      	mov	sp, r7
 8003e8e:	bd80      	pop	{r7, pc}

08003e90 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b08a      	sub	sp, #40	@ 0x28
 8003e94:	af02      	add	r7, sp, #8
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	603b      	str	r3, [r7, #0]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b20      	cmp	r3, #32
 8003eae:	d175      	bne.n	8003f9c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d002      	beq.n	8003ebc <HAL_UART_Transmit+0x2c>
 8003eb6:	88fb      	ldrh	r3, [r7, #6]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d101      	bne.n	8003ec0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e06e      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2221      	movs	r2, #33	@ 0x21
 8003eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ece:	f7fc fee3 	bl	8000c98 <HAL_GetTick>
 8003ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	88fa      	ldrh	r2, [r7, #6]
 8003ed8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ee8:	d108      	bne.n	8003efc <HAL_UART_Transmit+0x6c>
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	691b      	ldr	r3, [r3, #16]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d104      	bne.n	8003efc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	61bb      	str	r3, [r7, #24]
 8003efa:	e003      	b.n	8003f04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f00:	2300      	movs	r3, #0
 8003f02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f04:	e02e      	b.n	8003f64 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f06:	683b      	ldr	r3, [r7, #0]
 8003f08:	9300      	str	r3, [sp, #0]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	2180      	movs	r1, #128	@ 0x80
 8003f10:	68f8      	ldr	r0, [r7, #12]
 8003f12:	f000 f848 	bl	8003fa6 <UART_WaitOnFlagUntilTimeout>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d005      	beq.n	8003f28 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2220      	movs	r2, #32
 8003f20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003f24:	2303      	movs	r3, #3
 8003f26:	e03a      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d10b      	bne.n	8003f46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	461a      	mov	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f3c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	3302      	adds	r3, #2
 8003f42:	61bb      	str	r3, [r7, #24]
 8003f44:	e007      	b.n	8003f56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f46:	69fb      	ldr	r3, [r7, #28]
 8003f48:	781a      	ldrb	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	3301      	adds	r3, #1
 8003f54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f5a:	b29b      	uxth	r3, r3
 8003f5c:	3b01      	subs	r3, #1
 8003f5e:	b29a      	uxth	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1cb      	bne.n	8003f06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	9300      	str	r3, [sp, #0]
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2200      	movs	r2, #0
 8003f76:	2140      	movs	r1, #64	@ 0x40
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f814 	bl	8003fa6 <UART_WaitOnFlagUntilTimeout>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d005      	beq.n	8003f90 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	2220      	movs	r2, #32
 8003f88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e006      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2220      	movs	r2, #32
 8003f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	e000      	b.n	8003f9e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003f9c:	2302      	movs	r3, #2
  }
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3720      	adds	r7, #32
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}

08003fa6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fa6:	b580      	push	{r7, lr}
 8003fa8:	b086      	sub	sp, #24
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	603b      	str	r3, [r7, #0]
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb6:	e03b      	b.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fb8:	6a3b      	ldr	r3, [r7, #32]
 8003fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbe:	d037      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc0:	f7fc fe6a 	bl	8000c98 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	6a3a      	ldr	r2, [r7, #32]
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d302      	bcc.n	8003fd6 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd0:	6a3b      	ldr	r3, [r7, #32]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fd6:	2303      	movs	r3, #3
 8003fd8:	e03a      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68db      	ldr	r3, [r3, #12]
 8003fe0:	f003 0304 	and.w	r3, r3, #4
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d023      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	2b80      	cmp	r3, #128	@ 0x80
 8003fec:	d020      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003fee:	68bb      	ldr	r3, [r7, #8]
 8003ff0:	2b40      	cmp	r3, #64	@ 0x40
 8003ff2:	d01d      	beq.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f003 0308 	and.w	r3, r3, #8
 8003ffe:	2b08      	cmp	r3, #8
 8004000:	d116      	bne.n	8004030 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	617b      	str	r3, [r7, #20]
 8004016:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f81d 	bl	8004058 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2208      	movs	r2, #8
 8004022:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e00f      	b.n	8004050 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	681a      	ldr	r2, [r3, #0]
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	4013      	ands	r3, r2
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	429a      	cmp	r2, r3
 800403e:	bf0c      	ite	eq
 8004040:	2301      	moveq	r3, #1
 8004042:	2300      	movne	r3, #0
 8004044:	b2db      	uxtb	r3, r3
 8004046:	461a      	mov	r2, r3
 8004048:	79fb      	ldrb	r3, [r7, #7]
 800404a:	429a      	cmp	r2, r3
 800404c:	d0b4      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800404e:	2300      	movs	r3, #0
}
 8004050:	4618      	mov	r0, r3
 8004052:	3718      	adds	r7, #24
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004058:	b480      	push	{r7}
 800405a:	b095      	sub	sp, #84	@ 0x54
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	330c      	adds	r3, #12
 8004066:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004068:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800406a:	e853 3f00 	ldrex	r3, [r3]
 800406e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004070:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004072:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004076:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004080:	643a      	str	r2, [r7, #64]	@ 0x40
 8004082:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004084:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004086:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004088:	e841 2300 	strex	r3, r2, [r1]
 800408c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800408e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004090:	2b00      	cmp	r3, #0
 8004092:	d1e5      	bne.n	8004060 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3314      	adds	r3, #20
 800409a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800409c:	6a3b      	ldr	r3, [r7, #32]
 800409e:	e853 3f00 	ldrex	r3, [r3]
 80040a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	f023 0301 	bic.w	r3, r3, #1
 80040aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	3314      	adds	r3, #20
 80040b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80040b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80040ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80040bc:	e841 2300 	strex	r3, r2, [r1]
 80040c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80040c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d1e5      	bne.n	8004094 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d119      	bne.n	8004104 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	e853 3f00 	ldrex	r3, [r3]
 80040de:	60bb      	str	r3, [r7, #8]
   return(result);
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	f023 0310 	bic.w	r3, r3, #16
 80040e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	330c      	adds	r3, #12
 80040ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040f0:	61ba      	str	r2, [r7, #24]
 80040f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040f4:	6979      	ldr	r1, [r7, #20]
 80040f6:	69ba      	ldr	r2, [r7, #24]
 80040f8:	e841 2300 	strex	r3, r2, [r1]
 80040fc:	613b      	str	r3, [r7, #16]
   return(result);
 80040fe:	693b      	ldr	r3, [r7, #16]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1e5      	bne.n	80040d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004112:	bf00      	nop
 8004114:	3754      	adds	r7, #84	@ 0x54
 8004116:	46bd      	mov	sp, r7
 8004118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411c:	4770      	bx	lr
	...

08004120 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004120:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004124:	b0c0      	sub	sp, #256	@ 0x100
 8004126:	af00      	add	r7, sp, #0
 8004128:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	691b      	ldr	r3, [r3, #16]
 8004134:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800413c:	68d9      	ldr	r1, [r3, #12]
 800413e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	ea40 0301 	orr.w	r3, r0, r1
 8004148:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800414a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800414e:	689a      	ldr	r2, [r3, #8]
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	431a      	orrs	r2, r3
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	431a      	orrs	r2, r3
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004164:	69db      	ldr	r3, [r3, #28]
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800416c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	68db      	ldr	r3, [r3, #12]
 8004174:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004178:	f021 010c 	bic.w	r1, r1, #12
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004186:	430b      	orrs	r3, r1
 8004188:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800418a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800419a:	6999      	ldr	r1, [r3, #24]
 800419c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	ea40 0301 	orr.w	r3, r0, r1
 80041a6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	4b8f      	ldr	r3, [pc, #572]	@ (80043ec <UART_SetConfig+0x2cc>)
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d005      	beq.n	80041c0 <UART_SetConfig+0xa0>
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	4b8d      	ldr	r3, [pc, #564]	@ (80043f0 <UART_SetConfig+0x2d0>)
 80041bc:	429a      	cmp	r2, r3
 80041be:	d104      	bne.n	80041ca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041c0:	f7ff fe02 	bl	8003dc8 <HAL_RCC_GetPCLK2Freq>
 80041c4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80041c8:	e003      	b.n	80041d2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041ca:	f7ff fde9 	bl	8003da0 <HAL_RCC_GetPCLK1Freq>
 80041ce:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041d6:	69db      	ldr	r3, [r3, #28]
 80041d8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041dc:	f040 810c 	bne.w	80043f8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041e4:	2200      	movs	r2, #0
 80041e6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80041ea:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80041ee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80041f2:	4622      	mov	r2, r4
 80041f4:	462b      	mov	r3, r5
 80041f6:	1891      	adds	r1, r2, r2
 80041f8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80041fa:	415b      	adcs	r3, r3
 80041fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80041fe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004202:	4621      	mov	r1, r4
 8004204:	eb12 0801 	adds.w	r8, r2, r1
 8004208:	4629      	mov	r1, r5
 800420a:	eb43 0901 	adc.w	r9, r3, r1
 800420e:	f04f 0200 	mov.w	r2, #0
 8004212:	f04f 0300 	mov.w	r3, #0
 8004216:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800421a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800421e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004222:	4690      	mov	r8, r2
 8004224:	4699      	mov	r9, r3
 8004226:	4623      	mov	r3, r4
 8004228:	eb18 0303 	adds.w	r3, r8, r3
 800422c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004230:	462b      	mov	r3, r5
 8004232:	eb49 0303 	adc.w	r3, r9, r3
 8004236:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800423a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004246:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800424a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800424e:	460b      	mov	r3, r1
 8004250:	18db      	adds	r3, r3, r3
 8004252:	653b      	str	r3, [r7, #80]	@ 0x50
 8004254:	4613      	mov	r3, r2
 8004256:	eb42 0303 	adc.w	r3, r2, r3
 800425a:	657b      	str	r3, [r7, #84]	@ 0x54
 800425c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004260:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004264:	f7fc f81c 	bl	80002a0 <__aeabi_uldivmod>
 8004268:	4602      	mov	r2, r0
 800426a:	460b      	mov	r3, r1
 800426c:	4b61      	ldr	r3, [pc, #388]	@ (80043f4 <UART_SetConfig+0x2d4>)
 800426e:	fba3 2302 	umull	r2, r3, r3, r2
 8004272:	095b      	lsrs	r3, r3, #5
 8004274:	011c      	lsls	r4, r3, #4
 8004276:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800427a:	2200      	movs	r2, #0
 800427c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004280:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004284:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004288:	4642      	mov	r2, r8
 800428a:	464b      	mov	r3, r9
 800428c:	1891      	adds	r1, r2, r2
 800428e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004290:	415b      	adcs	r3, r3
 8004292:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004294:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004298:	4641      	mov	r1, r8
 800429a:	eb12 0a01 	adds.w	sl, r2, r1
 800429e:	4649      	mov	r1, r9
 80042a0:	eb43 0b01 	adc.w	fp, r3, r1
 80042a4:	f04f 0200 	mov.w	r2, #0
 80042a8:	f04f 0300 	mov.w	r3, #0
 80042ac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042b0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042b8:	4692      	mov	sl, r2
 80042ba:	469b      	mov	fp, r3
 80042bc:	4643      	mov	r3, r8
 80042be:	eb1a 0303 	adds.w	r3, sl, r3
 80042c2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042c6:	464b      	mov	r3, r9
 80042c8:	eb4b 0303 	adc.w	r3, fp, r3
 80042cc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80042d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	2200      	movs	r2, #0
 80042d8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80042dc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80042e0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80042e4:	460b      	mov	r3, r1
 80042e6:	18db      	adds	r3, r3, r3
 80042e8:	643b      	str	r3, [r7, #64]	@ 0x40
 80042ea:	4613      	mov	r3, r2
 80042ec:	eb42 0303 	adc.w	r3, r2, r3
 80042f0:	647b      	str	r3, [r7, #68]	@ 0x44
 80042f2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80042f6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80042fa:	f7fb ffd1 	bl	80002a0 <__aeabi_uldivmod>
 80042fe:	4602      	mov	r2, r0
 8004300:	460b      	mov	r3, r1
 8004302:	4611      	mov	r1, r2
 8004304:	4b3b      	ldr	r3, [pc, #236]	@ (80043f4 <UART_SetConfig+0x2d4>)
 8004306:	fba3 2301 	umull	r2, r3, r3, r1
 800430a:	095b      	lsrs	r3, r3, #5
 800430c:	2264      	movs	r2, #100	@ 0x64
 800430e:	fb02 f303 	mul.w	r3, r2, r3
 8004312:	1acb      	subs	r3, r1, r3
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800431a:	4b36      	ldr	r3, [pc, #216]	@ (80043f4 <UART_SetConfig+0x2d4>)
 800431c:	fba3 2302 	umull	r2, r3, r3, r2
 8004320:	095b      	lsrs	r3, r3, #5
 8004322:	005b      	lsls	r3, r3, #1
 8004324:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004328:	441c      	add	r4, r3
 800432a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800432e:	2200      	movs	r2, #0
 8004330:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004334:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004338:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800433c:	4642      	mov	r2, r8
 800433e:	464b      	mov	r3, r9
 8004340:	1891      	adds	r1, r2, r2
 8004342:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004344:	415b      	adcs	r3, r3
 8004346:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004348:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800434c:	4641      	mov	r1, r8
 800434e:	1851      	adds	r1, r2, r1
 8004350:	6339      	str	r1, [r7, #48]	@ 0x30
 8004352:	4649      	mov	r1, r9
 8004354:	414b      	adcs	r3, r1
 8004356:	637b      	str	r3, [r7, #52]	@ 0x34
 8004358:	f04f 0200 	mov.w	r2, #0
 800435c:	f04f 0300 	mov.w	r3, #0
 8004360:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004364:	4659      	mov	r1, fp
 8004366:	00cb      	lsls	r3, r1, #3
 8004368:	4651      	mov	r1, sl
 800436a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800436e:	4651      	mov	r1, sl
 8004370:	00ca      	lsls	r2, r1, #3
 8004372:	4610      	mov	r0, r2
 8004374:	4619      	mov	r1, r3
 8004376:	4603      	mov	r3, r0
 8004378:	4642      	mov	r2, r8
 800437a:	189b      	adds	r3, r3, r2
 800437c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004380:	464b      	mov	r3, r9
 8004382:	460a      	mov	r2, r1
 8004384:	eb42 0303 	adc.w	r3, r2, r3
 8004388:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	685b      	ldr	r3, [r3, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004398:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800439c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80043a0:	460b      	mov	r3, r1
 80043a2:	18db      	adds	r3, r3, r3
 80043a4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80043a6:	4613      	mov	r3, r2
 80043a8:	eb42 0303 	adc.w	r3, r2, r3
 80043ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80043ae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80043b2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80043b6:	f7fb ff73 	bl	80002a0 <__aeabi_uldivmod>
 80043ba:	4602      	mov	r2, r0
 80043bc:	460b      	mov	r3, r1
 80043be:	4b0d      	ldr	r3, [pc, #52]	@ (80043f4 <UART_SetConfig+0x2d4>)
 80043c0:	fba3 1302 	umull	r1, r3, r3, r2
 80043c4:	095b      	lsrs	r3, r3, #5
 80043c6:	2164      	movs	r1, #100	@ 0x64
 80043c8:	fb01 f303 	mul.w	r3, r1, r3
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	00db      	lsls	r3, r3, #3
 80043d0:	3332      	adds	r3, #50	@ 0x32
 80043d2:	4a08      	ldr	r2, [pc, #32]	@ (80043f4 <UART_SetConfig+0x2d4>)
 80043d4:	fba2 2303 	umull	r2, r3, r2, r3
 80043d8:	095b      	lsrs	r3, r3, #5
 80043da:	f003 0207 	and.w	r2, r3, #7
 80043de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4422      	add	r2, r4
 80043e6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80043e8:	e106      	b.n	80045f8 <UART_SetConfig+0x4d8>
 80043ea:	bf00      	nop
 80043ec:	40011000 	.word	0x40011000
 80043f0:	40011400 	.word	0x40011400
 80043f4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80043f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043fc:	2200      	movs	r2, #0
 80043fe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004402:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004406:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800440a:	4642      	mov	r2, r8
 800440c:	464b      	mov	r3, r9
 800440e:	1891      	adds	r1, r2, r2
 8004410:	6239      	str	r1, [r7, #32]
 8004412:	415b      	adcs	r3, r3
 8004414:	627b      	str	r3, [r7, #36]	@ 0x24
 8004416:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800441a:	4641      	mov	r1, r8
 800441c:	1854      	adds	r4, r2, r1
 800441e:	4649      	mov	r1, r9
 8004420:	eb43 0501 	adc.w	r5, r3, r1
 8004424:	f04f 0200 	mov.w	r2, #0
 8004428:	f04f 0300 	mov.w	r3, #0
 800442c:	00eb      	lsls	r3, r5, #3
 800442e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004432:	00e2      	lsls	r2, r4, #3
 8004434:	4614      	mov	r4, r2
 8004436:	461d      	mov	r5, r3
 8004438:	4643      	mov	r3, r8
 800443a:	18e3      	adds	r3, r4, r3
 800443c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004440:	464b      	mov	r3, r9
 8004442:	eb45 0303 	adc.w	r3, r5, r3
 8004446:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800444a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	2200      	movs	r2, #0
 8004452:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004456:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800445a:	f04f 0200 	mov.w	r2, #0
 800445e:	f04f 0300 	mov.w	r3, #0
 8004462:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004466:	4629      	mov	r1, r5
 8004468:	008b      	lsls	r3, r1, #2
 800446a:	4621      	mov	r1, r4
 800446c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004470:	4621      	mov	r1, r4
 8004472:	008a      	lsls	r2, r1, #2
 8004474:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004478:	f7fb ff12 	bl	80002a0 <__aeabi_uldivmod>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4b60      	ldr	r3, [pc, #384]	@ (8004604 <UART_SetConfig+0x4e4>)
 8004482:	fba3 2302 	umull	r2, r3, r3, r2
 8004486:	095b      	lsrs	r3, r3, #5
 8004488:	011c      	lsls	r4, r3, #4
 800448a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800448e:	2200      	movs	r2, #0
 8004490:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004494:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004498:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800449c:	4642      	mov	r2, r8
 800449e:	464b      	mov	r3, r9
 80044a0:	1891      	adds	r1, r2, r2
 80044a2:	61b9      	str	r1, [r7, #24]
 80044a4:	415b      	adcs	r3, r3
 80044a6:	61fb      	str	r3, [r7, #28]
 80044a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044ac:	4641      	mov	r1, r8
 80044ae:	1851      	adds	r1, r2, r1
 80044b0:	6139      	str	r1, [r7, #16]
 80044b2:	4649      	mov	r1, r9
 80044b4:	414b      	adcs	r3, r1
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	f04f 0200 	mov.w	r2, #0
 80044bc:	f04f 0300 	mov.w	r3, #0
 80044c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044c4:	4659      	mov	r1, fp
 80044c6:	00cb      	lsls	r3, r1, #3
 80044c8:	4651      	mov	r1, sl
 80044ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044ce:	4651      	mov	r1, sl
 80044d0:	00ca      	lsls	r2, r1, #3
 80044d2:	4610      	mov	r0, r2
 80044d4:	4619      	mov	r1, r3
 80044d6:	4603      	mov	r3, r0
 80044d8:	4642      	mov	r2, r8
 80044da:	189b      	adds	r3, r3, r2
 80044dc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80044e0:	464b      	mov	r3, r9
 80044e2:	460a      	mov	r2, r1
 80044e4:	eb42 0303 	adc.w	r3, r2, r3
 80044e8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80044ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80044f6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80044f8:	f04f 0200 	mov.w	r2, #0
 80044fc:	f04f 0300 	mov.w	r3, #0
 8004500:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004504:	4649      	mov	r1, r9
 8004506:	008b      	lsls	r3, r1, #2
 8004508:	4641      	mov	r1, r8
 800450a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800450e:	4641      	mov	r1, r8
 8004510:	008a      	lsls	r2, r1, #2
 8004512:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004516:	f7fb fec3 	bl	80002a0 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4611      	mov	r1, r2
 8004520:	4b38      	ldr	r3, [pc, #224]	@ (8004604 <UART_SetConfig+0x4e4>)
 8004522:	fba3 2301 	umull	r2, r3, r3, r1
 8004526:	095b      	lsrs	r3, r3, #5
 8004528:	2264      	movs	r2, #100	@ 0x64
 800452a:	fb02 f303 	mul.w	r3, r2, r3
 800452e:	1acb      	subs	r3, r1, r3
 8004530:	011b      	lsls	r3, r3, #4
 8004532:	3332      	adds	r3, #50	@ 0x32
 8004534:	4a33      	ldr	r2, [pc, #204]	@ (8004604 <UART_SetConfig+0x4e4>)
 8004536:	fba2 2303 	umull	r2, r3, r2, r3
 800453a:	095b      	lsrs	r3, r3, #5
 800453c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004540:	441c      	add	r4, r3
 8004542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004546:	2200      	movs	r2, #0
 8004548:	673b      	str	r3, [r7, #112]	@ 0x70
 800454a:	677a      	str	r2, [r7, #116]	@ 0x74
 800454c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004550:	4642      	mov	r2, r8
 8004552:	464b      	mov	r3, r9
 8004554:	1891      	adds	r1, r2, r2
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	415b      	adcs	r3, r3
 800455a:	60fb      	str	r3, [r7, #12]
 800455c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004560:	4641      	mov	r1, r8
 8004562:	1851      	adds	r1, r2, r1
 8004564:	6039      	str	r1, [r7, #0]
 8004566:	4649      	mov	r1, r9
 8004568:	414b      	adcs	r3, r1
 800456a:	607b      	str	r3, [r7, #4]
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004578:	4659      	mov	r1, fp
 800457a:	00cb      	lsls	r3, r1, #3
 800457c:	4651      	mov	r1, sl
 800457e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004582:	4651      	mov	r1, sl
 8004584:	00ca      	lsls	r2, r1, #3
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	4603      	mov	r3, r0
 800458c:	4642      	mov	r2, r8
 800458e:	189b      	adds	r3, r3, r2
 8004590:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004592:	464b      	mov	r3, r9
 8004594:	460a      	mov	r2, r1
 8004596:	eb42 0303 	adc.w	r3, r2, r3
 800459a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800459c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	663b      	str	r3, [r7, #96]	@ 0x60
 80045a6:	667a      	str	r2, [r7, #100]	@ 0x64
 80045a8:	f04f 0200 	mov.w	r2, #0
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80045b4:	4649      	mov	r1, r9
 80045b6:	008b      	lsls	r3, r1, #2
 80045b8:	4641      	mov	r1, r8
 80045ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045be:	4641      	mov	r1, r8
 80045c0:	008a      	lsls	r2, r1, #2
 80045c2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80045c6:	f7fb fe6b 	bl	80002a0 <__aeabi_uldivmod>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4b0d      	ldr	r3, [pc, #52]	@ (8004604 <UART_SetConfig+0x4e4>)
 80045d0:	fba3 1302 	umull	r1, r3, r3, r2
 80045d4:	095b      	lsrs	r3, r3, #5
 80045d6:	2164      	movs	r1, #100	@ 0x64
 80045d8:	fb01 f303 	mul.w	r3, r1, r3
 80045dc:	1ad3      	subs	r3, r2, r3
 80045de:	011b      	lsls	r3, r3, #4
 80045e0:	3332      	adds	r3, #50	@ 0x32
 80045e2:	4a08      	ldr	r2, [pc, #32]	@ (8004604 <UART_SetConfig+0x4e4>)
 80045e4:	fba2 2303 	umull	r2, r3, r2, r3
 80045e8:	095b      	lsrs	r3, r3, #5
 80045ea:	f003 020f 	and.w	r2, r3, #15
 80045ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4422      	add	r2, r4
 80045f6:	609a      	str	r2, [r3, #8]
}
 80045f8:	bf00      	nop
 80045fa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80045fe:	46bd      	mov	sp, r7
 8004600:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004604:	51eb851f 	.word	0x51eb851f

08004608 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004608:	b084      	sub	sp, #16
 800460a:	b580      	push	{r7, lr}
 800460c:	b084      	sub	sp, #16
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
 8004612:	f107 001c 	add.w	r0, r7, #28
 8004616:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800461a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800461e:	2b01      	cmp	r3, #1
 8004620:	d123      	bne.n	800466a <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004626:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	68db      	ldr	r3, [r3, #12]
 8004632:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004636:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800464a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800464e:	2b01      	cmp	r3, #1
 8004650:	d105      	bne.n	800465e <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f9dc 	bl	8004a1c <USB_CoreReset>
 8004664:	4603      	mov	r3, r0
 8004666:	73fb      	strb	r3, [r7, #15]
 8004668:	e01b      	b.n	80046a2 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f000 f9d0 	bl	8004a1c <USB_CoreReset>
 800467c:	4603      	mov	r3, r0
 800467e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004680:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004684:	2b00      	cmp	r3, #0
 8004686:	d106      	bne.n	8004696 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800468c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	639a      	str	r2, [r3, #56]	@ 0x38
 8004694:	e005      	b.n	80046a2 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800469a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80046a2:	7fbb      	ldrb	r3, [r7, #30]
 80046a4:	2b01      	cmp	r3, #1
 80046a6:	d10b      	bne.n	80046c0 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689b      	ldr	r3, [r3, #8]
 80046ac:	f043 0206 	orr.w	r2, r3, #6
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f043 0220 	orr.w	r2, r3, #32
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80046c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3710      	adds	r7, #16
 80046c6:	46bd      	mov	sp, r7
 80046c8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046cc:	b004      	add	sp, #16
 80046ce:	4770      	bx	lr

080046d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b083      	sub	sp, #12
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	689b      	ldr	r3, [r3, #8]
 80046dc:	f043 0201 	orr.w	r2, r3, #1
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046e4:	2300      	movs	r3, #0
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	370c      	adds	r7, #12
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr

080046f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046f2:	b480      	push	{r7}
 80046f4:	b083      	sub	sp, #12
 80046f6:	af00      	add	r7, sp, #0
 80046f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	f023 0201 	bic.w	r2, r3, #1
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr

08004714 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	68db      	ldr	r3, [r3, #12]
 8004728:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004730:	78fb      	ldrb	r3, [r7, #3]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d115      	bne.n	8004762 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004742:	200a      	movs	r0, #10
 8004744:	f7fc fab4 	bl	8000cb0 <HAL_Delay>
      ms += 10U;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	330a      	adds	r3, #10
 800474c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f956 	bl	8004a00 <USB_GetMode>
 8004754:	4603      	mov	r3, r0
 8004756:	2b01      	cmp	r3, #1
 8004758:	d01e      	beq.n	8004798 <USB_SetCurrentMode+0x84>
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	2bc7      	cmp	r3, #199	@ 0xc7
 800475e:	d9f0      	bls.n	8004742 <USB_SetCurrentMode+0x2e>
 8004760:	e01a      	b.n	8004798 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004762:	78fb      	ldrb	r3, [r7, #3]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d115      	bne.n	8004794 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	68db      	ldr	r3, [r3, #12]
 800476c:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8004774:	200a      	movs	r0, #10
 8004776:	f7fc fa9b 	bl	8000cb0 <HAL_Delay>
      ms += 10U;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	330a      	adds	r3, #10
 800477e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f93d 	bl	8004a00 <USB_GetMode>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d005      	beq.n	8004798 <USB_SetCurrentMode+0x84>
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2bc7      	cmp	r3, #199	@ 0xc7
 8004790:	d9f0      	bls.n	8004774 <USB_SetCurrentMode+0x60>
 8004792:	e001      	b.n	8004798 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	e005      	b.n	80047a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2bc8      	cmp	r3, #200	@ 0xc8
 800479c:	d101      	bne.n	80047a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e000      	b.n	80047a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}

080047ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
 80047b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047b6:	2300      	movs	r3, #0
 80047b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	3301      	adds	r3, #1
 80047be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047c6:	d901      	bls.n	80047cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e01b      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	daf2      	bge.n	80047ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	019b      	lsls	r3, r3, #6
 80047dc:	f043 0220 	orr.w	r2, r3, #32
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	3301      	adds	r3, #1
 80047e8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80047f0:	d901      	bls.n	80047f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80047f2:	2303      	movs	r3, #3
 80047f4:	e006      	b.n	8004804 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b20      	cmp	r3, #32
 8004800:	d0f0      	beq.n	80047e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004802:	2300      	movs	r3, #0
}
 8004804:	4618      	mov	r0, r3
 8004806:	3714      	adds	r7, #20
 8004808:	46bd      	mov	sp, r7
 800480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480e:	4770      	bx	lr

08004810 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004810:	b480      	push	{r7}
 8004812:	b085      	sub	sp, #20
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004818:	2300      	movs	r3, #0
 800481a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	3301      	adds	r3, #1
 8004820:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004828:	d901      	bls.n	800482e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800482a:	2303      	movs	r3, #3
 800482c:	e018      	b.n	8004860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	daf2      	bge.n	800481c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004836:	2300      	movs	r3, #0
 8004838:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2210      	movs	r2, #16
 800483e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	3301      	adds	r3, #1
 8004844:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800484c:	d901      	bls.n	8004852 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800484e:	2303      	movs	r3, #3
 8004850:	e006      	b.n	8004860 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0310 	and.w	r3, r3, #16
 800485a:	2b10      	cmp	r3, #16
 800485c:	d0f0      	beq.n	8004840 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	3714      	adds	r7, #20
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800486c:	b480      	push	{r7}
 800486e:	b089      	sub	sp, #36	@ 0x24
 8004870:	af00      	add	r7, sp, #0
 8004872:	60f8      	str	r0, [r7, #12]
 8004874:	60b9      	str	r1, [r7, #8]
 8004876:	4611      	mov	r1, r2
 8004878:	461a      	mov	r2, r3
 800487a:	460b      	mov	r3, r1
 800487c:	71fb      	strb	r3, [r7, #7]
 800487e:	4613      	mov	r3, r2
 8004880:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004886:	68bb      	ldr	r3, [r7, #8]
 8004888:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800488a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800488e:	2b00      	cmp	r3, #0
 8004890:	d123      	bne.n	80048da <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004892:	88bb      	ldrh	r3, [r7, #4]
 8004894:	3303      	adds	r3, #3
 8004896:	089b      	lsrs	r3, r3, #2
 8004898:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800489a:	2300      	movs	r3, #0
 800489c:	61bb      	str	r3, [r7, #24]
 800489e:	e018      	b.n	80048d2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80048a0:	79fb      	ldrb	r3, [r7, #7]
 80048a2:	031a      	lsls	r2, r3, #12
 80048a4:	697b      	ldr	r3, [r7, #20]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80048ac:	461a      	mov	r2, r3
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	3301      	adds	r3, #1
 80048b8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048ba:	69fb      	ldr	r3, [r7, #28]
 80048bc:	3301      	adds	r3, #1
 80048be:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	3301      	adds	r3, #1
 80048c4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80048c6:	69fb      	ldr	r3, [r7, #28]
 80048c8:	3301      	adds	r3, #1
 80048ca:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80048cc:	69bb      	ldr	r3, [r7, #24]
 80048ce:	3301      	adds	r3, #1
 80048d0:	61bb      	str	r3, [r7, #24]
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	429a      	cmp	r2, r3
 80048d8:	d3e2      	bcc.n	80048a0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80048da:	2300      	movs	r3, #0
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3724      	adds	r7, #36	@ 0x24
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b08b      	sub	sp, #44	@ 0x2c
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	60f8      	str	r0, [r7, #12]
 80048f0:	60b9      	str	r1, [r7, #8]
 80048f2:	4613      	mov	r3, r2
 80048f4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80048fe:	88fb      	ldrh	r3, [r7, #6]
 8004900:	089b      	lsrs	r3, r3, #2
 8004902:	b29b      	uxth	r3, r3
 8004904:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004906:	88fb      	ldrh	r3, [r7, #6]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	623b      	str	r3, [r7, #32]
 8004912:	e014      	b.n	800493e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004914:	69bb      	ldr	r3, [r7, #24]
 8004916:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800491a:	681a      	ldr	r2, [r3, #0]
 800491c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800491e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004920:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004922:	3301      	adds	r3, #1
 8004924:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004928:	3301      	adds	r3, #1
 800492a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800492c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492e:	3301      	adds	r3, #1
 8004930:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004934:	3301      	adds	r3, #1
 8004936:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004938:	6a3b      	ldr	r3, [r7, #32]
 800493a:	3301      	adds	r3, #1
 800493c:	623b      	str	r3, [r7, #32]
 800493e:	6a3a      	ldr	r2, [r7, #32]
 8004940:	697b      	ldr	r3, [r7, #20]
 8004942:	429a      	cmp	r2, r3
 8004944:	d3e6      	bcc.n	8004914 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004946:	8bfb      	ldrh	r3, [r7, #30]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d01e      	beq.n	800498a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004956:	461a      	mov	r2, r3
 8004958:	f107 0310 	add.w	r3, r7, #16
 800495c:	6812      	ldr	r2, [r2, #0]
 800495e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004960:	693a      	ldr	r2, [r7, #16]
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	b2db      	uxtb	r3, r3
 8004966:	00db      	lsls	r3, r3, #3
 8004968:	fa22 f303 	lsr.w	r3, r2, r3
 800496c:	b2da      	uxtb	r2, r3
 800496e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004970:	701a      	strb	r2, [r3, #0]
      i++;
 8004972:	6a3b      	ldr	r3, [r7, #32]
 8004974:	3301      	adds	r3, #1
 8004976:	623b      	str	r3, [r7, #32]
      pDest++;
 8004978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800497a:	3301      	adds	r3, #1
 800497c:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800497e:	8bfb      	ldrh	r3, [r7, #30]
 8004980:	3b01      	subs	r3, #1
 8004982:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004984:	8bfb      	ldrh	r3, [r7, #30]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d1ea      	bne.n	8004960 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800498a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800498c:	4618      	mov	r0, r3
 800498e:	372c      	adds	r7, #44	@ 0x2c
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8004998:	b480      	push	{r7}
 800499a:	b085      	sub	sp, #20
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	695b      	ldr	r3, [r3, #20]
 80049a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	68fa      	ldr	r2, [r7, #12]
 80049ac:	4013      	ands	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80049b0:	68fb      	ldr	r3, [r7, #12]
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr

080049be <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80049be:	b480      	push	{r7}
 80049c0:	b085      	sub	sp, #20
 80049c2:	af00      	add	r7, sp, #0
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	460b      	mov	r3, r1
 80049c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80049ce:	78fb      	ldrb	r3, [r7, #3]
 80049d0:	015a      	lsls	r2, r3, #5
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	4413      	add	r3, r2
 80049d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049da:	689b      	ldr	r3, [r3, #8]
 80049dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80049de:	78fb      	ldrb	r3, [r7, #3]
 80049e0:	015a      	lsls	r2, r3, #5
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	4413      	add	r3, r2
 80049e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	68ba      	ldr	r2, [r7, #8]
 80049ee:	4013      	ands	r3, r2
 80049f0:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80049f2:	68bb      	ldr	r3, [r7, #8]
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3714      	adds	r7, #20
 80049f8:	46bd      	mov	sp, r7
 80049fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fe:	4770      	bx	lr

08004a00 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004a00:	b480      	push	{r7}
 8004a02:	b083      	sub	sp, #12
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	695b      	ldr	r3, [r3, #20]
 8004a0c:	f003 0301 	and.w	r3, r3, #1
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	370c      	adds	r7, #12
 8004a14:	46bd      	mov	sp, r7
 8004a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1a:	4770      	bx	lr

08004a1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004a1c:	b480      	push	{r7}
 8004a1e:	b085      	sub	sp, #20
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004a24:	2300      	movs	r3, #0
 8004a26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a34:	d901      	bls.n	8004a3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004a36:	2303      	movs	r3, #3
 8004a38:	e01b      	b.n	8004a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	daf2      	bge.n	8004a28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	f043 0201 	orr.w	r2, r3, #1
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3301      	adds	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004a5e:	d901      	bls.n	8004a64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004a60:	2303      	movs	r3, #3
 8004a62:	e006      	b.n	8004a72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	f003 0301 	and.w	r3, r3, #1
 8004a6c:	2b01      	cmp	r3, #1
 8004a6e:	d0f0      	beq.n	8004a52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004a70:	2300      	movs	r3, #0
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3714      	adds	r7, #20
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
	...

08004a80 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a80:	b084      	sub	sp, #16
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b086      	sub	sp, #24
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
 8004a8a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8004a8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004a92:	2300      	movs	r3, #0
 8004a94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004aaa:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ab6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d119      	bne.n	8004b0a <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d10a      	bne.n	8004af4 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	68fa      	ldr	r2, [r7, #12]
 8004ae8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004aec:	f043 0304 	orr.w	r3, r3, #4
 8004af0:	6013      	str	r3, [r2, #0]
 8004af2:	e014      	b.n	8004b1e <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68fa      	ldr	r2, [r7, #12]
 8004afe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b02:	f023 0304 	bic.w	r3, r3, #4
 8004b06:	6013      	str	r3, [r2, #0]
 8004b08:	e009      	b.n	8004b1e <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	68fa      	ldr	r2, [r7, #12]
 8004b14:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004b1e:	2110      	movs	r1, #16
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f7ff fe43 	bl	80047ac <USB_FlushTxFifo>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004b30:	6878      	ldr	r0, [r7, #4]
 8004b32:	f7ff fe6d 	bl	8004810 <USB_FlushRxFifo>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d001      	beq.n	8004b40 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b40:	2300      	movs	r3, #0
 8004b42:	613b      	str	r3, [r7, #16]
 8004b44:	e015      	b.n	8004b72 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b52:	461a      	mov	r2, r3
 8004b54:	f04f 33ff 	mov.w	r3, #4294967295
 8004b58:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	015a      	lsls	r2, r3, #5
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	4413      	add	r3, r2
 8004b62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b66:	461a      	mov	r2, r3
 8004b68:	2300      	movs	r3, #0
 8004b6a:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	3301      	adds	r3, #1
 8004b70:	613b      	str	r3, [r7, #16]
 8004b72:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004b76:	461a      	mov	r2, r3
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d3e3      	bcc.n	8004b46 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f04f 32ff 	mov.w	r2, #4294967295
 8004b8a:	615a      	str	r2, [r3, #20]
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2280      	movs	r2, #128	@ 0x80
 8004b90:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd0 <USB_HostInit+0x150>)
 8004b96:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a0e      	ldr	r2, [pc, #56]	@ (8004bd4 <USB_HostInit+0x154>)
 8004b9c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ba0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d105      	bne.n	8004bb4 <USB_HostInit+0x134>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	699b      	ldr	r3, [r3, #24]
 8004bac:	f043 0210 	orr.w	r2, r3, #16
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699a      	ldr	r2, [r3, #24]
 8004bb8:	4b07      	ldr	r3, [pc, #28]	@ (8004bd8 <USB_HostInit+0x158>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	687a      	ldr	r2, [r7, #4]
 8004bbe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004bc0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bcc:	b004      	add	sp, #16
 8004bce:	4770      	bx	lr
 8004bd0:	00600080 	.word	0x00600080
 8004bd4:	004000e0 	.word	0x004000e0
 8004bd8:	a3200008 	.word	0xa3200008

08004bdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	460b      	mov	r3, r1
 8004be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68fa      	ldr	r2, [r7, #12]
 8004bf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8004bfa:	f023 0303 	bic.w	r3, r3, #3
 8004bfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	f003 0303 	and.w	r3, r3, #3
 8004c0e:	68f9      	ldr	r1, [r7, #12]
 8004c10:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004c14:	4313      	orrs	r3, r2
 8004c16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8004c18:	78fb      	ldrb	r3, [r7, #3]
 8004c1a:	2b01      	cmp	r3, #1
 8004c1c:	d107      	bne.n	8004c2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c24:	461a      	mov	r2, r3
 8004c26:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8004c2a:	6053      	str	r3, [r2, #4]
 8004c2c:	e00c      	b.n	8004c48 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8004c2e:	78fb      	ldrb	r3, [r7, #3]
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004c3a:	461a      	mov	r2, r3
 8004c3c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8004c40:	6053      	str	r3, [r2, #4]
 8004c42:	e001      	b.n	8004c48 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8004c44:	2301      	movs	r3, #1
 8004c46:	e000      	b.n	8004c4a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr

08004c56 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8004c62:	2300      	movs	r3, #0
 8004c64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004c76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	68fa      	ldr	r2, [r7, #12]
 8004c7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c84:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8004c86:	2064      	movs	r0, #100	@ 0x64
 8004c88:	f7fc f812 	bl	8000cb0 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8004c8c:	68bb      	ldr	r3, [r7, #8]
 8004c8e:	68fa      	ldr	r2, [r7, #12]
 8004c90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c98:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8004c9a:	200a      	movs	r0, #10
 8004c9c:	f7fc f808 	bl	8000cb0 <HAL_Delay>

  return HAL_OK;
 8004ca0:	2300      	movs	r3, #0
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3710      	adds	r7, #16
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004cce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d109      	bne.n	8004cee <USB_DriveVbus+0x44>
 8004cda:	78fb      	ldrb	r3, [r7, #3]
 8004cdc:	2b01      	cmp	r3, #1
 8004cde:	d106      	bne.n	8004cee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	68fa      	ldr	r2, [r7, #12]
 8004ce4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004cec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004cee:	68bb      	ldr	r3, [r7, #8]
 8004cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004cf8:	d109      	bne.n	8004d0e <USB_DriveVbus+0x64>
 8004cfa:	78fb      	ldrb	r3, [r7, #3]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d106      	bne.n	8004d0e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004d00:	68bb      	ldr	r3, [r7, #8]
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8004d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004d0c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004d0e:	2300      	movs	r3, #0
}
 8004d10:	4618      	mov	r0, r3
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	0c5b      	lsrs	r3, r3, #17
 8004d3a:	f003 0303 	and.w	r3, r3, #3
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3714      	adds	r7, #20
 8004d42:	46bd      	mov	sp, r7
 8004d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d48:	4770      	bx	lr

08004d4a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8004d4a:	b480      	push	{r7}
 8004d4c:	b085      	sub	sp, #20
 8004d4e:	af00      	add	r7, sp, #0
 8004d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	b29b      	uxth	r3, r3
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3714      	adds	r7, #20
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b088      	sub	sp, #32
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
 8004d74:	4608      	mov	r0, r1
 8004d76:	4611      	mov	r1, r2
 8004d78:	461a      	mov	r2, r3
 8004d7a:	4603      	mov	r3, r0
 8004d7c:	70fb      	strb	r3, [r7, #3]
 8004d7e:	460b      	mov	r3, r1
 8004d80:	70bb      	strb	r3, [r7, #2]
 8004d82:	4613      	mov	r3, r2
 8004d84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8004d86:	2300      	movs	r3, #0
 8004d88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8004d8e:	78fb      	ldrb	r3, [r7, #3]
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8004da0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8004da2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004da6:	2b03      	cmp	r3, #3
 8004da8:	d867      	bhi.n	8004e7a <USB_HC_Init+0x10e>
 8004daa:	a201      	add	r2, pc, #4	@ (adr r2, 8004db0 <USB_HC_Init+0x44>)
 8004dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004db0:	08004dc1 	.word	0x08004dc1
 8004db4:	08004e3d 	.word	0x08004e3d
 8004db8:	08004dc1 	.word	0x08004dc1
 8004dbc:	08004dff 	.word	0x08004dff
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dc0:	78fb      	ldrb	r3, [r7, #3]
 8004dc2:	015a      	lsls	r2, r3, #5
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dcc:	461a      	mov	r2, r3
 8004dce:	f240 439d 	movw	r3, #1181	@ 0x49d
 8004dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8004dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	da51      	bge.n	8004e80 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004ddc:	78fb      	ldrb	r3, [r7, #3]
 8004dde:	015a      	lsls	r2, r3, #5
 8004de0:	693b      	ldr	r3, [r7, #16]
 8004de2:	4413      	add	r3, r2
 8004de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	78fa      	ldrb	r2, [r7, #3]
 8004dec:	0151      	lsls	r1, r2, #5
 8004dee:	693a      	ldr	r2, [r7, #16]
 8004df0:	440a      	add	r2, r1
 8004df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004dfa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8004dfc:	e040      	b.n	8004e80 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004dfe:	78fb      	ldrb	r3, [r7, #3]
 8004e00:	015a      	lsls	r2, r3, #5
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	4413      	add	r3, r2
 8004e06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e0a:	461a      	mov	r2, r3
 8004e0c:	f240 639d 	movw	r3, #1693	@ 0x69d
 8004e10:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e12:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	da34      	bge.n	8004e84 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8004e1a:	78fb      	ldrb	r3, [r7, #3]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e26:	68db      	ldr	r3, [r3, #12]
 8004e28:	78fa      	ldrb	r2, [r7, #3]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	693a      	ldr	r2, [r7, #16]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e38:	60d3      	str	r3, [r2, #12]
      }

      break;
 8004e3a:	e023      	b.n	8004e84 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8004e3c:	78fb      	ldrb	r3, [r7, #3]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e48:	461a      	mov	r2, r3
 8004e4a:	f240 2325 	movw	r3, #549	@ 0x225
 8004e4e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8004e50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	da17      	bge.n	8004e88 <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8004e58:	78fb      	ldrb	r3, [r7, #3]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	693b      	ldr	r3, [r7, #16]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	78fa      	ldrb	r2, [r7, #3]
 8004e68:	0151      	lsls	r1, r2, #5
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	440a      	add	r2, r1
 8004e6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e72:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8004e76:	60d3      	str	r3, [r2, #12]
      }
      break;
 8004e78:	e006      	b.n	8004e88 <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	77fb      	strb	r3, [r7, #31]
      break;
 8004e7e:	e004      	b.n	8004e8a <USB_HC_Init+0x11e>
      break;
 8004e80:	bf00      	nop
 8004e82:	e002      	b.n	8004e8a <USB_HC_Init+0x11e>
      break;
 8004e84:	bf00      	nop
 8004e86:	e000      	b.n	8004e8a <USB_HC_Init+0x11e>
      break;
 8004e88:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8004e8a:	78fb      	ldrb	r3, [r7, #3]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e96:	461a      	mov	r2, r3
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8004e9c:	78fb      	ldrb	r3, [r7, #3]
 8004e9e:	015a      	lsls	r2, r3, #5
 8004ea0:	693b      	ldr	r3, [r7, #16]
 8004ea2:	4413      	add	r3, r2
 8004ea4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	78fa      	ldrb	r2, [r7, #3]
 8004eac:	0151      	lsls	r1, r2, #5
 8004eae:	693a      	ldr	r2, [r7, #16]
 8004eb0:	440a      	add	r2, r1
 8004eb2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004eb6:	f043 0302 	orr.w	r3, r3, #2
 8004eba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004ec2:	699a      	ldr	r2, [r3, #24]
 8004ec4:	78fb      	ldrb	r3, [r7, #3]
 8004ec6:	f003 030f 	and.w	r3, r3, #15
 8004eca:	2101      	movs	r1, #1
 8004ecc:	fa01 f303 	lsl.w	r3, r1, r3
 8004ed0:	6939      	ldr	r1, [r7, #16]
 8004ed2:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8004ed6:	4313      	orrs	r3, r2
 8004ed8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	699b      	ldr	r3, [r3, #24]
 8004ede:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8004ee6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	da03      	bge.n	8004ef6 <USB_HC_Init+0x18a>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8004eee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ef2:	61bb      	str	r3, [r7, #24]
 8004ef4:	e001      	b.n	8004efa <USB_HC_Init+0x18e>
  }
  else
  {
    HCcharEpDir = 0U;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7ff ff0e 	bl	8004d1c <USB_GetHostSpeed>
 8004f00:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8004f02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004f06:	2b02      	cmp	r3, #2
 8004f08:	d106      	bne.n	8004f18 <USB_HC_Init+0x1ac>
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b02      	cmp	r3, #2
 8004f0e:	d003      	beq.n	8004f18 <USB_HC_Init+0x1ac>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8004f10:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004f14:	617b      	str	r3, [r7, #20]
 8004f16:	e001      	b.n	8004f1c <USB_HC_Init+0x1b0>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f1c:	787b      	ldrb	r3, [r7, #1]
 8004f1e:	059b      	lsls	r3, r3, #22
 8004f20:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f24:	78bb      	ldrb	r3, [r7, #2]
 8004f26:	02db      	lsls	r3, r3, #11
 8004f28:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f2c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f2e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f32:	049b      	lsls	r3, r3, #18
 8004f34:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8004f38:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8004f3a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8004f3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8004f40:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	431a      	orrs	r2, r3
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f4a:	78fa      	ldrb	r2, [r7, #3]
 8004f4c:	0151      	lsls	r1, r2, #5
 8004f4e:	693a      	ldr	r2, [r7, #16]
 8004f50:	440a      	add	r2, r1
 8004f52:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8004f56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8004f5a:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8004f5c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f60:	2b03      	cmp	r3, #3
 8004f62:	d003      	beq.n	8004f6c <USB_HC_Init+0x200>
 8004f64:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	d10f      	bne.n	8004f8c <USB_HC_Init+0x220>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8004f6c:	78fb      	ldrb	r3, [r7, #3]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	78fa      	ldrb	r2, [r7, #3]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	693a      	ldr	r2, [r7, #16]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004f86:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004f8a:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8004f8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8004f8e:	4618      	mov	r0, r3
 8004f90:	3720      	adds	r7, #32
 8004f92:	46bd      	mov	sp, r7
 8004f94:	bd80      	pop	{r7, pc}
 8004f96:	bf00      	nop

08004f98 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b08c      	sub	sp, #48	@ 0x30
 8004f9c:	af02      	add	r7, sp, #8
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	4613      	mov	r3, r2
 8004fa4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	785b      	ldrb	r3, [r3, #1]
 8004fae:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8004fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fb4:	837b      	strh	r3, [r7, #26]
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	799b      	ldrb	r3, [r3, #6]
 8004fba:	2b01      	cmp	r3, #1
 8004fbc:	d158      	bne.n	8005070 <USB_HC_StartXfer+0xd8>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	78db      	ldrb	r3, [r3, #3]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d007      	beq.n	8004fda <USB_HC_StartXfer+0x42>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8004fca:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8004fcc:	68ba      	ldr	r2, [r7, #8]
 8004fce:	8a92      	ldrh	r2, [r2, #20]
 8004fd0:	fb03 f202 	mul.w	r2, r3, r2
 8004fd4:	68bb      	ldr	r3, [r7, #8]
 8004fd6:	61da      	str	r2, [r3, #28]
 8004fd8:	e079      	b.n	80050ce <USB_HC_StartXfer+0x136>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	7c9b      	ldrb	r3, [r3, #18]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d130      	bne.n	8005044 <USB_HC_StartXfer+0xac>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	6a1b      	ldr	r3, [r3, #32]
 8004fe6:	2bbc      	cmp	r3, #188	@ 0xbc
 8004fe8:	d918      	bls.n	800501c <USB_HC_StartXfer+0x84>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	8a9b      	ldrh	r3, [r3, #20]
 8004fee:	461a      	mov	r2, r3
 8004ff0:	68bb      	ldr	r3, [r7, #8]
 8004ff2:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	69da      	ldr	r2, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8004ffc:	68bb      	ldr	r3, [r7, #8]
 8004ffe:	68db      	ldr	r3, [r3, #12]
 8005000:	2b01      	cmp	r3, #1
 8005002:	d003      	beq.n	800500c <USB_HC_StartXfer+0x74>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	68db      	ldr	r3, [r3, #12]
 8005008:	2b02      	cmp	r3, #2
 800500a:	d103      	bne.n	8005014 <USB_HC_StartXfer+0x7c>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	2202      	movs	r2, #2
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	e05c      	b.n	80050ce <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	2201      	movs	r2, #1
 8005018:	60da      	str	r2, [r3, #12]
 800501a:	e058      	b.n	80050ce <USB_HC_StartXfer+0x136>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	6a1a      	ldr	r2, [r3, #32]
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	2b01      	cmp	r3, #1
 800502a:	d007      	beq.n	800503c <USB_HC_StartXfer+0xa4>
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	68db      	ldr	r3, [r3, #12]
 8005030:	2b02      	cmp	r3, #2
 8005032:	d003      	beq.n	800503c <USB_HC_StartXfer+0xa4>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	2204      	movs	r2, #4
 8005038:	60da      	str	r2, [r3, #12]
 800503a:	e048      	b.n	80050ce <USB_HC_StartXfer+0x136>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2203      	movs	r2, #3
 8005040:	60da      	str	r2, [r3, #12]
 8005042:	e044      	b.n	80050ce <USB_HC_StartXfer+0x136>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8005044:	79fb      	ldrb	r3, [r7, #7]
 8005046:	2b01      	cmp	r3, #1
 8005048:	d10d      	bne.n	8005066 <USB_HC_StartXfer+0xce>
 800504a:	68bb      	ldr	r3, [r7, #8]
 800504c:	6a1b      	ldr	r3, [r3, #32]
 800504e:	68ba      	ldr	r2, [r7, #8]
 8005050:	8a92      	ldrh	r2, [r2, #20]
 8005052:	4293      	cmp	r3, r2
 8005054:	d907      	bls.n	8005066 <USB_HC_StartXfer+0xce>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005056:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005058:	68ba      	ldr	r2, [r7, #8]
 800505a:	8a92      	ldrh	r2, [r2, #20]
 800505c:	fb03 f202 	mul.w	r2, r3, r2
 8005060:	68bb      	ldr	r3, [r7, #8]
 8005062:	61da      	str	r2, [r3, #28]
 8005064:	e033      	b.n	80050ce <USB_HC_StartXfer+0x136>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	6a1a      	ldr	r2, [r3, #32]
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	61da      	str	r2, [r3, #28]
 800506e:	e02e      	b.n	80050ce <USB_HC_StartXfer+0x136>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8005070:	68bb      	ldr	r3, [r7, #8]
 8005072:	6a1b      	ldr	r3, [r3, #32]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d018      	beq.n	80050aa <USB_HC_StartXfer+0x112>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	6a1b      	ldr	r3, [r3, #32]
 800507c:	68ba      	ldr	r2, [r7, #8]
 800507e:	8a92      	ldrh	r2, [r2, #20]
 8005080:	4413      	add	r3, r2
 8005082:	3b01      	subs	r3, #1
 8005084:	68ba      	ldr	r2, [r7, #8]
 8005086:	8a92      	ldrh	r2, [r2, #20]
 8005088:	fbb3 f3f2 	udiv	r3, r3, r2
 800508c:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800508e:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8005090:	8b7b      	ldrh	r3, [r7, #26]
 8005092:	429a      	cmp	r2, r3
 8005094:	d90b      	bls.n	80050ae <USB_HC_StartXfer+0x116>
      {
        num_packets = max_hc_pkt_count;
 8005096:	8b7b      	ldrh	r3, [r7, #26]
 8005098:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800509a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	8a92      	ldrh	r2, [r2, #20]
 80050a0:	fb03 f202 	mul.w	r2, r3, r2
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	61da      	str	r2, [r3, #28]
 80050a8:	e001      	b.n	80050ae <USB_HC_StartXfer+0x116>
      }
    }
    else
    {
      num_packets = 1U;
 80050aa:	2301      	movs	r3, #1
 80050ac:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	78db      	ldrb	r3, [r3, #3]
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d007      	beq.n	80050c6 <USB_HC_StartXfer+0x12e>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80050b6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80050b8:	68ba      	ldr	r2, [r7, #8]
 80050ba:	8a92      	ldrh	r2, [r2, #20]
 80050bc:	fb03 f202 	mul.w	r2, r3, r2
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	61da      	str	r2, [r3, #28]
 80050c4:	e003      	b.n	80050ce <USB_HC_StartXfer+0x136>
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	6a1a      	ldr	r2, [r3, #32]
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	69db      	ldr	r3, [r3, #28]
 80050d2:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80050d8:	04d9      	lsls	r1, r3, #19
 80050da:	4ba4      	ldr	r3, [pc, #656]	@ (800536c <USB_HC_StartXfer+0x3d4>)
 80050dc:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050de:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80050e0:	68bb      	ldr	r3, [r7, #8]
 80050e2:	7d9b      	ldrb	r3, [r3, #22]
 80050e4:	075b      	lsls	r3, r3, #29
 80050e6:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050ea:	69f9      	ldr	r1, [r7, #28]
 80050ec:	0148      	lsls	r0, r1, #5
 80050ee:	6a39      	ldr	r1, [r7, #32]
 80050f0:	4401      	add	r1, r0
 80050f2:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80050f6:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80050f8:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80050fa:	79fb      	ldrb	r3, [r7, #7]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d009      	beq.n	8005114 <USB_HC_StartXfer+0x17c>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6999      	ldr	r1, [r3, #24]
 8005104:	69fb      	ldr	r3, [r7, #28]
 8005106:	015a      	lsls	r2, r3, #5
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	4413      	add	r3, r2
 800510c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005110:	460a      	mov	r2, r1
 8005112:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005114:	6a3b      	ldr	r3, [r7, #32]
 8005116:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800511a:	689b      	ldr	r3, [r3, #8]
 800511c:	f003 0301 	and.w	r3, r3, #1
 8005120:	2b00      	cmp	r3, #0
 8005122:	bf0c      	ite	eq
 8005124:	2301      	moveq	r3, #1
 8005126:	2300      	movne	r3, #0
 8005128:	b2db      	uxtb	r3, r3
 800512a:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	6a3b      	ldr	r3, [r7, #32]
 8005132:	4413      	add	r3, r2
 8005134:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	6a3a      	ldr	r2, [r7, #32]
 8005140:	440a      	add	r2, r1
 8005142:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005146:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800514a:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	4413      	add	r3, r2
 8005154:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	7e7b      	ldrb	r3, [r7, #25]
 800515c:	075b      	lsls	r3, r3, #29
 800515e:	69f9      	ldr	r1, [r7, #28]
 8005160:	0148      	lsls	r0, r1, #5
 8005162:	6a39      	ldr	r1, [r7, #32]
 8005164:	4401      	add	r1, r0
 8005166:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800516a:	4313      	orrs	r3, r2
 800516c:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800516e:	68bb      	ldr	r3, [r7, #8]
 8005170:	799b      	ldrb	r3, [r3, #6]
 8005172:	2b01      	cmp	r3, #1
 8005174:	f040 80c4 	bne.w	8005300 <USB_HC_StartXfer+0x368>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	7c5b      	ldrb	r3, [r3, #17]
 800517c:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800517e:	68ba      	ldr	r2, [r7, #8]
 8005180:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005182:	4313      	orrs	r3, r2
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	6a3a      	ldr	r2, [r7, #32]
 800518a:	440a      	add	r2, r1
 800518c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8005190:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8005194:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	015a      	lsls	r2, r3, #5
 800519a:	6a3b      	ldr	r3, [r7, #32]
 800519c:	4413      	add	r3, r2
 800519e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	69fa      	ldr	r2, [r7, #28]
 80051a6:	0151      	lsls	r1, r2, #5
 80051a8:	6a3a      	ldr	r2, [r7, #32]
 80051aa:	440a      	add	r2, r1
 80051ac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051b0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80051b4:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	79db      	ldrb	r3, [r3, #7]
 80051ba:	2b01      	cmp	r3, #1
 80051bc:	d123      	bne.n	8005206 <USB_HC_StartXfer+0x26e>
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	78db      	ldrb	r3, [r3, #3]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d11f      	bne.n	8005206 <USB_HC_StartXfer+0x26e>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80051c6:	69fb      	ldr	r3, [r7, #28]
 80051c8:	015a      	lsls	r2, r3, #5
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	4413      	add	r3, r2
 80051ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	69fa      	ldr	r2, [r7, #28]
 80051d6:	0151      	lsls	r1, r2, #5
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	440a      	add	r2, r1
 80051dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80051e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e4:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80051e6:	69fb      	ldr	r3, [r7, #28]
 80051e8:	015a      	lsls	r2, r3, #5
 80051ea:	6a3b      	ldr	r3, [r7, #32]
 80051ec:	4413      	add	r3, r2
 80051ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	69fa      	ldr	r2, [r7, #28]
 80051f6:	0151      	lsls	r1, r2, #5
 80051f8:	6a3a      	ldr	r2, [r7, #32]
 80051fa:	440a      	add	r2, r1
 80051fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005200:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005204:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	7c9b      	ldrb	r3, [r3, #18]
 800520a:	2b01      	cmp	r3, #1
 800520c:	d003      	beq.n	8005216 <USB_HC_StartXfer+0x27e>
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	7c9b      	ldrb	r3, [r3, #18]
 8005212:	2b03      	cmp	r3, #3
 8005214:	d117      	bne.n	8005246 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800521a:	2b01      	cmp	r3, #1
 800521c:	d113      	bne.n	8005246 <USB_HC_StartXfer+0x2ae>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	78db      	ldrb	r3, [r3, #3]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d10f      	bne.n	8005246 <USB_HC_StartXfer+0x2ae>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8005226:	69fb      	ldr	r3, [r7, #28]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	4413      	add	r3, r2
 800522e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	69fa      	ldr	r2, [r7, #28]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	6a3a      	ldr	r2, [r7, #32]
 800523a:	440a      	add	r2, r1
 800523c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005240:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005244:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	7c9b      	ldrb	r3, [r3, #18]
 800524a:	2b01      	cmp	r3, #1
 800524c:	d163      	bne.n	8005316 <USB_HC_StartXfer+0x37e>
 800524e:	68bb      	ldr	r3, [r7, #8]
 8005250:	78db      	ldrb	r3, [r3, #3]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d15f      	bne.n	8005316 <USB_HC_StartXfer+0x37e>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8005256:	68bb      	ldr	r3, [r7, #8]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	3b01      	subs	r3, #1
 800525c:	2b03      	cmp	r3, #3
 800525e:	d859      	bhi.n	8005314 <USB_HC_StartXfer+0x37c>
 8005260:	a201      	add	r2, pc, #4	@ (adr r2, 8005268 <USB_HC_StartXfer+0x2d0>)
 8005262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005266:	bf00      	nop
 8005268:	08005279 	.word	0x08005279
 800526c:	0800529b 	.word	0x0800529b
 8005270:	080052bd 	.word	0x080052bd
 8005274:	080052df 	.word	0x080052df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	015a      	lsls	r2, r3, #5
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	4413      	add	r3, r2
 8005280:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	69fa      	ldr	r2, [r7, #28]
 8005288:	0151      	lsls	r1, r2, #5
 800528a:	6a3a      	ldr	r2, [r7, #32]
 800528c:	440a      	add	r2, r1
 800528e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005292:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005296:	6053      	str	r3, [r2, #4]
          break;
 8005298:	e03d      	b.n	8005316 <USB_HC_StartXfer+0x37e>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	6a3b      	ldr	r3, [r7, #32]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	0151      	lsls	r1, r2, #5
 80052ac:	6a3a      	ldr	r2, [r7, #32]
 80052ae:	440a      	add	r2, r1
 80052b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052b4:	f043 030e 	orr.w	r3, r3, #14
 80052b8:	6053      	str	r3, [r2, #4]
          break;
 80052ba:	e02c      	b.n	8005316 <USB_HC_StartXfer+0x37e>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	015a      	lsls	r2, r3, #5
 80052c0:	6a3b      	ldr	r3, [r7, #32]
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	0151      	lsls	r1, r2, #5
 80052ce:	6a3a      	ldr	r2, [r7, #32]
 80052d0:	440a      	add	r2, r1
 80052d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052da:	6053      	str	r3, [r2, #4]
          break;
 80052dc:	e01b      	b.n	8005316 <USB_HC_StartXfer+0x37e>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80052de:	69fb      	ldr	r3, [r7, #28]
 80052e0:	015a      	lsls	r2, r3, #5
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	4413      	add	r3, r2
 80052e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	69fa      	ldr	r2, [r7, #28]
 80052ee:	0151      	lsls	r1, r2, #5
 80052f0:	6a3a      	ldr	r2, [r7, #32]
 80052f2:	440a      	add	r2, r1
 80052f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80052f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80052fc:	6053      	str	r3, [r2, #4]
          break;
 80052fe:	e00a      	b.n	8005316 <USB_HC_StartXfer+0x37e>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8005300:	69fb      	ldr	r3, [r7, #28]
 8005302:	015a      	lsls	r2, r3, #5
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	4413      	add	r3, r2
 8005308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800530c:	461a      	mov	r2, r3
 800530e:	2300      	movs	r3, #0
 8005310:	6053      	str	r3, [r2, #4]
 8005312:	e000      	b.n	8005316 <USB_HC_StartXfer+0x37e>
          break;
 8005314:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	6a3b      	ldr	r3, [r7, #32]
 800531c:	4413      	add	r3, r2
 800531e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800532c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	78db      	ldrb	r3, [r3, #3]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <USB_HC_StartXfer+0x3a8>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800533c:	613b      	str	r3, [r7, #16]
 800533e:	e003      	b.n	8005348 <USB_HC_StartXfer+0x3b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005346:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800534e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005350:	69fb      	ldr	r3, [r7, #28]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	6a3b      	ldr	r3, [r7, #32]
 8005356:	4413      	add	r3, r2
 8005358:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800535c:	461a      	mov	r2, r3
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <USB_HC_StartXfer+0x3d8>
  {
    return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e055      	b.n	8005418 <USB_HC_StartXfer+0x480>
 800536c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8005370:	68bb      	ldr	r3, [r7, #8]
 8005372:	78db      	ldrb	r3, [r3, #3]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d14e      	bne.n	8005416 <USB_HC_StartXfer+0x47e>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	6a1b      	ldr	r3, [r3, #32]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d04a      	beq.n	8005416 <USB_HC_StartXfer+0x47e>
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	79db      	ldrb	r3, [r3, #7]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d146      	bne.n	8005416 <USB_HC_StartXfer+0x47e>
  {
    switch (hc->ep_type)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	7c9b      	ldrb	r3, [r3, #18]
 800538c:	2b03      	cmp	r3, #3
 800538e:	d831      	bhi.n	80053f4 <USB_HC_StartXfer+0x45c>
 8005390:	a201      	add	r2, pc, #4	@ (adr r2, 8005398 <USB_HC_StartXfer+0x400>)
 8005392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005396:	bf00      	nop
 8005398:	080053a9 	.word	0x080053a9
 800539c:	080053cd 	.word	0x080053cd
 80053a0:	080053a9 	.word	0x080053a9
 80053a4:	080053cd 	.word	0x080053cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	6a1b      	ldr	r3, [r3, #32]
 80053ac:	3303      	adds	r3, #3
 80053ae:	089b      	lsrs	r3, r3, #2
 80053b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80053b2:	8afa      	ldrh	r2, [r7, #22]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053b8:	b29b      	uxth	r3, r3
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d91c      	bls.n	80053f8 <USB_HC_StartXfer+0x460>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	699b      	ldr	r3, [r3, #24]
 80053c2:	f043 0220 	orr.w	r2, r3, #32
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80053ca:	e015      	b.n	80053f8 <USB_HC_StartXfer+0x460>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	6a1b      	ldr	r3, [r3, #32]
 80053d0:	3303      	adds	r3, #3
 80053d2:	089b      	lsrs	r3, r3, #2
 80053d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80053d6:	8afa      	ldrh	r2, [r7, #22]
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80053de:	691b      	ldr	r3, [r3, #16]
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d90a      	bls.n	80053fc <USB_HC_StartXfer+0x464>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80053f2:	e003      	b.n	80053fc <USB_HC_StartXfer+0x464>

      default:
        break;
 80053f4:	bf00      	nop
 80053f6:	e002      	b.n	80053fe <USB_HC_StartXfer+0x466>
        break;
 80053f8:	bf00      	nop
 80053fa:	e000      	b.n	80053fe <USB_HC_StartXfer+0x466>
        break;
 80053fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	785a      	ldrb	r2, [r3, #1]
 8005406:	68bb      	ldr	r3, [r7, #8]
 8005408:	6a1b      	ldr	r3, [r3, #32]
 800540a:	b29b      	uxth	r3, r3
 800540c:	2000      	movs	r0, #0
 800540e:	9000      	str	r0, [sp, #0]
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f7ff fa2b 	bl	800486c <USB_WritePacket>
  }

  return HAL_OK;
 8005416:	2300      	movs	r3, #0
}
 8005418:	4618      	mov	r0, r3
 800541a:	3728      	adds	r7, #40	@ 0x28
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8005420:	b480      	push	{r7}
 8005422:	b085      	sub	sp, #20
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005432:	695b      	ldr	r3, [r3, #20]
 8005434:	b29b      	uxth	r3, r3
}
 8005436:	4618      	mov	r0, r3
 8005438:	3714      	adds	r7, #20
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005442:	b480      	push	{r7}
 8005444:	b089      	sub	sp, #36	@ 0x24
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
 800544a:	460b      	mov	r3, r1
 800544c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005452:	78fb      	ldrb	r3, [r7, #3]
 8005454:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005456:	2300      	movs	r3, #0
 8005458:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800545a:	69bb      	ldr	r3, [r7, #24]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	4413      	add	r3, r2
 8005462:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	0c9b      	lsrs	r3, r3, #18
 800546a:	f003 0303 	and.w	r3, r3, #3
 800546e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	015a      	lsls	r2, r3, #5
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	4413      	add	r3, r2
 8005478:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	0fdb      	lsrs	r3, r3, #31
 8005480:	f003 0301 	and.w	r3, r3, #1
 8005484:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8005486:	69bb      	ldr	r3, [r7, #24]
 8005488:	015a      	lsls	r2, r3, #5
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	4413      	add	r3, r2
 800548e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	0fdb      	lsrs	r3, r3, #31
 8005496:	f003 0301 	and.w	r3, r3, #1
 800549a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	689b      	ldr	r3, [r3, #8]
 80054a0:	f003 0320 	and.w	r3, r3, #32
 80054a4:	2b20      	cmp	r3, #32
 80054a6:	d10d      	bne.n	80054c4 <USB_HC_Halt+0x82>
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d10a      	bne.n	80054c4 <USB_HC_Halt+0x82>
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d005      	beq.n	80054c0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	2b01      	cmp	r3, #1
 80054b8:	d002      	beq.n	80054c0 <USB_HC_Halt+0x7e>
 80054ba:	697b      	ldr	r3, [r7, #20]
 80054bc:	2b03      	cmp	r3, #3
 80054be:	d101      	bne.n	80054c4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80054c0:	2300      	movs	r3, #0
 80054c2:	e0d8      	b.n	8005676 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d002      	beq.n	80054d0 <USB_HC_Halt+0x8e>
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d173      	bne.n	80055b8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80054d0:	69bb      	ldr	r3, [r7, #24]
 80054d2:	015a      	lsls	r2, r3, #5
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	4413      	add	r3, r2
 80054d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	69ba      	ldr	r2, [r7, #24]
 80054e0:	0151      	lsls	r1, r2, #5
 80054e2:	69fa      	ldr	r2, [r7, #28]
 80054e4:	440a      	add	r2, r1
 80054e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80054ea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f003 0320 	and.w	r3, r3, #32
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d14a      	bne.n	8005592 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005500:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005504:	2b00      	cmp	r3, #0
 8005506:	d133      	bne.n	8005570 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005508:	69bb      	ldr	r3, [r7, #24]
 800550a:	015a      	lsls	r2, r3, #5
 800550c:	69fb      	ldr	r3, [r7, #28]
 800550e:	4413      	add	r3, r2
 8005510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69ba      	ldr	r2, [r7, #24]
 8005518:	0151      	lsls	r1, r2, #5
 800551a:	69fa      	ldr	r2, [r7, #28]
 800551c:	440a      	add	r2, r1
 800551e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005522:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005526:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	015a      	lsls	r2, r3, #5
 800552c:	69fb      	ldr	r3, [r7, #28]
 800552e:	4413      	add	r3, r2
 8005530:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69ba      	ldr	r2, [r7, #24]
 8005538:	0151      	lsls	r1, r2, #5
 800553a:	69fa      	ldr	r2, [r7, #28]
 800553c:	440a      	add	r2, r1
 800553e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005542:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005546:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	3301      	adds	r3, #1
 800554c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800554e:	68bb      	ldr	r3, [r7, #8]
 8005550:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005554:	d82e      	bhi.n	80055b4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005556:	69bb      	ldr	r3, [r7, #24]
 8005558:	015a      	lsls	r2, r3, #5
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	4413      	add	r3, r2
 800555e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005568:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800556c:	d0ec      	beq.n	8005548 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800556e:	e081      	b.n	8005674 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	015a      	lsls	r2, r3, #5
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	4413      	add	r3, r2
 8005578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69ba      	ldr	r2, [r7, #24]
 8005580:	0151      	lsls	r1, r2, #5
 8005582:	69fa      	ldr	r2, [r7, #28]
 8005584:	440a      	add	r2, r1
 8005586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800558a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800558e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005590:	e070      	b.n	8005674 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005592:	69bb      	ldr	r3, [r7, #24]
 8005594:	015a      	lsls	r2, r3, #5
 8005596:	69fb      	ldr	r3, [r7, #28]
 8005598:	4413      	add	r3, r2
 800559a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	69ba      	ldr	r2, [r7, #24]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	69fa      	ldr	r2, [r7, #28]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80055b0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055b2:	e05f      	b.n	8005674 <USB_HC_Halt+0x232>
            break;
 80055b4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80055b6:	e05d      	b.n	8005674 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80055b8:	69bb      	ldr	r3, [r7, #24]
 80055ba:	015a      	lsls	r2, r3, #5
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	4413      	add	r3, r2
 80055c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	69ba      	ldr	r2, [r7, #24]
 80055c8:	0151      	lsls	r1, r2, #5
 80055ca:	69fa      	ldr	r2, [r7, #28]
 80055cc:	440a      	add	r2, r1
 80055ce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80055d2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80055d6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80055d8:	69fb      	ldr	r3, [r7, #28]
 80055da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80055de:	691b      	ldr	r3, [r3, #16]
 80055e0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d133      	bne.n	8005650 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80055e8:	69bb      	ldr	r3, [r7, #24]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	69fb      	ldr	r3, [r7, #28]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	69fa      	ldr	r2, [r7, #28]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005602:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005606:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	015a      	lsls	r2, r3, #5
 800560c:	69fb      	ldr	r3, [r7, #28]
 800560e:	4413      	add	r3, r2
 8005610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	69ba      	ldr	r2, [r7, #24]
 8005618:	0151      	lsls	r1, r2, #5
 800561a:	69fa      	ldr	r2, [r7, #28]
 800561c:	440a      	add	r2, r1
 800561e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005626:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005628:	68bb      	ldr	r3, [r7, #8]
 800562a:	3301      	adds	r3, #1
 800562c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005634:	d81d      	bhi.n	8005672 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	69fb      	ldr	r3, [r7, #28]
 800563c:	4413      	add	r3, r2
 800563e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005648:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800564c:	d0ec      	beq.n	8005628 <USB_HC_Halt+0x1e6>
 800564e:	e011      	b.n	8005674 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	015a      	lsls	r2, r3, #5
 8005654:	69fb      	ldr	r3, [r7, #28]
 8005656:	4413      	add	r3, r2
 8005658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69ba      	ldr	r2, [r7, #24]
 8005660:	0151      	lsls	r1, r2, #5
 8005662:	69fa      	ldr	r2, [r7, #28]
 8005664:	440a      	add	r2, r1
 8005666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800566a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800566e:	6013      	str	r3, [r2, #0]
 8005670:	e000      	b.n	8005674 <USB_HC_Halt+0x232>
          break;
 8005672:	bf00      	nop
    }
  }

  return HAL_OK;
 8005674:	2300      	movs	r3, #0
}
 8005676:	4618      	mov	r0, r3
 8005678:	3724      	adds	r7, #36	@ 0x24
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b088      	sub	sp, #32
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800568a:	2300      	movs	r3, #0
 800568c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005692:	2300      	movs	r3, #0
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005696:	6878      	ldr	r0, [r7, #4]
 8005698:	f7ff f82b 	bl	80046f2 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800569c:	2110      	movs	r1, #16
 800569e:	6878      	ldr	r0, [r7, #4]
 80056a0:	f7ff f884 	bl	80047ac <USB_FlushTxFifo>
 80056a4:	4603      	mov	r3, r0
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d001      	beq.n	80056ae <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80056aa:	2301      	movs	r3, #1
 80056ac:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f7ff f8ae 	bl	8004810 <USB_FlushRxFifo>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80056be:	2300      	movs	r3, #0
 80056c0:	61bb      	str	r3, [r7, #24]
 80056c2:	e01f      	b.n	8005704 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	015a      	lsls	r2, r3, #5
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	4413      	add	r3, r2
 80056cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056da:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80056dc:	693b      	ldr	r3, [r7, #16]
 80056de:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80056e2:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80056ea:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80056ec:	69bb      	ldr	r3, [r7, #24]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80056f8:	461a      	mov	r2, r3
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80056fe:	69bb      	ldr	r3, [r7, #24]
 8005700:	3301      	adds	r3, #1
 8005702:	61bb      	str	r3, [r7, #24]
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	2b0f      	cmp	r3, #15
 8005708:	d9dc      	bls.n	80056c4 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800570a:	2300      	movs	r3, #0
 800570c:	61bb      	str	r3, [r7, #24]
 800570e:	e034      	b.n	800577a <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005710:	69bb      	ldr	r3, [r7, #24]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	4413      	add	r3, r2
 8005718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005726:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800572e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005736:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	015a      	lsls	r2, r3, #5
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	4413      	add	r3, r2
 8005740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005744:	461a      	mov	r2, r3
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	3301      	adds	r3, #1
 800574e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005756:	d80c      	bhi.n	8005772 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	015a      	lsls	r2, r3, #5
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	4413      	add	r3, r2
 8005760:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800576a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800576e:	d0ec      	beq.n	800574a <USB_StopHost+0xc8>
 8005770:	e000      	b.n	8005774 <USB_StopHost+0xf2>
        break;
 8005772:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	3301      	adds	r3, #1
 8005778:	61bb      	str	r3, [r7, #24]
 800577a:	69bb      	ldr	r3, [r7, #24]
 800577c:	2b0f      	cmp	r3, #15
 800577e:	d9c7      	bls.n	8005710 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005786:	461a      	mov	r2, r3
 8005788:	f04f 33ff 	mov.w	r3, #4294967295
 800578c:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	f04f 32ff 	mov.w	r2, #4294967295
 8005794:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005796:	6878      	ldr	r0, [r7, #4]
 8005798:	f7fe ff9a 	bl	80046d0 <USB_EnableGlobalInt>

  return ret;
 800579c:	7ffb      	ldrb	r3, [r7, #31]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3720      	adds	r7, #32
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <USBH_AUDIO_InterfaceInit>:
  *         The function init the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80057a6:	b590      	push	{r4, r7, lr}
 80057a8:	b08b      	sub	sp, #44	@ 0x2c
 80057aa:	af04      	add	r7, sp, #16
 80057ac:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef out_status, in_status;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  uint8_t  interface, index;
  uint16_t ep_size_out = 0U;
 80057ae:	2300      	movs	r3, #0
 80057b0:	82bb      	strh	r3, [r7, #20]
  uint16_t ep_size_in = 0U;
 80057b2:	2300      	movs	r3, #0
 80057b4:	827b      	strh	r3, [r7, #18]

  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0x00U);
 80057b6:	2300      	movs	r3, #0
 80057b8:	2201      	movs	r2, #1
 80057ba:	2101      	movs	r1, #1
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f006 f885 	bl	800b8cc <USBH_FindInterface>
 80057c2:	4603      	mov	r3, r0
 80057c4:	747b      	strb	r3, [r7, #17]

  if (interface == 0xFFU) /* Not Valid Interface */
 80057c6:	7c7b      	ldrb	r3, [r7, #17]
 80057c8:	2bff      	cmp	r3, #255	@ 0xff
 80057ca:	d101      	bne.n	80057d0 <USBH_AUDIO_InterfaceInit+0x2a>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80057cc:	2302      	movs	r3, #2
 80057ce:	e1a5      	b.n	8005b1c <USBH_AUDIO_InterfaceInit+0x376>
  }

  phost->pActiveClass->pData = (AUDIO_HandleTypeDef *)USBH_malloc(sizeof(AUDIO_HandleTypeDef));
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 80057d6:	f44f 70d2 	mov.w	r0, #420	@ 0x1a4
 80057da:	f008 f977 	bl	800dacc <malloc>
 80057de:	4603      	mov	r3, r0
 80057e0:	61e3      	str	r3, [r4, #28]
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80057e8:	69db      	ldr	r3, [r3, #28]
 80057ea:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle == NULL)
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <USBH_AUDIO_InterfaceInit+0x50>
  {
    USBH_DbgLog("Cannot allocate memory for AUDIO Handle");
    return USBH_FAIL;
 80057f2:	2302      	movs	r3, #2
 80057f4:	e192      	b.n	8005b1c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* Initialize audio handler */
  (void)USBH_memset(AUDIO_Handle, 0, sizeof(AUDIO_HandleTypeDef));
 80057f6:	f44f 72d2 	mov.w	r2, #420	@ 0x1a4
 80057fa:	2100      	movs	r1, #0
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f008 fc63 	bl	800e0c8 <memset>

  /* 1st Step:  Find Audio Interfaces */
  out_status = USBH_AUDIO_FindAudioStreamingIN(phost);
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 fc0f 	bl	8006026 <USBH_AUDIO_FindAudioStreamingIN>
 8005808:	4603      	mov	r3, r0
 800580a:	72fb      	strb	r3, [r7, #11]

  in_status = USBH_AUDIO_FindAudioStreamingOUT(phost);
 800580c:	6878      	ldr	r0, [r7, #4]
 800580e:	f000 fcc9 	bl	80061a4 <USBH_AUDIO_FindAudioStreamingOUT>
 8005812:	4603      	mov	r3, r0
 8005814:	72bb      	strb	r3, [r7, #10]

  if ((out_status == USBH_FAIL) && (in_status == USBH_FAIL))
 8005816:	7afb      	ldrb	r3, [r7, #11]
 8005818:	2b02      	cmp	r3, #2
 800581a:	d104      	bne.n	8005826 <USBH_AUDIO_InterfaceInit+0x80>
 800581c:	7abb      	ldrb	r3, [r7, #10]
 800581e:	2b02      	cmp	r3, #2
 8005820:	d101      	bne.n	8005826 <USBH_AUDIO_InterfaceInit+0x80>
  {
    USBH_DbgLog("%s class configuration not supported.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005822:	2302      	movs	r3, #2
 8005824:	e17a      	b.n	8005b1c <USBH_AUDIO_InterfaceInit+0x376>
  }

  /* 2nd Step:  Select Audio Streaming Interfaces with largest endpoint size : default behavior */
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 8005826:	2300      	movs	r3, #0
 8005828:	75fb      	strb	r3, [r7, #23]
 800582a:	e0c6      	b.n	80059ba <USBH_AUDIO_InterfaceInit+0x214>
  {
    if (AUDIO_Handle->stream_out[index].valid == 1U)
 800582c:	7dfa      	ldrb	r2, [r7, #23]
 800582e:	68f9      	ldr	r1, [r7, #12]
 8005830:	4613      	mov	r3, r2
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	4413      	add	r3, r2
 8005836:	005b      	lsls	r3, r3, #1
 8005838:	440b      	add	r3, r1
 800583a:	333e      	adds	r3, #62	@ 0x3e
 800583c:	781b      	ldrb	r3, [r3, #0]
 800583e:	2b01      	cmp	r3, #1
 8005840:	d156      	bne.n	80058f0 <USBH_AUDIO_InterfaceInit+0x14a>
    {
      if (ep_size_out < AUDIO_Handle->stream_out[index].EpSize)
 8005842:	7dfa      	ldrb	r2, [r7, #23]
 8005844:	68f9      	ldr	r1, [r7, #12]
 8005846:	4613      	mov	r3, r2
 8005848:	009b      	lsls	r3, r3, #2
 800584a:	4413      	add	r3, r2
 800584c:	005b      	lsls	r3, r3, #1
 800584e:	440b      	add	r3, r1
 8005850:	333a      	adds	r3, #58	@ 0x3a
 8005852:	881b      	ldrh	r3, [r3, #0]
 8005854:	8aba      	ldrh	r2, [r7, #20]
 8005856:	429a      	cmp	r2, r3
 8005858:	d24a      	bcs.n	80058f0 <USBH_AUDIO_InterfaceInit+0x14a>
      {
        ep_size_out = AUDIO_Handle->stream_out[index].EpSize;
 800585a:	7dfa      	ldrb	r2, [r7, #23]
 800585c:	68f9      	ldr	r1, [r7, #12]
 800585e:	4613      	mov	r3, r2
 8005860:	009b      	lsls	r3, r3, #2
 8005862:	4413      	add	r3, r2
 8005864:	005b      	lsls	r3, r3, #1
 8005866:	440b      	add	r3, r1
 8005868:	333a      	adds	r3, #58	@ 0x3a
 800586a:	881b      	ldrh	r3, [r3, #0]
 800586c:	82bb      	strh	r3, [r7, #20]
        AUDIO_Handle->headphone.interface = AUDIO_Handle->stream_out[index].interface;
 800586e:	7dfa      	ldrb	r2, [r7, #23]
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	4613      	mov	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4413      	add	r3, r2
 8005878:	005b      	lsls	r3, r3, #1
 800587a:	440b      	add	r3, r1
 800587c:	333d      	adds	r3, #61	@ 0x3d
 800587e:	781a      	ldrb	r2, [r3, #0]
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	f883 20f8 	strb.w	r2, [r3, #248]	@ 0xf8
        AUDIO_Handle->headphone.AltSettings = AUDIO_Handle->stream_out[index].AltSettings;
 8005886:	7dfa      	ldrb	r2, [r7, #23]
 8005888:	68f9      	ldr	r1, [r7, #12]
 800588a:	4613      	mov	r3, r2
 800588c:	009b      	lsls	r3, r3, #2
 800588e:	4413      	add	r3, r2
 8005890:	005b      	lsls	r3, r3, #1
 8005892:	440b      	add	r3, r1
 8005894:	333c      	adds	r3, #60	@ 0x3c
 8005896:	781a      	ldrb	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f883 20f9 	strb.w	r2, [r3, #249]	@ 0xf9
        AUDIO_Handle->headphone.Ep = AUDIO_Handle->stream_out[index].Ep;
 800589e:	7dfa      	ldrb	r2, [r7, #23]
 80058a0:	68f9      	ldr	r1, [r7, #12]
 80058a2:	4613      	mov	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4413      	add	r3, r2
 80058a8:	005b      	lsls	r3, r3, #1
 80058aa:	440b      	add	r3, r1
 80058ac:	3338      	adds	r3, #56	@ 0x38
 80058ae:	781a      	ldrb	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
        AUDIO_Handle->headphone.EpSize = AUDIO_Handle->stream_out[index].EpSize;
 80058b6:	7dfa      	ldrb	r2, [r7, #23]
 80058b8:	68f9      	ldr	r1, [r7, #12]
 80058ba:	4613      	mov	r3, r2
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	005b      	lsls	r3, r3, #1
 80058c2:	440b      	add	r3, r1
 80058c4:	333a      	adds	r3, #58	@ 0x3a
 80058c6:	881a      	ldrh	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f8a3 20f6 	strh.w	r2, [r3, #246]	@ 0xf6
        AUDIO_Handle->headphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 80058ce:	7dfa      	ldrb	r2, [r7, #23]
 80058d0:	68f9      	ldr	r1, [r7, #12]
 80058d2:	4613      	mov	r3, r2
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	4413      	add	r3, r2
 80058d8:	005b      	lsls	r3, r3, #1
 80058da:	440b      	add	r3, r1
 80058dc:	3340      	adds	r3, #64	@ 0x40
 80058de:	881b      	ldrh	r3, [r3, #0]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	f883 20fc 	strb.w	r2, [r3, #252]	@ 0xfc
        AUDIO_Handle->headphone.supported = 1U;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2201      	movs	r2, #1
 80058ec:	f883 20fa 	strb.w	r2, [r3, #250]	@ 0xfa
      }
    }

    if (AUDIO_Handle->stream_in[index].valid == 1U)
 80058f0:	7dfa      	ldrb	r2, [r7, #23]
 80058f2:	68f9      	ldr	r1, [r7, #12]
 80058f4:	4613      	mov	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4413      	add	r3, r2
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	440b      	add	r3, r1
 80058fe:	330c      	adds	r3, #12
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d156      	bne.n	80059b4 <USBH_AUDIO_InterfaceInit+0x20e>
    {
      if (ep_size_in < AUDIO_Handle->stream_in[index].EpSize)
 8005906:	7dfa      	ldrb	r2, [r7, #23]
 8005908:	68f9      	ldr	r1, [r7, #12]
 800590a:	4613      	mov	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	4413      	add	r3, r2
 8005910:	005b      	lsls	r3, r3, #1
 8005912:	440b      	add	r3, r1
 8005914:	3308      	adds	r3, #8
 8005916:	881b      	ldrh	r3, [r3, #0]
 8005918:	8a7a      	ldrh	r2, [r7, #18]
 800591a:	429a      	cmp	r2, r3
 800591c:	d24a      	bcs.n	80059b4 <USBH_AUDIO_InterfaceInit+0x20e>
      {
        ep_size_in = AUDIO_Handle->stream_in[index].EpSize;
 800591e:	7dfa      	ldrb	r2, [r7, #23]
 8005920:	68f9      	ldr	r1, [r7, #12]
 8005922:	4613      	mov	r3, r2
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	4413      	add	r3, r2
 8005928:	005b      	lsls	r3, r3, #1
 800592a:	440b      	add	r3, r1
 800592c:	3308      	adds	r3, #8
 800592e:	881b      	ldrh	r3, [r3, #0]
 8005930:	827b      	strh	r3, [r7, #18]
        AUDIO_Handle->microphone.interface = AUDIO_Handle->stream_in[index].interface;
 8005932:	7dfa      	ldrb	r2, [r7, #23]
 8005934:	68f9      	ldr	r1, [r7, #12]
 8005936:	4613      	mov	r3, r2
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	4413      	add	r3, r2
 800593c:	005b      	lsls	r3, r3, #1
 800593e:	440b      	add	r3, r1
 8005940:	330b      	adds	r3, #11
 8005942:	781a      	ldrb	r2, [r3, #0]
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f883 2140 	strb.w	r2, [r3, #320]	@ 0x140
        AUDIO_Handle->microphone.AltSettings = AUDIO_Handle->stream_in[index].AltSettings;
 800594a:	7dfa      	ldrb	r2, [r7, #23]
 800594c:	68f9      	ldr	r1, [r7, #12]
 800594e:	4613      	mov	r3, r2
 8005950:	009b      	lsls	r3, r3, #2
 8005952:	4413      	add	r3, r2
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	440b      	add	r3, r1
 8005958:	330a      	adds	r3, #10
 800595a:	781a      	ldrb	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	f883 2141 	strb.w	r2, [r3, #321]	@ 0x141
        AUDIO_Handle->microphone.Ep = AUDIO_Handle->stream_in[index].Ep;
 8005962:	7dfa      	ldrb	r2, [r7, #23]
 8005964:	68f9      	ldr	r1, [r7, #12]
 8005966:	4613      	mov	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	4413      	add	r3, r2
 800596c:	005b      	lsls	r3, r3, #1
 800596e:	440b      	add	r3, r1
 8005970:	3306      	adds	r3, #6
 8005972:	781a      	ldrb	r2, [r3, #0]
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f883 213c 	strb.w	r2, [r3, #316]	@ 0x13c
        AUDIO_Handle->microphone.EpSize = AUDIO_Handle->stream_in[index].EpSize;
 800597a:	7dfa      	ldrb	r2, [r7, #23]
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	4613      	mov	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4413      	add	r3, r2
 8005984:	005b      	lsls	r3, r3, #1
 8005986:	440b      	add	r3, r1
 8005988:	3308      	adds	r3, #8
 800598a:	881a      	ldrh	r2, [r3, #0]
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f8a3 213e 	strh.w	r2, [r3, #318]	@ 0x13e
        AUDIO_Handle->microphone.Poll = (uint8_t)AUDIO_Handle->stream_out[index].Poll;
 8005992:	7dfa      	ldrb	r2, [r7, #23]
 8005994:	68f9      	ldr	r1, [r7, #12]
 8005996:	4613      	mov	r3, r2
 8005998:	009b      	lsls	r3, r3, #2
 800599a:	4413      	add	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	440b      	add	r3, r1
 80059a0:	3340      	adds	r3, #64	@ 0x40
 80059a2:	881b      	ldrh	r3, [r3, #0]
 80059a4:	b2da      	uxtb	r2, r3
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	f883 2144 	strb.w	r2, [r3, #324]	@ 0x144
        AUDIO_Handle->microphone.supported = 1U;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2142 	strb.w	r2, [r3, #322]	@ 0x142
  for (index = 0U; index < AUDIO_MAX_AUDIO_STD_INTERFACE; index ++)
 80059b4:	7dfb      	ldrb	r3, [r7, #23]
 80059b6:	3301      	adds	r3, #1
 80059b8:	75fb      	strb	r3, [r7, #23]
 80059ba:	7dfb      	ldrb	r3, [r7, #23]
 80059bc:	2b04      	cmp	r3, #4
 80059be:	f67f af35 	bls.w	800582c <USBH_AUDIO_InterfaceInit+0x86>
      }
    }
  }

  if (USBH_AUDIO_FindHIDControl(phost) == USBH_OK)
 80059c2:	6878      	ldr	r0, [r7, #4]
 80059c4:	f000 fcad 	bl	8006322 <USBH_AUDIO_FindHIDControl>
 80059c8:	4603      	mov	r3, r0
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d103      	bne.n	80059d6 <USBH_AUDIO_InterfaceInit+0x230>
  {
    AUDIO_Handle->control.supported = 1U;
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2201      	movs	r2, #1
 80059d2:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
  }

  /* 3rd Step:  Find and Parse Audio interfaces */
  (void)USBH_AUDIO_ParseCSDescriptors(phost);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fd25 	bl	8006426 <USBH_AUDIO_ParseCSDescriptors>


  /* 4th Step:  Open the Audio streaming pipes*/
  if (AUDIO_Handle->headphone.supported == 1U)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d12e      	bne.n	8005a44 <USBH_AUDIO_InterfaceInit+0x29e>
  {
    (void)USBH_AUDIO_BuildHeadphonePath(phost);
 80059e6:	6878      	ldr	r0, [r7, #4]
 80059e8:	f000 ff60 	bl	80068ac <USBH_AUDIO_BuildHeadphonePath>

    AUDIO_Handle->headphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->headphone.Ep);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 80059f2:	4619      	mov	r1, r3
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f007 fb8e 	bl	800d116 <USBH_AllocPipe>
 80059fa:	4603      	mov	r3, r0
 80059fc:	461a      	mov	r2, r3
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f893 10fb 	ldrb.w	r1, [r3, #251]	@ 0xfb
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	f893 00f4 	ldrb.w	r0, [r3, #244]	@ 0xf4
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005a1c:	68fa      	ldr	r2, [r7, #12]
 8005a1e:	f8b2 20f6 	ldrh.w	r2, [r2, #246]	@ 0xf6
 8005a22:	9202      	str	r2, [sp, #8]
 8005a24:	2201      	movs	r2, #1
 8005a26:	9201      	str	r2, [sp, #4]
 8005a28:	9300      	str	r3, [sp, #0]
 8005a2a:	4623      	mov	r3, r4
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f007 fb42 	bl	800d0b8 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->headphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->headphone.Pipe, 0U);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f007 ff8a 	bl	800d958 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d12e      	bne.n	8005aac <USBH_AUDIO_InterfaceInit+0x306>
  {
    (void)USBH_AUDIO_BuildMicrophonePath(phost);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f000 fea4 	bl	800679c <USBH_AUDIO_BuildMicrophonePath>
    AUDIO_Handle->microphone.Pipe = USBH_AllocPipe(phost, AUDIO_Handle->microphone.Ep);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f893 313c 	ldrb.w	r3, [r3, #316]	@ 0x13c
 8005a5a:	4619      	mov	r1, r3
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f007 fb5a 	bl	800d116 <USBH_AllocPipe>
 8005a62:	4603      	mov	r3, r0
 8005a64:	461a      	mov	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	f893 1143 	ldrb.w	r1, [r3, #323]	@ 0x143
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	f893 013c 	ldrb.w	r0, [r3, #316]	@ 0x13c
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005a84:	68fa      	ldr	r2, [r7, #12]
 8005a86:	f8b2 213e 	ldrh.w	r2, [r2, #318]	@ 0x13e
 8005a8a:	9202      	str	r2, [sp, #8]
 8005a8c:	2201      	movs	r2, #1
 8005a8e:	9201      	str	r2, [sp, #4]
 8005a90:	9300      	str	r3, [sp, #0]
 8005a92:	4623      	mov	r3, r4
 8005a94:	4602      	mov	r2, r0
 8005a96:	6878      	ldr	r0, [r7, #4]
 8005a98:	f007 fb0e 	bl	800d0b8 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_ISOC,
                        AUDIO_Handle->microphone.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->microphone.Pipe, 0U);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	4619      	mov	r1, r3
 8005aa6:	6878      	ldr	r0, [r7, #4]
 8005aa8:	f007 ff56 	bl	800d958 <USBH_LL_SetToggle>
  }

  if (AUDIO_Handle->control.supported == 1U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8005ab2:	2b01      	cmp	r3, #1
 8005ab4:	d12b      	bne.n	8005b0e <USBH_AUDIO_InterfaceInit+0x368>
  {
    AUDIO_Handle->control.Pipe  = USBH_AllocPipe(phost, AUDIO_Handle->control.Ep);
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3184 	ldrb.w	r3, [r3, #388]	@ 0x184
 8005abc:	4619      	mov	r1, r3
 8005abe:	6878      	ldr	r0, [r7, #4]
 8005ac0:	f007 fb29 	bl	800d116 <USBH_AllocPipe>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	461a      	mov	r2, r3
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a

    /* Open pipe for IN endpoint */
    (void)USBH_OpenPipe(phost,
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	f893 118a 	ldrb.w	r1, [r3, #394]	@ 0x18a
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	f893 0184 	ldrb.w	r0, [r3, #388]	@ 0x184
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	f8b2 2186 	ldrh.w	r2, [r2, #390]	@ 0x186
 8005aec:	9202      	str	r2, [sp, #8]
 8005aee:	2203      	movs	r2, #3
 8005af0:	9201      	str	r2, [sp, #4]
 8005af2:	9300      	str	r3, [sp, #0]
 8005af4:	4623      	mov	r3, r4
 8005af6:	4602      	mov	r2, r0
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f007 fadd 	bl	800d0b8 <USBH_OpenPipe>
                        phost->device.address,
                        phost->device.speed,
                        USB_EP_TYPE_INTR,
                        AUDIO_Handle->control.EpSize);

    (void)USBH_LL_SetToggle(phost,  AUDIO_Handle->control.Pipe, 0U);
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8005b04:	2200      	movs	r2, #0
 8005b06:	4619      	mov	r1, r3
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f007 ff25 	bl	800d958 <USBH_LL_SetToggle>

  }

  AUDIO_Handle->req_state = AUDIO_REQ_INIT;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	701a      	strb	r2, [r3, #0]
  AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	70da      	strb	r2, [r3, #3]

  return USBH_OK;
 8005b1a:	2300      	movs	r3, #0
}
 8005b1c:	4618      	mov	r0, r3
 8005b1e:	371c      	adds	r7, #28
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd90      	pop	{r4, r7, pc}

08005b24 <USBH_AUDIO_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005b32:	69db      	ldr	r3, [r3, #28]
 8005b34:	60fb      	str	r3, [r7, #12]

  if (AUDIO_Handle->microphone.Pipe != 0x00U)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d011      	beq.n	8005b64 <USBH_AUDIO_InterfaceDeInit+0x40>
  {
    (void)USBH_ClosePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8005b46:	4619      	mov	r1, r3
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f007 fad4 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, AUDIO_Handle->microphone.Pipe);
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	f893 3143 	ldrb.w	r3, [r3, #323]	@ 0x143
 8005b54:	4619      	mov	r1, r3
 8005b56:	6878      	ldr	r0, [r7, #4]
 8005b58:	f007 faff 	bl	800d15a <USBH_FreePipe>
    AUDIO_Handle->microphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2143 	strb.w	r2, [r3, #323]	@ 0x143
  }

  if (AUDIO_Handle->headphone.Pipe != 0x00U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d011      	beq.n	8005b92 <USBH_AUDIO_InterfaceDeInit+0x6e>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8005b74:	4619      	mov	r1, r3
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f007 fabd 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->headphone.Pipe);
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8005b82:	4619      	mov	r1, r3
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f007 fae8 	bl	800d15a <USBH_FreePipe>
    AUDIO_Handle->headphone.Pipe = 0U;     /* Reset the pipe as Free */
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	f883 20fb 	strb.w	r2, [r3, #251]	@ 0xfb
  }

  if (AUDIO_Handle->control.Pipe != 0x00U)
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d011      	beq.n	8005bc0 <USBH_AUDIO_InterfaceDeInit+0x9c>
  {
    (void)USBH_ClosePipe(phost,  AUDIO_Handle->control.Pipe);
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8005ba2:	4619      	mov	r1, r3
 8005ba4:	6878      	ldr	r0, [r7, #4]
 8005ba6:	f007 faa6 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost,  AUDIO_Handle->control.Pipe);
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8005bb0:	4619      	mov	r1, r3
 8005bb2:	6878      	ldr	r0, [r7, #4]
 8005bb4:	f007 fad1 	bl	800d15a <USBH_FreePipe>
    AUDIO_Handle->control.Pipe = 0U;     /* Reset the pipe as Free */
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	2200      	movs	r2, #0
 8005bbc:	f883 218a 	strb.w	r2, [r3, #394]	@ 0x18a
  }

  if ((phost->pActiveClass->pData) != 0U)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005bc6:	69db      	ldr	r3, [r3, #28]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00b      	beq.n	8005be4 <USBH_AUDIO_InterfaceDeInit+0xc0>
  {
    USBH_free(phost->pActiveClass->pData);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005bd2:	69db      	ldr	r3, [r3, #28]
 8005bd4:	4618      	mov	r0, r3
 8005bd6:	f007 ff81 	bl	800dadc <free>
    phost->pActiveClass->pData = 0U;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005be0:	2200      	movs	r2, #0
 8005be2:	61da      	str	r2, [r3, #28]
  }
  return USBH_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3710      	adds	r7, #16
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <USBH_AUDIO_ClassRequest>:
  *         for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005bfe:	69db      	ldr	r3, [r3, #28]
 8005c00:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005c02:	2301      	movs	r3, #1
 8005c04:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005c06:	2301      	movs	r3, #1
 8005c08:	73fb      	strb	r3, [r7, #15]

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->req_state)
 8005c0a:	693b      	ldr	r3, [r7, #16]
 8005c0c:	781b      	ldrb	r3, [r3, #0]
 8005c0e:	3b01      	subs	r3, #1
 8005c10:	2b06      	cmp	r3, #6
 8005c12:	f200 80be 	bhi.w	8005d92 <USBH_AUDIO_ClassRequest+0x1a2>
 8005c16:	a201      	add	r2, pc, #4	@ (adr r2, 8005c1c <USBH_AUDIO_ClassRequest+0x2c>)
 8005c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c1c:	08005c39 	.word	0x08005c39
 8005c20:	08005d7b 	.word	0x08005d7b
 8005c24:	08005c39 	.word	0x08005c39
 8005c28:	08005c7b 	.word	0x08005c7b
 8005c2c:	08005cf3 	.word	0x08005cf3
 8005c30:	08005d37 	.word	0x08005d37
 8005c34:	08005cdf 	.word	0x08005cdf
  {
    case AUDIO_REQ_INIT:
    case AUDIO_REQ_SET_DEFAULT_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8005c38:	693b      	ldr	r3, [r7, #16]
 8005c3a:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8005c3e:	2b01      	cmp	r3, #1
 8005c40:	d117      	bne.n	8005c72 <USBH_AUDIO_ClassRequest+0x82>
      {
        req_status = USBH_SetInterface(phost,
 8005c42:	693b      	ldr	r3, [r7, #16]
 8005c44:	f893 3140 	ldrb.w	r3, [r3, #320]	@ 0x140
 8005c48:	2200      	movs	r2, #0
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	6878      	ldr	r0, [r7, #4]
 8005c4e:	f006 fc27 	bl	800c4a0 <USBH_SetInterface>
 8005c52:	4603      	mov	r3, r0
 8005c54:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8005c56:	7bfb      	ldrb	r3, [r7, #15]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d103      	bne.n	8005c64 <USBH_AUDIO_ClassRequest+0x74>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2204      	movs	r2, #4
 8005c60:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005c62:	e098      	b.n	8005d96 <USBH_AUDIO_ClassRequest+0x1a6>
        else if (req_status == USBH_NOT_SUPPORTED)
 8005c64:	7bfb      	ldrb	r3, [r7, #15]
 8005c66:	2b03      	cmp	r3, #3
 8005c68:	f040 8095 	bne.w	8005d96 <USBH_AUDIO_ClassRequest+0x1a6>
          status = USBH_FAIL;
 8005c6c:	2302      	movs	r3, #2
 8005c6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005c70:	e091      	b.n	8005d96 <USBH_AUDIO_ClassRequest+0x1a6>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE;
 8005c72:	693b      	ldr	r3, [r7, #16]
 8005c74:	2204      	movs	r2, #4
 8005c76:	701a      	strb	r2, [r3, #0]
      break;
 8005c78:	e08d      	b.n	8005d96 <USBH_AUDIO_ClassRequest+0x1a6>

    case AUDIO_REQ_SET_DEFAULT_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d125      	bne.n	8005cd0 <USBH_AUDIO_ClassRequest+0xe0>
      {
        req_status = USBH_SetInterface(phost,
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	4619      	mov	r1, r3
 8005c8e:	6878      	ldr	r0, [r7, #4]
 8005c90:	f006 fc06 	bl	800c4a0 <USBH_SetInterface>
 8005c94:	4603      	mov	r3, r0
 8005c96:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       0U);

        if (req_status == USBH_OK)
 8005c98:	7bfb      	ldrb	r3, [r7, #15]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d112      	bne.n	8005cc4 <USBH_AUDIO_ClassRequest+0xd4>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	2207      	movs	r2, #7
 8005ca2:	701a      	strb	r2, [r3, #0]
          AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	2206      	movs	r2, #6
 8005ca8:	705a      	strb	r2, [r3, #1]

          AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 8005caa:	693b      	ldr	r3, [r7, #16]
 8005cac:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8005cb0:	693b      	ldr	r3, [r7, #16]
 8005cb2:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
          AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005cc2:	e06a      	b.n	8005d9a <USBH_AUDIO_ClassRequest+0x1aa>
        else if (req_status == USBH_NOT_SUPPORTED)
 8005cc4:	7bfb      	ldrb	r3, [r7, #15]
 8005cc6:	2b03      	cmp	r3, #3
 8005cc8:	d167      	bne.n	8005d9a <USBH_AUDIO_ClassRequest+0x1aa>
          status = USBH_FAIL;
 8005cca:	2302      	movs	r3, #2
 8005ccc:	75fb      	strb	r3, [r7, #23]
      break;
 8005cce:	e064      	b.n	8005d9a <USBH_AUDIO_ClassRequest+0x1aa>
        AUDIO_Handle->req_state = AUDIO_REQ_CS_REQUESTS;
 8005cd0:	693b      	ldr	r3, [r7, #16]
 8005cd2:	2207      	movs	r2, #7
 8005cd4:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005cd6:	693b      	ldr	r3, [r7, #16]
 8005cd8:	2206      	movs	r2, #6
 8005cda:	705a      	strb	r2, [r3, #1]
      break;
 8005cdc:	e05d      	b.n	8005d9a <USBH_AUDIO_ClassRequest+0x1aa>

    case AUDIO_REQ_CS_REQUESTS:
      if (USBH_AUDIO_HandleCSRequest(phost) == USBH_OK)
 8005cde:	6878      	ldr	r0, [r7, #4]
 8005ce0:	f000 f938 	bl	8005f54 <USBH_AUDIO_HandleCSRequest>
 8005ce4:	4603      	mov	r3, r0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d159      	bne.n	8005d9e <USBH_AUDIO_ClassRequest+0x1ae>
      {
        AUDIO_Handle->req_state = AUDIO_REQ_SET_IN_INTERFACE;
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2205      	movs	r2, #5
 8005cee:	701a      	strb	r2, [r3, #0]
      }
      break;
 8005cf0:	e055      	b.n	8005d9e <USBH_AUDIO_ClassRequest+0x1ae>

    case AUDIO_REQ_SET_IN_INTERFACE:
      if (AUDIO_Handle->microphone.supported == 1U)
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8005cf8:	2b01      	cmp	r3, #1
 8005cfa:	d118      	bne.n	8005d2e <USBH_AUDIO_ClassRequest+0x13e>
      {
        req_status = USBH_SetInterface(phost,
 8005cfc:	693b      	ldr	r3, [r7, #16]
 8005cfe:	f893 1140 	ldrb.w	r1, [r3, #320]	@ 0x140
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	f893 3141 	ldrb.w	r3, [r3, #321]	@ 0x141
 8005d08:	461a      	mov	r2, r3
 8005d0a:	6878      	ldr	r0, [r7, #4]
 8005d0c:	f006 fbc8 	bl	800c4a0 <USBH_SetInterface>
 8005d10:	4603      	mov	r3, r0
 8005d12:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->microphone.interface,
                                       AUDIO_Handle->microphone.AltSettings);

        if (req_status == USBH_OK)
 8005d14:	7bfb      	ldrb	r3, [r7, #15]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d103      	bne.n	8005d22 <USBH_AUDIO_ClassRequest+0x132>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2206      	movs	r2, #6
 8005d1e:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005d20:	e03f      	b.n	8005da2 <USBH_AUDIO_ClassRequest+0x1b2>
        else if (req_status == USBH_NOT_SUPPORTED)
 8005d22:	7bfb      	ldrb	r3, [r7, #15]
 8005d24:	2b03      	cmp	r3, #3
 8005d26:	d13c      	bne.n	8005da2 <USBH_AUDIO_ClassRequest+0x1b2>
          status = USBH_FAIL;
 8005d28:	2302      	movs	r3, #2
 8005d2a:	75fb      	strb	r3, [r7, #23]
      break;
 8005d2c:	e039      	b.n	8005da2 <USBH_AUDIO_ClassRequest+0x1b2>
        AUDIO_Handle->req_state = AUDIO_REQ_SET_OUT_INTERFACE;
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2206      	movs	r2, #6
 8005d32:	701a      	strb	r2, [r3, #0]
      break;
 8005d34:	e035      	b.n	8005da2 <USBH_AUDIO_ClassRequest+0x1b2>
    case AUDIO_REQ_SET_OUT_INTERFACE:
      if (AUDIO_Handle->headphone.supported == 1U)
 8005d36:	693b      	ldr	r3, [r7, #16]
 8005d38:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8005d3c:	2b01      	cmp	r3, #1
 8005d3e:	d118      	bne.n	8005d72 <USBH_AUDIO_ClassRequest+0x182>
      {
        req_status = USBH_SetInterface(phost,
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	f893 10f8 	ldrb.w	r1, [r3, #248]	@ 0xf8
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	f893 30f9 	ldrb.w	r3, [r3, #249]	@ 0xf9
 8005d4c:	461a      	mov	r2, r3
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f006 fba6 	bl	800c4a0 <USBH_SetInterface>
 8005d54:	4603      	mov	r3, r0
 8005d56:	73fb      	strb	r3, [r7, #15]
                                       AUDIO_Handle->headphone.interface,
                                       AUDIO_Handle->headphone.AltSettings);

        if (req_status == USBH_OK)
 8005d58:	7bfb      	ldrb	r3, [r7, #15]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d103      	bne.n	8005d66 <USBH_AUDIO_ClassRequest+0x176>
        {
          AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	2202      	movs	r2, #2
 8005d62:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8005d64:	e01f      	b.n	8005da6 <USBH_AUDIO_ClassRequest+0x1b6>
        else if (req_status == USBH_NOT_SUPPORTED)
 8005d66:	7bfb      	ldrb	r3, [r7, #15]
 8005d68:	2b03      	cmp	r3, #3
 8005d6a:	d11c      	bne.n	8005da6 <USBH_AUDIO_ClassRequest+0x1b6>
          status = USBH_FAIL;
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	75fb      	strb	r3, [r7, #23]
      break;
 8005d70:	e019      	b.n	8005da6 <USBH_AUDIO_ClassRequest+0x1b6>
        AUDIO_Handle->req_state = AUDIO_REQ_IDLE;
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	2202      	movs	r2, #2
 8005d76:	701a      	strb	r2, [r3, #0]
      break;
 8005d78:	e015      	b.n	8005da6 <USBH_AUDIO_ClassRequest+0x1b6>
    case AUDIO_REQ_IDLE:
      AUDIO_Handle->play_state = AUDIO_PLAYBACK_INIT;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	709a      	strb	r2, [r3, #2]
      phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8005d86:	2102      	movs	r1, #2
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	4798      	blx	r3
      status  = USBH_OK;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8005d90:	e00a      	b.n	8005da8 <USBH_AUDIO_ClassRequest+0x1b8>

    default:
      break;
 8005d92:	bf00      	nop
 8005d94:	e008      	b.n	8005da8 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8005d96:	bf00      	nop
 8005d98:	e006      	b.n	8005da8 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8005d9a:	bf00      	nop
 8005d9c:	e004      	b.n	8005da8 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8005d9e:	bf00      	nop
 8005da0:	e002      	b.n	8005da8 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8005da2:	bf00      	nop
 8005da4:	e000      	b.n	8005da8 <USBH_AUDIO_ClassRequest+0x1b8>
      break;
 8005da6:	bf00      	nop
  }
  return status;
 8005da8:	7dfb      	ldrb	r3, [r7, #23]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3718      	adds	r7, #24
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
 8005db2:	bf00      	nop

08005db4 <USBH_AUDIO_CSRequest>:
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_CSRequest(USBH_HandleTypeDef *phost,
                                               uint8_t feature, uint8_t channel)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b088      	sub	sp, #32
 8005db8:	af02      	add	r7, sp, #8
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	460b      	mov	r3, r1
 8005dbe:	70fb      	strb	r3, [r7, #3]
 8005dc0:	4613      	mov	r3, r2
 8005dc2:	70bb      	strb	r3, [r7, #2]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005dca:	69db      	ldr	r3, [r3, #28]
 8005dcc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef req_status = USBH_BUSY;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	73fb      	strb	r3, [r7, #15]
  uint16_t VolumeCtl, ResolutionCtl;

  /* Switch AUDIO REQ state machine */
  switch (AUDIO_Handle->cs_req_state)
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	785b      	ldrb	r3, [r3, #1]
 8005dda:	3b04      	subs	r3, #4
 8005ddc:	2b04      	cmp	r3, #4
 8005dde:	f200 80aa 	bhi.w	8005f36 <USBH_AUDIO_CSRequest+0x182>
 8005de2:	a201      	add	r2, pc, #4	@ (adr r2, 8005de8 <USBH_AUDIO_CSRequest+0x34>)
 8005de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005de8:	08005e45 	.word	0x08005e45
 8005dec:	08005e8b 	.word	0x08005e8b
 8005df0:	08005dfd 	.word	0x08005dfd
 8005df4:	08005eeb 	.word	0x08005eeb
 8005df8:	08005f31 	.word	0x08005f31
  {
    case AUDIO_REQ_GET_VOLUME:
      req_status = USBH_AC_GetCur(phost,
 8005dfc:	78fa      	ldrb	r2, [r7, #3]
 8005dfe:	2302      	movs	r3, #2
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	78bb      	ldrb	r3, [r7, #2]
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2302      	movs	r3, #2
 8005e08:	2106      	movs	r1, #6
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f000 fe8a 	bl	8006b24 <USBH_AC_GetCur>
 8005e10:	4603      	mov	r3, r0
 8005e12:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	f000 808f 	beq.w	8005f3a <USBH_AUDIO_CSRequest+0x186>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MIN_VOLUME;
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	2204      	movs	r2, #4
 8005e20:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005e2e:	3302      	adds	r3, #2
 8005e30:	881b      	ldrh	r3, [r3, #0]
 8005e32:	021b      	lsls	r3, r3, #8
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	4313      	orrs	r3, r2
 8005e38:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volume = (uint32_t)VolumeCtl;
 8005e3a:	897a      	ldrh	r2, [r7, #10]
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      }
      break;
 8005e42:	e07a      	b.n	8005f3a <USBH_AUDIO_CSRequest+0x186>

    case AUDIO_REQ_GET_MIN_VOLUME:
      req_status = USBH_AC_GetMin(phost,
 8005e44:	78fa      	ldrb	r2, [r7, #3]
 8005e46:	2302      	movs	r3, #2
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	78bb      	ldrb	r3, [r7, #2]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2302      	movs	r3, #2
 8005e50:	2106      	movs	r1, #6
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f001 f82b 	bl	8006eae <USBH_AC_GetMin>
 8005e58:	4603      	mov	r3, r0
 8005e5a:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005e5c:	7bfb      	ldrb	r3, [r7, #15]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d06d      	beq.n	8005f3e <USBH_AUDIO_CSRequest+0x18a>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_MAX_VOLUME;
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	2205      	movs	r2, #5
 8005e66:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005e68:	693b      	ldr	r3, [r7, #16]
 8005e6a:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005e74:	3302      	adds	r3, #2
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	021b      	lsls	r3, r3, #8
 8005e7a:	b29b      	uxth	r3, r3
 8005e7c:	4313      	orrs	r3, r2
 8005e7e:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMin = (uint32_t)VolumeCtl;
 8005e80:	897a      	ldrh	r2, [r7, #10]
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f8c3 212c 	str.w	r2, [r3, #300]	@ 0x12c
      }
      break;
 8005e88:	e059      	b.n	8005f3e <USBH_AUDIO_CSRequest+0x18a>

    case AUDIO_REQ_GET_MAX_VOLUME:
      req_status = USBH_AC_GetMax(phost,
 8005e8a:	78fa      	ldrb	r2, [r7, #3]
 8005e8c:	2302      	movs	r3, #2
 8005e8e:	9301      	str	r3, [sp, #4]
 8005e90:	78bb      	ldrb	r3, [r7, #2]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	2302      	movs	r3, #2
 8005e96:	2106      	movs	r1, #6
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 feda 	bl	8006c52 <USBH_AC_GetMax>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);               /* length   */
      if (req_status != USBH_BUSY)
 8005ea2:	7bfb      	ldrb	r3, [r7, #15]
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d04c      	beq.n	8005f42 <USBH_AUDIO_CSRequest+0x18e>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_RESOLUTION;
 8005ea8:	693b      	ldr	r3, [r7, #16]
 8005eaa:	2207      	movs	r2, #7
 8005eac:	705a      	strb	r2, [r3, #1]
        VolumeCtl = LE16(&(AUDIO_Handle->mem[0]));
 8005eae:	693b      	ldr	r3, [r7, #16]
 8005eb0:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8005eb4:	693b      	ldr	r3, [r7, #16]
 8005eb6:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005eba:	3302      	adds	r3, #2
 8005ebc:	881b      	ldrh	r3, [r3, #0]
 8005ebe:	021b      	lsls	r3, r3, #8
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	4313      	orrs	r3, r2
 8005ec4:	817b      	strh	r3, [r7, #10]
        AUDIO_Handle->headphone.attribute.volumeMax = (uint32_t)VolumeCtl;
 8005ec6:	897a      	ldrh	r2, [r7, #10]
 8005ec8:	693b      	ldr	r3, [r7, #16]
 8005eca:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        if (AUDIO_Handle->headphone.attribute.volumeMax < AUDIO_Handle->headphone.attribute.volumeMin)
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8005ed4:	693b      	ldr	r3, [r7, #16]
 8005ed6:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d231      	bcs.n	8005f42 <USBH_AUDIO_CSRequest+0x18e>
        {
          AUDIO_Handle->headphone.attribute.volumeMax = 0xFF00U;
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8005ee4:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
        }
      }
      break;
 8005ee8:	e02b      	b.n	8005f42 <USBH_AUDIO_CSRequest+0x18e>

    case AUDIO_REQ_GET_RESOLUTION:
      req_status = USBH_AC_GetRes(phost,
 8005eea:	78fa      	ldrb	r2, [r7, #3]
 8005eec:	2302      	movs	r3, #2
 8005eee:	9301      	str	r3, [sp, #4]
 8005ef0:	78bb      	ldrb	r3, [r7, #2]
 8005ef2:	9300      	str	r3, [sp, #0]
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	2106      	movs	r1, #6
 8005ef8:	6878      	ldr	r0, [r7, #4]
 8005efa:	f000 ff41 	bl	8006d80 <USBH_AC_GetRes>
 8005efe:	4603      	mov	r3, r0
 8005f00:	73fb      	strb	r3, [r7, #15]
                                  UAC_FEATURE_UNIT,     /* subtype  */
                                  feature,              /* feature  */
                                  VOLUME_CONTROL,       /* Selector */
                                  channel,              /* channel  */
                                  0x02U);                /* length   */
      if (req_status != USBH_BUSY)
 8005f02:	7bfb      	ldrb	r3, [r7, #15]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d01e      	beq.n	8005f46 <USBH_AUDIO_CSRequest+0x192>
      {
        AUDIO_Handle->cs_req_state = AUDIO_REQ_CS_IDLE;
 8005f08:	693b      	ldr	r3, [r7, #16]
 8005f0a:	2208      	movs	r2, #8
 8005f0c:	705a      	strb	r2, [r3, #1]
        ResolutionCtl = LE16(&AUDIO_Handle->mem[0]);
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8005f1a:	3302      	adds	r3, #2
 8005f1c:	881b      	ldrh	r3, [r3, #0]
 8005f1e:	021b      	lsls	r3, r3, #8
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	4313      	orrs	r3, r2
 8005f24:	81bb      	strh	r3, [r7, #12]
        AUDIO_Handle->headphone.attribute.resolution = (uint32_t)ResolutionCtl;
 8005f26:	89ba      	ldrh	r2, [r7, #12]
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	f8c3 2138 	str.w	r2, [r3, #312]	@ 0x138
      }
      break;
 8005f2e:	e00a      	b.n	8005f46 <USBH_AUDIO_CSRequest+0x192>


    case AUDIO_REQ_CS_IDLE:
      status = USBH_OK;
 8005f30:	2300      	movs	r3, #0
 8005f32:	75fb      	strb	r3, [r7, #23]
      break;
 8005f34:	e008      	b.n	8005f48 <USBH_AUDIO_CSRequest+0x194>

    default:
      break;
 8005f36:	bf00      	nop
 8005f38:	e006      	b.n	8005f48 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005f3a:	bf00      	nop
 8005f3c:	e004      	b.n	8005f48 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005f3e:	bf00      	nop
 8005f40:	e002      	b.n	8005f48 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005f42:	bf00      	nop
 8005f44:	e000      	b.n	8005f48 <USBH_AUDIO_CSRequest+0x194>
      break;
 8005f46:	bf00      	nop
  }
  return status;
 8005f48:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	3718      	adds	r7, #24
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	bd80      	pop	{r7, pc}
 8005f52:	bf00      	nop

08005f54 <USBH_AUDIO_HandleCSRequest>:
  *         and associated channels for Audio class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_HandleCSRequest(USBH_HandleTypeDef *phost)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	b084      	sub	sp, #16
 8005f58:	af00      	add	r7, sp, #0
 8005f5a:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status = USBH_BUSY;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef cs_status = USBH_BUSY;
 8005f60:	2301      	movs	r3, #1
 8005f62:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005f6a:	69db      	ldr	r3, [r3, #28]
 8005f6c:	60bb      	str	r3, [r7, #8]

  cs_status = USBH_AUDIO_CSRequest(phost,
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
 8005f74:	68bb      	ldr	r3, [r7, #8]
 8005f76:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	6878      	ldr	r0, [r7, #4]
 8005f7e:	f7ff ff19 	bl	8005db4 <USBH_AUDIO_CSRequest>
 8005f82:	4603      	mov	r3, r0
 8005f84:	73bb      	strb	r3, [r7, #14]
                                   AUDIO_Handle->temp_feature,
                                   AUDIO_Handle->temp_channels);

  if (cs_status != USBH_BUSY)
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	2b01      	cmp	r3, #1
 8005f8a:	d01c      	beq.n	8005fc6 <USBH_AUDIO_HandleCSRequest+0x72>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 8005f8c:	68bb      	ldr	r3, [r7, #8]
 8005f8e:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d10c      	bne.n	8005fb0 <USBH_AUDIO_HandleCSRequest+0x5c>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 8005f96:	68bb      	ldr	r3, [r7, #8]
 8005f98:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 8005f9c:	68bb      	ldr	r3, [r7, #8]
 8005f9e:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = 0U;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 8005faa:	2300      	movs	r3, #0
 8005fac:	73fb      	strb	r3, [r7, #15]
 8005fae:	e007      	b.n	8005fc0 <USBH_AUDIO_HandleCSRequest+0x6c>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	b2da      	uxtb	r2, r3
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	2206      	movs	r2, #6
 8005fc4:	705a      	strb	r2, [r3, #1]
    (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
  }

  return status;
 8005fc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fc8:	4618      	mov	r0, r3
 8005fca:	3710      	adds	r7, #16
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd80      	pop	{r7, pc}

08005fd0 <USBH_AUDIO_Process>:
  *         The function is for managing state machine for Audio data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Process(USBH_HandleTypeDef *phost)
{
 8005fd0:	b580      	push	{r7, lr}
 8005fd2:	b084      	sub	sp, #16
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005fd8:	2301      	movs	r3, #1
 8005fda:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *)  phost->pActiveClass->pData;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	60bb      	str	r3, [r7, #8]

  if (AUDIO_Handle->headphone.supported == 1U)
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	f893 30fa 	ldrb.w	r3, [r3, #250]	@ 0xfa
 8005fec:	2b01      	cmp	r3, #1
 8005fee:	d102      	bne.n	8005ff6 <USBH_AUDIO_Process+0x26>
  {
    (void)USBH_AUDIO_OutputStream(phost);
 8005ff0:	6878      	ldr	r0, [r7, #4]
 8005ff2:	f001 f8dd 	bl	80071b0 <USBH_AUDIO_OutputStream>
  }

  if (AUDIO_Handle->microphone.supported == 1U)
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	f893 3142 	ldrb.w	r3, [r3, #322]	@ 0x142
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d102      	bne.n	8006006 <USBH_AUDIO_Process+0x36>
  {
    (void)USBH_AUDIO_InputStream(phost);
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 f813 	bl	800702c <USBH_AUDIO_InputStream>
  }

  return status;
 8006006:	7bfb      	ldrb	r3, [r7, #15]
}
 8006008:	4618      	mov	r0, r3
 800600a:	3710      	adds	r7, #16
 800600c:	46bd      	mov	sp, r7
 800600e:	bd80      	pop	{r7, pc}

08006010 <USBH_AUDIO_SOFProcess>:
  *         The function is for managing the SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006010:	b480      	push	{r7}
 8006012:	b083      	sub	sp, #12
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	370c      	adds	r7, #12
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr

08006026 <USBH_AUDIO_FindAudioStreamingIN>:
  * @brief  Find IN Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingIN(USBH_HandleTypeDef *phost)
{
 8006026:	b480      	push	{r7}
 8006028:	b085      	sub	sp, #20
 800602a:	af00      	add	r7, sp, #0
 800602c:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 800602e:	2302      	movs	r3, #2
 8006030:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006038:	69db      	ldr	r3, [r3, #28]
 800603a:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 800603c:	2300      	movs	r3, #0
 800603e:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006040:	2300      	movs	r3, #0
 8006042:	73fb      	strb	r3, [r7, #15]
 8006044:	e09e      	b.n	8006184 <USBH_AUDIO_FindAudioStreamingIN+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006046:	7bfb      	ldrb	r3, [r7, #15]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	2132      	movs	r1, #50	@ 0x32
 800604c:	fb01 f303 	mul.w	r3, r1, r3
 8006050:	4413      	add	r3, r2
 8006052:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8006056:	781b      	ldrb	r3, [r3, #0]
 8006058:	2b01      	cmp	r3, #1
 800605a:	f040 8090 	bne.w	800617e <USBH_AUDIO_FindAudioStreamingIN+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 800605e:	7bfb      	ldrb	r3, [r7, #15]
 8006060:	687a      	ldr	r2, [r7, #4]
 8006062:	2132      	movs	r1, #50	@ 0x32
 8006064:	fb01 f303 	mul.w	r3, r1, r3
 8006068:	4413      	add	r3, r2
 800606a:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 800606e:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 8006070:	2b02      	cmp	r3, #2
 8006072:	f040 8084 	bne.w	800617e <USBH_AUDIO_FindAudioStreamingIN+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 8006076:	7bfb      	ldrb	r3, [r7, #15]
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	2132      	movs	r1, #50	@ 0x32
 800607c:	fb01 f303 	mul.w	r3, r1, r3
 8006080:	4413      	add	r3, r2
 8006082:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	b25b      	sxtb	r3, r3
 800608a:	2b00      	cmp	r3, #0
 800608c:	da77      	bge.n	800617e <USBH_AUDIO_FindAudioStreamingIN+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800608e:	7bfb      	ldrb	r3, [r7, #15]
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	2132      	movs	r1, #50	@ 0x32
 8006094:	fb01 f303 	mul.w	r3, r1, r3
 8006098:	4413      	add	r3, r2
 800609a:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800609e:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U) &&
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d06c      	beq.n	800617e <USBH_AUDIO_FindAudioStreamingIN+0x158>
      {
        AUDIO_Handle->stream_in[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060a4:	7bfb      	ldrb	r3, [r7, #15]
 80060a6:	7bba      	ldrb	r2, [r7, #14]
 80060a8:	6879      	ldr	r1, [r7, #4]
 80060aa:	2032      	movs	r0, #50	@ 0x32
 80060ac:	fb00 f303 	mul.w	r3, r0, r3
 80060b0:	440b      	add	r3, r1
 80060b2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80060b6:	7818      	ldrb	r0, [r3, #0]
 80060b8:	68b9      	ldr	r1, [r7, #8]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	005b      	lsls	r3, r3, #1
 80060c2:	440b      	add	r3, r1
 80060c4:	3306      	adds	r3, #6
 80060c6:	4602      	mov	r2, r0
 80060c8:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060ca:	7bfb      	ldrb	r3, [r7, #15]
 80060cc:	7bba      	ldrb	r2, [r7, #14]
 80060ce:	6879      	ldr	r1, [r7, #4]
 80060d0:	2032      	movs	r0, #50	@ 0x32
 80060d2:	fb00 f303 	mul.w	r3, r0, r3
 80060d6:	440b      	add	r3, r1
 80060d8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80060dc:	8818      	ldrh	r0, [r3, #0]
 80060de:	68b9      	ldr	r1, [r7, #8]
 80060e0:	4613      	mov	r3, r2
 80060e2:	009b      	lsls	r3, r3, #2
 80060e4:	4413      	add	r3, r2
 80060e6:	005b      	lsls	r3, r3, #1
 80060e8:	440b      	add	r3, r1
 80060ea:	3308      	adds	r3, #8
 80060ec:	4602      	mov	r2, r0
 80060ee:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80060f0:	7bfb      	ldrb	r3, [r7, #15]
 80060f2:	7bba      	ldrb	r2, [r7, #14]
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	2032      	movs	r0, #50	@ 0x32
 80060f8:	fb00 f303 	mul.w	r3, r0, r3
 80060fc:	440b      	add	r3, r1
 80060fe:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8006102:	7818      	ldrb	r0, [r3, #0]
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	4613      	mov	r3, r2
 8006108:	009b      	lsls	r3, r3, #2
 800610a:	4413      	add	r3, r2
 800610c:	005b      	lsls	r3, r3, #1
 800610e:	440b      	add	r3, r1
 8006110:	330b      	adds	r3, #11
 8006112:	4602      	mov	r2, r0
 8006114:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006116:	7bfb      	ldrb	r3, [r7, #15]
 8006118:	7bba      	ldrb	r2, [r7, #14]
 800611a:	6879      	ldr	r1, [r7, #4]
 800611c:	2032      	movs	r0, #50	@ 0x32
 800611e:	fb00 f303 	mul.w	r3, r0, r3
 8006122:	440b      	add	r3, r1
 8006124:	f203 3345 	addw	r3, r3, #837	@ 0x345
 8006128:	7818      	ldrb	r0, [r3, #0]
 800612a:	68b9      	ldr	r1, [r7, #8]
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	440b      	add	r3, r1
 8006136:	330a      	adds	r3, #10
 8006138:	4602      	mov	r2, r0
 800613a:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 800613c:	7bfb      	ldrb	r3, [r7, #15]
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	2132      	movs	r1, #50	@ 0x32
 8006142:	fb01 f303 	mul.w	r3, r1, r3
 8006146:	4413      	add	r3, r2
 8006148:	f203 3352 	addw	r3, r3, #850	@ 0x352
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	7bba      	ldrb	r2, [r7, #14]
 8006150:	4618      	mov	r0, r3
 8006152:	68b9      	ldr	r1, [r7, #8]
 8006154:	4613      	mov	r3, r2
 8006156:	009b      	lsls	r3, r3, #2
 8006158:	4413      	add	r3, r2
 800615a:	005b      	lsls	r3, r3, #1
 800615c:	440b      	add	r3, r1
 800615e:	330e      	adds	r3, #14
 8006160:	4602      	mov	r2, r0
 8006162:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_in[alt_settings].valid = 1U;
 8006164:	7bba      	ldrb	r2, [r7, #14]
 8006166:	68b9      	ldr	r1, [r7, #8]
 8006168:	4613      	mov	r3, r2
 800616a:	009b      	lsls	r3, r3, #2
 800616c:	4413      	add	r3, r2
 800616e:	005b      	lsls	r3, r3, #1
 8006170:	440b      	add	r3, r1
 8006172:	330c      	adds	r3, #12
 8006174:	2201      	movs	r2, #1
 8006176:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 8006178:	7bbb      	ldrb	r3, [r7, #14]
 800617a:	3301      	adds	r3, #1
 800617c:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 800617e:	7bfb      	ldrb	r3, [r7, #15]
 8006180:	3301      	adds	r3, #1
 8006182:	73fb      	strb	r3, [r7, #15]
 8006184:	7bfb      	ldrb	r3, [r7, #15]
 8006186:	2b09      	cmp	r3, #9
 8006188:	f67f af5d 	bls.w	8006046 <USBH_AUDIO_FindAudioStreamingIN+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800618c:	7bbb      	ldrb	r3, [r7, #14]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d001      	beq.n	8006196 <USBH_AUDIO_FindAudioStreamingIN+0x170>
  {
    status = USBH_OK;
 8006192:	2300      	movs	r3, #0
 8006194:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006196:	7b7b      	ldrb	r3, [r7, #13]
}
 8006198:	4618      	mov	r0, r3
 800619a:	3714      	adds	r7, #20
 800619c:	46bd      	mov	sp, r7
 800619e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061a2:	4770      	bx	lr

080061a4 <USBH_AUDIO_FindAudioStreamingOUT>:
  * @brief  Find OUT Audio Streaming interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindAudioStreamingOUT(USBH_HandleTypeDef *phost)
{
 80061a4:	b480      	push	{r7}
 80061a6:	b085      	sub	sp, #20
 80061a8:	af00      	add	r7, sp, #0
 80061aa:	6078      	str	r0, [r7, #4]
  uint8_t interface, alt_settings;
  USBH_StatusTypeDef status = USBH_FAIL;
 80061ac:	2302      	movs	r3, #2
 80061ae:	737b      	strb	r3, [r7, #13]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80061b6:	69db      	ldr	r3, [r3, #28]
 80061b8:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOSTREAMING IN interface */
  alt_settings = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80061be:	2300      	movs	r3, #0
 80061c0:	73fb      	strb	r3, [r7, #15]
 80061c2:	e09e      	b.n	8006302 <USBH_AUDIO_FindAudioStreamingOUT+0x15e>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80061c4:	7bfb      	ldrb	r3, [r7, #15]
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	2132      	movs	r1, #50	@ 0x32
 80061ca:	fb01 f303 	mul.w	r3, r1, r3
 80061ce:	4413      	add	r3, r2
 80061d0:	f203 3347 	addw	r3, r3, #839	@ 0x347
 80061d4:	781b      	ldrb	r3, [r3, #0]
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	f040 8090 	bne.w	80062fc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
        (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceSubClass == USB_SUBCLASS_AUDIOSTREAMING))
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	2132      	movs	r1, #50	@ 0x32
 80061e2:	fb01 f303 	mul.w	r3, r1, r3
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80061ec:	781b      	ldrb	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == AC_CLASS) &&
 80061ee:	2b02      	cmp	r3, #2
 80061f0:	f040 8084 	bne.w	80062fc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
    {
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
 80061f6:	687a      	ldr	r2, [r7, #4]
 80061f8:	2132      	movs	r1, #50	@ 0x32
 80061fa:	fb01 f303 	mul.w	r3, r1, r3
 80061fe:	4413      	add	r3, r2
 8006200:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	b25b      	sxtb	r3, r3
 8006208:	2b00      	cmp	r3, #0
 800620a:	db77      	blt.n	80062fc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
          (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 800620c:	7bfb      	ldrb	r3, [r7, #15]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	2132      	movs	r1, #50	@ 0x32
 8006212:	fb01 f303 	mul.w	r3, r1, r3
 8006216:	4413      	add	r3, r2
 8006218:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800621c:	881b      	ldrh	r3, [r3, #0]
      if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x00U) &&
 800621e:	2b00      	cmp	r3, #0
 8006220:	d06c      	beq.n	80062fc <USBH_AUDIO_FindAudioStreamingOUT+0x158>
      {
        AUDIO_Handle->stream_out[alt_settings].Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006222:	7bfb      	ldrb	r3, [r7, #15]
 8006224:	7bba      	ldrb	r2, [r7, #14]
 8006226:	6879      	ldr	r1, [r7, #4]
 8006228:	2032      	movs	r0, #50	@ 0x32
 800622a:	fb00 f303 	mul.w	r3, r0, r3
 800622e:	440b      	add	r3, r1
 8006230:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8006234:	7818      	ldrb	r0, [r3, #0]
 8006236:	68b9      	ldr	r1, [r7, #8]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	005b      	lsls	r3, r3, #1
 8006240:	440b      	add	r3, r1
 8006242:	3338      	adds	r3, #56	@ 0x38
 8006244:	4602      	mov	r2, r0
 8006246:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006248:	7bfb      	ldrb	r3, [r7, #15]
 800624a:	7bba      	ldrb	r2, [r7, #14]
 800624c:	6879      	ldr	r1, [r7, #4]
 800624e:	2032      	movs	r0, #50	@ 0x32
 8006250:	fb00 f303 	mul.w	r3, r0, r3
 8006254:	440b      	add	r3, r1
 8006256:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800625a:	8818      	ldrh	r0, [r3, #0]
 800625c:	68b9      	ldr	r1, [r7, #8]
 800625e:	4613      	mov	r3, r2
 8006260:	009b      	lsls	r3, r3, #2
 8006262:	4413      	add	r3, r2
 8006264:	005b      	lsls	r3, r3, #1
 8006266:	440b      	add	r3, r1
 8006268:	333a      	adds	r3, #58	@ 0x3a
 800626a:	4602      	mov	r2, r0
 800626c:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 800626e:	7bfb      	ldrb	r3, [r7, #15]
 8006270:	7bba      	ldrb	r2, [r7, #14]
 8006272:	6879      	ldr	r1, [r7, #4]
 8006274:	2032      	movs	r0, #50	@ 0x32
 8006276:	fb00 f303 	mul.w	r3, r0, r3
 800627a:	440b      	add	r3, r1
 800627c:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 8006280:	7818      	ldrb	r0, [r3, #0]
 8006282:	68b9      	ldr	r1, [r7, #8]
 8006284:	4613      	mov	r3, r2
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	4413      	add	r3, r2
 800628a:	005b      	lsls	r3, r3, #1
 800628c:	440b      	add	r3, r1
 800628e:	333d      	adds	r3, #61	@ 0x3d
 8006290:	4602      	mov	r2, r0
 8006292:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].AltSettings = phost->device.CfgDesc.Itf_Desc[interface].bAlternateSetting;
 8006294:	7bfb      	ldrb	r3, [r7, #15]
 8006296:	7bba      	ldrb	r2, [r7, #14]
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	2032      	movs	r0, #50	@ 0x32
 800629c:	fb00 f303 	mul.w	r3, r0, r3
 80062a0:	440b      	add	r3, r1
 80062a2:	f203 3345 	addw	r3, r3, #837	@ 0x345
 80062a6:	7818      	ldrb	r0, [r3, #0]
 80062a8:	68b9      	ldr	r1, [r7, #8]
 80062aa:	4613      	mov	r3, r2
 80062ac:	009b      	lsls	r3, r3, #2
 80062ae:	4413      	add	r3, r2
 80062b0:	005b      	lsls	r3, r3, #1
 80062b2:	440b      	add	r3, r1
 80062b4:	333c      	adds	r3, #60	@ 0x3c
 80062b6:	4602      	mov	r2, r0
 80062b8:	701a      	strb	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80062ba:	7bfb      	ldrb	r3, [r7, #15]
 80062bc:	687a      	ldr	r2, [r7, #4]
 80062be:	2132      	movs	r1, #50	@ 0x32
 80062c0:	fb01 f303 	mul.w	r3, r1, r3
 80062c4:	4413      	add	r3, r2
 80062c6:	f203 3352 	addw	r3, r3, #850	@ 0x352
 80062ca:	781b      	ldrb	r3, [r3, #0]
 80062cc:	7bba      	ldrb	r2, [r7, #14]
 80062ce:	4618      	mov	r0, r3
 80062d0:	68b9      	ldr	r1, [r7, #8]
 80062d2:	4613      	mov	r3, r2
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	4413      	add	r3, r2
 80062d8:	005b      	lsls	r3, r3, #1
 80062da:	440b      	add	r3, r1
 80062dc:	3340      	adds	r3, #64	@ 0x40
 80062de:	4602      	mov	r2, r0
 80062e0:	801a      	strh	r2, [r3, #0]
        AUDIO_Handle->stream_out[alt_settings].valid = 1U;
 80062e2:	7bba      	ldrb	r2, [r7, #14]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	005b      	lsls	r3, r3, #1
 80062ee:	440b      	add	r3, r1
 80062f0:	333e      	adds	r3, #62	@ 0x3e
 80062f2:	2201      	movs	r2, #1
 80062f4:	701a      	strb	r2, [r3, #0]
        alt_settings++;
 80062f6:	7bbb      	ldrb	r3, [r7, #14]
 80062f8:	3301      	adds	r3, #1
 80062fa:	73bb      	strb	r3, [r7, #14]
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 80062fc:	7bfb      	ldrb	r3, [r7, #15]
 80062fe:	3301      	adds	r3, #1
 8006300:	73fb      	strb	r3, [r7, #15]
 8006302:	7bfb      	ldrb	r3, [r7, #15]
 8006304:	2b09      	cmp	r3, #9
 8006306:	f67f af5d 	bls.w	80061c4 <USBH_AUDIO_FindAudioStreamingOUT+0x20>
      }
    }
  }

  if (alt_settings > 0U)
 800630a:	7bbb      	ldrb	r3, [r7, #14]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d001      	beq.n	8006314 <USBH_AUDIO_FindAudioStreamingOUT+0x170>
  {
    status = USBH_OK;
 8006310:	2300      	movs	r3, #0
 8006312:	737b      	strb	r3, [r7, #13]
  }

  return status;
 8006314:	7b7b      	ldrb	r3, [r7, #13]
}
 8006316:	4618      	mov	r0, r3
 8006318:	3714      	adds	r7, #20
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <USBH_AUDIO_FindHIDControl>:
  * @brief  Find HID Control interfaces
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_FindHIDControl(USBH_HandleTypeDef *phost)
{
 8006322:	b580      	push	{r7, lr}
 8006324:	b084      	sub	sp, #16
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  uint8_t interface;
  USBH_StatusTypeDef status = USBH_FAIL;
 800632a:	2302      	movs	r3, #2
 800632c:	73bb      	strb	r3, [r7, #14]
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006334:	69db      	ldr	r3, [r3, #28]
 8006336:	60bb      	str	r3, [r7, #8]

  /* Look For AUDIOCONTROL  interface */
  interface = USBH_FindInterface(phost, AC_CLASS, USB_SUBCLASS_AUDIOCONTROL, 0xFFU);
 8006338:	23ff      	movs	r3, #255	@ 0xff
 800633a:	2201      	movs	r2, #1
 800633c:	2101      	movs	r1, #1
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f005 fac4 	bl	800b8cc <USBH_FindInterface>
 8006344:	4603      	mov	r3, r0
 8006346:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES))
 8006348:	7bfb      	ldrb	r3, [r7, #15]
 800634a:	2bff      	cmp	r3, #255	@ 0xff
 800634c:	d002      	beq.n	8006354 <USBH_AUDIO_FindHIDControl+0x32>
 800634e:	7bfb      	ldrb	r3, [r7, #15]
 8006350:	2b09      	cmp	r3, #9
 8006352:	d901      	bls.n	8006358 <USBH_AUDIO_FindHIDControl+0x36>
  {
    return USBH_FAIL;
 8006354:	2302      	movs	r3, #2
 8006356:	e062      	b.n	800641e <USBH_AUDIO_FindHIDControl+0xfc>
  }

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006358:	2300      	movs	r3, #0
 800635a:	73fb      	strb	r3, [r7, #15]
 800635c:	e05b      	b.n	8006416 <USBH_AUDIO_FindHIDControl+0xf4>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	2132      	movs	r1, #50	@ 0x32
 8006364:	fb01 f303 	mul.w	r3, r1, r3
 8006368:	4413      	add	r3, r2
 800636a:	f203 3347 	addw	r3, r3, #839	@ 0x347
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	2b03      	cmp	r3, #3
 8006372:	d14d      	bne.n	8006410 <USBH_AUDIO_FindHIDControl+0xee>
        (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize > 0U))
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	2132      	movs	r1, #50	@ 0x32
 800637a:	fb01 f303 	mul.w	r3, r1, r3
 800637e:	4413      	add	r3, r2
 8006380:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8006384:	881b      	ldrh	r3, [r3, #0]
    if ((phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == 0x03U) && /*HID*/
 8006386:	2b00      	cmp	r3, #0
 8006388:	d042      	beq.n	8006410 <USBH_AUDIO_FindHIDControl+0xee>
    {
      if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) == 0x80U)
 800638a:	7bfb      	ldrb	r3, [r7, #15]
 800638c:	687a      	ldr	r2, [r7, #4]
 800638e:	2132      	movs	r1, #50	@ 0x32
 8006390:	fb01 f303 	mul.w	r3, r1, r3
 8006394:	4413      	add	r3, r2
 8006396:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	b25b      	sxtb	r3, r3
 800639e:	2b00      	cmp	r3, #0
 80063a0:	da36      	bge.n	8006410 <USBH_AUDIO_FindHIDControl+0xee>
      {
        AUDIO_Handle->control.Ep = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80063a2:	7bfb      	ldrb	r3, [r7, #15]
 80063a4:	687a      	ldr	r2, [r7, #4]
 80063a6:	2132      	movs	r1, #50	@ 0x32
 80063a8:	fb01 f303 	mul.w	r3, r1, r3
 80063ac:	4413      	add	r3, r2
 80063ae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80063b2:	781a      	ldrb	r2, [r3, #0]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	f883 2184 	strb.w	r2, [r3, #388]	@ 0x184
        AUDIO_Handle->control.EpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80063ba:	7bfb      	ldrb	r3, [r7, #15]
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	2132      	movs	r1, #50	@ 0x32
 80063c0:	fb01 f303 	mul.w	r3, r1, r3
 80063c4:	4413      	add	r3, r2
 80063c6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80063ca:	881a      	ldrh	r2, [r3, #0]
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f8a3 2186 	strh.w	r2, [r3, #390]	@ 0x186
        AUDIO_Handle->control.interface = phost->device.CfgDesc.Itf_Desc[interface].bInterfaceNumber;
 80063d2:	7bfb      	ldrb	r3, [r7, #15]
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	2132      	movs	r1, #50	@ 0x32
 80063d8:	fb01 f303 	mul.w	r3, r1, r3
 80063dc:	4413      	add	r3, r2
 80063de:	f503 7351 	add.w	r3, r3, #836	@ 0x344
 80063e2:	781a      	ldrb	r2, [r3, #0]
 80063e4:	68bb      	ldr	r3, [r7, #8]
 80063e6:	f883 2188 	strb.w	r2, [r3, #392]	@ 0x188
        AUDIO_Handle->control.Poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 80063ea:	7bfb      	ldrb	r3, [r7, #15]
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	2132      	movs	r1, #50	@ 0x32
 80063f0:	fb01 f303 	mul.w	r3, r1, r3
 80063f4:	4413      	add	r3, r2
 80063f6:	f203 3352 	addw	r3, r3, #850	@ 0x352
 80063fa:	781a      	ldrb	r2, [r3, #0]
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	f883 218b 	strb.w	r2, [r3, #395]	@ 0x18b
        AUDIO_Handle->control.supported = 1U;
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2189 	strb.w	r2, [r3, #393]	@ 0x189
        status = USBH_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73bb      	strb	r3, [r7, #14]
        break;
 800640e:	e005      	b.n	800641c <USBH_AUDIO_FindHIDControl+0xfa>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface++)
 8006410:	7bfb      	ldrb	r3, [r7, #15]
 8006412:	3301      	adds	r3, #1
 8006414:	73fb      	strb	r3, [r7, #15]
 8006416:	7bfb      	ldrb	r3, [r7, #15]
 8006418:	2b09      	cmp	r3, #9
 800641a:	d9a0      	bls.n	800635e <USBH_AUDIO_FindHIDControl+0x3c>
      }
    }
  }

  return status;
 800641c:	7bbb      	ldrb	r3, [r7, #14]
}
 800641e:	4618      	mov	r0, r3
 8006420:	3710      	adds	r7, #16
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}

08006426 <USBH_AUDIO_ParseCSDescriptors>:
  * @brief  Parse AC and interfaces Descriptors
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_ParseCSDescriptors(USBH_HandleTypeDef *phost)
{
 8006426:	b580      	push	{r7, lr}
 8006428:	b088      	sub	sp, #32
 800642a:	af00      	add	r7, sp, #0
 800642c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800642e:	2300      	movs	r3, #0
 8006430:	77fb      	strb	r3, [r7, #31]
  USBH_DescHeader_t            *pdesc;
  uint16_t                      ptr;
  uint8_t                       itf_index = 0U;
 8006432:	2300      	movs	r3, #0
 8006434:	75fb      	strb	r3, [r7, #23]
  uint8_t                       itf_number = 0U;
 8006436:	2300      	movs	r3, #0
 8006438:	75bb      	strb	r3, [r7, #22]
  uint8_t                       alt_setting;
  AUDIO_HandleTypeDef           *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006440:	69db      	ldr	r3, [r3, #28]
 8006442:	613b      	str	r3, [r7, #16]
  pdesc   = (USBH_DescHeader_t *)(void *)(phost->device.CfgDesc_Raw);
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	331c      	adds	r3, #28
 8006448:	61bb      	str	r3, [r7, #24]
  ptr = USB_LEN_CFG_DESC;
 800644a:	2309      	movs	r3, #9
 800644c:	81bb      	strh	r3, [r7, #12]

  AUDIO_Handle->class_desc.FeatureUnitNum = 0U;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	2200      	movs	r2, #0
 8006452:	f8a3 20ee 	strh.w	r2, [r3, #238]	@ 0xee
  AUDIO_Handle->class_desc.InputTerminalNum = 0U;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	2200      	movs	r2, #0
 800645a:	f8a3 20ea 	strh.w	r2, [r3, #234]	@ 0xea
  AUDIO_Handle->class_desc.OutputTerminalNum = 0U;
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2200      	movs	r2, #0
 8006462:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
  AUDIO_Handle->class_desc.ASNum = 0U;
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	2200      	movs	r2, #0
 800646a:	f8a3 20e8 	strh.w	r2, [r3, #232]	@ 0xe8

  while (ptr < phost->device.CfgDesc.wTotalLength)
 800646e:	e03c      	b.n	80064ea <USBH_AUDIO_ParseCSDescriptors+0xc4>
  {
    pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8006470:	f107 030c 	add.w	r3, r7, #12
 8006474:	4619      	mov	r1, r3
 8006476:	69b8      	ldr	r0, [r7, #24]
 8006478:	f006 fb79 	bl	800cb6e <USBH_GetNextDesc>
 800647c:	61b8      	str	r0, [r7, #24]

    switch (pdesc->bDescriptorType)
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	785b      	ldrb	r3, [r3, #1]
 8006482:	2b04      	cmp	r3, #4
 8006484:	d002      	beq.n	800648c <USBH_AUDIO_ParseCSDescriptors+0x66>
 8006486:	2b24      	cmp	r3, #36	@ 0x24
 8006488:	d00f      	beq.n	80064aa <USBH_AUDIO_ParseCSDescriptors+0x84>
          }
        }
        break;

      default:
        break;
 800648a:	e02e      	b.n	80064ea <USBH_AUDIO_ParseCSDescriptors+0xc4>
        itf_number = *((uint8_t *)(void *)pdesc + 2U);
 800648c:	69bb      	ldr	r3, [r7, #24]
 800648e:	789b      	ldrb	r3, [r3, #2]
 8006490:	75bb      	strb	r3, [r7, #22]
        alt_setting = *((uint8_t *)(void *)pdesc + 3U);
 8006492:	69bb      	ldr	r3, [r7, #24]
 8006494:	78db      	ldrb	r3, [r3, #3]
 8006496:	73fb      	strb	r3, [r7, #15]
        itf_index = USBH_FindInterfaceIndex(phost, itf_number, alt_setting);
 8006498:	7bfa      	ldrb	r2, [r7, #15]
 800649a:	7dbb      	ldrb	r3, [r7, #22]
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f005 fa5a 	bl	800b958 <USBH_FindInterfaceIndex>
 80064a4:	4603      	mov	r3, r0
 80064a6:	75fb      	strb	r3, [r7, #23]
        break;
 80064a8:	e01f      	b.n	80064ea <USBH_AUDIO_ParseCSDescriptors+0xc4>
        if (itf_number <= phost->device.CfgDesc.bNumInterfaces)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80064b0:	7dba      	ldrb	r2, [r7, #22]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d818      	bhi.n	80064e8 <USBH_AUDIO_ParseCSDescriptors+0xc2>
          if ((itf_index == 0xFFU) || (itf_index >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2bff      	cmp	r3, #255	@ 0xff
 80064ba:	d002      	beq.n	80064c2 <USBH_AUDIO_ParseCSDescriptors+0x9c>
 80064bc:	7dfb      	ldrb	r3, [r7, #23]
 80064be:	2b09      	cmp	r3, #9
 80064c0:	d902      	bls.n	80064c8 <USBH_AUDIO_ParseCSDescriptors+0xa2>
            status = USBH_FAIL;
 80064c2:	2302      	movs	r3, #2
 80064c4:	77fb      	strb	r3, [r7, #31]
        break;
 80064c6:	e00f      	b.n	80064e8 <USBH_AUDIO_ParseCSDescriptors+0xc2>
            (void)ParseCSDescriptors(&AUDIO_Handle->class_desc,
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f103 006c 	add.w	r0, r3, #108	@ 0x6c
 80064ce:	7dfb      	ldrb	r3, [r7, #23]
 80064d0:	687a      	ldr	r2, [r7, #4]
 80064d2:	2132      	movs	r1, #50	@ 0x32
 80064d4:	fb01 f303 	mul.w	r3, r1, r3
 80064d8:	4413      	add	r3, r2
 80064da:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	69ba      	ldr	r2, [r7, #24]
 80064e2:	4619      	mov	r1, r3
 80064e4:	f000 f80c 	bl	8006500 <ParseCSDescriptors>
        break;
 80064e8:	bf00      	nop
  while (ptr < phost->device.CfgDesc.wTotalLength)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	f8b3 233a 	ldrh.w	r2, [r3, #826]	@ 0x33a
 80064f0:	89bb      	ldrh	r3, [r7, #12]
 80064f2:	429a      	cmp	r2, r3
 80064f4:	d8bc      	bhi.n	8006470 <USBH_AUDIO_ParseCSDescriptors+0x4a>
    }
  }

  return status;
 80064f6:	7ffb      	ldrb	r3, [r7, #31]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <ParseCSDescriptors>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef ParseCSDescriptors(AUDIO_ClassSpecificDescTypedef *class_desc,
                                             uint8_t ac_subclass,
                                             uint8_t *pdesc)
{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	60f8      	str	r0, [r7, #12]
 8006508:	460b      	mov	r3, r1
 800650a:	607a      	str	r2, [r7, #4]
 800650c:	72fb      	strb	r3, [r7, #11]
  if (ac_subclass == USB_SUBCLASS_AUDIOCONTROL)
 800650e:	7afb      	ldrb	r3, [r7, #11]
 8006510:	2b01      	cmp	r3, #1
 8006512:	d163      	bne.n	80065dc <ParseCSDescriptors+0xdc>
  {
    switch (pdesc[2])
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3302      	adds	r3, #2
 8006518:	781b      	ldrb	r3, [r3, #0]
 800651a:	3b01      	subs	r3, #1
 800651c:	2b05      	cmp	r3, #5
 800651e:	f200 8081 	bhi.w	8006624 <ParseCSDescriptors+0x124>
 8006522:	a201      	add	r2, pc, #4	@ (adr r2, 8006528 <ParseCSDescriptors+0x28>)
 8006524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006528:	08006541 	.word	0x08006541
 800652c:	08006549 	.word	0x08006549
 8006530:	08006565 	.word	0x08006565
 8006534:	080065bf 	.word	0x080065bf
 8006538:	080065a1 	.word	0x080065a1
 800653c:	08006583 	.word	0x08006583
    {
      case UAC_HEADER:
        class_desc->cs_desc.HeaderDesc = (AUDIO_HeaderDescTypeDef *)(void *)pdesc;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	687a      	ldr	r2, [r7, #4]
 8006544:	601a      	str	r2, [r3, #0]
        break;
 8006546:	e06e      	b.n	8006626 <ParseCSDescriptors+0x126>

      case UAC_INPUT_TERMINAL:
        class_desc->cs_desc.InputTerminalDesc[class_desc->InputTerminalNum++] = (AUDIO_ITDescTypeDef *)(void *)pdesc;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	f8b3 307e 	ldrh.w	r3, [r3, #126]	@ 0x7e
 800654e:	1c5a      	adds	r2, r3, #1
 8006550:	b291      	uxth	r1, r2
 8006552:	68fa      	ldr	r2, [r7, #12]
 8006554:	f8a2 107e 	strh.w	r1, [r2, #126]	@ 0x7e
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	009b      	lsls	r3, r3, #2
 800655c:	4413      	add	r3, r2
 800655e:	687a      	ldr	r2, [r7, #4]
 8006560:	605a      	str	r2, [r3, #4]
        break;
 8006562:	e060      	b.n	8006626 <ParseCSDescriptors+0x126>

      case UAC_OUTPUT_TERMINAL:
        class_desc->cs_desc.OutputTerminalDesc[class_desc->OutputTerminalNum++] = (AUDIO_OTDescTypeDef *)(void *)pdesc;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f8b3 3080 	ldrh.w	r3, [r3, #128]	@ 0x80
 800656a:	1c5a      	adds	r2, r3, #1
 800656c:	b291      	uxth	r1, r2
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f8a2 1080 	strh.w	r1, [r2, #128]	@ 0x80
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	3304      	adds	r3, #4
 8006578:	009b      	lsls	r3, r3, #2
 800657a:	4413      	add	r3, r2
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	605a      	str	r2, [r3, #4]
        break;
 8006580:	e051      	b.n	8006626 <ParseCSDescriptors+0x126>

      case UAC_FEATURE_UNIT:
        class_desc->cs_desc.FeatureUnitDesc[class_desc->FeatureUnitNum++] = (AUDIO_FeatureDescTypeDef *)(void *)pdesc;
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f8b3 3082 	ldrh.w	r3, [r3, #130]	@ 0x82
 8006588:	1c5a      	adds	r2, r3, #1
 800658a:	b291      	uxth	r1, r2
 800658c:	68fa      	ldr	r2, [r7, #12]
 800658e:	f8a2 1082 	strh.w	r1, [r2, #130]	@ 0x82
 8006592:	68fa      	ldr	r2, [r7, #12]
 8006594:	3308      	adds	r3, #8
 8006596:	009b      	lsls	r3, r3, #2
 8006598:	4413      	add	r3, r2
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	605a      	str	r2, [r3, #4]
        break;
 800659e:	e042      	b.n	8006626 <ParseCSDescriptors+0x126>

      case UAC_SELECTOR_UNIT:
        class_desc->cs_desc.SelectorUnitDesc[class_desc->SelectorUnitNum++] = (AUDIO_SelectorDescTypeDef *)(void *)pdesc;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3084 	ldrh.w	r3, [r3, #132]	@ 0x84
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	b291      	uxth	r1, r2
 80065aa:	68fa      	ldr	r2, [r7, #12]
 80065ac:	f8a2 1084 	strh.w	r1, [r2, #132]	@ 0x84
 80065b0:	68fa      	ldr	r2, [r7, #12]
 80065b2:	3310      	adds	r3, #16
 80065b4:	009b      	lsls	r3, r3, #2
 80065b6:	4413      	add	r3, r2
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	605a      	str	r2, [r3, #4]
        break;
 80065bc:	e033      	b.n	8006626 <ParseCSDescriptors+0x126>

      case UAC_MIXER_UNIT:
        class_desc->cs_desc.MixerUnitDesc[class_desc->MixerUnitNum++] = (AUDIO_MixerDescTypeDef *)(void *)pdesc;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	@ 0x86
 80065c4:	1c5a      	adds	r2, r3, #1
 80065c6:	b291      	uxth	r1, r2
 80065c8:	68fa      	ldr	r2, [r7, #12]
 80065ca:	f8a2 1086 	strh.w	r1, [r2, #134]	@ 0x86
 80065ce:	68fa      	ldr	r2, [r7, #12]
 80065d0:	330c      	adds	r3, #12
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	687a      	ldr	r2, [r7, #4]
 80065d8:	605a      	str	r2, [r3, #4]
        break;
 80065da:	e024      	b.n	8006626 <ParseCSDescriptors+0x126>
        break;
    }
  }
  else
  {
    if (ac_subclass == USB_SUBCLASS_AUDIOSTREAMING)
 80065dc:	7afb      	ldrb	r3, [r7, #11]
 80065de:	2b02      	cmp	r3, #2
 80065e0:	d121      	bne.n	8006626 <ParseCSDescriptors+0x126>
    {
      switch (pdesc[2])
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	3302      	adds	r3, #2
 80065e6:	781b      	ldrb	r3, [r3, #0]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d002      	beq.n	80065f2 <ParseCSDescriptors+0xf2>
 80065ec:	2b02      	cmp	r3, #2
 80065ee:	d00a      	beq.n	8006606 <ParseCSDescriptors+0x106>
          break;
        case UAC_FORMAT_TYPE:
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
          break;
        default:
          break;
 80065f0:	e019      	b.n	8006626 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum].GeneralDesc = (AUDIO_ASGeneralDescTypeDef *)(void *)pdesc;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 80065f8:	68fa      	ldr	r2, [r7, #12]
 80065fa:	330a      	adds	r3, #10
 80065fc:	00db      	lsls	r3, r3, #3
 80065fe:	4413      	add	r3, r2
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	605a      	str	r2, [r3, #4]
          break;
 8006604:	e00f      	b.n	8006626 <ParseCSDescriptors+0x126>
          class_desc->as_desc[class_desc->ASNum++].FormatTypeDesc = (AUDIO_ASFormatTypeDescTypeDef *)(void *)pdesc;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800660c:	1c5a      	adds	r2, r3, #1
 800660e:	b291      	uxth	r1, r2
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	f8a2 107c 	strh.w	r1, [r2, #124]	@ 0x7c
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	330a      	adds	r3, #10
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	4413      	add	r3, r2
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	609a      	str	r2, [r3, #8]
          break;
 8006622:	e000      	b.n	8006626 <ParseCSDescriptors+0x126>
        break;
 8006624:	bf00      	nop
      }
    }
  }

  return USBH_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3714      	adds	r7, #20
 800662c:	46bd      	mov	sp, r7
 800662e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006632:	4770      	bx	lr

08006634 <USBH_AUDIO_FindLinkedUnit>:
  * @param  phost: Host handle
  * @param  UnitID: Unit identifier
  * @retval UnitID, Index and Type of the associated Unit
  */
static uint32_t USBH_AUDIO_FindLinkedUnit(USBH_HandleTypeDef *phost, uint8_t UnitID)
{
 8006634:	b480      	push	{r7}
 8006636:	b085      	sub	sp, #20
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
 800663c:	460b      	mov	r3, r1
 800663e:	70fb      	strb	r3, [r7, #3]
  uint8_t Index;
  AUDIO_HandleTypeDef *AUDIO_Handle;

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006646:	69db      	ldr	r3, [r3, #28]
 8006648:	60bb      	str	r3, [r7, #8]

  /* Find Feature Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 800664a:	2300      	movs	r3, #0
 800664c:	73fb      	strb	r3, [r7, #15]
 800664e:	e01b      	b.n	8006688 <USBH_AUDIO_FindLinkedUnit+0x54>
  {
    if (AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bSourceID == UnitID)
 8006650:	7bfb      	ldrb	r3, [r7, #15]
 8006652:	68ba      	ldr	r2, [r7, #8]
 8006654:	3322      	adds	r3, #34	@ 0x22
 8006656:	009b      	lsls	r3, r3, #2
 8006658:	4413      	add	r3, r2
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	791b      	ldrb	r3, [r3, #4]
 800665e:	78fa      	ldrb	r2, [r7, #3]
 8006660:	429a      	cmp	r2, r3
 8006662:	d10e      	bne.n	8006682 <USBH_AUDIO_FindLinkedUnit+0x4e>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[Index]->bUnitID;
 8006664:	7bfb      	ldrb	r3, [r7, #15]
 8006666:	68ba      	ldr	r2, [r7, #8]
 8006668:	3322      	adds	r3, #34	@ 0x22
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	4413      	add	r3, r2
 800666e:	689b      	ldr	r3, [r3, #8]
 8006670:	78db      	ldrb	r3, [r3, #3]
 8006672:	70fb      	strb	r3, [r7, #3]

      return (((uint32_t)UnitID << 16U) | (UAC_FEATURE_UNIT << 8U) | (uint32_t)Index);
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	041a      	lsls	r2, r3, #16
 8006678:	7bfb      	ldrb	r3, [r7, #15]
 800667a:	4313      	orrs	r3, r2
 800667c:	f443 63c0 	orr.w	r3, r3, #1536	@ 0x600
 8006680:	e086      	b.n	8006790 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.FeatureUnitNum; Index ++)
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	3301      	adds	r3, #1
 8006686:	73fb      	strb	r3, [r7, #15]
 8006688:	7bfb      	ldrb	r3, [r7, #15]
 800668a:	b29a      	uxth	r2, r3
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	f8b3 30ee 	ldrh.w	r3, [r3, #238]	@ 0xee
 8006692:	429a      	cmp	r2, r3
 8006694:	d3dc      	bcc.n	8006650 <USBH_AUDIO_FindLinkedUnit+0x1c>
    }
  }

  /* Find Mixer Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 8006696:	2300      	movs	r3, #0
 8006698:	73fb      	strb	r3, [r7, #15]
 800669a:	e025      	b.n	80066e8 <USBH_AUDIO_FindLinkedUnit+0xb4>
  {
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	3326      	adds	r3, #38	@ 0x26
 80066a2:	009b      	lsls	r3, r3, #2
 80066a4:	4413      	add	r3, r2
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	795b      	ldrb	r3, [r3, #5]
 80066aa:	78fa      	ldrb	r2, [r7, #3]
 80066ac:	429a      	cmp	r2, r3
 80066ae:	d009      	beq.n	80066c4 <USBH_AUDIO_FindLinkedUnit+0x90>
        (AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID1 == UnitID))
 80066b0:	7bfb      	ldrb	r3, [r7, #15]
 80066b2:	68ba      	ldr	r2, [r7, #8]
 80066b4:	3326      	adds	r3, #38	@ 0x26
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	799b      	ldrb	r3, [r3, #6]
    if ((AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bSourceID0 == UnitID) ||
 80066be:	78fa      	ldrb	r2, [r7, #3]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d10e      	bne.n	80066e2 <USBH_AUDIO_FindLinkedUnit+0xae>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.MixerUnitDesc[Index]->bUnitID;
 80066c4:	7bfb      	ldrb	r3, [r7, #15]
 80066c6:	68ba      	ldr	r2, [r7, #8]
 80066c8:	3326      	adds	r3, #38	@ 0x26
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4413      	add	r3, r2
 80066ce:	689b      	ldr	r3, [r3, #8]
 80066d0:	78db      	ldrb	r3, [r3, #3]
 80066d2:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_MIXER_UNIT << 8U) | Index);
 80066d4:	78fb      	ldrb	r3, [r7, #3]
 80066d6:	041a      	lsls	r2, r3, #16
 80066d8:	7bfb      	ldrb	r3, [r7, #15]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80066e0:	e056      	b.n	8006790 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.MixerUnitNum; Index ++)
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	3301      	adds	r3, #1
 80066e6:	73fb      	strb	r3, [r7, #15]
 80066e8:	7bfb      	ldrb	r3, [r7, #15]
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	68bb      	ldr	r3, [r7, #8]
 80066ee:	f8b3 30f2 	ldrh.w	r3, [r3, #242]	@ 0xf2
 80066f2:	429a      	cmp	r2, r3
 80066f4:	d3d2      	bcc.n	800669c <USBH_AUDIO_FindLinkedUnit+0x68>
    }
  }

  /* Find Selector Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 80066f6:	2300      	movs	r3, #0
 80066f8:	73fb      	strb	r3, [r7, #15]
 80066fa:	e01b      	b.n	8006734 <USBH_AUDIO_FindLinkedUnit+0x100>
  {
    if (AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bSourceID0 == UnitID)
 80066fc:	7bfb      	ldrb	r3, [r7, #15]
 80066fe:	68ba      	ldr	r2, [r7, #8]
 8006700:	332a      	adds	r3, #42	@ 0x2a
 8006702:	009b      	lsls	r3, r3, #2
 8006704:	4413      	add	r3, r2
 8006706:	689b      	ldr	r3, [r3, #8]
 8006708:	795b      	ldrb	r3, [r3, #5]
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	429a      	cmp	r2, r3
 800670e:	d10e      	bne.n	800672e <USBH_AUDIO_FindLinkedUnit+0xfa>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.SelectorUnitDesc[Index]->bUnitID;
 8006710:	7bfb      	ldrb	r3, [r7, #15]
 8006712:	68ba      	ldr	r2, [r7, #8]
 8006714:	332a      	adds	r3, #42	@ 0x2a
 8006716:	009b      	lsls	r3, r3, #2
 8006718:	4413      	add	r3, r2
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	78db      	ldrb	r3, [r3, #3]
 800671e:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_SELECTOR_UNIT << 8U) | Index);
 8006720:	78fb      	ldrb	r3, [r7, #3]
 8006722:	041a      	lsls	r2, r3, #16
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	4313      	orrs	r3, r2
 8006728:	f443 63a0 	orr.w	r3, r3, #1280	@ 0x500
 800672c:	e030      	b.n	8006790 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.SelectorUnitNum; Index ++)
 800672e:	7bfb      	ldrb	r3, [r7, #15]
 8006730:	3301      	adds	r3, #1
 8006732:	73fb      	strb	r3, [r7, #15]
 8006734:	7bfb      	ldrb	r3, [r7, #15]
 8006736:	b29a      	uxth	r2, r3
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	@ 0xf0
 800673e:	429a      	cmp	r2, r3
 8006740:	d3dc      	bcc.n	80066fc <USBH_AUDIO_FindLinkedUnit+0xc8>
    }
  }

  /* Find Output Terminal Unit */
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 8006742:	2300      	movs	r3, #0
 8006744:	73fb      	strb	r3, [r7, #15]
 8006746:	e01b      	b.n	8006780 <USBH_AUDIO_FindLinkedUnit+0x14c>
  {
    if (AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bSourceID == UnitID)
 8006748:	7bfb      	ldrb	r3, [r7, #15]
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	331e      	adds	r3, #30
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	689b      	ldr	r3, [r3, #8]
 8006754:	79db      	ldrb	r3, [r3, #7]
 8006756:	78fa      	ldrb	r2, [r7, #3]
 8006758:	429a      	cmp	r2, r3
 800675a:	d10e      	bne.n	800677a <USBH_AUDIO_FindLinkedUnit+0x146>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->bTerminalID;
 800675c:	7bfb      	ldrb	r3, [r7, #15]
 800675e:	68ba      	ldr	r2, [r7, #8]
 8006760:	331e      	adds	r3, #30
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	4413      	add	r3, r2
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	78db      	ldrb	r3, [r3, #3]
 800676a:	70fb      	strb	r3, [r7, #3]

      return (uint32_t)((UnitID << 16U) | (UAC_OUTPUT_TERMINAL << 8U) | Index);
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	041a      	lsls	r2, r3, #16
 8006770:	7bfb      	ldrb	r3, [r7, #15]
 8006772:	4313      	orrs	r3, r2
 8006774:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8006778:	e00a      	b.n	8006790 <USBH_AUDIO_FindLinkedUnit+0x15c>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.OutputTerminalNum; Index ++)
 800677a:	7bfb      	ldrb	r3, [r7, #15]
 800677c:	3301      	adds	r3, #1
 800677e:	73fb      	strb	r3, [r7, #15]
 8006780:	7bfb      	ldrb	r3, [r7, #15]
 8006782:	b29a      	uxth	r2, r3
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	f8b3 30ec 	ldrh.w	r3, [r3, #236]	@ 0xec
 800678a:	429a      	cmp	r2, r3
 800678c:	d3dc      	bcc.n	8006748 <USBH_AUDIO_FindLinkedUnit+0x114>
    }
  }

  /* No associated Unit found return undefined ID 0x00*/
  return 0U;
 800678e:	2300      	movs	r3, #0
}
 8006790:	4618      	mov	r0, r3
 8006792:	3714      	adds	r7, #20
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <USBH_AUDIO_BuildMicrophonePath>:
  * @brief  Build full path for Microphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildMicrophonePath(USBH_HandleTypeDef *phost)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80067a4:	2300      	movs	r3, #0
 80067a6:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80067a8:	2300      	movs	r3, #0
 80067aa:	757b      	strb	r3, [r7, #21]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80067b2:	69db      	ldr	r3, [r3, #28]
 80067b4:	613b      	str	r3, [r7, #16]

  /*Find microphone IT*/
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80067b6:	2300      	movs	r3, #0
 80067b8:	75bb      	strb	r3, [r7, #22]
 80067ba:	e02b      	b.n	8006814 <USBH_AUDIO_BuildMicrophonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x201U)
 80067bc:	7dbb      	ldrb	r3, [r7, #22]
 80067be:	693a      	ldr	r2, [r7, #16]
 80067c0:	331a      	adds	r3, #26
 80067c2:	009b      	lsls	r3, r3, #2
 80067c4:	4413      	add	r3, r2
 80067c6:	689b      	ldr	r3, [r3, #8]
 80067c8:	791b      	ldrb	r3, [r3, #4]
 80067ca:	4619      	mov	r1, r3
 80067cc:	7dbb      	ldrb	r3, [r7, #22]
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	331a      	adds	r3, #26
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	689b      	ldr	r3, [r3, #8]
 80067d8:	795b      	ldrb	r3, [r3, #5]
 80067da:	021b      	lsls	r3, r3, #8
 80067dc:	b29b      	uxth	r3, r3
 80067de:	430b      	orrs	r3, r1
 80067e0:	f240 2201 	movw	r2, #513	@ 0x201
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d112      	bne.n	800680e <USBH_AUDIO_BuildMicrophonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80067e8:	7dbb      	ldrb	r3, [r7, #22]
 80067ea:	693a      	ldr	r2, [r7, #16]
 80067ec:	331a      	adds	r3, #26
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	78db      	ldrb	r3, [r3, #3]
 80067f6:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->microphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 80067f8:	7dbb      	ldrb	r3, [r7, #22]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	331a      	adds	r3, #26
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	79da      	ldrb	r2, [r3, #7]
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	f883 2151 	strb.w	r2, [r3, #337]	@ 0x151
      break;
 800680c:	e009      	b.n	8006822 <USBH_AUDIO_BuildMicrophonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800680e:	7dbb      	ldrb	r3, [r7, #22]
 8006810:	3301      	adds	r3, #1
 8006812:	75bb      	strb	r3, [r7, #22]
 8006814:	7dbb      	ldrb	r3, [r7, #22]
 8006816:	b29a      	uxth	r2, r3
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800681e:	429a      	cmp	r2, r3
 8006820:	d3cc      	bcc.n	80067bc <USBH_AUDIO_BuildMicrophonePath+0x20>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 8006822:	7dfb      	ldrb	r3, [r7, #23]
 8006824:	4619      	mov	r1, r3
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f7ff ff04 	bl	8006634 <USBH_AUDIO_FindLinkedUnit>
 800682c:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <USBH_AUDIO_BuildMicrophonePath+0x9c>
    {
      return USBH_FAIL;
 8006834:	2302      	movs	r3, #2
 8006836:	e035      	b.n	80068a4 <USBH_AUDIO_BuildMicrophonePath+0x108>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	72fb      	strb	r3, [r7, #11]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	0a1b      	lsrs	r3, r3, #8
 8006840:	72bb      	strb	r3, [r7, #10]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	0c1b      	lsrs	r3, r3, #16
 8006846:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006848:	7abb      	ldrb	r3, [r7, #10]
 800684a:	3b03      	subs	r3, #3
 800684c:	2b03      	cmp	r3, #3
 800684e:	d81f      	bhi.n	8006890 <USBH_AUDIO_BuildMicrophonePath+0xf4>
 8006850:	a201      	add	r2, pc, #4	@ (adr r2, 8006858 <USBH_AUDIO_BuildMicrophonePath+0xbc>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	08006887 	.word	0x08006887
 800685c:	08006873 	.word	0x08006873
 8006860:	0800687d 	.word	0x0800687d
 8006864:	08006869 	.word	0x08006869
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->microphone.asociated_feature = Index;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	7afa      	ldrb	r2, [r7, #11]
 800686c:	f883 214f 	strb.w	r2, [r3, #335]	@ 0x14f
        break;
 8006870:	e011      	b.n	8006896 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->microphone.asociated_mixer = Index;
 8006872:	693b      	ldr	r3, [r7, #16]
 8006874:	7afa      	ldrb	r2, [r7, #11]
 8006876:	f883 214d 	strb.w	r2, [r3, #333]	@ 0x14d
        break;
 800687a:	e00c      	b.n	8006896 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->microphone.asociated_selector = Index;
 800687c:	693b      	ldr	r3, [r7, #16]
 800687e:	7afa      	ldrb	r2, [r7, #11]
 8006880:	f883 214e 	strb.w	r2, [r3, #334]	@ 0x14e
        break;
 8006884:	e007      	b.n	8006896 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->microphone.asociated_terminal = Index;
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	7afa      	ldrb	r2, [r7, #11]
 800688a:	f883 2150 	strb.w	r2, [r3, #336]	@ 0x150
        break;
 800688e:	e002      	b.n	8006896 <USBH_AUDIO_BuildMicrophonePath+0xfa>

      default:
        ret = USBH_FAIL;
 8006890:	2302      	movs	r3, #2
 8006892:	757b      	strb	r3, [r7, #21]
        break;
 8006894:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006896:	7abb      	ldrb	r3, [r7, #10]
 8006898:	2b03      	cmp	r3, #3
 800689a:	d002      	beq.n	80068a2 <USBH_AUDIO_BuildMicrophonePath+0x106>
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1bf      	bne.n	8006822 <USBH_AUDIO_BuildMicrophonePath+0x86>

  return ret;
 80068a2:	7d7b      	ldrb	r3, [r7, #21]
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3718      	adds	r7, #24
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <USBH_AUDIO_BuildHeadphonePath>:
  * @brief  Build full path for Headphone device
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_BuildHeadphonePath(USBH_HandleTypeDef *phost)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  uint8_t UnitID = 0U, Type, Index;
 80068b4:	2300      	movs	r3, #0
 80068b6:	75fb      	strb	r3, [r7, #23]
  uint32_t value;
  uint8_t terminalIndex;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  USBH_StatusTypeDef ret = USBH_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	753b      	strb	r3, [r7, #20]

  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80068c2:	69db      	ldr	r3, [r3, #28]
 80068c4:	613b      	str	r3, [r7, #16]

  /* Find association between audio streaming and microphone */
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 80068c6:	2300      	movs	r3, #0
 80068c8:	757b      	strb	r3, [r7, #21]
 80068ca:	e02b      	b.n	8006924 <USBH_AUDIO_BuildHeadphonePath+0x78>
  {
    if (LE16(AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->wTerminalType) == 0x101U)
 80068cc:	7d7b      	ldrb	r3, [r7, #21]
 80068ce:	693a      	ldr	r2, [r7, #16]
 80068d0:	331a      	adds	r3, #26
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	689b      	ldr	r3, [r3, #8]
 80068d8:	791b      	ldrb	r3, [r3, #4]
 80068da:	4619      	mov	r1, r3
 80068dc:	7d7b      	ldrb	r3, [r7, #21]
 80068de:	693a      	ldr	r2, [r7, #16]
 80068e0:	331a      	adds	r3, #26
 80068e2:	009b      	lsls	r3, r3, #2
 80068e4:	4413      	add	r3, r2
 80068e6:	689b      	ldr	r3, [r3, #8]
 80068e8:	795b      	ldrb	r3, [r3, #5]
 80068ea:	021b      	lsls	r3, r3, #8
 80068ec:	b29b      	uxth	r3, r3
 80068ee:	430b      	orrs	r3, r1
 80068f0:	f240 1201 	movw	r2, #257	@ 0x101
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d112      	bne.n	800691e <USBH_AUDIO_BuildHeadphonePath+0x72>
    {
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bTerminalID;
 80068f8:	7d7b      	ldrb	r3, [r7, #21]
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	331a      	adds	r3, #26
 80068fe:	009b      	lsls	r3, r3, #2
 8006900:	4413      	add	r3, r2
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	78db      	ldrb	r3, [r3, #3]
 8006906:	75fb      	strb	r3, [r7, #23]
      AUDIO_Handle->headphone.asociated_channels =  AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[terminalIndex]->bNrChannels;
 8006908:	7d7b      	ldrb	r3, [r7, #21]
 800690a:	693a      	ldr	r2, [r7, #16]
 800690c:	331a      	adds	r3, #26
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	79da      	ldrb	r2, [r3, #7]
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f883 2109 	strb.w	r2, [r3, #265]	@ 0x109
      break;
 800691c:	e009      	b.n	8006932 <USBH_AUDIO_BuildHeadphonePath+0x86>
  for (terminalIndex = 0U; terminalIndex < AUDIO_Handle->class_desc.InputTerminalNum; terminalIndex++)
 800691e:	7d7b      	ldrb	r3, [r7, #21]
 8006920:	3301      	adds	r3, #1
 8006922:	757b      	strb	r3, [r7, #21]
 8006924:	7d7b      	ldrb	r3, [r7, #21]
 8006926:	b29a      	uxth	r2, r3
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	f8b3 30ea 	ldrh.w	r3, [r3, #234]	@ 0xea
 800692e:	429a      	cmp	r2, r3
 8006930:	d3cc      	bcc.n	80068cc <USBH_AUDIO_BuildHeadphonePath+0x20>
    }
  }

  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006932:	2300      	movs	r3, #0
 8006934:	75bb      	strb	r3, [r7, #22]
 8006936:	e011      	b.n	800695c <USBH_AUDIO_BuildHeadphonePath+0xb0>
  {
    if (AUDIO_Handle->class_desc.as_desc[Index].GeneralDesc->bTerminalLink == UnitID)
 8006938:	7dbb      	ldrb	r3, [r7, #22]
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	3317      	adds	r3, #23
 800693e:	00db      	lsls	r3, r3, #3
 8006940:	4413      	add	r3, r2
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	78db      	ldrb	r3, [r3, #3]
 8006946:	7dfa      	ldrb	r2, [r7, #23]
 8006948:	429a      	cmp	r2, r3
 800694a:	d104      	bne.n	8006956 <USBH_AUDIO_BuildHeadphonePath+0xaa>
    {
      AUDIO_Handle->headphone.asociated_as = Index;
 800694c:	693b      	ldr	r3, [r7, #16]
 800694e:	7dba      	ldrb	r2, [r7, #22]
 8006950:	f883 2104 	strb.w	r2, [r3, #260]	@ 0x104
      break;
 8006954:	e009      	b.n	800696a <USBH_AUDIO_BuildHeadphonePath+0xbe>
  for (Index = 0U; Index < AUDIO_Handle->class_desc.ASNum; Index++)
 8006956:	7dbb      	ldrb	r3, [r7, #22]
 8006958:	3301      	adds	r3, #1
 800695a:	75bb      	strb	r3, [r7, #22]
 800695c:	7dbb      	ldrb	r3, [r7, #22]
 800695e:	b29a      	uxth	r2, r3
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	f8b3 30e8 	ldrh.w	r3, [r3, #232]	@ 0xe8
 8006966:	429a      	cmp	r2, r3
 8006968:	d3e6      	bcc.n	8006938 <USBH_AUDIO_BuildHeadphonePath+0x8c>
    }
  }

  do
  {
    value = USBH_AUDIO_FindLinkedUnit(phost, UnitID);
 800696a:	7dfb      	ldrb	r3, [r7, #23]
 800696c:	4619      	mov	r1, r3
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f7ff fe60 	bl	8006634 <USBH_AUDIO_FindLinkedUnit>
 8006974:	60f8      	str	r0, [r7, #12]

    if (value == 0U)
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d101      	bne.n	8006980 <USBH_AUDIO_BuildHeadphonePath+0xd4>
    {
      return USBH_FAIL;
 800697c:	2302      	movs	r3, #2
 800697e:	e053      	b.n	8006a28 <USBH_AUDIO_BuildHeadphonePath+0x17c>
    }

    Index = (uint8_t)(value & 0xFFU);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	75bb      	strb	r3, [r7, #22]
    Type = (uint8_t)((value >> 8U) & 0xFFU);
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	0a1b      	lsrs	r3, r3, #8
 8006988:	72fb      	strb	r3, [r7, #11]
    UnitID = (uint8_t)((value >> 16U) & 0xFFU);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	0c1b      	lsrs	r3, r3, #16
 800698e:	75fb      	strb	r3, [r7, #23]

    switch (Type)
 8006990:	7afb      	ldrb	r3, [r7, #11]
 8006992:	3b03      	subs	r3, #3
 8006994:	2b03      	cmp	r3, #3
 8006996:	d83c      	bhi.n	8006a12 <USBH_AUDIO_BuildHeadphonePath+0x166>
 8006998:	a201      	add	r2, pc, #4	@ (adr r2, 80069a0 <USBH_AUDIO_BuildHeadphonePath+0xf4>)
 800699a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800699e:	bf00      	nop
 80069a0:	080069cf 	.word	0x080069cf
 80069a4:	080069bb 	.word	0x080069bb
 80069a8:	080069c5 	.word	0x080069c5
 80069ac:	080069b1 	.word	0x080069b1
    {
      case UAC_FEATURE_UNIT:
        AUDIO_Handle->headphone.asociated_feature = Index;
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	7dba      	ldrb	r2, [r7, #22]
 80069b4:	f883 2107 	strb.w	r2, [r3, #263]	@ 0x107
        break;
 80069b8:	e02f      	b.n	8006a1a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_MIXER_UNIT:
        AUDIO_Handle->headphone.asociated_mixer = Index;
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	7dba      	ldrb	r2, [r7, #22]
 80069be:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
        break;
 80069c2:	e02a      	b.n	8006a1a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_SELECTOR_UNIT:
        AUDIO_Handle->headphone.asociated_selector = Index;
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	7dba      	ldrb	r2, [r7, #22]
 80069c8:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
        break;
 80069cc:	e025      	b.n	8006a1a <USBH_AUDIO_BuildHeadphonePath+0x16e>

      case UAC_OUTPUT_TERMINAL:
        AUDIO_Handle->headphone.asociated_terminal = Index;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	7dba      	ldrb	r2, [r7, #22]
 80069d2:	f883 2108 	strb.w	r2, [r3, #264]	@ 0x108
        if (Index < AUDIO_MAX_NUM_OUT_TERMINAL)
 80069d6:	7dbb      	ldrb	r3, [r7, #22]
 80069d8:	2b03      	cmp	r3, #3
 80069da:	d817      	bhi.n	8006a0c <USBH_AUDIO_BuildHeadphonePath+0x160>
        {
          if (LE16(AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[Index]->wTerminalType) != 0x103U)
 80069dc:	7dbb      	ldrb	r3, [r7, #22]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	331e      	adds	r3, #30
 80069e2:	009b      	lsls	r3, r3, #2
 80069e4:	4413      	add	r3, r2
 80069e6:	689b      	ldr	r3, [r3, #8]
 80069e8:	791b      	ldrb	r3, [r3, #4]
 80069ea:	4619      	mov	r1, r3
 80069ec:	7dbb      	ldrb	r3, [r7, #22]
 80069ee:	693a      	ldr	r2, [r7, #16]
 80069f0:	331e      	adds	r3, #30
 80069f2:	009b      	lsls	r3, r3, #2
 80069f4:	4413      	add	r3, r2
 80069f6:	689b      	ldr	r3, [r3, #8]
 80069f8:	795b      	ldrb	r3, [r3, #5]
 80069fa:	021b      	lsls	r3, r3, #8
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	430b      	orrs	r3, r1
 8006a00:	f240 1203 	movw	r2, #259	@ 0x103
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d007      	beq.n	8006a18 <USBH_AUDIO_BuildHeadphonePath+0x16c>
          {
            return  USBH_OK;
 8006a08:	2300      	movs	r3, #0
 8006a0a:	e00d      	b.n	8006a28 <USBH_AUDIO_BuildHeadphonePath+0x17c>
          }
        }
        else
        {
          ret = USBH_FAIL;
 8006a0c:	2302      	movs	r3, #2
 8006a0e:	753b      	strb	r3, [r7, #20]
        }
        break;
 8006a10:	e002      	b.n	8006a18 <USBH_AUDIO_BuildHeadphonePath+0x16c>

      default:
        ret = USBH_FAIL;
 8006a12:	2302      	movs	r3, #2
 8006a14:	753b      	strb	r3, [r7, #20]
        break;
 8006a16:	e000      	b.n	8006a1a <USBH_AUDIO_BuildHeadphonePath+0x16e>
        break;
 8006a18:	bf00      	nop
    }
  } while ((Type != UAC_OUTPUT_TERMINAL) && (value > 0U));
 8006a1a:	7afb      	ldrb	r3, [r7, #11]
 8006a1c:	2b03      	cmp	r3, #3
 8006a1e:	d002      	beq.n	8006a26 <USBH_AUDIO_BuildHeadphonePath+0x17a>
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1a1      	bne.n	800696a <USBH_AUDIO_BuildHeadphonePath+0xbe>

  return ret;
 8006a26:	7d3b      	ldrb	r3, [r7, #20]
}
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3718      	adds	r7, #24
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <USBH_AC_SetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b086      	sub	sp, #24
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	4608      	mov	r0, r1
 8006a3a:	4611      	mov	r1, r2
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4603      	mov	r3, r0
 8006a40:	70fb      	strb	r3, [r7, #3]
 8006a42:	460b      	mov	r3, r1
 8006a44:	70bb      	strb	r3, [r7, #2]
 8006a46:	4613      	mov	r3, r2
 8006a48:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006a4a:	2300      	movs	r3, #0
 8006a4c:	82fb      	strh	r3, [r7, #22]
 8006a4e:	2300      	movs	r3, #0
 8006a50:	82bb      	strh	r3, [r7, #20]
 8006a52:	2300      	movs	r3, #0
 8006a54:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID, InterfaceNum;
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006a5c:	69db      	ldr	r3, [r3, #28]
 8006a5e:	60fb      	str	r3, [r7, #12]
  USBH_StatusTypeDef ret = USBH_OK;
 8006a60:	2300      	movs	r3, #0
 8006a62:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006a64:	78fb      	ldrb	r3, [r7, #3]
 8006a66:	2b02      	cmp	r3, #2
 8006a68:	d002      	beq.n	8006a70 <USBH_AC_SetCur+0x40>
 8006a6a:	2b06      	cmp	r3, #6
 8006a6c:	d018      	beq.n	8006aa0 <USBH_AC_SetCur+0x70>
 8006a6e:	e035      	b.n	8006adc <USBH_AC_SetCur+0xac>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006a74:	78db      	ldrb	r3, [r3, #3]
 8006a76:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006a78:	2300      	movs	r3, #0
 8006a7a:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006a7c:	7afb      	ldrb	r3, [r7, #11]
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	021b      	lsls	r3, r3, #8
 8006a82:	b29a      	uxth	r2, r3
 8006a84:	7abb      	ldrb	r3, [r7, #10]
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	4313      	orrs	r3, r2
 8006a8a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006a8c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006a90:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2200      	movs	r2, #0
 8006a96:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8006a9a:	2301      	movs	r3, #1
 8006a9c:	827b      	strh	r3, [r7, #18]
      break;
 8006a9e:	e020      	b.n	8006ae2 <USBH_AC_SetCur+0xb2>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006aa0:	78bb      	ldrb	r3, [r7, #2]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	3322      	adds	r3, #34	@ 0x22
 8006aa6:	009b      	lsls	r3, r3, #2
 8006aa8:	4413      	add	r3, r2
 8006aaa:	689b      	ldr	r3, [r3, #8]
 8006aac:	78db      	ldrb	r3, [r3, #3]
 8006aae:	72fb      	strb	r3, [r7, #11]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	72bb      	strb	r3, [r7, #10]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ab4:	7afb      	ldrb	r3, [r7, #11]
 8006ab6:	b29b      	uxth	r3, r3
 8006ab8:	021b      	lsls	r3, r3, #8
 8006aba:	b29a      	uxth	r2, r3
 8006abc:	7abb      	ldrb	r3, [r7, #10]
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006ac4:	787b      	ldrb	r3, [r7, #1]
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	021b      	lsls	r3, r3, #8
 8006aca:	b29a      	uxth	r2, r3
 8006acc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	4313      	orrs	r3, r2
 8006ad4:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006ad6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006ad8:	827b      	strh	r3, [r7, #18]
      break;
 8006ada:	e002      	b.n	8006ae2 <USBH_AC_SetCur+0xb2>

    default:
      ret = USBH_FAIL;
 8006adc:	2302      	movs	r3, #2
 8006ade:	747b      	strb	r3, [r7, #17]
      break;
 8006ae0:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006ae2:	7c7b      	ldrb	r3, [r7, #17]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d001      	beq.n	8006aec <USBH_AC_SetCur+0xbc>
  {
    return ret;
 8006ae8:	7c7b      	ldrb	r3, [r7, #17]
 8006aea:	e017      	b.n	8006b1c <USBH_AC_SetCur+0xec>
  }

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2221      	movs	r2, #33	@ 0x21
 8006af0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2201      	movs	r2, #1
 8006af6:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8afa      	ldrh	r2, [r7, #22]
 8006afc:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	8aba      	ldrh	r2, [r7, #20]
 8006b02:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	8a7a      	ldrh	r2, [r7, #18]
 8006b08:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006b10:	8a7a      	ldrh	r2, [r7, #18]
 8006b12:	4619      	mov	r1, r3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f006 f844 	bl	800cba2 <USBH_CtlReq>
 8006b1a:	4603      	mov	r3, r0
}
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	3718      	adds	r7, #24
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <USBH_AC_GetCur>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b086      	sub	sp, #24
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	4608      	mov	r0, r1
 8006b2e:	4611      	mov	r1, r2
 8006b30:	461a      	mov	r2, r3
 8006b32:	4603      	mov	r3, r0
 8006b34:	70fb      	strb	r3, [r7, #3]
 8006b36:	460b      	mov	r3, r1
 8006b38:	70bb      	strb	r3, [r7, #2]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006b3e:	2300      	movs	r3, #0
 8006b40:	82fb      	strh	r3, [r7, #22]
 8006b42:	2300      	movs	r3, #0
 8006b44:	82bb      	strh	r3, [r7, #20]
 8006b46:	2300      	movs	r3, #0
 8006b48:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	743b      	strb	r3, [r7, #16]
 8006b4e:	2300      	movs	r3, #0
 8006b50:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006b58:	69db      	ldr	r3, [r3, #28]
 8006b5a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006b60:	78fb      	ldrb	r3, [r7, #3]
 8006b62:	2b06      	cmp	r3, #6
 8006b64:	d01e      	beq.n	8006ba4 <USBH_AC_GetCur+0x80>
 8006b66:	2b06      	cmp	r3, #6
 8006b68:	dc4f      	bgt.n	8006c0a <USBH_AC_GetCur+0xe6>
 8006b6a:	2b02      	cmp	r3, #2
 8006b6c:	d002      	beq.n	8006b74 <USBH_AC_GetCur+0x50>
 8006b6e:	2b03      	cmp	r3, #3
 8006b70:	d036      	beq.n	8006be0 <USBH_AC_GetCur+0xbc>
 8006b72:	e04a      	b.n	8006c0a <USBH_AC_GetCur+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b78:	78db      	ldrb	r3, [r3, #3]
 8006b7a:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006b80:	7c3b      	ldrb	r3, [r7, #16]
 8006b82:	b29b      	uxth	r3, r3
 8006b84:	021b      	lsls	r3, r3, #8
 8006b86:	b29a      	uxth	r2, r3
 8006b88:	7bfb      	ldrb	r3, [r7, #15]
 8006b8a:	b29b      	uxth	r3, r3
 8006b8c:	4313      	orrs	r3, r2
 8006b8e:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006b90:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006b94:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	827b      	strh	r3, [r7, #18]
      break;
 8006ba2:	e035      	b.n	8006c10 <USBH_AC_GetCur+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006ba4:	78bb      	ldrb	r3, [r7, #2]
 8006ba6:	68ba      	ldr	r2, [r7, #8]
 8006ba8:	3322      	adds	r3, #34	@ 0x22
 8006baa:	009b      	lsls	r3, r3, #2
 8006bac:	4413      	add	r3, r2
 8006bae:	689b      	ldr	r3, [r3, #8]
 8006bb0:	78db      	ldrb	r3, [r3, #3]
 8006bb2:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006bb8:	7c3b      	ldrb	r3, [r7, #16]
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	021b      	lsls	r3, r3, #8
 8006bbe:	b29a      	uxth	r2, r3
 8006bc0:	7bfb      	ldrb	r3, [r7, #15]
 8006bc2:	b29b      	uxth	r3, r3
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006bc8:	787b      	ldrb	r3, [r7, #1]
 8006bca:	b29b      	uxth	r3, r3
 8006bcc:	021b      	lsls	r3, r3, #8
 8006bce:	b29a      	uxth	r2, r3
 8006bd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006bda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006bdc:	827b      	strh	r3, [r7, #18]
      break;
 8006bde:	e017      	b.n	8006c10 <USBH_AC_GetCur+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006be0:	68bb      	ldr	r3, [r7, #8]
 8006be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006be6:	78db      	ldrb	r3, [r3, #3]
 8006be8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006bee:	7c3b      	ldrb	r3, [r7, #16]
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	021b      	lsls	r3, r3, #8
 8006bf4:	b29a      	uxth	r2, r3
 8006bf6:	7bfb      	ldrb	r3, [r7, #15]
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006bfe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006c02:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006c04:	2301      	movs	r3, #1
 8006c06:	827b      	strh	r3, [r7, #18]
      break;
 8006c08:	e002      	b.n	8006c10 <USBH_AC_GetCur+0xec>

    default:
      ret = USBH_FAIL;
 8006c0a:	2302      	movs	r3, #2
 8006c0c:	747b      	strb	r3, [r7, #17]
      break;
 8006c0e:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006c10:	7c7b      	ldrb	r3, [r7, #17]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <USBH_AC_GetCur+0xf6>
  {
    return ret;
 8006c16:	7c7b      	ldrb	r3, [r7, #17]
 8006c18:	e017      	b.n	8006c4a <USBH_AC_GetCur+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	22a1      	movs	r2, #161	@ 0xa1
 8006c1e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_CUR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2281      	movs	r2, #129	@ 0x81
 8006c24:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	8afa      	ldrh	r2, [r7, #22]
 8006c2a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	8aba      	ldrh	r2, [r7, #20]
 8006c30:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	8a7a      	ldrh	r2, [r7, #18]
 8006c36:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006c38:	68bb      	ldr	r3, [r7, #8]
 8006c3a:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006c3e:	8a7a      	ldrh	r2, [r7, #18]
 8006c40:	4619      	mov	r1, r3
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f005 ffad 	bl	800cba2 <USBH_CtlReq>
 8006c48:	4603      	mov	r3, r0
}
 8006c4a:	4618      	mov	r0, r3
 8006c4c:	3718      	adds	r7, #24
 8006c4e:	46bd      	mov	sp, r7
 8006c50:	bd80      	pop	{r7, pc}

08006c52 <USBH_AC_GetMax>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006c52:	b580      	push	{r7, lr}
 8006c54:	b086      	sub	sp, #24
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
 8006c5a:	4608      	mov	r0, r1
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	461a      	mov	r2, r3
 8006c60:	4603      	mov	r3, r0
 8006c62:	70fb      	strb	r3, [r7, #3]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70bb      	strb	r3, [r7, #2]
 8006c68:	4613      	mov	r3, r2
 8006c6a:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006c6c:	2300      	movs	r3, #0
 8006c6e:	82fb      	strh	r3, [r7, #22]
 8006c70:	2300      	movs	r3, #0
 8006c72:	82bb      	strh	r3, [r7, #20]
 8006c74:	2300      	movs	r3, #0
 8006c76:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	743b      	strb	r3, [r7, #16]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006c86:	69db      	ldr	r3, [r3, #28]
 8006c88:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d01e      	beq.n	8006cd2 <USBH_AC_GetMax+0x80>
 8006c94:	2b06      	cmp	r3, #6
 8006c96:	dc4f      	bgt.n	8006d38 <USBH_AC_GetMax+0xe6>
 8006c98:	2b02      	cmp	r3, #2
 8006c9a:	d002      	beq.n	8006ca2 <USBH_AC_GetMax+0x50>
 8006c9c:	2b03      	cmp	r3, #3
 8006c9e:	d036      	beq.n	8006d0e <USBH_AC_GetMax+0xbc>
 8006ca0:	e04a      	b.n	8006d38 <USBH_AC_GetMax+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006ca2:	68bb      	ldr	r3, [r7, #8]
 8006ca4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ca6:	78db      	ldrb	r3, [r3, #3]
 8006ca8:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006caa:	2300      	movs	r3, #0
 8006cac:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006cae:	7c3b      	ldrb	r3, [r7, #16]
 8006cb0:	b29b      	uxth	r3, r3
 8006cb2:	021b      	lsls	r3, r3, #8
 8006cb4:	b29a      	uxth	r2, r3
 8006cb6:	7bfb      	ldrb	r3, [r7, #15]
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006cbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006cc2:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006cc4:	68bb      	ldr	r3, [r7, #8]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	827b      	strh	r3, [r7, #18]
      break;
 8006cd0:	e035      	b.n	8006d3e <USBH_AC_GetMax+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006cd2:	78bb      	ldrb	r3, [r7, #2]
 8006cd4:	68ba      	ldr	r2, [r7, #8]
 8006cd6:	3322      	adds	r3, #34	@ 0x22
 8006cd8:	009b      	lsls	r3, r3, #2
 8006cda:	4413      	add	r3, r2
 8006cdc:	689b      	ldr	r3, [r3, #8]
 8006cde:	78db      	ldrb	r3, [r3, #3]
 8006ce0:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ce6:	7c3b      	ldrb	r3, [r7, #16]
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	021b      	lsls	r3, r3, #8
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	7bfb      	ldrb	r3, [r7, #15]
 8006cf0:	b29b      	uxth	r3, r3
 8006cf2:	4313      	orrs	r3, r2
 8006cf4:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006cf6:	787b      	ldrb	r3, [r7, #1]
 8006cf8:	b29b      	uxth	r3, r3
 8006cfa:	021b      	lsls	r3, r3, #8
 8006cfc:	b29a      	uxth	r2, r3
 8006cfe:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006d02:	b29b      	uxth	r3, r3
 8006d04:	4313      	orrs	r3, r2
 8006d06:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006d08:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006d0a:	827b      	strh	r3, [r7, #18]
      break;
 8006d0c:	e017      	b.n	8006d3e <USBH_AC_GetMax+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006d0e:	68bb      	ldr	r3, [r7, #8]
 8006d10:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006d14:	78db      	ldrb	r3, [r3, #3]
 8006d16:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006d18:	2300      	movs	r3, #0
 8006d1a:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006d1c:	7c3b      	ldrb	r3, [r7, #16]
 8006d1e:	b29b      	uxth	r3, r3
 8006d20:	021b      	lsls	r3, r3, #8
 8006d22:	b29a      	uxth	r2, r3
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	4313      	orrs	r3, r2
 8006d2a:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006d2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006d30:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006d32:	2301      	movs	r3, #1
 8006d34:	827b      	strh	r3, [r7, #18]
      break;
 8006d36:	e002      	b.n	8006d3e <USBH_AC_GetMax+0xec>

    default:
      ret = USBH_FAIL;
 8006d38:	2302      	movs	r3, #2
 8006d3a:	747b      	strb	r3, [r7, #17]
      break;
 8006d3c:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006d3e:	7c7b      	ldrb	r3, [r7, #17]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d001      	beq.n	8006d48 <USBH_AC_GetMax+0xf6>
  {
    return ret;
 8006d44:	7c7b      	ldrb	r3, [r7, #17]
 8006d46:	e017      	b.n	8006d78 <USBH_AC_GetMax+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	22a1      	movs	r2, #161	@ 0xa1
 8006d4c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MAX;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2283      	movs	r2, #131	@ 0x83
 8006d52:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	8afa      	ldrh	r2, [r7, #22]
 8006d58:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	8aba      	ldrh	r2, [r7, #20]
 8006d5e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	8a7a      	ldrh	r2, [r7, #18]
 8006d64:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006d66:	68bb      	ldr	r3, [r7, #8]
 8006d68:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006d6c:	8a7a      	ldrh	r2, [r7, #18]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f005 ff16 	bl	800cba2 <USBH_CtlReq>
 8006d76:	4603      	mov	r3, r0

}
 8006d78:	4618      	mov	r0, r3
 8006d7a:	3718      	adds	r7, #24
 8006d7c:	46bd      	mov	sp, r7
 8006d7e:	bd80      	pop	{r7, pc}

08006d80 <USBH_AC_GetRes>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	6078      	str	r0, [r7, #4]
 8006d88:	4608      	mov	r0, r1
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	461a      	mov	r2, r3
 8006d8e:	4603      	mov	r3, r0
 8006d90:	70fb      	strb	r3, [r7, #3]
 8006d92:	460b      	mov	r3, r1
 8006d94:	70bb      	strb	r3, [r7, #2]
 8006d96:	4613      	mov	r3, r2
 8006d98:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	82fb      	strh	r3, [r7, #22]
 8006d9e:	2300      	movs	r3, #0
 8006da0:	82bb      	strh	r3, [r7, #20]
 8006da2:	2300      	movs	r3, #0
 8006da4:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006da6:	2300      	movs	r3, #0
 8006da8:	743b      	strb	r3, [r7, #16]
 8006daa:	2300      	movs	r3, #0
 8006dac:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006db4:	69db      	ldr	r3, [r3, #28]
 8006db6:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006db8:	2300      	movs	r3, #0
 8006dba:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006dbc:	78fb      	ldrb	r3, [r7, #3]
 8006dbe:	2b06      	cmp	r3, #6
 8006dc0:	d01e      	beq.n	8006e00 <USBH_AC_GetRes+0x80>
 8006dc2:	2b06      	cmp	r3, #6
 8006dc4:	dc4f      	bgt.n	8006e66 <USBH_AC_GetRes+0xe6>
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d002      	beq.n	8006dd0 <USBH_AC_GetRes+0x50>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d036      	beq.n	8006e3c <USBH_AC_GetRes+0xbc>
 8006dce:	e04a      	b.n	8006e66 <USBH_AC_GetRes+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006dd4:	78db      	ldrb	r3, [r3, #3]
 8006dd6:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006dd8:	2300      	movs	r3, #0
 8006dda:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006ddc:	7c3b      	ldrb	r3, [r7, #16]
 8006dde:	b29b      	uxth	r3, r3
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	b29a      	uxth	r2, r3
 8006de4:	7bfb      	ldrb	r3, [r7, #15]
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	4313      	orrs	r3, r2
 8006dea:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006dec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006df0:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006df2:	68bb      	ldr	r3, [r7, #8]
 8006df4:	2200      	movs	r2, #0
 8006df6:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8006dfa:	2301      	movs	r3, #1
 8006dfc:	827b      	strh	r3, [r7, #18]
      break;
 8006dfe:	e035      	b.n	8006e6c <USBH_AC_GetRes+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006e00:	78bb      	ldrb	r3, [r7, #2]
 8006e02:	68ba      	ldr	r2, [r7, #8]
 8006e04:	3322      	adds	r3, #34	@ 0x22
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4413      	add	r3, r2
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	78db      	ldrb	r3, [r3, #3]
 8006e0e:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e10:	2300      	movs	r3, #0
 8006e12:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e14:	7c3b      	ldrb	r3, [r7, #16]
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	b29a      	uxth	r2, r3
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
 8006e1e:	b29b      	uxth	r3, r3
 8006e20:	4313      	orrs	r3, r2
 8006e22:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006e24:	787b      	ldrb	r3, [r7, #1]
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	021b      	lsls	r3, r3, #8
 8006e2a:	b29a      	uxth	r2, r3
 8006e2c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e30:	b29b      	uxth	r3, r3
 8006e32:	4313      	orrs	r3, r2
 8006e34:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006e36:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006e38:	827b      	strh	r3, [r7, #18]
      break;
 8006e3a:	e017      	b.n	8006e6c <USBH_AC_GetRes+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e42:	78db      	ldrb	r3, [r3, #3]
 8006e44:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006e46:	2300      	movs	r3, #0
 8006e48:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006e4a:	7c3b      	ldrb	r3, [r7, #16]
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	b29a      	uxth	r2, r3
 8006e52:	7bfb      	ldrb	r3, [r7, #15]
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	4313      	orrs	r3, r2
 8006e58:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006e5a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006e5e:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006e60:	2301      	movs	r3, #1
 8006e62:	827b      	strh	r3, [r7, #18]
      break;
 8006e64:	e002      	b.n	8006e6c <USBH_AC_GetRes+0xec>

    default:
      ret = USBH_FAIL;
 8006e66:	2302      	movs	r3, #2
 8006e68:	747b      	strb	r3, [r7, #17]
      break;
 8006e6a:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006e6c:	7c7b      	ldrb	r3, [r7, #17]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d001      	beq.n	8006e76 <USBH_AC_GetRes+0xf6>
  {
    return ret;
 8006e72:	7c7b      	ldrb	r3, [r7, #17]
 8006e74:	e017      	b.n	8006ea6 <USBH_AC_GetRes+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	22a1      	movs	r2, #161	@ 0xa1
 8006e7a:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_RES;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	2284      	movs	r2, #132	@ 0x84
 8006e80:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	8afa      	ldrh	r2, [r7, #22]
 8006e86:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	8aba      	ldrh	r2, [r7, #20]
 8006e8c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	8a7a      	ldrh	r2, [r7, #18]
 8006e92:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006e9a:	8a7a      	ldrh	r2, [r7, #18]
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f005 fe7f 	bl	800cba2 <USBH_CtlReq>
 8006ea4:	4603      	mov	r3, r0

}
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	3718      	adds	r7, #24
 8006eaa:	46bd      	mov	sp, r7
 8006eac:	bd80      	pop	{r7, pc}

08006eae <USBH_AC_GetMin>:
                                         uint8_t subtype,
                                         uint8_t feature,
                                         uint8_t controlSelector,
                                         uint8_t channel,
                                         uint16_t length)
{
 8006eae:	b580      	push	{r7, lr}
 8006eb0:	b086      	sub	sp, #24
 8006eb2:	af00      	add	r7, sp, #0
 8006eb4:	6078      	str	r0, [r7, #4]
 8006eb6:	4608      	mov	r0, r1
 8006eb8:	4611      	mov	r1, r2
 8006eba:	461a      	mov	r2, r3
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	70fb      	strb	r3, [r7, #3]
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	70bb      	strb	r3, [r7, #2]
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	707b      	strb	r3, [r7, #1]
  uint16_t wValue = 0U, wIndex = 0U, wLength = 0U;
 8006ec8:	2300      	movs	r3, #0
 8006eca:	82fb      	strh	r3, [r7, #22]
 8006ecc:	2300      	movs	r3, #0
 8006ece:	82bb      	strh	r3, [r7, #20]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	827b      	strh	r3, [r7, #18]
  uint8_t UnitID = 0U, InterfaceNum = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	743b      	strb	r3, [r7, #16]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;
  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8006ee2:	69db      	ldr	r3, [r3, #28]
 8006ee4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef ret = USBH_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	747b      	strb	r3, [r7, #17]

  switch (subtype)
 8006eea:	78fb      	ldrb	r3, [r7, #3]
 8006eec:	2b06      	cmp	r3, #6
 8006eee:	d01e      	beq.n	8006f2e <USBH_AC_GetMin+0x80>
 8006ef0:	2b06      	cmp	r3, #6
 8006ef2:	dc4f      	bgt.n	8006f94 <USBH_AC_GetMin+0xe6>
 8006ef4:	2b02      	cmp	r3, #2
 8006ef6:	d002      	beq.n	8006efe <USBH_AC_GetMin+0x50>
 8006ef8:	2b03      	cmp	r3, #3
 8006efa:	d036      	beq.n	8006f6a <USBH_AC_GetMin+0xbc>
 8006efc:	e04a      	b.n	8006f94 <USBH_AC_GetMin+0xe6>
  {
    case UAC_INPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.InputTerminalDesc[0]->bTerminalID;
 8006efe:	68bb      	ldr	r3, [r7, #8]
 8006f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006f02:	78db      	ldrb	r3, [r3, #3]
 8006f04:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f06:	2300      	movs	r3, #0
 8006f08:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f0a:	7c3b      	ldrb	r3, [r7, #16]
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	021b      	lsls	r3, r3, #8
 8006f10:	b29a      	uxth	r2, r3
 8006f12:	7bfb      	ldrb	r3, [r7, #15]
 8006f14:	b29b      	uxth	r3, r3
 8006f16:	4313      	orrs	r3, r2
 8006f18:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f1a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f1e:	82fb      	strh	r3, [r7, #22]
      AUDIO_Handle->mem[0] = 0x00U;
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

      wLength = 1U;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	827b      	strh	r3, [r7, #18]
      break;
 8006f2c:	e035      	b.n	8006f9a <USBH_AC_GetMin+0xec>
    case UAC_FEATURE_UNIT:
      UnitID = AUDIO_Handle->class_desc.cs_desc.FeatureUnitDesc[feature]->bUnitID;
 8006f2e:	78bb      	ldrb	r3, [r7, #2]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	3322      	adds	r3, #34	@ 0x22
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	4413      	add	r3, r2
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	78db      	ldrb	r3, [r3, #3]
 8006f3c:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f3e:	2300      	movs	r3, #0
 8006f40:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f42:	7c3b      	ldrb	r3, [r7, #16]
 8006f44:	b29b      	uxth	r3, r3
 8006f46:	021b      	lsls	r3, r3, #8
 8006f48:	b29a      	uxth	r2, r3
 8006f4a:	7bfb      	ldrb	r3, [r7, #15]
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	4313      	orrs	r3, r2
 8006f50:	82bb      	strh	r3, [r7, #20]
      /*holds the CS(control selector ) and CN (channel number)*/
      wValue = (uint16_t)((uint32_t)controlSelector << 8U) | (uint16_t)channel;
 8006f52:	787b      	ldrb	r3, [r7, #1]
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	021b      	lsls	r3, r3, #8
 8006f58:	b29a      	uxth	r2, r3
 8006f5a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	4313      	orrs	r3, r2
 8006f62:	82fb      	strh	r3, [r7, #22]
      wLength = length;
 8006f64:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8006f66:	827b      	strh	r3, [r7, #18]
      break;
 8006f68:	e017      	b.n	8006f9a <USBH_AC_GetMin+0xec>

    case UAC_OUTPUT_TERMINAL:
      UnitID = AUDIO_Handle->class_desc.cs_desc.OutputTerminalDesc[0]->bTerminalID;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006f70:	78db      	ldrb	r3, [r3, #3]
 8006f72:	743b      	strb	r3, [r7, #16]
      InterfaceNum = 0U; /*Always zero Control Interface */
 8006f74:	2300      	movs	r3, #0
 8006f76:	73fb      	strb	r3, [r7, #15]
      wIndex = (uint16_t)((uint32_t)UnitID << 8U) | (uint16_t)InterfaceNum;
 8006f78:	7c3b      	ldrb	r3, [r7, #16]
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	7bfb      	ldrb	r3, [r7, #15]
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	4313      	orrs	r3, r2
 8006f86:	82bb      	strh	r3, [r7, #20]
      wValue = (COPY_PROTECT_CONTROL << 8U);
 8006f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006f8c:	82fb      	strh	r3, [r7, #22]
      wLength = 1U;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	827b      	strh	r3, [r7, #18]
      break;
 8006f92:	e002      	b.n	8006f9a <USBH_AC_GetMin+0xec>

    default:
      ret = USBH_FAIL;
 8006f94:	2302      	movs	r3, #2
 8006f96:	747b      	strb	r3, [r7, #17]
      break;
 8006f98:	bf00      	nop
  }

  if (ret != USBH_OK)
 8006f9a:	7c7b      	ldrb	r3, [r7, #17]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d001      	beq.n	8006fa4 <USBH_AC_GetMin+0xf6>
  {
    return ret;
 8006fa0:	7c7b      	ldrb	r3, [r7, #17]
 8006fa2:	e017      	b.n	8006fd4 <USBH_AC_GetMin+0x126>
  }

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	22a1      	movs	r2, #161	@ 0xa1
 8006fa8:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_GET_MIN;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	2282      	movs	r2, #130	@ 0x82
 8006fae:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	8afa      	ldrh	r2, [r7, #22]
 8006fb4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	8aba      	ldrh	r2, [r7, #20]
 8006fba:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	8a7a      	ldrh	r2, [r7, #18]
 8006fc0:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)(void *)(AUDIO_Handle->mem), wLength));
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 8006fc8:	8a7a      	ldrh	r2, [r7, #18]
 8006fca:	4619      	mov	r1, r3
 8006fcc:	6878      	ldr	r0, [r7, #4]
 8006fce:	f005 fde8 	bl	800cba2 <USBH_CtlReq>
 8006fd2:	4603      	mov	r3, r0

}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3718      	adds	r7, #24
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBH_AUDIO_SetEndpointControls>:
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetEndpointControls(USBH_HandleTypeDef *phost,
                                                         uint8_t  Ep,
                                                         uint8_t *buff)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b086      	sub	sp, #24
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	460b      	mov	r3, r1
 8006fe6:	607a      	str	r2, [r7, #4]
 8006fe8:	72fb      	strb	r3, [r7, #11]
  uint16_t wValue, wIndex, wLength;

  wValue = SAMPLING_FREQ_CONTROL << 8U;
 8006fea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006fee:	82fb      	strh	r3, [r7, #22]
  wIndex = Ep;
 8006ff0:	7afb      	ldrb	r3, [r7, #11]
 8006ff2:	82bb      	strh	r3, [r7, #20]
  wLength = 3U; /* length of the frequency parameter */
 8006ff4:	2303      	movs	r3, #3
 8006ff6:	827b      	strh	r3, [r7, #18]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT | \
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2222      	movs	r2, #34	@ 0x22
 8006ffc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = UAC_SET_CUR;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2201      	movs	r2, #1
 8007002:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = wValue;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	8afa      	ldrh	r2, [r7, #22]
 8007008:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = wIndex;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	8aba      	ldrh	r2, [r7, #20]
 800700e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = wLength;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	8a7a      	ldrh	r2, [r7, #18]
 8007014:	82da      	strh	r2, [r3, #22]

  return (USBH_CtlReq(phost, (uint8_t *)buff, wLength));
 8007016:	8a7b      	ldrh	r3, [r7, #18]
 8007018:	461a      	mov	r2, r3
 800701a:	6879      	ldr	r1, [r7, #4]
 800701c:	68f8      	ldr	r0, [r7, #12]
 800701e:	f005 fdc0 	bl	800cba2 <USBH_CtlReq>
 8007022:	4603      	mov	r3, r0
}
 8007024:	4618      	mov	r0, r3
 8007026:	3718      	adds	r7, #24
 8007028:	46bd      	mov	sp, r7
 800702a:	bd80      	pop	{r7, pc}

0800702c <USBH_AUDIO_InputStream>:
  * @brief  Handle Input stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_InputStream(USBH_HandleTypeDef *phost)
{
 800702c:	b480      	push	{r7}
 800702e:	b085      	sub	sp, #20
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  USBH_StatusTypeDef status = USBH_BUSY;
 8007034:	2301      	movs	r3, #1
 8007036:	73fb      	strb	r3, [r7, #15]

  return status;
 8007038:	7bfb      	ldrb	r3, [r7, #15]
}
 800703a:	4618      	mov	r0, r3
 800703c:	3714      	adds	r7, #20
 800703e:	46bd      	mov	sp, r7
 8007040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007044:	4770      	bx	lr
	...

08007048 <USBH_AUDIO_Control>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Control(USBH_HandleTypeDef *phost)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b086      	sub	sp, #24
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007050:	2301      	movs	r3, #1
 8007052:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800705a:	69db      	ldr	r3, [r3, #28]
 800705c:	613b      	str	r3, [r7, #16]
  uint16_t attribute  = 0U;
 800705e:	2300      	movs	r3, #0
 8007060:	81fb      	strh	r3, [r7, #14]

  switch (AUDIO_Handle->control_state)
 8007062:	693b      	ldr	r3, [r7, #16]
 8007064:	78db      	ldrb	r3, [r3, #3]
 8007066:	3b01      	subs	r3, #1
 8007068:	2b04      	cmp	r3, #4
 800706a:	f200 8090 	bhi.w	800718e <USBH_AUDIO_Control+0x146>
 800706e:	a201      	add	r2, pc, #4	@ (adr r2, 8007074 <USBH_AUDIO_Control+0x2c>)
 8007070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007074:	08007089 	.word	0x08007089
 8007078:	080070dd 	.word	0x080070dd
 800707c:	0800718f 	.word	0x0800718f
 8007080:	0800715b 	.word	0x0800715b
 8007084:	08007175 	.word	0x08007175
  {
    case AUDIO_CONTROL_INIT:
      if ((phost->Timer & 1U) == 0U)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800708e:	f003 0301 	and.w	r3, r3, #1
 8007092:	2b00      	cmp	r3, #0
 8007094:	d17d      	bne.n	8007192 <USBH_AUDIO_Control+0x14a>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 800709c:	693b      	ldr	r3, [r7, #16]
 800709e:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c
        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 80070a2:	693b      	ldr	r3, [r7, #16]
 80070a4:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	693b      	ldr	r3, [r7, #16]
 80070b2:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f005 ffc4 	bl	800d044 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

        AUDIO_Handle->temp_feature  = AUDIO_Handle->headphone.asociated_feature;
 80070bc:	693b      	ldr	r3, [r7, #16]
 80070be:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
        AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 80070ce:	693b      	ldr	r3, [r7, #16]
 80070d0:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1

        AUDIO_Handle->control_state = AUDIO_CONTROL_CHANGE;
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	2202      	movs	r2, #2
 80070d8:	70da      	strb	r2, [r3, #3]
      }
      break;
 80070da:	e05a      	b.n	8007192 <USBH_AUDIO_Control+0x14a>

    case AUDIO_CONTROL_CHANGE:
      if (USBH_LL_GetURBState(phost, AUDIO_Handle->control.Pipe) == USBH_URB_DONE)
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 80070e2:	4619      	mov	r1, r3
 80070e4:	6878      	ldr	r0, [r7, #4]
 80070e6:	f006 fc0d 	bl	800d904 <USBH_LL_GetURBState>
 80070ea:	4603      	mov	r3, r0
 80070ec:	2b01      	cmp	r3, #1
 80070ee:	d114      	bne.n	800711a <USBH_AUDIO_Control+0xd2>
      {
        attribute = LE16(&AUDIO_Handle->mem[0]);
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	f8b3 2190 	ldrh.w	r2, [r3, #400]	@ 0x190
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f503 73c8 	add.w	r3, r3, #400	@ 0x190
 80070fc:	3302      	adds	r3, #2
 80070fe:	881b      	ldrh	r3, [r3, #0]
 8007100:	021b      	lsls	r3, r3, #8
 8007102:	b29b      	uxth	r3, r3
 8007104:	4313      	orrs	r3, r2
 8007106:	81fb      	strh	r3, [r7, #14]
        if (USBH_AUDIO_SetControlAttribute(phost, (uint8_t)attribute) == USBH_BUSY)
 8007108:	89fb      	ldrh	r3, [r7, #14]
 800710a:	b2db      	uxtb	r3, r3
 800710c:	4619      	mov	r1, r3
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f97a 	bl	8007408 <USBH_AUDIO_SetControlAttribute>
 8007114:	4603      	mov	r3, r0
 8007116:	2b01      	cmp	r3, #1
 8007118:	d03d      	beq.n	8007196 <USBH_AUDIO_Control+0x14e>
        {
          break;
        }
      }

      if ((phost->Timer - AUDIO_Handle->control.timer) >= AUDIO_Handle->control.Poll)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	f8d3 318c 	ldr.w	r3, [r3, #396]	@ 0x18c
 8007126:	1ad3      	subs	r3, r2, r3
 8007128:	693a      	ldr	r2, [r7, #16]
 800712a:	f892 218b 	ldrb.w	r2, [r2, #395]	@ 0x18b
 800712e:	4293      	cmp	r3, r2
 8007130:	d333      	bcc.n	800719a <USBH_AUDIO_Control+0x152>
      {
        AUDIO_Handle->control.timer = phost->Timer;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f8c3 218c 	str.w	r2, [r3, #396]	@ 0x18c

        (void)USBH_InterruptReceiveData(phost,
                                        (uint8_t *)(void *)(AUDIO_Handle->mem),
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	f503 71c8 	add.w	r1, r3, #400	@ 0x190
                                        (uint8_t)AUDIO_Handle->control.EpSize,
 8007144:	693b      	ldr	r3, [r7, #16]
 8007146:	f8b3 3186 	ldrh.w	r3, [r3, #390]	@ 0x186
        (void)USBH_InterruptReceiveData(phost,
 800714a:	b2da      	uxtb	r2, r3
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	f893 318a 	ldrb.w	r3, [r3, #394]	@ 0x18a
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f005 ff76 	bl	800d044 <USBH_InterruptReceiveData>
                                        AUDIO_Handle->control.Pipe);

      }
      break;
 8007158:	e01f      	b.n	800719a <USBH_AUDIO_Control+0x152>

    case AUDIO_CONTROL_VOLUME_UP:
      if (USBH_AUDIO_SetControlAttribute(phost, 1U) == USBH_OK)
 800715a:	2101      	movs	r1, #1
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f953 	bl	8007408 <USBH_AUDIO_SetControlAttribute>
 8007162:	4603      	mov	r3, r0
 8007164:	2b00      	cmp	r3, #0
 8007166:	d11a      	bne.n	800719e <USBH_AUDIO_Control+0x156>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	2201      	movs	r2, #1
 800716c:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 800716e:	2300      	movs	r3, #0
 8007170:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8007172:	e014      	b.n	800719e <USBH_AUDIO_Control+0x156>

    case AUDIO_CONTROL_VOLUME_DOWN:
      if (USBH_AUDIO_SetControlAttribute(phost, 2U) == USBH_OK)
 8007174:	2102      	movs	r1, #2
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f946 	bl	8007408 <USBH_AUDIO_SetControlAttribute>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10f      	bne.n	80071a2 <USBH_AUDIO_Control+0x15a>
      {
        AUDIO_Handle->control_state = AUDIO_CONTROL_INIT;
 8007182:	693b      	ldr	r3, [r7, #16]
 8007184:	2201      	movs	r2, #1
 8007186:	70da      	strb	r2, [r3, #3]
        status = USBH_OK;
 8007188:	2300      	movs	r3, #0
 800718a:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800718c:	e009      	b.n	80071a2 <USBH_AUDIO_Control+0x15a>

    case AUDIO_CONTROL_IDLE:
    default:
      break;
 800718e:	bf00      	nop
 8007190:	e008      	b.n	80071a4 <USBH_AUDIO_Control+0x15c>
      break;
 8007192:	bf00      	nop
 8007194:	e006      	b.n	80071a4 <USBH_AUDIO_Control+0x15c>
          break;
 8007196:	bf00      	nop
 8007198:	e004      	b.n	80071a4 <USBH_AUDIO_Control+0x15c>
      break;
 800719a:	bf00      	nop
 800719c:	e002      	b.n	80071a4 <USBH_AUDIO_Control+0x15c>
      break;
 800719e:	bf00      	nop
 80071a0:	e000      	b.n	80071a4 <USBH_AUDIO_Control+0x15c>
      break;
 80071a2:	bf00      	nop
  }

  return status;
 80071a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3718      	adds	r7, #24
 80071aa:	46bd      	mov	sp, r7
 80071ac:	bd80      	pop	{r7, pc}
 80071ae:	bf00      	nop

080071b0 <USBH_AUDIO_OutputStream>:
  * @brief  Handle Output stream process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_OutputStream(USBH_HandleTypeDef *phost)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b086      	sub	sp, #24
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80071b8:	2301      	movs	r3, #1
 80071ba:	75fb      	strb	r3, [r7, #23]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80071c2:	69db      	ldr	r3, [r3, #28]
 80071c4:	613b      	str	r3, [r7, #16]
  uint8_t *buff;


  switch (AUDIO_Handle->play_state)
 80071c6:	693b      	ldr	r3, [r7, #16]
 80071c8:	789b      	ldrb	r3, [r3, #2]
 80071ca:	3b01      	subs	r3, #1
 80071cc:	2b04      	cmp	r3, #4
 80071ce:	d85c      	bhi.n	800728a <USBH_AUDIO_OutputStream+0xda>
 80071d0:	a201      	add	r2, pc, #4	@ (adr r2, 80071d8 <USBH_AUDIO_OutputStream+0x28>)
 80071d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071d6:	bf00      	nop
 80071d8:	080071ed 	.word	0x080071ed
 80071dc:	08007249 	.word	0x08007249
 80071e0:	08007213 	.word	0x08007213
 80071e4:	0800727f 	.word	0x0800727f
 80071e8:	08007279 	.word	0x08007279
  {
    case AUDIO_PLAYBACK_INIT:

      if (AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->bSamFreqType == 0U)
 80071ec:	693b      	ldr	r3, [r7, #16]
 80071ee:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 80071f2:	693a      	ldr	r2, [r7, #16]
 80071f4:	3317      	adds	r3, #23
 80071f6:	00db      	lsls	r3, r3, #3
 80071f8:	4413      	add	r3, r2
 80071fa:	68db      	ldr	r3, [r3, #12]
 80071fc:	79db      	ldrb	r3, [r3, #7]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d103      	bne.n	800720a <USBH_AUDIO_OutputStream+0x5a>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP_FREQ;
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2203      	movs	r2, #3
 8007206:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8007208:	e044      	b.n	8007294 <USBH_AUDIO_OutputStream+0xe4>
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_SET_EP;
 800720a:	693b      	ldr	r3, [r7, #16]
 800720c:	2202      	movs	r2, #2
 800720e:	709a      	strb	r2, [r3, #2]
      break;
 8007210:	e040      	b.n	8007294 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_SET_EP_FREQ:

      buff = (uint8_t *)AUDIO_Handle->class_desc.as_desc[AUDIO_Handle->headphone.asociated_as].FormatTypeDesc->tSamFreq[0];
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	f893 3104 	ldrb.w	r3, [r3, #260]	@ 0x104
 8007218:	693a      	ldr	r2, [r7, #16]
 800721a:	3317      	adds	r3, #23
 800721c:	00db      	lsls	r3, r3, #3
 800721e:	4413      	add	r3, r2
 8007220:	68db      	ldr	r3, [r3, #12]
 8007222:	3308      	adds	r3, #8
 8007224:	60fb      	str	r3, [r7, #12]

      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 800722c:	68fa      	ldr	r2, [r7, #12]
 800722e:	4619      	mov	r1, r3
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f7ff fed3 	bl	8006fdc <USBH_AUDIO_SetEndpointControls>
 8007236:	4603      	mov	r3, r0
 8007238:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 800723a:	7dfb      	ldrb	r3, [r7, #23]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d126      	bne.n	800728e <USBH_AUDIO_OutputStream+0xde>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	2205      	movs	r2, #5
 8007244:	709a      	strb	r2, [r3, #2]
      }
      break;
 8007246:	e022      	b.n	800728e <USBH_AUDIO_OutputStream+0xde>

    case AUDIO_PLAYBACK_SET_EP:
      buff = (uint8_t *)(void *)&AUDIO_Handle->headphone.frequency;
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	f503 7386 	add.w	r3, r3, #268	@ 0x10c
 800724e:	60fb      	str	r3, [r7, #12]
      status = USBH_AUDIO_SetEndpointControls(phost, AUDIO_Handle->headphone.Ep, buff);
 8007250:	693b      	ldr	r3, [r7, #16]
 8007252:	f893 30f4 	ldrb.w	r3, [r3, #244]	@ 0xf4
 8007256:	68fa      	ldr	r2, [r7, #12]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f7ff febe 	bl	8006fdc <USBH_AUDIO_SetEndpointControls>
 8007260:	4603      	mov	r3, r0
 8007262:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8007264:	7dfb      	ldrb	r3, [r7, #23]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d113      	bne.n	8007292 <USBH_AUDIO_OutputStream+0xe2>
      {
        AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2205      	movs	r2, #5
 800726e:	709a      	strb	r2, [r3, #2]
        USBH_AUDIO_FrequencySet(phost);
 8007270:	6878      	ldr	r0, [r7, #4]
 8007272:	f000 f96e 	bl	8007552 <USBH_AUDIO_FrequencySet>
      }
      break;
 8007276:	e00c      	b.n	8007292 <USBH_AUDIO_OutputStream+0xe2>

    case AUDIO_PLAYBACK_IDLE:
      status = USBH_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800727c:	e00a      	b.n	8007294 <USBH_AUDIO_OutputStream+0xe4>

    case AUDIO_PLAYBACK_PLAY:
      (void)USBH_AUDIO_Transmit(phost);
 800727e:	6878      	ldr	r0, [r7, #4]
 8007280:	f000 f80e 	bl	80072a0 <USBH_AUDIO_Transmit>
      status = USBH_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	75fb      	strb	r3, [r7, #23]
      break;
 8007288:	e004      	b.n	8007294 <USBH_AUDIO_OutputStream+0xe4>

    default:
      break;
 800728a:	bf00      	nop
 800728c:	e002      	b.n	8007294 <USBH_AUDIO_OutputStream+0xe4>
      break;
 800728e:	bf00      	nop
 8007290:	e000      	b.n	8007294 <USBH_AUDIO_OutputStream+0xe4>
      break;
 8007292:	bf00      	nop
  }

  return status;
 8007294:	7dfb      	ldrb	r3, [r7, #23]
}
 8007296:	4618      	mov	r0, r3
 8007298:	3718      	adds	r7, #24
 800729a:	46bd      	mov	sp, r7
 800729c:	bd80      	pop	{r7, pc}
 800729e:	bf00      	nop

080072a0 <USBH_AUDIO_Transmit>:
  * @brief  Handle Transmission process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_Transmit(USBH_HandleTypeDef *phost)
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b084      	sub	sp, #16
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80072a8:	2301      	movs	r3, #1
 80072aa:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80072b2:	69db      	ldr	r3, [r3, #28]
 80072b4:	60bb      	str	r3, [r7, #8]

  switch (AUDIO_Handle->processing_state)
 80072b6:	68bb      	ldr	r3, [r7, #8]
 80072b8:	791b      	ldrb	r3, [r3, #4]
 80072ba:	2b01      	cmp	r3, #1
 80072bc:	d002      	beq.n	80072c4 <USBH_AUDIO_Transmit+0x24>
 80072be:	2b02      	cmp	r3, #2
 80072c0:	d033      	beq.n	800732a <USBH_AUDIO_Transmit+0x8a>
 80072c2:	e096      	b.n	80073f2 <USBH_AUDIO_Transmit+0x152>
  {
    case AUDIO_DATA_START_OUT:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) == 0U)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	f040 8092 	bne.w	80073f8 <USBH_AUDIO_Transmit+0x158>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
        AUDIO_Handle->processing_state = AUDIO_DATA_OUT;
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2202      	movs	r2, #2
 80072e4:	711a      	strb	r2, [r3, #4]
        (void)USBH_IsocSendData(phost,
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	f8d3 1110 	ldr.w	r1, [r3, #272]	@ 0x110
                                AUDIO_Handle->headphone.buf,
                                (uint32_t)AUDIO_Handle->headphone.frame_length,
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
        (void)USBH_IsocSendData(phost,
 80072f2:	461a      	mov	r2, r3
 80072f4:	68bb      	ldr	r3, [r7, #8]
 80072f6:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f005 fec1 	bl	800d082 <USBH_IsocSendData>
                                AUDIO_Handle->headphone.Pipe);

        AUDIO_Handle->headphone.partial_ptr = AUDIO_Handle->headphone.frame_length;
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8007306:	461a      	mov	r2, r3
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        AUDIO_Handle->headphone.global_ptr = AUDIO_Handle->headphone.frame_length;
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
 8007314:	461a      	mov	r2, r3
 8007316:	68bb      	ldr	r3, [r7, #8]
 8007318:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        AUDIO_Handle->headphone.cbuf = AUDIO_Handle->headphone.buf;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8007322:	68bb      	ldr	r3, [r7, #8]
 8007324:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007328:	e066      	b.n	80073f8 <USBH_AUDIO_Transmit+0x158>

    case AUDIO_DATA_OUT:
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 800732a:	68bb      	ldr	r3, [r7, #8]
 800732c:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8007330:	4619      	mov	r1, r3
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f006 fae6 	bl	800d904 <USBH_LL_GetURBState>
 8007338:	4603      	mov	r3, r0
 800733a:	2b01      	cmp	r3, #1
 800733c:	d15e      	bne.n	80073fc <USBH_AUDIO_Transmit+0x15c>
          ((phost->Timer - AUDIO_Handle->headphone.timer) >= AUDIO_Handle->headphone.Poll))
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 800734a:	1ad3      	subs	r3, r2, r3
 800734c:	68ba      	ldr	r2, [r7, #8]
 800734e:	f892 20fc 	ldrb.w	r2, [r2, #252]	@ 0xfc
      if ((USBH_LL_GetURBState(phost, AUDIO_Handle->headphone.Pipe) == USBH_URB_DONE) &&
 8007352:	4293      	cmp	r3, r2
 8007354:	d352      	bcc.n	80073fc <USBH_AUDIO_Transmit+0x15c>
      {
        AUDIO_Handle->headphone.timer = phost->Timer;
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100

        if (AUDIO_Handle->control.supported == 1U)
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	f893 3189 	ldrb.w	r3, [r3, #393]	@ 0x189
 8007368:	2b01      	cmp	r3, #1
 800736a:	d102      	bne.n	8007372 <USBH_AUDIO_Transmit+0xd2>
        {
          (void)USBH_AUDIO_Control(phost);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7ff fe6b 	bl	8007048 <USBH_AUDIO_Control>
        }

        if (AUDIO_Handle->headphone.global_ptr <= AUDIO_Handle->headphone.total_length)
 8007372:	68bb      	ldr	r3, [r7, #8]
 8007374:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800737e:	429a      	cmp	r2, r3
 8007380:	d82b      	bhi.n	80073da <USBH_AUDIO_Transmit+0x13a>
        {
          (void)USBH_IsocSendData(phost,
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
                                  AUDIO_Handle->headphone.cbuf,
                                  (uint32_t)AUDIO_Handle->headphone.frame_length,
 8007388:	68bb      	ldr	r3, [r7, #8]
 800738a:	f8b3 3120 	ldrh.w	r3, [r3, #288]	@ 0x120
          (void)USBH_IsocSendData(phost,
 800738e:	461a      	mov	r2, r3
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	f893 30fb 	ldrb.w	r3, [r3, #251]	@ 0xfb
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f005 fe73 	bl	800d082 <USBH_IsocSendData>
                                  AUDIO_Handle->headphone.Pipe);

          AUDIO_Handle->headphone.cbuf += AUDIO_Handle->headphone.frame_length;
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80073a2:	68ba      	ldr	r2, [r7, #8]
 80073a4:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 80073a8:	441a      	add	r2, r3
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
          AUDIO_Handle->headphone.partial_ptr += AUDIO_Handle->headphone.frame_length;
 80073b0:	68bb      	ldr	r3, [r7, #8]
 80073b2:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80073b6:	68ba      	ldr	r2, [r7, #8]
 80073b8:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 80073bc:	441a      	add	r2, r3
 80073be:	68bb      	ldr	r3, [r7, #8]
 80073c0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->headphone.global_ptr += AUDIO_Handle->headphone.frame_length;
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	f8b2 2120 	ldrh.w	r2, [r2, #288]	@ 0x120
 80073d0:	441a      	add	r2, r3
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
          USBH_AUDIO_BufferEmptyCallback(phost);
        }
      }
      break;
 80073d8:	e010      	b.n	80073fc <USBH_AUDIO_Transmit+0x15c>
          AUDIO_Handle->headphone.partial_ptr = 0xFFFFFFFFU;
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	f04f 32ff 	mov.w	r2, #4294967295
 80073e0:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
          AUDIO_Handle->play_state = AUDIO_PLAYBACK_IDLE;
 80073e4:	68bb      	ldr	r3, [r7, #8]
 80073e6:	2205      	movs	r2, #5
 80073e8:	709a      	strb	r2, [r3, #2]
          USBH_AUDIO_BufferEmptyCallback(phost);
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 f8bb 	bl	8007566 <USBH_AUDIO_BufferEmptyCallback>
      break;
 80073f0:	e004      	b.n	80073fc <USBH_AUDIO_Transmit+0x15c>

    default:
      status = USBH_FAIL;
 80073f2:	2302      	movs	r3, #2
 80073f4:	73fb      	strb	r3, [r7, #15]
      break;
 80073f6:	e002      	b.n	80073fe <USBH_AUDIO_Transmit+0x15e>
      break;
 80073f8:	bf00      	nop
 80073fa:	e000      	b.n	80073fe <USBH_AUDIO_Transmit+0x15e>
      break;
 80073fc:	bf00      	nop
  }
  return status;
 80073fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8007400:	4618      	mov	r0, r3
 8007402:	3710      	adds	r7, #16
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <USBH_AUDIO_SetControlAttribute>:
  * @param  phost: Host handle
  * @param  attrib: control attribute
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_AUDIO_SetControlAttribute(USBH_HandleTypeDef *phost, uint8_t attrib)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
 8007410:	460b      	mov	r3, r1
 8007412:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007414:	2301      	movs	r3, #1
 8007416:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800741e:	69db      	ldr	r3, [r3, #28]
 8007420:	60bb      	str	r3, [r7, #8]

  switch (attrib)
 8007422:	78fb      	ldrb	r3, [r7, #3]
 8007424:	2b01      	cmp	r3, #1
 8007426:	d002      	beq.n	800742e <USBH_AUDIO_SetControlAttribute+0x26>
 8007428:	2b02      	cmp	r3, #2
 800742a:	d00b      	beq.n	8007444 <USBH_AUDIO_SetControlAttribute+0x3c>
 800742c:	e015      	b.n	800745a <USBH_AUDIO_SetControlAttribute+0x52>
  {
    case 0x01:
      AUDIO_Handle->headphone.attribute.volume += AUDIO_Handle->headphone.attribute.resolution;
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8007434:	68bb      	ldr	r3, [r7, #8]
 8007436:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 800743a:	441a      	add	r2, r3
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 8007442:	e00d      	b.n	8007460 <USBH_AUDIO_SetControlAttribute+0x58>

    case 0x02:
      AUDIO_Handle->headphone.attribute.volume -= AUDIO_Handle->headphone.attribute.resolution;
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 800744a:	68bb      	ldr	r3, [r7, #8]
 800744c:	f8d3 3138 	ldr.w	r3, [r3, #312]	@ 0x138
 8007450:	1ad2      	subs	r2, r2, r3
 8007452:	68bb      	ldr	r3, [r7, #8]
 8007454:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
      break;
 8007458:	e002      	b.n	8007460 <USBH_AUDIO_SetControlAttribute+0x58>

    default :
      status = USBH_FAIL;
 800745a:	2302      	movs	r3, #2
 800745c:	73fb      	strb	r3, [r7, #15]
      break;
 800745e:	bf00      	nop
  }

  if (AUDIO_Handle->headphone.attribute.volume > AUDIO_Handle->headphone.attribute.volumeMax)
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 800746c:	429a      	cmp	r2, r3
 800746e:	d905      	bls.n	800747c <USBH_AUDIO_SetControlAttribute+0x74>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMax;
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_Handle->headphone.attribute.volume < AUDIO_Handle->headphone.attribute.volumeMin)
 800747c:	68bb      	ldr	r3, [r7, #8]
 800747e:	f8d3 2134 	ldr.w	r2, [r3, #308]	@ 0x134
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8007488:	429a      	cmp	r2, r3
 800748a:	d205      	bcs.n	8007498 <USBH_AUDIO_SetControlAttribute+0x90>
  {
    AUDIO_Handle->headphone.attribute.volume = AUDIO_Handle->headphone.attribute.volumeMin;
 800748c:	68bb      	ldr	r3, [r7, #8]
 800748e:	f8d3 212c 	ldr.w	r2, [r3, #300]	@ 0x12c
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	f8c3 2134 	str.w	r2, [r3, #308]	@ 0x134
  }

  if (AUDIO_SetVolume(phost,
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	f893 11a0 	ldrb.w	r1, [r3, #416]	@ 0x1a0
                      AUDIO_Handle->temp_feature,
                      (uint8_t)AUDIO_Handle->temp_channels,
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	f893 21a1 	ldrb.w	r2, [r3, #417]	@ 0x1a1
                      (uint16_t)AUDIO_Handle->headphone.attribute.volume) != USBH_BUSY)
 80074a4:	68bb      	ldr	r3, [r7, #8]
 80074a6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
  if (AUDIO_SetVolume(phost,
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f827 	bl	8007500 <AUDIO_SetVolume>
 80074b2:	4603      	mov	r3, r0
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	d01e      	beq.n	80074f6 <USBH_AUDIO_SetControlAttribute+0xee>
  {

    if (AUDIO_Handle->temp_channels == 1U)
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 80074be:	2b01      	cmp	r3, #1
 80074c0:	d10e      	bne.n	80074e0 <USBH_AUDIO_SetControlAttribute+0xd8>
    {
      AUDIO_Handle->temp_feature = AUDIO_Handle->headphone.asociated_feature;
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	f893 2107 	ldrb.w	r2, [r3, #263]	@ 0x107
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	f883 21a0 	strb.w	r2, [r3, #416]	@ 0x1a0
      AUDIO_Handle->temp_channels = AUDIO_Handle->headphone.asociated_channels;
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	f893 2109 	ldrb.w	r2, [r3, #265]	@ 0x109
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
      status = USBH_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
 80074de:	e007      	b.n	80074f0 <USBH_AUDIO_SetControlAttribute+0xe8>
    }
    else
    {
      AUDIO_Handle->temp_channels--;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	f893 31a1 	ldrb.w	r3, [r3, #417]	@ 0x1a1
 80074e6:	3b01      	subs	r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	f883 21a1 	strb.w	r2, [r3, #417]	@ 0x1a1
    }
    AUDIO_Handle->cs_req_state = AUDIO_REQ_GET_VOLUME;
 80074f0:	68bb      	ldr	r3, [r7, #8]
 80074f2:	2206      	movs	r2, #6
 80074f4:	705a      	strb	r2, [r3, #1]
  }


  return status;
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3710      	adds	r7, #16
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}

08007500 <AUDIO_SetVolume>:
  * @param  channel: channel index
  * @param  volume: new volume
  * @retval USBH Status
  */
static USBH_StatusTypeDef AUDIO_SetVolume(USBH_HandleTypeDef *phost, uint8_t feature, uint8_t channel, uint16_t volume)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af02      	add	r7, sp, #8
 8007506:	6078      	str	r0, [r7, #4]
 8007508:	4608      	mov	r0, r1
 800750a:	4611      	mov	r1, r2
 800750c:	461a      	mov	r2, r3
 800750e:	4603      	mov	r3, r0
 8007510:	70fb      	strb	r3, [r7, #3]
 8007512:	460b      	mov	r3, r1
 8007514:	70bb      	strb	r3, [r7, #2]
 8007516:	4613      	mov	r3, r2
 8007518:	803b      	strh	r3, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800751a:	2301      	movs	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
  AUDIO_HandleTypeDef *AUDIO_Handle;


  AUDIO_Handle = (AUDIO_HandleTypeDef *) phost->pActiveClass->pData;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007524:	69db      	ldr	r3, [r3, #28]
 8007526:	60bb      	str	r3, [r7, #8]

  AUDIO_Handle->mem[0] = volume;
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	883a      	ldrh	r2, [r7, #0]
 800752c:	f8a3 2190 	strh.w	r2, [r3, #400]	@ 0x190

  status = USBH_AC_SetCur(phost, UAC_FEATURE_UNIT, feature,
 8007530:	78fa      	ldrb	r2, [r7, #3]
 8007532:	2302      	movs	r3, #2
 8007534:	9301      	str	r3, [sp, #4]
 8007536:	78bb      	ldrb	r3, [r7, #2]
 8007538:	9300      	str	r3, [sp, #0]
 800753a:	2302      	movs	r3, #2
 800753c:	2106      	movs	r1, #6
 800753e:	6878      	ldr	r0, [r7, #4]
 8007540:	f7ff fa76 	bl	8006a30 <USBH_AC_SetCur>
 8007544:	4603      	mov	r3, r0
 8007546:	73fb      	strb	r3, [r7, #15]
                          VOLUME_CONTROL, channel, 2U);

  return status;
 8007548:	7bfb      	ldrb	r3, [r7, #15]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3710      	adds	r7, #16
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <USBH_AUDIO_FrequencySet>:
  * @brief  The function informs user that Settings have been changed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_FrequencySet(USBH_HandleTypeDef *phost)
{
 8007552:	b480      	push	{r7}
 8007554:	b083      	sub	sp, #12
 8007556:	af00      	add	r7, sp, #0
 8007558:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800755a:	bf00      	nop
 800755c:	370c      	adds	r7, #12
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr

08007566 <USBH_AUDIO_BufferEmptyCallback>:
  * @brief  The function informs user that User data are processed
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_AUDIO_BufferEmptyCallback(USBH_HandleTypeDef *phost)
{
 8007566:	b480      	push	{r7}
 8007568:	b083      	sub	sp, #12
 800756a:	af00      	add	r7, sp, #0
 800756c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800756e:	bf00      	nop
 8007570:	370c      	adds	r7, #12
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr

0800757a <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800757a:	b590      	push	{r4, r7, lr}
 800757c:	b089      	sub	sp, #36	@ 0x24
 800757e:	af04      	add	r7, sp, #16
 8007580:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007582:	2301      	movs	r3, #1
 8007584:	2202      	movs	r2, #2
 8007586:	2102      	movs	r1, #2
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	f004 f99f 	bl	800b8cc <USBH_FindInterface>
 800758e:	4603      	mov	r3, r0
 8007590:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007592:	7bfb      	ldrb	r3, [r7, #15]
 8007594:	2bff      	cmp	r3, #255	@ 0xff
 8007596:	d002      	beq.n	800759e <USBH_CDC_InterfaceInit+0x24>
 8007598:	7bfb      	ldrb	r3, [r7, #15]
 800759a:	2b09      	cmp	r3, #9
 800759c:	d901      	bls.n	80075a2 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800759e:	2302      	movs	r3, #2
 80075a0:	e13d      	b.n	800781e <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80075a2:	7bfb      	ldrb	r3, [r7, #15]
 80075a4:	4619      	mov	r1, r3
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f004 f974 	bl	800b894 <USBH_SelectInterface>
 80075ac:	4603      	mov	r3, r0
 80075ae:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80075b0:	7bbb      	ldrb	r3, [r7, #14]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d001      	beq.n	80075ba <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80075b6:	2302      	movs	r3, #2
 80075b8:	e131      	b.n	800781e <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 80075c0:	2050      	movs	r0, #80	@ 0x50
 80075c2:	f006 fa83 	bl	800dacc <malloc>
 80075c6:	4603      	mov	r3, r0
 80075c8:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d101      	bne.n	80075de <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 80075da:	2302      	movs	r3, #2
 80075dc:	e11f      	b.n	800781e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 80075de:	2250      	movs	r2, #80	@ 0x50
 80075e0:	2100      	movs	r1, #0
 80075e2:	68b8      	ldr	r0, [r7, #8]
 80075e4:	f006 fd70 	bl	800e0c8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	687a      	ldr	r2, [r7, #4]
 80075ec:	2132      	movs	r1, #50	@ 0x32
 80075ee:	fb01 f303 	mul.w	r3, r1, r3
 80075f2:	4413      	add	r3, r2
 80075f4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80075f8:	781b      	ldrb	r3, [r3, #0]
 80075fa:	b25b      	sxtb	r3, r3
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	da15      	bge.n	800762c <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007600:	7bfb      	ldrb	r3, [r7, #15]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	2132      	movs	r1, #50	@ 0x32
 8007606:	fb01 f303 	mul.w	r3, r1, r3
 800760a:	4413      	add	r3, r2
 800760c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007610:	781a      	ldrb	r2, [r3, #0]
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007616:	7bfb      	ldrb	r3, [r7, #15]
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	2132      	movs	r1, #50	@ 0x32
 800761c:	fb01 f303 	mul.w	r3, r1, r3
 8007620:	4413      	add	r3, r2
 8007622:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007626:	881a      	ldrh	r2, [r3, #0]
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	785b      	ldrb	r3, [r3, #1]
 8007630:	4619      	mov	r1, r3
 8007632:	6878      	ldr	r0, [r7, #4]
 8007634:	f005 fd6f 	bl	800d116 <USBH_AllocPipe>
 8007638:	4603      	mov	r3, r0
 800763a:	461a      	mov	r2, r3
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	7819      	ldrb	r1, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	7858      	ldrb	r0, [r3, #1]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	8952      	ldrh	r2, [r2, #10]
 8007658:	9202      	str	r2, [sp, #8]
 800765a:	2203      	movs	r2, #3
 800765c:	9201      	str	r2, [sp, #4]
 800765e:	9300      	str	r3, [sp, #0]
 8007660:	4623      	mov	r3, r4
 8007662:	4602      	mov	r2, r0
 8007664:	6878      	ldr	r0, [r7, #4]
 8007666:	f005 fd27 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	781b      	ldrb	r3, [r3, #0]
 800766e:	2200      	movs	r2, #0
 8007670:	4619      	mov	r1, r3
 8007672:	6878      	ldr	r0, [r7, #4]
 8007674:	f006 f970 	bl	800d958 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007678:	2300      	movs	r3, #0
 800767a:	2200      	movs	r2, #0
 800767c:	210a      	movs	r1, #10
 800767e:	6878      	ldr	r0, [r7, #4]
 8007680:	f004 f924 	bl	800b8cc <USBH_FindInterface>
 8007684:	4603      	mov	r3, r0
 8007686:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007688:	7bfb      	ldrb	r3, [r7, #15]
 800768a:	2bff      	cmp	r3, #255	@ 0xff
 800768c:	d002      	beq.n	8007694 <USBH_CDC_InterfaceInit+0x11a>
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	2b09      	cmp	r3, #9
 8007692:	d901      	bls.n	8007698 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007694:	2302      	movs	r3, #2
 8007696:	e0c2      	b.n	800781e <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	2132      	movs	r1, #50	@ 0x32
 800769e:	fb01 f303 	mul.w	r3, r1, r3
 80076a2:	4413      	add	r3, r2
 80076a4:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80076a8:	781b      	ldrb	r3, [r3, #0]
 80076aa:	b25b      	sxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	da16      	bge.n	80076de <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	687a      	ldr	r2, [r7, #4]
 80076b4:	2132      	movs	r1, #50	@ 0x32
 80076b6:	fb01 f303 	mul.w	r3, r1, r3
 80076ba:	4413      	add	r3, r2
 80076bc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80076c0:	781a      	ldrb	r2, [r3, #0]
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	2132      	movs	r1, #50	@ 0x32
 80076cc:	fb01 f303 	mul.w	r3, r1, r3
 80076d0:	4413      	add	r3, r2
 80076d2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80076d6:	881a      	ldrh	r2, [r3, #0]
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	835a      	strh	r2, [r3, #26]
 80076dc:	e015      	b.n	800770a <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80076de:	7bfb      	ldrb	r3, [r7, #15]
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	2132      	movs	r1, #50	@ 0x32
 80076e4:	fb01 f303 	mul.w	r3, r1, r3
 80076e8:	4413      	add	r3, r2
 80076ea:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80076ee:	781a      	ldrb	r2, [r3, #0]
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80076f4:	7bfb      	ldrb	r3, [r7, #15]
 80076f6:	687a      	ldr	r2, [r7, #4]
 80076f8:	2132      	movs	r1, #50	@ 0x32
 80076fa:	fb01 f303 	mul.w	r3, r1, r3
 80076fe:	4413      	add	r3, r2
 8007700:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007704:	881a      	ldrh	r2, [r3, #0]
 8007706:	68bb      	ldr	r3, [r7, #8]
 8007708:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800770a:	7bfb      	ldrb	r3, [r7, #15]
 800770c:	687a      	ldr	r2, [r7, #4]
 800770e:	2132      	movs	r1, #50	@ 0x32
 8007710:	fb01 f303 	mul.w	r3, r1, r3
 8007714:	4413      	add	r3, r2
 8007716:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	b25b      	sxtb	r3, r3
 800771e:	2b00      	cmp	r3, #0
 8007720:	da16      	bge.n	8007750 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	2132      	movs	r1, #50	@ 0x32
 8007728:	fb01 f303 	mul.w	r3, r1, r3
 800772c:	4413      	add	r3, r2
 800772e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007732:	781a      	ldrb	r2, [r3, #0]
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	687a      	ldr	r2, [r7, #4]
 800773c:	2132      	movs	r1, #50	@ 0x32
 800773e:	fb01 f303 	mul.w	r3, r1, r3
 8007742:	4413      	add	r3, r2
 8007744:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007748:	881a      	ldrh	r2, [r3, #0]
 800774a:	68bb      	ldr	r3, [r7, #8]
 800774c:	835a      	strh	r2, [r3, #26]
 800774e:	e015      	b.n	800777c <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	687a      	ldr	r2, [r7, #4]
 8007754:	2132      	movs	r1, #50	@ 0x32
 8007756:	fb01 f303 	mul.w	r3, r1, r3
 800775a:	4413      	add	r3, r2
 800775c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007760:	781a      	ldrb	r2, [r3, #0]
 8007762:	68bb      	ldr	r3, [r7, #8]
 8007764:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007766:	7bfb      	ldrb	r3, [r7, #15]
 8007768:	687a      	ldr	r2, [r7, #4]
 800776a:	2132      	movs	r1, #50	@ 0x32
 800776c:	fb01 f303 	mul.w	r3, r1, r3
 8007770:	4413      	add	r3, r2
 8007772:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007776:	881a      	ldrh	r2, [r3, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800777c:	68bb      	ldr	r3, [r7, #8]
 800777e:	7b9b      	ldrb	r3, [r3, #14]
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f005 fcc7 	bl	800d116 <USBH_AllocPipe>
 8007788:	4603      	mov	r3, r0
 800778a:	461a      	mov	r2, r3
 800778c:	68bb      	ldr	r3, [r7, #8]
 800778e:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8007790:	68bb      	ldr	r3, [r7, #8]
 8007792:	7bdb      	ldrb	r3, [r3, #15]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f005 fcbd 	bl	800d116 <USBH_AllocPipe>
 800779c:	4603      	mov	r3, r0
 800779e:	461a      	mov	r2, r3
 80077a0:	68bb      	ldr	r3, [r7, #8]
 80077a2:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	7b59      	ldrb	r1, [r3, #13]
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	7b98      	ldrb	r0, [r3, #14]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	8b12      	ldrh	r2, [r2, #24]
 80077bc:	9202      	str	r2, [sp, #8]
 80077be:	2202      	movs	r2, #2
 80077c0:	9201      	str	r2, [sp, #4]
 80077c2:	9300      	str	r3, [sp, #0]
 80077c4:	4623      	mov	r3, r4
 80077c6:	4602      	mov	r2, r0
 80077c8:	6878      	ldr	r0, [r7, #4]
 80077ca:	f005 fc75 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	7b19      	ldrb	r1, [r3, #12]
 80077d2:	68bb      	ldr	r3, [r7, #8]
 80077d4:	7bd8      	ldrb	r0, [r3, #15]
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80077e2:	68ba      	ldr	r2, [r7, #8]
 80077e4:	8b52      	ldrh	r2, [r2, #26]
 80077e6:	9202      	str	r2, [sp, #8]
 80077e8:	2202      	movs	r2, #2
 80077ea:	9201      	str	r2, [sp, #4]
 80077ec:	9300      	str	r3, [sp, #0]
 80077ee:	4623      	mov	r3, r4
 80077f0:	4602      	mov	r2, r0
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f005 fc60 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	2200      	movs	r2, #0
 80077fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	7b5b      	ldrb	r3, [r3, #13]
 8007804:	2200      	movs	r2, #0
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f006 f8a5 	bl	800d958 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	7b1b      	ldrb	r3, [r3, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f006 f89e 	bl	800d958 <USBH_LL_SetToggle>

  return USBH_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3714      	adds	r7, #20
 8007822:	46bd      	mov	sp, r7
 8007824:	bd90      	pop	{r4, r7, pc}

08007826 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007826:	b580      	push	{r7, lr}
 8007828:	b084      	sub	sp, #16
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007834:	69db      	ldr	r3, [r3, #28]
 8007836:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	781b      	ldrb	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d00e      	beq.n	800785e <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	781b      	ldrb	r3, [r3, #0]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f005 fc55 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	4619      	mov	r1, r3
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f005 fc81 	bl	800d15a <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	2200      	movs	r2, #0
 800785c:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	7b1b      	ldrb	r3, [r3, #12]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00e      	beq.n	8007884 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	7b1b      	ldrb	r3, [r3, #12]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f005 fc42 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	7b1b      	ldrb	r3, [r3, #12]
 8007876:	4619      	mov	r1, r3
 8007878:	6878      	ldr	r0, [r7, #4]
 800787a:	f005 fc6e 	bl	800d15a <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	2200      	movs	r2, #0
 8007882:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	7b5b      	ldrb	r3, [r3, #13]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d00e      	beq.n	80078aa <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	7b5b      	ldrb	r3, [r3, #13]
 8007890:	4619      	mov	r1, r3
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	f005 fc2f 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	7b5b      	ldrb	r3, [r3, #13]
 800789c:	4619      	mov	r1, r3
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	f005 fc5b 	bl	800d15a <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80078b0:	69db      	ldr	r3, [r3, #28]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00b      	beq.n	80078ce <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80078bc:	69db      	ldr	r3, [r3, #28]
 80078be:	4618      	mov	r0, r3
 80078c0:	f006 f90c 	bl	800dadc <free>
    phost->pActiveClass->pData = 0U;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80078ca:	2200      	movs	r2, #0
 80078cc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3710      	adds	r7, #16
 80078d4:	46bd      	mov	sp, r7
 80078d6:	bd80      	pop	{r7, pc}

080078d8 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b084      	sub	sp, #16
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80078e6:	69db      	ldr	r3, [r3, #28]
 80078e8:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	3340      	adds	r3, #64	@ 0x40
 80078ee:	4619      	mov	r1, r3
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f000 f8b2 	bl	8007a5a <GetLineCoding>
 80078f6:	4603      	mov	r3, r0
 80078f8:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80078fa:	7afb      	ldrb	r3, [r7, #11]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d105      	bne.n	800790c <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8007906:	2102      	movs	r1, #2
 8007908:	6878      	ldr	r0, [r7, #4]
 800790a:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800790c:	7afb      	ldrb	r3, [r7, #11]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3710      	adds	r7, #16
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
	...

08007918 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007920:	2301      	movs	r3, #1
 8007922:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800792e:	69db      	ldr	r3, [r3, #28]
 8007930:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8007938:	2b04      	cmp	r3, #4
 800793a:	d877      	bhi.n	8007a2c <USBH_CDC_Process+0x114>
 800793c:	a201      	add	r2, pc, #4	@ (adr r2, 8007944 <USBH_CDC_Process+0x2c>)
 800793e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007942:	bf00      	nop
 8007944:	08007959 	.word	0x08007959
 8007948:	0800795f 	.word	0x0800795f
 800794c:	0800798f 	.word	0x0800798f
 8007950:	08007a03 	.word	0x08007a03
 8007954:	08007a11 	.word	0x08007a11
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8007958:	2300      	movs	r3, #0
 800795a:	73fb      	strb	r3, [r7, #15]
      break;
 800795c:	e06d      	b.n	8007a3a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800795e:	68bb      	ldr	r3, [r7, #8]
 8007960:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007962:	4619      	mov	r1, r3
 8007964:	6878      	ldr	r0, [r7, #4]
 8007966:	f000 f897 	bl	8007a98 <SetLineCoding>
 800796a:	4603      	mov	r3, r0
 800796c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800796e:	7bbb      	ldrb	r3, [r7, #14]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d104      	bne.n	800797e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	2202      	movs	r2, #2
 8007978:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800797c:	e058      	b.n	8007a30 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800797e:	7bbb      	ldrb	r3, [r7, #14]
 8007980:	2b01      	cmp	r3, #1
 8007982:	d055      	beq.n	8007a30 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007984:	68bb      	ldr	r3, [r7, #8]
 8007986:	2204      	movs	r2, #4
 8007988:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800798c:	e050      	b.n	8007a30 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	3340      	adds	r3, #64	@ 0x40
 8007992:	4619      	mov	r1, r3
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 f860 	bl	8007a5a <GetLineCoding>
 800799a:	4603      	mov	r3, r0
 800799c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800799e:	7bbb      	ldrb	r3, [r7, #14]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d126      	bne.n	80079f2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079b6:	791b      	ldrb	r3, [r3, #4]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d13b      	bne.n	8007a34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80079c2:	68bb      	ldr	r3, [r7, #8]
 80079c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079c6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80079c8:	429a      	cmp	r2, r3
 80079ca:	d133      	bne.n	8007a34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80079d2:	68bb      	ldr	r3, [r7, #8]
 80079d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079d6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80079d8:	429a      	cmp	r2, r3
 80079da:	d12b      	bne.n	8007a34 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80079e0:	68bb      	ldr	r3, [r7, #8]
 80079e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80079e4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80079e6:	429a      	cmp	r2, r3
 80079e8:	d124      	bne.n	8007a34 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 f958 	bl	8007ca0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80079f0:	e020      	b.n	8007a34 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80079f2:	7bbb      	ldrb	r3, [r7, #14]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	d01d      	beq.n	8007a34 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	2204      	movs	r2, #4
 80079fc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8007a00:	e018      	b.n	8007a34 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f000 f867 	bl	8007ad6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 f8da 	bl	8007bc2 <CDC_ProcessReception>
      break;
 8007a0e:	e014      	b.n	8007a3a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007a10:	2100      	movs	r1, #0
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f004 fd8f 	bl	800c536 <USBH_ClrFeature>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10a      	bne.n	8007a38 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	2200      	movs	r2, #0
 8007a26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 8007a2a:	e005      	b.n	8007a38 <USBH_CDC_Process+0x120>

    default:
      break;
 8007a2c:	bf00      	nop
 8007a2e:	e004      	b.n	8007a3a <USBH_CDC_Process+0x122>
      break;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <USBH_CDC_Process+0x122>
      break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <USBH_CDC_Process+0x122>
      break;
 8007a38:	bf00      	nop

  }

  return status;
 8007a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3710      	adds	r7, #16
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a58:	4770      	bx	lr

08007a5a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b082      	sub	sp, #8
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
 8007a62:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	22a1      	movs	r2, #161	@ 0xa1
 8007a68:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	2221      	movs	r2, #33	@ 0x21
 8007a6e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	2200      	movs	r2, #0
 8007a74:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	2200      	movs	r2, #0
 8007a7a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2207      	movs	r2, #7
 8007a80:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	2207      	movs	r2, #7
 8007a86:	4619      	mov	r1, r3
 8007a88:	6878      	ldr	r0, [r7, #4]
 8007a8a:	f005 f88a 	bl	800cba2 <USBH_CtlReq>
 8007a8e:	4603      	mov	r3, r0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b082      	sub	sp, #8
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2221      	movs	r2, #33	@ 0x21
 8007aa6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2220      	movs	r2, #32
 8007aac:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2207      	movs	r2, #7
 8007abe:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007ac0:	683b      	ldr	r3, [r7, #0]
 8007ac2:	2207      	movs	r2, #7
 8007ac4:	4619      	mov	r1, r3
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f005 f86b 	bl	800cba2 <USBH_CtlReq>
 8007acc:	4603      	mov	r3, r0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b086      	sub	sp, #24
 8007ada:	af02      	add	r7, sp, #8
 8007adc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d002      	beq.n	8007afc <CDC_ProcessTransmission+0x26>
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d023      	beq.n	8007b42 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007afa:	e05e      	b.n	8007bba <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b00:	68fa      	ldr	r2, [r7, #12]
 8007b02:	8b12      	ldrh	r2, [r2, #24]
 8007b04:	4293      	cmp	r3, r2
 8007b06:	d90b      	bls.n	8007b20 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	69d9      	ldr	r1, [r3, #28]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	8b1a      	ldrh	r2, [r3, #24]
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	7b5b      	ldrb	r3, [r3, #13]
 8007b14:	2001      	movs	r0, #1
 8007b16:	9000      	str	r0, [sp, #0]
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f005 fa50 	bl	800cfbe <USBH_BulkSendData>
 8007b1e:	e00b      	b.n	8007b38 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8007b28:	b29a      	uxth	r2, r3
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	7b5b      	ldrb	r3, [r3, #13]
 8007b2e:	2001      	movs	r0, #1
 8007b30:	9000      	str	r0, [sp, #0]
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f005 fa43 	bl	800cfbe <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	2202      	movs	r2, #2
 8007b3c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007b40:	e03b      	b.n	8007bba <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	7b5b      	ldrb	r3, [r3, #13]
 8007b46:	4619      	mov	r1, r3
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f005 fedb 	bl	800d904 <USBH_LL_GetURBState>
 8007b4e:	4603      	mov	r3, r0
 8007b50:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007b52:	7afb      	ldrb	r3, [r7, #11]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d128      	bne.n	8007baa <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b5c:	68fa      	ldr	r2, [r7, #12]
 8007b5e:	8b12      	ldrh	r2, [r2, #24]
 8007b60:	4293      	cmp	r3, r2
 8007b62:	d90e      	bls.n	8007b82 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	8b12      	ldrh	r2, [r2, #24]
 8007b6c:	1a9a      	subs	r2, r3, r2
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	69db      	ldr	r3, [r3, #28]
 8007b76:	68fa      	ldr	r2, [r7, #12]
 8007b78:	8b12      	ldrh	r2, [r2, #24]
 8007b7a:	441a      	add	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	61da      	str	r2, [r3, #28]
 8007b80:	e002      	b.n	8007b88 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	2200      	movs	r2, #0
 8007b86:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d004      	beq.n	8007b9a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	2201      	movs	r2, #1
 8007b94:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007b98:	e00e      	b.n	8007bb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f868 	bl	8007c78 <USBH_CDC_TransmitCallback>
      break;
 8007ba8:	e006      	b.n	8007bb8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007baa:	7afb      	ldrb	r3, [r7, #11]
 8007bac:	2b02      	cmp	r3, #2
 8007bae:	d103      	bne.n	8007bb8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2201      	movs	r2, #1
 8007bb4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8007bb8:	bf00      	nop
  }
}
 8007bba:	bf00      	nop
 8007bbc:	3710      	adds	r7, #16
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b086      	sub	sp, #24
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007bd0:	69db      	ldr	r3, [r3, #28]
 8007bd2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8007bde:	2b03      	cmp	r3, #3
 8007be0:	d002      	beq.n	8007be8 <CDC_ProcessReception+0x26>
 8007be2:	2b04      	cmp	r3, #4
 8007be4:	d00e      	beq.n	8007c04 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007be6:	e043      	b.n	8007c70 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8007be8:	697b      	ldr	r3, [r7, #20]
 8007bea:	6a19      	ldr	r1, [r3, #32]
 8007bec:	697b      	ldr	r3, [r7, #20]
 8007bee:	8b5a      	ldrh	r2, [r3, #26]
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	7b1b      	ldrb	r3, [r3, #12]
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f005 fa07 	bl	800d008 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007bfa:	697b      	ldr	r3, [r7, #20]
 8007bfc:	2204      	movs	r2, #4
 8007bfe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007c02:	e035      	b.n	8007c70 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007c04:	697b      	ldr	r3, [r7, #20]
 8007c06:	7b1b      	ldrb	r3, [r3, #12]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f005 fe7a 	bl	800d904 <USBH_LL_GetURBState>
 8007c10:	4603      	mov	r3, r0
 8007c12:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007c14:	7cfb      	ldrb	r3, [r7, #19]
 8007c16:	2b01      	cmp	r3, #1
 8007c18:	d129      	bne.n	8007c6e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007c1a:	697b      	ldr	r3, [r7, #20]
 8007c1c:	7b1b      	ldrb	r3, [r3, #12]
 8007c1e:	4619      	mov	r1, r3
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f005 fddd 	bl	800d7e0 <USBH_LL_GetLastXferSize>
 8007c26:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c2c:	68fa      	ldr	r2, [r7, #12]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d016      	beq.n	8007c60 <CDC_ProcessReception+0x9e>
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	8b5b      	ldrh	r3, [r3, #26]
 8007c36:	461a      	mov	r2, r3
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	4293      	cmp	r3, r2
 8007c3c:	d110      	bne.n	8007c60 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8007c3e:	697b      	ldr	r3, [r7, #20]
 8007c40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	1ad2      	subs	r2, r2, r3
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6a1a      	ldr	r2, [r3, #32]
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	441a      	add	r2, r3
 8007c52:	697b      	ldr	r3, [r7, #20]
 8007c54:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	2203      	movs	r2, #3
 8007c5a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8007c5e:	e006      	b.n	8007c6e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007c60:	697b      	ldr	r3, [r7, #20]
 8007c62:	2200      	movs	r2, #0
 8007c64:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f000 f80f 	bl	8007c8c <USBH_CDC_ReceiveCallback>
      break;
 8007c6e:	bf00      	nop
  }
}
 8007c70:	bf00      	nop
 8007c72:	3718      	adds	r7, #24
 8007c74:	46bd      	mov	sp, r7
 8007c76:	bd80      	pop	{r7, pc}

08007c78 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <USBH_HID_InterfaceInit>:
  *         The function init the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007cb4:	b590      	push	{r4, r7, lr}
 8007cb6:	b08b      	sub	sp, #44	@ 0x2c
 8007cb8:	af04      	add	r7, sp, #16
 8007cba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  HID_HandleTypeDef *HID_Handle;
  uint16_t ep_mps;
  uint8_t max_ep;
  uint8_t num = 0U;
 8007cbc:	2300      	movs	r3, #0
 8007cbe:	75fb      	strb	r3, [r7, #23]
  uint8_t interface;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, HID_BOOT_CODE, 0xFFU);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007cc6:	7919      	ldrb	r1, [r3, #4]
 8007cc8:	23ff      	movs	r3, #255	@ 0xff
 8007cca:	2201      	movs	r2, #1
 8007ccc:	6878      	ldr	r0, [r7, #4]
 8007cce:	f003 fdfd 	bl	800b8cc <USBH_FindInterface>
 8007cd2:	4603      	mov	r3, r0
 8007cd4:	75bb      	strb	r3, [r7, #22]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007cd6:	7dbb      	ldrb	r3, [r7, #22]
 8007cd8:	2bff      	cmp	r3, #255	@ 0xff
 8007cda:	d002      	beq.n	8007ce2 <USBH_HID_InterfaceInit+0x2e>
 8007cdc:	7dbb      	ldrb	r3, [r7, #22]
 8007cde:	2b09      	cmp	r3, #9
 8007ce0:	d901      	bls.n	8007ce6 <USBH_HID_InterfaceInit+0x32>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007ce2:	2302      	movs	r3, #2
 8007ce4:	e122      	b.n	8007f2c <USBH_HID_InterfaceInit+0x278>
  }

  status = USBH_SelectInterface(phost, interface);
 8007ce6:	7dbb      	ldrb	r3, [r7, #22]
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f003 fdd2 	bl	800b894 <USBH_SelectInterface>
 8007cf0:	4603      	mov	r3, r0
 8007cf2:	757b      	strb	r3, [r7, #21]

  if (status != USBH_OK)
 8007cf4:	7d7b      	ldrb	r3, [r7, #21]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d001      	beq.n	8007cfe <USBH_HID_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8007cfa:	2302      	movs	r3, #2
 8007cfc:	e116      	b.n	8007f2c <USBH_HID_InterfaceInit+0x278>
  }

  phost->pActiveClass->pData = (HID_HandleTypeDef *)USBH_malloc(sizeof(HID_HandleTypeDef));
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 8007d04:	2034      	movs	r0, #52	@ 0x34
 8007d06:	f005 fee1 	bl	800dacc <malloc>
 8007d0a:	4603      	mov	r3, r0
 8007d0c:	61e3      	str	r3, [r4, #28]
  HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007d14:	69db      	ldr	r3, [r3, #28]
 8007d16:	613b      	str	r3, [r7, #16]

  if (HID_Handle == NULL)
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d101      	bne.n	8007d22 <USBH_HID_InterfaceInit+0x6e>
  {
    USBH_DbgLog("Cannot allocate memory for HID Handle");
    return USBH_FAIL;
 8007d1e:	2302      	movs	r3, #2
 8007d20:	e104      	b.n	8007f2c <USBH_HID_InterfaceInit+0x278>
  }

  /* Initialize hid handler */
  (void)USBH_memset(HID_Handle, 0, sizeof(HID_HandleTypeDef));
 8007d22:	2234      	movs	r2, #52	@ 0x34
 8007d24:	2100      	movs	r1, #0
 8007d26:	6938      	ldr	r0, [r7, #16]
 8007d28:	f006 f9ce 	bl	800e0c8 <memset>

  HID_Handle->state = USBH_HID_ERROR;
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	2207      	movs	r2, #7
 8007d30:	709a      	strb	r2, [r3, #2]

  /*Decode Bootclass Protocol: Mouse or Keyboard*/
  if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol == HID_KEYBRD_BOOT_CODE)
 8007d32:	7dbb      	ldrb	r3, [r7, #22]
 8007d34:	687a      	ldr	r2, [r7, #4]
 8007d36:	2132      	movs	r1, #50	@ 0x32
 8007d38:	fb01 f303 	mul.w	r3, r1, r3
 8007d3c:	4413      	add	r3, r2
 8007d3e:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	2b01      	cmp	r3, #1
 8007d46:	d103      	bne.n	8007d50 <USBH_HID_InterfaceInit+0x9c>
  {
    USBH_UsrLog("KeyBoard device found!");
    HID_Handle->Init = USBH_HID_KeybdInit;
 8007d48:	693b      	ldr	r3, [r7, #16]
 8007d4a:	4a7a      	ldr	r2, [pc, #488]	@ (8007f34 <USBH_HID_InterfaceInit+0x280>)
 8007d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d4e:	e010      	b.n	8007d72 <USBH_HID_InterfaceInit+0xbe>
  }
  else if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol  == HID_MOUSE_BOOT_CODE)
 8007d50:	7dbb      	ldrb	r3, [r7, #22]
 8007d52:	687a      	ldr	r2, [r7, #4]
 8007d54:	2132      	movs	r1, #50	@ 0x32
 8007d56:	fb01 f303 	mul.w	r3, r1, r3
 8007d5a:	4413      	add	r3, r2
 8007d5c:	f203 3349 	addw	r3, r3, #841	@ 0x349
 8007d60:	781b      	ldrb	r3, [r3, #0]
 8007d62:	2b02      	cmp	r3, #2
 8007d64:	d103      	bne.n	8007d6e <USBH_HID_InterfaceInit+0xba>
  {
    USBH_UsrLog("Mouse device found!");
    HID_Handle->Init = USBH_HID_MouseInit;
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	4a73      	ldr	r2, [pc, #460]	@ (8007f38 <USBH_HID_InterfaceInit+0x284>)
 8007d6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8007d6c:	e001      	b.n	8007d72 <USBH_HID_InterfaceInit+0xbe>
  }
  else
  {
    USBH_UsrLog("Protocol not supported.");
    return USBH_FAIL;
 8007d6e:	2302      	movs	r3, #2
 8007d70:	e0dc      	b.n	8007f2c <USBH_HID_InterfaceInit+0x278>
  }

  HID_Handle->state     = USBH_HID_INIT;
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	2200      	movs	r2, #0
 8007d76:	709a      	strb	r2, [r3, #2]
  HID_Handle->ctl_state = USBH_HID_REQ_INIT;
 8007d78:	693b      	ldr	r3, [r7, #16]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	715a      	strb	r2, [r3, #5]
  HID_Handle->ep_addr   = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007d7e:	7dbb      	ldrb	r3, [r7, #22]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	2132      	movs	r1, #50	@ 0x32
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	4413      	add	r3, r2
 8007d8a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007d8e:	781a      	ldrb	r2, [r3, #0]
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	769a      	strb	r2, [r3, #26]
  HID_Handle->length    = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d94:	7dbb      	ldrb	r3, [r7, #22]
 8007d96:	687a      	ldr	r2, [r7, #4]
 8007d98:	2132      	movs	r1, #50	@ 0x32
 8007d9a:	fb01 f303 	mul.w	r3, r1, r3
 8007d9e:	4413      	add	r3, r2
 8007da0:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007da4:	881a      	ldrh	r2, [r3, #0]
 8007da6:	693b      	ldr	r3, [r7, #16]
 8007da8:	831a      	strh	r2, [r3, #24]
  HID_Handle->poll      = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bInterval;
 8007daa:	7dbb      	ldrb	r3, [r7, #22]
 8007dac:	687a      	ldr	r2, [r7, #4]
 8007dae:	2132      	movs	r1, #50	@ 0x32
 8007db0:	fb01 f303 	mul.w	r3, r1, r3
 8007db4:	4413      	add	r3, r2
 8007db6:	f203 3352 	addw	r3, r3, #850	@ 0x352
 8007dba:	781b      	ldrb	r3, [r3, #0]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	839a      	strh	r2, [r3, #28]

  if (HID_Handle->poll < HID_MIN_POLL)
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	8b9b      	ldrh	r3, [r3, #28]
 8007dc6:	2b09      	cmp	r3, #9
 8007dc8:	d802      	bhi.n	8007dd0 <USBH_HID_InterfaceInit+0x11c>
  {
    HID_Handle->poll = HID_MIN_POLL;
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	220a      	movs	r2, #10
 8007dce:	839a      	strh	r2, [r3, #28]
  }

  /* Check of available number of endpoints */
  /* Find the number of EPs in the Interface Descriptor */
  /* Choose the lower number in order not to overrun the buffer allocated */
  max_ep = ((phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints <= USBH_MAX_NUM_ENDPOINTS) ?
 8007dd0:	7dbb      	ldrb	r3, [r7, #22]
 8007dd2:	687a      	ldr	r2, [r7, #4]
 8007dd4:	2132      	movs	r1, #50	@ 0x32
 8007dd6:	fb01 f303 	mul.w	r3, r1, r3
 8007dda:	4413      	add	r3, r2
 8007ddc:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	2b05      	cmp	r3, #5
 8007de4:	bf28      	it	cs
 8007de6:	2305      	movcs	r3, #5
 8007de8:	73fb      	strb	r3, [r7, #15]
            phost->device.CfgDesc.Itf_Desc[interface].bNumEndpoints : USBH_MAX_NUM_ENDPOINTS);


  /* Decode endpoint IN and OUT address from interface descriptor */
  for (num = 0U; num < max_ep; num++)
 8007dea:	2300      	movs	r3, #0
 8007dec:	75fb      	strb	r3, [r7, #23]
 8007dee:	e097      	b.n	8007f20 <USBH_HID_InterfaceInit+0x26c>
  {
    if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress & 0x80U) != 0U)
 8007df0:	7dbb      	ldrb	r3, [r7, #22]
 8007df2:	7df9      	ldrb	r1, [r7, #23]
 8007df4:	687a      	ldr	r2, [r7, #4]
 8007df6:	3101      	adds	r1, #1
 8007df8:	00c9      	lsls	r1, r1, #3
 8007dfa:	2032      	movs	r0, #50	@ 0x32
 8007dfc:	fb00 f303 	mul.w	r3, r0, r3
 8007e00:	440b      	add	r3, r1
 8007e02:	4413      	add	r3, r2
 8007e04:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8007e08:	781b      	ldrb	r3, [r3, #0]
 8007e0a:	b25b      	sxtb	r3, r3
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	da42      	bge.n	8007e96 <USBH_HID_InterfaceInit+0x1e2>
    {
      HID_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007e10:	7dbb      	ldrb	r3, [r7, #22]
 8007e12:	7df9      	ldrb	r1, [r7, #23]
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	3101      	adds	r1, #1
 8007e18:	00c9      	lsls	r1, r1, #3
 8007e1a:	2032      	movs	r0, #50	@ 0x32
 8007e1c:	fb00 f303 	mul.w	r3, r0, r3
 8007e20:	440b      	add	r3, r1
 8007e22:	4413      	add	r3, r2
 8007e24:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8007e28:	781a      	ldrb	r2, [r3, #0]
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	711a      	strb	r2, [r3, #4]
      HID_Handle->InPipe = USBH_AllocPipe(phost, HID_Handle->InEp);
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	791b      	ldrb	r3, [r3, #4]
 8007e32:	4619      	mov	r1, r3
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f005 f96e 	bl	800d116 <USBH_AllocPipe>
 8007e3a:	4603      	mov	r3, r0
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	705a      	strb	r2, [r3, #1]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8007e42:	7dbb      	ldrb	r3, [r7, #22]
 8007e44:	7df9      	ldrb	r1, [r7, #23]
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	3101      	adds	r1, #1
 8007e4a:	00c9      	lsls	r1, r1, #3
 8007e4c:	2032      	movs	r0, #50	@ 0x32
 8007e4e:	fb00 f303 	mul.w	r3, r0, r3
 8007e52:	440b      	add	r3, r1
 8007e54:	4413      	add	r3, r2
 8007e56:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8007e5a:	881b      	ldrh	r3, [r3, #0]
 8007e5c:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for IN endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->InPipe, HID_Handle->InEp, phost->device.address,
 8007e5e:	693b      	ldr	r3, [r7, #16]
 8007e60:	7859      	ldrb	r1, [r3, #1]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	7918      	ldrb	r0, [r3, #4]
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007e72:	89ba      	ldrh	r2, [r7, #12]
 8007e74:	9202      	str	r2, [sp, #8]
 8007e76:	2203      	movs	r2, #3
 8007e78:	9201      	str	r2, [sp, #4]
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	4623      	mov	r3, r4
 8007e7e:	4602      	mov	r2, r0
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f005 f919 	bl	800d0b8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->InPipe, 0U);
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	785b      	ldrb	r3, [r3, #1]
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f005 fd62 	bl	800d958 <USBH_LL_SetToggle>
 8007e94:	e041      	b.n	8007f1a <USBH_HID_InterfaceInit+0x266>
    }
    else
    {
      HID_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].bEndpointAddress);
 8007e96:	7dbb      	ldrb	r3, [r7, #22]
 8007e98:	7df9      	ldrb	r1, [r7, #23]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	3101      	adds	r1, #1
 8007e9e:	00c9      	lsls	r1, r1, #3
 8007ea0:	2032      	movs	r0, #50	@ 0x32
 8007ea2:	fb00 f303 	mul.w	r3, r0, r3
 8007ea6:	440b      	add	r3, r1
 8007ea8:	4413      	add	r3, r2
 8007eaa:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8007eae:	781a      	ldrb	r2, [r3, #0]
 8007eb0:	693b      	ldr	r3, [r7, #16]
 8007eb2:	70da      	strb	r2, [r3, #3]
      HID_Handle->OutPipe = USBH_AllocPipe(phost, HID_Handle->OutEp);
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	78db      	ldrb	r3, [r3, #3]
 8007eb8:	4619      	mov	r1, r3
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f005 f92b 	bl	800d116 <USBH_AllocPipe>
 8007ec0:	4603      	mov	r3, r0
 8007ec2:	461a      	mov	r2, r3
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	701a      	strb	r2, [r3, #0]
      ep_mps = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[num].wMaxPacketSize;
 8007ec8:	7dbb      	ldrb	r3, [r7, #22]
 8007eca:	7df9      	ldrb	r1, [r7, #23]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	3101      	adds	r1, #1
 8007ed0:	00c9      	lsls	r1, r1, #3
 8007ed2:	2032      	movs	r0, #50	@ 0x32
 8007ed4:	fb00 f303 	mul.w	r3, r0, r3
 8007ed8:	440b      	add	r3, r1
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8007ee0:	881b      	ldrh	r3, [r3, #0]
 8007ee2:	81bb      	strh	r3, [r7, #12]

      /* Open pipe for OUT endpoint */
      (void)USBH_OpenPipe(phost, HID_Handle->OutPipe, HID_Handle->OutEp, phost->device.address,
 8007ee4:	693b      	ldr	r3, [r7, #16]
 8007ee6:	7819      	ldrb	r1, [r3, #0]
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	78d8      	ldrb	r0, [r3, #3]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007ef8:	89ba      	ldrh	r2, [r7, #12]
 8007efa:	9202      	str	r2, [sp, #8]
 8007efc:	2203      	movs	r2, #3
 8007efe:	9201      	str	r2, [sp, #4]
 8007f00:	9300      	str	r3, [sp, #0]
 8007f02:	4623      	mov	r3, r4
 8007f04:	4602      	mov	r2, r0
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f005 f8d6 	bl	800d0b8 <USBH_OpenPipe>
                          phost->device.speed, USB_EP_TYPE_INTR, ep_mps);

      (void)USBH_LL_SetToggle(phost, HID_Handle->OutPipe, 0U);
 8007f0c:	693b      	ldr	r3, [r7, #16]
 8007f0e:	781b      	ldrb	r3, [r3, #0]
 8007f10:	2200      	movs	r2, #0
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f005 fd1f 	bl	800d958 <USBH_LL_SetToggle>
  for (num = 0U; num < max_ep; num++)
 8007f1a:	7dfb      	ldrb	r3, [r7, #23]
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	75fb      	strb	r3, [r7, #23]
 8007f20:	7dfa      	ldrb	r2, [r7, #23]
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	429a      	cmp	r2, r3
 8007f26:	f4ff af63 	bcc.w	8007df0 <USBH_HID_InterfaceInit+0x13c>
    }
  }

  return USBH_OK;
 8007f2a:	2300      	movs	r3, #0
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	371c      	adds	r7, #28
 8007f30:	46bd      	mov	sp, r7
 8007f32:	bd90      	pop	{r4, r7, pc}
 8007f34:	08008589 	.word	0x08008589
 8007f38:	08008631 	.word	0x08008631

08007f3c <USBH_HID_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007f3c:	b580      	push	{r7, lr}
 8007f3e:	b084      	sub	sp, #16
 8007f40:	af00      	add	r7, sp, #0
 8007f42:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007f4a:	69db      	ldr	r3, [r3, #28]
 8007f4c:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->InPipe != 0x00U)
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	785b      	ldrb	r3, [r3, #1]
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00e      	beq.n	8007f74 <USBH_HID_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->InPipe);
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	785b      	ldrb	r3, [r3, #1]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f005 f8ca 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->InPipe);
 8007f62:	68fb      	ldr	r3, [r7, #12]
 8007f64:	785b      	ldrb	r3, [r3, #1]
 8007f66:	4619      	mov	r1, r3
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f005 f8f6 	bl	800d15a <USBH_FreePipe>
    HID_Handle->InPipe = 0U;     /* Reset the pipe as Free */
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	2200      	movs	r2, #0
 8007f72:	705a      	strb	r2, [r3, #1]
  }

  if (HID_Handle->OutPipe != 0x00U)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d00e      	beq.n	8007f9a <USBH_HID_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, HID_Handle->OutPipe);
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	781b      	ldrb	r3, [r3, #0]
 8007f80:	4619      	mov	r1, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f005 f8b7 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, HID_Handle->OutPipe);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f005 f8e3 	bl	800d15a <USBH_FreePipe>
    HID_Handle->OutPipe = 0U;     /* Reset the pipe as Free */
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	2200      	movs	r2, #0
 8007f98:	701a      	strb	r2, [r3, #0]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007fa0:	69db      	ldr	r3, [r3, #28]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <USBH_HID_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007fac:	69db      	ldr	r3, [r3, #28]
 8007fae:	4618      	mov	r0, r3
 8007fb0:	f005 fd94 	bl	800dadc <free>
    phost->pActiveClass->pData = 0U;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007fba:	2200      	movs	r2, #0
 8007fbc:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007fbe:	2300      	movs	r3, #0
}
 8007fc0:	4618      	mov	r0, r3
 8007fc2:	3710      	adds	r7, #16
 8007fc4:	46bd      	mov	sp, r7
 8007fc6:	bd80      	pop	{r7, pc}

08007fc8 <USBH_HID_ClassRequest>:
  *         for HID class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status         = USBH_BUSY;
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef classReqStatus = USBH_BUSY;
 8007fd4:	2301      	movs	r3, #1
 8007fd6:	73bb      	strb	r3, [r7, #14]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8007fde:	69db      	ldr	r3, [r3, #28]
 8007fe0:	60bb      	str	r3, [r7, #8]

  /* Switch HID state machine */
  switch (HID_Handle->ctl_state)
 8007fe2:	68bb      	ldr	r3, [r7, #8]
 8007fe4:	795b      	ldrb	r3, [r3, #5]
 8007fe6:	2b05      	cmp	r3, #5
 8007fe8:	d860      	bhi.n	80080ac <USBH_HID_ClassRequest+0xe4>
 8007fea:	a201      	add	r2, pc, #4	@ (adr r2, 8007ff0 <USBH_HID_ClassRequest+0x28>)
 8007fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ff0:	08008009 	.word	0x08008009
 8007ff4:	080080ad 	.word	0x080080ad
 8007ff8:	08008023 	.word	0x08008023
 8007ffc:	08008009 	.word	0x08008009
 8008000:	0800804d 	.word	0x0800804d
 8008004:	08008077 	.word	0x08008077
  {
    case USBH_HID_REQ_INIT:
    case USBH_HID_REQ_GET_HID_DESC:

      USBH_HID_ParseHIDDesc(&HID_Handle->HID_Desc, phost->device.CfgDesc_Raw);
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	f103 0226 	add.w	r2, r3, #38	@ 0x26
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	331c      	adds	r3, #28
 8008012:	4619      	mov	r1, r3
 8008014:	4610      	mov	r0, r2
 8008016:	f000 f9e1 	bl	80083dc <USBH_HID_ParseHIDDesc>

      HID_Handle->ctl_state = USBH_HID_REQ_GET_REPORT_DESC;
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	2202      	movs	r2, #2
 800801e:	715a      	strb	r2, [r3, #5]

      break;
 8008020:	e04b      	b.n	80080ba <USBH_HID_ClassRequest+0xf2>
    case USBH_HID_REQ_GET_REPORT_DESC:

      /* Get Report Desc */
      classReqStatus = USBH_HID_GetHIDReportDescriptor(phost, HID_Handle->HID_Desc.wItemLength);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f93e 	bl	80082aa <USBH_HID_GetHIDReportDescriptor>
 800802e:	4603      	mov	r3, r0
 8008030:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8008032:	7bbb      	ldrb	r3, [r7, #14]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d103      	bne.n	8008040 <USBH_HID_ClassRequest+0x78>
      {
        /* The descriptor is available in phost->device.Data */
        HID_Handle->ctl_state = USBH_HID_REQ_SET_IDLE;
 8008038:	68bb      	ldr	r3, [r7, #8]
 800803a:	2204      	movs	r2, #4
 800803c:	715a      	strb	r2, [r3, #5]
      else
      {
        /* .. */
      }

      break;
 800803e:	e037      	b.n	80080b0 <USBH_HID_ClassRequest+0xe8>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 8008040:	7bbb      	ldrb	r3, [r7, #14]
 8008042:	2b03      	cmp	r3, #3
 8008044:	d134      	bne.n	80080b0 <USBH_HID_ClassRequest+0xe8>
        status = USBH_FAIL;
 8008046:	2302      	movs	r3, #2
 8008048:	73fb      	strb	r3, [r7, #15]
      break;
 800804a:	e031      	b.n	80080b0 <USBH_HID_ClassRequest+0xe8>

    case USBH_HID_REQ_SET_IDLE:

      classReqStatus = USBH_HID_SetIdle(phost, 0U, 0U);
 800804c:	2200      	movs	r2, #0
 800804e:	2100      	movs	r1, #0
 8008050:	6878      	ldr	r0, [r7, #4]
 8008052:	f000 f949 	bl	80082e8 <USBH_HID_SetIdle>
 8008056:	4603      	mov	r3, r0
 8008058:	73bb      	strb	r3, [r7, #14]

      /* set Idle */
      if (classReqStatus == USBH_OK)
 800805a:	7bbb      	ldrb	r3, [r7, #14]
 800805c:	2b00      	cmp	r3, #0
 800805e:	d103      	bne.n	8008068 <USBH_HID_ClassRequest+0xa0>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2205      	movs	r2, #5
 8008064:	715a      	strb	r2, [r3, #5]
        if (classReqStatus == USBH_NOT_SUPPORTED)
        {
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
        }
      }
      break;
 8008066:	e025      	b.n	80080b4 <USBH_HID_ClassRequest+0xec>
        if (classReqStatus == USBH_NOT_SUPPORTED)
 8008068:	7bbb      	ldrb	r3, [r7, #14]
 800806a:	2b03      	cmp	r3, #3
 800806c:	d122      	bne.n	80080b4 <USBH_HID_ClassRequest+0xec>
          HID_Handle->ctl_state = USBH_HID_REQ_SET_PROTOCOL;
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	2205      	movs	r2, #5
 8008072:	715a      	strb	r2, [r3, #5]
      break;
 8008074:	e01e      	b.n	80080b4 <USBH_HID_ClassRequest+0xec>

    case USBH_HID_REQ_SET_PROTOCOL:
      /* set protocol */
      classReqStatus = USBH_HID_SetProtocol(phost, 0U);
 8008076:	2100      	movs	r1, #0
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 f989 	bl	8008390 <USBH_HID_SetProtocol>
 800807e:	4603      	mov	r3, r0
 8008080:	73bb      	strb	r3, [r7, #14]
      if (classReqStatus == USBH_OK)
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <USBH_HID_ClassRequest+0xd8>
      {
        HID_Handle->ctl_state = USBH_HID_REQ_IDLE;
 8008088:	68bb      	ldr	r3, [r7, #8]
 800808a:	2201      	movs	r2, #1
 800808c:	715a      	strb	r2, [r3, #5]

        /* all requests performed */
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8008094:	2102      	movs	r1, #2
 8008096:	6878      	ldr	r0, [r7, #4]
 8008098:	4798      	blx	r3
        status = USBH_OK;
 800809a:	2300      	movs	r3, #0
 800809c:	73fb      	strb	r3, [r7, #15]
      }
      else
      {
        /* .. */
      }
      break;
 800809e:	e00b      	b.n	80080b8 <USBH_HID_ClassRequest+0xf0>
      else if (classReqStatus == USBH_NOT_SUPPORTED)
 80080a0:	7bbb      	ldrb	r3, [r7, #14]
 80080a2:	2b03      	cmp	r3, #3
 80080a4:	d108      	bne.n	80080b8 <USBH_HID_ClassRequest+0xf0>
        status = USBH_FAIL;
 80080a6:	2302      	movs	r3, #2
 80080a8:	73fb      	strb	r3, [r7, #15]
      break;
 80080aa:	e005      	b.n	80080b8 <USBH_HID_ClassRequest+0xf0>

    case USBH_HID_REQ_IDLE:
    default:
      break;
 80080ac:	bf00      	nop
 80080ae:	e004      	b.n	80080ba <USBH_HID_ClassRequest+0xf2>
      break;
 80080b0:	bf00      	nop
 80080b2:	e002      	b.n	80080ba <USBH_HID_ClassRequest+0xf2>
      break;
 80080b4:	bf00      	nop
 80080b6:	e000      	b.n	80080ba <USBH_HID_ClassRequest+0xf2>
      break;
 80080b8:	bf00      	nop
  }

  return status;
 80080ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80080bc:	4618      	mov	r0, r3
 80080be:	3710      	adds	r7, #16
 80080c0:	46bd      	mov	sp, r7
 80080c2:	bd80      	pop	{r7, pc}

080080c4 <USBH_HID_Process>:
  *         The function is for managing state machine for HID data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_Process(USBH_HandleTypeDef *phost)
{
 80080c4:	b580      	push	{r7, lr}
 80080c6:	b088      	sub	sp, #32
 80080c8:	af02      	add	r7, sp, #8
 80080ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80080cc:	2300      	movs	r3, #0
 80080ce:	75fb      	strb	r3, [r7, #23]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80080d6:	69db      	ldr	r3, [r3, #28]
 80080d8:	613b      	str	r3, [r7, #16]
  uint32_t XferSize;

  switch (HID_Handle->state)
 80080da:	693b      	ldr	r3, [r7, #16]
 80080dc:	789b      	ldrb	r3, [r3, #2]
 80080de:	2b06      	cmp	r3, #6
 80080e0:	f200 80b8 	bhi.w	8008254 <USBH_HID_Process+0x190>
 80080e4:	a201      	add	r2, pc, #4	@ (adr r2, 80080ec <USBH_HID_Process+0x28>)
 80080e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ea:	bf00      	nop
 80080ec:	08008109 	.word	0x08008109
 80080f0:	0800812f 	.word	0x0800812f
 80080f4:	08008255 	.word	0x08008255
 80080f8:	08008255 	.word	0x08008255
 80080fc:	0800819f 	.word	0x0800819f
 8008100:	08008189 	.word	0x08008189
 8008104:	080081cd 	.word	0x080081cd
  {
    case USBH_HID_INIT:
      status = HID_Handle->Init(phost);
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	4798      	blx	r3
 8008110:	4603      	mov	r3, r0
 8008112:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8008114:	7dfb      	ldrb	r3, [r7, #23]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d103      	bne.n	8008122 <USBH_HID_Process+0x5e>
      {
        HID_Handle->state = USBH_HID_IDLE;
 800811a:	693b      	ldr	r3, [r7, #16]
 800811c:	2201      	movs	r2, #1
 800811e:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008120:	e09d      	b.n	800825e <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	2207      	movs	r2, #7
 8008126:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008128:	2302      	movs	r3, #2
 800812a:	75fb      	strb	r3, [r7, #23]
      break;
 800812c:	e097      	b.n	800825e <USBH_HID_Process+0x19a>

    case USBH_HID_IDLE:
      status = USBH_HID_GetReport(phost, 0x01U, 0U, HID_Handle->pData, (uint8_t)HID_Handle->length);
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	695a      	ldr	r2, [r3, #20]
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	8b1b      	ldrh	r3, [r3, #24]
 8008136:	b2db      	uxtb	r3, r3
 8008138:	9300      	str	r3, [sp, #0]
 800813a:	4613      	mov	r3, r2
 800813c:	2200      	movs	r2, #0
 800813e:	2101      	movs	r1, #1
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f8f9 	bl	8008338 <USBH_HID_GetReport>
 8008146:	4603      	mov	r3, r0
 8008148:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800814a:	7dfb      	ldrb	r3, [r7, #23]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d103      	bne.n	8008158 <USBH_HID_Process+0x94>
      {
        HID_Handle->state = USBH_HID_SYNC;
 8008150:	693b      	ldr	r3, [r7, #16]
 8008152:	2205      	movs	r2, #5
 8008154:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008156:	e082      	b.n	800825e <USBH_HID_Process+0x19a>
      else if (status == USBH_BUSY)
 8008158:	7dfb      	ldrb	r3, [r7, #23]
 800815a:	2b01      	cmp	r3, #1
 800815c:	d105      	bne.n	800816a <USBH_HID_Process+0xa6>
        HID_Handle->state = USBH_HID_IDLE;
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	2201      	movs	r2, #1
 8008162:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8008164:	2300      	movs	r3, #0
 8008166:	75fb      	strb	r3, [r7, #23]
      break;
 8008168:	e079      	b.n	800825e <USBH_HID_Process+0x19a>
      else if (status == USBH_NOT_SUPPORTED)
 800816a:	7dfb      	ldrb	r3, [r7, #23]
 800816c:	2b03      	cmp	r3, #3
 800816e:	d105      	bne.n	800817c <USBH_HID_Process+0xb8>
        HID_Handle->state = USBH_HID_SYNC;
 8008170:	693b      	ldr	r3, [r7, #16]
 8008172:	2205      	movs	r2, #5
 8008174:	709a      	strb	r2, [r3, #2]
        status = USBH_OK;
 8008176:	2300      	movs	r3, #0
 8008178:	75fb      	strb	r3, [r7, #23]
      break;
 800817a:	e070      	b.n	800825e <USBH_HID_Process+0x19a>
        HID_Handle->state = USBH_HID_ERROR;
 800817c:	693b      	ldr	r3, [r7, #16]
 800817e:	2207      	movs	r2, #7
 8008180:	709a      	strb	r2, [r3, #2]
        status = USBH_FAIL;
 8008182:	2302      	movs	r3, #2
 8008184:	75fb      	strb	r3, [r7, #23]
      break;
 8008186:	e06a      	b.n	800825e <USBH_HID_Process+0x19a>

    case USBH_HID_SYNC:
      /* Sync with start of Even Frame */
      if ((phost->Timer & 1U) != 0U)
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800818e:	f003 0301 	and.w	r3, r3, #1
 8008192:	2b00      	cmp	r3, #0
 8008194:	d060      	beq.n	8008258 <USBH_HID_Process+0x194>
      {
        HID_Handle->state = USBH_HID_GET_DATA;
 8008196:	693b      	ldr	r3, [r7, #16]
 8008198:	2204      	movs	r2, #4
 800819a:	709a      	strb	r2, [r3, #2]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800819c:	e05c      	b.n	8008258 <USBH_HID_Process+0x194>

    case USBH_HID_GET_DATA:
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6959      	ldr	r1, [r3, #20]
                                      (uint8_t)HID_Handle->length,
 80081a2:	693b      	ldr	r3, [r7, #16]
 80081a4:	8b1b      	ldrh	r3, [r3, #24]
      (void)USBH_InterruptReceiveData(phost, HID_Handle->pData,
 80081a6:	b2da      	uxtb	r2, r3
 80081a8:	693b      	ldr	r3, [r7, #16]
 80081aa:	785b      	ldrb	r3, [r3, #1]
 80081ac:	6878      	ldr	r0, [r7, #4]
 80081ae:	f004 ff49 	bl	800d044 <USBH_InterruptReceiveData>
                                      HID_Handle->InPipe);

      HID_Handle->state = USBH_HID_POLL;
 80081b2:	693b      	ldr	r3, [r7, #16]
 80081b4:	2206      	movs	r2, #6
 80081b6:	709a      	strb	r2, [r3, #2]
      HID_Handle->timer = phost->Timer;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	621a      	str	r2, [r3, #32]
      HID_Handle->DataReady = 0U;
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2200      	movs	r2, #0
 80081c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      break;
 80081ca:	e048      	b.n	800825e <USBH_HID_Process+0x19a>

    case USBH_HID_POLL:
      if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_DONE)
 80081cc:	693b      	ldr	r3, [r7, #16]
 80081ce:	785b      	ldrb	r3, [r3, #1]
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f005 fb96 	bl	800d904 <USBH_LL_GetURBState>
 80081d8:	4603      	mov	r3, r0
 80081da:	2b01      	cmp	r3, #1
 80081dc:	d124      	bne.n	8008228 <USBH_HID_Process+0x164>
      {
        XferSize = USBH_LL_GetLastXferSize(phost, HID_Handle->InPipe);
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	785b      	ldrb	r3, [r3, #1]
 80081e2:	4619      	mov	r1, r3
 80081e4:	6878      	ldr	r0, [r7, #4]
 80081e6:	f005 fafb 	bl	800d7e0 <USBH_LL_GetLastXferSize>
 80081ea:	60f8      	str	r0, [r7, #12]

        if ((HID_Handle->DataReady == 0U) && (XferSize != 0U) && (HID_Handle->fifo.buf != NULL))
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d132      	bne.n	800825c <USBH_HID_Process+0x198>
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d02f      	beq.n	800825c <USBH_HID_Process+0x198>
 80081fc:	693b      	ldr	r3, [r7, #16]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	2b00      	cmp	r3, #0
 8008202:	d02b      	beq.n	800825c <USBH_HID_Process+0x198>
        {
          (void)USBH_HID_FifoWrite(&HID_Handle->fifo, HID_Handle->pData, HID_Handle->length);
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f103 0008 	add.w	r0, r3, #8
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	6959      	ldr	r1, [r3, #20]
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	8b1b      	ldrh	r3, [r3, #24]
 8008212:	461a      	mov	r2, r3
 8008214:	f000 f959 	bl	80084ca <USBH_HID_FifoWrite>
          HID_Handle->DataReady = 1U;
 8008218:	693b      	ldr	r3, [r7, #16]
 800821a:	2201      	movs	r2, #1
 800821c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
          USBH_HID_EventCallback(phost);
 8008220:	6878      	ldr	r0, [r7, #4]
 8008222:	f000 f9a6 	bl	8008572 <USBH_HID_EventCallback>
            /* Change state to issue next IN token */
            HID_Handle->state = USBH_HID_GET_DATA;
          }
        }
      }
      break;
 8008226:	e019      	b.n	800825c <USBH_HID_Process+0x198>
        if (USBH_LL_GetURBState(phost, HID_Handle->InPipe) == USBH_URB_STALL)
 8008228:	693b      	ldr	r3, [r7, #16]
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f005 fb68 	bl	800d904 <USBH_LL_GetURBState>
 8008234:	4603      	mov	r3, r0
 8008236:	2b05      	cmp	r3, #5
 8008238:	d110      	bne.n	800825c <USBH_HID_Process+0x198>
          if (USBH_ClrFeature(phost, HID_Handle->ep_addr) == USBH_OK)
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	7e9b      	ldrb	r3, [r3, #26]
 800823e:	4619      	mov	r1, r3
 8008240:	6878      	ldr	r0, [r7, #4]
 8008242:	f004 f978 	bl	800c536 <USBH_ClrFeature>
 8008246:	4603      	mov	r3, r0
 8008248:	2b00      	cmp	r3, #0
 800824a:	d107      	bne.n	800825c <USBH_HID_Process+0x198>
            HID_Handle->state = USBH_HID_GET_DATA;
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	2204      	movs	r2, #4
 8008250:	709a      	strb	r2, [r3, #2]
      break;
 8008252:	e003      	b.n	800825c <USBH_HID_Process+0x198>

    default:
      break;
 8008254:	bf00      	nop
 8008256:	e002      	b.n	800825e <USBH_HID_Process+0x19a>
      break;
 8008258:	bf00      	nop
 800825a:	e000      	b.n	800825e <USBH_HID_Process+0x19a>
      break;
 800825c:	bf00      	nop
  }

  return status;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3718      	adds	r7, #24
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBH_HID_SOFProcess>:
  *         The function is for managing the SOF Process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HID_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008276:	69db      	ldr	r3, [r3, #28]
 8008278:	60fb      	str	r3, [r7, #12]

  if (HID_Handle->state == USBH_HID_POLL)
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	789b      	ldrb	r3, [r3, #2]
 800827e:	2b06      	cmp	r3, #6
 8008280:	d10c      	bne.n	800829c <USBH_HID_SOFProcess+0x34>
  {
    if ((phost->Timer - HID_Handle->timer) >= HID_Handle->poll)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	6a1b      	ldr	r3, [r3, #32]
 800828c:	1ad3      	subs	r3, r2, r3
 800828e:	68fa      	ldr	r2, [r7, #12]
 8008290:	8b92      	ldrh	r2, [r2, #28]
 8008292:	4293      	cmp	r3, r2
 8008294:	d302      	bcc.n	800829c <USBH_HID_SOFProcess+0x34>
    {
      HID_Handle->state = USBH_HID_GET_DATA;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2204      	movs	r2, #4
 800829a:	709a      	strb	r2, [r3, #2]
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
    }
  }
  return USBH_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082a8:	4770      	bx	lr

080082aa <USBH_HID_GetHIDReportDescriptor>:
  * @param  Length : HID Report Descriptor Length
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_GetHIDReportDescriptor(USBH_HandleTypeDef *phost,
                                                   uint16_t length)
{
 80082aa:	b580      	push	{r7, lr}
 80082ac:	b086      	sub	sp, #24
 80082ae:	af02      	add	r7, sp, #8
 80082b0:	6078      	str	r0, [r7, #4]
 80082b2:	460b      	mov	r3, r1
 80082b4:	807b      	strh	r3, [r7, #2]

  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80082b6:	887b      	ldrh	r3, [r7, #2]
 80082b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80082bc:	d901      	bls.n	80082c2 <USBH_HID_GetHIDReportDescriptor+0x18>
  {
    USBH_ErrLog("Control error: Get HID Report Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80082be:	2303      	movs	r3, #3
 80082c0:	e00e      	b.n	80082e0 <USBH_HID_GetHIDReportDescriptor+0x36>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_INTERFACE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_HID_REPORT,
                              phost->device.Data,
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80082c8:	887b      	ldrh	r3, [r7, #2]
 80082ca:	9300      	str	r3, [sp, #0]
 80082cc:	4613      	mov	r3, r2
 80082ce:	f44f 5208 	mov.w	r2, #8704	@ 0x2200
 80082d2:	2101      	movs	r1, #1
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f004 f867 	bl	800c3a8 <USBH_GetDescriptor>
 80082da:	4603      	mov	r3, r0
 80082dc:	73fb      	strb	r3, [r7, #15]
  HID report descriptor parsing is not required.
  In case, for supporting Non-Boot Protocol devices and output reports,
  user may parse the report descriptor*/


  return status;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_HID_SetIdle>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetIdle(USBH_HandleTypeDef *phost,
                                    uint8_t duration,
                                    uint8_t reportId)
{
 80082e8:	b580      	push	{r7, lr}
 80082ea:	b082      	sub	sp, #8
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
 80082f0:	460b      	mov	r3, r1
 80082f2:	70fb      	strb	r3, [r7, #3]
 80082f4:	4613      	mov	r3, r2
 80082f6:	70bb      	strb	r3, [r7, #2]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE | \
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2221      	movs	r2, #33	@ 0x21
 80082fc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_SET_IDLE;
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	220a      	movs	r2, #10
 8008302:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)duration << 8U) | (uint32_t)reportId);
 8008304:	78fb      	ldrb	r3, [r7, #3]
 8008306:	b29b      	uxth	r3, r3
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	b29a      	uxth	r2, r3
 800830c:	78bb      	ldrb	r3, [r7, #2]
 800830e:	b29b      	uxth	r3, r3
 8008310:	4313      	orrs	r3, r2
 8008312:	b29a      	uxth	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	2200      	movs	r2, #0
 800831c:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008324:	2200      	movs	r2, #0
 8008326:	2100      	movs	r1, #0
 8008328:	6878      	ldr	r0, [r7, #4]
 800832a:	f004 fc3a 	bl	800cba2 <USBH_CtlReq>
 800832e:	4603      	mov	r3, r0
}
 8008330:	4618      	mov	r0, r3
 8008332:	3708      	adds	r7, #8
 8008334:	46bd      	mov	sp, r7
 8008336:	bd80      	pop	{r7, pc}

08008338 <USBH_HID_GetReport>:
USBH_StatusTypeDef USBH_HID_GetReport(USBH_HandleTypeDef *phost,
                                      uint8_t reportType,
                                      uint8_t reportId,
                                      uint8_t *reportBuff,
                                      uint8_t reportLen)
{
 8008338:	b580      	push	{r7, lr}
 800833a:	b084      	sub	sp, #16
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	607b      	str	r3, [r7, #4]
 8008342:	460b      	mov	r3, r1
 8008344:	72fb      	strb	r3, [r7, #11]
 8008346:	4613      	mov	r3, r2
 8008348:	72bb      	strb	r3, [r7, #10]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_RECIPIENT_INTERFACE | \
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	22a1      	movs	r2, #161	@ 0xa1
 800834e:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_TYPE_CLASS;


  phost->Control.setup.b.bRequest = USB_HID_GET_REPORT;
 8008350:	68fb      	ldr	r3, [r7, #12]
 8008352:	2201      	movs	r2, #1
 8008354:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = (uint16_t)(((uint32_t)reportType << 8U) | (uint32_t)reportId);
 8008356:	7afb      	ldrb	r3, [r7, #11]
 8008358:	b29b      	uxth	r3, r3
 800835a:	021b      	lsls	r3, r3, #8
 800835c:	b29a      	uxth	r2, r3
 800835e:	7abb      	ldrb	r3, [r7, #10]
 8008360:	b29b      	uxth	r3, r3
 8008362:	4313      	orrs	r3, r2
 8008364:	b29a      	uxth	r2, r3
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2200      	movs	r2, #0
 800836e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = reportLen;
 8008370:	7e3b      	ldrb	r3, [r7, #24]
 8008372:	b29a      	uxth	r2, r3
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, reportBuff, (uint16_t)reportLen);
 8008378:	7e3b      	ldrb	r3, [r7, #24]
 800837a:	b29b      	uxth	r3, r3
 800837c:	461a      	mov	r2, r3
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	68f8      	ldr	r0, [r7, #12]
 8008382:	f004 fc0e 	bl	800cba2 <USBH_CtlReq>
 8008386:	4603      	mov	r3, r0
}
 8008388:	4618      	mov	r0, r3
 800838a:	3710      	adds	r7, #16
 800838c:	46bd      	mov	sp, r7
 800838e:	bd80      	pop	{r7, pc}

08008390 <USBH_HID_SetProtocol>:
  * @param  protocol : Set Protocol for HID : boot/report protocol
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_SetProtocol(USBH_HandleTypeDef *phost,
                                        uint8_t protocol)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
 8008398:	460b      	mov	r3, r1
 800839a:	70fb      	strb	r3, [r7, #3]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	2221      	movs	r2, #33	@ 0x21
 80083a0:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_TYPE_CLASS;

  phost->Control.setup.b.bRequest = USB_HID_SET_PROTOCOL;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	220b      	movs	r2, #11
 80083a6:	745a      	strb	r2, [r3, #17]
  if (protocol != 0U)
 80083a8:	78fb      	ldrb	r3, [r7, #3]
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d003      	beq.n	80083b6 <USBH_HID_SetProtocol+0x26>
  {
    phost->Control.setup.b.wValue.w = 0U;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	825a      	strh	r2, [r3, #18]
 80083b4:	e002      	b.n	80083bc <USBH_HID_SetProtocol+0x2c>
  }
  else
  {
    phost->Control.setup.b.wValue.w = 1U;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2201      	movs	r2, #1
 80083ba:	825a      	strh	r2, [r3, #18]
  }

  phost->Control.setup.b.wIndex.w = 0U;
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2200      	movs	r2, #0
 80083c0:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	2200      	movs	r2, #0
 80083c6:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 80083c8:	2200      	movs	r2, #0
 80083ca:	2100      	movs	r1, #0
 80083cc:	6878      	ldr	r0, [r7, #4]
 80083ce:	f004 fbe8 	bl	800cba2 <USBH_CtlReq>
 80083d2:	4603      	mov	r3, r0

}
 80083d4:	4618      	mov	r0, r3
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}

080083dc <USBH_HID_ParseHIDDesc>:
  * @param  desc: HID Descriptor
  * @param  buf: Buffer where the source descriptor is available
  * @retval None
  */
static void USBH_HID_ParseHIDDesc(HID_DescTypeDef *desc, uint8_t *buf)
{
 80083dc:	b580      	push	{r7, lr}
 80083de:	b084      	sub	sp, #16
 80083e0:	af00      	add	r7, sp, #0
 80083e2:	6078      	str	r0, [r7, #4]
 80083e4:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pdesc = (USBH_DescHeader_t *)buf;
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	60fb      	str	r3, [r7, #12]
  uint16_t CfgDescLen;
  uint16_t ptr;

  CfgDescLen = LE16(buf + 2U);
 80083ea:	683b      	ldr	r3, [r7, #0]
 80083ec:	3302      	adds	r3, #2
 80083ee:	781b      	ldrb	r3, [r3, #0]
 80083f0:	461a      	mov	r2, r3
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	3303      	adds	r3, #3
 80083f6:	781b      	ldrb	r3, [r3, #0]
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	4313      	orrs	r3, r2
 80083fe:	817b      	strh	r3, [r7, #10]

  if (CfgDescLen > USB_CONFIGURATION_DESC_SIZE)
 8008400:	897b      	ldrh	r3, [r7, #10]
 8008402:	2b09      	cmp	r3, #9
 8008404:	d941      	bls.n	800848a <USBH_HID_ParseHIDDesc+0xae>
  {
    ptr = USB_LEN_CFG_DESC;
 8008406:	2309      	movs	r3, #9
 8008408:	813b      	strh	r3, [r7, #8]

    while (ptr < CfgDescLen)
 800840a:	e03a      	b.n	8008482 <USBH_HID_ParseHIDDesc+0xa6>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)pdesc, &ptr);
 800840c:	f107 0308 	add.w	r3, r7, #8
 8008410:	4619      	mov	r1, r3
 8008412:	68f8      	ldr	r0, [r7, #12]
 8008414:	f004 fbab 	bl	800cb6e <USBH_GetNextDesc>
 8008418:	60f8      	str	r0, [r7, #12]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_HID)
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	785b      	ldrb	r3, [r3, #1]
 800841e:	2b21      	cmp	r3, #33	@ 0x21
 8008420:	d12f      	bne.n	8008482 <USBH_HID_ParseHIDDesc+0xa6>
      {
        desc->bLength = *(uint8_t *)((uint8_t *)pdesc + 0U);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	781a      	ldrb	r2, [r3, #0]
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	701a      	strb	r2, [r3, #0]
        desc->bDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 1U);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	785a      	ldrb	r2, [r3, #1]
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	705a      	strb	r2, [r3, #1]
        desc->bcdHID = LE16((uint8_t *)pdesc + 2U);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	3302      	adds	r3, #2
 8008436:	781b      	ldrb	r3, [r3, #0]
 8008438:	461a      	mov	r2, r3
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	3303      	adds	r3, #3
 800843e:	781b      	ldrb	r3, [r3, #0]
 8008440:	021b      	lsls	r3, r3, #8
 8008442:	b29b      	uxth	r3, r3
 8008444:	4313      	orrs	r3, r2
 8008446:	b29a      	uxth	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	805a      	strh	r2, [r3, #2]
        desc->bCountryCode = *(uint8_t *)((uint8_t *)pdesc + 4U);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	791a      	ldrb	r2, [r3, #4]
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	711a      	strb	r2, [r3, #4]
        desc->bNumDescriptors = *(uint8_t *)((uint8_t *)pdesc + 5U);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	795a      	ldrb	r2, [r3, #5]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	715a      	strb	r2, [r3, #5]
        desc->bReportDescriptorType = *(uint8_t *)((uint8_t *)pdesc + 6U);
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	799a      	ldrb	r2, [r3, #6]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	719a      	strb	r2, [r3, #6]
        desc->wItemLength = LE16((uint8_t *)pdesc + 7U);
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	3307      	adds	r3, #7
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	461a      	mov	r2, r3
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	3308      	adds	r3, #8
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	021b      	lsls	r3, r3, #8
 8008474:	b29b      	uxth	r3, r3
 8008476:	4313      	orrs	r3, r2
 8008478:	b29a      	uxth	r2, r3
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	811a      	strh	r2, [r3, #8]
        break;
 800847e:	bf00      	nop
      }
    }
  }
}
 8008480:	e003      	b.n	800848a <USBH_HID_ParseHIDDesc+0xae>
    while (ptr < CfgDescLen)
 8008482:	893b      	ldrh	r3, [r7, #8]
 8008484:	897a      	ldrh	r2, [r7, #10]
 8008486:	429a      	cmp	r2, r3
 8008488:	d8c0      	bhi.n	800840c <USBH_HID_ParseHIDDesc+0x30>
}
 800848a:	bf00      	nop
 800848c:	3710      	adds	r7, #16
 800848e:	46bd      	mov	sp, r7
 8008490:	bd80      	pop	{r7, pc}

08008492 <USBH_HID_FifoInit>:
  * @param  buf: Fifo buffer
  * @param  size: Fifo Size
  * @retval none
  */
void USBH_HID_FifoInit(FIFO_TypeDef *f, uint8_t *buf, uint16_t size)
{
 8008492:	b480      	push	{r7}
 8008494:	b085      	sub	sp, #20
 8008496:	af00      	add	r7, sp, #0
 8008498:	60f8      	str	r0, [r7, #12]
 800849a:	60b9      	str	r1, [r7, #8]
 800849c:	4613      	mov	r3, r2
 800849e:	80fb      	strh	r3, [r7, #6]
  f->head = 0U;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	2200      	movs	r2, #0
 80084a4:	809a      	strh	r2, [r3, #4]
  f->tail = 0U;
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	2200      	movs	r2, #0
 80084aa:	80da      	strh	r2, [r3, #6]
  f->lock = 0U;
 80084ac:	68fb      	ldr	r3, [r7, #12]
 80084ae:	2200      	movs	r2, #0
 80084b0:	729a      	strb	r2, [r3, #10]
  f->size = size;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	88fa      	ldrh	r2, [r7, #6]
 80084b6:	811a      	strh	r2, [r3, #8]
  f->buf = buf;
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	68ba      	ldr	r2, [r7, #8]
 80084bc:	601a      	str	r2, [r3, #0]
}
 80084be:	bf00      	nop
 80084c0:	3714      	adds	r7, #20
 80084c2:	46bd      	mov	sp, r7
 80084c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c8:	4770      	bx	lr

080084ca <USBH_HID_FifoWrite>:
  * @param  buf: read buffer
  * @param  nbytes: number of item to write
  * @retval number of written items
  */
uint16_t USBH_HID_FifoWrite(FIFO_TypeDef *f, void *buf, uint16_t  nbytes)
{
 80084ca:	b480      	push	{r7}
 80084cc:	b087      	sub	sp, #28
 80084ce:	af00      	add	r7, sp, #0
 80084d0:	60f8      	str	r0, [r7, #12]
 80084d2:	60b9      	str	r1, [r7, #8]
 80084d4:	4613      	mov	r3, r2
 80084d6:	80fb      	strh	r3, [r7, #6]
  uint16_t i;
  uint8_t *p;

  p = (uint8_t *) buf;
 80084d8:	68bb      	ldr	r3, [r7, #8]
 80084da:	613b      	str	r3, [r7, #16]

  if (f->lock == 0U)
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	7a9b      	ldrb	r3, [r3, #10]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d13c      	bne.n	800855e <USBH_HID_FifoWrite+0x94>
  {
    f->lock = 1U;
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	2201      	movs	r2, #1
 80084e8:	729a      	strb	r2, [r3, #10]

    for (i = 0U; i < nbytes; i++)
 80084ea:	2300      	movs	r3, #0
 80084ec:	82fb      	strh	r3, [r7, #22]
 80084ee:	e032      	b.n	8008556 <USBH_HID_FifoWrite+0x8c>
    {
      if (((f->head + 1U) == f->tail) ||
 80084f0:	68fb      	ldr	r3, [r7, #12]
 80084f2:	889b      	ldrh	r3, [r3, #4]
 80084f4:	3301      	adds	r3, #1
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	88d2      	ldrh	r2, [r2, #6]
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00a      	beq.n	8008514 <USBH_HID_FifoWrite+0x4a>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	889b      	ldrh	r3, [r3, #4]
 8008502:	3301      	adds	r3, #1
 8008504:	68fa      	ldr	r2, [r7, #12]
 8008506:	8912      	ldrh	r2, [r2, #8]
      if (((f->head + 1U) == f->tail) ||
 8008508:	4293      	cmp	r3, r2
 800850a:	d108      	bne.n	800851e <USBH_HID_FifoWrite+0x54>
          (((f->head + 1U) == f->size) && (f->tail == 0U)))
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	88db      	ldrh	r3, [r3, #6]
 8008510:	2b00      	cmp	r3, #0
 8008512:	d104      	bne.n	800851e <USBH_HID_FifoWrite+0x54>
      {
        f->lock = 0U;
 8008514:	68fb      	ldr	r3, [r7, #12]
 8008516:	2200      	movs	r2, #0
 8008518:	729a      	strb	r2, [r3, #10]
        return i;
 800851a:	8afb      	ldrh	r3, [r7, #22]
 800851c:	e023      	b.n	8008566 <USBH_HID_FifoWrite+0x9c>
      }
      else
      {
        f->buf[f->head] = *p++;
 800851e:	693b      	ldr	r3, [r7, #16]
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	613a      	str	r2, [r7, #16]
 8008524:	68fa      	ldr	r2, [r7, #12]
 8008526:	6812      	ldr	r2, [r2, #0]
 8008528:	68f9      	ldr	r1, [r7, #12]
 800852a:	8889      	ldrh	r1, [r1, #4]
 800852c:	440a      	add	r2, r1
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	7013      	strb	r3, [r2, #0]
        f->head++;
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	889b      	ldrh	r3, [r3, #4]
 8008536:	3301      	adds	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	809a      	strh	r2, [r3, #4]

        if (f->head == f->size)
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	889a      	ldrh	r2, [r3, #4]
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	891b      	ldrh	r3, [r3, #8]
 8008546:	429a      	cmp	r2, r3
 8008548:	d102      	bne.n	8008550 <USBH_HID_FifoWrite+0x86>
        {
          f->head = 0U;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2200      	movs	r2, #0
 800854e:	809a      	strh	r2, [r3, #4]
    for (i = 0U; i < nbytes; i++)
 8008550:	8afb      	ldrh	r3, [r7, #22]
 8008552:	3301      	adds	r3, #1
 8008554:	82fb      	strh	r3, [r7, #22]
 8008556:	8afa      	ldrh	r2, [r7, #22]
 8008558:	88fb      	ldrh	r3, [r7, #6]
 800855a:	429a      	cmp	r2, r3
 800855c:	d3c8      	bcc.n	80084f0 <USBH_HID_FifoWrite+0x26>
        }
      }
    }
  }

  f->lock = 0U;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	2200      	movs	r2, #0
 8008562:	729a      	strb	r2, [r3, #10]

  return nbytes;
 8008564:	88fb      	ldrh	r3, [r7, #6]
}
 8008566:	4618      	mov	r0, r3
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr

08008572 <USBH_HID_EventCallback>:
  * @brief  The function is a callback about HID Data events
  *  @param  phost: Selected device
  * @retval None
  */
__weak void USBH_HID_EventCallback(USBH_HandleTypeDef *phost)
{
 8008572:	b480      	push	{r7}
 8008574:	b083      	sub	sp, #12
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800857a:	bf00      	nop
 800857c:	370c      	adds	r7, #12
 800857e:	46bd      	mov	sp, r7
 8008580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008584:	4770      	bx	lr
	...

08008588 <USBH_HID_KeybdInit>:
  *         The function init the HID keyboard.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_KeybdInit(USBH_HandleTypeDef *phost)
{
 8008588:	b580      	push	{r7, lr}
 800858a:	b084      	sub	sp, #16
 800858c:	af00      	add	r7, sp, #0
 800858e:	6078      	str	r0, [r7, #4]
  uint32_t x;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008596:	69db      	ldr	r3, [r3, #28]
 8008598:	60bb      	str	r3, [r7, #8]

  keybd_info.lctrl = 0U;
 800859a:	4b22      	ldr	r3, [pc, #136]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 800859c:	2200      	movs	r2, #0
 800859e:	705a      	strb	r2, [r3, #1]
  keybd_info.lshift = 0U;
 80085a0:	4b20      	ldr	r3, [pc, #128]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	709a      	strb	r2, [r3, #2]
  keybd_info.lalt = 0U;
 80085a6:	4b1f      	ldr	r3, [pc, #124]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	70da      	strb	r2, [r3, #3]
  keybd_info.lgui = 0U;
 80085ac:	4b1d      	ldr	r3, [pc, #116]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	711a      	strb	r2, [r3, #4]
  keybd_info.rctrl = 0U;
 80085b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	715a      	strb	r2, [r3, #5]
  keybd_info.rshift = 0U;
 80085b8:	4b1a      	ldr	r3, [pc, #104]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085ba:	2200      	movs	r2, #0
 80085bc:	719a      	strb	r2, [r3, #6]
  keybd_info.ralt = 0U;
 80085be:	4b19      	ldr	r3, [pc, #100]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085c0:	2200      	movs	r2, #0
 80085c2:	71da      	strb	r2, [r3, #7]
  keybd_info.rgui = 0U;
 80085c4:	4b17      	ldr	r3, [pc, #92]	@ (8008624 <USBH_HID_KeybdInit+0x9c>)
 80085c6:	2200      	movs	r2, #0
 80085c8:	721a      	strb	r2, [r3, #8]

  for (x = 0U; x < sizeof(keybd_report_data); x++)
 80085ca:	2300      	movs	r3, #0
 80085cc:	60fb      	str	r3, [r7, #12]
 80085ce:	e00c      	b.n	80085ea <USBH_HID_KeybdInit+0x62>
  {
    keybd_report_data[x] = 0U;
 80085d0:	4a15      	ldr	r2, [pc, #84]	@ (8008628 <USBH_HID_KeybdInit+0xa0>)
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	4413      	add	r3, r2
 80085d6:	2200      	movs	r2, #0
 80085d8:	701a      	strb	r2, [r3, #0]
    keybd_rx_report_buf[x] = 0U;
 80085da:	4a14      	ldr	r2, [pc, #80]	@ (800862c <USBH_HID_KeybdInit+0xa4>)
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	4413      	add	r3, r2
 80085e0:	2200      	movs	r2, #0
 80085e2:	701a      	strb	r2, [r3, #0]
  for (x = 0U; x < sizeof(keybd_report_data); x++)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	3301      	adds	r3, #1
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	2b07      	cmp	r3, #7
 80085ee:	d9ef      	bls.n	80085d0 <USBH_HID_KeybdInit+0x48>
  }

  if (HID_Handle->length > (sizeof(keybd_report_data)))
 80085f0:	68bb      	ldr	r3, [r7, #8]
 80085f2:	8b1b      	ldrh	r3, [r3, #24]
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d902      	bls.n	80085fe <USBH_HID_KeybdInit+0x76>
  {
    HID_Handle->length = (uint16_t)(sizeof(keybd_report_data));
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	2208      	movs	r2, #8
 80085fc:	831a      	strh	r2, [r3, #24]
  }

  HID_Handle->pData = keybd_rx_report_buf;
 80085fe:	68bb      	ldr	r3, [r7, #8]
 8008600:	4a0a      	ldr	r2, [pc, #40]	@ (800862c <USBH_HID_KeybdInit+0xa4>)
 8008602:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(keybd_report_data)));
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f103 0008 	add.w	r0, r3, #8
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008610:	2250      	movs	r2, #80	@ 0x50
 8008612:	4619      	mov	r1, r3
 8008614:	f7ff ff3d 	bl	8008492 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 8008618:	2300      	movs	r3, #0
}
 800861a:	4618      	mov	r0, r3
 800861c:	3710      	adds	r7, #16
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000210 	.word	0x20000210
 8008628:	20000228 	.word	0x20000228
 800862c:	20000220 	.word	0x20000220

08008630 <USBH_HID_MouseInit>:
  *         The function init the HID mouse.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_HID_MouseInit(USBH_HandleTypeDef *phost)
{
 8008630:	b580      	push	{r7, lr}
 8008632:	b084      	sub	sp, #16
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
  uint32_t i;
  HID_HandleTypeDef *HID_Handle = (HID_HandleTypeDef *) phost->pActiveClass->pData;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800863e:	69db      	ldr	r3, [r3, #28]
 8008640:	60bb      	str	r3, [r7, #8]

  mouse_info.x = 0U;
 8008642:	4b1d      	ldr	r3, [pc, #116]	@ (80086b8 <USBH_HID_MouseInit+0x88>)
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
  mouse_info.y = 0U;
 8008648:	4b1b      	ldr	r3, [pc, #108]	@ (80086b8 <USBH_HID_MouseInit+0x88>)
 800864a:	2200      	movs	r2, #0
 800864c:	705a      	strb	r2, [r3, #1]
  mouse_info.buttons[0] = 0U;
 800864e:	4b1a      	ldr	r3, [pc, #104]	@ (80086b8 <USBH_HID_MouseInit+0x88>)
 8008650:	2200      	movs	r2, #0
 8008652:	709a      	strb	r2, [r3, #2]
  mouse_info.buttons[1] = 0U;
 8008654:	4b18      	ldr	r3, [pc, #96]	@ (80086b8 <USBH_HID_MouseInit+0x88>)
 8008656:	2200      	movs	r2, #0
 8008658:	70da      	strb	r2, [r3, #3]
  mouse_info.buttons[2] = 0U;
 800865a:	4b17      	ldr	r3, [pc, #92]	@ (80086b8 <USBH_HID_MouseInit+0x88>)
 800865c:	2200      	movs	r2, #0
 800865e:	711a      	strb	r2, [r3, #4]

  for (i = 0U; i < sizeof(mouse_report_data); i++)
 8008660:	2300      	movs	r3, #0
 8008662:	60fb      	str	r3, [r7, #12]
 8008664:	e00c      	b.n	8008680 <USBH_HID_MouseInit+0x50>
  {
    mouse_report_data[i] = 0U;
 8008666:	4a15      	ldr	r2, [pc, #84]	@ (80086bc <USBH_HID_MouseInit+0x8c>)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	4413      	add	r3, r2
 800866c:	2200      	movs	r2, #0
 800866e:	701a      	strb	r2, [r3, #0]
    mouse_rx_report_buf[i] = 0U;
 8008670:	4a13      	ldr	r2, [pc, #76]	@ (80086c0 <USBH_HID_MouseInit+0x90>)
 8008672:	68fb      	ldr	r3, [r7, #12]
 8008674:	4413      	add	r3, r2
 8008676:	2200      	movs	r2, #0
 8008678:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < sizeof(mouse_report_data); i++)
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	3301      	adds	r3, #1
 800867e:	60fb      	str	r3, [r7, #12]
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	2b07      	cmp	r3, #7
 8008684:	d9ef      	bls.n	8008666 <USBH_HID_MouseInit+0x36>
  }

  if (HID_Handle->length > sizeof(mouse_report_data))
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	8b1b      	ldrh	r3, [r3, #24]
 800868a:	2b08      	cmp	r3, #8
 800868c:	d902      	bls.n	8008694 <USBH_HID_MouseInit+0x64>
  {
    HID_Handle->length = (uint16_t)sizeof(mouse_report_data);
 800868e:	68bb      	ldr	r3, [r7, #8]
 8008690:	2208      	movs	r2, #8
 8008692:	831a      	strh	r2, [r3, #24]
  }
  HID_Handle->pData = mouse_rx_report_buf;
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	4a0a      	ldr	r2, [pc, #40]	@ (80086c0 <USBH_HID_MouseInit+0x90>)
 8008698:	615a      	str	r2, [r3, #20]
  {
    return USBH_FAIL;
  }
  else
  {
    USBH_HID_FifoInit(&HID_Handle->fifo, phost->device.Data, (uint16_t)(HID_QUEUE_SIZE * sizeof(mouse_report_data)));
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	f103 0008 	add.w	r0, r3, #8
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086a6:	2250      	movs	r2, #80	@ 0x50
 80086a8:	4619      	mov	r1, r3
 80086aa:	f7ff fef2 	bl	8008492 <USBH_HID_FifoInit>
  }

  return USBH_OK;
 80086ae:	2300      	movs	r3, #0
}
 80086b0:	4618      	mov	r0, r3
 80086b2:	3710      	adds	r7, #16
 80086b4:	46bd      	mov	sp, r7
 80086b6:	bd80      	pop	{r7, pc}
 80086b8:	20000230 	.word	0x20000230
 80086bc:	20000238 	.word	0x20000238
 80086c0:	20000240 	.word	0x20000240

080086c4 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80086c4:	b590      	push	{r4, r7, lr}
 80086c6:	b089      	sub	sp, #36	@ 0x24
 80086c8:	af04      	add	r7, sp, #16
 80086ca:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80086d2:	7919      	ldrb	r1, [r3, #4]
 80086d4:	2350      	movs	r3, #80	@ 0x50
 80086d6:	2206      	movs	r2, #6
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f003 f8f7 	bl	800b8cc <USBH_FindInterface>
 80086de:	4603      	mov	r3, r0
 80086e0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 80086e2:	7bfb      	ldrb	r3, [r7, #15]
 80086e4:	2bff      	cmp	r3, #255	@ 0xff
 80086e6:	d002      	beq.n	80086ee <USBH_MSC_InterfaceInit+0x2a>
 80086e8:	7bfb      	ldrb	r3, [r7, #15]
 80086ea:	2b09      	cmp	r3, #9
 80086ec:	d901      	bls.n	80086f2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80086ee:	2302      	movs	r3, #2
 80086f0:	e106      	b.n	8008900 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 80086f2:	7bfb      	ldrb	r3, [r7, #15]
 80086f4:	4619      	mov	r1, r3
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	f003 f8cc 	bl	800b894 <USBH_SelectInterface>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008700:	7bbb      	ldrb	r3, [r7, #14]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d001      	beq.n	800870a <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8008706:	2302      	movs	r3, #2
 8008708:	e0fa      	b.n	8008900 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 8008710:	f44f 7082 	mov.w	r0, #260	@ 0x104
 8008714:	f005 f9da 	bl	800dacc <malloc>
 8008718:	4603      	mov	r3, r0
 800871a:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008722:	69db      	ldr	r3, [r3, #28]
 8008724:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	2b00      	cmp	r3, #0
 800872a:	d101      	bne.n	8008730 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 800872c:	2302      	movs	r3, #2
 800872e:	e0e7      	b.n	8008900 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8008730:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8008734:	2100      	movs	r1, #0
 8008736:	68b8      	ldr	r0, [r7, #8]
 8008738:	f005 fcc6 	bl	800e0c8 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800873c:	7bfb      	ldrb	r3, [r7, #15]
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	2132      	movs	r1, #50	@ 0x32
 8008742:	fb01 f303 	mul.w	r3, r1, r3
 8008746:	4413      	add	r3, r2
 8008748:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800874c:	781b      	ldrb	r3, [r3, #0]
 800874e:	b25b      	sxtb	r3, r3
 8008750:	2b00      	cmp	r3, #0
 8008752:	da16      	bge.n	8008782 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008754:	7bfb      	ldrb	r3, [r7, #15]
 8008756:	687a      	ldr	r2, [r7, #4]
 8008758:	2132      	movs	r1, #50	@ 0x32
 800875a:	fb01 f303 	mul.w	r3, r1, r3
 800875e:	4413      	add	r3, r2
 8008760:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008764:	781a      	ldrb	r2, [r3, #0]
 8008766:	68bb      	ldr	r3, [r7, #8]
 8008768:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800876a:	7bfb      	ldrb	r3, [r7, #15]
 800876c:	687a      	ldr	r2, [r7, #4]
 800876e:	2132      	movs	r1, #50	@ 0x32
 8008770:	fb01 f303 	mul.w	r3, r1, r3
 8008774:	4413      	add	r3, r2
 8008776:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800877a:	881a      	ldrh	r2, [r3, #0]
 800877c:	68bb      	ldr	r3, [r7, #8]
 800877e:	815a      	strh	r2, [r3, #10]
 8008780:	e015      	b.n	80087ae <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8008782:	7bfb      	ldrb	r3, [r7, #15]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	2132      	movs	r1, #50	@ 0x32
 8008788:	fb01 f303 	mul.w	r3, r1, r3
 800878c:	4413      	add	r3, r2
 800878e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008792:	781a      	ldrb	r2, [r3, #0]
 8008794:	68bb      	ldr	r3, [r7, #8]
 8008796:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008798:	7bfb      	ldrb	r3, [r7, #15]
 800879a:	687a      	ldr	r2, [r7, #4]
 800879c:	2132      	movs	r1, #50	@ 0x32
 800879e:	fb01 f303 	mul.w	r3, r1, r3
 80087a2:	4413      	add	r3, r2
 80087a4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 80087a8:	881a      	ldrh	r2, [r3, #0]
 80087aa:	68bb      	ldr	r3, [r7, #8]
 80087ac:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
 80087b0:	687a      	ldr	r2, [r7, #4]
 80087b2:	2132      	movs	r1, #50	@ 0x32
 80087b4:	fb01 f303 	mul.w	r3, r1, r3
 80087b8:	4413      	add	r3, r2
 80087ba:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80087be:	781b      	ldrb	r3, [r3, #0]
 80087c0:	b25b      	sxtb	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	da16      	bge.n	80087f4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80087c6:	7bfb      	ldrb	r3, [r7, #15]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	2132      	movs	r1, #50	@ 0x32
 80087cc:	fb01 f303 	mul.w	r3, r1, r3
 80087d0:	4413      	add	r3, r2
 80087d2:	f203 3356 	addw	r3, r3, #854	@ 0x356
 80087d6:	781a      	ldrb	r2, [r3, #0]
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
 80087de:	687a      	ldr	r2, [r7, #4]
 80087e0:	2132      	movs	r1, #50	@ 0x32
 80087e2:	fb01 f303 	mul.w	r3, r1, r3
 80087e6:	4413      	add	r3, r2
 80087e8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80087ec:	881a      	ldrh	r2, [r3, #0]
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	815a      	strh	r2, [r3, #10]
 80087f2:	e015      	b.n	8008820 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 80087f4:	7bfb      	ldrb	r3, [r7, #15]
 80087f6:	687a      	ldr	r2, [r7, #4]
 80087f8:	2132      	movs	r1, #50	@ 0x32
 80087fa:	fb01 f303 	mul.w	r3, r1, r3
 80087fe:	4413      	add	r3, r2
 8008800:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008804:	781a      	ldrb	r2, [r3, #0]
 8008806:	68bb      	ldr	r3, [r7, #8]
 8008808:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800880a:	7bfb      	ldrb	r3, [r7, #15]
 800880c:	687a      	ldr	r2, [r7, #4]
 800880e:	2132      	movs	r1, #50	@ 0x32
 8008810:	fb01 f303 	mul.w	r3, r1, r3
 8008814:	4413      	add	r3, r2
 8008816:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800881a:	881a      	ldrh	r2, [r3, #0]
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8008820:	68bb      	ldr	r3, [r7, #8]
 8008822:	2200      	movs	r2, #0
 8008824:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2200      	movs	r2, #0
 800882a:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	2200      	movs	r2, #0
 8008830:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8008832:	68bb      	ldr	r3, [r7, #8]
 8008834:	799b      	ldrb	r3, [r3, #6]
 8008836:	4619      	mov	r1, r3
 8008838:	6878      	ldr	r0, [r7, #4]
 800883a:	f004 fc6c 	bl	800d116 <USBH_AllocPipe>
 800883e:	4603      	mov	r3, r0
 8008840:	461a      	mov	r2, r3
 8008842:	68bb      	ldr	r3, [r7, #8]
 8008844:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8008846:	68bb      	ldr	r3, [r7, #8]
 8008848:	79db      	ldrb	r3, [r3, #7]
 800884a:	4619      	mov	r1, r3
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f004 fc62 	bl	800d116 <USBH_AllocPipe>
 8008852:	4603      	mov	r3, r0
 8008854:	461a      	mov	r2, r3
 8008856:	68bb      	ldr	r3, [r7, #8]
 8008858:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 800885a:	6878      	ldr	r0, [r7, #4]
 800885c:	f000 fc1e 	bl	800909c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8008860:	68bb      	ldr	r3, [r7, #8]
 8008862:	799b      	ldrb	r3, [r3, #6]
 8008864:	2b00      	cmp	r3, #0
 8008866:	d01e      	beq.n	80088a6 <USBH_MSC_InterfaceInit+0x1e2>
 8008868:	68bb      	ldr	r3, [r7, #8]
 800886a:	891b      	ldrh	r3, [r3, #8]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d01a      	beq.n	80088a6 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8008870:	68bb      	ldr	r3, [r7, #8]
 8008872:	7959      	ldrb	r1, [r3, #5]
 8008874:	68bb      	ldr	r3, [r7, #8]
 8008876:	7998      	ldrb	r0, [r3, #6]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	8912      	ldrh	r2, [r2, #8]
 8008888:	9202      	str	r2, [sp, #8]
 800888a:	2202      	movs	r2, #2
 800888c:	9201      	str	r2, [sp, #4]
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	4623      	mov	r3, r4
 8008892:	4602      	mov	r2, r0
 8008894:	6878      	ldr	r0, [r7, #4]
 8008896:	f004 fc0f 	bl	800d0b8 <USBH_OpenPipe>
 800889a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	79db      	ldrb	r3, [r3, #7]
 80088a0:	2b00      	cmp	r3, #0
 80088a2:	d02c      	beq.n	80088fe <USBH_MSC_InterfaceInit+0x23a>
 80088a4:	e001      	b.n	80088aa <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e02a      	b.n	8008900 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	895b      	ldrh	r3, [r3, #10]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d025      	beq.n	80088fe <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	7919      	ldrb	r1, [r3, #4]
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	79d8      	ldrb	r0, [r3, #7]
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80088c6:	68ba      	ldr	r2, [r7, #8]
 80088c8:	8952      	ldrh	r2, [r2, #10]
 80088ca:	9202      	str	r2, [sp, #8]
 80088cc:	2202      	movs	r2, #2
 80088ce:	9201      	str	r2, [sp, #4]
 80088d0:	9300      	str	r3, [sp, #0]
 80088d2:	4623      	mov	r3, r4
 80088d4:	4602      	mov	r2, r0
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f004 fbee 	bl	800d0b8 <USBH_OpenPipe>
 80088dc:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	791b      	ldrb	r3, [r3, #4]
 80088e2:	2200      	movs	r2, #0
 80088e4:	4619      	mov	r1, r3
 80088e6:	6878      	ldr	r0, [r7, #4]
 80088e8:	f005 f836 	bl	800d958 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	795b      	ldrb	r3, [r3, #5]
 80088f0:	2200      	movs	r2, #0
 80088f2:	4619      	mov	r1, r3
 80088f4:	6878      	ldr	r0, [r7, #4]
 80088f6:	f005 f82f 	bl	800d958 <USBH_LL_SetToggle>

  return USBH_OK;
 80088fa:	2300      	movs	r3, #0
 80088fc:	e000      	b.n	8008900 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 80088fe:	2303      	movs	r3, #3
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	bd90      	pop	{r4, r7, pc}

08008908 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b084      	sub	sp, #16
 800890c:	af00      	add	r7, sp, #0
 800890e:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	795b      	ldrb	r3, [r3, #5]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d00e      	beq.n	8008940 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	795b      	ldrb	r3, [r3, #5]
 8008926:	4619      	mov	r1, r3
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f004 fbe4 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	795b      	ldrb	r3, [r3, #5]
 8008932:	4619      	mov	r1, r3
 8008934:	6878      	ldr	r0, [r7, #4]
 8008936:	f004 fc10 	bl	800d15a <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	791b      	ldrb	r3, [r3, #4]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d00e      	beq.n	8008966 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	791b      	ldrb	r3, [r3, #4]
 800894c:	4619      	mov	r1, r3
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f004 fbd1 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	791b      	ldrb	r3, [r3, #4]
 8008958:	4619      	mov	r1, r3
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f004 fbfd 	bl	800d15a <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	2200      	movs	r2, #0
 8008964:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800896c:	69db      	ldr	r3, [r3, #28]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d00b      	beq.n	800898a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008978:	69db      	ldr	r3, [r3, #28]
 800897a:	4618      	mov	r0, r3
 800897c:	f005 f8ae 	bl	800dadc <free>
    phost->pActiveClass->pData = 0U;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008986:	2200      	movs	r2, #0
 8008988:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800898a:	2300      	movs	r3, #0
}
 800898c:	4618      	mov	r0, r3
 800898e:	3710      	adds	r7, #16
 8008990:	46bd      	mov	sp, r7
 8008992:	bd80      	pop	{r7, pc}

08008994 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8008994:	b580      	push	{r7, lr}
 8008996:	b084      	sub	sp, #16
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80089a2:	69db      	ldr	r3, [r3, #28]
 80089a4:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 80089a6:	2301      	movs	r3, #1
 80089a8:	73fb      	strb	r3, [r7, #15]
  uint8_t lun_idx;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 80089aa:	68bb      	ldr	r3, [r7, #8]
 80089ac:	7b9b      	ldrb	r3, [r3, #14]
 80089ae:	2b03      	cmp	r3, #3
 80089b0:	d041      	beq.n	8008a36 <USBH_MSC_ClassRequest+0xa2>
 80089b2:	2b03      	cmp	r3, #3
 80089b4:	dc4b      	bgt.n	8008a4e <USBH_MSC_ClassRequest+0xba>
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d001      	beq.n	80089be <USBH_MSC_ClassRequest+0x2a>
 80089ba:	2b02      	cmp	r3, #2
 80089bc:	d147      	bne.n	8008a4e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:

      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	4619      	mov	r1, r3
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fb4c 	bl	8009060 <USBH_MSC_BOT_REQ_GetMaxLUN>
 80089c8:	4603      	mov	r3, r0
 80089ca:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 80089cc:	7bfb      	ldrb	r3, [r7, #15]
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d104      	bne.n	80089dc <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	2200      	movs	r2, #0
 80089d6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 80089d8:	2300      	movs	r3, #0
 80089da:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 80089dc:	7bfb      	ldrb	r3, [r7, #15]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d137      	bne.n	8008a52 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 80089e2:	68bb      	ldr	r3, [r7, #8]
 80089e4:	781b      	ldrb	r3, [r3, #0]
 80089e6:	2b02      	cmp	r3, #2
 80089e8:	d804      	bhi.n	80089f4 <USBH_MSC_ClassRequest+0x60>
 80089ea:	68bb      	ldr	r3, [r7, #8]
 80089ec:	781b      	ldrb	r3, [r3, #0]
 80089ee:	3301      	adds	r3, #1
 80089f0:	b2da      	uxtb	r2, r3
 80089f2:	e000      	b.n	80089f6 <USBH_MSC_ClassRequest+0x62>
 80089f4:	2202      	movs	r2, #2
 80089f6:	68bb      	ldr	r3, [r7, #8]
 80089f8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 80089fa:	2300      	movs	r3, #0
 80089fc:	73bb      	strb	r3, [r7, #14]
 80089fe:	e014      	b.n	8008a2a <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[lun_idx].prev_ready_state = USBH_FAIL;
 8008a00:	7bbb      	ldrb	r3, [r7, #14]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	2134      	movs	r1, #52	@ 0x34
 8008a06:	fb01 f303 	mul.w	r3, r1, r3
 8008a0a:	4413      	add	r3, r2
 8008a0c:	3392      	adds	r3, #146	@ 0x92
 8008a0e:	2202      	movs	r2, #2
 8008a10:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[lun_idx].state_changed = 0U;
 8008a12:	7bbb      	ldrb	r3, [r7, #14]
 8008a14:	68ba      	ldr	r2, [r7, #8]
 8008a16:	2134      	movs	r1, #52	@ 0x34
 8008a18:	fb01 f303 	mul.w	r3, r1, r3
 8008a1c:	4413      	add	r3, r2
 8008a1e:	33c1      	adds	r3, #193	@ 0xc1
 8008a20:	2200      	movs	r2, #0
 8008a22:	701a      	strb	r2, [r3, #0]
        for (lun_idx = 0U; lun_idx < MSC_Handle->max_lun; lun_idx++)
 8008a24:	7bbb      	ldrb	r3, [r7, #14]
 8008a26:	3301      	adds	r3, #1
 8008a28:	73bb      	strb	r3, [r7, #14]
 8008a2a:	68bb      	ldr	r3, [r7, #8]
 8008a2c:	781b      	ldrb	r3, [r3, #0]
 8008a2e:	7bba      	ldrb	r2, [r7, #14]
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d3e5      	bcc.n	8008a00 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008a34:	e00d      	b.n	8008a52 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008a36:	2100      	movs	r1, #0
 8008a38:	6878      	ldr	r0, [r7, #4]
 8008a3a:	f003 fd7c 	bl	800c536 <USBH_ClrFeature>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d108      	bne.n	8008a56 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	7bda      	ldrb	r2, [r3, #15]
 8008a48:	68bb      	ldr	r3, [r7, #8]
 8008a4a:	739a      	strb	r2, [r3, #14]
      }
      break;
 8008a4c:	e003      	b.n	8008a56 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 8008a4e:	bf00      	nop
 8008a50:	e002      	b.n	8008a58 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008a52:	bf00      	nop
 8008a54:	e000      	b.n	8008a58 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008a56:	bf00      	nop
  }

  return status;
 8008a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3710      	adds	r7, #16
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}
	...

08008a64 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008a64:	b580      	push	{r7, lr}
 8008a66:	b086      	sub	sp, #24
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8008a72:	69db      	ldr	r3, [r3, #28]
 8008a74:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008a76:	2301      	movs	r3, #1
 8008a78:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8008a7e:	2301      	movs	r3, #1
 8008a80:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	7b1b      	ldrb	r3, [r3, #12]
 8008a86:	2b0a      	cmp	r3, #10
 8008a88:	f000 8280 	beq.w	8008f8c <USBH_MSC_Process+0x528>
 8008a8c:	2b0a      	cmp	r3, #10
 8008a8e:	f300 82b8 	bgt.w	8009002 <USBH_MSC_Process+0x59e>
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d003      	beq.n	8008a9e <USBH_MSC_Process+0x3a>
 8008a96:	2b01      	cmp	r3, #1
 8008a98:	f000 82b0 	beq.w	8008ffc <USBH_MSC_Process+0x598>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008a9c:	e2b1      	b.n	8009002 <USBH_MSC_Process+0x59e>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008a9e:	693b      	ldr	r3, [r7, #16]
 8008aa0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008aa4:	693a      	ldr	r2, [r7, #16]
 8008aa6:	7812      	ldrb	r2, [r2, #0]
 8008aa8:	4293      	cmp	r3, r2
 8008aaa:	f080 825d 	bcs.w	8008f68 <USBH_MSC_Process+0x504>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ab4:	4619      	mov	r1, r3
 8008ab6:	693a      	ldr	r2, [r7, #16]
 8008ab8:	2334      	movs	r3, #52	@ 0x34
 8008aba:	fb01 f303 	mul.w	r3, r1, r3
 8008abe:	4413      	add	r3, r2
 8008ac0:	3391      	adds	r3, #145	@ 0x91
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 8008ac6:	693b      	ldr	r3, [r7, #16]
 8008ac8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008acc:	4619      	mov	r1, r3
 8008ace:	693a      	ldr	r2, [r7, #16]
 8008ad0:	2334      	movs	r3, #52	@ 0x34
 8008ad2:	fb01 f303 	mul.w	r3, r1, r3
 8008ad6:	4413      	add	r3, r2
 8008ad8:	3390      	adds	r3, #144	@ 0x90
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	2b08      	cmp	r3, #8
 8008ade:	f200 824b 	bhi.w	8008f78 <USBH_MSC_Process+0x514>
 8008ae2:	a201      	add	r2, pc, #4	@ (adr r2, 8008ae8 <USBH_MSC_Process+0x84>)
 8008ae4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ae8:	08008b0d 	.word	0x08008b0d
 8008aec:	08008f79 	.word	0x08008f79
 8008af0:	08008bd7 	.word	0x08008bd7
 8008af4:	08008d5d 	.word	0x08008d5d
 8008af8:	08008b33 	.word	0x08008b33
 8008afc:	08008e29 	.word	0x08008e29
 8008b00:	08008f79 	.word	0x08008f79
 8008b04:	08008f79 	.word	0x08008f79
 8008b08:	08008f57 	.word	0x08008f57
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8008b0c:	693b      	ldr	r3, [r7, #16]
 8008b0e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008b12:	4619      	mov	r1, r3
 8008b14:	693a      	ldr	r2, [r7, #16]
 8008b16:	2334      	movs	r3, #52	@ 0x34
 8008b18:	fb01 f303 	mul.w	r3, r1, r3
 8008b1c:	4413      	add	r3, r2
 8008b1e:	3390      	adds	r3, #144	@ 0x90
 8008b20:	2204      	movs	r2, #4
 8008b22:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8008b2a:	693b      	ldr	r3, [r7, #16]
 8008b2c:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
            break;
 8008b30:	e22b      	b.n	8008f8a <USBH_MSC_Process+0x526>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 8008b32:	693b      	ldr	r3, [r7, #16]
 8008b34:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008b38:	b2d9      	uxtb	r1, r3
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008b40:	461a      	mov	r2, r3
 8008b42:	2334      	movs	r3, #52	@ 0x34
 8008b44:	fb02 f303 	mul.w	r3, r2, r3
 8008b48:	3398      	adds	r3, #152	@ 0x98
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	3307      	adds	r3, #7
 8008b50:	461a      	mov	r2, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f000 fdbf 	bl	80096d6 <USBH_MSC_SCSI_Inquiry>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008b5c:	7bfb      	ldrb	r3, [r7, #15]
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d10c      	bne.n	8008b7c <USBH_MSC_Process+0x118>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008b68:	4619      	mov	r1, r3
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	2334      	movs	r3, #52	@ 0x34
 8008b6e:	fb01 f303 	mul.w	r3, r1, r3
 8008b72:	4413      	add	r3, r2
 8008b74:	3390      	adds	r3, #144	@ 0x90
 8008b76:	2202      	movs	r2, #2
 8008b78:	701a      	strb	r2, [r3, #0]
            break;
 8008b7a:	e1ff      	b.n	8008f7c <USBH_MSC_Process+0x518>
            else if (scsi_status == USBH_FAIL)
 8008b7c:	7bfb      	ldrb	r3, [r7, #15]
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d10c      	bne.n	8008b9c <USBH_MSC_Process+0x138>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008b82:	693b      	ldr	r3, [r7, #16]
 8008b84:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008b88:	4619      	mov	r1, r3
 8008b8a:	693a      	ldr	r2, [r7, #16]
 8008b8c:	2334      	movs	r3, #52	@ 0x34
 8008b8e:	fb01 f303 	mul.w	r3, r1, r3
 8008b92:	4413      	add	r3, r2
 8008b94:	3390      	adds	r3, #144	@ 0x90
 8008b96:	2205      	movs	r2, #5
 8008b98:	701a      	strb	r2, [r3, #0]
            break;
 8008b9a:	e1ef      	b.n	8008f7c <USBH_MSC_Process+0x518>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008b9c:	7bfb      	ldrb	r3, [r7, #15]
 8008b9e:	2b04      	cmp	r3, #4
 8008ba0:	f040 81ec 	bne.w	8008f7c <USBH_MSC_Process+0x518>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008ba4:	693b      	ldr	r3, [r7, #16]
 8008ba6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008baa:	4619      	mov	r1, r3
 8008bac:	693a      	ldr	r2, [r7, #16]
 8008bae:	2334      	movs	r3, #52	@ 0x34
 8008bb0:	fb01 f303 	mul.w	r3, r1, r3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	3390      	adds	r3, #144	@ 0x90
 8008bb8:	2208      	movs	r2, #8
 8008bba:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008bbc:	693b      	ldr	r3, [r7, #16]
 8008bbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	693a      	ldr	r2, [r7, #16]
 8008bc6:	2334      	movs	r3, #52	@ 0x34
 8008bc8:	fb01 f303 	mul.w	r3, r1, r3
 8008bcc:	4413      	add	r3, r2
 8008bce:	3391      	adds	r3, #145	@ 0x91
 8008bd0:	2202      	movs	r2, #2
 8008bd2:	701a      	strb	r2, [r3, #0]
            break;
 8008bd4:	e1d2      	b.n	8008f7c <USBH_MSC_Process+0x518>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 8008bd6:	693b      	ldr	r3, [r7, #16]
 8008bd8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008bdc:	b2db      	uxtb	r3, r3
 8008bde:	4619      	mov	r1, r3
 8008be0:	6878      	ldr	r0, [r7, #4]
 8008be2:	f000 fcbb 	bl	800955c <USBH_MSC_SCSI_TestUnitReady>
 8008be6:	4603      	mov	r3, r0
 8008be8:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8008bea:	7bbb      	ldrb	r3, [r7, #14]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d14a      	bne.n	8008c86 <USBH_MSC_Process+0x222>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008bf6:	4619      	mov	r1, r3
 8008bf8:	693a      	ldr	r2, [r7, #16]
 8008bfa:	2334      	movs	r3, #52	@ 0x34
 8008bfc:	fb01 f303 	mul.w	r3, r1, r3
 8008c00:	4413      	add	r3, r2
 8008c02:	3392      	adds	r3, #146	@ 0x92
 8008c04:	781b      	ldrb	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d00c      	beq.n	8008c24 <USBH_MSC_Process+0x1c0>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008c0a:	693b      	ldr	r3, [r7, #16]
 8008c0c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c10:	4619      	mov	r1, r3
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	2334      	movs	r3, #52	@ 0x34
 8008c16:	fb01 f303 	mul.w	r3, r1, r3
 8008c1a:	4413      	add	r3, r2
 8008c1c:	33c1      	adds	r3, #193	@ 0xc1
 8008c1e:	2201      	movs	r2, #1
 8008c20:	701a      	strb	r2, [r3, #0]
 8008c22:	e00b      	b.n	8008c3c <USBH_MSC_Process+0x1d8>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008c24:	693b      	ldr	r3, [r7, #16]
 8008c26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	693a      	ldr	r2, [r7, #16]
 8008c2e:	2334      	movs	r3, #52	@ 0x34
 8008c30:	fb01 f303 	mul.w	r3, r1, r3
 8008c34:	4413      	add	r3, r2
 8008c36:	33c1      	adds	r3, #193	@ 0xc1
 8008c38:	2200      	movs	r2, #0
 8008c3a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c42:	4619      	mov	r1, r3
 8008c44:	693a      	ldr	r2, [r7, #16]
 8008c46:	2334      	movs	r3, #52	@ 0x34
 8008c48:	fb01 f303 	mul.w	r3, r1, r3
 8008c4c:	4413      	add	r3, r2
 8008c4e:	3390      	adds	r3, #144	@ 0x90
 8008c50:	2203      	movs	r2, #3
 8008c52:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008c54:	693b      	ldr	r3, [r7, #16]
 8008c56:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	693a      	ldr	r2, [r7, #16]
 8008c5e:	2334      	movs	r3, #52	@ 0x34
 8008c60:	fb01 f303 	mul.w	r3, r1, r3
 8008c64:	4413      	add	r3, r2
 8008c66:	3391      	adds	r3, #145	@ 0x91
 8008c68:	2200      	movs	r2, #0
 8008c6a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008c6c:	693b      	ldr	r3, [r7, #16]
 8008c6e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c72:	4619      	mov	r1, r3
 8008c74:	693a      	ldr	r2, [r7, #16]
 8008c76:	2334      	movs	r3, #52	@ 0x34
 8008c78:	fb01 f303 	mul.w	r3, r1, r3
 8008c7c:	4413      	add	r3, r2
 8008c7e:	3392      	adds	r3, #146	@ 0x92
 8008c80:	2200      	movs	r2, #0
 8008c82:	701a      	strb	r2, [r3, #0]
            break;
 8008c84:	e17c      	b.n	8008f80 <USBH_MSC_Process+0x51c>
            else if (ready_status == USBH_FAIL)
 8008c86:	7bbb      	ldrb	r3, [r7, #14]
 8008c88:	2b02      	cmp	r3, #2
 8008c8a:	d14a      	bne.n	8008d22 <USBH_MSC_Process+0x2be>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008c8c:	693b      	ldr	r3, [r7, #16]
 8008c8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008c92:	4619      	mov	r1, r3
 8008c94:	693a      	ldr	r2, [r7, #16]
 8008c96:	2334      	movs	r3, #52	@ 0x34
 8008c98:	fb01 f303 	mul.w	r3, r1, r3
 8008c9c:	4413      	add	r3, r2
 8008c9e:	3392      	adds	r3, #146	@ 0x92
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d00c      	beq.n	8008cc0 <USBH_MSC_Process+0x25c>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8008ca6:	693b      	ldr	r3, [r7, #16]
 8008ca8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008cac:	4619      	mov	r1, r3
 8008cae:	693a      	ldr	r2, [r7, #16]
 8008cb0:	2334      	movs	r3, #52	@ 0x34
 8008cb2:	fb01 f303 	mul.w	r3, r1, r3
 8008cb6:	4413      	add	r3, r2
 8008cb8:	33c1      	adds	r3, #193	@ 0xc1
 8008cba:	2201      	movs	r2, #1
 8008cbc:	701a      	strb	r2, [r3, #0]
 8008cbe:	e00b      	b.n	8008cd8 <USBH_MSC_Process+0x274>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	693a      	ldr	r2, [r7, #16]
 8008cca:	2334      	movs	r3, #52	@ 0x34
 8008ccc:	fb01 f303 	mul.w	r3, r1, r3
 8008cd0:	4413      	add	r3, r2
 8008cd2:	33c1      	adds	r3, #193	@ 0xc1
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008cde:	4619      	mov	r1, r3
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	2334      	movs	r3, #52	@ 0x34
 8008ce4:	fb01 f303 	mul.w	r3, r1, r3
 8008ce8:	4413      	add	r3, r2
 8008cea:	3390      	adds	r3, #144	@ 0x90
 8008cec:	2205      	movs	r2, #5
 8008cee:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008cf0:	693b      	ldr	r3, [r7, #16]
 8008cf2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	693a      	ldr	r2, [r7, #16]
 8008cfa:	2334      	movs	r3, #52	@ 0x34
 8008cfc:	fb01 f303 	mul.w	r3, r1, r3
 8008d00:	4413      	add	r3, r2
 8008d02:	3391      	adds	r3, #145	@ 0x91
 8008d04:	2201      	movs	r2, #1
 8008d06:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 8008d08:	693b      	ldr	r3, [r7, #16]
 8008d0a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d0e:	4619      	mov	r1, r3
 8008d10:	693a      	ldr	r2, [r7, #16]
 8008d12:	2334      	movs	r3, #52	@ 0x34
 8008d14:	fb01 f303 	mul.w	r3, r1, r3
 8008d18:	4413      	add	r3, r2
 8008d1a:	3392      	adds	r3, #146	@ 0x92
 8008d1c:	2202      	movs	r2, #2
 8008d1e:	701a      	strb	r2, [r3, #0]
            break;
 8008d20:	e12e      	b.n	8008f80 <USBH_MSC_Process+0x51c>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8008d22:	7bbb      	ldrb	r3, [r7, #14]
 8008d24:	2b04      	cmp	r3, #4
 8008d26:	f040 812b 	bne.w	8008f80 <USBH_MSC_Process+0x51c>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d30:	4619      	mov	r1, r3
 8008d32:	693a      	ldr	r2, [r7, #16]
 8008d34:	2334      	movs	r3, #52	@ 0x34
 8008d36:	fb01 f303 	mul.w	r3, r1, r3
 8008d3a:	4413      	add	r3, r2
 8008d3c:	3390      	adds	r3, #144	@ 0x90
 8008d3e:	2208      	movs	r2, #8
 8008d40:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d48:	4619      	mov	r1, r3
 8008d4a:	693a      	ldr	r2, [r7, #16]
 8008d4c:	2334      	movs	r3, #52	@ 0x34
 8008d4e:	fb01 f303 	mul.w	r3, r1, r3
 8008d52:	4413      	add	r3, r2
 8008d54:	3391      	adds	r3, #145	@ 0x91
 8008d56:	2202      	movs	r2, #2
 8008d58:	701a      	strb	r2, [r3, #0]
            break;
 8008d5a:	e111      	b.n	8008f80 <USBH_MSC_Process+0x51c>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity);
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d62:	b2d9      	uxtb	r1, r3
 8008d64:	693b      	ldr	r3, [r7, #16]
 8008d66:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d6a:	461a      	mov	r2, r3
 8008d6c:	2334      	movs	r3, #52	@ 0x34
 8008d6e:	fb02 f303 	mul.w	r3, r2, r3
 8008d72:	3390      	adds	r3, #144	@ 0x90
 8008d74:	693a      	ldr	r2, [r7, #16]
 8008d76:	4413      	add	r3, r2
 8008d78:	3304      	adds	r3, #4
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f000 fc30 	bl	80095e2 <USBH_MSC_SCSI_ReadCapacity>
 8008d82:	4603      	mov	r3, r0
 8008d84:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008d86:	7bfb      	ldrb	r3, [r7, #15]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d120      	bne.n	8008dce <USBH_MSC_Process+0x36a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008d8c:	693b      	ldr	r3, [r7, #16]
 8008d8e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008d92:	4619      	mov	r1, r3
 8008d94:	693a      	ldr	r2, [r7, #16]
 8008d96:	2334      	movs	r3, #52	@ 0x34
 8008d98:	fb01 f303 	mul.w	r3, r1, r3
 8008d9c:	4413      	add	r3, r2
 8008d9e:	3390      	adds	r3, #144	@ 0x90
 8008da0:	2201      	movs	r2, #1
 8008da2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008daa:	4619      	mov	r1, r3
 8008dac:	693a      	ldr	r2, [r7, #16]
 8008dae:	2334      	movs	r3, #52	@ 0x34
 8008db0:	fb01 f303 	mul.w	r3, r1, r3
 8008db4:	4413      	add	r3, r2
 8008db6:	3391      	adds	r3, #145	@ 0x91
 8008db8:	2200      	movs	r2, #0
 8008dba:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008dbc:	693b      	ldr	r3, [r7, #16]
 8008dbe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008dc2:	3301      	adds	r3, #1
 8008dc4:	b29a      	uxth	r2, r3
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8008dcc:	e0da      	b.n	8008f84 <USBH_MSC_Process+0x520>
            else if (scsi_status == USBH_FAIL)
 8008dce:	7bfb      	ldrb	r3, [r7, #15]
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	d10c      	bne.n	8008dee <USBH_MSC_Process+0x38a>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008dda:	4619      	mov	r1, r3
 8008ddc:	693a      	ldr	r2, [r7, #16]
 8008dde:	2334      	movs	r3, #52	@ 0x34
 8008de0:	fb01 f303 	mul.w	r3, r1, r3
 8008de4:	4413      	add	r3, r2
 8008de6:	3390      	adds	r3, #144	@ 0x90
 8008de8:	2205      	movs	r2, #5
 8008dea:	701a      	strb	r2, [r3, #0]
            break;
 8008dec:	e0ca      	b.n	8008f84 <USBH_MSC_Process+0x520>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008dee:	7bfb      	ldrb	r3, [r7, #15]
 8008df0:	2b04      	cmp	r3, #4
 8008df2:	f040 80c7 	bne.w	8008f84 <USBH_MSC_Process+0x520>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008dfc:	4619      	mov	r1, r3
 8008dfe:	693a      	ldr	r2, [r7, #16]
 8008e00:	2334      	movs	r3, #52	@ 0x34
 8008e02:	fb01 f303 	mul.w	r3, r1, r3
 8008e06:	4413      	add	r3, r2
 8008e08:	3390      	adds	r3, #144	@ 0x90
 8008e0a:	2208      	movs	r2, #8
 8008e0c:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e14:	4619      	mov	r1, r3
 8008e16:	693a      	ldr	r2, [r7, #16]
 8008e18:	2334      	movs	r3, #52	@ 0x34
 8008e1a:	fb01 f303 	mul.w	r3, r1, r3
 8008e1e:	4413      	add	r3, r2
 8008e20:	3391      	adds	r3, #145	@ 0x91
 8008e22:	2202      	movs	r2, #2
 8008e24:	701a      	strb	r2, [r3, #0]
            break;
 8008e26:	e0ad      	b.n	8008f84 <USBH_MSC_Process+0x520>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e2e:	b2d9      	uxtb	r1, r3
 8008e30:	693b      	ldr	r3, [r7, #16]
 8008e32:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e36:	461a      	mov	r2, r3
 8008e38:	2334      	movs	r3, #52	@ 0x34
 8008e3a:	fb02 f303 	mul.w	r3, r2, r3
 8008e3e:	3398      	adds	r3, #152	@ 0x98
 8008e40:	693a      	ldr	r2, [r7, #16]
 8008e42:	4413      	add	r3, r2
 8008e44:	3304      	adds	r3, #4
 8008e46:	461a      	mov	r2, r3
 8008e48:	6878      	ldr	r0, [r7, #4]
 8008e4a:	f000 fce9 	bl	8009820 <USBH_MSC_SCSI_RequestSense>
 8008e4e:	4603      	mov	r3, r0
 8008e50:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008e52:	7bfb      	ldrb	r3, [r7, #15]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d146      	bne.n	8008ee6 <USBH_MSC_Process+0x482>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008e58:	693b      	ldr	r3, [r7, #16]
 8008e5a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e5e:	4619      	mov	r1, r3
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	2334      	movs	r3, #52	@ 0x34
 8008e64:	fb01 f303 	mul.w	r3, r1, r3
 8008e68:	4413      	add	r3, r2
 8008e6a:	339c      	adds	r3, #156	@ 0x9c
 8008e6c:	781b      	ldrb	r3, [r3, #0]
 8008e6e:	2b06      	cmp	r3, #6
 8008e70:	d00c      	beq.n	8008e8c <USBH_MSC_Process+0x428>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008e78:	4619      	mov	r1, r3
 8008e7a:	693a      	ldr	r2, [r7, #16]
 8008e7c:	2334      	movs	r3, #52	@ 0x34
 8008e7e:	fb01 f303 	mul.w	r3, r1, r3
 8008e82:	4413      	add	r3, r2
 8008e84:	339c      	adds	r3, #156	@ 0x9c
 8008e86:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 8008e88:	2b02      	cmp	r3, #2
 8008e8a:	d117      	bne.n	8008ebc <USBH_MSC_Process+0x458>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8008e98:	1ad3      	subs	r3, r2, r3
 8008e9a:	f242 720f 	movw	r2, #9999	@ 0x270f
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d80c      	bhi.n	8008ebc <USBH_MSC_Process+0x458>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ea8:	4619      	mov	r1, r3
 8008eaa:	693a      	ldr	r2, [r7, #16]
 8008eac:	2334      	movs	r3, #52	@ 0x34
 8008eae:	fb01 f303 	mul.w	r3, r1, r3
 8008eb2:	4413      	add	r3, r2
 8008eb4:	3390      	adds	r3, #144	@ 0x90
 8008eb6:	2202      	movs	r2, #2
 8008eb8:	701a      	strb	r2, [r3, #0]
                  break;
 8008eba:	e066      	b.n	8008f8a <USBH_MSC_Process+0x526>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008ebc:	693b      	ldr	r3, [r7, #16]
 8008ebe:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ec2:	4619      	mov	r1, r3
 8008ec4:	693a      	ldr	r2, [r7, #16]
 8008ec6:	2334      	movs	r3, #52	@ 0x34
 8008ec8:	fb01 f303 	mul.w	r3, r1, r3
 8008ecc:	4413      	add	r3, r2
 8008ece:	3390      	adds	r3, #144	@ 0x90
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008eda:	3301      	adds	r3, #1
 8008edc:	b29a      	uxth	r2, r3
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8008ee4:	e050      	b.n	8008f88 <USBH_MSC_Process+0x524>
            else if (scsi_status == USBH_FAIL)
 8008ee6:	7bfb      	ldrb	r3, [r7, #15]
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d118      	bne.n	8008f1e <USBH_MSC_Process+0x4ba>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	693a      	ldr	r2, [r7, #16]
 8008ef6:	2334      	movs	r3, #52	@ 0x34
 8008ef8:	fb01 f303 	mul.w	r3, r1, r3
 8008efc:	4413      	add	r3, r2
 8008efe:	3390      	adds	r3, #144	@ 0x90
 8008f00:	2208      	movs	r2, #8
 8008f02:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f04:	693b      	ldr	r3, [r7, #16]
 8008f06:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	693a      	ldr	r2, [r7, #16]
 8008f0e:	2334      	movs	r3, #52	@ 0x34
 8008f10:	fb01 f303 	mul.w	r3, r1, r3
 8008f14:	4413      	add	r3, r2
 8008f16:	3391      	adds	r3, #145	@ 0x91
 8008f18:	2202      	movs	r2, #2
 8008f1a:	701a      	strb	r2, [r3, #0]
            break;
 8008f1c:	e034      	b.n	8008f88 <USBH_MSC_Process+0x524>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008f1e:	7bfb      	ldrb	r3, [r7, #15]
 8008f20:	2b04      	cmp	r3, #4
 8008f22:	d131      	bne.n	8008f88 <USBH_MSC_Process+0x524>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f2a:	4619      	mov	r1, r3
 8008f2c:	693a      	ldr	r2, [r7, #16]
 8008f2e:	2334      	movs	r3, #52	@ 0x34
 8008f30:	fb01 f303 	mul.w	r3, r1, r3
 8008f34:	4413      	add	r3, r2
 8008f36:	3390      	adds	r3, #144	@ 0x90
 8008f38:	2208      	movs	r2, #8
 8008f3a:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008f3c:	693b      	ldr	r3, [r7, #16]
 8008f3e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f42:	4619      	mov	r1, r3
 8008f44:	693a      	ldr	r2, [r7, #16]
 8008f46:	2334      	movs	r3, #52	@ 0x34
 8008f48:	fb01 f303 	mul.w	r3, r1, r3
 8008f4c:	4413      	add	r3, r2
 8008f4e:	3391      	adds	r3, #145	@ 0x91
 8008f50:	2202      	movs	r2, #2
 8008f52:	701a      	strb	r2, [r3, #0]
            break;
 8008f54:	e018      	b.n	8008f88 <USBH_MSC_Process+0x524>
            MSC_Handle->current_lun++;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008f5c:	3301      	adds	r3, #1
 8008f5e:	b29a      	uxth	r2, r3
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
            break;
 8008f66:	e010      	b.n	8008f8a <USBH_MSC_Process+0x526>
        MSC_Handle->current_lun = 0U;
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        MSC_Handle->state = MSC_USER_NOTIFY;
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	220a      	movs	r2, #10
 8008f74:	731a      	strb	r2, [r3, #12]
      break;
 8008f76:	e045      	b.n	8009004 <USBH_MSC_Process+0x5a0>
            break;
 8008f78:	bf00      	nop
 8008f7a:	e043      	b.n	8009004 <USBH_MSC_Process+0x5a0>
            break;
 8008f7c:	bf00      	nop
 8008f7e:	e041      	b.n	8009004 <USBH_MSC_Process+0x5a0>
            break;
 8008f80:	bf00      	nop
 8008f82:	e03f      	b.n	8009004 <USBH_MSC_Process+0x5a0>
            break;
 8008f84:	bf00      	nop
 8008f86:	e03d      	b.n	8009004 <USBH_MSC_Process+0x5a0>
            break;
 8008f88:	bf00      	nop
      break;
 8008f8a:	e03b      	b.n	8009004 <USBH_MSC_Process+0x5a0>
      if (MSC_Handle->lun < MSC_Handle->max_lun)
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8008f92:	693a      	ldr	r2, [r7, #16]
 8008f94:	7812      	ldrb	r2, [r2, #0]
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d228      	bcs.n	8008fec <USBH_MSC_Process+0x588>
        MSC_Handle->current_lun = MSC_Handle->lun;
 8008f9a:	693b      	ldr	r3, [r7, #16]
 8008f9c:	f8b3 20fa 	ldrh.w	r2, [r3, #250]	@ 0xfa
 8008fa0:	693b      	ldr	r3, [r7, #16]
 8008fa2:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
        if (MSC_Handle->unit[MSC_Handle->current_lun].error == MSC_OK)
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	@ 0xf8
 8008fac:	4619      	mov	r1, r3
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	2334      	movs	r3, #52	@ 0x34
 8008fb2:	fb01 f303 	mul.w	r3, r1, r3
 8008fb6:	4413      	add	r3, r2
 8008fb8:	3391      	adds	r3, #145	@ 0x91
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d106      	bne.n	8008fce <USBH_MSC_Process+0x56a>
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8008fc6:	2102      	movs	r1, #2
 8008fc8:	6878      	ldr	r0, [r7, #4]
 8008fca:	4798      	blx	r3
 8008fcc:	e005      	b.n	8008fda <USBH_MSC_Process+0x576>
          phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 8008fd4:	2106      	movs	r1, #6
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	4798      	blx	r3
        MSC_Handle->lun++;
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f8b3 30fa 	ldrh.w	r3, [r3, #250]	@ 0xfa
 8008fe0:	3301      	adds	r3, #1
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
      break;
 8008fea:	e00b      	b.n	8009004 <USBH_MSC_Process+0x5a0>
        MSC_Handle->lun = 0U;
 8008fec:	693b      	ldr	r3, [r7, #16]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f8a3 20fa 	strh.w	r2, [r3, #250]	@ 0xfa
        MSC_Handle->state = MSC_IDLE;
 8008ff4:	693b      	ldr	r3, [r7, #16]
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	731a      	strb	r2, [r3, #12]
      break;
 8008ffa:	e003      	b.n	8009004 <USBH_MSC_Process+0x5a0>
      error = USBH_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	75fb      	strb	r3, [r7, #23]
      break;
 8009000:	e000      	b.n	8009004 <USBH_MSC_Process+0x5a0>
      break;
 8009002:	bf00      	nop
  }
  return error;
 8009004:	7dfb      	ldrb	r3, [r7, #23]
}
 8009006:	4618      	mov	r0, r3
 8009008:	3718      	adds	r7, #24
 800900a:	46bd      	mov	sp, r7
 800900c:	bd80      	pop	{r7, pc}
 800900e:	bf00      	nop

08009010 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009010:	b480      	push	{r7}
 8009012:	b083      	sub	sp, #12
 8009014:	af00      	add	r7, sp, #0
 8009016:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009018:	2300      	movs	r3, #0
}
 800901a:	4618      	mov	r0, r3
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8009026:	b580      	push	{r7, lr}
 8009028:	b082      	sub	sp, #8
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2221      	movs	r2, #33	@ 0x21
 8009032:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	22ff      	movs	r2, #255	@ 0xff
 8009038:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2200      	movs	r2, #0
 800903e:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	2200      	movs	r2, #0
 8009044:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2200      	movs	r2, #0
 800904a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 800904c:	2200      	movs	r2, #0
 800904e:	2100      	movs	r1, #0
 8009050:	6878      	ldr	r0, [r7, #4]
 8009052:	f003 fda6 	bl	800cba2 <USBH_CtlReq>
 8009056:	4603      	mov	r3, r0
}
 8009058:	4618      	mov	r0, r3
 800905a:	3708      	adds	r7, #8
 800905c:	46bd      	mov	sp, r7
 800905e:	bd80      	pop	{r7, pc}

08009060 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8009060:	b580      	push	{r7, lr}
 8009062:	b082      	sub	sp, #8
 8009064:	af00      	add	r7, sp, #0
 8009066:	6078      	str	r0, [r7, #4]
 8009068:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	22a1      	movs	r2, #161	@ 0xa1
 800906e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	22fe      	movs	r2, #254	@ 0xfe
 8009074:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2200      	movs	r2, #0
 800907a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2200      	movs	r2, #0
 8009080:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	2201      	movs	r2, #1
 8009086:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8009088:	2201      	movs	r2, #1
 800908a:	6839      	ldr	r1, [r7, #0]
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f003 fd88 	bl	800cba2 <USBH_CtlReq>
 8009092:	4603      	mov	r3, r0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800909c:	b480      	push	{r7}
 800909e:	b085      	sub	sp, #20
 80090a0:	af00      	add	r7, sp, #0
 80090a2:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80090aa:	69db      	ldr	r3, [r3, #28]
 80090ac:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	4a09      	ldr	r2, [pc, #36]	@ (80090d8 <USBH_MSC_BOT_Init+0x3c>)
 80090b2:	655a      	str	r2, [r3, #84]	@ 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	4a09      	ldr	r2, [pc, #36]	@ (80090dc <USBH_MSC_BOT_Init+0x40>)
 80090b8:	659a      	str	r2, [r3, #88]	@ 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	2201      	movs	r2, #1
 80090be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	2201      	movs	r2, #1
 80090c6:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52

  return USBH_OK;
 80090ca:	2300      	movs	r3, #0
}
 80090cc:	4618      	mov	r0, r3
 80090ce:	3714      	adds	r7, #20
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	43425355 	.word	0x43425355
 80090dc:	20304050 	.word	0x20304050

080090e0 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80090e0:	b580      	push	{r7, lr}
 80090e2:	b088      	sub	sp, #32
 80090e4:	af02      	add	r7, sp, #8
 80090e6:	6078      	str	r0, [r7, #4]
 80090e8:	460b      	mov	r3, r1
 80090ea:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 80090ec:	2301      	movs	r3, #1
 80090ee:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80090f0:	2301      	movs	r3, #1
 80090f2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80090f4:	2301      	movs	r3, #1
 80090f6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80090f8:	2300      	movs	r3, #0
 80090fa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8009106:	2300      	movs	r3, #0
 8009108:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8009110:	3b01      	subs	r3, #1
 8009112:	2b0a      	cmp	r3, #10
 8009114:	f200 819e 	bhi.w	8009454 <USBH_MSC_BOT_Process+0x374>
 8009118:	a201      	add	r2, pc, #4	@ (adr r2, 8009120 <USBH_MSC_BOT_Process+0x40>)
 800911a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800911e:	bf00      	nop
 8009120:	0800914d 	.word	0x0800914d
 8009124:	08009175 	.word	0x08009175
 8009128:	080091df 	.word	0x080091df
 800912c:	080091fd 	.word	0x080091fd
 8009130:	08009281 	.word	0x08009281
 8009134:	080092a3 	.word	0x080092a3
 8009138:	0800933b 	.word	0x0800933b
 800913c:	08009357 	.word	0x08009357
 8009140:	080093a9 	.word	0x080093a9
 8009144:	080093d9 	.word	0x080093d9
 8009148:	0800943b 	.word	0x0800943b
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 800914c:	693b      	ldr	r3, [r7, #16]
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8009154:	693b      	ldr	r3, [r7, #16]
 8009156:	2202      	movs	r2, #2
 8009158:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 800915c:	693b      	ldr	r3, [r7, #16]
 800915e:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8009162:	693b      	ldr	r3, [r7, #16]
 8009164:	795b      	ldrb	r3, [r3, #5]
 8009166:	2201      	movs	r2, #1
 8009168:	9200      	str	r2, [sp, #0]
 800916a:	221f      	movs	r2, #31
 800916c:	6878      	ldr	r0, [r7, #4]
 800916e:	f003 ff26 	bl	800cfbe <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8009172:	e17e      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8009174:	693b      	ldr	r3, [r7, #16]
 8009176:	795b      	ldrb	r3, [r3, #5]
 8009178:	4619      	mov	r1, r3
 800917a:	6878      	ldr	r0, [r7, #4]
 800917c:	f004 fbc2 	bl	800d904 <USBH_LL_GetURBState>
 8009180:	4603      	mov	r3, r0
 8009182:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8009184:	7d3b      	ldrb	r3, [r7, #20]
 8009186:	2b01      	cmp	r3, #1
 8009188:	d118      	bne.n	80091bc <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 800918a:	693b      	ldr	r3, [r7, #16]
 800918c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800918e:	2b00      	cmp	r3, #0
 8009190:	d00f      	beq.n	80091b2 <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8009198:	b25b      	sxtb	r3, r3
 800919a:	2b00      	cmp	r3, #0
 800919c:	da04      	bge.n	80091a8 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	2203      	movs	r2, #3
 80091a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80091a6:	e157      	b.n	8009458 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	2205      	movs	r2, #5
 80091ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091b0:	e152      	b.n	8009458 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	2207      	movs	r2, #7
 80091b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091ba:	e14d      	b.n	8009458 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 80091bc:	7d3b      	ldrb	r3, [r7, #20]
 80091be:	2b02      	cmp	r3, #2
 80091c0:	d104      	bne.n	80091cc <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091ca:	e145      	b.n	8009458 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 80091cc:	7d3b      	ldrb	r3, [r7, #20]
 80091ce:	2b05      	cmp	r3, #5
 80091d0:	f040 8142 	bne.w	8009458 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_ERROR_OUT;
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	220a      	movs	r2, #10
 80091d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80091dc:	e13c      	b.n	8009458 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 80091de:	693b      	ldr	r3, [r7, #16]
 80091e0:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80091e4:	693b      	ldr	r3, [r7, #16]
 80091e6:	895a      	ldrh	r2, [r3, #10]
 80091e8:	693b      	ldr	r3, [r7, #16]
 80091ea:	791b      	ldrb	r3, [r3, #4]
 80091ec:	6878      	ldr	r0, [r7, #4]
 80091ee:	f003 ff0b 	bl	800d008 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 80091f2:	693b      	ldr	r3, [r7, #16]
 80091f4:	2204      	movs	r2, #4
 80091f6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

      break;
 80091fa:	e13a      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 80091fc:	693b      	ldr	r3, [r7, #16]
 80091fe:	791b      	ldrb	r3, [r3, #4]
 8009200:	4619      	mov	r1, r3
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f004 fb7e 	bl	800d904 <USBH_LL_GetURBState>
 8009208:	4603      	mov	r3, r0
 800920a:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 800920c:	7d3b      	ldrb	r3, [r7, #20]
 800920e:	2b01      	cmp	r3, #1
 8009210:	d12d      	bne.n	800926e <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8009212:	693b      	ldr	r3, [r7, #16]
 8009214:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009216:	693a      	ldr	r2, [r7, #16]
 8009218:	8952      	ldrh	r2, [r2, #10]
 800921a:	4293      	cmp	r3, r2
 800921c:	d910      	bls.n	8009240 <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 800921e:	693b      	ldr	r3, [r7, #16]
 8009220:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009224:	693a      	ldr	r2, [r7, #16]
 8009226:	8952      	ldrh	r2, [r2, #10]
 8009228:	441a      	add	r2, r3
 800922a:	693b      	ldr	r3, [r7, #16]
 800922c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009234:	693a      	ldr	r2, [r7, #16]
 8009236:	8952      	ldrh	r2, [r2, #10]
 8009238:	1a9a      	subs	r2, r3, r2
 800923a:	693b      	ldr	r3, [r7, #16]
 800923c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800923e:	e002      	b.n	8009246 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8009240:	693b      	ldr	r3, [r7, #16]
 8009242:	2200      	movs	r2, #0
 8009244:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8009246:	693b      	ldr	r3, [r7, #16]
 8009248:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800924a:	2b00      	cmp	r3, #0
 800924c:	d00a      	beq.n	8009264 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009254:	693b      	ldr	r3, [r7, #16]
 8009256:	895a      	ldrh	r2, [r3, #10]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	791b      	ldrb	r3, [r3, #4]
 800925c:	6878      	ldr	r0, [r7, #4]
 800925e:	f003 fed3 	bl	800d008 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8009262:	e0fb      	b.n	800945c <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8009264:	693b      	ldr	r3, [r7, #16]
 8009266:	2207      	movs	r2, #7
 8009268:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800926c:	e0f6      	b.n	800945c <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 800926e:	7d3b      	ldrb	r3, [r7, #20]
 8009270:	2b05      	cmp	r3, #5
 8009272:	f040 80f3 	bne.w	800945c <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	2209      	movs	r2, #9
 800927a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 800927e:	e0ed      	b.n	800945c <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 8009286:	693b      	ldr	r3, [r7, #16]
 8009288:	891a      	ldrh	r2, [r3, #8]
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	795b      	ldrb	r3, [r3, #5]
 800928e:	2001      	movs	r0, #1
 8009290:	9000      	str	r0, [sp, #0]
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f003 fe93 	bl	800cfbe <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	2206      	movs	r2, #6
 800929c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80092a0:	e0e7      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 80092a2:	693b      	ldr	r3, [r7, #16]
 80092a4:	795b      	ldrb	r3, [r3, #5]
 80092a6:	4619      	mov	r1, r3
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f004 fb2b 	bl	800d904 <USBH_LL_GetURBState>
 80092ae:	4603      	mov	r3, r0
 80092b0:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 80092b2:	7d3b      	ldrb	r3, [r7, #20]
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d12f      	bne.n	8009318 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 80092b8:	693b      	ldr	r3, [r7, #16]
 80092ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092bc:	693a      	ldr	r2, [r7, #16]
 80092be:	8912      	ldrh	r2, [r2, #8]
 80092c0:	4293      	cmp	r3, r2
 80092c2:	d910      	bls.n	80092e6 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 80092c4:	693b      	ldr	r3, [r7, #16]
 80092c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80092ca:	693a      	ldr	r2, [r7, #16]
 80092cc:	8912      	ldrh	r2, [r2, #8]
 80092ce:	441a      	add	r2, r3
 80092d0:	693b      	ldr	r3, [r7, #16]
 80092d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092da:	693a      	ldr	r2, [r7, #16]
 80092dc:	8912      	ldrh	r2, [r2, #8]
 80092de:	1a9a      	subs	r2, r3, r2
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80092e4:	e002      	b.n	80092ec <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 80092e6:	693b      	ldr	r3, [r7, #16]
 80092e8:	2200      	movs	r2, #0
 80092ea:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 80092ec:	693b      	ldr	r3, [r7, #16]
 80092ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d00c      	beq.n	800930e <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 80092f4:	693b      	ldr	r3, [r7, #16]
 80092f6:	f8d3 108c 	ldr.w	r1, [r3, #140]	@ 0x8c
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	891a      	ldrh	r2, [r3, #8]
 80092fe:	693b      	ldr	r3, [r7, #16]
 8009300:	795b      	ldrb	r3, [r3, #5]
 8009302:	2001      	movs	r0, #1
 8009304:	9000      	str	r0, [sp, #0]
 8009306:	6878      	ldr	r0, [r7, #4]
 8009308:	f003 fe59 	bl	800cfbe <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 800930c:	e0a8      	b.n	8009460 <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 800930e:	693b      	ldr	r3, [r7, #16]
 8009310:	2207      	movs	r2, #7
 8009312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009316:	e0a3      	b.n	8009460 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009318:	7d3b      	ldrb	r3, [r7, #20]
 800931a:	2b02      	cmp	r3, #2
 800931c:	d104      	bne.n	8009328 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state = BOT_DATA_OUT;
 800931e:	693b      	ldr	r3, [r7, #16]
 8009320:	2205      	movs	r2, #5
 8009322:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009326:	e09b      	b.n	8009460 <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8009328:	7d3b      	ldrb	r3, [r7, #20]
 800932a:	2b05      	cmp	r3, #5
 800932c:	f040 8098 	bne.w	8009460 <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state = BOT_ERROR_OUT;
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	220a      	movs	r2, #10
 8009334:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009338:	e092      	b.n	8009460 <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f103 0178 	add.w	r1, r3, #120	@ 0x78
 8009340:	693b      	ldr	r3, [r7, #16]
 8009342:	791b      	ldrb	r3, [r3, #4]
 8009344:	220d      	movs	r2, #13
 8009346:	6878      	ldr	r0, [r7, #4]
 8009348:	f003 fe5e 	bl	800d008 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_RECEIVE_CSW_WAIT;
 800934c:	693b      	ldr	r3, [r7, #16]
 800934e:	2208      	movs	r2, #8
 8009350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009354:	e08d      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	791b      	ldrb	r3, [r3, #4]
 800935a:	4619      	mov	r1, r3
 800935c:	6878      	ldr	r0, [r7, #4]
 800935e:	f004 fad1 	bl	800d904 <USBH_LL_GetURBState>
 8009362:	4603      	mov	r3, r0
 8009364:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8009366:	7d3b      	ldrb	r3, [r7, #20]
 8009368:	2b01      	cmp	r3, #1
 800936a:	d115      	bne.n	8009398 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8009374:	693b      	ldr	r3, [r7, #16]
 8009376:	2201      	movs	r2, #1
 8009378:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 800937c:	6878      	ldr	r0, [r7, #4]
 800937e:	f000 f8a9 	bl	80094d4 <USBH_MSC_DecodeCSW>
 8009382:	4603      	mov	r3, r0
 8009384:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8009386:	7d7b      	ldrb	r3, [r7, #21]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d102      	bne.n	8009392 <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 800938c:	2300      	movs	r3, #0
 800938e:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8009390:	e068      	b.n	8009464 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8009392:	2302      	movs	r3, #2
 8009394:	75fb      	strb	r3, [r7, #23]
      break;
 8009396:	e065      	b.n	8009464 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8009398:	7d3b      	ldrb	r3, [r7, #20]
 800939a:	2b05      	cmp	r3, #5
 800939c:	d162      	bne.n	8009464 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2209      	movs	r2, #9
 80093a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80093a6:	e05d      	b.n	8009464 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 80093a8:	78fb      	ldrb	r3, [r7, #3]
 80093aa:	2200      	movs	r2, #0
 80093ac:	4619      	mov	r1, r3
 80093ae:	6878      	ldr	r0, [r7, #4]
 80093b0:	f000 f864 	bl	800947c <USBH_MSC_BOT_Abort>
 80093b4:	4603      	mov	r3, r0
 80093b6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80093b8:	7dbb      	ldrb	r3, [r7, #22]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d104      	bne.n	80093c8 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	2207      	movs	r2, #7
 80093c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 80093c6:	e04f      	b.n	8009468 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 80093c8:	7dbb      	ldrb	r3, [r7, #22]
 80093ca:	2b04      	cmp	r3, #4
 80093cc:	d14c      	bne.n	8009468 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	220b      	movs	r2, #11
 80093d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 80093d6:	e047      	b.n	8009468 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 80093d8:	78fb      	ldrb	r3, [r7, #3]
 80093da:	2201      	movs	r2, #1
 80093dc:	4619      	mov	r1, r3
 80093de:	6878      	ldr	r0, [r7, #4]
 80093e0:	f000 f84c 	bl	800947c <USBH_MSC_BOT_Abort>
 80093e4:	4603      	mov	r3, r0
 80093e6:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 80093e8:	7dbb      	ldrb	r3, [r7, #22]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d11d      	bne.n	800942a <USBH_MSC_BOT_Process+0x34a>
      {
        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	795b      	ldrb	r3, [r3, #5]
 80093f2:	4619      	mov	r1, r3
 80093f4:	6878      	ldr	r0, [r7, #4]
 80093f6:	f004 fae2 	bl	800d9be <USBH_LL_GetToggle>
 80093fa:	4603      	mov	r3, r0
 80093fc:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 80093fe:	693b      	ldr	r3, [r7, #16]
 8009400:	7959      	ldrb	r1, [r3, #5]
 8009402:	7bfb      	ldrb	r3, [r7, #15]
 8009404:	f1c3 0301 	rsb	r3, r3, #1
 8009408:	b2db      	uxtb	r3, r3
 800940a:	461a      	mov	r2, r3
 800940c:	6878      	ldr	r0, [r7, #4]
 800940e:	f004 faa3 	bl	800d958 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8009412:	693b      	ldr	r3, [r7, #16]
 8009414:	791b      	ldrb	r3, [r3, #4]
 8009416:	2200      	movs	r2, #0
 8009418:	4619      	mov	r1, r3
 800941a:	6878      	ldr	r0, [r7, #4]
 800941c:	f004 fa9c 	bl	800d958 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8009420:	693b      	ldr	r3, [r7, #16]
 8009422:	2209      	movs	r2, #9
 8009424:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8009428:	e020      	b.n	800946c <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 800942a:	7dbb      	ldrb	r3, [r7, #22]
 800942c:	2b04      	cmp	r3, #4
 800942e:	d11d      	bne.n	800946c <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	220b      	movs	r2, #11
 8009434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      break;
 8009438:	e018      	b.n	800946c <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	f7ff fdf3 	bl	8009026 <USBH_MSC_BOT_REQ_Reset>
 8009440:	4603      	mov	r3, r0
 8009442:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8009444:	7dfb      	ldrb	r3, [r7, #23]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d112      	bne.n	8009470 <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	2201      	movs	r2, #1
 800944e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      }
      break;
 8009452:	e00d      	b.n	8009470 <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8009454:	bf00      	nop
 8009456:	e00c      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 8009458:	bf00      	nop
 800945a:	e00a      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 800945c:	bf00      	nop
 800945e:	e008      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 8009460:	bf00      	nop
 8009462:	e006      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 8009464:	bf00      	nop
 8009466:	e004      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 8009468:	bf00      	nop
 800946a:	e002      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 800946c:	bf00      	nop
 800946e:	e000      	b.n	8009472 <USBH_MSC_BOT_Process+0x392>
      break;
 8009470:	bf00      	nop
  }
  return status;
 8009472:	7dfb      	ldrb	r3, [r7, #23]
}
 8009474:	4618      	mov	r0, r3
 8009476:	3718      	adds	r7, #24
 8009478:	46bd      	mov	sp, r7
 800947a:	bd80      	pop	{r7, pc}

0800947c <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 800947c:	b580      	push	{r7, lr}
 800947e:	b084      	sub	sp, #16
 8009480:	af00      	add	r7, sp, #0
 8009482:	6078      	str	r0, [r7, #4]
 8009484:	460b      	mov	r3, r1
 8009486:	70fb      	strb	r3, [r7, #3]
 8009488:	4613      	mov	r3, r2
 800948a:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 800948c:	2302      	movs	r3, #2
 800948e:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009496:	69db      	ldr	r3, [r3, #28]
 8009498:	60bb      	str	r3, [r7, #8]

  switch (dir)
 800949a:	78bb      	ldrb	r3, [r7, #2]
 800949c:	2b00      	cmp	r3, #0
 800949e:	d002      	beq.n	80094a6 <USBH_MSC_BOT_Abort+0x2a>
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d009      	beq.n	80094b8 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 80094a4:	e011      	b.n	80094ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 80094a6:	68bb      	ldr	r3, [r7, #8]
 80094a8:	79db      	ldrb	r3, [r3, #7]
 80094aa:	4619      	mov	r1, r3
 80094ac:	6878      	ldr	r0, [r7, #4]
 80094ae:	f003 f842 	bl	800c536 <USBH_ClrFeature>
 80094b2:	4603      	mov	r3, r0
 80094b4:	73fb      	strb	r3, [r7, #15]
      break;
 80094b6:	e008      	b.n	80094ca <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	799b      	ldrb	r3, [r3, #6]
 80094bc:	4619      	mov	r1, r3
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f003 f839 	bl	800c536 <USBH_ClrFeature>
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
      break;
 80094c8:	bf00      	nop
  }
  return status;
 80094ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3710      	adds	r7, #16
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}

080094d4 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b084      	sub	sp, #16
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80094e2:	69db      	ldr	r3, [r3, #28]
 80094e4:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 80094e6:	2301      	movs	r3, #1
 80094e8:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 80094ea:	68bb      	ldr	r3, [r7, #8]
 80094ec:	791b      	ldrb	r3, [r3, #4]
 80094ee:	4619      	mov	r1, r3
 80094f0:	6878      	ldr	r0, [r7, #4]
 80094f2:	f004 f975 	bl	800d7e0 <USBH_LL_GetLastXferSize>
 80094f6:	4603      	mov	r3, r0
 80094f8:	2b0d      	cmp	r3, #13
 80094fa:	d002      	beq.n	8009502 <USBH_MSC_DecodeCSW+0x2e>
    (9) Ho > Dn (Host expects to send data to the device,
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/

    status = BOT_CSW_PHASE_ERROR;
 80094fc:	2302      	movs	r3, #2
 80094fe:	73fb      	strb	r3, [r7, #15]
 8009500:	e024      	b.n	800954c <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009506:	4a14      	ldr	r2, [pc, #80]	@ (8009558 <USBH_MSC_DecodeCSW+0x84>)
 8009508:	4293      	cmp	r3, r2
 800950a:	d11d      	bne.n	8009548 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009514:	429a      	cmp	r2, r3
 8009516:	d119      	bne.n	800954c <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800951e:	2b00      	cmp	r3, #0
 8009520:	d102      	bne.n	8009528 <USBH_MSC_DecodeCSW+0x54>
          Device intends to send data to the host)
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_CMD_PASSED;
 8009522:	2300      	movs	r3, #0
 8009524:	73fb      	strb	r3, [r7, #15]
 8009526:	e011      	b.n	800954c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800952e:	2b01      	cmp	r3, #1
 8009530:	d102      	bne.n	8009538 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8009532:	2301      	movs	r3, #1
 8009534:	73fb      	strb	r3, [r7, #15]
 8009536:	e009      	b.n	800954c <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800953e:	2b02      	cmp	r3, #2
 8009540:	d104      	bne.n	800954c <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8009542:	2302      	movs	r3, #2
 8009544:	73fb      	strb	r3, [r7, #15]
 8009546:	e001      	b.n	800954c <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8009548:	2302      	movs	r3, #2
 800954a:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}
 8009556:	bf00      	nop
 8009558:	53425355 	.word	0x53425355

0800955c <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	460b      	mov	r3, r1
 8009566:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009568:	2302      	movs	r3, #2
 800956a:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009572:	69db      	ldr	r3, [r3, #28]
 8009574:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8009576:	68bb      	ldr	r3, [r7, #8]
 8009578:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 800957c:	2b01      	cmp	r3, #1
 800957e:	d002      	beq.n	8009586 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8009580:	2b02      	cmp	r3, #2
 8009582:	d021      	beq.n	80095c8 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009584:	e028      	b.n	80095d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	2200      	movs	r2, #0
 800958a:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800958c:	68bb      	ldr	r3, [r7, #8]
 800958e:	2200      	movs	r2, #0
 8009590:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009594:	68bb      	ldr	r3, [r7, #8]
 8009596:	220a      	movs	r2, #10
 8009598:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800959c:	68bb      	ldr	r3, [r7, #8]
 800959e:	3363      	adds	r3, #99	@ 0x63
 80095a0:	2210      	movs	r2, #16
 80095a2:	2100      	movs	r1, #0
 80095a4:	4618      	mov	r0, r3
 80095a6:	f004 fd8f 	bl	800e0c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_TEST_UNIT_READY;
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	2200      	movs	r2, #0
 80095ae:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80095b2:	68bb      	ldr	r3, [r7, #8]
 80095b4:	2201      	movs	r2, #1
 80095b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80095ba:	68bb      	ldr	r3, [r7, #8]
 80095bc:	2202      	movs	r2, #2
 80095be:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      error = USBH_BUSY;
 80095c2:	2301      	movs	r3, #1
 80095c4:	73fb      	strb	r3, [r7, #15]
      break;
 80095c6:	e007      	b.n	80095d8 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 80095c8:	78fb      	ldrb	r3, [r7, #3]
 80095ca:	4619      	mov	r1, r3
 80095cc:	6878      	ldr	r0, [r7, #4]
 80095ce:	f7ff fd87 	bl	80090e0 <USBH_MSC_BOT_Process>
 80095d2:	4603      	mov	r3, r0
 80095d4:	73fb      	strb	r3, [r7, #15]
      break;
 80095d6:	bf00      	nop
  }

  return error;
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b086      	sub	sp, #24
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	60f8      	str	r0, [r7, #12]
 80095ea:	460b      	mov	r3, r1
 80095ec:	607a      	str	r2, [r7, #4]
 80095ee:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_BUSY;
 80095f0:	2301      	movs	r3, #1
 80095f2:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80095fa:	69db      	ldr	r3, [r3, #28]
 80095fc:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80095fe:	693b      	ldr	r3, [r7, #16]
 8009600:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009604:	2b01      	cmp	r3, #1
 8009606:	d002      	beq.n	800960e <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8009608:	2b02      	cmp	r3, #2
 800960a:	d027      	beq.n	800965c <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 800960c:	e05e      	b.n	80096cc <USBH_MSC_SCSI_ReadCapacity+0xea>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	2208      	movs	r2, #8
 8009612:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009614:	693b      	ldr	r3, [r7, #16]
 8009616:	2280      	movs	r2, #128	@ 0x80
 8009618:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	220a      	movs	r2, #10
 8009620:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009624:	693b      	ldr	r3, [r7, #16]
 8009626:	3363      	adds	r3, #99	@ 0x63
 8009628:	2210      	movs	r2, #16
 800962a:	2100      	movs	r1, #0
 800962c:	4618      	mov	r0, r3
 800962e:	f004 fd4b 	bl	800e0c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8009632:	693b      	ldr	r3, [r7, #16]
 8009634:	2225      	movs	r2, #37	@ 0x25
 8009636:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	2201      	movs	r2, #1
 800963e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2202      	movs	r2, #2
 8009646:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	f103 0210 	add.w	r2, r3, #16
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009656:	2301      	movs	r3, #1
 8009658:	75fb      	strb	r3, [r7, #23]
      break;
 800965a:	e037      	b.n	80096cc <USBH_MSC_SCSI_ReadCapacity+0xea>
      error = USBH_MSC_BOT_Process(phost, lun);
 800965c:	7afb      	ldrb	r3, [r7, #11]
 800965e:	4619      	mov	r1, r3
 8009660:	68f8      	ldr	r0, [r7, #12]
 8009662:	f7ff fd3d 	bl	80090e0 <USBH_MSC_BOT_Process>
 8009666:	4603      	mov	r3, r0
 8009668:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800966a:	7dfb      	ldrb	r3, [r7, #23]
 800966c:	2b00      	cmp	r3, #0
 800966e:	d12c      	bne.n	80096ca <USBH_MSC_SCSI_ReadCapacity+0xe8>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009676:	3303      	adds	r3, #3
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	461a      	mov	r2, r3
 800967c:	693b      	ldr	r3, [r7, #16]
 800967e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009682:	3302      	adds	r3, #2
 8009684:	781b      	ldrb	r3, [r3, #0]
 8009686:	021b      	lsls	r3, r3, #8
 8009688:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 800968a:	693b      	ldr	r3, [r7, #16]
 800968c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009690:	3301      	adds	r3, #1
 8009692:	781b      	ldrb	r3, [r3, #0]
 8009694:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8009696:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8009698:	693b      	ldr	r3, [r7, #16]
 800969a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800969e:	781b      	ldrb	r3, [r3, #0]
 80096a0:	061b      	lsls	r3, r3, #24
 80096a2:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 80096a8:	693b      	ldr	r3, [r7, #16]
 80096aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ae:	3307      	adds	r3, #7
 80096b0:	781b      	ldrb	r3, [r3, #0]
 80096b2:	461a      	mov	r2, r3
 80096b4:	693b      	ldr	r3, [r7, #16]
 80096b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80096ba:	3306      	adds	r3, #6
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	021b      	lsls	r3, r3, #8
 80096c0:	b29b      	uxth	r3, r3
 80096c2:	4313      	orrs	r3, r2
 80096c4:	b29a      	uxth	r2, r3
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	809a      	strh	r2, [r3, #4]
      break;
 80096ca:	bf00      	nop
  }

  return error;
 80096cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	3718      	adds	r7, #24
 80096d2:	46bd      	mov	sp, r7
 80096d4:	bd80      	pop	{r7, pc}

080096d6 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 80096d6:	b580      	push	{r7, lr}
 80096d8:	b086      	sub	sp, #24
 80096da:	af00      	add	r7, sp, #0
 80096dc:	60f8      	str	r0, [r7, #12]
 80096de:	460b      	mov	r3, r1
 80096e0:	607a      	str	r2, [r7, #4]
 80096e2:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 80096e4:	2302      	movs	r3, #2
 80096e6:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 80096ee:	69db      	ldr	r3, [r3, #28]
 80096f0:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 80096f8:	2b01      	cmp	r3, #1
 80096fa:	d002      	beq.n	8009702 <USBH_MSC_SCSI_Inquiry+0x2c>
 80096fc:	2b02      	cmp	r3, #2
 80096fe:	d03d      	beq.n	800977c <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8009700:	e089      	b.n	8009816 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009702:	693b      	ldr	r3, [r7, #16]
 8009704:	2224      	movs	r2, #36	@ 0x24
 8009706:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009708:	693b      	ldr	r3, [r7, #16]
 800970a:	2280      	movs	r2, #128	@ 0x80
 800970c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009710:	693b      	ldr	r3, [r7, #16]
 8009712:	220a      	movs	r2, #10
 8009714:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	3363      	adds	r3, #99	@ 0x63
 800971c:	220a      	movs	r2, #10
 800971e:	2100      	movs	r1, #0
 8009720:	4618      	mov	r0, r3
 8009722:	f004 fcd1 	bl	800e0c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_INQUIRY;
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	2212      	movs	r2, #18
 800972a:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 800972e:	7afb      	ldrb	r3, [r7, #11]
 8009730:	015b      	lsls	r3, r3, #5
 8009732:	b2da      	uxtb	r2, r3
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 800973a:	693b      	ldr	r3, [r7, #16]
 800973c:	2200      	movs	r2, #0
 800973e:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	2200      	movs	r2, #0
 8009746:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = 0x24U;
 800974a:	693b      	ldr	r3, [r7, #16]
 800974c:	2224      	movs	r2, #36	@ 0x24
 800974e:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	2200      	movs	r2, #0
 8009756:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800975a:	693b      	ldr	r3, [r7, #16]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009762:	693b      	ldr	r3, [r7, #16]
 8009764:	2202      	movs	r2, #2
 8009766:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800976a:	693b      	ldr	r3, [r7, #16]
 800976c:	f103 0210 	add.w	r2, r3, #16
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 8009776:	2301      	movs	r3, #1
 8009778:	75fb      	strb	r3, [r7, #23]
      break;
 800977a:	e04c      	b.n	8009816 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800977c:	7afb      	ldrb	r3, [r7, #11]
 800977e:	4619      	mov	r1, r3
 8009780:	68f8      	ldr	r0, [r7, #12]
 8009782:	f7ff fcad 	bl	80090e0 <USBH_MSC_BOT_Process>
 8009786:	4603      	mov	r3, r0
 8009788:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800978a:	7dfb      	ldrb	r3, [r7, #23]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d141      	bne.n	8009814 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 8009790:	2222      	movs	r2, #34	@ 0x22
 8009792:	2100      	movs	r1, #0
 8009794:	6878      	ldr	r0, [r7, #4]
 8009796:	f004 fc97 	bl	800e0c8 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 800979a:	693b      	ldr	r3, [r7, #16]
 800979c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097a0:	781b      	ldrb	r3, [r3, #0]
 80097a2:	f003 031f 	and.w	r3, r3, #31
 80097a6:	b2da      	uxtb	r2, r3
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80097ac:	693b      	ldr	r3, [r7, #16]
 80097ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	095b      	lsrs	r3, r3, #5
 80097b6:	b2da      	uxtb	r2, r3
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097c2:	3301      	adds	r3, #1
 80097c4:	781b      	ldrb	r3, [r3, #0]
 80097c6:	b25b      	sxtb	r3, r3
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	da03      	bge.n	80097d4 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	2201      	movs	r2, #1
 80097d0:	709a      	strb	r2, [r3, #2]
 80097d2:	e002      	b.n	80097da <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	2200      	movs	r2, #0
 80097d8:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	1cd8      	adds	r0, r3, #3
 80097de:	693b      	ldr	r3, [r7, #16]
 80097e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097e4:	3308      	adds	r3, #8
 80097e6:	2208      	movs	r2, #8
 80097e8:	4619      	mov	r1, r3
 80097ea:	f004 fd0c 	bl	800e206 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f103 000c 	add.w	r0, r3, #12
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80097fa:	3310      	adds	r3, #16
 80097fc:	2210      	movs	r2, #16
 80097fe:	4619      	mov	r1, r3
 8009800:	f004 fd01 	bl	800e206 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	331d      	adds	r3, #29
 8009808:	693a      	ldr	r2, [r7, #16]
 800980a:	f8d2 208c 	ldr.w	r2, [r2, #140]	@ 0x8c
 800980e:	3220      	adds	r2, #32
 8009810:	6812      	ldr	r2, [r2, #0]
 8009812:	601a      	str	r2, [r3, #0]
      break;
 8009814:	bf00      	nop
  }

  return error;
 8009816:	7dfb      	ldrb	r3, [r7, #23]
}
 8009818:	4618      	mov	r0, r3
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}

08009820 <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 8009820:	b580      	push	{r7, lr}
 8009822:	b086      	sub	sp, #24
 8009824:	af00      	add	r7, sp, #0
 8009826:	60f8      	str	r0, [r7, #12]
 8009828:	460b      	mov	r3, r1
 800982a:	607a      	str	r2, [r7, #4]
 800982c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 800982e:	2302      	movs	r3, #2
 8009830:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009838:	69db      	ldr	r3, [r3, #28]
 800983a:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800983c:	693b      	ldr	r3, [r7, #16]
 800983e:	f893 3052 	ldrb.w	r3, [r3, #82]	@ 0x52
 8009842:	2b01      	cmp	r3, #1
 8009844:	d002      	beq.n	800984c <USBH_MSC_SCSI_RequestSense+0x2c>
 8009846:	2b02      	cmp	r3, #2
 8009848:	d03d      	beq.n	80098c6 <USBH_MSC_SCSI_RequestSense+0xa6>

      }
      break;

    default:
      break;
 800984a:	e063      	b.n	8009914 <USBH_MSC_SCSI_RequestSense+0xf4>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	220e      	movs	r2, #14
 8009850:	65da      	str	r2, [r3, #92]	@ 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	2280      	movs	r2, #128	@ 0x80
 8009856:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	220a      	movs	r2, #10
 800985e:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009862:	693b      	ldr	r3, [r7, #16]
 8009864:	3363      	adds	r3, #99	@ 0x63
 8009866:	2210      	movs	r2, #16
 8009868:	2100      	movs	r1, #0
 800986a:	4618      	mov	r0, r3
 800986c:	f004 fc2c 	bl	800e0c8 <memset>
      MSC_Handle->hbot.cbw.field.CB[0] = OPCODE_REQUEST_SENSE;
 8009870:	693b      	ldr	r3, [r7, #16]
 8009872:	2203      	movs	r2, #3
 8009874:	f883 2063 	strb.w	r2, [r3, #99]	@ 0x63
      MSC_Handle->hbot.cbw.field.CB[1] = (lun << 5);
 8009878:	7afb      	ldrb	r3, [r7, #11]
 800987a:	015b      	lsls	r3, r3, #5
 800987c:	b2da      	uxtb	r2, r3
 800987e:	693b      	ldr	r3, [r7, #16]
 8009880:	f883 2064 	strb.w	r2, [r3, #100]	@ 0x64
      MSC_Handle->hbot.cbw.field.CB[2] = 0U;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	2200      	movs	r2, #0
 8009888:	f883 2065 	strb.w	r2, [r3, #101]	@ 0x65
      MSC_Handle->hbot.cbw.field.CB[3] = 0U;
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	2200      	movs	r2, #0
 8009890:	f883 2066 	strb.w	r2, [r3, #102]	@ 0x66
      MSC_Handle->hbot.cbw.field.CB[4] = DATA_LEN_REQUEST_SENSE;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	220e      	movs	r2, #14
 8009898:	f883 2067 	strb.w	r2, [r3, #103]	@ 0x67
      MSC_Handle->hbot.cbw.field.CB[5] = 0U;
 800989c:	693b      	ldr	r3, [r7, #16]
 800989e:	2200      	movs	r2, #0
 80098a0:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80098a4:	693b      	ldr	r3, [r7, #16]
 80098a6:	2201      	movs	r2, #1
 80098a8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	2202      	movs	r2, #2
 80098b0:	f883 2052 	strb.w	r2, [r3, #82]	@ 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	f103 0210 	add.w	r2, r3, #16
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
      error = USBH_BUSY;
 80098c0:	2301      	movs	r3, #1
 80098c2:	75fb      	strb	r3, [r7, #23]
      break;
 80098c4:	e026      	b.n	8009914 <USBH_MSC_SCSI_RequestSense+0xf4>
      error = USBH_MSC_BOT_Process(phost, lun);
 80098c6:	7afb      	ldrb	r3, [r7, #11]
 80098c8:	4619      	mov	r1, r3
 80098ca:	68f8      	ldr	r0, [r7, #12]
 80098cc:	f7ff fc08 	bl	80090e0 <USBH_MSC_BOT_Process>
 80098d0:	4603      	mov	r3, r0
 80098d2:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80098d4:	7dfb      	ldrb	r3, [r7, #23]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d11b      	bne.n	8009912 <USBH_MSC_SCSI_RequestSense+0xf2>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80098da:	693b      	ldr	r3, [r7, #16]
 80098dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098e0:	3302      	adds	r3, #2
 80098e2:	781b      	ldrb	r3, [r3, #0]
 80098e4:	f003 030f 	and.w	r3, r3, #15
 80098e8:	b2da      	uxtb	r2, r3
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80098ee:	693b      	ldr	r3, [r7, #16]
 80098f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80098f4:	7b1a      	ldrb	r2, [r3, #12]
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80098fa:	693b      	ldr	r3, [r7, #16]
 80098fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009900:	7b5a      	ldrb	r2, [r3, #13]
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	709a      	strb	r2, [r3, #2]
        if (sense_data->asc == SCSI_ASC_MEDIUM_NOT_PRESENT)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	785b      	ldrb	r3, [r3, #1]
 800990a:	2b3a      	cmp	r3, #58	@ 0x3a
 800990c:	d101      	bne.n	8009912 <USBH_MSC_SCSI_RequestSense+0xf2>
          error = USBH_UNRECOVERED_ERROR;
 800990e:	2304      	movs	r3, #4
 8009910:	75fb      	strb	r3, [r7, #23]
      break;
 8009912:	bf00      	nop
  }

  return error;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
}
 8009916:	4618      	mov	r0, r3
 8009918:	3718      	adds	r7, #24
 800991a:	46bd      	mov	sp, r7
 800991c:	bd80      	pop	{r7, pc}

0800991e <USBH_MTP_InterfaceInit>:
  *         The function init the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800991e:	b590      	push	{r4, r7, lr}
 8009920:	b089      	sub	sp, #36	@ 0x24
 8009922:	af04      	add	r7, sp, #16
 8009924:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface, endpoint;
  MTP_HandleTypeDef *MTP_Handle;

  interface = USBH_FindInterface(phost, USB_MTP_CLASS, 1U, 1U);
 8009926:	2301      	movs	r3, #1
 8009928:	2201      	movs	r2, #1
 800992a:	2106      	movs	r1, #6
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f001 ffcd 	bl	800b8cc <USBH_FindInterface>
 8009932:	4603      	mov	r3, r0
 8009934:	73fb      	strb	r3, [r7, #15]
  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8009936:	7bfb      	ldrb	r3, [r7, #15]
 8009938:	2bff      	cmp	r3, #255	@ 0xff
 800993a:	d002      	beq.n	8009942 <USBH_MTP_InterfaceInit+0x24>
 800993c:	7bfb      	ldrb	r3, [r7, #15]
 800993e:	2b09      	cmp	r3, #9
 8009940:	d901      	bls.n	8009946 <USBH_MTP_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Still Image Class.");
    return USBH_FAIL;
 8009942:	2302      	movs	r3, #2
 8009944:	e18e      	b.n	8009c64 <USBH_MTP_InterfaceInit+0x346>
  }

  (void)USBH_SelectInterface(phost, interface);
 8009946:	7bfb      	ldrb	r3, [r7, #15]
 8009948:	4619      	mov	r1, r3
 800994a:	6878      	ldr	r0, [r7, #4]
 800994c:	f001 ffa2 	bl	800b894 <USBH_SelectInterface>

  status = USBH_SelectInterface(phost, interface);
 8009950:	7bfb      	ldrb	r3, [r7, #15]
 8009952:	4619      	mov	r1, r3
 8009954:	6878      	ldr	r0, [r7, #4]
 8009956:	f001 ff9d 	bl	800b894 <USBH_SelectInterface>
 800995a:	4603      	mov	r3, r0
 800995c:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800995e:	7bbb      	ldrb	r3, [r7, #14]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d001      	beq.n	8009968 <USBH_MTP_InterfaceInit+0x4a>
  {
    return USBH_FAIL;
 8009964:	2302      	movs	r3, #2
 8009966:	e17d      	b.n	8009c64 <USBH_MTP_InterfaceInit+0x346>
  }

  endpoint = MTP_FindCtlEndpoint(phost);
 8009968:	6878      	ldr	r0, [r7, #4]
 800996a:	f000 f97f 	bl	8009c6c <MTP_FindCtlEndpoint>
 800996e:	4603      	mov	r3, r0
 8009970:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8009972:	7b7b      	ldrb	r3, [r7, #13]
 8009974:	2bff      	cmp	r3, #255	@ 0xff
 8009976:	d002      	beq.n	800997e <USBH_MTP_InterfaceInit+0x60>
 8009978:	7b7b      	ldrb	r3, [r7, #13]
 800997a:	2b04      	cmp	r3, #4
 800997c:	d901      	bls.n	8009982 <USBH_MTP_InterfaceInit+0x64>
  {
    USBH_DbgLog("Invalid Control endpoint number");
    return USBH_FAIL;
 800997e:	2302      	movs	r3, #2
 8009980:	e170      	b.n	8009c64 <USBH_MTP_InterfaceInit+0x346>
  }

  phost->pActiveClass->pData = (MTP_HandleTypeDef *)USBH_malloc(sizeof(MTP_HandleTypeDef));
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 454c 	ldr.w	r4, [r3, #1356]	@ 0x54c
 8009988:	f242 10d0 	movw	r0, #8656	@ 0x21d0
 800998c:	f004 f89e 	bl	800dacc <malloc>
 8009990:	4603      	mov	r3, r0
 8009992:	61e3      	str	r3, [r4, #28]
  MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800999a:	69db      	ldr	r3, [r3, #28]
 800999c:	60bb      	str	r3, [r7, #8]

  if (MTP_Handle == NULL)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d101      	bne.n	80099a8 <USBH_MTP_InterfaceInit+0x8a>
  {
    USBH_DbgLog("Cannot allocate memory for MTP Handle");
    return USBH_FAIL;
 80099a4:	2302      	movs	r3, #2
 80099a6:	e15d      	b.n	8009c64 <USBH_MTP_InterfaceInit+0x346>
  }

  /* Initialize mtp handler */
  (void)USBH_memset(MTP_Handle, 0, sizeof(MTP_HandleTypeDef));
 80099a8:	f242 12d0 	movw	r2, #8656	@ 0x21d0
 80099ac:	2100      	movs	r1, #0
 80099ae:	68b8      	ldr	r0, [r7, #8]
 80099b0:	f004 fb8a 	bl	800e0c8 <memset>

  /*Collect the control endpoint address and length*/
  MTP_Handle->NotificationEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 80099b4:	7bfb      	ldrb	r3, [r7, #15]
 80099b6:	7b79      	ldrb	r1, [r7, #13]
 80099b8:	687a      	ldr	r2, [r7, #4]
 80099ba:	3101      	adds	r1, #1
 80099bc:	00c9      	lsls	r1, r1, #3
 80099be:	2032      	movs	r0, #50	@ 0x32
 80099c0:	fb00 f303 	mul.w	r3, r0, r3
 80099c4:	440b      	add	r3, r1
 80099c6:	4413      	add	r3, r2
 80099c8:	f203 3346 	addw	r3, r3, #838	@ 0x346
 80099cc:	781a      	ldrb	r2, [r3, #0]
 80099ce:	68bb      	ldr	r3, [r7, #8]
 80099d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099d4:	f883 2d31 	strb.w	r2, [r3, #3377]	@ 0xd31
  MTP_Handle->NotificationEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 80099d8:	7bfb      	ldrb	r3, [r7, #15]
 80099da:	7b79      	ldrb	r1, [r7, #13]
 80099dc:	687a      	ldr	r2, [r7, #4]
 80099de:	3101      	adds	r1, #1
 80099e0:	00c9      	lsls	r1, r1, #3
 80099e2:	2032      	movs	r0, #50	@ 0x32
 80099e4:	fb00 f303 	mul.w	r3, r0, r3
 80099e8:	440b      	add	r3, r1
 80099ea:	4413      	add	r3, r2
 80099ec:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	68bb      	ldr	r3, [r7, #8]
 80099f4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80099f8:	f8a3 2d36 	strh.w	r2, [r3, #3382]	@ 0xd36
  MTP_Handle->NotificationPipe = USBH_AllocPipe(phost, MTP_Handle->NotificationEp);
 80099fc:	68bb      	ldr	r3, [r7, #8]
 80099fe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a02:	f893 3d31 	ldrb.w	r3, [r3, #3377]	@ 0xd31
 8009a06:	4619      	mov	r1, r3
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f003 fb84 	bl	800d116 <USBH_AllocPipe>
 8009a0e:	4603      	mov	r3, r0
 8009a10:	461a      	mov	r2, r3
 8009a12:	68bb      	ldr	r3, [r7, #8]
 8009a14:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a18:	f883 2d2e 	strb.w	r2, [r3, #3374]	@ 0xd2e
  MTP_Handle->events.poll = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bInterval;
 8009a1c:	7bfb      	ldrb	r3, [r7, #15]
 8009a1e:	7b79      	ldrb	r1, [r7, #13]
 8009a20:	687a      	ldr	r2, [r7, #4]
 8009a22:	3101      	adds	r1, #1
 8009a24:	00c9      	lsls	r1, r1, #3
 8009a26:	2032      	movs	r0, #50	@ 0x32
 8009a28:	fb00 f303 	mul.w	r3, r0, r3
 8009a2c:	440b      	add	r3, r1
 8009a2e:	4413      	add	r3, r2
 8009a30:	f203 334a 	addw	r3, r3, #842	@ 0x34a
 8009a34:	781b      	ldrb	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	68bb      	ldr	r3, [r7, #8]
 8009a3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a3e:	f8a3 2d44 	strh.w	r2, [r3, #3396]	@ 0xd44

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->NotificationPipe, MTP_Handle->NotificationEp,
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a48:	f893 1d2e 	ldrb.w	r1, [r3, #3374]	@ 0xd2e
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a52:	f893 0d31 	ldrb.w	r0, [r3, #3377]	@ 0xd31
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009a62:	68ba      	ldr	r2, [r7, #8]
 8009a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009a68:	f8b2 2d36 	ldrh.w	r2, [r2, #3382]	@ 0xd36
 8009a6c:	9202      	str	r2, [sp, #8]
 8009a6e:	2203      	movs	r2, #3
 8009a70:	9201      	str	r2, [sp, #4]
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	4623      	mov	r3, r4
 8009a76:	4602      	mov	r2, r0
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	f003 fb1d 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      MTP_Handle->NotificationEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->NotificationPipe, 0U);
 8009a7e:	68bb      	ldr	r3, [r7, #8]
 8009a80:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a84:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8009a88:	2200      	movs	r2, #0
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f003 ff63 	bl	800d958 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataInEndpoint(phost);
 8009a92:	6878      	ldr	r0, [r7, #4]
 8009a94:	f000 f99e 	bl	8009dd4 <MTP_FindDataInEndpoint>
 8009a98:	4603      	mov	r3, r0
 8009a9a:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8009a9c:	7b7b      	ldrb	r3, [r7, #13]
 8009a9e:	2bff      	cmp	r3, #255	@ 0xff
 8009aa0:	d002      	beq.n	8009aa8 <USBH_MTP_InterfaceInit+0x18a>
 8009aa2:	7b7b      	ldrb	r3, [r7, #13]
 8009aa4:	2b04      	cmp	r3, #4
 8009aa6:	d901      	bls.n	8009aac <USBH_MTP_InterfaceInit+0x18e>
  {
    USBH_DbgLog("Invalid Data IN endpoint number");
    return USBH_FAIL;
 8009aa8:	2302      	movs	r3, #2
 8009aaa:	e0db      	b.n	8009c64 <USBH_MTP_InterfaceInit+0x346>
  }

  /*Collect the control endpoint address and length*/
  MTP_Handle->DataInEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8009aac:	7bfb      	ldrb	r3, [r7, #15]
 8009aae:	7b79      	ldrb	r1, [r7, #13]
 8009ab0:	687a      	ldr	r2, [r7, #4]
 8009ab2:	3101      	adds	r1, #1
 8009ab4:	00c9      	lsls	r1, r1, #3
 8009ab6:	2032      	movs	r0, #50	@ 0x32
 8009ab8:	fb00 f303 	mul.w	r3, r0, r3
 8009abc:	440b      	add	r3, r1
 8009abe:	4413      	add	r3, r2
 8009ac0:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009ac4:	781a      	ldrb	r2, [r3, #0]
 8009ac6:	68bb      	ldr	r3, [r7, #8]
 8009ac8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009acc:	f883 2d30 	strb.w	r2, [r3, #3376]	@ 0xd30
  MTP_Handle->DataInEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8009ad0:	7bfb      	ldrb	r3, [r7, #15]
 8009ad2:	7b79      	ldrb	r1, [r7, #13]
 8009ad4:	687a      	ldr	r2, [r7, #4]
 8009ad6:	3101      	adds	r1, #1
 8009ad8:	00c9      	lsls	r1, r1, #3
 8009ada:	2032      	movs	r0, #50	@ 0x32
 8009adc:	fb00 f303 	mul.w	r3, r0, r3
 8009ae0:	440b      	add	r3, r1
 8009ae2:	4413      	add	r3, r2
 8009ae4:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009ae8:	881a      	ldrh	r2, [r3, #0]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009af0:	f8a3 2d34 	strh.w	r2, [r3, #3380]	@ 0xd34
  MTP_Handle->DataInPipe = USBH_AllocPipe(phost, MTP_Handle->DataInEp);
 8009af4:	68bb      	ldr	r3, [r7, #8]
 8009af6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009afa:	f893 3d30 	ldrb.w	r3, [r3, #3376]	@ 0xd30
 8009afe:	4619      	mov	r1, r3
 8009b00:	6878      	ldr	r0, [r7, #4]
 8009b02:	f003 fb08 	bl	800d116 <USBH_AllocPipe>
 8009b06:	4603      	mov	r3, r0
 8009b08:	461a      	mov	r2, r3
 8009b0a:	68bb      	ldr	r3, [r7, #8]
 8009b0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b10:	f883 2d2c 	strb.w	r2, [r3, #3372]	@ 0xd2c

  /* Open pipe for DATA IN endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataInPipe, MTP_Handle->DataInEp,
 8009b14:	68bb      	ldr	r3, [r7, #8]
 8009b16:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b1a:	f893 1d2c 	ldrb.w	r1, [r3, #3372]	@ 0xd2c
 8009b1e:	68bb      	ldr	r3, [r7, #8]
 8009b20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b24:	f893 0d30 	ldrb.w	r0, [r3, #3376]	@ 0xd30
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009b34:	68ba      	ldr	r2, [r7, #8]
 8009b36:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009b3a:	f8b2 2d34 	ldrh.w	r2, [r2, #3380]	@ 0xd34
 8009b3e:	9202      	str	r2, [sp, #8]
 8009b40:	2202      	movs	r2, #2
 8009b42:	9201      	str	r2, [sp, #4]
 8009b44:	9300      	str	r3, [sp, #0]
 8009b46:	4623      	mov	r3, r4
 8009b48:	4602      	mov	r2, r0
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f003 fab4 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataInEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataInPipe, 0U);
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b56:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	4619      	mov	r1, r3
 8009b5e:	6878      	ldr	r0, [r7, #4]
 8009b60:	f003 fefa 	bl	800d958 <USBH_LL_SetToggle>

  endpoint = MTP_FindDataOutEndpoint(phost);
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f000 f8db 	bl	8009d20 <MTP_FindDataOutEndpoint>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	737b      	strb	r3, [r7, #13]
  if ((endpoint == 0xFFU) || (endpoint >= USBH_MAX_NUM_ENDPOINTS))
 8009b6e:	7b7b      	ldrb	r3, [r7, #13]
 8009b70:	2bff      	cmp	r3, #255	@ 0xff
 8009b72:	d002      	beq.n	8009b7a <USBH_MTP_InterfaceInit+0x25c>
 8009b74:	7b7b      	ldrb	r3, [r7, #13]
 8009b76:	2b04      	cmp	r3, #4
 8009b78:	d901      	bls.n	8009b7e <USBH_MTP_InterfaceInit+0x260>
  {
    USBH_DbgLog("Invalid Data OUT endpoint number");
    return USBH_FAIL;
 8009b7a:	2302      	movs	r3, #2
 8009b7c:	e072      	b.n	8009c64 <USBH_MTP_InterfaceInit+0x346>
  }

  /*Collect the DATA OUT endpoint address and length*/
  MTP_Handle->DataOutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress;
 8009b7e:	7bfb      	ldrb	r3, [r7, #15]
 8009b80:	7b79      	ldrb	r1, [r7, #13]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	3101      	adds	r1, #1
 8009b86:	00c9      	lsls	r1, r1, #3
 8009b88:	2032      	movs	r0, #50	@ 0x32
 8009b8a:	fb00 f303 	mul.w	r3, r0, r3
 8009b8e:	440b      	add	r3, r1
 8009b90:	4413      	add	r3, r2
 8009b92:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009b96:	781a      	ldrb	r2, [r3, #0]
 8009b98:	68bb      	ldr	r3, [r7, #8]
 8009b9a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b9e:	f883 2d2f 	strb.w	r2, [r3, #3375]	@ 0xd2f
  MTP_Handle->DataOutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize;
 8009ba2:	7bfb      	ldrb	r3, [r7, #15]
 8009ba4:	7b79      	ldrb	r1, [r7, #13]
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	3101      	adds	r1, #1
 8009baa:	00c9      	lsls	r1, r1, #3
 8009bac:	2032      	movs	r0, #50	@ 0x32
 8009bae:	fb00 f303 	mul.w	r3, r0, r3
 8009bb2:	440b      	add	r3, r1
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009bba:	881a      	ldrh	r2, [r3, #0]
 8009bbc:	68bb      	ldr	r3, [r7, #8]
 8009bbe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bc2:	f8a3 2d32 	strh.w	r2, [r3, #3378]	@ 0xd32
  MTP_Handle->DataOutPipe = USBH_AllocPipe(phost, MTP_Handle->DataOutEp);
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bcc:	f893 3d2f 	ldrb.w	r3, [r3, #3375]	@ 0xd2f
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	6878      	ldr	r0, [r7, #4]
 8009bd4:	f003 fa9f 	bl	800d116 <USBH_AllocPipe>
 8009bd8:	4603      	mov	r3, r0
 8009bda:	461a      	mov	r2, r3
 8009bdc:	68bb      	ldr	r3, [r7, #8]
 8009bde:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009be2:	f883 2d2d 	strb.w	r2, [r3, #3373]	@ 0xd2d

  /* Open pipe for DATA OUT endpoint */
  (void)USBH_OpenPipe(phost, MTP_Handle->DataOutPipe, MTP_Handle->DataOutEp,
 8009be6:	68bb      	ldr	r3, [r7, #8]
 8009be8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bec:	f893 1d2d 	ldrb.w	r1, [r3, #3373]	@ 0xd2d
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009bf6:	f893 0d2f 	ldrb.w	r0, [r3, #3375]	@ 0xd2f
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c06:	68ba      	ldr	r2, [r7, #8]
 8009c08:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8009c0c:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 8009c10:	9202      	str	r2, [sp, #8]
 8009c12:	2202      	movs	r2, #2
 8009c14:	9201      	str	r2, [sp, #4]
 8009c16:	9300      	str	r3, [sp, #0]
 8009c18:	4623      	mov	r3, r4
 8009c1a:	4602      	mov	r2, r0
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f003 fa4b 	bl	800d0b8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      MTP_Handle->DataOutEpSize);

  (void)USBH_LL_SetToggle(phost, MTP_Handle->DataOutPipe, 0U);
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c28:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	4619      	mov	r1, r3
 8009c30:	6878      	ldr	r0, [r7, #4]
 8009c32:	f003 fe91 	bl	800d958 <USBH_LL_SetToggle>

  MTP_Handle->state = MTP_OPENSESSION;
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c3c:	2202      	movs	r2, #2
 8009c3e:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
  MTP_Handle->is_ready = 0U;
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 8009c48:	461a      	mov	r2, r3
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
  MTP_Handle->events.state = MTP_EVENTS_INIT;
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2d3c 	strb.w	r2, [r3, #3388]	@ 0xd3c

  return USBH_PTP_Init(phost);
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 fb53 	bl	800a308 <USBH_PTP_Init>
 8009c62:	4603      	mov	r3, r0
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	bd90      	pop	{r4, r7, pc}

08009c6c <MTP_FindCtlEndpoint>:
  * @brief  Find MTP Ctl interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindCtlEndpoint(USBH_HandleTypeDef *phost)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8009c74:	2300      	movs	r3, #0
 8009c76:	73fb      	strb	r3, [r7, #15]
 8009c78:	e048      	b.n	8009d0c <MTP_FindCtlEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8009c7a:	7bfb      	ldrb	r3, [r7, #15]
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	2132      	movs	r1, #50	@ 0x32
 8009c80:	fb01 f303 	mul.w	r3, r1, r3
 8009c84:	4413      	add	r3, r2
 8009c86:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	2b06      	cmp	r3, #6
 8009c8e:	d13a      	bne.n	8009d06 <MTP_FindCtlEndpoint+0x9a>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8009c90:	2300      	movs	r3, #0
 8009c92:	73bb      	strb	r3, [r7, #14]
 8009c94:	e034      	b.n	8009d00 <MTP_FindCtlEndpoint+0x94>
      {
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8009c96:	7bfb      	ldrb	r3, [r7, #15]
 8009c98:	7bb9      	ldrb	r1, [r7, #14]
 8009c9a:	687a      	ldr	r2, [r7, #4]
 8009c9c:	3101      	adds	r1, #1
 8009c9e:	00c9      	lsls	r1, r1, #3
 8009ca0:	2032      	movs	r0, #50	@ 0x32
 8009ca2:	fb00 f303 	mul.w	r3, r0, r3
 8009ca6:	440b      	add	r3, r1
 8009ca8:	4413      	add	r3, r2
 8009caa:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009cae:	781b      	ldrb	r3, [r3, #0]
 8009cb0:	b25b      	sxtb	r3, r3
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	da21      	bge.n	8009cfa <MTP_FindCtlEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8009cb6:	7bfb      	ldrb	r3, [r7, #15]
 8009cb8:	7bb9      	ldrb	r1, [r7, #14]
 8009cba:	687a      	ldr	r2, [r7, #4]
 8009cbc:	3101      	adds	r1, #1
 8009cbe:	00c9      	lsls	r1, r1, #3
 8009cc0:	2032      	movs	r0, #50	@ 0x32
 8009cc2:	fb00 f303 	mul.w	r3, r0, r3
 8009cc6:	440b      	add	r3, r1
 8009cc8:	4413      	add	r3, r2
 8009cca:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009cce:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d012      	beq.n	8009cfa <MTP_FindCtlEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_INTERRUPT) == USBH_EP_INTERRUPT))
 8009cd4:	7bfb      	ldrb	r3, [r7, #15]
 8009cd6:	7bb9      	ldrb	r1, [r7, #14]
 8009cd8:	687a      	ldr	r2, [r7, #4]
 8009cda:	3101      	adds	r1, #1
 8009cdc:	00c9      	lsls	r1, r1, #3
 8009cde:	2032      	movs	r0, #50	@ 0x32
 8009ce0:	fb00 f303 	mul.w	r3, r0, r3
 8009ce4:	440b      	add	r3, r1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009cec:	781b      	ldrb	r3, [r3, #0]
 8009cee:	f003 0303 	and.w	r3, r3, #3
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d101      	bne.n	8009cfa <MTP_FindCtlEndpoint+0x8e>
        {
          return endpoint;
 8009cf6:	7bbb      	ldrb	r3, [r7, #14]
 8009cf8:	e00c      	b.n	8009d14 <MTP_FindCtlEndpoint+0xa8>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	3301      	adds	r3, #1
 8009cfe:	73bb      	strb	r3, [r7, #14]
 8009d00:	7bbb      	ldrb	r3, [r7, #14]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	d9c7      	bls.n	8009c96 <MTP_FindCtlEndpoint+0x2a>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8009d06:	7bfb      	ldrb	r3, [r7, #15]
 8009d08:	3301      	adds	r3, #1
 8009d0a:	73fb      	strb	r3, [r7, #15]
 8009d0c:	7bfb      	ldrb	r3, [r7, #15]
 8009d0e:	2b09      	cmp	r3, #9
 8009d10:	d9b3      	bls.n	8009c7a <MTP_FindCtlEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8009d12:	23ff      	movs	r3, #255	@ 0xff
}
 8009d14:	4618      	mov	r0, r3
 8009d16:	3714      	adds	r7, #20
 8009d18:	46bd      	mov	sp, r7
 8009d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1e:	4770      	bx	lr

08009d20 <MTP_FindDataOutEndpoint>:
  * @brief  Find MTP DATA OUT interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataOutEndpoint(USBH_HandleTypeDef *phost)
{
 8009d20:	b480      	push	{r7}
 8009d22:	b085      	sub	sp, #20
 8009d24:	af00      	add	r7, sp, #0
 8009d26:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8009d28:	2300      	movs	r3, #0
 8009d2a:	73fb      	strb	r3, [r7, #15]
 8009d2c:	e048      	b.n	8009dc0 <MTP_FindDataOutEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8009d2e:	7bfb      	ldrb	r3, [r7, #15]
 8009d30:	687a      	ldr	r2, [r7, #4]
 8009d32:	2132      	movs	r1, #50	@ 0x32
 8009d34:	fb01 f303 	mul.w	r3, r1, r3
 8009d38:	4413      	add	r3, r2
 8009d3a:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009d3e:	781b      	ldrb	r3, [r3, #0]
 8009d40:	2b06      	cmp	r3, #6
 8009d42:	d13a      	bne.n	8009dba <MTP_FindDataOutEndpoint+0x9a>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8009d44:	2300      	movs	r3, #0
 8009d46:	73bb      	strb	r3, [r7, #14]
 8009d48:	e034      	b.n	8009db4 <MTP_FindDataOutEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8009d4a:	7bfb      	ldrb	r3, [r7, #15]
 8009d4c:	7bb9      	ldrb	r1, [r7, #14]
 8009d4e:	687a      	ldr	r2, [r7, #4]
 8009d50:	3101      	adds	r1, #1
 8009d52:	00c9      	lsls	r1, r1, #3
 8009d54:	2032      	movs	r0, #50	@ 0x32
 8009d56:	fb00 f303 	mul.w	r3, r0, r3
 8009d5a:	440b      	add	r3, r1
 8009d5c:	4413      	add	r3, r2
 8009d5e:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	b25b      	sxtb	r3, r3
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	db21      	blt.n	8009dae <MTP_FindDataOutEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8009d6a:	7bfb      	ldrb	r3, [r7, #15]
 8009d6c:	7bb9      	ldrb	r1, [r7, #14]
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	3101      	adds	r1, #1
 8009d72:	00c9      	lsls	r1, r1, #3
 8009d74:	2032      	movs	r0, #50	@ 0x32
 8009d76:	fb00 f303 	mul.w	r3, r0, r3
 8009d7a:	440b      	add	r3, r1
 8009d7c:	4413      	add	r3, r2
 8009d7e:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009d82:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) == 0U) &&
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d012      	beq.n	8009dae <MTP_FindDataOutEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8009d88:	7bfb      	ldrb	r3, [r7, #15]
 8009d8a:	7bb9      	ldrb	r1, [r7, #14]
 8009d8c:	687a      	ldr	r2, [r7, #4]
 8009d8e:	3101      	adds	r1, #1
 8009d90:	00c9      	lsls	r1, r1, #3
 8009d92:	2032      	movs	r0, #50	@ 0x32
 8009d94:	fb00 f303 	mul.w	r3, r0, r3
 8009d98:	440b      	add	r3, r1
 8009d9a:	4413      	add	r3, r2
 8009d9c:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <MTP_FindDataOutEndpoint+0x8e>
        {
          return endpoint;
 8009daa:	7bbb      	ldrb	r3, [r7, #14]
 8009dac:	e00c      	b.n	8009dc8 <MTP_FindDataOutEndpoint+0xa8>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8009dae:	7bbb      	ldrb	r3, [r7, #14]
 8009db0:	3301      	adds	r3, #1
 8009db2:	73bb      	strb	r3, [r7, #14]
 8009db4:	7bbb      	ldrb	r3, [r7, #14]
 8009db6:	2b04      	cmp	r3, #4
 8009db8:	d9c7      	bls.n	8009d4a <MTP_FindDataOutEndpoint+0x2a>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8009dba:	7bfb      	ldrb	r3, [r7, #15]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	73fb      	strb	r3, [r7, #15]
 8009dc0:	7bfb      	ldrb	r3, [r7, #15]
 8009dc2:	2b09      	cmp	r3, #9
 8009dc4:	d9b3      	bls.n	8009d2e <MTP_FindDataOutEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8009dc6:	23ff      	movs	r3, #255	@ 0xff
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3714      	adds	r7, #20
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd2:	4770      	bx	lr

08009dd4 <MTP_FindDataInEndpoint>:
  * @brief  Find MTP DATA IN interface
  * @param  phost: Host handle
  * @retval USBH Status
  */
static uint8_t MTP_FindDataInEndpoint(USBH_HandleTypeDef *phost)
{
 8009dd4:	b480      	push	{r7}
 8009dd6:	b085      	sub	sp, #20
 8009dd8:	af00      	add	r7, sp, #0
 8009dda:	6078      	str	r0, [r7, #4]
  uint8_t interface, endpoint;

  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	73fb      	strb	r3, [r7, #15]
 8009de0:	e048      	b.n	8009e74 <MTP_FindDataInEndpoint+0xa0>
  {
    if (phost->device.CfgDesc.Itf_Desc[interface].bInterfaceClass == USB_MTP_CLASS)
 8009de2:	7bfb      	ldrb	r3, [r7, #15]
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	2132      	movs	r1, #50	@ 0x32
 8009de8:	fb01 f303 	mul.w	r3, r1, r3
 8009dec:	4413      	add	r3, r2
 8009dee:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	2b06      	cmp	r3, #6
 8009df6:	d13a      	bne.n	8009e6e <MTP_FindDataInEndpoint+0x9a>
    {
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8009df8:	2300      	movs	r3, #0
 8009dfa:	73bb      	strb	r3, [r7, #14]
 8009dfc:	e034      	b.n	8009e68 <MTP_FindDataInEndpoint+0x94>
      {

        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8009dfe:	7bfb      	ldrb	r3, [r7, #15]
 8009e00:	7bb9      	ldrb	r1, [r7, #14]
 8009e02:	687a      	ldr	r2, [r7, #4]
 8009e04:	3101      	adds	r1, #1
 8009e06:	00c9      	lsls	r1, r1, #3
 8009e08:	2032      	movs	r0, #50	@ 0x32
 8009e0a:	fb00 f303 	mul.w	r3, r0, r3
 8009e0e:	440b      	add	r3, r1
 8009e10:	4413      	add	r3, r2
 8009e12:	f203 3346 	addw	r3, r3, #838	@ 0x346
 8009e16:	781b      	ldrb	r3, [r3, #0]
 8009e18:	b25b      	sxtb	r3, r3
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	da21      	bge.n	8009e62 <MTP_FindDataInEndpoint+0x8e>
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8009e1e:	7bfb      	ldrb	r3, [r7, #15]
 8009e20:	7bb9      	ldrb	r1, [r7, #14]
 8009e22:	687a      	ldr	r2, [r7, #4]
 8009e24:	3101      	adds	r1, #1
 8009e26:	00c9      	lsls	r1, r1, #3
 8009e28:	2032      	movs	r0, #50	@ 0x32
 8009e2a:	fb00 f303 	mul.w	r3, r0, r3
 8009e2e:	440b      	add	r3, r1
 8009e30:	4413      	add	r3, r2
 8009e32:	f503 7352 	add.w	r3, r3, #840	@ 0x348
 8009e36:	881b      	ldrh	r3, [r3, #0]
        if (((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bEndpointAddress & 0x80U) != 0U) &&
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d012      	beq.n	8009e62 <MTP_FindDataInEndpoint+0x8e>
            ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].bmAttributes & USBH_EP_BULK) == USBH_EP_BULK))
 8009e3c:	7bfb      	ldrb	r3, [r7, #15]
 8009e3e:	7bb9      	ldrb	r1, [r7, #14]
 8009e40:	687a      	ldr	r2, [r7, #4]
 8009e42:	3101      	adds	r1, #1
 8009e44:	00c9      	lsls	r1, r1, #3
 8009e46:	2032      	movs	r0, #50	@ 0x32
 8009e48:	fb00 f303 	mul.w	r3, r0, r3
 8009e4c:	440b      	add	r3, r1
 8009e4e:	4413      	add	r3, r2
 8009e50:	f203 3347 	addw	r3, r3, #839	@ 0x347
 8009e54:	781b      	ldrb	r3, [r3, #0]
 8009e56:	f003 0302 	and.w	r3, r3, #2
            (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[endpoint].wMaxPacketSize > 0U) &&
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d001      	beq.n	8009e62 <MTP_FindDataInEndpoint+0x8e>
        {
          return endpoint;
 8009e5e:	7bbb      	ldrb	r3, [r7, #14]
 8009e60:	e00c      	b.n	8009e7c <MTP_FindDataInEndpoint+0xa8>
      for (endpoint = 0U; endpoint < USBH_MAX_NUM_ENDPOINTS; endpoint ++)
 8009e62:	7bbb      	ldrb	r3, [r7, #14]
 8009e64:	3301      	adds	r3, #1
 8009e66:	73bb      	strb	r3, [r7, #14]
 8009e68:	7bbb      	ldrb	r3, [r7, #14]
 8009e6a:	2b04      	cmp	r3, #4
 8009e6c:	d9c7      	bls.n	8009dfe <MTP_FindDataInEndpoint+0x2a>
  for (interface = 0U; interface < USBH_MAX_NUM_INTERFACES; interface ++)
 8009e6e:	7bfb      	ldrb	r3, [r7, #15]
 8009e70:	3301      	adds	r3, #1
 8009e72:	73fb      	strb	r3, [r7, #15]
 8009e74:	7bfb      	ldrb	r3, [r7, #15]
 8009e76:	2b09      	cmp	r3, #9
 8009e78:	d9b3      	bls.n	8009de2 <MTP_FindDataInEndpoint+0xe>
        }
      }
    }
  }

  return 0xFFU; /* Invalid Endpoint */
 8009e7a:	23ff      	movs	r3, #255	@ 0xff
}
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	3714      	adds	r7, #20
 8009e80:	46bd      	mov	sp, r7
 8009e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e86:	4770      	bx	lr

08009e88 <USBH_MTP_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009e88:	b580      	push	{r7, lr}
 8009e8a:	b084      	sub	sp, #16
 8009e8c:	af00      	add	r7, sp, #0
 8009e8e:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009e96:	69db      	ldr	r3, [r3, #28]
 8009e98:	60fb      	str	r3, [r7, #12]

  if (MTP_Handle->DataOutPipe != 0U)
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ea0:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d017      	beq.n	8009ed8 <USBH_MTP_InterfaceDeInit+0x50>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataOutPipe);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eae:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8009eb2:	4619      	mov	r1, r3
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f003 f91e 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataOutPipe);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ec0:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 8009ec4:	4619      	mov	r1, r3
 8009ec6:	6878      	ldr	r0, [r7, #4]
 8009ec8:	f003 f947 	bl	800d15a <USBH_FreePipe>
    MTP_Handle->DataOutPipe = 0U;     /* Reset the Channel as Free */
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ed2:	2200      	movs	r2, #0
 8009ed4:	f883 2d2d 	strb.w	r2, [r3, #3373]	@ 0xd2d
  }

  if (MTP_Handle->DataInPipe != 0U)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ede:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d017      	beq.n	8009f16 <USBH_MTP_InterfaceDeInit+0x8e>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->DataInPipe);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009eec:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 8009ef0:	4619      	mov	r1, r3
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f003 f8ff 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->DataInPipe);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009efe:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 8009f02:	4619      	mov	r1, r3
 8009f04:	6878      	ldr	r0, [r7, #4]
 8009f06:	f003 f928 	bl	800d15a <USBH_FreePipe>
    MTP_Handle->DataInPipe = 0U;     /* Reset the Channel as Free */
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f10:	2200      	movs	r2, #0
 8009f12:	f883 2d2c 	strb.w	r2, [r3, #3372]	@ 0xd2c
  }

  if (MTP_Handle->NotificationPipe != 0U)
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f1c:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d017      	beq.n	8009f54 <USBH_MTP_InterfaceDeInit+0xcc>
  {
    (void)USBH_ClosePipe(phost, MTP_Handle->NotificationPipe);
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f2a:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8009f2e:	4619      	mov	r1, r3
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f003 f8e0 	bl	800d0f6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MTP_Handle->NotificationPipe);
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f3c:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 8009f40:	4619      	mov	r1, r3
 8009f42:	6878      	ldr	r0, [r7, #4]
 8009f44:	f003 f909 	bl	800d15a <USBH_FreePipe>
    MTP_Handle->NotificationPipe = 0U;     /* Reset the Channel as Free */
 8009f48:	68fb      	ldr	r3, [r7, #12]
 8009f4a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009f4e:	2200      	movs	r2, #0
 8009f50:	f883 2d2e 	strb.w	r2, [r3, #3374]	@ 0xd2e
  }

  if (phost->pActiveClass->pData != NULL)
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009f5a:	69db      	ldr	r3, [r3, #28]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <USBH_MTP_InterfaceDeInit+0xf0>
  {
    USBH_free(phost->pActiveClass->pData);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009f66:	69db      	ldr	r3, [r3, #28]
 8009f68:	4618      	mov	r0, r3
 8009f6a:	f003 fdb7 	bl	800dadc <free>
    phost->pActiveClass->pData = 0U;
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009f74:	2200      	movs	r2, #0
 8009f76:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009f78:	2300      	movs	r3, #0
}
 8009f7a:	4618      	mov	r0, r3
 8009f7c:	3710      	adds	r7, #16
 8009f7e:	46bd      	mov	sp, r7
 8009f80:	bd80      	pop	{r7, pc}

08009f82 <USBH_MTP_ClassRequest>:
  *         for MTP class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_ClassRequest(USBH_HandleTypeDef *phost)
{
 8009f82:	b480      	push	{r7}
 8009f84:	b083      	sub	sp, #12
 8009f86:	af00      	add	r7, sp, #0
 8009f88:	6078      	str	r0, [r7, #4]
#else
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
#endif

  return USBH_OK;
 8009f8a:	2300      	movs	r3, #0
}
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	370c      	adds	r7, #12
 8009f90:	46bd      	mov	sp, r7
 8009f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f96:	4770      	bx	lr

08009f98 <USBH_MTP_Process>:
  *         The function is for managing state machine for MTP data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Process(USBH_HandleTypeDef *phost)
{
 8009f98:	b580      	push	{r7, lr}
 8009f9a:	b086      	sub	sp, #24
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009fa0:	2301      	movs	r3, #1
 8009fa2:	75fb      	strb	r3, [r7, #23]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 8009faa:	69db      	ldr	r3, [r3, #28]
 8009fac:	60fb      	str	r3, [r7, #12]
  uint32_t idx = 0U;
 8009fae:	2300      	movs	r3, #0
 8009fb0:	613b      	str	r3, [r7, #16]

  switch (MTP_Handle->state)
 8009fb2:	68fb      	ldr	r3, [r7, #12]
 8009fb4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009fb8:	f893 3d38 	ldrb.w	r3, [r3, #3384]	@ 0xd38
 8009fbc:	2b05      	cmp	r3, #5
 8009fbe:	f200 80b7 	bhi.w	800a130 <USBH_MTP_Process+0x198>
 8009fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8009fc8 <USBH_MTP_Process+0x30>)
 8009fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fc8:	0800a125 	.word	0x0800a125
 8009fcc:	0800a003 	.word	0x0800a003
 8009fd0:	08009fe1 	.word	0x08009fe1
 8009fd4:	0800a131 	.word	0x0800a131
 8009fd8:	0800a027 	.word	0x0800a027
 8009fdc:	0800a073 	.word	0x0800a073
  {
    case  MTP_OPENSESSION:
      status = USBH_PTP_OpenSession(phost, 1U);  /* Session '0' is not valid */
 8009fe0:	2101      	movs	r1, #1
 8009fe2:	6878      	ldr	r0, [r7, #4]
 8009fe4:	f001 f996 	bl	800b314 <USBH_PTP_OpenSession>
 8009fe8:	4603      	mov	r3, r0
 8009fea:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 8009fec:	7dfb      	ldrb	r3, [r7, #23]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f040 80a0 	bne.w	800a134 <USBH_MTP_Process+0x19c>
      {
        USBH_UsrLog("MTP Session #0 Opened");
        MTP_Handle->state = MTP_GETDEVICEINFO;
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009ffa:	2201      	movs	r2, #1
 8009ffc:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a000:	e098      	b.n	800a134 <USBH_MTP_Process+0x19c>

    case MTP_GETDEVICEINFO:
      status = USBH_PTP_GetDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800a002:	68fb      	ldr	r3, [r7, #12]
 800a004:	4619      	mov	r1, r3
 800a006:	6878      	ldr	r0, [r7, #4]
 800a008:	f001 f9e9 	bl	800b3de <USBH_PTP_GetDeviceInfo>
 800a00c:	4603      	mov	r3, r0
 800a00e:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a010:	7dfb      	ldrb	r3, [r7, #23]
 800a012:	2b00      	cmp	r3, #0
 800a014:	f040 8090 	bne.w	800a138 <USBH_MTP_Process+0x1a0>
        USBH_DbgLog("Manufacturer : %s", MTP_Handle->info.devinfo.Manufacturer);
        USBH_DbgLog("Model : %s", MTP_Handle->info.devinfo.Model);
        USBH_DbgLog("Device version : %s", MTP_Handle->info.devinfo.DeviceVersion);
        USBH_DbgLog("Serial number : %s", MTP_Handle->info.devinfo.SerialNumber);

        MTP_Handle->state = MTP_GETSTORAGEIDS;
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a01e:	2204      	movs	r2, #4
 800a020:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a024:	e088      	b.n	800a138 <USBH_MTP_Process+0x1a0>

    case MTP_GETSTORAGEIDS:
      status = USBH_PTP_GetStorageIds(phost, &(MTP_Handle->info.storids));
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	f603 1304 	addw	r3, r3, #2308	@ 0x904
 800a02c:	4619      	mov	r1, r3
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f001 fa54 	bl	800b4dc <USBH_PTP_GetStorageIds>
 800a034:	4603      	mov	r3, r0
 800a036:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a038:	7dfb      	ldrb	r3, [r7, #23]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d17e      	bne.n	800a13c <USBH_MTP_Process+0x1a4>
      {
        USBH_DbgLog("Number of storage ID items : %d", MTP_Handle->info.storids.n);
        for (idx = 0U; idx < MTP_Handle->info.storids.n; idx ++)
 800a03e:	2300      	movs	r3, #0
 800a040:	613b      	str	r3, [r7, #16]
 800a042:	e002      	b.n	800a04a <USBH_MTP_Process+0xb2>
 800a044:	693b      	ldr	r3, [r7, #16]
 800a046:	3301      	adds	r3, #1
 800a048:	613b      	str	r3, [r7, #16]
 800a04a:	68fb      	ldr	r3, [r7, #12]
 800a04c:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	429a      	cmp	r2, r3
 800a054:	d3f6      	bcc.n	800a044 <USBH_MTP_Process+0xac>
        {
          USBH_DbgLog("storage#%d ID : %x", idx, MTP_Handle->info.storids.Storage[idx]);
        }

        MTP_Handle->current_storage_unit = 0U;
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a05c:	461a      	mov	r2, r3
 800a05e:	2300      	movs	r3, #0
 800a060:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
        MTP_Handle->state = MTP_GETSTORAGEINFO;
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a06a:	2205      	movs	r2, #5
 800a06c:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a070:	e064      	b.n	800a13c <USBH_MTP_Process+0x1a4>

    case MTP_GETSTORAGEINFO:
      status = USBH_PTP_GetStorageInfo(phost,
                                       MTP_Handle->info.storids.Storage[MTP_Handle->current_storage_unit],
 800a072:	68fb      	ldr	r3, [r7, #12]
 800a074:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a078:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800a07c:	68fa      	ldr	r2, [r7, #12]
 800a07e:	f503 7310 	add.w	r3, r3, #576	@ 0x240
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	4413      	add	r3, r2
 800a086:	6899      	ldr	r1, [r3, #8]
                                       &((MTP_Handle->info.storinfo)[MTP_Handle->current_storage_unit]));
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a08e:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
      status = USBH_PTP_GetStorageInfo(phost,
 800a092:	4613      	mov	r3, r2
 800a094:	011b      	lsls	r3, r3, #4
 800a096:	4413      	add	r3, r2
 800a098:	015b      	lsls	r3, r3, #5
 800a09a:	f503 6312 	add.w	r3, r3, #2336	@ 0x920
 800a09e:	68fa      	ldr	r2, [r7, #12]
 800a0a0:	4413      	add	r3, r2
 800a0a2:	461a      	mov	r2, r3
 800a0a4:	6878      	ldr	r0, [r7, #4]
 800a0a6:	f001 fa98 	bl	800b5da <USBH_PTP_GetStorageInfo>
 800a0aa:	4603      	mov	r3, r0
 800a0ac:	75fb      	strb	r3, [r7, #23]

      if (status == USBH_OK)
 800a0ae:	7dfb      	ldrb	r3, [r7, #23]
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	d145      	bne.n	800a140 <USBH_MTP_Process+0x1a8>
      {
        USBH_UsrLog("Volume#%lu: %s   [%s]", MTP_Handle->current_storage_unit,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].StorageDescription,
                    MTP_Handle->info.storinfo[MTP_Handle->current_storage_unit].VolumeLabel);
        if (++MTP_Handle->current_storage_unit >= MTP_Handle->info.storids.n)
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a0ba:	f8d3 31c8 	ldr.w	r3, [r3, #456]	@ 0x1c8
 800a0be:	3301      	adds	r3, #1
 800a0c0:	68fa      	ldr	r2, [r7, #12]
 800a0c2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a0c6:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a0d0:	f8d3 21c8 	ldr.w	r2, [r3, #456]	@ 0x1c8
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	f8d3 3904 	ldr.w	r3, [r3, #2308]	@ 0x904
 800a0da:	429a      	cmp	r2, r3
 800a0dc:	d330      	bcc.n	800a140 <USBH_MTP_Process+0x1a8>
        {
          MTP_Handle->state = MTP_IDLE;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	f883 2d38 	strb.w	r2, [r3, #3384]	@ 0xd38
          MTP_Handle->is_ready = 1U;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a0f0:	461a      	mov	r2, r3
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	f8c2 31cc 	str.w	r3, [r2, #460]	@ 0x1cc
          MTP_Handle->current_storage_unit = 0U;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a0fe:	461a      	mov	r2, r3
 800a100:	2300      	movs	r3, #0
 800a102:	f8c2 31c8 	str.w	r3, [r2, #456]	@ 0x1c8
          MTP_Handle->params.CurrentStorageId = MTP_Handle->info.storids.Storage[0];
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f8d3 3908 	ldr.w	r3, [r3, #2312]	@ 0x908
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a112:	f8c2 3d18 	str.w	r3, [r2, #3352]	@ 0xd18

          USBH_UsrLog("MTP Class initialized.");
          USBH_UsrLog("%s is default storage unit", MTP_Handle->info.storinfo[0].StorageDescription);
          phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800a11c:	2102      	movs	r1, #2
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	4798      	blx	r3
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a122:	e00d      	b.n	800a140 <USBH_MTP_Process+0x1a8>

    case  MTP_IDLE:
      (void)USBH_MTP_Events(phost);
 800a124:	6878      	ldr	r0, [r7, #4]
 800a126:	f000 f81c 	bl	800a162 <USBH_MTP_Events>
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

      status = USBH_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	75fb      	strb	r3, [r7, #23]
      break;
 800a12e:	e008      	b.n	800a142 <USBH_MTP_Process+0x1aa>

    default:
      break;
 800a130:	bf00      	nop
 800a132:	e006      	b.n	800a142 <USBH_MTP_Process+0x1aa>
      break;
 800a134:	bf00      	nop
 800a136:	e004      	b.n	800a142 <USBH_MTP_Process+0x1aa>
      break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <USBH_MTP_Process+0x1aa>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <USBH_MTP_Process+0x1aa>
      break;
 800a140:	bf00      	nop
  }

  return status;
 800a142:	7dfb      	ldrb	r3, [r7, #23]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3718      	adds	r7, #24
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_MTP_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_SOFProcess(USBH_HandleTypeDef *phost)
{
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800a154:	2300      	movs	r3, #0
}
 800a156:	4618      	mov	r0, r3
 800a158:	370c      	adds	r7, #12
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USBH_MTP_Events>:
  * @brief  Handle HID Control process
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MTP_Events(USBH_HandleTypeDef *phost)
{
 800a162:	b580      	push	{r7, lr}
 800a164:	b084      	sub	sp, #16
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800a16a:	2301      	movs	r3, #1
 800a16c:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a174:	69db      	ldr	r3, [r3, #28]
 800a176:	60bb      	str	r3, [r7, #8]

  switch (MTP_Handle->events.state)
 800a178:	68bb      	ldr	r3, [r7, #8]
 800a17a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a17e:	f893 3d3c 	ldrb.w	r3, [r3, #3388]	@ 0xd3c
 800a182:	2b00      	cmp	r3, #0
 800a184:	d002      	beq.n	800a18c <USBH_MTP_Events+0x2a>
 800a186:	2b01      	cmp	r3, #1
 800a188:	d028      	beq.n	800a1dc <USBH_MTP_Events+0x7a>

      }
      break;

    default:
      break;
 800a18a:	e064      	b.n	800a256 <USBH_MTP_Events+0xf4>
      if ((phost->Timer & 1U) == 0U)
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800a192:	f003 0301 	and.w	r3, r3, #1
 800a196:	2b00      	cmp	r3, #0
 800a198:	d15a      	bne.n	800a250 <USBH_MTP_Events+0xee>
        MTP_Handle->events.timer = phost->Timer;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800a1a0:	68ba      	ldr	r2, [r7, #8]
 800a1a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a1a6:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	f503 51ea 	add.w	r1, r3, #7488	@ 0x1d40
 800a1b0:	3108      	adds	r1, #8
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1b8:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	@ 0xd36
        (void)USBH_InterruptReceiveData(phost,
 800a1bc:	b2da      	uxtb	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1c4:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f002 ff3b 	bl	800d044 <USBH_InterruptReceiveData>
        MTP_Handle->events.state = MTP_EVENTS_GETDATA;
 800a1ce:	68bb      	ldr	r3, [r7, #8]
 800a1d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	f883 2d3c 	strb.w	r2, [r3, #3388]	@ 0xd3c
      break;
 800a1da:	e039      	b.n	800a250 <USBH_MTP_Events+0xee>
      if (USBH_LL_GetURBState(phost, MTP_Handle->NotificationPipe) == USBH_URB_DONE)
 800a1dc:	68bb      	ldr	r3, [r7, #8]
 800a1de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a1e2:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800a1e6:	4619      	mov	r1, r3
 800a1e8:	6878      	ldr	r0, [r7, #4]
 800a1ea:	f003 fb8b 	bl	800d904 <USBH_LL_GetURBState>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b01      	cmp	r3, #1
 800a1f2:	d102      	bne.n	800a1fa <USBH_MTP_Events+0x98>
        MTP_DecodeEvent(phost);
 800a1f4:	6878      	ldr	r0, [r7, #4]
 800a1f6:	f000 f833 	bl	800a260 <MTP_DecodeEvent>
      if ((phost->Timer - MTP_Handle->events.timer) >= MTP_Handle->events.poll)
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	f8d3 2594 	ldr.w	r2, [r3, #1428]	@ 0x594
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a206:	f8d3 3d40 	ldr.w	r3, [r3, #3392]	@ 0xd40
 800a20a:	1ad3      	subs	r3, r2, r3
 800a20c:	68ba      	ldr	r2, [r7, #8]
 800a20e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a212:	f8b2 2d44 	ldrh.w	r2, [r2, #3396]	@ 0xd44
 800a216:	4293      	cmp	r3, r2
 800a218:	d31c      	bcc.n	800a254 <USBH_MTP_Events+0xf2>
        MTP_Handle->events.timer = phost->Timer;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800a220:	68ba      	ldr	r2, [r7, #8]
 800a222:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a226:	f8c2 3d40 	str.w	r3, [r2, #3392]	@ 0xd40
                                        (uint8_t *)(void *) & (MTP_Handle->events.container),
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	f503 51ea 	add.w	r1, r3, #7488	@ 0x1d40
 800a230:	3108      	adds	r1, #8
                                        (uint8_t)MTP_Handle->NotificationEpSize,
 800a232:	68bb      	ldr	r3, [r7, #8]
 800a234:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a238:	f8b3 3d36 	ldrh.w	r3, [r3, #3382]	@ 0xd36
        (void)USBH_InterruptReceiveData(phost,
 800a23c:	b2da      	uxtb	r2, r3
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a244:	f893 3d2e 	ldrb.w	r3, [r3, #3374]	@ 0xd2e
 800a248:	6878      	ldr	r0, [r7, #4]
 800a24a:	f002 fefb 	bl	800d044 <USBH_InterruptReceiveData>
      break;
 800a24e:	e001      	b.n	800a254 <USBH_MTP_Events+0xf2>
      break;
 800a250:	bf00      	nop
 800a252:	e000      	b.n	800a256 <USBH_MTP_Events+0xf4>
      break;
 800a254:	bf00      	nop
  }

  return status;
 800a256:	7bfb      	ldrb	r3, [r7, #15]
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <MTP_DecodeEvent>:
  *         Decode device event sent by responder
  * @param  phost: Host handle
  * @retval None
  */
static void MTP_DecodeEvent(USBH_HandleTypeDef *phost)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b086      	sub	sp, #24
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a26e:	69db      	ldr	r3, [r3, #28]
 800a270:	617b      	str	r3, [r7, #20]

  uint16_t code;
  uint32_t param1;

  /* Process the event */
  code = MTP_Handle->events.container.code;
 800a272:	697b      	ldr	r3, [r7, #20]
 800a274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a278:	f8b3 3d4e 	ldrh.w	r3, [r3, #3406]	@ 0xd4e
 800a27c:	827b      	strh	r3, [r7, #18]
  param1 = MTP_Handle->events.container.param1;
 800a27e:	697b      	ldr	r3, [r7, #20]
 800a280:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a284:	f8d3 3d54 	ldr.w	r3, [r3, #3412]	@ 0xd54
 800a288:	60fb      	str	r3, [r7, #12]

  switch (code)
 800a28a:	8a7b      	ldrh	r3, [r7, #18]
 800a28c:	f5a3 4380 	sub.w	r3, r3, #16384	@ 0x4000
 800a290:	2b0e      	cmp	r3, #14
 800a292:	d821      	bhi.n	800a2d8 <MTP_DecodeEvent+0x78>
 800a294:	a201      	add	r2, pc, #4	@ (adr r2, 800a29c <MTP_DecodeEvent+0x3c>)
 800a296:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a29a:	bf00      	nop
 800a29c:	0800a2d9 	.word	0x0800a2d9
 800a2a0:	0800a2d9 	.word	0x0800a2d9
 800a2a4:	0800a2d9 	.word	0x0800a2d9
 800a2a8:	0800a2d9 	.word	0x0800a2d9
 800a2ac:	0800a2d9 	.word	0x0800a2d9
 800a2b0:	0800a2d9 	.word	0x0800a2d9
 800a2b4:	0800a2d9 	.word	0x0800a2d9
 800a2b8:	0800a2d9 	.word	0x0800a2d9
 800a2bc:	0800a2d9 	.word	0x0800a2d9
 800a2c0:	0800a2d9 	.word	0x0800a2d9
 800a2c4:	0800a2d9 	.word	0x0800a2d9
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2d9 	.word	0x0800a2d9
 800a2d0:	0800a2d9 	.word	0x0800a2d9
 800a2d4:	0800a2d9 	.word	0x0800a2d9
      USBH_DbgLog("EVT: PTP_EC_UnreportedStatus in session %u", MTP_Handle->ptp.session_id);
      break;

    default :
      USBH_DbgLog("Received unknown event in session %u", MTP_Handle->ptp.session_id);
      break;
 800a2d8:	bf00      	nop
  }

  USBH_MTP_EventsCallback(phost, (uint32_t)code, param1);
 800a2da:	8a7b      	ldrh	r3, [r7, #18]
 800a2dc:	68fa      	ldr	r2, [r7, #12]
 800a2de:	4619      	mov	r1, r3
 800a2e0:	6878      	ldr	r0, [r7, #4]
 800a2e2:	f000 f805 	bl	800a2f0 <USBH_MTP_EventsCallback>
}
 800a2e6:	bf00      	nop
 800a2e8:	3718      	adds	r7, #24
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	bd80      	pop	{r7, pc}
 800a2ee:	bf00      	nop

0800a2f0 <USBH_MTP_EventsCallback>:
  * @brief  The function informs that host has received an event
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_MTP_EventsCallback(USBH_HandleTypeDef *phost, uint32_t event, uint32_t param)
{
 800a2f0:	b480      	push	{r7}
 800a2f2:	b085      	sub	sp, #20
 800a2f4:	af00      	add	r7, sp, #0
 800a2f6:	60f8      	str	r0, [r7, #12]
 800a2f8:	60b9      	str	r1, [r7, #8]
 800a2fa:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
  UNUSED(event);
  UNUSED(param);
}
 800a2fc:	bf00      	nop
 800a2fe:	3714      	adds	r7, #20
 800a300:	46bd      	mov	sp, r7
 800a302:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a306:	4770      	bx	lr

0800a308 <USBH_PTP_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Init(USBH_HandleTypeDef *phost)
{
 800a308:	b480      	push	{r7}
 800a30a:	b085      	sub	sp, #20
 800a30c:	af00      	add	r7, sp, #0
 800a30e:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a310:	687b      	ldr	r3, [r7, #4]
 800a312:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a316:	69db      	ldr	r3, [r3, #28]
 800a318:	60fb      	str	r3, [r7, #12]

  /* Set state to idle to be ready for operations */
  MTP_Handle->ptp.state = PTP_IDLE;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a320:	2200      	movs	r2, #0
 800a322:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
  MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a32c:	2201      	movs	r2, #1
 800a32e:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61

  return USBH_OK;
 800a332:	2300      	movs	r3, #0
}
 800a334:	4618      	mov	r0, r3
 800a336:	3714      	adds	r7, #20
 800a338:	46bd      	mov	sp, r7
 800a33a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33e:	4770      	bx	lr

0800a340 <USBH_PTP_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_Process(USBH_HandleTypeDef *phost)
{
 800a340:	b580      	push	{r7, lr}
 800a342:	b090      	sub	sp, #64	@ 0x40
 800a344:	af02      	add	r7, sp, #8
 800a346:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800a348:	2301      	movs	r3, #1
 800a34a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a34e:	2300      	movs	r3, #0
 800a350:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a35a:	69db      	ldr	r3, [r3, #28]
 800a35c:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef  ptp_container;
  uint32_t  len;

  switch (MTP_Handle->ptp.state)
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a364:	f893 3d60 	ldrb.w	r3, [r3, #3424]	@ 0xd60
 800a368:	2b09      	cmp	r3, #9
 800a36a:	f200 8270 	bhi.w	800a84e <USBH_PTP_Process+0x50e>
 800a36e:	a201      	add	r2, pc, #4	@ (adr r2, 800a374 <USBH_PTP_Process+0x34>)
 800a370:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a374:	0800a84f 	.word	0x0800a84f
 800a378:	0800a39d 	.word	0x0800a39d
 800a37c:	0800a3d3 	.word	0x0800a3d3
 800a380:	0800a477 	.word	0x0800a477
 800a384:	0800a4ad 	.word	0x0800a4ad
 800a388:	0800a605 	.word	0x0800a605
 800a38c:	0800a637 	.word	0x0800a637
 800a390:	0800a7b1 	.word	0x0800a7b1
 800a394:	0800a7d9 	.word	0x0800a7d9
 800a398:	0800a841 	.word	0x0800a841
      /*Do Nothing */
      break;

    case PTP_OP_REQUEST_STATE:
      (void)USBH_BulkSendData(phost,
                              (uint8_t *)(void *) & (MTP_Handle->ptp.op_container),
 800a39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39e:	f503 51eb 	add.w	r1, r3, #7520	@ 0x1d60
 800a3a2:	3104      	adds	r1, #4
                              (uint16_t)MTP_Handle->ptp.op_container.length,
 800a3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3aa:	f8d3 3d64 	ldr.w	r3, [r3, #3428]	@ 0xd64
      (void)USBH_BulkSendData(phost,
 800a3ae:	b29a      	uxth	r2, r3
 800a3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3b6:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800a3ba:	2001      	movs	r0, #1
 800a3bc:	9000      	str	r0, [sp, #0]
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f002 fdfd 	bl	800cfbe <USBH_BulkSendData>
                              MTP_Handle->DataOutPipe,
                              1U);
      MTP_Handle->ptp.state = PTP_OP_REQUEST_WAIT_STATE;
 800a3c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3ca:	2202      	movs	r2, #2
 800a3cc:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a3d0:	e246      	b.n	800a860 <USBH_PTP_Process+0x520>

    case PTP_OP_REQUEST_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800a3d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a3d8:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800a3dc:	4619      	mov	r1, r3
 800a3de:	6878      	ldr	r0, [r7, #4]
 800a3e0:	f003 fa90 	bl	800d904 <USBH_LL_GetURBState>
 800a3e4:	4603      	mov	r3, r0
 800a3e6:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800a3ea:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a3ee:	2b01      	cmp	r3, #1
 800a3f0:	d12a      	bne.n	800a448 <USBH_PTP_Process+0x108>
      {
        if (MTP_Handle->ptp.flags == PTP_DP_NODATA)
 800a3f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3f4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a3f8:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d106      	bne.n	800a40e <USBH_PTP_Process+0xce>
        {
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800a400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a402:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a406:	2207      	movs	r2, #7
 800a408:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
#endif
      }
      else
      {
      }
      break;
 800a40c:	e221      	b.n	800a852 <USBH_PTP_Process+0x512>
        else  if (MTP_Handle->ptp.flags == PTP_DP_SENDDATA)
 800a40e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a410:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a414:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800a418:	2b01      	cmp	r3, #1
 800a41a:	d106      	bne.n	800a42a <USBH_PTP_Process+0xea>
          MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800a41c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a41e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a422:	2203      	movs	r2, #3
 800a424:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a428:	e213      	b.n	800a852 <USBH_PTP_Process+0x512>
        else  if (MTP_Handle->ptp.flags == PTP_DP_GETDATA)
 800a42a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a42c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a430:	f8d3 31ac 	ldr.w	r3, [r3, #428]	@ 0x1ac
 800a434:	2b02      	cmp	r3, #2
 800a436:	f040 820c 	bne.w	800a852 <USBH_PTP_Process+0x512>
          MTP_Handle->ptp.state = PTP_DATA_IN_PHASE_STATE;
 800a43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a43c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a440:	2205      	movs	r2, #5
 800a442:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a446:	e204      	b.n	800a852 <USBH_PTP_Process+0x512>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a448:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a44c:	2b02      	cmp	r3, #2
 800a44e:	d106      	bne.n	800a45e <USBH_PTP_Process+0x11e>
        MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800a450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a452:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a456:	2201      	movs	r2, #1
 800a458:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a45c:	e1f9      	b.n	800a852 <USBH_PTP_Process+0x512>
      else if (URB_Status == USBH_URB_STALL)
 800a45e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a462:	2b05      	cmp	r3, #5
 800a464:	f040 81f5 	bne.w	800a852 <USBH_PTP_Process+0x512>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800a468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a46a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a46e:	2209      	movs	r2, #9
 800a470:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a474:	e1ed      	b.n	800a852 <USBH_PTP_Process+0x512>

    case PTP_DATA_OUT_PHASE_STATE:

      (void)USBH_BulkSendData(phost,
 800a476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a478:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a47c:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800a480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a482:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a486:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	@ 0xd32
 800a48a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a490:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800a494:	2001      	movs	r0, #1
 800a496:	9000      	str	r0, [sp, #0]
 800a498:	6878      	ldr	r0, [r7, #4]
 800a49a:	f002 fd90 	bl	800cfbe <USBH_BulkSendData>
                              MTP_Handle->DataOutEpSize,
                              MTP_Handle->DataOutPipe,
                              1U);


      MTP_Handle->ptp.state  = PTP_DATA_OUT_PHASE_WAIT_STATE;
 800a49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4a4:	2204      	movs	r2, #4
 800a4a6:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a4aa:	e1d9      	b.n	800a860 <USBH_PTP_Process+0x520>

    case PTP_DATA_OUT_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataOutPipe);
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a4b2:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800a4b6:	4619      	mov	r1, r3
 800a4b8:	6878      	ldr	r0, [r7, #4]
 800a4ba:	f003 fa23 	bl	800d904 <USBH_LL_GetURBState>
 800a4be:	4603      	mov	r3, r0
 800a4c0:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800a4c4:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a4c8:	2b01      	cmp	r3, #1
 800a4ca:	f040 8084 	bne.w	800a5d6 <USBH_PTP_Process+0x296>
      {
        /* Adjust Data pointer and data length */
        if (MTP_Handle->ptp.data_length > MTP_Handle->DataOutEpSize)
 800a4ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4d0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a4d4:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800a4d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4da:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4de:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800a4e2:	4293      	cmp	r3, r2
 800a4e4:	d94d      	bls.n	800a582 <USBH_PTP_Process+0x242>
        {
          MTP_Handle->ptp.data_ptr += MTP_Handle->DataOutEpSize;
 800a4e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4e8:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a4ec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800a4f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4f2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a4f6:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800a4fa:	4413      	add	r3, r2
 800a4fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a4fe:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a502:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= MTP_Handle->DataOutEpSize;
 800a506:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a508:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a50c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800a510:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a512:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a516:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800a51a:	1a9b      	subs	r3, r3, r2
 800a51c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a51e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a522:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += MTP_Handle->DataOutEpSize;
 800a526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a528:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a52c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800a530:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a532:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a536:	f8b2 2d32 	ldrh.w	r2, [r2, #3378]	@ 0xd32
 800a53a:	4413      	add	r3, r2
 800a53c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a53e:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a542:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800a546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a548:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a54c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800a550:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a554:	d31c      	bcc.n	800a590 <USBH_PTP_Process+0x250>
          {
            PTP_BufferFullCallback(phost);
 800a556:	6878      	ldr	r0, [r7, #4]
 800a558:	f000 fa2e 	bl	800a9b8 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800a55c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a562:	461a      	mov	r2, r3
 800a564:	2300      	movs	r3, #0
 800a566:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 800a56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a56c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a570:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800a574:	3301      	adds	r3, #1
 800a576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a578:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a57c:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
 800a580:	e006      	b.n	800a590 <USBH_PTP_Process+0x250>
          }
        }
        else
        {
          MTP_Handle->ptp.data_length = 0U;
 800a582:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a584:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a588:	461a      	mov	r2, r3
 800a58a:	2300      	movs	r3, #0
 800a58c:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
        }

        /* More Data To be Sent */
        if (MTP_Handle->ptp.data_length > 0U)
 800a590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a592:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a596:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d014      	beq.n	800a5c8 <USBH_PTP_Process+0x288>
        {
          (void)USBH_BulkSendData(phost,
 800a59e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5a0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a5a4:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800a5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5aa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5ae:	f8b3 2d32 	ldrh.w	r2, [r3, #3378]	@ 0xd32
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5b8:	f893 3d2d 	ldrb.w	r3, [r3, #3373]	@ 0xd2d
 800a5bc:	2001      	movs	r0, #1
 800a5be:	9000      	str	r0, [sp, #0]
 800a5c0:	6878      	ldr	r0, [r7, #4]
 800a5c2:	f002 fcfc 	bl	800cfbe <USBH_BulkSendData>
      }
      else
      {
        /* .. */
      }
      break;
 800a5c6:	e146      	b.n	800a856 <USBH_PTP_Process+0x516>
          MTP_Handle->ptp.state  = PTP_RESPONSE_STATE;
 800a5c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5ce:	2207      	movs	r2, #7
 800a5d0:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a5d4:	e13f      	b.n	800a856 <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a5d6:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a5da:	2b02      	cmp	r3, #2
 800a5dc:	d106      	bne.n	800a5ec <USBH_PTP_Process+0x2ac>
        MTP_Handle->ptp.state = PTP_DATA_OUT_PHASE_STATE;
 800a5de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5e0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5e4:	2203      	movs	r2, #3
 800a5e6:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a5ea:	e134      	b.n	800a856 <USBH_PTP_Process+0x516>
      else if (URB_Status == USBH_URB_STALL)
 800a5ec:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a5f0:	2b05      	cmp	r3, #5
 800a5f2:	f040 8130 	bne.w	800a856 <USBH_PTP_Process+0x516>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800a5f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a5fc:	2209      	movs	r2, #9
 800a5fe:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a602:	e128      	b.n	800a856 <USBH_PTP_Process+0x516>

    case PTP_DATA_IN_PHASE_STATE:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost,
 800a604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a606:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a60a:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800a60e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a610:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a614:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	@ 0xd34
 800a618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a61a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a61e:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800a622:	6878      	ldr	r0, [r7, #4]
 800a624:	f002 fcf0 	bl	800d008 <USBH_BulkReceiveData>
                                 MTP_Handle->ptp.data_ptr,
                                 MTP_Handle->DataInEpSize,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_DATA_IN_PHASE_WAIT_STATE;
 800a628:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a62a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a62e:	2206      	movs	r2, #6
 800a630:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a634:	e114      	b.n	800a860 <USBH_PTP_Process+0x520>

    case PTP_DATA_IN_PHASE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800a636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a638:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a63c:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800a640:	4619      	mov	r1, r3
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f003 f95e 	bl	800d904 <USBH_LL_GetURBState>
 800a648:	4603      	mov	r3, r0
 800a64a:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800a64e:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a652:	2b01      	cmp	r3, #1
 800a654:	f040 80a1 	bne.w	800a79a <USBH_PTP_Process+0x45a>
      {
        len = USBH_LL_GetLastXferSize(phost, MTP_Handle->DataInPipe);
 800a658:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a65a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a65e:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800a662:	4619      	mov	r1, r3
 800a664:	6878      	ldr	r0, [r7, #4]
 800a666:	f003 f8bb 	bl	800d7e0 <USBH_LL_GetLastXferSize>
 800a66a:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if (MTP_Handle->ptp.data_packet_counter++ == 0U)
 800a66c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a66e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a672:	f8d3 31c0 	ldr.w	r3, [r3, #448]	@ 0x1c0
 800a676:	1c5a      	adds	r2, r3, #1
 800a678:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800a67a:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800a67e:	f8c1 21c0 	str.w	r2, [r1, #448]	@ 0x1c0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d111      	bne.n	800a6aa <USBH_PTP_Process+0x36a>
        {
          /* This is the first packet; so retrieve exact data length from payload */
          MTP_Handle->ptp.data_length = *(uint32_t *)(void *)(MTP_Handle->ptp.data_ptr);
 800a686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a688:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a68c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	@ 0x1b0
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a694:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a698:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.iteration = 0U;
 800a69c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a69e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	2300      	movs	r3, #0
 800a6a6:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
        }

        if ((len >=  MTP_Handle->DataInEpSize) && (MTP_Handle->ptp.data_length > 0U))
 800a6aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a6b0:	f8b3 3d34 	ldrh.w	r3, [r3, #3380]	@ 0xd34
 800a6b4:	461a      	mov	r2, r3
 800a6b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b8:	4293      	cmp	r3, r2
 800a6ba:	d35b      	bcc.n	800a774 <USBH_PTP_Process+0x434>
 800a6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6be:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a6c2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	@ 0x1b4
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d054      	beq.n	800a774 <USBH_PTP_Process+0x434>
        {
          MTP_Handle->ptp.data_ptr += len;
 800a6ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6cc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a6d0:	f8d3 21b0 	ldr.w	r2, [r3, #432]	@ 0x1b0
 800a6d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6d6:	4413      	add	r3, r2
 800a6d8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6da:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a6de:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
          MTP_Handle->ptp.data_length -= len;
 800a6e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6e4:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a6e8:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 800a6ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ee:	1ad3      	subs	r3, r2, r3
 800a6f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a6f2:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a6f6:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.data_packet += len;
 800a6fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6fc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a700:	f8d3 21b8 	ldr.w	r2, [r3, #440]	@ 0x1b8
 800a704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a706:	4413      	add	r3, r2
 800a708:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a70a:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a70e:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8

          if (MTP_Handle->ptp.data_packet >= PTP_USB_BULK_PAYLOAD_LEN_READ)
 800a712:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a714:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a718:	f8d3 31b8 	ldr.w	r3, [r3, #440]	@ 0x1b8
 800a71c:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800a720:	d314      	bcc.n	800a74c <USBH_PTP_Process+0x40c>
          {
            PTP_BufferFullCallback(phost);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f000 f948 	bl	800a9b8 <PTP_BufferFullCallback>
            MTP_Handle->ptp.data_packet = 0U;
 800a728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a72a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a72e:	461a      	mov	r2, r3
 800a730:	2300      	movs	r3, #0
 800a732:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
            MTP_Handle->ptp.iteration++;
 800a736:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a738:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a73c:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800a740:	3301      	adds	r3, #1
 800a742:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a744:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a748:	f8c2 31bc 	str.w	r3, [r2, #444]	@ 0x1bc
          }

          /* Continue receiving data*/
          (void)USBH_BulkReceiveData(phost,
 800a74c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a74e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a752:	f8d3 11b0 	ldr.w	r1, [r3, #432]	@ 0x1b0
 800a756:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a758:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a75c:	f8b3 2d34 	ldrh.w	r2, [r3, #3380]	@ 0xd34
 800a760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a762:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a766:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800a76a:	6878      	ldr	r0, [r7, #4]
 800a76c:	f002 fc4c 	bl	800d008 <USBH_BulkReceiveData>
 800a770:	bf00      	nop
      }
      else
      {
        /* .. */
      }
      break;
 800a772:	e072      	b.n	800a85a <USBH_PTP_Process+0x51a>
          MTP_Handle->ptp.data_length -= len;
 800a774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a776:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a77a:	f8d3 21b4 	ldr.w	r2, [r3, #436]	@ 0x1b4
 800a77e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a780:	1ad3      	subs	r3, r2, r3
 800a782:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a784:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800a788:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
          MTP_Handle->ptp.state = PTP_RESPONSE_STATE;
 800a78c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a78e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a792:	2207      	movs	r2, #7
 800a794:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a798:	e05f      	b.n	800a85a <USBH_PTP_Process+0x51a>
      else if (URB_Status == USBH_URB_STALL)
 800a79a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a79e:	2b05      	cmp	r3, #5
 800a7a0:	d15b      	bne.n	800a85a <USBH_PTP_Process+0x51a>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800a7a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7a4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7a8:	2209      	movs	r2, #9
 800a7aa:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a7ae:	e054      	b.n	800a85a <USBH_PTP_Process+0x51a>

    case PTP_RESPONSE_STATE:
      (void)USBH_BulkReceiveData(phost,
                                 (uint8_t *)(void *) & (MTP_Handle->ptp.resp_container),
 800a7b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7b2:	f503 5106 	add.w	r1, r3, #8576	@ 0x2180
 800a7b6:	3104      	adds	r1, #4
      (void)USBH_BulkReceiveData(phost,
 800a7b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7be:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800a7c2:	223f      	movs	r2, #63	@ 0x3f
 800a7c4:	6878      	ldr	r0, [r7, #4]
 800a7c6:	f002 fc1f 	bl	800d008 <USBH_BulkReceiveData>
                                 PTP_USB_BULK_REQ_RESP_MAX_LEN,
                                 MTP_Handle->DataInPipe);

      MTP_Handle->ptp.state  = PTP_RESPONSE_WAIT_STATE;
 800a7ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7d0:	2208      	movs	r2, #8
 800a7d2:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a7d6:	e043      	b.n	800a860 <USBH_PTP_Process+0x520>

    case PTP_RESPONSE_WAIT_STATE:
      URB_Status = USBH_LL_GetURBState(phost, MTP_Handle->DataInPipe);
 800a7d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a7da:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a7de:	f893 3d2c 	ldrb.w	r3, [r3, #3372]	@ 0xd2c
 800a7e2:	4619      	mov	r1, r3
 800a7e4:	6878      	ldr	r0, [r7, #4]
 800a7e6:	f003 f88d 	bl	800d904 <USBH_LL_GetURBState>
 800a7ea:	4603      	mov	r3, r0
 800a7ec:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36

      if (URB_Status == USBH_URB_DONE)
 800a7f0:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d118      	bne.n	800a82a <USBH_PTP_Process+0x4ea>
      {
        (void)USBH_PTP_GetResponse(phost, &ptp_container);
 800a7f8:	f107 0308 	add.w	r3, r7, #8
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	6878      	ldr	r0, [r7, #4]
 800a800:	f000 f88f 	bl	800a922 <USBH_PTP_GetResponse>

        if (ptp_container.Code == PTP_RC_OK)
 800a804:	893b      	ldrh	r3, [r7, #8]
 800a806:	f242 0201 	movw	r2, #8193	@ 0x2001
 800a80a:	4293      	cmp	r3, r2
 800a80c:	d103      	bne.n	800a816 <USBH_PTP_Process+0x4d6>
        {
          status = USBH_OK;
 800a80e:	2300      	movs	r3, #0
 800a810:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 800a814:	e002      	b.n	800a81c <USBH_PTP_Process+0x4dc>
        }
        else
        {
          status = USBH_FAIL;
 800a816:	2302      	movs	r3, #2
 800a818:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
        MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800a81c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a81e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a822:	2201      	movs	r2, #1
 800a824:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      }
      else
      {
        /* .. */
      }
      break;
 800a828:	e019      	b.n	800a85e <USBH_PTP_Process+0x51e>
      else if (URB_Status == USBH_URB_STALL)
 800a82a:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 800a82e:	2b05      	cmp	r3, #5
 800a830:	d115      	bne.n	800a85e <USBH_PTP_Process+0x51e>
        MTP_Handle->ptp.state  = PTP_ERROR;
 800a832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a834:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a838:	2209      	movs	r2, #9
 800a83a:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      break;
 800a83e:	e00e      	b.n	800a85e <USBH_PTP_Process+0x51e>

    case PTP_ERROR:
      MTP_Handle->ptp.req_state = PTP_REQ_SEND;
 800a840:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a842:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a846:	2201      	movs	r2, #1
 800a848:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      break;
 800a84c:	e008      	b.n	800a860 <USBH_PTP_Process+0x520>

    default:
      break;
 800a84e:	bf00      	nop
 800a850:	e006      	b.n	800a860 <USBH_PTP_Process+0x520>
      break;
 800a852:	bf00      	nop
 800a854:	e004      	b.n	800a860 <USBH_PTP_Process+0x520>
      break;
 800a856:	bf00      	nop
 800a858:	e002      	b.n	800a860 <USBH_PTP_Process+0x520>
      break;
 800a85a:	bf00      	nop
 800a85c:	e000      	b.n	800a860 <USBH_PTP_Process+0x520>
      break;
 800a85e:	bf00      	nop
  }
  return status;
 800a860:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800a864:	4618      	mov	r0, r3
 800a866:	3738      	adds	r7, #56	@ 0x38
 800a868:	46bd      	mov	sp, r7
 800a86a:	bd80      	pop	{r7, pc}

0800a86c <USBH_PTP_SendRequest>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_SendRequest(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *req)
{
 800a86c:	b580      	push	{r7, lr}
 800a86e:	b084      	sub	sp, #16
 800a870:	af00      	add	r7, sp, #0
 800a872:	6078      	str	r0, [r7, #4]
 800a874:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a876:	2300      	movs	r3, #0
 800a878:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a880:	69db      	ldr	r3, [r3, #28]
 800a882:	60bb      	str	r3, [r7, #8]

  /* Clear PTP Data container*/
  (void)USBH_memset(&(MTP_Handle->ptp.op_container), 0, sizeof(PTP_OpContainerTypedef));
 800a884:	68bb      	ldr	r3, [r7, #8]
 800a886:	f503 53eb 	add.w	r3, r3, #7520	@ 0x1d60
 800a88a:	3304      	adds	r3, #4
 800a88c:	2220      	movs	r2, #32
 800a88e:	2100      	movs	r1, #0
 800a890:	4618      	mov	r0, r3
 800a892:	f003 fc19 	bl	800e0c8 <memset>

  /* build appropriate USB container */
  MTP_Handle->ptp.op_container.length = PTP_USB_BULK_REQ_LEN - ((sizeof(uint32_t) * (5U - (uint32_t)req->Nparam)));
 800a896:	683b      	ldr	r3, [r7, #0]
 800a898:	f893 3020 	ldrb.w	r3, [r3, #32]
 800a89c:	3303      	adds	r3, #3
 800a89e:	009b      	lsls	r3, r3, #2
 800a8a0:	68ba      	ldr	r2, [r7, #8]
 800a8a2:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a8a6:	f8c2 3d64 	str.w	r3, [r2, #3428]	@ 0xd64
  MTP_Handle->ptp.op_container.type = PTP_USB_CONTAINER_COMMAND;
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	f8a3 2d68 	strh.w	r2, [r3, #3432]	@ 0xd68
  MTP_Handle->ptp.op_container.code = req->Code;
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	881a      	ldrh	r2, [r3, #0]
 800a8ba:	68bb      	ldr	r3, [r7, #8]
 800a8bc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a8c0:	f8a3 2d6a 	strh.w	r2, [r3, #3434]	@ 0xd6a
  MTP_Handle->ptp.op_container.trans_id = req->Transaction_ID;
 800a8c4:	683b      	ldr	r3, [r7, #0]
 800a8c6:	689b      	ldr	r3, [r3, #8]
 800a8c8:	68ba      	ldr	r2, [r7, #8]
 800a8ca:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a8ce:	f8c2 3d6c 	str.w	r3, [r2, #3436]	@ 0xd6c
  MTP_Handle->ptp.op_container.param1 = req->Param1;
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	68db      	ldr	r3, [r3, #12]
 800a8d6:	68ba      	ldr	r2, [r7, #8]
 800a8d8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a8dc:	f8c2 3d70 	str.w	r3, [r2, #3440]	@ 0xd70
  MTP_Handle->ptp.op_container.param2 = req->Param2;
 800a8e0:	683b      	ldr	r3, [r7, #0]
 800a8e2:	691b      	ldr	r3, [r3, #16]
 800a8e4:	68ba      	ldr	r2, [r7, #8]
 800a8e6:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a8ea:	f8c2 3d74 	str.w	r3, [r2, #3444]	@ 0xd74
  MTP_Handle->ptp.op_container.param3 = req->Param3;
 800a8ee:	683b      	ldr	r3, [r7, #0]
 800a8f0:	695b      	ldr	r3, [r3, #20]
 800a8f2:	68ba      	ldr	r2, [r7, #8]
 800a8f4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a8f8:	f8c2 3d78 	str.w	r3, [r2, #3448]	@ 0xd78
  MTP_Handle->ptp.op_container.param4 = req->Param4;
 800a8fc:	683b      	ldr	r3, [r7, #0]
 800a8fe:	699b      	ldr	r3, [r3, #24]
 800a900:	68ba      	ldr	r2, [r7, #8]
 800a902:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a906:	f8c2 3d7c 	str.w	r3, [r2, #3452]	@ 0xd7c
  MTP_Handle->ptp.op_container.param5 = req->Param5;
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	69db      	ldr	r3, [r3, #28]
 800a90e:	68ba      	ldr	r2, [r7, #8]
 800a910:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 800a914:	f8c2 3d80 	str.w	r3, [r2, #3456]	@ 0xd80

  return status;
 800a918:	7bfb      	ldrb	r3, [r7, #15]
}
 800a91a:	4618      	mov	r0, r3
 800a91c:	3710      	adds	r7, #16
 800a91e:	46bd      	mov	sp, r7
 800a920:	bd80      	pop	{r7, pc}

0800a922 <USBH_PTP_GetResponse>:
  *         Open a new session
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetResponse(USBH_HandleTypeDef *phost, PTP_ContainerTypedef  *resp)
{
 800a922:	b480      	push	{r7}
 800a924:	b085      	sub	sp, #20
 800a926:	af00      	add	r7, sp, #0
 800a928:	6078      	str	r0, [r7, #4]
 800a92a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800a92c:	2300      	movs	r3, #0
 800a92e:	73fb      	strb	r3, [r7, #15]
  MTP_HandleTypeDef  *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a936:	69db      	ldr	r3, [r3, #28]
 800a938:	60bb      	str	r3, [r7, #8]

  /* build an appropriate PTPContainer */
  resp->Code = MTP_Handle->ptp.resp_container.code;
 800a93a:	68bb      	ldr	r3, [r7, #8]
 800a93c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a940:	f8b3 218a 	ldrh.w	r2, [r3, #394]	@ 0x18a
 800a944:	683b      	ldr	r3, [r7, #0]
 800a946:	801a      	strh	r2, [r3, #0]
  resp->SessionID = MTP_Handle->ptp.session_id;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a94e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	@ 0x1a8
 800a952:	683b      	ldr	r3, [r7, #0]
 800a954:	605a      	str	r2, [r3, #4]
  resp->Transaction_ID = MTP_Handle->ptp.resp_container.trans_id;
 800a956:	68bb      	ldr	r3, [r7, #8]
 800a958:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a95c:	f8d3 218c 	ldr.w	r2, [r3, #396]	@ 0x18c
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	609a      	str	r2, [r3, #8]
  resp->Param1 = MTP_Handle->ptp.resp_container.param1;
 800a964:	68bb      	ldr	r3, [r7, #8]
 800a966:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a96a:	f8d3 2190 	ldr.w	r2, [r3, #400]	@ 0x190
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	60da      	str	r2, [r3, #12]
  resp->Param2 = MTP_Handle->ptp.resp_container.param2;
 800a972:	68bb      	ldr	r3, [r7, #8]
 800a974:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a978:	f8d3 2194 	ldr.w	r2, [r3, #404]	@ 0x194
 800a97c:	683b      	ldr	r3, [r7, #0]
 800a97e:	611a      	str	r2, [r3, #16]
  resp->Param3 = MTP_Handle->ptp.resp_container.param3;
 800a980:	68bb      	ldr	r3, [r7, #8]
 800a982:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a986:	f8d3 2198 	ldr.w	r2, [r3, #408]	@ 0x198
 800a98a:	683b      	ldr	r3, [r7, #0]
 800a98c:	615a      	str	r2, [r3, #20]
  resp->Param4 = MTP_Handle->ptp.resp_container.param4;
 800a98e:	68bb      	ldr	r3, [r7, #8]
 800a990:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a994:	f8d3 219c 	ldr.w	r2, [r3, #412]	@ 0x19c
 800a998:	683b      	ldr	r3, [r7, #0]
 800a99a:	619a      	str	r2, [r3, #24]
  resp->Param5 = MTP_Handle->ptp.resp_container.param5;
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800a9a2:	f8d3 21a0 	ldr.w	r2, [r3, #416]	@ 0x1a0
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	61da      	str	r2, [r3, #28]

  return status;
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9ac:	4618      	mov	r0, r3
 800a9ae:	3714      	adds	r7, #20
 800a9b0:	46bd      	mov	sp, r7
 800a9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9b6:	4770      	bx	lr

0800a9b8 <PTP_BufferFullCallback>:
  * @brief  The function informs user that data buffer is full
  *  @param  phost: host handle
  * @retval None
  */
static void PTP_BufferFullCallback(USBH_HandleTypeDef *phost)
{
 800a9b8:	b580      	push	{r7, lr}
 800a9ba:	b084      	sub	sp, #16
 800a9bc:	af00      	add	r7, sp, #0
 800a9be:	6078      	str	r0, [r7, #4]
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800a9c6:	69db      	ldr	r3, [r3, #28]
 800a9c8:	60fb      	str	r3, [r7, #12]

  switch (MTP_Handle->ptp.data_container.code)
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800a9d0:	f8b3 3d8a 	ldrh.w	r3, [r3, #3466]	@ 0xd8a
 800a9d4:	f5a3 5380 	sub.w	r3, r3, #4096	@ 0x1000
 800a9d8:	3b01      	subs	r3, #1
 800a9da:	2b1a      	cmp	r3, #26
 800a9dc:	d874      	bhi.n	800aac8 <PTP_BufferFullCallback+0x110>
 800a9de:	a201      	add	r2, pc, #4	@ (adr r2, 800a9e4 <PTP_BufferFullCallback+0x2c>)
 800a9e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9e4:	0800aa51 	.word	0x0800aa51
 800a9e8:	0800aac9 	.word	0x0800aac9
 800a9ec:	0800aac9 	.word	0x0800aac9
 800a9f0:	0800aac9 	.word	0x0800aac9
 800a9f4:	0800aac9 	.word	0x0800aac9
 800a9f8:	0800aac9 	.word	0x0800aac9
 800a9fc:	0800aac9 	.word	0x0800aac9
 800aa00:	0800aac9 	.word	0x0800aac9
 800aa04:	0800aa5d 	.word	0x0800aa5d
 800aa08:	0800aac9 	.word	0x0800aac9
 800aa0c:	0800aac9 	.word	0x0800aac9
 800aa10:	0800aac9 	.word	0x0800aac9
 800aa14:	0800aaa1 	.word	0x0800aaa1
 800aa18:	0800aac9 	.word	0x0800aac9
 800aa1c:	0800aac9 	.word	0x0800aac9
 800aa20:	0800aac9 	.word	0x0800aac9
 800aa24:	0800aac9 	.word	0x0800aac9
 800aa28:	0800aac9 	.word	0x0800aac9
 800aa2c:	0800aac9 	.word	0x0800aac9
 800aa30:	0800aac9 	.word	0x0800aac9
 800aa34:	0800aac9 	.word	0x0800aac9
 800aa38:	0800aac9 	.word	0x0800aac9
 800aa3c:	0800aac9 	.word	0x0800aac9
 800aa40:	0800aac9 	.word	0x0800aac9
 800aa44:	0800aac9 	.word	0x0800aac9
 800aa48:	0800aac9 	.word	0x0800aac9
 800aa4c:	0800aa5d 	.word	0x0800aa5d
  {
    case PTP_OC_GetDeviceInfo:
      PTP_DecodeDeviceInfo(phost, &(MTP_Handle->info.devinfo));
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	4619      	mov	r1, r3
 800aa54:	6878      	ldr	r0, [r7, #4]
 800aa56:	f000 f841 	bl	800aadc <PTP_DecodeDeviceInfo>
      break;
 800aa5a:	e03a      	b.n	800aad2 <PTP_BufferFullCallback+0x11a>

    case PTP_OC_GetPartialObject:
    case PTP_OC_GetObject:

      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aa62:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d130      	bne.n	800aacc <PTP_BufferFullCallback+0x114>
      {
        /* copy it to object */
        (void)USBH_memcpy(MTP_Handle->ptp.object_ptr, MTP_Handle->ptp.data_container.payload.data,
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aa70:	f8d3 01c4 	ldr.w	r0, [r3, #452]	@ 0x1c4
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800aa7a:	3310      	adds	r3, #16
 800aa7c:	f44f 727d 	mov.w	r2, #1012	@ 0x3f4
 800aa80:	4619      	mov	r1, r3
 800aa82:	f003 fbc0 	bl	800e206 <memcpy>
                          PTP_USB_BULK_PAYLOAD_LEN_READ);

        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aa8c:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800aa90:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800aa94:	68fa      	ldr	r2, [r7, #12]
 800aa96:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800aa9a:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      }
      break;
 800aa9e:	e015      	b.n	800aacc <PTP_BufferFullCallback+0x114>

    case PTP_OC_SendObject:
      /* first packet is in the PTP data payload buffer */
      if (MTP_Handle->ptp.iteration == 0U)
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aaa6:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800aaaa:	2b00      	cmp	r3, #0
 800aaac:	d110      	bne.n	800aad0 <PTP_BufferFullCallback+0x118>
      {
        /* next packet should be directly copied to object */
        MTP_Handle->ptp.data_ptr = (MTP_Handle->ptp.object_ptr + PTP_USB_BULK_PAYLOAD_LEN_READ);
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800aab4:	f8d3 31c4 	ldr.w	r3, [r3, #452]	@ 0x1c4
 800aab8:	f503 737d 	add.w	r3, r3, #1012	@ 0x3f4
 800aabc:	68fa      	ldr	r2, [r7, #12]
 800aabe:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800aac2:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      }
      break;
 800aac6:	e003      	b.n	800aad0 <PTP_BufferFullCallback+0x118>

    default:
      break;
 800aac8:	bf00      	nop
 800aaca:	e002      	b.n	800aad2 <PTP_BufferFullCallback+0x11a>
      break;
 800aacc:	bf00      	nop
 800aace:	e000      	b.n	800aad2 <PTP_BufferFullCallback+0x11a>
      break;
 800aad0:	bf00      	nop


  }
}
 800aad2:	bf00      	nop
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}
 800aada:	bf00      	nop

0800aadc <PTP_DecodeDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval None
  */
static void PTP_DecodeDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b086      	sub	sp, #24
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800aaec:	69db      	ldr	r3, [r3, #28]
 800aaee:	617b      	str	r3, [r7, #20]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800aaf0:	697b      	ldr	r3, [r7, #20]
 800aaf2:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800aaf6:	3310      	adds	r3, #16
 800aaf8:	613b      	str	r3, [r7, #16]

  /* Max device info is PTP_USB_BULK_HS_MAX_PACKET_LEN_READ */
  USBH_DbgLog(" MTP device info size exceeds internal buffer size.\
               only available data are decoded.");

  if (MTP_Handle->ptp.iteration == 0U)
 800aafa:	697b      	ldr	r3, [r7, #20]
 800aafc:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800ab00:	f8d3 31bc 	ldr.w	r3, [r3, #444]	@ 0x1bc
 800ab04:	2b00      	cmp	r3, #0
 800ab06:	f040 80f9 	bne.w	800acfc <PTP_DecodeDeviceInfo+0x220>
  {
    dev_info->StandardVersion = LE16(&data[PTP_di_StandardVersion]);
 800ab0a:	693b      	ldr	r3, [r7, #16]
 800ab0c:	781b      	ldrb	r3, [r3, #0]
 800ab0e:	461a      	mov	r2, r3
 800ab10:	693b      	ldr	r3, [r7, #16]
 800ab12:	3301      	adds	r3, #1
 800ab14:	781b      	ldrb	r3, [r3, #0]
 800ab16:	021b      	lsls	r3, r3, #8
 800ab18:	b29b      	uxth	r3, r3
 800ab1a:	4313      	orrs	r3, r2
 800ab1c:	b29a      	uxth	r2, r3
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	801a      	strh	r2, [r3, #0]
    dev_info->VendorExtensionID = LE32(&data[PTP_di_VendorExtensionID]);
 800ab22:	693b      	ldr	r3, [r7, #16]
 800ab24:	3302      	adds	r3, #2
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	461a      	mov	r2, r3
 800ab2a:	693b      	ldr	r3, [r7, #16]
 800ab2c:	3303      	adds	r3, #3
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	021b      	lsls	r3, r3, #8
 800ab32:	431a      	orrs	r2, r3
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	3304      	adds	r3, #4
 800ab38:	781b      	ldrb	r3, [r3, #0]
 800ab3a:	041b      	lsls	r3, r3, #16
 800ab3c:	431a      	orrs	r2, r3
 800ab3e:	693b      	ldr	r3, [r7, #16]
 800ab40:	3305      	adds	r3, #5
 800ab42:	781b      	ldrb	r3, [r3, #0]
 800ab44:	061b      	lsls	r3, r3, #24
 800ab46:	431a      	orrs	r2, r3
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	605a      	str	r2, [r3, #4]
    dev_info->VendorExtensionVersion = LE16(&data[PTP_di_VendorExtensionVersion]);
 800ab4c:	693b      	ldr	r3, [r7, #16]
 800ab4e:	3306      	adds	r3, #6
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	461a      	mov	r2, r3
 800ab54:	693b      	ldr	r3, [r7, #16]
 800ab56:	3307      	adds	r3, #7
 800ab58:	781b      	ldrb	r3, [r3, #0]
 800ab5a:	021b      	lsls	r3, r3, #8
 800ab5c:	b29b      	uxth	r3, r3
 800ab5e:	4313      	orrs	r3, r2
 800ab60:	b29a      	uxth	r2, r3
 800ab62:	683b      	ldr	r3, [r7, #0]
 800ab64:	811a      	strh	r2, [r3, #8]
    PTP_GetString(dev_info->VendorExtensionDesc, &data[PTP_di_VendorExtensionDesc], &len);
 800ab66:	683b      	ldr	r3, [r7, #0]
 800ab68:	f103 000a 	add.w	r0, r3, #10
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	3308      	adds	r3, #8
 800ab70:	f107 020a 	add.w	r2, r7, #10
 800ab74:	4619      	mov	r1, r3
 800ab76:	f000 fafa 	bl	800b16e <PTP_GetString>

    totallen = (uint32_t)(len * 2U) + 1U;
 800ab7a:	897b      	ldrh	r3, [r7, #10]
 800ab7c:	005b      	lsls	r3, r3, #1
 800ab7e:	3301      	adds	r3, #1
 800ab80:	60fb      	str	r3, [r7, #12]
    dev_info->FunctionalMode = LE16(&data[PTP_di_FunctionalMode + totallen]);
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	3308      	adds	r3, #8
 800ab86:	693a      	ldr	r2, [r7, #16]
 800ab88:	4413      	add	r3, r2
 800ab8a:	781b      	ldrb	r3, [r3, #0]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	68fb      	ldr	r3, [r7, #12]
 800ab90:	3309      	adds	r3, #9
 800ab92:	693a      	ldr	r2, [r7, #16]
 800ab94:	4413      	add	r3, r2
 800ab96:	781b      	ldrb	r3, [r3, #0]
 800ab98:	021b      	lsls	r3, r3, #8
 800ab9a:	b29b      	uxth	r3, r3
 800ab9c:	430b      	orrs	r3, r1
 800ab9e:	b29a      	uxth	r2, r3
 800aba0:	683b      	ldr	r3, [r7, #0]
 800aba2:	f8a3 210a 	strh.w	r2, [r3, #266]	@ 0x10a
    dev_info->OperationsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->OperationsSupported,
 800aba6:	683b      	ldr	r3, [r7, #0]
 800aba8:	f503 7088 	add.w	r0, r3, #272	@ 0x110
 800abac:	68fb      	ldr	r3, [r7, #12]
 800abae:	330a      	adds	r3, #10
 800abb0:	461a      	mov	r2, r3
 800abb2:	6939      	ldr	r1, [r7, #16]
 800abb4:	f000 fb09 	bl	800b1ca <PTP_GetArray16>
 800abb8:	4602      	mov	r2, r0
 800abba:	683b      	ldr	r3, [r7, #0]
 800abbc:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                                                       data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->OperationsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800abc0:	683b      	ldr	r3, [r7, #0]
 800abc2:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 800abc6:	005a      	lsls	r2, r3, #1
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	4413      	add	r3, r2
 800abcc:	3304      	adds	r3, #4
 800abce:	60fb      	str	r3, [r7, #12]
    dev_info->EventsSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->EventsSupported,
 800abd0:	683b      	ldr	r3, [r7, #0]
 800abd2:	f503 70ee 	add.w	r0, r3, #476	@ 0x1dc
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	330a      	adds	r3, #10
 800abda:	461a      	mov	r2, r3
 800abdc:	6939      	ldr	r1, [r7, #16]
 800abde:	f000 faf4 	bl	800b1ca <PTP_GetArray16>
 800abe2:	4602      	mov	r2, r0
 800abe4:	683b      	ldr	r3, [r7, #0]
 800abe6:	f8c3 21d8 	str.w	r2, [r3, #472]	@ 0x1d8
                                                   data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->EventsSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800abea:	683b      	ldr	r3, [r7, #0]
 800abec:	f8d3 31d8 	ldr.w	r3, [r3, #472]	@ 0x1d8
 800abf0:	005a      	lsls	r2, r3, #1
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	4413      	add	r3, r2
 800abf6:	3304      	adds	r3, #4
 800abf8:	60fb      	str	r3, [r7, #12]
    dev_info->DevicePropertiesSupported_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->DevicePropertiesSupported,
 800abfa:	683b      	ldr	r3, [r7, #0]
 800abfc:	f503 702a 	add.w	r0, r3, #680	@ 0x2a8
 800ac00:	68fb      	ldr	r3, [r7, #12]
 800ac02:	330a      	adds	r3, #10
 800ac04:	461a      	mov	r2, r3
 800ac06:	6939      	ldr	r1, [r7, #16]
 800ac08:	f000 fadf 	bl	800b1ca <PTP_GetArray16>
 800ac0c:	4602      	mov	r2, r0
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
                                                             data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->DevicePropertiesSupported_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800ac14:	683b      	ldr	r3, [r7, #0]
 800ac16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800ac1a:	005a      	lsls	r2, r3, #1
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	4413      	add	r3, r2
 800ac20:	3304      	adds	r3, #4
 800ac22:	60fb      	str	r3, [r7, #12]

    dev_info->CaptureFormats_len = PTP_GetArray16((uint16_t *)(void *)&dev_info->CaptureFormats,
 800ac24:	683b      	ldr	r3, [r7, #0]
 800ac26:	f503 705d 	add.w	r0, r3, #884	@ 0x374
 800ac2a:	68fb      	ldr	r3, [r7, #12]
 800ac2c:	330a      	adds	r3, #10
 800ac2e:	461a      	mov	r2, r3
 800ac30:	6939      	ldr	r1, [r7, #16]
 800ac32:	f000 faca 	bl	800b1ca <PTP_GetArray16>
 800ac36:	4602      	mov	r2, r0
 800ac38:	683b      	ldr	r3, [r7, #0]
 800ac3a:	f8c3 2370 	str.w	r2, [r3, #880]	@ 0x370
                                                  data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->CaptureFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800ac3e:	683b      	ldr	r3, [r7, #0]
 800ac40:	f8d3 3370 	ldr.w	r3, [r3, #880]	@ 0x370
 800ac44:	005a      	lsls	r2, r3, #1
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	4413      	add	r3, r2
 800ac4a:	3304      	adds	r3, #4
 800ac4c:	60fb      	str	r3, [r7, #12]
    dev_info->ImageFormats_len =  PTP_GetArray16((uint16_t *)(void *)&dev_info->ImageFormats,
 800ac4e:	683b      	ldr	r3, [r7, #0]
 800ac50:	f503 6088 	add.w	r0, r3, #1088	@ 0x440
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	330a      	adds	r3, #10
 800ac58:	461a      	mov	r2, r3
 800ac5a:	6939      	ldr	r1, [r7, #16]
 800ac5c:	f000 fab5 	bl	800b1ca <PTP_GetArray16>
 800ac60:	4602      	mov	r2, r0
 800ac62:	683b      	ldr	r3, [r7, #0]
 800ac64:	f8c3 243c 	str.w	r2, [r3, #1084]	@ 0x43c
                                                 data, PTP_di_OperationsSupported + totallen);

    totallen = totallen + (dev_info->ImageFormats_len * sizeof(uint16_t)) + sizeof(uint32_t);
 800ac68:	683b      	ldr	r3, [r7, #0]
 800ac6a:	f8d3 343c 	ldr.w	r3, [r3, #1084]	@ 0x43c
 800ac6e:	005a      	lsls	r2, r3, #1
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4413      	add	r3, r2
 800ac74:	3304      	adds	r3, #4
 800ac76:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Manufacturer, &data[PTP_di_OperationsSupported + totallen], &len);
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	f503 60a1 	add.w	r0, r3, #1288	@ 0x508
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	330a      	adds	r3, #10
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	4413      	add	r3, r2
 800ac86:	f107 020a 	add.w	r2, r7, #10
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	f000 fa6f 	bl	800b16e <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800ac90:	897b      	ldrh	r3, [r7, #10]
 800ac92:	005a      	lsls	r2, r3, #1
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	4413      	add	r3, r2
 800ac98:	3301      	adds	r3, #1
 800ac9a:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->Model, &data[PTP_di_OperationsSupported + totallen], &len);
 800ac9c:	683b      	ldr	r3, [r7, #0]
 800ac9e:	f203 6007 	addw	r0, r3, #1543	@ 0x607
 800aca2:	68fb      	ldr	r3, [r7, #12]
 800aca4:	330a      	adds	r3, #10
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	4413      	add	r3, r2
 800acaa:	f107 020a 	add.w	r2, r7, #10
 800acae:	4619      	mov	r1, r3
 800acb0:	f000 fa5d 	bl	800b16e <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800acb4:	897b      	ldrh	r3, [r7, #10]
 800acb6:	005a      	lsls	r2, r3, #1
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	4413      	add	r3, r2
 800acbc:	3301      	adds	r3, #1
 800acbe:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->DeviceVersion, &data[PTP_di_OperationsSupported + totallen], &len);
 800acc0:	683b      	ldr	r3, [r7, #0]
 800acc2:	f203 7006 	addw	r0, r3, #1798	@ 0x706
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	330a      	adds	r3, #10
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	4413      	add	r3, r2
 800acce:	f107 020a 	add.w	r2, r7, #10
 800acd2:	4619      	mov	r1, r3
 800acd4:	f000 fa4b 	bl	800b16e <PTP_GetString>

    totallen += (uint32_t)(len * 2U) + 1U;
 800acd8:	897b      	ldrh	r3, [r7, #10]
 800acda:	005a      	lsls	r2, r3, #1
 800acdc:	68fb      	ldr	r3, [r7, #12]
 800acde:	4413      	add	r3, r2
 800ace0:	3301      	adds	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
    PTP_GetString(dev_info->SerialNumber, &data[PTP_di_OperationsSupported + totallen], &len);
 800ace4:	683b      	ldr	r3, [r7, #0]
 800ace6:	f603 0005 	addw	r0, r3, #2053	@ 0x805
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	330a      	adds	r3, #10
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	4413      	add	r3, r2
 800acf2:	f107 020a 	add.w	r2, r7, #10
 800acf6:	4619      	mov	r1, r3
 800acf8:	f000 fa39 	bl	800b16e <PTP_GetString>
  }
}
 800acfc:	bf00      	nop
 800acfe:	3718      	adds	r7, #24
 800ad00:	46bd      	mov	sp, r7
 800ad02:	bd80      	pop	{r7, pc}

0800ad04 <PTP_GetStorageIDs>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageIDs(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *stor_ids)
{
 800ad04:	b580      	push	{r7, lr}
 800ad06:	b084      	sub	sp, #16
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	6078      	str	r0, [r7, #4]
 800ad0c:	6039      	str	r1, [r7, #0]
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ad14:	69db      	ldr	r3, [r3, #28]
 800ad16:	60fb      	str	r3, [r7, #12]
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800ad18:	68fb      	ldr	r3, [r7, #12]
 800ad1a:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800ad1e:	3310      	adds	r3, #16
 800ad20:	60bb      	str	r3, [r7, #8]

  stor_ids->n = PTP_GetArray32(stor_ids->Storage, data, 0U);
 800ad22:	683b      	ldr	r3, [r7, #0]
 800ad24:	3304      	adds	r3, #4
 800ad26:	2200      	movs	r2, #0
 800ad28:	68b9      	ldr	r1, [r7, #8]
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f000 fa8e 	bl	800b24c <PTP_GetArray32>
 800ad30:	4602      	mov	r2, r0
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	601a      	str	r2, [r3, #0]
}
 800ad36:	bf00      	nop
 800ad38:	3710      	adds	r7, #16
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd80      	pop	{r7, pc}

0800ad3e <PTP_GetStorageInfo>:
  * @param  phost: Host handle
  * @param  stor_ids: Storage IDsstructure
  * @retval None
  */
static void PTP_GetStorageInfo(USBH_HandleTypeDef *phost, uint32_t storage_id, PTP_StorageInfoTypedef *stor_info)
{
 800ad3e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad42:	b0c2      	sub	sp, #264	@ 0x108
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 800ad4a:	f8c7 10f0 	str.w	r1, [r7, #240]	@ 0xf0
 800ad4e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
  /* Prevent unused argument(s) compilation warning */
  UNUSED(storage_id);

  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800ad52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800ad56:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800ad5a:	69db      	ldr	r3, [r3, #28]
 800ad5c:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  uint8_t *data = MTP_Handle->ptp.data_container.payload.data;
 800ad60:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800ad64:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800ad68:	3310      	adds	r3, #16
 800ad6a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  uint16_t len;

  stor_info->StorageType = LE16(&data[PTP_si_StorageType]);
 800ad6e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ad72:	781b      	ldrb	r3, [r3, #0]
 800ad74:	461a      	mov	r2, r3
 800ad76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ad7a:	3301      	adds	r3, #1
 800ad7c:	781b      	ldrb	r3, [r3, #0]
 800ad7e:	021b      	lsls	r3, r3, #8
 800ad80:	b29b      	uxth	r3, r3
 800ad82:	4313      	orrs	r3, r2
 800ad84:	b29b      	uxth	r3, r3
 800ad86:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800ad8a:	8013      	strh	r3, [r2, #0]
  stor_info->FilesystemType = LE16(&data[PTP_si_FilesystemType]);
 800ad8c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ad90:	3302      	adds	r3, #2
 800ad92:	781b      	ldrb	r3, [r3, #0]
 800ad94:	461a      	mov	r2, r3
 800ad96:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ad9a:	3303      	adds	r3, #3
 800ad9c:	781b      	ldrb	r3, [r3, #0]
 800ad9e:	021b      	lsls	r3, r3, #8
 800ada0:	b29b      	uxth	r3, r3
 800ada2:	4313      	orrs	r3, r2
 800ada4:	b29b      	uxth	r3, r3
 800ada6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800adaa:	8053      	strh	r3, [r2, #2]
  stor_info->AccessCapability = LE16(&data[PTP_si_AccessCapability]);
 800adac:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800adb0:	3304      	adds	r3, #4
 800adb2:	781b      	ldrb	r3, [r3, #0]
 800adb4:	461a      	mov	r2, r3
 800adb6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800adba:	3305      	adds	r3, #5
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	021b      	lsls	r3, r3, #8
 800adc0:	b29b      	uxth	r3, r3
 800adc2:	4313      	orrs	r3, r2
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 800adca:	8093      	strh	r3, [r2, #4]
  stor_info->MaxCapability = LE64(&data[PTP_si_MaxCapability]);
 800adcc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800add0:	3306      	adds	r3, #6
 800add2:	781b      	ldrb	r3, [r3, #0]
 800add4:	b2db      	uxtb	r3, r3
 800add6:	2200      	movs	r2, #0
 800add8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800addc:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 800ade0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ade4:	3307      	adds	r3, #7
 800ade6:	781b      	ldrb	r3, [r3, #0]
 800ade8:	b2db      	uxtb	r3, r3
 800adea:	2200      	movs	r2, #0
 800adec:	461c      	mov	r4, r3
 800adee:	4615      	mov	r5, r2
 800adf0:	f04f 0200 	mov.w	r2, #0
 800adf4:	f04f 0300 	mov.w	r3, #0
 800adf8:	022b      	lsls	r3, r5, #8
 800adfa:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800adfe:	0222      	lsls	r2, r4, #8
 800ae00:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800ae04:	4621      	mov	r1, r4
 800ae06:	ea41 0a02 	orr.w	sl, r1, r2
 800ae0a:	4629      	mov	r1, r5
 800ae0c:	ea41 0b03 	orr.w	fp, r1, r3
 800ae10:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae14:	3308      	adds	r3, #8
 800ae16:	781b      	ldrb	r3, [r3, #0]
 800ae18:	b2db      	uxtb	r3, r3
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800ae20:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800ae24:	f04f 0200 	mov.w	r2, #0
 800ae28:	f04f 0300 	mov.w	r3, #0
 800ae2c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800ae30:	4629      	mov	r1, r5
 800ae32:	040b      	lsls	r3, r1, #16
 800ae34:	4621      	mov	r1, r4
 800ae36:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	040a      	lsls	r2, r1, #16
 800ae3e:	ea4a 0102 	orr.w	r1, sl, r2
 800ae42:	f8c7 10d0 	str.w	r1, [r7, #208]	@ 0xd0
 800ae46:	ea4b 0303 	orr.w	r3, fp, r3
 800ae4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800ae4e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae52:	3309      	adds	r3, #9
 800ae54:	781b      	ldrb	r3, [r3, #0]
 800ae56:	b2db      	uxtb	r3, r3
 800ae58:	2200      	movs	r2, #0
 800ae5a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800ae5e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800ae62:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800ae66:	460b      	mov	r3, r1
 800ae68:	ea4f 2913 	mov.w	r9, r3, lsr #8
 800ae6c:	460b      	mov	r3, r1
 800ae6e:	ea4f 6803 	mov.w	r8, r3, lsl #24
 800ae72:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800ae76:	460b      	mov	r3, r1
 800ae78:	ea43 0308 	orr.w	r3, r3, r8
 800ae7c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae80:	4613      	mov	r3, r2
 800ae82:	ea43 0309 	orr.w	r3, r3, r9
 800ae86:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ae8a:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800ae8e:	330a      	adds	r3, #10
 800ae90:	781b      	ldrb	r3, [r3, #0]
 800ae92:	b2db      	uxtb	r3, r3
 800ae94:	2200      	movs	r2, #0
 800ae96:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800ae9a:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800ae9e:	f04f 0200 	mov.w	r2, #0
 800aea2:	f04f 0300 	mov.w	r3, #0
 800aea6:	f8d7 10b8 	ldr.w	r1, [r7, #184]	@ 0xb8
 800aeaa:	000b      	movs	r3, r1
 800aeac:	2200      	movs	r2, #0
 800aeae:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 800aeb2:	4621      	mov	r1, r4
 800aeb4:	4311      	orrs	r1, r2
 800aeb6:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 800aeba:	4629      	mov	r1, r5
 800aebc:	4319      	orrs	r1, r3
 800aebe:	f8c7 10b4 	str.w	r1, [r7, #180]	@ 0xb4
 800aec2:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aec6:	330b      	adds	r3, #11
 800aec8:	781b      	ldrb	r3, [r3, #0]
 800aeca:	b2db      	uxtb	r3, r3
 800aecc:	2200      	movs	r2, #0
 800aece:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800aed2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800aed6:	f04f 0200 	mov.w	r2, #0
 800aeda:	f04f 0300 	mov.w	r3, #0
 800aede:	f8d7 10a8 	ldr.w	r1, [r7, #168]	@ 0xa8
 800aee2:	020b      	lsls	r3, r1, #8
 800aee4:	2200      	movs	r2, #0
 800aee6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800aeea:	4621      	mov	r1, r4
 800aeec:	4311      	orrs	r1, r2
 800aeee:	f8c7 10a0 	str.w	r1, [r7, #160]	@ 0xa0
 800aef2:	4629      	mov	r1, r5
 800aef4:	4319      	orrs	r1, r3
 800aef6:	f8c7 10a4 	str.w	r1, [r7, #164]	@ 0xa4
 800aefa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800aefe:	330c      	adds	r3, #12
 800af00:	781b      	ldrb	r3, [r3, #0]
 800af02:	b2db      	uxtb	r3, r3
 800af04:	2200      	movs	r2, #0
 800af06:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800af0a:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800af0e:	f04f 0200 	mov.w	r2, #0
 800af12:	f04f 0300 	mov.w	r3, #0
 800af16:	f8d7 1098 	ldr.w	r1, [r7, #152]	@ 0x98
 800af1a:	040b      	lsls	r3, r1, #16
 800af1c:	2200      	movs	r2, #0
 800af1e:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 800af22:	4621      	mov	r1, r4
 800af24:	4311      	orrs	r1, r2
 800af26:	f8c7 1090 	str.w	r1, [r7, #144]	@ 0x90
 800af2a:	4629      	mov	r1, r5
 800af2c:	4319      	orrs	r1, r3
 800af2e:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800af32:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af36:	330d      	adds	r3, #13
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	b2db      	uxtb	r3, r3
 800af3c:	2200      	movs	r2, #0
 800af3e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800af42:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800af46:	f04f 0200 	mov.w	r2, #0
 800af4a:	f04f 0300 	mov.w	r3, #0
 800af4e:	f8d7 1088 	ldr.w	r1, [r7, #136]	@ 0x88
 800af52:	060b      	lsls	r3, r1, #24
 800af54:	2200      	movs	r2, #0
 800af56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800af5a:	4621      	mov	r1, r4
 800af5c:	4311      	orrs	r1, r2
 800af5e:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800af62:	4629      	mov	r1, r5
 800af64:	4319      	orrs	r1, r3
 800af66:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 800af6a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800af6e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800af72:	e9c3 1202 	strd	r1, r2, [r3, #8]
  stor_info->FreeSpaceInBytes = LE64(&data[PTP_si_FreeSpaceInBytes]);
 800af76:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af7a:	330e      	adds	r3, #14
 800af7c:	781b      	ldrb	r3, [r3, #0]
 800af7e:	b2db      	uxtb	r3, r3
 800af80:	2200      	movs	r2, #0
 800af82:	67bb      	str	r3, [r7, #120]	@ 0x78
 800af84:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800af86:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800af8a:	330f      	adds	r3, #15
 800af8c:	781b      	ldrb	r3, [r3, #0]
 800af8e:	b2db      	uxtb	r3, r3
 800af90:	2200      	movs	r2, #0
 800af92:	673b      	str	r3, [r7, #112]	@ 0x70
 800af94:	677a      	str	r2, [r7, #116]	@ 0x74
 800af96:	f04f 0200 	mov.w	r2, #0
 800af9a:	f04f 0300 	mov.w	r3, #0
 800af9e:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 800afa2:	4629      	mov	r1, r5
 800afa4:	020b      	lsls	r3, r1, #8
 800afa6:	4621      	mov	r1, r4
 800afa8:	ea43 6311 	orr.w	r3, r3, r1, lsr #24
 800afac:	4621      	mov	r1, r4
 800afae:	020a      	lsls	r2, r1, #8
 800afb0:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800afb4:	4621      	mov	r1, r4
 800afb6:	4311      	orrs	r1, r2
 800afb8:	66b9      	str	r1, [r7, #104]	@ 0x68
 800afba:	4629      	mov	r1, r5
 800afbc:	4319      	orrs	r1, r3
 800afbe:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800afc0:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800afc4:	3310      	adds	r3, #16
 800afc6:	781b      	ldrb	r3, [r3, #0]
 800afc8:	b2db      	uxtb	r3, r3
 800afca:	2200      	movs	r2, #0
 800afcc:	663b      	str	r3, [r7, #96]	@ 0x60
 800afce:	667a      	str	r2, [r7, #100]	@ 0x64
 800afd0:	f04f 0200 	mov.w	r2, #0
 800afd4:	f04f 0300 	mov.w	r3, #0
 800afd8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800afdc:	4629      	mov	r1, r5
 800afde:	040b      	lsls	r3, r1, #16
 800afe0:	4621      	mov	r1, r4
 800afe2:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800afe6:	4621      	mov	r1, r4
 800afe8:	040a      	lsls	r2, r1, #16
 800afea:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800afee:	4621      	mov	r1, r4
 800aff0:	4311      	orrs	r1, r2
 800aff2:	65b9      	str	r1, [r7, #88]	@ 0x58
 800aff4:	4629      	mov	r1, r5
 800aff6:	4319      	orrs	r1, r3
 800aff8:	65f9      	str	r1, [r7, #92]	@ 0x5c
 800affa:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800affe:	3311      	adds	r3, #17
 800b000:	781b      	ldrb	r3, [r3, #0]
 800b002:	b2db      	uxtb	r3, r3
 800b004:	2200      	movs	r2, #0
 800b006:	653b      	str	r3, [r7, #80]	@ 0x50
 800b008:	657a      	str	r2, [r7, #84]	@ 0x54
 800b00a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800b00e:	460b      	mov	r3, r1
 800b010:	0a1b      	lsrs	r3, r3, #8
 800b012:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b014:	460b      	mov	r3, r1
 800b016:	061b      	lsls	r3, r3, #24
 800b018:	64bb      	str	r3, [r7, #72]	@ 0x48
 800b01a:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800b01e:	4623      	mov	r3, r4
 800b020:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 800b024:	4602      	mov	r2, r0
 800b026:	4313      	orrs	r3, r2
 800b028:	643b      	str	r3, [r7, #64]	@ 0x40
 800b02a:	462b      	mov	r3, r5
 800b02c:	460a      	mov	r2, r1
 800b02e:	4313      	orrs	r3, r2
 800b030:	647b      	str	r3, [r7, #68]	@ 0x44
 800b032:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b036:	3312      	adds	r3, #18
 800b038:	781b      	ldrb	r3, [r3, #0]
 800b03a:	b2db      	uxtb	r3, r3
 800b03c:	2200      	movs	r2, #0
 800b03e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b040:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b042:	f04f 0200 	mov.w	r2, #0
 800b046:	f04f 0300 	mov.w	r3, #0
 800b04a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b04c:	000b      	movs	r3, r1
 800b04e:	2200      	movs	r2, #0
 800b050:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 800b054:	4621      	mov	r1, r4
 800b056:	4311      	orrs	r1, r2
 800b058:	6339      	str	r1, [r7, #48]	@ 0x30
 800b05a:	4629      	mov	r1, r5
 800b05c:	4319      	orrs	r1, r3
 800b05e:	6379      	str	r1, [r7, #52]	@ 0x34
 800b060:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b064:	3313      	adds	r3, #19
 800b066:	781b      	ldrb	r3, [r3, #0]
 800b068:	b2db      	uxtb	r3, r3
 800b06a:	2200      	movs	r2, #0
 800b06c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b06e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b070:	f04f 0200 	mov.w	r2, #0
 800b074:	f04f 0300 	mov.w	r3, #0
 800b078:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b07a:	020b      	lsls	r3, r1, #8
 800b07c:	2200      	movs	r2, #0
 800b07e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b082:	4621      	mov	r1, r4
 800b084:	4311      	orrs	r1, r2
 800b086:	6239      	str	r1, [r7, #32]
 800b088:	4629      	mov	r1, r5
 800b08a:	4319      	orrs	r1, r3
 800b08c:	6279      	str	r1, [r7, #36]	@ 0x24
 800b08e:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b092:	3314      	adds	r3, #20
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	b2db      	uxtb	r3, r3
 800b098:	2200      	movs	r2, #0
 800b09a:	61bb      	str	r3, [r7, #24]
 800b09c:	61fa      	str	r2, [r7, #28]
 800b09e:	f04f 0200 	mov.w	r2, #0
 800b0a2:	f04f 0300 	mov.w	r3, #0
 800b0a6:	69b9      	ldr	r1, [r7, #24]
 800b0a8:	040b      	lsls	r3, r1, #16
 800b0aa:	2200      	movs	r2, #0
 800b0ac:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800b0b0:	4621      	mov	r1, r4
 800b0b2:	4311      	orrs	r1, r2
 800b0b4:	6139      	str	r1, [r7, #16]
 800b0b6:	4629      	mov	r1, r5
 800b0b8:	4319      	orrs	r1, r3
 800b0ba:	6179      	str	r1, [r7, #20]
 800b0bc:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b0c0:	3315      	adds	r3, #21
 800b0c2:	781b      	ldrb	r3, [r3, #0]
 800b0c4:	b2db      	uxtb	r3, r3
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	60bb      	str	r3, [r7, #8]
 800b0ca:	60fa      	str	r2, [r7, #12]
 800b0cc:	f04f 0200 	mov.w	r2, #0
 800b0d0:	f04f 0300 	mov.w	r3, #0
 800b0d4:	68b9      	ldr	r1, [r7, #8]
 800b0d6:	060b      	lsls	r3, r1, #24
 800b0d8:	2200      	movs	r2, #0
 800b0da:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800b0de:	4621      	mov	r1, r4
 800b0e0:	4311      	orrs	r1, r2
 800b0e2:	6039      	str	r1, [r7, #0]
 800b0e4:	4629      	mov	r1, r5
 800b0e6:	4319      	orrs	r1, r3
 800b0e8:	6079      	str	r1, [r7, #4]
 800b0ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b0ee:	e9d7 1200 	ldrd	r1, r2, [r7]
 800b0f2:	e9c3 1204 	strd	r1, r2, [r3, #16]
  stor_info->FreeSpaceInImages = LE32(&data[PTP_si_FreeSpaceInImages]);
 800b0f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b0fa:	3316      	adds	r3, #22
 800b0fc:	781b      	ldrb	r3, [r3, #0]
 800b0fe:	461a      	mov	r2, r3
 800b100:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b104:	3317      	adds	r3, #23
 800b106:	781b      	ldrb	r3, [r3, #0]
 800b108:	021b      	lsls	r3, r3, #8
 800b10a:	431a      	orrs	r2, r3
 800b10c:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b110:	3318      	adds	r3, #24
 800b112:	781b      	ldrb	r3, [r3, #0]
 800b114:	041b      	lsls	r3, r3, #16
 800b116:	431a      	orrs	r2, r3
 800b118:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b11c:	3319      	adds	r3, #25
 800b11e:	781b      	ldrb	r3, [r3, #0]
 800b120:	061b      	lsls	r3, r3, #24
 800b122:	431a      	orrs	r2, r3
 800b124:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b128:	619a      	str	r2, [r3, #24]

  PTP_GetString(stor_info->StorageDescription, &data[PTP_si_StorageDescription], &len);
 800b12a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b12e:	f103 001c 	add.w	r0, r3, #28
 800b132:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 800b136:	331a      	adds	r3, #26
 800b138:	f107 02fe 	add.w	r2, r7, #254	@ 0xfe
 800b13c:	4619      	mov	r1, r3
 800b13e:	f000 f816 	bl	800b16e <PTP_GetString>
  PTP_GetString(stor_info->VolumeLabel, &data[PTP_si_StorageDescription + (len * 2U) + 1U], &len);
 800b142:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800b146:	f203 101b 	addw	r0, r3, #283	@ 0x11b
 800b14a:	f8b7 30fe 	ldrh.w	r3, [r7, #254]	@ 0xfe
 800b14e:	005b      	lsls	r3, r3, #1
 800b150:	331b      	adds	r3, #27
 800b152:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 800b156:	4413      	add	r3, r2
 800b158:	f107 02fe 	add.w	r2, r7, #254	@ 0xfe
 800b15c:	4619      	mov	r1, r3
 800b15e:	f000 f806 	bl	800b16e <PTP_GetString>
}
 800b162:	bf00      	nop
 800b164:	f507 7784 	add.w	r7, r7, #264	@ 0x108
 800b168:	46bd      	mov	sp, r7
 800b16a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800b16e <PTP_GetString>:
  * @param  str: ascii string
  * @param  data: Device info structure
  * @retval None
  */
static void PTP_GetString(uint8_t *str, uint8_t *data, uint16_t *len)
{
 800b16e:	b480      	push	{r7}
 800b170:	b087      	sub	sp, #28
 800b172:	af00      	add	r7, sp, #0
 800b174:	60f8      	str	r0, [r7, #12]
 800b176:	60b9      	str	r1, [r7, #8]
 800b178:	607a      	str	r2, [r7, #4]
  uint16_t strlength;
  uint16_t idx;

  *len = data[0];
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	461a      	mov	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	801a      	strh	r2, [r3, #0]
  strlength = (uint16_t)(2U * (uint32_t)data[0]);
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	781b      	ldrb	r3, [r3, #0]
 800b188:	005b      	lsls	r3, r3, #1
 800b18a:	82bb      	strh	r3, [r7, #20]
  data ++; /* Adjust the offset ignoring the String Len */
 800b18c:	68bb      	ldr	r3, [r7, #8]
 800b18e:	3301      	adds	r3, #1
 800b190:	60bb      	str	r3, [r7, #8]

  for (idx = 0U; idx < strlength; idx += 2U)
 800b192:	2300      	movs	r3, #0
 800b194:	82fb      	strh	r3, [r7, #22]
 800b196:	e00b      	b.n	800b1b0 <PTP_GetString+0x42>
  {
    /* Copy Only the string and ignore the UNICODE ID, hence add the src */
    *str = data[idx];
 800b198:	8afb      	ldrh	r3, [r7, #22]
 800b19a:	68ba      	ldr	r2, [r7, #8]
 800b19c:	4413      	add	r3, r2
 800b19e:	781a      	ldrb	r2, [r3, #0]
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	701a      	strb	r2, [r3, #0]
    str++;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	3301      	adds	r3, #1
 800b1a8:	60fb      	str	r3, [r7, #12]
  for (idx = 0U; idx < strlength; idx += 2U)
 800b1aa:	8afb      	ldrh	r3, [r7, #22]
 800b1ac:	3302      	adds	r3, #2
 800b1ae:	82fb      	strh	r3, [r7, #22]
 800b1b0:	8afa      	ldrh	r2, [r7, #22]
 800b1b2:	8abb      	ldrh	r3, [r7, #20]
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d3ef      	bcc.n	800b198 <PTP_GetString+0x2a>
  }
  *str = 0U; /* mark end of string */
 800b1b8:	68fb      	ldr	r3, [r7, #12]
 800b1ba:	2200      	movs	r2, #0
 800b1bc:	701a      	strb	r2, [r3, #0]
}
 800b1be:	bf00      	nop
 800b1c0:	371c      	adds	r7, #28
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1c8:	4770      	bx	lr

0800b1ca <PTP_GetArray16>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray16(uint16_t *array, uint8_t *data, uint32_t offset)
{
 800b1ca:	b480      	push	{r7}
 800b1cc:	b087      	sub	sp, #28
 800b1ce:	af00      	add	r7, sp, #0
 800b1d0:	60f8      	str	r0, [r7, #12]
 800b1d2:	60b9      	str	r1, [r7, #8]
 800b1d4:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800b1da:	68ba      	ldr	r2, [r7, #8]
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	4413      	add	r3, r2
 800b1e0:	781b      	ldrb	r3, [r3, #0]
 800b1e2:	4619      	mov	r1, r3
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	3301      	adds	r3, #1
 800b1e8:	68ba      	ldr	r2, [r7, #8]
 800b1ea:	4413      	add	r3, r2
 800b1ec:	781b      	ldrb	r3, [r3, #0]
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	ea41 0203 	orr.w	r2, r1, r3
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	3302      	adds	r3, #2
 800b1f8:	68b9      	ldr	r1, [r7, #8]
 800b1fa:	440b      	add	r3, r1
 800b1fc:	781b      	ldrb	r3, [r3, #0]
 800b1fe:	041b      	lsls	r3, r3, #16
 800b200:	431a      	orrs	r2, r3
 800b202:	687b      	ldr	r3, [r7, #4]
 800b204:	3303      	adds	r3, #3
 800b206:	68b9      	ldr	r1, [r7, #8]
 800b208:	440b      	add	r3, r1
 800b20a:	781b      	ldrb	r3, [r3, #0]
 800b20c:	061b      	lsls	r3, r3, #24
 800b20e:	4313      	orrs	r3, r2
 800b210:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800b212:	e010      	b.n	800b236 <PTP_GetArray16+0x6c>
  {
    array[idx] = (uint16_t)data[offset + (sizeof(uint16_t) * (idx + 2U))];
 800b214:	697b      	ldr	r3, [r7, #20]
 800b216:	3302      	adds	r3, #2
 800b218:	005a      	lsls	r2, r3, #1
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4413      	add	r3, r2
 800b21e:	68ba      	ldr	r2, [r7, #8]
 800b220:	4413      	add	r3, r2
 800b222:	7819      	ldrb	r1, [r3, #0]
 800b224:	697b      	ldr	r3, [r7, #20]
 800b226:	005b      	lsls	r3, r3, #1
 800b228:	68fa      	ldr	r2, [r7, #12]
 800b22a:	4413      	add	r3, r2
 800b22c:	460a      	mov	r2, r1
 800b22e:	801a      	strh	r2, [r3, #0]
    idx++;
 800b230:	697b      	ldr	r3, [r7, #20]
 800b232:	3301      	adds	r3, #1
 800b234:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800b236:	693a      	ldr	r2, [r7, #16]
 800b238:	697b      	ldr	r3, [r7, #20]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d8ea      	bhi.n	800b214 <PTP_GetArray16+0x4a>
  }
  return size;
 800b23e:	693b      	ldr	r3, [r7, #16]
}
 800b240:	4618      	mov	r0, r3
 800b242:	371c      	adds	r7, #28
 800b244:	46bd      	mov	sp, r7
 800b246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b24a:	4770      	bx	lr

0800b24c <PTP_GetArray32>:
  * @param  data: Device info structure
  * @retval None
  */

static uint32_t PTP_GetArray32(uint32_t *array, uint8_t *data, uint32_t offset)
{
 800b24c:	b480      	push	{r7}
 800b24e:	b087      	sub	sp, #28
 800b250:	af00      	add	r7, sp, #0
 800b252:	60f8      	str	r0, [r7, #12]
 800b254:	60b9      	str	r1, [r7, #8]
 800b256:	607a      	str	r2, [r7, #4]
  uint32_t size, idx = 0U;
 800b258:	2300      	movs	r3, #0
 800b25a:	617b      	str	r3, [r7, #20]

  size = LE32(&data[offset]);
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	687b      	ldr	r3, [r7, #4]
 800b260:	4413      	add	r3, r2
 800b262:	781b      	ldrb	r3, [r3, #0]
 800b264:	4619      	mov	r1, r3
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	3301      	adds	r3, #1
 800b26a:	68ba      	ldr	r2, [r7, #8]
 800b26c:	4413      	add	r3, r2
 800b26e:	781b      	ldrb	r3, [r3, #0]
 800b270:	021b      	lsls	r3, r3, #8
 800b272:	ea41 0203 	orr.w	r2, r1, r3
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	3302      	adds	r3, #2
 800b27a:	68b9      	ldr	r1, [r7, #8]
 800b27c:	440b      	add	r3, r1
 800b27e:	781b      	ldrb	r3, [r3, #0]
 800b280:	041b      	lsls	r3, r3, #16
 800b282:	431a      	orrs	r2, r3
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	3303      	adds	r3, #3
 800b288:	68b9      	ldr	r1, [r7, #8]
 800b28a:	440b      	add	r3, r1
 800b28c:	781b      	ldrb	r3, [r3, #0]
 800b28e:	061b      	lsls	r3, r3, #24
 800b290:	4313      	orrs	r3, r2
 800b292:	613b      	str	r3, [r7, #16]
  while (size > idx)
 800b294:	e033      	b.n	800b2fe <PTP_GetArray32+0xb2>
  {
    array[idx] = LE32(&data[offset + (sizeof(uint32_t) * (idx + 1U))]);
 800b296:	697b      	ldr	r3, [r7, #20]
 800b298:	3301      	adds	r3, #1
 800b29a:	009a      	lsls	r2, r3, #2
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	4413      	add	r3, r2
 800b2a0:	68ba      	ldr	r2, [r7, #8]
 800b2a2:	4413      	add	r3, r2
 800b2a4:	781b      	ldrb	r3, [r3, #0]
 800b2a6:	4619      	mov	r1, r3
 800b2a8:	697b      	ldr	r3, [r7, #20]
 800b2aa:	3301      	adds	r3, #1
 800b2ac:	009a      	lsls	r2, r3, #2
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	4413      	add	r3, r2
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	68ba      	ldr	r2, [r7, #8]
 800b2b6:	4413      	add	r3, r2
 800b2b8:	781b      	ldrb	r3, [r3, #0]
 800b2ba:	021b      	lsls	r3, r3, #8
 800b2bc:	ea41 0203 	orr.w	r2, r1, r3
 800b2c0:	697b      	ldr	r3, [r7, #20]
 800b2c2:	3301      	adds	r3, #1
 800b2c4:	0099      	lsls	r1, r3, #2
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	440b      	add	r3, r1
 800b2ca:	3302      	adds	r3, #2
 800b2cc:	68b9      	ldr	r1, [r7, #8]
 800b2ce:	440b      	add	r3, r1
 800b2d0:	781b      	ldrb	r3, [r3, #0]
 800b2d2:	041b      	lsls	r3, r3, #16
 800b2d4:	ea42 0103 	orr.w	r1, r2, r3
 800b2d8:	697b      	ldr	r3, [r7, #20]
 800b2da:	3301      	adds	r3, #1
 800b2dc:	009a      	lsls	r2, r3, #2
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4413      	add	r3, r2
 800b2e2:	3303      	adds	r3, #3
 800b2e4:	68ba      	ldr	r2, [r7, #8]
 800b2e6:	4413      	add	r3, r2
 800b2e8:	781b      	ldrb	r3, [r3, #0]
 800b2ea:	061a      	lsls	r2, r3, #24
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	009b      	lsls	r3, r3, #2
 800b2f0:	68f8      	ldr	r0, [r7, #12]
 800b2f2:	4403      	add	r3, r0
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	601a      	str	r2, [r3, #0]
    idx++;
 800b2f8:	697b      	ldr	r3, [r7, #20]
 800b2fa:	3301      	adds	r3, #1
 800b2fc:	617b      	str	r3, [r7, #20]
  while (size > idx)
 800b2fe:	693a      	ldr	r2, [r7, #16]
 800b300:	697b      	ldr	r3, [r7, #20]
 800b302:	429a      	cmp	r2, r3
 800b304:	d8c7      	bhi.n	800b296 <PTP_GetArray32+0x4a>
  }
  return size;
 800b306:	693b      	ldr	r3, [r7, #16]
}
 800b308:	4618      	mov	r0, r3
 800b30a:	371c      	adds	r7, #28
 800b30c:	46bd      	mov	sp, r7
 800b30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b312:	4770      	bx	lr

0800b314 <USBH_PTP_OpenSession>:
  * @param  phost: Host handle
  * @param  session: Session ID (MUST BE > 0U)
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_OpenSession(USBH_HandleTypeDef *phost, uint32_t session)
{
 800b314:	b580      	push	{r7, lr}
 800b316:	b08e      	sub	sp, #56	@ 0x38
 800b318:	af00      	add	r7, sp, #0
 800b31a:	6078      	str	r0, [r7, #4]
 800b31c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b31e:	2301      	movs	r3, #1
 800b320:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b32a:	69db      	ldr	r3, [r3, #28]
 800b32c:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800b32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b330:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b334:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d002      	beq.n	800b342 <USBH_PTP_OpenSession+0x2e>
 800b33c:	2b02      	cmp	r3, #2
 800b33e:	d041      	beq.n	800b3c4 <USBH_PTP_OpenSession+0xb0>
    case PTP_REQ_WAIT:
      status = USBH_PTP_Process(phost);
      break;

    default:
      break;
 800b340:	e047      	b.n	800b3d2 <USBH_PTP_OpenSession+0xbe>
      MTP_Handle->ptp.transaction_id = 0x00000000U;
 800b342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b344:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b348:	461a      	mov	r2, r3
 800b34a:	2300      	movs	r3, #0
 800b34c:	f8c2 31a4 	str.w	r3, [r2, #420]	@ 0x1a4
      MTP_Handle->ptp.session_id = session;
 800b350:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b352:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b356:	461a      	mov	r2, r3
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	f8c2 31a8 	str.w	r3, [r2, #424]	@ 0x1a8
      MTP_Handle->ptp.flags = PTP_DP_NODATA;
 800b35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b360:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b364:	461a      	mov	r2, r3
 800b366:	2300      	movs	r3, #0
 800b368:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      ptp_container.Code = PTP_OC_OpenSession;
 800b36c:	f241 0302 	movw	r3, #4098	@ 0x1002
 800b370:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = session;
 800b372:	683b      	ldr	r3, [r7, #0]
 800b374:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id ++;
 800b376:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b378:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b37c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b380:	1c5a      	adds	r2, r3, #1
 800b382:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b384:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800b388:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800b38c:	617b      	str	r3, [r7, #20]
      ptp_container.Param1 = session;
 800b38e:	683b      	ldr	r3, [r7, #0]
 800b390:	61bb      	str	r3, [r7, #24]
      ptp_container.Nparam = 1U;
 800b392:	2301      	movs	r3, #1
 800b394:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800b398:	f107 030c 	add.w	r3, r7, #12
 800b39c:	4619      	mov	r1, r3
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f7ff fa64 	bl	800a86c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800b3a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3a6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3aa:	2201      	movs	r2, #1
 800b3ac:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800b3b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3b2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3b6:	2202      	movs	r2, #2
 800b3b8:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800b3bc:	2301      	movs	r3, #1
 800b3be:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800b3c2:	e006      	b.n	800b3d2 <USBH_PTP_OpenSession+0xbe>
      status = USBH_PTP_Process(phost);
 800b3c4:	6878      	ldr	r0, [r7, #4]
 800b3c6:	f7fe ffbb 	bl	800a340 <USBH_PTP_Process>
 800b3ca:	4603      	mov	r3, r0
 800b3cc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800b3d0:	bf00      	nop
  }
  return status;
 800b3d2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3738      	adds	r7, #56	@ 0x38
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <USBH_PTP_GetDeviceInfo>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetDeviceInfo(USBH_HandleTypeDef *phost, PTP_DeviceInfoTypedef *dev_info)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b08e      	sub	sp, #56	@ 0x38
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
 800b3e6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b3e8:	2301      	movs	r3, #1
 800b3ea:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b3f4:	69db      	ldr	r3, [r3, #28]
 800b3f6:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800b3f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b3fa:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b3fe:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800b402:	2b01      	cmp	r3, #1
 800b404:	d002      	beq.n	800b40c <USBH_PTP_GetDeviceInfo+0x2e>
 800b406:	2b02      	cmp	r3, #2
 800b408:	d053      	beq.n	800b4b2 <USBH_PTP_GetDeviceInfo+0xd4>
        PTP_DecodeDeviceInfo(phost, dev_info);
      }
      break;

    default:
      break;
 800b40a:	e061      	b.n	800b4d0 <USBH_PTP_GetDeviceInfo+0xf2>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800b40c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b40e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b412:	461a      	mov	r2, r3
 800b414:	2302      	movs	r3, #2
 800b416:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800b41a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b41c:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800b420:	3304      	adds	r3, #4
 800b422:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b424:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b428:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800b42c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b42e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b432:	461a      	mov	r2, r3
 800b434:	2300      	movs	r3, #0
 800b436:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800b43a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b43c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b440:	461a      	mov	r2, r3
 800b442:	2300      	movs	r3, #0
 800b444:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800b448:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b44a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b44e:	461a      	mov	r2, r3
 800b450:	2300      	movs	r3, #0
 800b452:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetDeviceInfo;
 800b456:	f241 0301 	movw	r3, #4097	@ 0x1001
 800b45a:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800b45c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b45e:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b462:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800b466:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800b468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b46a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b46e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b472:	1c5a      	adds	r2, r3, #1
 800b474:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b476:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800b47a:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800b47e:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800b480:	2300      	movs	r3, #0
 800b482:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800b486:	f107 030c 	add.w	r3, r7, #12
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7ff f9ed 	bl	800a86c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800b492:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b494:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b498:	2201      	movs	r2, #1
 800b49a:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800b49e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800b4aa:	2301      	movs	r3, #1
 800b4ac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800b4b0:	e00e      	b.n	800b4d0 <USBH_PTP_GetDeviceInfo+0xf2>
      status = USBH_PTP_Process(phost);
 800b4b2:	6878      	ldr	r0, [r7, #4]
 800b4b4:	f7fe ff44 	bl	800a340 <USBH_PTP_Process>
 800b4b8:	4603      	mov	r3, r0
 800b4ba:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (status == USBH_OK)
 800b4be:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b4c2:	2b00      	cmp	r3, #0
 800b4c4:	d103      	bne.n	800b4ce <USBH_PTP_GetDeviceInfo+0xf0>
        PTP_DecodeDeviceInfo(phost, dev_info);
 800b4c6:	6839      	ldr	r1, [r7, #0]
 800b4c8:	6878      	ldr	r0, [r7, #4]
 800b4ca:	f7ff fb07 	bl	800aadc <PTP_DecodeDeviceInfo>
      break;
 800b4ce:	bf00      	nop
  }
  return status;
 800b4d0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b4d4:	4618      	mov	r0, r3
 800b4d6:	3738      	adds	r7, #56	@ 0x38
 800b4d8:	46bd      	mov	sp, r7
 800b4da:	bd80      	pop	{r7, pc}

0800b4dc <USBH_PTP_GetStorageIds>:
  * @param  phost: Host handle
  * @param  dev_info: Device info structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageIds(USBH_HandleTypeDef *phost, PTP_StorageIDsTypedef *storage_ids)
{
 800b4dc:	b580      	push	{r7, lr}
 800b4de:	b08e      	sub	sp, #56	@ 0x38
 800b4e0:	af00      	add	r7, sp, #0
 800b4e2:	6078      	str	r0, [r7, #4]
 800b4e4:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_BUSY;
 800b4e6:	2301      	movs	r3, #1
 800b4e8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
  MTP_HandleTypeDef *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	633b      	str	r3, [r7, #48]	@ 0x30
  PTP_ContainerTypedef ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800b4f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b4f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b4fc:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800b500:	2b01      	cmp	r3, #1
 800b502:	d002      	beq.n	800b50a <USBH_PTP_GetStorageIds+0x2e>
 800b504:	2b02      	cmp	r3, #2
 800b506:	d053      	beq.n	800b5b0 <USBH_PTP_GetStorageIds+0xd4>
        PTP_GetStorageIDs(phost, storage_ids);
      }
      break;

    default:
      break;
 800b508:	e061      	b.n	800b5ce <USBH_PTP_GetStorageIds+0xf2>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800b50a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b50c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b510:	461a      	mov	r2, r3
 800b512:	2302      	movs	r3, #2
 800b514:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800b518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b51a:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800b51e:	3304      	adds	r3, #4
 800b520:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b522:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b526:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800b52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b52c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b530:	461a      	mov	r2, r3
 800b532:	2300      	movs	r3, #0
 800b534:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800b538:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b53a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b53e:	461a      	mov	r2, r3
 800b540:	2300      	movs	r3, #0
 800b542:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800b546:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b548:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b54c:	461a      	mov	r2, r3
 800b54e:	2300      	movs	r3, #0
 800b550:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetStorageIDs;
 800b554:	f241 0304 	movw	r3, #4100	@ 0x1004
 800b558:	81bb      	strh	r3, [r7, #12]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800b55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b55c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b560:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800b564:	613b      	str	r3, [r7, #16]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800b566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b568:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b56c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b570:	1c5a      	adds	r2, r3, #1
 800b572:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800b574:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800b578:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800b57c:	617b      	str	r3, [r7, #20]
      ptp_container.Nparam = 0U;
 800b57e:	2300      	movs	r3, #0
 800b580:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800b584:	f107 030c 	add.w	r3, r7, #12
 800b588:	4619      	mov	r1, r3
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff f96e 	bl	800a86c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800b590:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b592:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b596:	2201      	movs	r2, #1
 800b598:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800b59c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b59e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5a2:	2202      	movs	r2, #2
 800b5a4:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      break;
 800b5ae:	e00e      	b.n	800b5ce <USBH_PTP_GetStorageIds+0xf2>
      status = USBH_PTP_Process(phost);
 800b5b0:	6878      	ldr	r0, [r7, #4]
 800b5b2:	f7fe fec5 	bl	800a340 <USBH_PTP_Process>
 800b5b6:	4603      	mov	r3, r0
 800b5b8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
      if (status == USBH_OK)
 800b5bc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d103      	bne.n	800b5cc <USBH_PTP_GetStorageIds+0xf0>
        PTP_GetStorageIDs(phost, storage_ids);
 800b5c4:	6839      	ldr	r1, [r7, #0]
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f7ff fb9c 	bl	800ad04 <PTP_GetStorageIDs>
      break;
 800b5cc:	bf00      	nop
  }
  return status;
 800b5ce:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	3738      	adds	r7, #56	@ 0x38
 800b5d6:	46bd      	mov	sp, r7
 800b5d8:	bd80      	pop	{r7, pc}

0800b5da <USBH_PTP_GetStorageInfo>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_PTP_GetStorageInfo(USBH_HandleTypeDef *phost,
                                           uint32_t storage_id,
                                           PTP_StorageInfoTypedef *storage_info)
{
 800b5da:	b580      	push	{r7, lr}
 800b5dc:	b090      	sub	sp, #64	@ 0x40
 800b5de:	af00      	add	r7, sp, #0
 800b5e0:	60f8      	str	r0, [r7, #12]
 800b5e2:	60b9      	str	r1, [r7, #8]
 800b5e4:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800b5e6:	2301      	movs	r3, #1
 800b5e8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  MTP_HandleTypeDef    *MTP_Handle = (MTP_HandleTypeDef *)phost->pActiveClass->pData;
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800b5f2:	69db      	ldr	r3, [r3, #28]
 800b5f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  PTP_ContainerTypedef  ptp_container;

  switch (MTP_Handle->ptp.req_state)
 800b5f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b5fc:	f893 3d61 	ldrb.w	r3, [r3, #3425]	@ 0xd61
 800b600:	2b01      	cmp	r3, #1
 800b602:	d002      	beq.n	800b60a <USBH_PTP_GetStorageInfo+0x30>
 800b604:	2b02      	cmp	r3, #2
 800b606:	d055      	beq.n	800b6b4 <USBH_PTP_GetStorageInfo+0xda>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
      }
      break;

    default:
      break;
 800b608:	e064      	b.n	800b6d4 <USBH_PTP_GetStorageInfo+0xfa>
      MTP_Handle->ptp.flags = PTP_DP_GETDATA;
 800b60a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b60c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b610:	461a      	mov	r2, r3
 800b612:	2302      	movs	r3, #2
 800b614:	f8c2 31ac 	str.w	r3, [r2, #428]	@ 0x1ac
      MTP_Handle->ptp.data_ptr = (uint8_t *)(void *) & (MTP_Handle->ptp.data_container);
 800b618:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b61a:	f503 53ec 	add.w	r3, r3, #7552	@ 0x1d80
 800b61e:	3304      	adds	r3, #4
 800b620:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b622:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
 800b626:	f8c2 31b0 	str.w	r3, [r2, #432]	@ 0x1b0
      MTP_Handle->ptp.data_length = 0U;
 800b62a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b62c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b630:	461a      	mov	r2, r3
 800b632:	2300      	movs	r3, #0
 800b634:	f8c2 31b4 	str.w	r3, [r2, #436]	@ 0x1b4
      MTP_Handle->ptp.data_packet_counter = 0U;
 800b638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b63a:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b63e:	461a      	mov	r2, r3
 800b640:	2300      	movs	r3, #0
 800b642:	f8c2 31c0 	str.w	r3, [r2, #448]	@ 0x1c0
      MTP_Handle->ptp.data_packet = 0U;
 800b646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b648:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b64c:	461a      	mov	r2, r3
 800b64e:	2300      	movs	r3, #0
 800b650:	f8c2 31b8 	str.w	r3, [r2, #440]	@ 0x1b8
      ptp_container.Code = PTP_OC_GetStorageInfo;
 800b654:	f241 0305 	movw	r3, #4101	@ 0x1005
 800b658:	82bb      	strh	r3, [r7, #20]
      ptp_container.SessionID = MTP_Handle->ptp.session_id;
 800b65a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b65c:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b660:	f8d3 31a8 	ldr.w	r3, [r3, #424]	@ 0x1a8
 800b664:	61bb      	str	r3, [r7, #24]
      ptp_container.Transaction_ID = MTP_Handle->ptp.transaction_id++;
 800b666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b668:	f503 5300 	add.w	r3, r3, #8192	@ 0x2000
 800b66c:	f8d3 31a4 	ldr.w	r3, [r3, #420]	@ 0x1a4
 800b670:	1c5a      	adds	r2, r3, #1
 800b672:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800b674:	f501 5100 	add.w	r1, r1, #8192	@ 0x2000
 800b678:	f8c1 21a4 	str.w	r2, [r1, #420]	@ 0x1a4
 800b67c:	61fb      	str	r3, [r7, #28]
      ptp_container.Param1 = storage_id;
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	623b      	str	r3, [r7, #32]
      ptp_container.Nparam = 1U;
 800b682:	2301      	movs	r3, #1
 800b684:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
      (void)USBH_PTP_SendRequest(phost, &ptp_container);
 800b688:	f107 0314 	add.w	r3, r7, #20
 800b68c:	4619      	mov	r1, r3
 800b68e:	68f8      	ldr	r0, [r7, #12]
 800b690:	f7ff f8ec 	bl	800a86c <USBH_PTP_SendRequest>
      MTP_Handle->ptp.state = PTP_OP_REQUEST_STATE;
 800b694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b696:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b69a:	2201      	movs	r2, #1
 800b69c:	f883 2d60 	strb.w	r2, [r3, #3424]	@ 0xd60
      MTP_Handle->ptp.req_state = PTP_REQ_WAIT;
 800b6a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800b6a6:	2202      	movs	r2, #2
 800b6a8:	f883 2d61 	strb.w	r2, [r3, #3425]	@ 0xd61
      status = USBH_BUSY;
 800b6ac:	2301      	movs	r3, #1
 800b6ae:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      break;
 800b6b2:	e00f      	b.n	800b6d4 <USBH_PTP_GetStorageInfo+0xfa>
      status = USBH_PTP_Process(phost);
 800b6b4:	68f8      	ldr	r0, [r7, #12]
 800b6b6:	f7fe fe43 	bl	800a340 <USBH_PTP_Process>
 800b6ba:	4603      	mov	r3, r0
 800b6bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
      if (status == USBH_OK)
 800b6c0:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d104      	bne.n	800b6d2 <USBH_PTP_GetStorageInfo+0xf8>
        PTP_GetStorageInfo(phost, storage_id, storage_info);
 800b6c8:	687a      	ldr	r2, [r7, #4]
 800b6ca:	68b9      	ldr	r1, [r7, #8]
 800b6cc:	68f8      	ldr	r0, [r7, #12]
 800b6ce:	f7ff fb36 	bl	800ad3e <PTP_GetStorageInfo>
      break;
 800b6d2:	bf00      	nop
  }
  return status;
 800b6d4:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 800b6d8:	4618      	mov	r0, r3
 800b6da:	3740      	adds	r7, #64	@ 0x40
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	60f8      	str	r0, [r7, #12]
 800b6e8:	60b9      	str	r1, [r7, #8]
 800b6ea:	4613      	mov	r3, r2
 800b6ec:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d101      	bne.n	800b6f8 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b6f4:	2302      	movs	r3, #2
 800b6f6:	e029      	b.n	800b74c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	79fa      	ldrb	r2, [r7, #7]
 800b6fc:	f883 259c 	strb.w	r2, [r3, #1436]	@ 0x59c

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	2200      	movs	r2, #0
 800b704:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
  phost->ClassNumber = 0U;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	2200      	movs	r2, #0
 800b70c:	f8c3 2550 	str.w	r2, [r3, #1360]	@ 0x550

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b710:	68f8      	ldr	r0, [r7, #12]
 800b712:	f000 f81f 	bl	800b754 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b716:	68fb      	ldr	r3, [r7, #12]
 800b718:	2200      	movs	r2, #0
 800b71a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	2200      	movs	r2, #0
 800b72a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	2200      	movs	r2, #0
 800b732:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b736:	68bb      	ldr	r3, [r7, #8]
 800b738:	2b00      	cmp	r3, #0
 800b73a:	d003      	beq.n	800b744 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	68ba      	ldr	r2, [r7, #8]
 800b740:	f8c3 25a4 	str.w	r2, [r3, #1444]	@ 0x5a4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b744:	68f8      	ldr	r0, [r7, #12]
 800b746:	f001 ff97 	bl	800d678 <USBH_LL_Init>

  return USBH_OK;
 800b74a:	2300      	movs	r3, #0
}
 800b74c:	4618      	mov	r0, r3
 800b74e:	3710      	adds	r7, #16
 800b750:	46bd      	mov	sp, r7
 800b752:	bd80      	pop	{r7, pc}

0800b754 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b760:	2300      	movs	r3, #0
 800b762:	60fb      	str	r3, [r7, #12]
 800b764:	e00a      	b.n	800b77c <DeInitStateMachine+0x28>
  {
    phost->Pipes[i] = 0U;
 800b766:	687a      	ldr	r2, [r7, #4]
 800b768:	68fb      	ldr	r3, [r7, #12]
 800b76a:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800b76e:	009b      	lsls	r3, r3, #2
 800b770:	4413      	add	r3, r2
 800b772:	2200      	movs	r2, #0
 800b774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	3301      	adds	r3, #1
 800b77a:	60fb      	str	r3, [r7, #12]
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	2b0f      	cmp	r3, #15
 800b780:	d9f1      	bls.n	800b766 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b782:	2300      	movs	r3, #0
 800b784:	60fb      	str	r3, [r7, #12]
 800b786:	e009      	b.n	800b79c <DeInitStateMachine+0x48>
  {
    phost->device.Data[i] = 0U;
 800b788:	687a      	ldr	r2, [r7, #4]
 800b78a:	68fb      	ldr	r3, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b792:	2200      	movs	r2, #0
 800b794:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	3301      	adds	r3, #1
 800b79a:	60fb      	str	r3, [r7, #12]
 800b79c:	68fb      	ldr	r3, [r7, #12]
 800b79e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b7a2:	d3f1      	bcc.n	800b788 <DeInitStateMachine+0x34>
  }

  phost->gState = HOST_IDLE;
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2201      	movs	r2, #1
 800b7b4:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f8c3 2594 	str.w	r2, [r3, #1428]	@ 0x594

  phost->Control.state = CTRL_SETUP;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2240      	movs	r2, #64	@ 0x40
 800b7c8:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	2200      	movs	r2, #0
 800b7ce:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2200      	movs	r2, #0
 800b7d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	2200      	movs	r2, #0
 800b7e4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	331c      	adds	r3, #28
 800b7f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b7f8:	2100      	movs	r1, #0
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f002 fc64 	bl	800e0c8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b80a:	2100      	movs	r1, #0
 800b80c:	4618      	mov	r0, r3
 800b80e:	f002 fc5b 	bl	800e0c8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b818:	2212      	movs	r2, #18
 800b81a:	2100      	movs	r1, #0
 800b81c:	4618      	mov	r0, r3
 800b81e:	f002 fc53 	bl	800e0c8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b828:	f44f 72ff 	mov.w	r2, #510	@ 0x1fe
 800b82c:	2100      	movs	r1, #0
 800b82e:	4618      	mov	r0, r3
 800b830:	f002 fc4a 	bl	800e0c8 <memset>

  return USBH_OK;
 800b834:	2300      	movs	r3, #0
}
 800b836:	4618      	mov	r0, r3
 800b838:	3710      	adds	r7, #16
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}

0800b83e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b83e:	b480      	push	{r7}
 800b840:	b085      	sub	sp, #20
 800b842:	af00      	add	r7, sp, #0
 800b844:	6078      	str	r0, [r7, #4]
 800b846:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b848:	2300      	movs	r3, #0
 800b84a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b84c:	683b      	ldr	r3, [r7, #0]
 800b84e:	2b00      	cmp	r3, #0
 800b850:	d017      	beq.n	800b882 <USBH_RegisterClass+0x44>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 800b858:	2b04      	cmp	r3, #4
 800b85a:	d80f      	bhi.n	800b87c <USBH_RegisterClass+0x3e>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 800b862:	1c59      	adds	r1, r3, #1
 800b864:	687a      	ldr	r2, [r7, #4]
 800b866:	f8c2 1550 	str.w	r1, [r2, #1360]	@ 0x550
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	f503 73a7 	add.w	r3, r3, #334	@ 0x14e
 800b870:	6839      	ldr	r1, [r7, #0]
 800b872:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b876:	2300      	movs	r3, #0
 800b878:	73fb      	strb	r3, [r7, #15]
 800b87a:	e004      	b.n	800b886 <USBH_RegisterClass+0x48>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b87c:	2302      	movs	r3, #2
 800b87e:	73fb      	strb	r3, [r7, #15]
 800b880:	e001      	b.n	800b886 <USBH_RegisterClass+0x48>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b882:	2302      	movs	r3, #2
 800b884:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b886:	7bfb      	ldrb	r3, [r7, #15]
}
 800b888:	4618      	mov	r0, r3
 800b88a:	3714      	adds	r7, #20
 800b88c:	46bd      	mov	sp, r7
 800b88e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b892:	4770      	bx	lr

0800b894 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b894:	b480      	push	{r7}
 800b896:	b085      	sub	sp, #20
 800b898:	af00      	add	r7, sp, #0
 800b89a:	6078      	str	r0, [r7, #4]
 800b89c:	460b      	mov	r3, r1
 800b89e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b8a0:	2300      	movs	r3, #0
 800b8a2:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b8aa:	78fa      	ldrb	r2, [r7, #3]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d204      	bcs.n	800b8ba <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	78fa      	ldrb	r2, [r7, #3]
 800b8b4:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b8b8:	e001      	b.n	800b8be <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b8ba:	2302      	movs	r3, #2
 800b8bc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800b8c0:	4618      	mov	r0, r3
 800b8c2:	3714      	adds	r7, #20
 800b8c4:	46bd      	mov	sp, r7
 800b8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8ca:	4770      	bx	lr

0800b8cc <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b087      	sub	sp, #28
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
 800b8d4:	4608      	mov	r0, r1
 800b8d6:	4611      	mov	r1, r2
 800b8d8:	461a      	mov	r2, r3
 800b8da:	4603      	mov	r3, r0
 800b8dc:	70fb      	strb	r3, [r7, #3]
 800b8de:	460b      	mov	r3, r1
 800b8e0:	70bb      	strb	r3, [r7, #2]
 800b8e2:	4613      	mov	r3, r2
 800b8e4:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b8f4:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b8f6:	e025      	b.n	800b944 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b8f8:	7dfb      	ldrb	r3, [r7, #23]
 800b8fa:	2232      	movs	r2, #50	@ 0x32
 800b8fc:	fb02 f303 	mul.w	r3, r2, r3
 800b900:	3308      	adds	r3, #8
 800b902:	68fa      	ldr	r2, [r7, #12]
 800b904:	4413      	add	r3, r2
 800b906:	3302      	adds	r3, #2
 800b908:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b90a:	693b      	ldr	r3, [r7, #16]
 800b90c:	795b      	ldrb	r3, [r3, #5]
 800b90e:	78fa      	ldrb	r2, [r7, #3]
 800b910:	429a      	cmp	r2, r3
 800b912:	d002      	beq.n	800b91a <USBH_FindInterface+0x4e>
 800b914:	78fb      	ldrb	r3, [r7, #3]
 800b916:	2bff      	cmp	r3, #255	@ 0xff
 800b918:	d111      	bne.n	800b93e <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b91a:	693b      	ldr	r3, [r7, #16]
 800b91c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b91e:	78ba      	ldrb	r2, [r7, #2]
 800b920:	429a      	cmp	r2, r3
 800b922:	d002      	beq.n	800b92a <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b924:	78bb      	ldrb	r3, [r7, #2]
 800b926:	2bff      	cmp	r3, #255	@ 0xff
 800b928:	d109      	bne.n	800b93e <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b92a:	693b      	ldr	r3, [r7, #16]
 800b92c:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b92e:	787a      	ldrb	r2, [r7, #1]
 800b930:	429a      	cmp	r2, r3
 800b932:	d002      	beq.n	800b93a <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b934:	787b      	ldrb	r3, [r7, #1]
 800b936:	2bff      	cmp	r3, #255	@ 0xff
 800b938:	d101      	bne.n	800b93e <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b93a:	7dfb      	ldrb	r3, [r7, #23]
 800b93c:	e006      	b.n	800b94c <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b93e:	7dfb      	ldrb	r3, [r7, #23]
 800b940:	3301      	adds	r3, #1
 800b942:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b944:	7dfb      	ldrb	r3, [r7, #23]
 800b946:	2b09      	cmp	r3, #9
 800b948:	d9d6      	bls.n	800b8f8 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b94a:	23ff      	movs	r3, #255	@ 0xff
}
 800b94c:	4618      	mov	r0, r3
 800b94e:	371c      	adds	r7, #28
 800b950:	46bd      	mov	sp, r7
 800b952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b956:	4770      	bx	lr

0800b958 <USBH_FindInterfaceIndex>:
  * @param  alt_settings    : alternate setting number
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterfaceIndex(USBH_HandleTypeDef *phost, uint8_t interface_number, uint8_t alt_settings)
{
 800b958:	b480      	push	{r7}
 800b95a:	b087      	sub	sp, #28
 800b95c:	af00      	add	r7, sp, #0
 800b95e:	6078      	str	r0, [r7, #4]
 800b960:	460b      	mov	r3, r1
 800b962:	70fb      	strb	r3, [r7, #3]
 800b964:	4613      	mov	r3, r2
 800b966:	70bb      	strb	r3, [r7, #2]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b968:	2300      	movs	r3, #0
 800b96a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b96c:	2300      	movs	r3, #0
 800b96e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b976:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b978:	e017      	b.n	800b9aa <USBH_FindInterfaceIndex+0x52>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b97a:	7dfb      	ldrb	r3, [r7, #23]
 800b97c:	2232      	movs	r2, #50	@ 0x32
 800b97e:	fb02 f303 	mul.w	r3, r2, r3
 800b982:	3308      	adds	r3, #8
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	3302      	adds	r3, #2
 800b98a:	613b      	str	r3, [r7, #16]
    if ((pif->bInterfaceNumber == interface_number) && (pif->bAlternateSetting == alt_settings))
 800b98c:	693b      	ldr	r3, [r7, #16]
 800b98e:	789b      	ldrb	r3, [r3, #2]
 800b990:	78fa      	ldrb	r2, [r7, #3]
 800b992:	429a      	cmp	r2, r3
 800b994:	d106      	bne.n	800b9a4 <USBH_FindInterfaceIndex+0x4c>
 800b996:	693b      	ldr	r3, [r7, #16]
 800b998:	78db      	ldrb	r3, [r3, #3]
 800b99a:	78ba      	ldrb	r2, [r7, #2]
 800b99c:	429a      	cmp	r2, r3
 800b99e:	d101      	bne.n	800b9a4 <USBH_FindInterfaceIndex+0x4c>
    {
      return  if_ix;
 800b9a0:	7dfb      	ldrb	r3, [r7, #23]
 800b9a2:	e006      	b.n	800b9b2 <USBH_FindInterfaceIndex+0x5a>
    }
    if_ix++;
 800b9a4:	7dfb      	ldrb	r3, [r7, #23]
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b9aa:	7dfb      	ldrb	r3, [r7, #23]
 800b9ac:	2b09      	cmp	r3, #9
 800b9ae:	d9e4      	bls.n	800b97a <USBH_FindInterfaceIndex+0x22>
  }
  return 0xFFU;
 800b9b0:	23ff      	movs	r3, #255	@ 0xff
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	371c      	adds	r7, #28
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr

0800b9be <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b9be:	b580      	push	{r7, lr}
 800b9c0:	b082      	sub	sp, #8
 800b9c2:	af00      	add	r7, sp, #0
 800b9c4:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f001 fe92 	bl	800d6f0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b9cc:	2101      	movs	r1, #1
 800b9ce:	6878      	ldr	r0, [r7, #4]
 800b9d0:	f001 ffab 	bl	800d92a <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b9d4:	2300      	movs	r3, #0
}
 800b9d6:	4618      	mov	r0, r3
 800b9d8:	3708      	adds	r7, #8
 800b9da:	46bd      	mov	sp, r7
 800b9dc:	bd80      	pop	{r7, pc}
	...

0800b9e0 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b9e0:	b580      	push	{r7, lr}
 800b9e2:	b088      	sub	sp, #32
 800b9e4:	af04      	add	r7, sp, #16
 800b9e6:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b9e8:	2302      	movs	r3, #2
 800b9ea:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b9ec:	2300      	movs	r3, #0
 800b9ee:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b9f6:	b2db      	uxtb	r3, r3
 800b9f8:	2b01      	cmp	r3, #1
 800b9fa:	d102      	bne.n	800ba02 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	2203      	movs	r2, #3
 800ba00:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	781b      	ldrb	r3, [r3, #0]
 800ba06:	b2db      	uxtb	r3, r3
 800ba08:	2b0b      	cmp	r3, #11
 800ba0a:	f200 81bd 	bhi.w	800bd88 <USBH_Process+0x3a8>
 800ba0e:	a201      	add	r2, pc, #4	@ (adr r2, 800ba14 <USBH_Process+0x34>)
 800ba10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba14:	0800ba45 	.word	0x0800ba45
 800ba18:	0800ba77 	.word	0x0800ba77
 800ba1c:	0800badf 	.word	0x0800badf
 800ba20:	0800bd23 	.word	0x0800bd23
 800ba24:	0800bd89 	.word	0x0800bd89
 800ba28:	0800bb7f 	.word	0x0800bb7f
 800ba2c:	0800bcc9 	.word	0x0800bcc9
 800ba30:	0800bbb5 	.word	0x0800bbb5
 800ba34:	0800bbd5 	.word	0x0800bbd5
 800ba38:	0800bbf3 	.word	0x0800bbf3
 800ba3c:	0800bc37 	.word	0x0800bc37
 800ba40:	0800bd0b 	.word	0x0800bd0b
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800ba4a:	b2db      	uxtb	r3, r3
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	f000 819d 	beq.w	800bd8c <USBH_Process+0x3ac>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	2201      	movs	r2, #1
 800ba56:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800ba58:	20c8      	movs	r0, #200	@ 0xc8
 800ba5a:	f001 ffe3 	bl	800da24 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800ba5e:	6878      	ldr	r0, [r7, #4]
 800ba60:	f001 fea3 	bl	800d7aa <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	2200      	movs	r2, #0
 800ba68:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	2200      	movs	r2, #0
 800ba70:	f8c3 2598 	str.w	r2, [r3, #1432]	@ 0x598
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800ba74:	e18a      	b.n	800bd8c <USBH_Process+0x3ac>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800ba76:	687b      	ldr	r3, [r7, #4]
 800ba78:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800ba7c:	2b01      	cmp	r3, #1
 800ba7e:	d107      	bne.n	800ba90 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2200      	movs	r2, #0
 800ba84:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800ba88:	687b      	ldr	r3, [r7, #4]
 800ba8a:	2202      	movs	r2, #2
 800ba8c:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800ba8e:	e18c      	b.n	800bdaa <USBH_Process+0x3ca>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800ba90:	687b      	ldr	r3, [r7, #4]
 800ba92:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
 800ba96:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ba9a:	d914      	bls.n	800bac6 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800baa2:	3301      	adds	r3, #1
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800bab2:	2b03      	cmp	r3, #3
 800bab4:	d903      	bls.n	800babe <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	220d      	movs	r2, #13
 800baba:	701a      	strb	r2, [r3, #0]
      break;
 800babc:	e175      	b.n	800bdaa <USBH_Process+0x3ca>
            phost->gState = HOST_IDLE;
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	2200      	movs	r2, #0
 800bac2:	701a      	strb	r2, [r3, #0]
      break;
 800bac4:	e171      	b.n	800bdaa <USBH_Process+0x3ca>
          phost->Timeout += 10U;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	f8d3 3598 	ldr.w	r3, [r3, #1432]	@ 0x598
 800bacc:	f103 020a 	add.w	r2, r3, #10
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	f8c3 2598 	str.w	r2, [r3, #1432]	@ 0x598
          USBH_Delay(10U);
 800bad6:	200a      	movs	r0, #10
 800bad8:	f001 ffa4 	bl	800da24 <USBH_Delay>
      break;
 800badc:	e165      	b.n	800bdaa <USBH_Process+0x3ca>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800bae4:	2b00      	cmp	r3, #0
 800bae6:	d005      	beq.n	800baf4 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800baee:	2104      	movs	r1, #4
 800baf0:	6878      	ldr	r0, [r7, #4]
 800baf2:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800baf4:	2064      	movs	r0, #100	@ 0x64
 800baf6:	f001 ff95 	bl	800da24 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800bafa:	6878      	ldr	r0, [r7, #4]
 800bafc:	f001 fe2e 	bl	800d75c <USBH_LL_GetSpeed>
 800bb00:	4603      	mov	r3, r0
 800bb02:	461a      	mov	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	2205      	movs	r2, #5
 800bb0e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800bb10:	2100      	movs	r1, #0
 800bb12:	6878      	ldr	r0, [r7, #4]
 800bb14:	f001 faff 	bl	800d116 <USBH_AllocPipe>
 800bb18:	4603      	mov	r3, r0
 800bb1a:	461a      	mov	r2, r3
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800bb20:	2180      	movs	r1, #128	@ 0x80
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f001 faf7 	bl	800d116 <USBH_AllocPipe>
 800bb28:	4603      	mov	r3, r0
 800bb2a:	461a      	mov	r2, r3
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bb30:	687b      	ldr	r3, [r7, #4]
 800bb32:	7919      	ldrb	r1, [r3, #4]
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bb40:	687a      	ldr	r2, [r7, #4]
 800bb42:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800bb44:	9202      	str	r2, [sp, #8]
 800bb46:	2200      	movs	r2, #0
 800bb48:	9201      	str	r2, [sp, #4]
 800bb4a:	9300      	str	r3, [sp, #0]
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2280      	movs	r2, #128	@ 0x80
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f001 fab1 	bl	800d0b8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	7959      	ldrb	r1, [r3, #5]
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800bb6a:	9202      	str	r2, [sp, #8]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	9201      	str	r2, [sp, #4]
 800bb70:	9300      	str	r3, [sp, #0]
 800bb72:	4603      	mov	r3, r0
 800bb74:	2200      	movs	r2, #0
 800bb76:	6878      	ldr	r0, [r7, #4]
 800bb78:	f001 fa9e 	bl	800d0b8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bb7c:	e115      	b.n	800bdaa <USBH_Process+0x3ca>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800bb7e:	6878      	ldr	r0, [r7, #4]
 800bb80:	f000 f918 	bl	800bdb4 <USBH_HandleEnum>
 800bb84:	4603      	mov	r3, r0
 800bb86:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800bb88:	7bbb      	ldrb	r3, [r7, #14]
 800bb8a:	b2db      	uxtb	r3, r3
 800bb8c:	2b00      	cmp	r3, #0
 800bb8e:	f040 80ff 	bne.w	800bd90 <USBH_Process+0x3b0>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800bba0:	2b01      	cmp	r3, #1
 800bba2:	d103      	bne.n	800bbac <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2208      	movs	r2, #8
 800bba8:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800bbaa:	e0f1      	b.n	800bd90 <USBH_Process+0x3b0>
          phost->gState = HOST_INPUT;
 800bbac:	687b      	ldr	r3, [r7, #4]
 800bbae:	2207      	movs	r2, #7
 800bbb0:	701a      	strb	r2, [r3, #0]
      break;
 800bbb2:	e0ed      	b.n	800bd90 <USBH_Process+0x3b0>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	f000 80ea 	beq.w	800bd94 <USBH_Process+0x3b4>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800bbc6:	2101      	movs	r1, #1
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	2208      	movs	r2, #8
 800bbd0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800bbd2:	e0df      	b.n	800bd94 <USBH_Process+0x3b4>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800bbda:	4619      	mov	r1, r3
 800bbdc:	6878      	ldr	r0, [r7, #4]
 800bbde:	f000 fc3c 	bl	800c45a <USBH_SetCfg>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f040 80d7 	bne.w	800bd98 <USBH_Process+0x3b8>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	2209      	movs	r2, #9
 800bbee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bbf0:	e0d2      	b.n	800bd98 <USBH_Process+0x3b8>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800bbf8:	f003 0320 	and.w	r3, r3, #32
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d016      	beq.n	800bc2e <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800bc00:	2101      	movs	r1, #1
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 fc73 	bl	800c4ee <USBH_SetFeature>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bc0c:	7bbb      	ldrb	r3, [r7, #14]
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d103      	bne.n	800bc1c <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	220a      	movs	r2, #10
 800bc18:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bc1a:	e0bf      	b.n	800bd9c <USBH_Process+0x3bc>
        else if (status == USBH_NOT_SUPPORTED)
 800bc1c:	7bbb      	ldrb	r3, [r7, #14]
 800bc1e:	b2db      	uxtb	r3, r3
 800bc20:	2b03      	cmp	r3, #3
 800bc22:	f040 80bb 	bne.w	800bd9c <USBH_Process+0x3bc>
          phost->gState = HOST_CHECK_CLASS;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	220a      	movs	r2, #10
 800bc2a:	701a      	strb	r2, [r3, #0]
      break;
 800bc2c:	e0b6      	b.n	800bd9c <USBH_Process+0x3bc>
        phost->gState = HOST_CHECK_CLASS;
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	220a      	movs	r2, #10
 800bc32:	701a      	strb	r2, [r3, #0]
      break;
 800bc34:	e0b2      	b.n	800bd9c <USBH_Process+0x3bc>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	f8d3 3550 	ldr.w	r3, [r3, #1360]	@ 0x550
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f000 80af 	beq.w	800bda0 <USBH_Process+0x3c0>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	2200      	movs	r2, #0
 800bc46:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	73fb      	strb	r3, [r7, #15]
 800bc4e:	e018      	b.n	800bc82 <USBH_Process+0x2a2>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800bc50:	7bfa      	ldrb	r2, [r7, #15]
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	f502 72a7 	add.w	r2, r2, #334	@ 0x14e
 800bc58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bc5c:	791a      	ldrb	r2, [r3, #4]
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800bc64:	429a      	cmp	r2, r3
 800bc66:	d109      	bne.n	800bc7c <USBH_Process+0x29c>
          {
            phost->pActiveClass = phost->pClass[idx];
 800bc68:	7bfa      	ldrb	r2, [r7, #15]
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	f502 72a7 	add.w	r2, r2, #334	@ 0x14e
 800bc70:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
            break;
 800bc7a:	e005      	b.n	800bc88 <USBH_Process+0x2a8>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800bc7c:	7bfb      	ldrb	r3, [r7, #15]
 800bc7e:	3301      	adds	r3, #1
 800bc80:	73fb      	strb	r3, [r7, #15]
 800bc82:	7bfb      	ldrb	r3, [r7, #15]
 800bc84:	2b04      	cmp	r3, #4
 800bc86:	d9e3      	bls.n	800bc50 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bc8e:	2b00      	cmp	r3, #0
 800bc90:	d016      	beq.n	800bcc0 <USBH_Process+0x2e0>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bc98:	689b      	ldr	r3, [r3, #8]
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	4798      	blx	r3
 800bc9e:	4603      	mov	r3, r0
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d109      	bne.n	800bcb8 <USBH_Process+0x2d8>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2206      	movs	r2, #6
 800bca8:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800bcb0:	2103      	movs	r1, #3
 800bcb2:	6878      	ldr	r0, [r7, #4]
 800bcb4:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcb6:	e073      	b.n	800bda0 <USBH_Process+0x3c0>
            phost->gState = HOST_ABORT_STATE;
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	220d      	movs	r2, #13
 800bcbc:	701a      	strb	r2, [r3, #0]
      break;
 800bcbe:	e06f      	b.n	800bda0 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	220d      	movs	r2, #13
 800bcc4:	701a      	strb	r2, [r3, #0]
      break;
 800bcc6:	e06b      	b.n	800bda0 <USBH_Process+0x3c0>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bcce:	2b00      	cmp	r3, #0
 800bcd0:	d017      	beq.n	800bd02 <USBH_Process+0x322>
      {
        status = phost->pActiveClass->Requests(phost);
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bcd8:	691b      	ldr	r3, [r3, #16]
 800bcda:	6878      	ldr	r0, [r7, #4]
 800bcdc:	4798      	blx	r3
 800bcde:	4603      	mov	r3, r0
 800bce0:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800bce2:	7bbb      	ldrb	r3, [r7, #14]
 800bce4:	b2db      	uxtb	r3, r3
 800bce6:	2b00      	cmp	r3, #0
 800bce8:	d103      	bne.n	800bcf2 <USBH_Process+0x312>
        {
          phost->gState = HOST_CLASS;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	220b      	movs	r2, #11
 800bcee:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bcf0:	e058      	b.n	800bda4 <USBH_Process+0x3c4>
        else if (status == USBH_FAIL)
 800bcf2:	7bbb      	ldrb	r3, [r7, #14]
 800bcf4:	b2db      	uxtb	r3, r3
 800bcf6:	2b02      	cmp	r3, #2
 800bcf8:	d154      	bne.n	800bda4 <USBH_Process+0x3c4>
          phost->gState = HOST_ABORT_STATE;
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	220d      	movs	r2, #13
 800bcfe:	701a      	strb	r2, [r3, #0]
      break;
 800bd00:	e050      	b.n	800bda4 <USBH_Process+0x3c4>
        phost->gState = HOST_ABORT_STATE;
 800bd02:	687b      	ldr	r3, [r7, #4]
 800bd04:	220d      	movs	r2, #13
 800bd06:	701a      	strb	r2, [r3, #0]
      break;
 800bd08:	e04c      	b.n	800bda4 <USBH_Process+0x3c4>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800bd0a:	687b      	ldr	r3, [r7, #4]
 800bd0c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d049      	beq.n	800bda8 <USBH_Process+0x3c8>
      {
        phost->pActiveClass->BgndProcess(phost);
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bd1a:	695b      	ldr	r3, [r3, #20]
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	4798      	blx	r3
      }
      break;
 800bd20:	e042      	b.n	800bda8 <USBH_Process+0x3c8>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800bd22:	687b      	ldr	r3, [r7, #4]
 800bd24:	2200      	movs	r2, #0
 800bd26:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800bd2a:	6878      	ldr	r0, [r7, #4]
 800bd2c:	f7ff fd12 	bl	800b754 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d009      	beq.n	800bd4e <USBH_Process+0x36e>
      {
        phost->pActiveClass->DeInit(phost);
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800bd40:	68db      	ldr	r3, [r3, #12]
 800bd42:	6878      	ldr	r0, [r7, #4]
 800bd44:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	2200      	movs	r2, #0
 800bd4a:	f8c3 254c 	str.w	r2, [r3, #1356]	@ 0x54c
      }

      if (phost->pUser != NULL)
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d005      	beq.n	800bd64 <USBH_Process+0x384>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800bd58:	687b      	ldr	r3, [r7, #4]
 800bd5a:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800bd5e:	2105      	movs	r1, #5
 800bd60:	6878      	ldr	r0, [r7, #4]
 800bd62:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800bd6a:	b2db      	uxtb	r3, r3
 800bd6c:	2b01      	cmp	r3, #1
 800bd6e:	d107      	bne.n	800bd80 <USBH_Process+0x3a0>
      {
        phost->device.is_ReEnumerated = 0U;
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	2200      	movs	r2, #0
 800bd74:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f7ff fe20 	bl	800b9be <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800bd7e:	e014      	b.n	800bdaa <USBH_Process+0x3ca>
        (void)USBH_LL_Start(phost);
 800bd80:	6878      	ldr	r0, [r7, #4]
 800bd82:	f001 fcb5 	bl	800d6f0 <USBH_LL_Start>
      break;
 800bd86:	e010      	b.n	800bdaa <USBH_Process+0x3ca>

    case HOST_ABORT_STATE:
    default :
      break;
 800bd88:	bf00      	nop
 800bd8a:	e00e      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bd8c:	bf00      	nop
 800bd8e:	e00c      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bd90:	bf00      	nop
 800bd92:	e00a      	b.n	800bdaa <USBH_Process+0x3ca>
    break;
 800bd94:	bf00      	nop
 800bd96:	e008      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bd98:	bf00      	nop
 800bd9a:	e006      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bd9c:	bf00      	nop
 800bd9e:	e004      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bda0:	bf00      	nop
 800bda2:	e002      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bda4:	bf00      	nop
 800bda6:	e000      	b.n	800bdaa <USBH_Process+0x3ca>
      break;
 800bda8:	bf00      	nop
  }
  return USBH_OK;
 800bdaa:	2300      	movs	r3, #0
}
 800bdac:	4618      	mov	r0, r3
 800bdae:	3710      	adds	r7, #16
 800bdb0:	46bd      	mov	sp, r7
 800bdb2:	bd80      	pop	{r7, pc}

0800bdb4 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800bdb4:	b580      	push	{r7, lr}
 800bdb6:	b088      	sub	sp, #32
 800bdb8:	af04      	add	r7, sp, #16
 800bdba:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800bdc0:	2301      	movs	r3, #1
 800bdc2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	785b      	ldrb	r3, [r3, #1]
 800bdc8:	2b07      	cmp	r3, #7
 800bdca:	f200 81bd 	bhi.w	800c148 <USBH_HandleEnum+0x394>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <USBH_HandleEnum+0x20>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bdf5 	.word	0x0800bdf5
 800bdd8:	0800beaf 	.word	0x0800beaf
 800bddc:	0800bf19 	.word	0x0800bf19
 800bde0:	0800bfa3 	.word	0x0800bfa3
 800bde4:	0800c00d 	.word	0x0800c00d
 800bde8:	0800c07d 	.word	0x0800c07d
 800bdec:	0800c0c3 	.word	0x0800c0c3
 800bdf0:	0800c109 	.word	0x0800c109
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800bdf4:	2108      	movs	r1, #8
 800bdf6:	6878      	ldr	r0, [r7, #4]
 800bdf8:	f000 fa4c 	bl	800c294 <USBH_Get_DevDesc>
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800be00:	7bbb      	ldrb	r3, [r7, #14]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d12e      	bne.n	800be64 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800be10:	687b      	ldr	r3, [r7, #4]
 800be12:	2201      	movs	r2, #1
 800be14:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	7919      	ldrb	r1, [r3, #4]
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800be26:	687a      	ldr	r2, [r7, #4]
 800be28:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800be2a:	9202      	str	r2, [sp, #8]
 800be2c:	2200      	movs	r2, #0
 800be2e:	9201      	str	r2, [sp, #4]
 800be30:	9300      	str	r3, [sp, #0]
 800be32:	4603      	mov	r3, r0
 800be34:	2280      	movs	r2, #128	@ 0x80
 800be36:	6878      	ldr	r0, [r7, #4]
 800be38:	f001 f93e 	bl	800d0b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	7959      	ldrb	r1, [r3, #5]
 800be40:	687b      	ldr	r3, [r7, #4]
 800be42:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800be50:	9202      	str	r2, [sp, #8]
 800be52:	2200      	movs	r2, #0
 800be54:	9201      	str	r2, [sp, #4]
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	4603      	mov	r3, r0
 800be5a:	2200      	movs	r2, #0
 800be5c:	6878      	ldr	r0, [r7, #4]
 800be5e:	f001 f92b 	bl	800d0b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800be62:	e173      	b.n	800c14c <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800be64:	7bbb      	ldrb	r3, [r7, #14]
 800be66:	2b03      	cmp	r3, #3
 800be68:	f040 8170 	bne.w	800c14c <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800be72:	3301      	adds	r3, #1
 800be74:	b2da      	uxtb	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800be82:	2b03      	cmp	r3, #3
 800be84:	d903      	bls.n	800be8e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	220d      	movs	r2, #13
 800be8a:	701a      	strb	r2, [r3, #0]
      break;
 800be8c:	e15e      	b.n	800c14c <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	795b      	ldrb	r3, [r3, #5]
 800be92:	4619      	mov	r1, r3
 800be94:	6878      	ldr	r0, [r7, #4]
 800be96:	f001 f960 	bl	800d15a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	791b      	ldrb	r3, [r3, #4]
 800be9e:	4619      	mov	r1, r3
 800bea0:	6878      	ldr	r0, [r7, #4]
 800bea2:	f001 f95a 	bl	800d15a <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	2200      	movs	r2, #0
 800beaa:	701a      	strb	r2, [r3, #0]
      break;
 800beac:	e14e      	b.n	800c14c <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800beae:	2112      	movs	r1, #18
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	f000 f9ef 	bl	800c294 <USBH_Get_DevDesc>
 800beb6:	4603      	mov	r3, r0
 800beb8:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800beba:	7bbb      	ldrb	r3, [r7, #14]
 800bebc:	2b00      	cmp	r3, #0
 800bebe:	d103      	bne.n	800bec8 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	2202      	movs	r2, #2
 800bec4:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bec6:	e143      	b.n	800c150 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bec8:	7bbb      	ldrb	r3, [r7, #14]
 800beca:	2b03      	cmp	r3, #3
 800becc:	f040 8140 	bne.w	800c150 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bed6:	3301      	adds	r3, #1
 800bed8:	b2da      	uxtb	r2, r3
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bee6:	2b03      	cmp	r3, #3
 800bee8:	d903      	bls.n	800bef2 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	220d      	movs	r2, #13
 800beee:	701a      	strb	r2, [r3, #0]
      break;
 800bef0:	e12e      	b.n	800c150 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	795b      	ldrb	r3, [r3, #5]
 800bef6:	4619      	mov	r1, r3
 800bef8:	6878      	ldr	r0, [r7, #4]
 800befa:	f001 f92e 	bl	800d15a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	791b      	ldrb	r3, [r3, #4]
 800bf02:	4619      	mov	r1, r3
 800bf04:	6878      	ldr	r0, [r7, #4]
 800bf06:	f001 f928 	bl	800d15a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2200      	movs	r2, #0
 800bf14:	701a      	strb	r2, [r3, #0]
      break;
 800bf16:	e11b      	b.n	800c150 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800bf18:	2101      	movs	r1, #1
 800bf1a:	6878      	ldr	r0, [r7, #4]
 800bf1c:	f000 fa79 	bl	800c412 <USBH_SetAddress>
 800bf20:	4603      	mov	r3, r0
 800bf22:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bf24:	7bbb      	ldrb	r3, [r7, #14]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d130      	bne.n	800bf8c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800bf2a:	2002      	movs	r0, #2
 800bf2c:	f001 fd7a 	bl	800da24 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	2201      	movs	r2, #1
 800bf34:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	2203      	movs	r2, #3
 800bf3c:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	7919      	ldrb	r1, [r3, #4]
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800bf52:	9202      	str	r2, [sp, #8]
 800bf54:	2200      	movs	r2, #0
 800bf56:	9201      	str	r2, [sp, #4]
 800bf58:	9300      	str	r3, [sp, #0]
 800bf5a:	4603      	mov	r3, r0
 800bf5c:	2280      	movs	r2, #128	@ 0x80
 800bf5e:	6878      	ldr	r0, [r7, #4]
 800bf60:	f001 f8aa 	bl	800d0b8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	7959      	ldrb	r1, [r3, #5]
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800bf74:	687a      	ldr	r2, [r7, #4]
 800bf76:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800bf78:	9202      	str	r2, [sp, #8]
 800bf7a:	2200      	movs	r2, #0
 800bf7c:	9201      	str	r2, [sp, #4]
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	4603      	mov	r3, r0
 800bf82:	2200      	movs	r2, #0
 800bf84:	6878      	ldr	r0, [r7, #4]
 800bf86:	f001 f897 	bl	800d0b8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800bf8a:	e0e3      	b.n	800c154 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bf8c:	7bbb      	ldrb	r3, [r7, #14]
 800bf8e:	2b03      	cmp	r3, #3
 800bf90:	f040 80e0 	bne.w	800c154 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	220d      	movs	r2, #13
 800bf98:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	705a      	strb	r2, [r3, #1]
      break;
 800bfa0:	e0d8      	b.n	800c154 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800bfa2:	2109      	movs	r1, #9
 800bfa4:	6878      	ldr	r0, [r7, #4]
 800bfa6:	f000 f9a1 	bl	800c2ec <USBH_Get_CfgDesc>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800bfae:	7bbb      	ldrb	r3, [r7, #14]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d103      	bne.n	800bfbc <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	2204      	movs	r2, #4
 800bfb8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800bfba:	e0cd      	b.n	800c158 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800bfbc:	7bbb      	ldrb	r3, [r7, #14]
 800bfbe:	2b03      	cmp	r3, #3
 800bfc0:	f040 80ca 	bne.w	800c158 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bfca:	3301      	adds	r3, #1
 800bfcc:	b2da      	uxtb	r2, r3
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800bfda:	2b03      	cmp	r3, #3
 800bfdc:	d903      	bls.n	800bfe6 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	220d      	movs	r2, #13
 800bfe2:	701a      	strb	r2, [r3, #0]
      break;
 800bfe4:	e0b8      	b.n	800c158 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bfe6:	687b      	ldr	r3, [r7, #4]
 800bfe8:	795b      	ldrb	r3, [r3, #5]
 800bfea:	4619      	mov	r1, r3
 800bfec:	6878      	ldr	r0, [r7, #4]
 800bfee:	f001 f8b4 	bl	800d15a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bff2:	687b      	ldr	r3, [r7, #4]
 800bff4:	791b      	ldrb	r3, [r3, #4]
 800bff6:	4619      	mov	r1, r3
 800bff8:	6878      	ldr	r0, [r7, #4]
 800bffa:	f001 f8ae 	bl	800d15a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800bffe:	687b      	ldr	r3, [r7, #4]
 800c000:	2200      	movs	r2, #0
 800c002:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	2200      	movs	r2, #0
 800c008:	701a      	strb	r2, [r3, #0]
      break;
 800c00a:	e0a5      	b.n	800c158 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800c012:	4619      	mov	r1, r3
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f969 	bl	800c2ec <USBH_Get_CfgDesc>
 800c01a:	4603      	mov	r3, r0
 800c01c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800c01e:	7bbb      	ldrb	r3, [r7, #14]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d103      	bne.n	800c02c <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	2205      	movs	r2, #5
 800c028:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800c02a:	e097      	b.n	800c15c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c02c:	7bbb      	ldrb	r3, [r7, #14]
 800c02e:	2b03      	cmp	r3, #3
 800c030:	f040 8094 	bne.w	800c15c <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c03a:	3301      	adds	r3, #1
 800c03c:	b2da      	uxtb	r2, r3
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d903      	bls.n	800c056 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	220d      	movs	r2, #13
 800c052:	701a      	strb	r2, [r3, #0]
      break;
 800c054:	e082      	b.n	800c15c <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c056:	687b      	ldr	r3, [r7, #4]
 800c058:	795b      	ldrb	r3, [r3, #5]
 800c05a:	4619      	mov	r1, r3
 800c05c:	6878      	ldr	r0, [r7, #4]
 800c05e:	f001 f87c 	bl	800d15a <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	791b      	ldrb	r3, [r3, #4]
 800c066:	4619      	mov	r1, r3
 800c068:	6878      	ldr	r0, [r7, #4]
 800c06a:	f001 f876 	bl	800d15a <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800c06e:	687b      	ldr	r3, [r7, #4]
 800c070:	2200      	movs	r2, #0
 800c072:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2200      	movs	r2, #0
 800c078:	701a      	strb	r2, [r3, #0]
      break;
 800c07a:	e06f      	b.n	800c15c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800c082:	2b00      	cmp	r3, #0
 800c084:	d019      	beq.n	800c0ba <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800c092:	23ff      	movs	r3, #255	@ 0xff
 800c094:	6878      	ldr	r0, [r7, #4]
 800c096:	f000 f953 	bl	800c340 <USBH_Get_StringDesc>
 800c09a:	4603      	mov	r3, r0
 800c09c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c09e:	7bbb      	ldrb	r3, [r7, #14]
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d103      	bne.n	800c0ac <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	2206      	movs	r2, #6
 800c0a8:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c0aa:	e059      	b.n	800c160 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0ac:	7bbb      	ldrb	r3, [r7, #14]
 800c0ae:	2b03      	cmp	r3, #3
 800c0b0:	d156      	bne.n	800c160 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c0b2:	687b      	ldr	r3, [r7, #4]
 800c0b4:	2206      	movs	r2, #6
 800c0b6:	705a      	strb	r2, [r3, #1]
      break;
 800c0b8:	e052      	b.n	800c160 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2206      	movs	r2, #6
 800c0be:	705a      	strb	r2, [r3, #1]
      break;
 800c0c0:	e04e      	b.n	800c160 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d019      	beq.n	800c100 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800c0d8:	23ff      	movs	r3, #255	@ 0xff
 800c0da:	6878      	ldr	r0, [r7, #4]
 800c0dc:	f000 f930 	bl	800c340 <USBH_Get_StringDesc>
 800c0e0:	4603      	mov	r3, r0
 800c0e2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c0e4:	7bbb      	ldrb	r3, [r7, #14]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2207      	movs	r2, #7
 800c0ee:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800c0f0:	e038      	b.n	800c164 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c0f2:	7bbb      	ldrb	r3, [r7, #14]
 800c0f4:	2b03      	cmp	r3, #3
 800c0f6:	d135      	bne.n	800c164 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	2207      	movs	r2, #7
 800c0fc:	705a      	strb	r2, [r3, #1]
      break;
 800c0fe:	e031      	b.n	800c164 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800c100:	687b      	ldr	r3, [r7, #4]
 800c102:	2207      	movs	r2, #7
 800c104:	705a      	strb	r2, [r3, #1]
      break;
 800c106:	e02d      	b.n	800c164 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800c10e:	2b00      	cmp	r3, #0
 800c110:	d017      	beq.n	800c142 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800c118:	687b      	ldr	r3, [r7, #4]
 800c11a:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800c11e:	23ff      	movs	r3, #255	@ 0xff
 800c120:	6878      	ldr	r0, [r7, #4]
 800c122:	f000 f90d 	bl	800c340 <USBH_Get_StringDesc>
 800c126:	4603      	mov	r3, r0
 800c128:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800c12a:	7bbb      	ldrb	r3, [r7, #14]
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d102      	bne.n	800c136 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800c130:	2300      	movs	r3, #0
 800c132:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800c134:	e018      	b.n	800c168 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800c136:	7bbb      	ldrb	r3, [r7, #14]
 800c138:	2b03      	cmp	r3, #3
 800c13a:	d115      	bne.n	800c168 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800c13c:	2300      	movs	r3, #0
 800c13e:	73fb      	strb	r3, [r7, #15]
      break;
 800c140:	e012      	b.n	800c168 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800c142:	2300      	movs	r3, #0
 800c144:	73fb      	strb	r3, [r7, #15]
      break;
 800c146:	e00f      	b.n	800c168 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800c148:	bf00      	nop
 800c14a:	e00e      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c14c:	bf00      	nop
 800c14e:	e00c      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c150:	bf00      	nop
 800c152:	e00a      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c154:	bf00      	nop
 800c156:	e008      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c158:	bf00      	nop
 800c15a:	e006      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c15c:	bf00      	nop
 800c15e:	e004      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c160:	bf00      	nop
 800c162:	e002      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c164:	bf00      	nop
 800c166:	e000      	b.n	800c16a <USBH_HandleEnum+0x3b6>
      break;
 800c168:	bf00      	nop
  }
  return Status;
 800c16a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c16c:	4618      	mov	r0, r3
 800c16e:	3710      	adds	r7, #16
 800c170:	46bd      	mov	sp, r7
 800c172:	bd80      	pop	{r7, pc}

0800c174 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800c174:	b480      	push	{r7}
 800c176:	b083      	sub	sp, #12
 800c178:	af00      	add	r7, sp, #0
 800c17a:	6078      	str	r0, [r7, #4]
 800c17c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	683a      	ldr	r2, [r7, #0]
 800c182:	f8c3 2594 	str.w	r2, [r3, #1428]	@ 0x594
}
 800c186:	bf00      	nop
 800c188:	370c      	adds	r7, #12
 800c18a:	46bd      	mov	sp, r7
 800c18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c190:	4770      	bx	lr

0800c192 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800c192:	b580      	push	{r7, lr}
 800c194:	b082      	sub	sp, #8
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800c1a0:	1c5a      	adds	r2, r3, #1
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f8c3 2594 	str.w	r2, [r3, #1428]	@ 0x594
  USBH_HandleSof(phost);
 800c1a8:	6878      	ldr	r0, [r7, #4]
 800c1aa:	f000 f804 	bl	800c1b6 <USBH_HandleSof>
}
 800c1ae:	bf00      	nop
 800c1b0:	3708      	adds	r7, #8
 800c1b2:	46bd      	mov	sp, r7
 800c1b4:	bd80      	pop	{r7, pc}

0800c1b6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800c1b6:	b580      	push	{r7, lr}
 800c1b8:	b082      	sub	sp, #8
 800c1ba:	af00      	add	r7, sp, #0
 800c1bc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800c1be:	687b      	ldr	r3, [r7, #4]
 800c1c0:	781b      	ldrb	r3, [r3, #0]
 800c1c2:	b2db      	uxtb	r3, r3
 800c1c4:	2b0b      	cmp	r3, #11
 800c1c6:	d10a      	bne.n	800c1de <USBH_HandleSof+0x28>
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	d005      	beq.n	800c1de <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800c1d8:	699b      	ldr	r3, [r3, #24]
 800c1da:	6878      	ldr	r0, [r7, #4]
 800c1dc:	4798      	blx	r3
  }
}
 800c1de:	bf00      	nop
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800c1e6:	b480      	push	{r7}
 800c1e8:	b083      	sub	sp, #12
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	2201      	movs	r2, #1
 800c1f2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800c1f6:	bf00      	nop
}
 800c1f8:	370c      	adds	r7, #12
 800c1fa:	46bd      	mov	sp, r7
 800c1fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c200:	4770      	bx	lr

0800c202 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800c202:	b480      	push	{r7}
 800c204:	b083      	sub	sp, #12
 800c206:	af00      	add	r7, sp, #0
 800c208:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800c212:	bf00      	nop
}
 800c214:	370c      	adds	r7, #12
 800c216:	46bd      	mov	sp, r7
 800c218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c21c:	4770      	bx	lr

0800c21e <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800c21e:	b480      	push	{r7}
 800c220:	b083      	sub	sp, #12
 800c222:	af00      	add	r7, sp, #0
 800c224:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	2201      	movs	r2, #1
 800c22a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2200      	movs	r2, #0
 800c232:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c23e:	2300      	movs	r3, #0
}
 800c240:	4618      	mov	r0, r3
 800c242:	370c      	adds	r7, #12
 800c244:	46bd      	mov	sp, r7
 800c246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c24a:	4770      	bx	lr

0800c24c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b082      	sub	sp, #8
 800c250:	af00      	add	r7, sp, #0
 800c252:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	2200      	movs	r2, #0
 800c260:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	2200      	movs	r2, #0
 800c268:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800c26c:	6878      	ldr	r0, [r7, #4]
 800c26e:	f001 fa5a 	bl	800d726 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	791b      	ldrb	r3, [r3, #4]
 800c276:	4619      	mov	r1, r3
 800c278:	6878      	ldr	r0, [r7, #4]
 800c27a:	f000 ff6e 	bl	800d15a <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	795b      	ldrb	r3, [r3, #5]
 800c282:	4619      	mov	r1, r3
 800c284:	6878      	ldr	r0, [r7, #4]
 800c286:	f000 ff68 	bl	800d15a <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800c28a:	2300      	movs	r3, #0
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	3708      	adds	r7, #8
 800c290:	46bd      	mov	sp, r7
 800c292:	bd80      	pop	{r7, pc}

0800c294 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c294:	b580      	push	{r7, lr}
 800c296:	b086      	sub	sp, #24
 800c298:	af02      	add	r7, sp, #8
 800c29a:	6078      	str	r0, [r7, #4]
 800c29c:	460b      	mov	r3, r1
 800c29e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800c2a0:	887b      	ldrh	r3, [r7, #2]
 800c2a2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c2a6:	d901      	bls.n	800c2ac <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e01b      	b.n	800c2e4 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800c2ac:	687b      	ldr	r3, [r7, #4]
 800c2ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c2b2:	887b      	ldrh	r3, [r7, #2]
 800c2b4:	9300      	str	r3, [sp, #0]
 800c2b6:	4613      	mov	r3, r2
 800c2b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c2bc:	2100      	movs	r1, #0
 800c2be:	6878      	ldr	r0, [r7, #4]
 800c2c0:	f000 f872 	bl	800c3a8 <USBH_GetDescriptor>
 800c2c4:	4603      	mov	r3, r0
 800c2c6:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800c2c8:	7bfb      	ldrb	r3, [r7, #15]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d109      	bne.n	800c2e2 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c2d4:	887a      	ldrh	r2, [r7, #2]
 800c2d6:	4619      	mov	r1, r3
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f000 f951 	bl	800c580 <USBH_ParseDevDesc>
 800c2de:	4603      	mov	r3, r0
 800c2e0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c2e2:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2e4:	4618      	mov	r0, r3
 800c2e6:	3710      	adds	r7, #16
 800c2e8:	46bd      	mov	sp, r7
 800c2ea:	bd80      	pop	{r7, pc}

0800c2ec <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800c2ec:	b580      	push	{r7, lr}
 800c2ee:	b086      	sub	sp, #24
 800c2f0:	af02      	add	r7, sp, #8
 800c2f2:	6078      	str	r0, [r7, #4]
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	331c      	adds	r3, #28
 800c2fc:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800c2fe:	887b      	ldrh	r3, [r7, #2]
 800c300:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c304:	d901      	bls.n	800c30a <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c306:	2303      	movs	r3, #3
 800c308:	e016      	b.n	800c338 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800c30a:	887b      	ldrh	r3, [r7, #2]
 800c30c:	9300      	str	r3, [sp, #0]
 800c30e:	68bb      	ldr	r3, [r7, #8]
 800c310:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800c314:	2100      	movs	r1, #0
 800c316:	6878      	ldr	r0, [r7, #4]
 800c318:	f000 f846 	bl	800c3a8 <USBH_GetDescriptor>
 800c31c:	4603      	mov	r3, r0
 800c31e:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800c320:	7bfb      	ldrb	r3, [r7, #15]
 800c322:	2b00      	cmp	r3, #0
 800c324:	d107      	bne.n	800c336 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800c326:	887b      	ldrh	r3, [r7, #2]
 800c328:	461a      	mov	r2, r3
 800c32a:	68b9      	ldr	r1, [r7, #8]
 800c32c:	6878      	ldr	r0, [r7, #4]
 800c32e:	f000 f9d7 	bl	800c6e0 <USBH_ParseCfgDesc>
 800c332:	4603      	mov	r3, r0
 800c334:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800c336:	7bfb      	ldrb	r3, [r7, #15]
}
 800c338:	4618      	mov	r0, r3
 800c33a:	3710      	adds	r7, #16
 800c33c:	46bd      	mov	sp, r7
 800c33e:	bd80      	pop	{r7, pc}

0800c340 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b088      	sub	sp, #32
 800c344:	af02      	add	r7, sp, #8
 800c346:	60f8      	str	r0, [r7, #12]
 800c348:	607a      	str	r2, [r7, #4]
 800c34a:	461a      	mov	r2, r3
 800c34c:	460b      	mov	r3, r1
 800c34e:	72fb      	strb	r3, [r7, #11]
 800c350:	4613      	mov	r3, r2
 800c352:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800c354:	893b      	ldrh	r3, [r7, #8]
 800c356:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c35a:	d802      	bhi.n	800c362 <USBH_Get_StringDesc+0x22>
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	2b00      	cmp	r3, #0
 800c360:	d101      	bne.n	800c366 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800c362:	2303      	movs	r3, #3
 800c364:	e01c      	b.n	800c3a0 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800c366:	7afb      	ldrb	r3, [r7, #11]
 800c368:	b29b      	uxth	r3, r3
 800c36a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800c36e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800c376:	893b      	ldrh	r3, [r7, #8]
 800c378:	9300      	str	r3, [sp, #0]
 800c37a:	460b      	mov	r3, r1
 800c37c:	2100      	movs	r1, #0
 800c37e:	68f8      	ldr	r0, [r7, #12]
 800c380:	f000 f812 	bl	800c3a8 <USBH_GetDescriptor>
 800c384:	4603      	mov	r3, r0
 800c386:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800c388:	7dfb      	ldrb	r3, [r7, #23]
 800c38a:	2b00      	cmp	r3, #0
 800c38c:	d107      	bne.n	800c39e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800c38e:	68fb      	ldr	r3, [r7, #12]
 800c390:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800c394:	893a      	ldrh	r2, [r7, #8]
 800c396:	6879      	ldr	r1, [r7, #4]
 800c398:	4618      	mov	r0, r3
 800c39a:	f000 fbb5 	bl	800cb08 <USBH_ParseStringDesc>
  }

  return status;
 800c39e:	7dfb      	ldrb	r3, [r7, #23]
}
 800c3a0:	4618      	mov	r0, r3
 800c3a2:	3718      	adds	r7, #24
 800c3a4:	46bd      	mov	sp, r7
 800c3a6:	bd80      	pop	{r7, pc}

0800c3a8 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	60f8      	str	r0, [r7, #12]
 800c3b0:	607b      	str	r3, [r7, #4]
 800c3b2:	460b      	mov	r3, r1
 800c3b4:	72fb      	strb	r3, [r7, #11]
 800c3b6:	4613      	mov	r3, r2
 800c3b8:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	789b      	ldrb	r3, [r3, #2]
 800c3be:	2b01      	cmp	r3, #1
 800c3c0:	d11c      	bne.n	800c3fc <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800c3c2:	7afb      	ldrb	r3, [r7, #11]
 800c3c4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800c3c8:	b2da      	uxtb	r2, r3
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2206      	movs	r2, #6
 800c3d2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	893a      	ldrh	r2, [r7, #8]
 800c3d8:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800c3da:	893b      	ldrh	r3, [r7, #8]
 800c3dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c3e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c3e4:	d104      	bne.n	800c3f0 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800c3e6:	68fb      	ldr	r3, [r7, #12]
 800c3e8:	f240 4209 	movw	r2, #1033	@ 0x409
 800c3ec:	829a      	strh	r2, [r3, #20]
 800c3ee:	e002      	b.n	800c3f6 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800c3f0:	68fb      	ldr	r3, [r7, #12]
 800c3f2:	2200      	movs	r2, #0
 800c3f4:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	8b3a      	ldrh	r2, [r7, #24]
 800c3fa:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800c3fc:	8b3b      	ldrh	r3, [r7, #24]
 800c3fe:	461a      	mov	r2, r3
 800c400:	6879      	ldr	r1, [r7, #4]
 800c402:	68f8      	ldr	r0, [r7, #12]
 800c404:	f000 fbcd 	bl	800cba2 <USBH_CtlReq>
 800c408:	4603      	mov	r3, r0
}
 800c40a:	4618      	mov	r0, r3
 800c40c:	3710      	adds	r7, #16
 800c40e:	46bd      	mov	sp, r7
 800c410:	bd80      	pop	{r7, pc}

0800c412 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800c412:	b580      	push	{r7, lr}
 800c414:	b082      	sub	sp, #8
 800c416:	af00      	add	r7, sp, #0
 800c418:	6078      	str	r0, [r7, #4]
 800c41a:	460b      	mov	r3, r1
 800c41c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	789b      	ldrb	r3, [r3, #2]
 800c422:	2b01      	cmp	r3, #1
 800c424:	d10f      	bne.n	800c446 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	2200      	movs	r2, #0
 800c42a:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	2205      	movs	r2, #5
 800c430:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800c432:	78fb      	ldrb	r3, [r7, #3]
 800c434:	b29a      	uxth	r2, r3
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	2200      	movs	r2, #0
 800c43e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	2200      	movs	r2, #0
 800c444:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c446:	2200      	movs	r2, #0
 800c448:	2100      	movs	r1, #0
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	f000 fba9 	bl	800cba2 <USBH_CtlReq>
 800c450:	4603      	mov	r3, r0
}
 800c452:	4618      	mov	r0, r3
 800c454:	3708      	adds	r7, #8
 800c456:	46bd      	mov	sp, r7
 800c458:	bd80      	pop	{r7, pc}

0800c45a <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800c45a:	b580      	push	{r7, lr}
 800c45c:	b082      	sub	sp, #8
 800c45e:	af00      	add	r7, sp, #0
 800c460:	6078      	str	r0, [r7, #4]
 800c462:	460b      	mov	r3, r1
 800c464:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c466:	687b      	ldr	r3, [r7, #4]
 800c468:	789b      	ldrb	r3, [r3, #2]
 800c46a:	2b01      	cmp	r3, #1
 800c46c:	d10e      	bne.n	800c48c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	2200      	movs	r2, #0
 800c472:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800c474:	687b      	ldr	r3, [r7, #4]
 800c476:	2209      	movs	r2, #9
 800c478:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	887a      	ldrh	r2, [r7, #2]
 800c47e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	2200      	movs	r2, #0
 800c484:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2200      	movs	r2, #0
 800c48a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c48c:	2200      	movs	r2, #0
 800c48e:	2100      	movs	r1, #0
 800c490:	6878      	ldr	r0, [r7, #4]
 800c492:	f000 fb86 	bl	800cba2 <USBH_CtlReq>
 800c496:	4603      	mov	r3, r0
}
 800c498:	4618      	mov	r0, r3
 800c49a:	3708      	adds	r7, #8
 800c49c:	46bd      	mov	sp, r7
 800c49e:	bd80      	pop	{r7, pc}

0800c4a0 <USBH_SetInterface>:
  * @param  phost: Host Handle
  * @param  altSetting: Interface value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetInterface(USBH_HandleTypeDef *phost, uint8_t ep_num, uint8_t altSetting)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b082      	sub	sp, #8
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
 800c4a8:	460b      	mov	r3, r1
 800c4aa:	70fb      	strb	r3, [r7, #3]
 800c4ac:	4613      	mov	r3, r2
 800c4ae:	70bb      	strb	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	789b      	ldrb	r3, [r3, #2]
 800c4b4:	2b01      	cmp	r3, #1
 800c4b6:	d110      	bne.n	800c4da <USBH_SetInterface+0x3a>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_INTERFACE
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	2201      	movs	r2, #1
 800c4bc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_INTERFACE;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	220b      	movs	r2, #11
 800c4c2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = altSetting;
 800c4c4:	78bb      	ldrb	r3, [r7, #2]
 800c4c6:	b29a      	uxth	r2, r3
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c4cc:	78fb      	ldrb	r3, [r7, #3]
 800c4ce:	b29a      	uxth	r2, r3
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c4d4:	687b      	ldr	r3, [r7, #4]
 800c4d6:	2200      	movs	r2, #0
 800c4d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c4da:	2200      	movs	r2, #0
 800c4dc:	2100      	movs	r1, #0
 800c4de:	6878      	ldr	r0, [r7, #4]
 800c4e0:	f000 fb5f 	bl	800cba2 <USBH_CtlReq>
 800c4e4:	4603      	mov	r3, r0
}
 800c4e6:	4618      	mov	r0, r3
 800c4e8:	3708      	adds	r7, #8
 800c4ea:	46bd      	mov	sp, r7
 800c4ec:	bd80      	pop	{r7, pc}

0800c4ee <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800c4ee:	b580      	push	{r7, lr}
 800c4f0:	b082      	sub	sp, #8
 800c4f2:	af00      	add	r7, sp, #0
 800c4f4:	6078      	str	r0, [r7, #4]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	789b      	ldrb	r3, [r3, #2]
 800c4fe:	2b01      	cmp	r3, #1
 800c500:	d10f      	bne.n	800c522 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800c502:	687b      	ldr	r3, [r7, #4]
 800c504:	2200      	movs	r2, #0
 800c506:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	2203      	movs	r2, #3
 800c50c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800c50e:	78fb      	ldrb	r3, [r7, #3]
 800c510:	b29a      	uxth	r2, r3
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2200      	movs	r2, #0
 800c51a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	2200      	movs	r2, #0
 800c520:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c522:	2200      	movs	r2, #0
 800c524:	2100      	movs	r1, #0
 800c526:	6878      	ldr	r0, [r7, #4]
 800c528:	f000 fb3b 	bl	800cba2 <USBH_CtlReq>
 800c52c:	4603      	mov	r3, r0
}
 800c52e:	4618      	mov	r0, r3
 800c530:	3708      	adds	r7, #8
 800c532:	46bd      	mov	sp, r7
 800c534:	bd80      	pop	{r7, pc}

0800c536 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800c536:	b580      	push	{r7, lr}
 800c538:	b082      	sub	sp, #8
 800c53a:	af00      	add	r7, sp, #0
 800c53c:	6078      	str	r0, [r7, #4]
 800c53e:	460b      	mov	r3, r1
 800c540:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	789b      	ldrb	r3, [r3, #2]
 800c546:	2b01      	cmp	r3, #1
 800c548:	d10f      	bne.n	800c56a <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	2202      	movs	r2, #2
 800c54e:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	2201      	movs	r2, #1
 800c554:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	2200      	movs	r2, #0
 800c55a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800c55c:	78fb      	ldrb	r3, [r7, #3]
 800c55e:	b29a      	uxth	r2, r3
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800c56a:	2200      	movs	r2, #0
 800c56c:	2100      	movs	r1, #0
 800c56e:	6878      	ldr	r0, [r7, #4]
 800c570:	f000 fb17 	bl	800cba2 <USBH_CtlReq>
 800c574:	4603      	mov	r3, r0
}
 800c576:	4618      	mov	r0, r3
 800c578:	3708      	adds	r7, #8
 800c57a:	46bd      	mov	sp, r7
 800c57c:	bd80      	pop	{r7, pc}
	...

0800c580 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c580:	b480      	push	{r7}
 800c582:	b087      	sub	sp, #28
 800c584:	af00      	add	r7, sp, #0
 800c586:	60f8      	str	r0, [r7, #12]
 800c588:	60b9      	str	r1, [r7, #8]
 800c58a:	4613      	mov	r3, r2
 800c58c:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800c594:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800c596:	2300      	movs	r3, #0
 800c598:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800c59a:	68bb      	ldr	r3, [r7, #8]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d101      	bne.n	800c5a4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800c5a0:	2302      	movs	r3, #2
 800c5a2:	e094      	b.n	800c6ce <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	781a      	ldrb	r2, [r3, #0]
 800c5a8:	693b      	ldr	r3, [r7, #16]
 800c5aa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800c5ac:	68bb      	ldr	r3, [r7, #8]
 800c5ae:	785a      	ldrb	r2, [r3, #1]
 800c5b0:	693b      	ldr	r3, [r7, #16]
 800c5b2:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800c5b4:	68bb      	ldr	r3, [r7, #8]
 800c5b6:	3302      	adds	r3, #2
 800c5b8:	781b      	ldrb	r3, [r3, #0]
 800c5ba:	461a      	mov	r2, r3
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	3303      	adds	r3, #3
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	021b      	lsls	r3, r3, #8
 800c5c4:	b29b      	uxth	r3, r3
 800c5c6:	4313      	orrs	r3, r2
 800c5c8:	b29a      	uxth	r2, r3
 800c5ca:	693b      	ldr	r3, [r7, #16]
 800c5cc:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	791a      	ldrb	r2, [r3, #4]
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	795a      	ldrb	r2, [r3, #5]
 800c5da:	693b      	ldr	r3, [r7, #16]
 800c5dc:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	799a      	ldrb	r2, [r3, #6]
 800c5e2:	693b      	ldr	r3, [r7, #16]
 800c5e4:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800c5e6:	68bb      	ldr	r3, [r7, #8]
 800c5e8:	79da      	ldrb	r2, [r3, #7]
 800c5ea:	693b      	ldr	r3, [r7, #16]
 800c5ec:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c5f4:	2b00      	cmp	r3, #0
 800c5f6:	d004      	beq.n	800c602 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800c5fe:	2b01      	cmp	r3, #1
 800c600:	d11b      	bne.n	800c63a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800c602:	693b      	ldr	r3, [r7, #16]
 800c604:	79db      	ldrb	r3, [r3, #7]
 800c606:	2b20      	cmp	r3, #32
 800c608:	dc0f      	bgt.n	800c62a <USBH_ParseDevDesc+0xaa>
 800c60a:	2b08      	cmp	r3, #8
 800c60c:	db0f      	blt.n	800c62e <USBH_ParseDevDesc+0xae>
 800c60e:	3b08      	subs	r3, #8
 800c610:	4a32      	ldr	r2, [pc, #200]	@ (800c6dc <USBH_ParseDevDesc+0x15c>)
 800c612:	fa22 f303 	lsr.w	r3, r2, r3
 800c616:	f003 0301 	and.w	r3, r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	bf14      	ite	ne
 800c61e:	2301      	movne	r3, #1
 800c620:	2300      	moveq	r3, #0
 800c622:	b2db      	uxtb	r3, r3
 800c624:	2b00      	cmp	r3, #0
 800c626:	d106      	bne.n	800c636 <USBH_ParseDevDesc+0xb6>
 800c628:	e001      	b.n	800c62e <USBH_ParseDevDesc+0xae>
 800c62a:	2b40      	cmp	r3, #64	@ 0x40
 800c62c:	d003      	beq.n	800c636 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800c62e:	693b      	ldr	r3, [r7, #16]
 800c630:	2208      	movs	r2, #8
 800c632:	71da      	strb	r2, [r3, #7]
        break;
 800c634:	e000      	b.n	800c638 <USBH_ParseDevDesc+0xb8>
        break;
 800c636:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800c638:	e00e      	b.n	800c658 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c640:	2b02      	cmp	r3, #2
 800c642:	d107      	bne.n	800c654 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800c644:	693b      	ldr	r3, [r7, #16]
 800c646:	79db      	ldrb	r3, [r3, #7]
 800c648:	2b08      	cmp	r3, #8
 800c64a:	d005      	beq.n	800c658 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	2208      	movs	r2, #8
 800c650:	71da      	strb	r2, [r3, #7]
 800c652:	e001      	b.n	800c658 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c654:	2303      	movs	r3, #3
 800c656:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800c658:	88fb      	ldrh	r3, [r7, #6]
 800c65a:	2b08      	cmp	r3, #8
 800c65c:	d936      	bls.n	800c6cc <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800c65e:	68bb      	ldr	r3, [r7, #8]
 800c660:	3308      	adds	r3, #8
 800c662:	781b      	ldrb	r3, [r3, #0]
 800c664:	461a      	mov	r2, r3
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	3309      	adds	r3, #9
 800c66a:	781b      	ldrb	r3, [r3, #0]
 800c66c:	021b      	lsls	r3, r3, #8
 800c66e:	b29b      	uxth	r3, r3
 800c670:	4313      	orrs	r3, r2
 800c672:	b29a      	uxth	r2, r3
 800c674:	693b      	ldr	r3, [r7, #16]
 800c676:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800c678:	68bb      	ldr	r3, [r7, #8]
 800c67a:	330a      	adds	r3, #10
 800c67c:	781b      	ldrb	r3, [r3, #0]
 800c67e:	461a      	mov	r2, r3
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	330b      	adds	r3, #11
 800c684:	781b      	ldrb	r3, [r3, #0]
 800c686:	021b      	lsls	r3, r3, #8
 800c688:	b29b      	uxth	r3, r3
 800c68a:	4313      	orrs	r3, r2
 800c68c:	b29a      	uxth	r2, r3
 800c68e:	693b      	ldr	r3, [r7, #16]
 800c690:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800c692:	68bb      	ldr	r3, [r7, #8]
 800c694:	330c      	adds	r3, #12
 800c696:	781b      	ldrb	r3, [r3, #0]
 800c698:	461a      	mov	r2, r3
 800c69a:	68bb      	ldr	r3, [r7, #8]
 800c69c:	330d      	adds	r3, #13
 800c69e:	781b      	ldrb	r3, [r3, #0]
 800c6a0:	021b      	lsls	r3, r3, #8
 800c6a2:	b29b      	uxth	r3, r3
 800c6a4:	4313      	orrs	r3, r2
 800c6a6:	b29a      	uxth	r2, r3
 800c6a8:	693b      	ldr	r3, [r7, #16]
 800c6aa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800c6ac:	68bb      	ldr	r3, [r7, #8]
 800c6ae:	7b9a      	ldrb	r2, [r3, #14]
 800c6b0:	693b      	ldr	r3, [r7, #16]
 800c6b2:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800c6b4:	68bb      	ldr	r3, [r7, #8]
 800c6b6:	7bda      	ldrb	r2, [r3, #15]
 800c6b8:	693b      	ldr	r3, [r7, #16]
 800c6ba:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800c6bc:	68bb      	ldr	r3, [r7, #8]
 800c6be:	7c1a      	ldrb	r2, [r3, #16]
 800c6c0:	693b      	ldr	r3, [r7, #16]
 800c6c2:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800c6c4:	68bb      	ldr	r3, [r7, #8]
 800c6c6:	7c5a      	ldrb	r2, [r3, #17]
 800c6c8:	693b      	ldr	r3, [r7, #16]
 800c6ca:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800c6cc:	7dfb      	ldrb	r3, [r7, #23]
}
 800c6ce:	4618      	mov	r0, r3
 800c6d0:	371c      	adds	r7, #28
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	01000101 	.word	0x01000101

0800c6e0 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800c6e0:	b580      	push	{r7, lr}
 800c6e2:	b08c      	sub	sp, #48	@ 0x30
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	60f8      	str	r0, [r7, #12]
 800c6e8:	60b9      	str	r1, [r7, #8]
 800c6ea:	4613      	mov	r3, r2
 800c6ec:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800c6ee:	68fb      	ldr	r3, [r7, #12]
 800c6f0:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800c6f4:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800c6fc:	2300      	movs	r3, #0
 800c6fe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800c702:	2300      	movs	r3, #0
 800c704:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800c708:	68bb      	ldr	r3, [r7, #8]
 800c70a:	2b00      	cmp	r3, #0
 800c70c:	d101      	bne.n	800c712 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800c70e:	2302      	movs	r3, #2
 800c710:	e0da      	b.n	800c8c8 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800c712:	68bb      	ldr	r3, [r7, #8]
 800c714:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800c716:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c718:	781b      	ldrb	r3, [r3, #0]
 800c71a:	2b09      	cmp	r3, #9
 800c71c:	d002      	beq.n	800c724 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800c71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c720:	2209      	movs	r2, #9
 800c722:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	781a      	ldrb	r2, [r3, #0]
 800c728:	6a3b      	ldr	r3, [r7, #32]
 800c72a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800c72c:	68bb      	ldr	r3, [r7, #8]
 800c72e:	785a      	ldrb	r2, [r3, #1]
 800c730:	6a3b      	ldr	r3, [r7, #32]
 800c732:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800c734:	68bb      	ldr	r3, [r7, #8]
 800c736:	3302      	adds	r3, #2
 800c738:	781b      	ldrb	r3, [r3, #0]
 800c73a:	461a      	mov	r2, r3
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	3303      	adds	r3, #3
 800c740:	781b      	ldrb	r3, [r3, #0]
 800c742:	021b      	lsls	r3, r3, #8
 800c744:	b29b      	uxth	r3, r3
 800c746:	4313      	orrs	r3, r2
 800c748:	b29b      	uxth	r3, r3
 800c74a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c74e:	bf28      	it	cs
 800c750:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800c754:	b29a      	uxth	r2, r3
 800c756:	6a3b      	ldr	r3, [r7, #32]
 800c758:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	791a      	ldrb	r2, [r3, #4]
 800c75e:	6a3b      	ldr	r3, [r7, #32]
 800c760:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800c762:	68bb      	ldr	r3, [r7, #8]
 800c764:	795a      	ldrb	r2, [r3, #5]
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800c76a:	68bb      	ldr	r3, [r7, #8]
 800c76c:	799a      	ldrb	r2, [r3, #6]
 800c76e:	6a3b      	ldr	r3, [r7, #32]
 800c770:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800c772:	68bb      	ldr	r3, [r7, #8]
 800c774:	79da      	ldrb	r2, [r3, #7]
 800c776:	6a3b      	ldr	r3, [r7, #32]
 800c778:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	7a1a      	ldrb	r2, [r3, #8]
 800c77e:	6a3b      	ldr	r3, [r7, #32]
 800c780:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800c782:	88fb      	ldrh	r3, [r7, #6]
 800c784:	2b09      	cmp	r3, #9
 800c786:	f240 809d 	bls.w	800c8c4 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800c78a:	2309      	movs	r3, #9
 800c78c:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800c78e:	2300      	movs	r3, #0
 800c790:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c792:	e081      	b.n	800c898 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c794:	f107 0316 	add.w	r3, r7, #22
 800c798:	4619      	mov	r1, r3
 800c79a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c79c:	f000 f9e7 	bl	800cb6e <USBH_GetNextDesc>
 800c7a0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800c7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7a4:	785b      	ldrb	r3, [r3, #1]
 800c7a6:	2b04      	cmp	r3, #4
 800c7a8:	d176      	bne.n	800c898 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800c7aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7ac:	781b      	ldrb	r3, [r3, #0]
 800c7ae:	2b09      	cmp	r3, #9
 800c7b0:	d002      	beq.n	800c7b8 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c7b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7b4:	2209      	movs	r2, #9
 800c7b6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c7b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c7bc:	2232      	movs	r2, #50	@ 0x32
 800c7be:	fb02 f303 	mul.w	r3, r2, r3
 800c7c2:	3308      	adds	r3, #8
 800c7c4:	6a3a      	ldr	r2, [r7, #32]
 800c7c6:	4413      	add	r3, r2
 800c7c8:	3302      	adds	r3, #2
 800c7ca:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c7cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c7ce:	69f8      	ldr	r0, [r7, #28]
 800c7d0:	f000 f87e 	bl	800c8d0 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c7de:	e043      	b.n	800c868 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c7e0:	f107 0316 	add.w	r3, r7, #22
 800c7e4:	4619      	mov	r1, r3
 800c7e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c7e8:	f000 f9c1 	bl	800cb6e <USBH_GetNextDesc>
 800c7ec:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c7f0:	785b      	ldrb	r3, [r3, #1]
 800c7f2:	2b05      	cmp	r3, #5
 800c7f4:	d138      	bne.n	800c868 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c7f6:	69fb      	ldr	r3, [r7, #28]
 800c7f8:	795b      	ldrb	r3, [r3, #5]
 800c7fa:	2b01      	cmp	r3, #1
 800c7fc:	d113      	bne.n	800c826 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c802:	2b02      	cmp	r3, #2
 800c804:	d003      	beq.n	800c80e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c806:	69fb      	ldr	r3, [r7, #28]
 800c808:	799b      	ldrb	r3, [r3, #6]
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d10b      	bne.n	800c826 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	79db      	ldrb	r3, [r3, #7]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d10b      	bne.n	800c82e <USBH_ParseCfgDesc+0x14e>
 800c816:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c818:	781b      	ldrb	r3, [r3, #0]
 800c81a:	2b09      	cmp	r3, #9
 800c81c:	d007      	beq.n	800c82e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c81e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c820:	2209      	movs	r2, #9
 800c822:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c824:	e003      	b.n	800c82e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c828:	2207      	movs	r2, #7
 800c82a:	701a      	strb	r2, [r3, #0]
 800c82c:	e000      	b.n	800c830 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c82e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c830:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c834:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c838:	3201      	adds	r2, #1
 800c83a:	00d2      	lsls	r2, r2, #3
 800c83c:	2132      	movs	r1, #50	@ 0x32
 800c83e:	fb01 f303 	mul.w	r3, r1, r3
 800c842:	4413      	add	r3, r2
 800c844:	3308      	adds	r3, #8
 800c846:	6a3a      	ldr	r2, [r7, #32]
 800c848:	4413      	add	r3, r2
 800c84a:	3304      	adds	r3, #4
 800c84c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c84e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c850:	69b9      	ldr	r1, [r7, #24]
 800c852:	68f8      	ldr	r0, [r7, #12]
 800c854:	f000 f870 	bl	800c938 <USBH_ParseEPDesc>
 800c858:	4603      	mov	r3, r0
 800c85a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c85e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c862:	3301      	adds	r3, #1
 800c864:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	791b      	ldrb	r3, [r3, #4]
 800c86c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c870:	429a      	cmp	r2, r3
 800c872:	d204      	bcs.n	800c87e <USBH_ParseCfgDesc+0x19e>
 800c874:	6a3b      	ldr	r3, [r7, #32]
 800c876:	885a      	ldrh	r2, [r3, #2]
 800c878:	8afb      	ldrh	r3, [r7, #22]
 800c87a:	429a      	cmp	r2, r3
 800c87c:	d8b0      	bhi.n	800c7e0 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c87e:	69fb      	ldr	r3, [r7, #28]
 800c880:	791b      	ldrb	r3, [r3, #4]
 800c882:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c886:	429a      	cmp	r2, r3
 800c888:	d201      	bcs.n	800c88e <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800c88a:	2303      	movs	r3, #3
 800c88c:	e01c      	b.n	800c8c8 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800c88e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c892:	3301      	adds	r3, #1
 800c894:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c898:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c89c:	2b09      	cmp	r3, #9
 800c89e:	d805      	bhi.n	800c8ac <USBH_ParseCfgDesc+0x1cc>
 800c8a0:	6a3b      	ldr	r3, [r7, #32]
 800c8a2:	885a      	ldrh	r2, [r3, #2]
 800c8a4:	8afb      	ldrh	r3, [r7, #22]
 800c8a6:	429a      	cmp	r2, r3
 800c8a8:	f63f af74 	bhi.w	800c794 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c8ac:	6a3b      	ldr	r3, [r7, #32]
 800c8ae:	791b      	ldrb	r3, [r3, #4]
 800c8b0:	2b0a      	cmp	r3, #10
 800c8b2:	bf28      	it	cs
 800c8b4:	230a      	movcs	r3, #10
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d201      	bcs.n	800c8c4 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800c8c0:	2303      	movs	r3, #3
 800c8c2:	e001      	b.n	800c8c8 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800c8c4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c8c8:	4618      	mov	r0, r3
 800c8ca:	3730      	adds	r7, #48	@ 0x30
 800c8cc:	46bd      	mov	sp, r7
 800c8ce:	bd80      	pop	{r7, pc}

0800c8d0 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c8d0:	b480      	push	{r7}
 800c8d2:	b083      	sub	sp, #12
 800c8d4:	af00      	add	r7, sp, #0
 800c8d6:	6078      	str	r0, [r7, #4]
 800c8d8:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c8da:	683b      	ldr	r3, [r7, #0]
 800c8dc:	781a      	ldrb	r2, [r3, #0]
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c8e2:	683b      	ldr	r3, [r7, #0]
 800c8e4:	785a      	ldrb	r2, [r3, #1]
 800c8e6:	687b      	ldr	r3, [r7, #4]
 800c8e8:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	789a      	ldrb	r2, [r3, #2]
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c8f2:	683b      	ldr	r3, [r7, #0]
 800c8f4:	78da      	ldrb	r2, [r3, #3]
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c8fa:	683b      	ldr	r3, [r7, #0]
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	781b      	ldrb	r3, [r3, #0]
 800c900:	2b05      	cmp	r3, #5
 800c902:	bf28      	it	cs
 800c904:	2305      	movcs	r3, #5
 800c906:	b2da      	uxtb	r2, r3
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c90c:	683b      	ldr	r3, [r7, #0]
 800c90e:	795a      	ldrb	r2, [r3, #5]
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	799a      	ldrb	r2, [r3, #6]
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c91c:	683b      	ldr	r3, [r7, #0]
 800c91e:	79da      	ldrb	r2, [r3, #7]
 800c920:	687b      	ldr	r3, [r7, #4]
 800c922:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c924:	683b      	ldr	r3, [r7, #0]
 800c926:	7a1a      	ldrb	r2, [r3, #8]
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	721a      	strb	r2, [r3, #8]
}
 800c92c:	bf00      	nop
 800c92e:	370c      	adds	r7, #12
 800c930:	46bd      	mov	sp, r7
 800c932:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c936:	4770      	bx	lr

0800c938 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c938:	b480      	push	{r7}
 800c93a:	b087      	sub	sp, #28
 800c93c:	af00      	add	r7, sp, #0
 800c93e:	60f8      	str	r0, [r7, #12]
 800c940:	60b9      	str	r1, [r7, #8]
 800c942:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c944:	2300      	movs	r3, #0
 800c946:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	781a      	ldrb	r2, [r3, #0]
 800c94c:	68bb      	ldr	r3, [r7, #8]
 800c94e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	785a      	ldrb	r2, [r3, #1]
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	789a      	ldrb	r2, [r3, #2]
 800c95c:	68bb      	ldr	r3, [r7, #8]
 800c95e:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	78da      	ldrb	r2, [r3, #3]
 800c964:	68bb      	ldr	r3, [r7, #8]
 800c966:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	3304      	adds	r3, #4
 800c96c:	781b      	ldrb	r3, [r3, #0]
 800c96e:	461a      	mov	r2, r3
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3305      	adds	r3, #5
 800c974:	781b      	ldrb	r3, [r3, #0]
 800c976:	021b      	lsls	r3, r3, #8
 800c978:	b29b      	uxth	r3, r3
 800c97a:	4313      	orrs	r3, r2
 800c97c:	b29a      	uxth	r2, r3
 800c97e:	68bb      	ldr	r3, [r7, #8]
 800c980:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	799a      	ldrb	r2, [r3, #6]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c98a:	68bb      	ldr	r3, [r7, #8]
 800c98c:	889b      	ldrh	r3, [r3, #4]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d009      	beq.n	800c9a6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c996:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c99a:	d804      	bhi.n	800c9a6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c99c:	68bb      	ldr	r3, [r7, #8]
 800c99e:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c9a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9a4:	d901      	bls.n	800c9aa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c9a6:	2303      	movs	r3, #3
 800c9a8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c9aa:	68fb      	ldr	r3, [r7, #12]
 800c9ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d136      	bne.n	800ca22 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c9b4:	68bb      	ldr	r3, [r7, #8]
 800c9b6:	78db      	ldrb	r3, [r3, #3]
 800c9b8:	f003 0303 	and.w	r3, r3, #3
 800c9bc:	2b02      	cmp	r3, #2
 800c9be:	d108      	bne.n	800c9d2 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c9c0:	68bb      	ldr	r3, [r7, #8]
 800c9c2:	889b      	ldrh	r3, [r3, #4]
 800c9c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c9c8:	f240 8097 	bls.w	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c9cc:	2303      	movs	r3, #3
 800c9ce:	75fb      	strb	r3, [r7, #23]
 800c9d0:	e093      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c9d2:	68bb      	ldr	r3, [r7, #8]
 800c9d4:	78db      	ldrb	r3, [r3, #3]
 800c9d6:	f003 0303 	and.w	r3, r3, #3
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d107      	bne.n	800c9ee <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c9de:	68bb      	ldr	r3, [r7, #8]
 800c9e0:	889b      	ldrh	r3, [r3, #4]
 800c9e2:	2b40      	cmp	r3, #64	@ 0x40
 800c9e4:	f240 8089 	bls.w	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c9e8:	2303      	movs	r3, #3
 800c9ea:	75fb      	strb	r3, [r7, #23]
 800c9ec:	e085      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c9ee:	68bb      	ldr	r3, [r7, #8]
 800c9f0:	78db      	ldrb	r3, [r3, #3]
 800c9f2:	f003 0303 	and.w	r3, r3, #3
 800c9f6:	2b01      	cmp	r3, #1
 800c9f8:	d005      	beq.n	800ca06 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	78db      	ldrb	r3, [r3, #3]
 800c9fe:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800ca02:	2b03      	cmp	r3, #3
 800ca04:	d10a      	bne.n	800ca1c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	799b      	ldrb	r3, [r3, #6]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d003      	beq.n	800ca16 <USBH_ParseEPDesc+0xde>
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	799b      	ldrb	r3, [r3, #6]
 800ca12:	2b10      	cmp	r3, #16
 800ca14:	d970      	bls.n	800caf8 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800ca16:	2303      	movs	r3, #3
 800ca18:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ca1a:	e06d      	b.n	800caf8 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ca1c:	2303      	movs	r3, #3
 800ca1e:	75fb      	strb	r3, [r7, #23]
 800ca20:	e06b      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ca28:	2b01      	cmp	r3, #1
 800ca2a:	d13c      	bne.n	800caa6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ca2c:	68bb      	ldr	r3, [r7, #8]
 800ca2e:	78db      	ldrb	r3, [r3, #3]
 800ca30:	f003 0303 	and.w	r3, r3, #3
 800ca34:	2b02      	cmp	r3, #2
 800ca36:	d005      	beq.n	800ca44 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800ca38:	68bb      	ldr	r3, [r7, #8]
 800ca3a:	78db      	ldrb	r3, [r3, #3]
 800ca3c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800ca40:	2b00      	cmp	r3, #0
 800ca42:	d106      	bne.n	800ca52 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ca44:	68bb      	ldr	r3, [r7, #8]
 800ca46:	889b      	ldrh	r3, [r3, #4]
 800ca48:	2b40      	cmp	r3, #64	@ 0x40
 800ca4a:	d956      	bls.n	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ca4c:	2303      	movs	r3, #3
 800ca4e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800ca50:	e053      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	78db      	ldrb	r3, [r3, #3]
 800ca56:	f003 0303 	and.w	r3, r3, #3
 800ca5a:	2b01      	cmp	r3, #1
 800ca5c:	d10e      	bne.n	800ca7c <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800ca5e:	68bb      	ldr	r3, [r7, #8]
 800ca60:	799b      	ldrb	r3, [r3, #6]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d007      	beq.n	800ca76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800ca66:	68bb      	ldr	r3, [r7, #8]
 800ca68:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800ca6a:	2b10      	cmp	r3, #16
 800ca6c:	d803      	bhi.n	800ca76 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800ca6e:	68bb      	ldr	r3, [r7, #8]
 800ca70:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800ca72:	2b40      	cmp	r3, #64	@ 0x40
 800ca74:	d941      	bls.n	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ca76:	2303      	movs	r3, #3
 800ca78:	75fb      	strb	r3, [r7, #23]
 800ca7a:	e03e      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ca7c:	68bb      	ldr	r3, [r7, #8]
 800ca7e:	78db      	ldrb	r3, [r3, #3]
 800ca80:	f003 0303 	and.w	r3, r3, #3
 800ca84:	2b03      	cmp	r3, #3
 800ca86:	d10b      	bne.n	800caa0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	799b      	ldrb	r3, [r3, #6]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d004      	beq.n	800ca9a <USBH_ParseEPDesc+0x162>
 800ca90:	68bb      	ldr	r3, [r7, #8]
 800ca92:	889b      	ldrh	r3, [r3, #4]
 800ca94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ca98:	d32f      	bcc.n	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	75fb      	strb	r3, [r7, #23]
 800ca9e:	e02c      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800caa0:	2303      	movs	r3, #3
 800caa2:	75fb      	strb	r3, [r7, #23]
 800caa4:	e029      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800caac:	2b02      	cmp	r3, #2
 800caae:	d120      	bne.n	800caf2 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	78db      	ldrb	r3, [r3, #3]
 800cab4:	f003 0303 	and.w	r3, r3, #3
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d106      	bne.n	800caca <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800cabc:	68bb      	ldr	r3, [r7, #8]
 800cabe:	889b      	ldrh	r3, [r3, #4]
 800cac0:	2b08      	cmp	r3, #8
 800cac2:	d01a      	beq.n	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cac4:	2303      	movs	r3, #3
 800cac6:	75fb      	strb	r3, [r7, #23]
 800cac8:	e017      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800caca:	68bb      	ldr	r3, [r7, #8]
 800cacc:	78db      	ldrb	r3, [r3, #3]
 800cace:	f003 0303 	and.w	r3, r3, #3
 800cad2:	2b03      	cmp	r3, #3
 800cad4:	d10a      	bne.n	800caec <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800cad6:	68bb      	ldr	r3, [r7, #8]
 800cad8:	799b      	ldrb	r3, [r3, #6]
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d003      	beq.n	800cae6 <USBH_ParseEPDesc+0x1ae>
 800cade:	68bb      	ldr	r3, [r7, #8]
 800cae0:	889b      	ldrh	r3, [r3, #4]
 800cae2:	2b08      	cmp	r3, #8
 800cae4:	d909      	bls.n	800cafa <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800cae6:	2303      	movs	r3, #3
 800cae8:	75fb      	strb	r3, [r7, #23]
 800caea:	e006      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800caec:	2303      	movs	r3, #3
 800caee:	75fb      	strb	r3, [r7, #23]
 800caf0:	e003      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800caf2:	2303      	movs	r3, #3
 800caf4:	75fb      	strb	r3, [r7, #23]
 800caf6:	e000      	b.n	800cafa <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800caf8:	bf00      	nop
  }

  return status;
 800cafa:	7dfb      	ldrb	r3, [r7, #23]
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	371c      	adds	r7, #28
 800cb00:	46bd      	mov	sp, r7
 800cb02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb06:	4770      	bx	lr

0800cb08 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800cb08:	b480      	push	{r7}
 800cb0a:	b087      	sub	sp, #28
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	4613      	mov	r3, r2
 800cb14:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800cb16:	68fb      	ldr	r3, [r7, #12]
 800cb18:	3301      	adds	r3, #1
 800cb1a:	781b      	ldrb	r3, [r3, #0]
 800cb1c:	2b03      	cmp	r3, #3
 800cb1e:	d120      	bne.n	800cb62 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800cb20:	68fb      	ldr	r3, [r7, #12]
 800cb22:	781b      	ldrb	r3, [r3, #0]
 800cb24:	1e9a      	subs	r2, r3, #2
 800cb26:	88fb      	ldrh	r3, [r7, #6]
 800cb28:	4293      	cmp	r3, r2
 800cb2a:	bf28      	it	cs
 800cb2c:	4613      	movcs	r3, r2
 800cb2e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	3302      	adds	r3, #2
 800cb34:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800cb36:	2300      	movs	r3, #0
 800cb38:	82fb      	strh	r3, [r7, #22]
 800cb3a:	e00b      	b.n	800cb54 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800cb3c:	8afb      	ldrh	r3, [r7, #22]
 800cb3e:	68fa      	ldr	r2, [r7, #12]
 800cb40:	4413      	add	r3, r2
 800cb42:	781a      	ldrb	r2, [r3, #0]
 800cb44:	68bb      	ldr	r3, [r7, #8]
 800cb46:	701a      	strb	r2, [r3, #0]
      pdest++;
 800cb48:	68bb      	ldr	r3, [r7, #8]
 800cb4a:	3301      	adds	r3, #1
 800cb4c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800cb4e:	8afb      	ldrh	r3, [r7, #22]
 800cb50:	3302      	adds	r3, #2
 800cb52:	82fb      	strh	r3, [r7, #22]
 800cb54:	8afa      	ldrh	r2, [r7, #22]
 800cb56:	8abb      	ldrh	r3, [r7, #20]
 800cb58:	429a      	cmp	r2, r3
 800cb5a:	d3ef      	bcc.n	800cb3c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	2200      	movs	r2, #0
 800cb60:	701a      	strb	r2, [r3, #0]
  }
}
 800cb62:	bf00      	nop
 800cb64:	371c      	adds	r7, #28
 800cb66:	46bd      	mov	sp, r7
 800cb68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb6c:	4770      	bx	lr

0800cb6e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800cb6e:	b480      	push	{r7}
 800cb70:	b085      	sub	sp, #20
 800cb72:	af00      	add	r7, sp, #0
 800cb74:	6078      	str	r0, [r7, #4]
 800cb76:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800cb78:	683b      	ldr	r3, [r7, #0]
 800cb7a:	881b      	ldrh	r3, [r3, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	7812      	ldrb	r2, [r2, #0]
 800cb80:	4413      	add	r3, r2
 800cb82:	b29a      	uxth	r2, r3
 800cb84:	683b      	ldr	r3, [r7, #0]
 800cb86:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800cb88:	687b      	ldr	r3, [r7, #4]
 800cb8a:	781b      	ldrb	r3, [r3, #0]
 800cb8c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	4413      	add	r3, r2
 800cb92:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800cb94:	68fb      	ldr	r3, [r7, #12]
}
 800cb96:	4618      	mov	r0, r3
 800cb98:	3714      	adds	r7, #20
 800cb9a:	46bd      	mov	sp, r7
 800cb9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba0:	4770      	bx	lr

0800cba2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800cba2:	b580      	push	{r7, lr}
 800cba4:	b086      	sub	sp, #24
 800cba6:	af00      	add	r7, sp, #0
 800cba8:	60f8      	str	r0, [r7, #12]
 800cbaa:	60b9      	str	r1, [r7, #8]
 800cbac:	4613      	mov	r3, r2
 800cbae:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800cbb4:	68fb      	ldr	r3, [r7, #12]
 800cbb6:	789b      	ldrb	r3, [r3, #2]
 800cbb8:	2b01      	cmp	r3, #1
 800cbba:	d002      	beq.n	800cbc2 <USBH_CtlReq+0x20>
 800cbbc:	2b02      	cmp	r3, #2
 800cbbe:	d00f      	beq.n	800cbe0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800cbc0:	e027      	b.n	800cc12 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800cbc2:	68fb      	ldr	r3, [r7, #12]
 800cbc4:	68ba      	ldr	r2, [r7, #8]
 800cbc6:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	88fa      	ldrh	r2, [r7, #6]
 800cbcc:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	2201      	movs	r2, #1
 800cbd2:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800cbd4:	68fb      	ldr	r3, [r7, #12]
 800cbd6:	2202      	movs	r2, #2
 800cbd8:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800cbda:	2301      	movs	r3, #1
 800cbdc:	75fb      	strb	r3, [r7, #23]
      break;
 800cbde:	e018      	b.n	800cc12 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800cbe0:	68f8      	ldr	r0, [r7, #12]
 800cbe2:	f000 f81b 	bl	800cc1c <USBH_HandleControl>
 800cbe6:	4603      	mov	r3, r0
 800cbe8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
 800cbec:	2b00      	cmp	r3, #0
 800cbee:	d002      	beq.n	800cbf6 <USBH_CtlReq+0x54>
 800cbf0:	7dfb      	ldrb	r3, [r7, #23]
 800cbf2:	2b03      	cmp	r3, #3
 800cbf4:	d106      	bne.n	800cc04 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800cbf6:	68fb      	ldr	r3, [r7, #12]
 800cbf8:	2201      	movs	r2, #1
 800cbfa:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	2200      	movs	r2, #0
 800cc00:	761a      	strb	r2, [r3, #24]
      break;
 800cc02:	e005      	b.n	800cc10 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800cc04:	7dfb      	ldrb	r3, [r7, #23]
 800cc06:	2b02      	cmp	r3, #2
 800cc08:	d102      	bne.n	800cc10 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	2201      	movs	r2, #1
 800cc0e:	709a      	strb	r2, [r3, #2]
      break;
 800cc10:	bf00      	nop
  }
  return status;
 800cc12:	7dfb      	ldrb	r3, [r7, #23]
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	3718      	adds	r7, #24
 800cc18:	46bd      	mov	sp, r7
 800cc1a:	bd80      	pop	{r7, pc}

0800cc1c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	b086      	sub	sp, #24
 800cc20:	af02      	add	r7, sp, #8
 800cc22:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800cc24:	2301      	movs	r3, #1
 800cc26:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800cc28:	2300      	movs	r3, #0
 800cc2a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	7e1b      	ldrb	r3, [r3, #24]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	2b0a      	cmp	r3, #10
 800cc34:	f200 8156 	bhi.w	800cee4 <USBH_HandleControl+0x2c8>
 800cc38:	a201      	add	r2, pc, #4	@ (adr r2, 800cc40 <USBH_HandleControl+0x24>)
 800cc3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc3e:	bf00      	nop
 800cc40:	0800cc6d 	.word	0x0800cc6d
 800cc44:	0800cc87 	.word	0x0800cc87
 800cc48:	0800ccf1 	.word	0x0800ccf1
 800cc4c:	0800cd17 	.word	0x0800cd17
 800cc50:	0800cd4f 	.word	0x0800cd4f
 800cc54:	0800cd79 	.word	0x0800cd79
 800cc58:	0800cdcb 	.word	0x0800cdcb
 800cc5c:	0800cded 	.word	0x0800cded
 800cc60:	0800ce29 	.word	0x0800ce29
 800cc64:	0800ce4f 	.word	0x0800ce4f
 800cc68:	0800ce8d 	.word	0x0800ce8d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800cc6c:	687b      	ldr	r3, [r7, #4]
 800cc6e:	f103 0110 	add.w	r1, r3, #16
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	795b      	ldrb	r3, [r3, #5]
 800cc76:	461a      	mov	r2, r3
 800cc78:	6878      	ldr	r0, [r7, #4]
 800cc7a:	f000 f943 	bl	800cf04 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	2202      	movs	r2, #2
 800cc82:	761a      	strb	r2, [r3, #24]
      break;
 800cc84:	e139      	b.n	800cefa <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	795b      	ldrb	r3, [r3, #5]
 800cc8a:	4619      	mov	r1, r3
 800cc8c:	6878      	ldr	r0, [r7, #4]
 800cc8e:	f000 fe39 	bl	800d904 <USBH_LL_GetURBState>
 800cc92:	4603      	mov	r3, r0
 800cc94:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800cc96:	7bbb      	ldrb	r3, [r7, #14]
 800cc98:	2b01      	cmp	r3, #1
 800cc9a:	d11e      	bne.n	800ccda <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	7c1b      	ldrb	r3, [r3, #16]
 800cca0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800cca4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	8adb      	ldrh	r3, [r3, #22]
 800ccaa:	2b00      	cmp	r3, #0
 800ccac:	d00a      	beq.n	800ccc4 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800ccae:	7b7b      	ldrb	r3, [r7, #13]
 800ccb0:	2b80      	cmp	r3, #128	@ 0x80
 800ccb2:	d103      	bne.n	800ccbc <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800ccb4:	687b      	ldr	r3, [r7, #4]
 800ccb6:	2203      	movs	r2, #3
 800ccb8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ccba:	e115      	b.n	800cee8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	2205      	movs	r2, #5
 800ccc0:	761a      	strb	r2, [r3, #24]
      break;
 800ccc2:	e111      	b.n	800cee8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ccc4:	7b7b      	ldrb	r3, [r7, #13]
 800ccc6:	2b80      	cmp	r3, #128	@ 0x80
 800ccc8:	d103      	bne.n	800ccd2 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	2209      	movs	r2, #9
 800ccce:	761a      	strb	r2, [r3, #24]
      break;
 800ccd0:	e10a      	b.n	800cee8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	2207      	movs	r2, #7
 800ccd6:	761a      	strb	r2, [r3, #24]
      break;
 800ccd8:	e106      	b.n	800cee8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ccda:	7bbb      	ldrb	r3, [r7, #14]
 800ccdc:	2b04      	cmp	r3, #4
 800ccde:	d003      	beq.n	800cce8 <USBH_HandleControl+0xcc>
 800cce0:	7bbb      	ldrb	r3, [r7, #14]
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	f040 8100 	bne.w	800cee8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	220b      	movs	r2, #11
 800ccec:	761a      	strb	r2, [r3, #24]
      break;
 800ccee:	e0fb      	b.n	800cee8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800ccf6:	b29a      	uxth	r2, r3
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	6899      	ldr	r1, [r3, #8]
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	899a      	ldrh	r2, [r3, #12]
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	791b      	ldrb	r3, [r3, #4]
 800cd08:	6878      	ldr	r0, [r7, #4]
 800cd0a:	f000 f93a 	bl	800cf82 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	2204      	movs	r2, #4
 800cd12:	761a      	strb	r2, [r3, #24]
      break;
 800cd14:	e0f1      	b.n	800cefa <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	791b      	ldrb	r3, [r3, #4]
 800cd1a:	4619      	mov	r1, r3
 800cd1c:	6878      	ldr	r0, [r7, #4]
 800cd1e:	f000 fdf1 	bl	800d904 <USBH_LL_GetURBState>
 800cd22:	4603      	mov	r3, r0
 800cd24:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800cd26:	7bbb      	ldrb	r3, [r7, #14]
 800cd28:	2b01      	cmp	r3, #1
 800cd2a:	d102      	bne.n	800cd32 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2209      	movs	r2, #9
 800cd30:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800cd32:	7bbb      	ldrb	r3, [r7, #14]
 800cd34:	2b05      	cmp	r3, #5
 800cd36:	d102      	bne.n	800cd3e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800cd38:	2303      	movs	r3, #3
 800cd3a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd3c:	e0d6      	b.n	800ceec <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
 800cd40:	2b04      	cmp	r3, #4
 800cd42:	f040 80d3 	bne.w	800ceec <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	220b      	movs	r2, #11
 800cd4a:	761a      	strb	r2, [r3, #24]
      break;
 800cd4c:	e0ce      	b.n	800ceec <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	6899      	ldr	r1, [r3, #8]
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	899a      	ldrh	r2, [r3, #12]
 800cd56:	687b      	ldr	r3, [r7, #4]
 800cd58:	795b      	ldrb	r3, [r3, #5]
 800cd5a:	2001      	movs	r0, #1
 800cd5c:	9000      	str	r0, [sp, #0]
 800cd5e:	6878      	ldr	r0, [r7, #4]
 800cd60:	f000 f8ea 	bl	800cf38 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800cd6a:	b29a      	uxth	r2, r3
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2206      	movs	r2, #6
 800cd74:	761a      	strb	r2, [r3, #24]
      break;
 800cd76:	e0c0      	b.n	800cefa <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	795b      	ldrb	r3, [r3, #5]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	6878      	ldr	r0, [r7, #4]
 800cd80:	f000 fdc0 	bl	800d904 <USBH_LL_GetURBState>
 800cd84:	4603      	mov	r3, r0
 800cd86:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cd88:	7bbb      	ldrb	r3, [r7, #14]
 800cd8a:	2b01      	cmp	r3, #1
 800cd8c:	d103      	bne.n	800cd96 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	2207      	movs	r2, #7
 800cd92:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800cd94:	e0ac      	b.n	800cef0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800cd96:	7bbb      	ldrb	r3, [r7, #14]
 800cd98:	2b05      	cmp	r3, #5
 800cd9a:	d105      	bne.n	800cda8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	220c      	movs	r2, #12
 800cda0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800cda2:	2303      	movs	r3, #3
 800cda4:	73fb      	strb	r3, [r7, #15]
      break;
 800cda6:	e0a3      	b.n	800cef0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800cda8:	7bbb      	ldrb	r3, [r7, #14]
 800cdaa:	2b02      	cmp	r3, #2
 800cdac:	d103      	bne.n	800cdb6 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	2205      	movs	r2, #5
 800cdb2:	761a      	strb	r2, [r3, #24]
      break;
 800cdb4:	e09c      	b.n	800cef0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800cdb6:	7bbb      	ldrb	r3, [r7, #14]
 800cdb8:	2b04      	cmp	r3, #4
 800cdba:	f040 8099 	bne.w	800cef0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	220b      	movs	r2, #11
 800cdc2:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800cdc4:	2302      	movs	r3, #2
 800cdc6:	73fb      	strb	r3, [r7, #15]
      break;
 800cdc8:	e092      	b.n	800cef0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	791b      	ldrb	r3, [r3, #4]
 800cdce:	2200      	movs	r2, #0
 800cdd0:	2100      	movs	r1, #0
 800cdd2:	6878      	ldr	r0, [r7, #4]
 800cdd4:	f000 f8d5 	bl	800cf82 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800cdd8:	687b      	ldr	r3, [r7, #4]
 800cdda:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800cdde:	b29a      	uxth	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	2208      	movs	r2, #8
 800cde8:	761a      	strb	r2, [r3, #24]

      break;
 800cdea:	e086      	b.n	800cefa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	791b      	ldrb	r3, [r3, #4]
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f000 fd86 	bl	800d904 <USBH_LL_GetURBState>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800cdfc:	7bbb      	ldrb	r3, [r7, #14]
 800cdfe:	2b01      	cmp	r3, #1
 800ce00:	d105      	bne.n	800ce0e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	220d      	movs	r2, #13
 800ce06:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ce08:	2300      	movs	r3, #0
 800ce0a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce0c:	e072      	b.n	800cef4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ce0e:	7bbb      	ldrb	r3, [r7, #14]
 800ce10:	2b04      	cmp	r3, #4
 800ce12:	d103      	bne.n	800ce1c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	220b      	movs	r2, #11
 800ce18:	761a      	strb	r2, [r3, #24]
      break;
 800ce1a:	e06b      	b.n	800cef4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ce1c:	7bbb      	ldrb	r3, [r7, #14]
 800ce1e:	2b05      	cmp	r3, #5
 800ce20:	d168      	bne.n	800cef4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ce22:	2303      	movs	r3, #3
 800ce24:	73fb      	strb	r3, [r7, #15]
      break;
 800ce26:	e065      	b.n	800cef4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	795b      	ldrb	r3, [r3, #5]
 800ce2c:	2201      	movs	r2, #1
 800ce2e:	9200      	str	r2, [sp, #0]
 800ce30:	2200      	movs	r2, #0
 800ce32:	2100      	movs	r1, #0
 800ce34:	6878      	ldr	r0, [r7, #4]
 800ce36:	f000 f87f 	bl	800cf38 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	f8d3 3594 	ldr.w	r3, [r3, #1428]	@ 0x594
 800ce40:	b29a      	uxth	r2, r3
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	220a      	movs	r2, #10
 800ce4a:	761a      	strb	r2, [r3, #24]
      break;
 800ce4c:	e055      	b.n	800cefa <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	795b      	ldrb	r3, [r3, #5]
 800ce52:	4619      	mov	r1, r3
 800ce54:	6878      	ldr	r0, [r7, #4]
 800ce56:	f000 fd55 	bl	800d904 <USBH_LL_GetURBState>
 800ce5a:	4603      	mov	r3, r0
 800ce5c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ce5e:	7bbb      	ldrb	r3, [r7, #14]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d105      	bne.n	800ce70 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ce64:	2300      	movs	r3, #0
 800ce66:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	220d      	movs	r2, #13
 800ce6c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ce6e:	e043      	b.n	800cef8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ce70:	7bbb      	ldrb	r3, [r7, #14]
 800ce72:	2b02      	cmp	r3, #2
 800ce74:	d103      	bne.n	800ce7e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	2209      	movs	r2, #9
 800ce7a:	761a      	strb	r2, [r3, #24]
      break;
 800ce7c:	e03c      	b.n	800cef8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ce7e:	7bbb      	ldrb	r3, [r7, #14]
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d139      	bne.n	800cef8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	220b      	movs	r2, #11
 800ce88:	761a      	strb	r2, [r3, #24]
      break;
 800ce8a:	e035      	b.n	800cef8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	7e5b      	ldrb	r3, [r3, #25]
 800ce90:	3301      	adds	r3, #1
 800ce92:	b2da      	uxtb	r2, r3
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	765a      	strb	r2, [r3, #25]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	7e5b      	ldrb	r3, [r3, #25]
 800ce9c:	2b02      	cmp	r3, #2
 800ce9e:	d806      	bhi.n	800ceae <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800cea0:	687b      	ldr	r3, [r7, #4]
 800cea2:	2201      	movs	r2, #1
 800cea4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2201      	movs	r2, #1
 800ceaa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ceac:	e025      	b.n	800cefa <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	f8d3 35a4 	ldr.w	r3, [r3, #1444]	@ 0x5a4
 800ceb4:	2106      	movs	r1, #6
 800ceb6:	6878      	ldr	r0, [r7, #4]
 800ceb8:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	2200      	movs	r2, #0
 800cebe:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	795b      	ldrb	r3, [r3, #5]
 800cec4:	4619      	mov	r1, r3
 800cec6:	6878      	ldr	r0, [r7, #4]
 800cec8:	f000 f947 	bl	800d15a <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	791b      	ldrb	r3, [r3, #4]
 800ced0:	4619      	mov	r1, r3
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f000 f941 	bl	800d15a <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2200      	movs	r2, #0
 800cedc:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800cede:	2302      	movs	r3, #2
 800cee0:	73fb      	strb	r3, [r7, #15]
      break;
 800cee2:	e00a      	b.n	800cefa <USBH_HandleControl+0x2de>

    default:
      break;
 800cee4:	bf00      	nop
 800cee6:	e008      	b.n	800cefa <USBH_HandleControl+0x2de>
      break;
 800cee8:	bf00      	nop
 800ceea:	e006      	b.n	800cefa <USBH_HandleControl+0x2de>
      break;
 800ceec:	bf00      	nop
 800ceee:	e004      	b.n	800cefa <USBH_HandleControl+0x2de>
      break;
 800cef0:	bf00      	nop
 800cef2:	e002      	b.n	800cefa <USBH_HandleControl+0x2de>
      break;
 800cef4:	bf00      	nop
 800cef6:	e000      	b.n	800cefa <USBH_HandleControl+0x2de>
      break;
 800cef8:	bf00      	nop
  }

  return status;
 800cefa:	7bfb      	ldrb	r3, [r7, #15]
}
 800cefc:	4618      	mov	r0, r3
 800cefe:	3710      	adds	r7, #16
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}

0800cf04 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800cf04:	b580      	push	{r7, lr}
 800cf06:	b088      	sub	sp, #32
 800cf08:	af04      	add	r7, sp, #16
 800cf0a:	60f8      	str	r0, [r7, #12]
 800cf0c:	60b9      	str	r1, [r7, #8]
 800cf0e:	4613      	mov	r3, r2
 800cf10:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf12:	79f9      	ldrb	r1, [r7, #7]
 800cf14:	2300      	movs	r3, #0
 800cf16:	9303      	str	r3, [sp, #12]
 800cf18:	2308      	movs	r3, #8
 800cf1a:	9302      	str	r3, [sp, #8]
 800cf1c:	68bb      	ldr	r3, [r7, #8]
 800cf1e:	9301      	str	r3, [sp, #4]
 800cf20:	2300      	movs	r3, #0
 800cf22:	9300      	str	r3, [sp, #0]
 800cf24:	2300      	movs	r3, #0
 800cf26:	2200      	movs	r2, #0
 800cf28:	68f8      	ldr	r0, [r7, #12]
 800cf2a:	f000 fcba 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800cf2e:	2300      	movs	r3, #0
}
 800cf30:	4618      	mov	r0, r3
 800cf32:	3710      	adds	r7, #16
 800cf34:	46bd      	mov	sp, r7
 800cf36:	bd80      	pop	{r7, pc}

0800cf38 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800cf38:	b580      	push	{r7, lr}
 800cf3a:	b088      	sub	sp, #32
 800cf3c:	af04      	add	r7, sp, #16
 800cf3e:	60f8      	str	r0, [r7, #12]
 800cf40:	60b9      	str	r1, [r7, #8]
 800cf42:	4611      	mov	r1, r2
 800cf44:	461a      	mov	r2, r3
 800cf46:	460b      	mov	r3, r1
 800cf48:	80fb      	strh	r3, [r7, #6]
 800cf4a:	4613      	mov	r3, r2
 800cf4c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cf4e:	68fb      	ldr	r3, [r7, #12]
 800cf50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d001      	beq.n	800cf5c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800cf58:	2300      	movs	r3, #0
 800cf5a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf5c:	7979      	ldrb	r1, [r7, #5]
 800cf5e:	7e3b      	ldrb	r3, [r7, #24]
 800cf60:	9303      	str	r3, [sp, #12]
 800cf62:	88fb      	ldrh	r3, [r7, #6]
 800cf64:	9302      	str	r3, [sp, #8]
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	9301      	str	r3, [sp, #4]
 800cf6a:	2301      	movs	r3, #1
 800cf6c:	9300      	str	r3, [sp, #0]
 800cf6e:	2300      	movs	r3, #0
 800cf70:	2200      	movs	r2, #0
 800cf72:	68f8      	ldr	r0, [r7, #12]
 800cf74:	f000 fc95 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800cf78:	2300      	movs	r3, #0
}
 800cf7a:	4618      	mov	r0, r3
 800cf7c:	3710      	adds	r7, #16
 800cf7e:	46bd      	mov	sp, r7
 800cf80:	bd80      	pop	{r7, pc}

0800cf82 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800cf82:	b580      	push	{r7, lr}
 800cf84:	b088      	sub	sp, #32
 800cf86:	af04      	add	r7, sp, #16
 800cf88:	60f8      	str	r0, [r7, #12]
 800cf8a:	60b9      	str	r1, [r7, #8]
 800cf8c:	4611      	mov	r1, r2
 800cf8e:	461a      	mov	r2, r3
 800cf90:	460b      	mov	r3, r1
 800cf92:	80fb      	strh	r3, [r7, #6]
 800cf94:	4613      	mov	r3, r2
 800cf96:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cf98:	7979      	ldrb	r1, [r7, #5]
 800cf9a:	2300      	movs	r3, #0
 800cf9c:	9303      	str	r3, [sp, #12]
 800cf9e:	88fb      	ldrh	r3, [r7, #6]
 800cfa0:	9302      	str	r3, [sp, #8]
 800cfa2:	68bb      	ldr	r3, [r7, #8]
 800cfa4:	9301      	str	r3, [sp, #4]
 800cfa6:	2301      	movs	r3, #1
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	2300      	movs	r3, #0
 800cfac:	2201      	movs	r2, #1
 800cfae:	68f8      	ldr	r0, [r7, #12]
 800cfb0:	f000 fc77 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800cfb4:	2300      	movs	r3, #0

}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	3710      	adds	r7, #16
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	bd80      	pop	{r7, pc}

0800cfbe <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800cfbe:	b580      	push	{r7, lr}
 800cfc0:	b088      	sub	sp, #32
 800cfc2:	af04      	add	r7, sp, #16
 800cfc4:	60f8      	str	r0, [r7, #12]
 800cfc6:	60b9      	str	r1, [r7, #8]
 800cfc8:	4611      	mov	r1, r2
 800cfca:	461a      	mov	r2, r3
 800cfcc:	460b      	mov	r3, r1
 800cfce:	80fb      	strh	r3, [r7, #6]
 800cfd0:	4613      	mov	r3, r2
 800cfd2:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d001      	beq.n	800cfe2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800cfe2:	7979      	ldrb	r1, [r7, #5]
 800cfe4:	7e3b      	ldrb	r3, [r7, #24]
 800cfe6:	9303      	str	r3, [sp, #12]
 800cfe8:	88fb      	ldrh	r3, [r7, #6]
 800cfea:	9302      	str	r3, [sp, #8]
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	9301      	str	r3, [sp, #4]
 800cff0:	2301      	movs	r3, #1
 800cff2:	9300      	str	r3, [sp, #0]
 800cff4:	2302      	movs	r3, #2
 800cff6:	2200      	movs	r2, #0
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	f000 fc52 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800cffe:	2300      	movs	r3, #0
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b088      	sub	sp, #32
 800d00c:	af04      	add	r7, sp, #16
 800d00e:	60f8      	str	r0, [r7, #12]
 800d010:	60b9      	str	r1, [r7, #8]
 800d012:	4611      	mov	r1, r2
 800d014:	461a      	mov	r2, r3
 800d016:	460b      	mov	r3, r1
 800d018:	80fb      	strh	r3, [r7, #6]
 800d01a:	4613      	mov	r3, r2
 800d01c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d01e:	7979      	ldrb	r1, [r7, #5]
 800d020:	2300      	movs	r3, #0
 800d022:	9303      	str	r3, [sp, #12]
 800d024:	88fb      	ldrh	r3, [r7, #6]
 800d026:	9302      	str	r3, [sp, #8]
 800d028:	68bb      	ldr	r3, [r7, #8]
 800d02a:	9301      	str	r3, [sp, #4]
 800d02c:	2301      	movs	r3, #1
 800d02e:	9300      	str	r3, [sp, #0]
 800d030:	2302      	movs	r3, #2
 800d032:	2201      	movs	r2, #1
 800d034:	68f8      	ldr	r0, [r7, #12]
 800d036:	f000 fc34 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800d03a:	2300      	movs	r3, #0
}
 800d03c:	4618      	mov	r0, r3
 800d03e:	3710      	adds	r7, #16
 800d040:	46bd      	mov	sp, r7
 800d042:	bd80      	pop	{r7, pc}

0800d044 <USBH_InterruptReceiveData>:
  */
USBH_StatusTypeDef USBH_InterruptReceiveData(USBH_HandleTypeDef *phost,
                                             uint8_t *buff,
                                             uint8_t length,
                                             uint8_t pipe_num)
{
 800d044:	b580      	push	{r7, lr}
 800d046:	b088      	sub	sp, #32
 800d048:	af04      	add	r7, sp, #16
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	4611      	mov	r1, r2
 800d050:	461a      	mov	r2, r3
 800d052:	460b      	mov	r3, r1
 800d054:	71fb      	strb	r3, [r7, #7]
 800d056:	4613      	mov	r3, r2
 800d058:	71bb      	strb	r3, [r7, #6]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d05a:	79fb      	ldrb	r3, [r7, #7]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	79b9      	ldrb	r1, [r7, #6]
 800d060:	2200      	movs	r2, #0
 800d062:	9203      	str	r2, [sp, #12]
 800d064:	9302      	str	r3, [sp, #8]
 800d066:	68bb      	ldr	r3, [r7, #8]
 800d068:	9301      	str	r3, [sp, #4]
 800d06a:	2301      	movs	r3, #1
 800d06c:	9300      	str	r3, [sp, #0]
 800d06e:	2303      	movs	r3, #3
 800d070:	2201      	movs	r2, #1
 800d072:	68f8      	ldr	r0, [r7, #12]
 800d074:	f000 fc15 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800d078:	2300      	movs	r3, #0
}
 800d07a:	4618      	mov	r0, r3
 800d07c:	3710      	adds	r7, #16
 800d07e:	46bd      	mov	sp, r7
 800d080:	bd80      	pop	{r7, pc}

0800d082 <USBH_IsocSendData>:
  */
USBH_StatusTypeDef USBH_IsocSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint32_t length,
                                     uint8_t pipe_num)
{
 800d082:	b580      	push	{r7, lr}
 800d084:	b088      	sub	sp, #32
 800d086:	af04      	add	r7, sp, #16
 800d088:	60f8      	str	r0, [r7, #12]
 800d08a:	60b9      	str	r1, [r7, #8]
 800d08c:	607a      	str	r2, [r7, #4]
 800d08e:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	b29b      	uxth	r3, r3
 800d094:	78f9      	ldrb	r1, [r7, #3]
 800d096:	2200      	movs	r2, #0
 800d098:	9203      	str	r2, [sp, #12]
 800d09a:	9302      	str	r3, [sp, #8]
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	9301      	str	r3, [sp, #4]
 800d0a0:	2301      	movs	r3, #1
 800d0a2:	9300      	str	r3, [sp, #0]
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	2200      	movs	r2, #0
 800d0a8:	68f8      	ldr	r0, [r7, #12]
 800d0aa:	f000 fbfa 	bl	800d8a2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          (uint16_t)length,     /* data length      */
                          0U);

  return USBH_OK;
 800d0ae:	2300      	movs	r3, #0
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3710      	adds	r7, #16
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}

0800d0b8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af04      	add	r7, sp, #16
 800d0be:	6078      	str	r0, [r7, #4]
 800d0c0:	4608      	mov	r0, r1
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	461a      	mov	r2, r3
 800d0c6:	4603      	mov	r3, r0
 800d0c8:	70fb      	strb	r3, [r7, #3]
 800d0ca:	460b      	mov	r3, r1
 800d0cc:	70bb      	strb	r3, [r7, #2]
 800d0ce:	4613      	mov	r3, r2
 800d0d0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800d0d2:	7878      	ldrb	r0, [r7, #1]
 800d0d4:	78ba      	ldrb	r2, [r7, #2]
 800d0d6:	78f9      	ldrb	r1, [r7, #3]
 800d0d8:	8b3b      	ldrh	r3, [r7, #24]
 800d0da:	9302      	str	r3, [sp, #8]
 800d0dc:	7d3b      	ldrb	r3, [r7, #20]
 800d0de:	9301      	str	r3, [sp, #4]
 800d0e0:	7c3b      	ldrb	r3, [r7, #16]
 800d0e2:	9300      	str	r3, [sp, #0]
 800d0e4:	4603      	mov	r3, r0
 800d0e6:	6878      	ldr	r0, [r7, #4]
 800d0e8:	f000 fb8d 	bl	800d806 <USBH_LL_OpenPipe>

  return USBH_OK;
 800d0ec:	2300      	movs	r3, #0
}
 800d0ee:	4618      	mov	r0, r3
 800d0f0:	3708      	adds	r7, #8
 800d0f2:	46bd      	mov	sp, r7
 800d0f4:	bd80      	pop	{r7, pc}

0800d0f6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800d0f6:	b580      	push	{r7, lr}
 800d0f8:	b082      	sub	sp, #8
 800d0fa:	af00      	add	r7, sp, #0
 800d0fc:	6078      	str	r0, [r7, #4]
 800d0fe:	460b      	mov	r3, r1
 800d100:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800d102:	78fb      	ldrb	r3, [r7, #3]
 800d104:	4619      	mov	r1, r3
 800d106:	6878      	ldr	r0, [r7, #4]
 800d108:	f000 fbac 	bl	800d864 <USBH_LL_ClosePipe>

  return USBH_OK;
 800d10c:	2300      	movs	r3, #0
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3708      	adds	r7, #8
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}

0800d116 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800d116:	b580      	push	{r7, lr}
 800d118:	b084      	sub	sp, #16
 800d11a:	af00      	add	r7, sp, #0
 800d11c:	6078      	str	r0, [r7, #4]
 800d11e:	460b      	mov	r3, r1
 800d120:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 f839 	bl	800d19a <USBH_GetFreePipe>
 800d128:	4603      	mov	r3, r0
 800d12a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800d12c:	89fb      	ldrh	r3, [r7, #14]
 800d12e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800d132:	4293      	cmp	r3, r2
 800d134:	d00b      	beq.n	800d14e <USBH_AllocPipe+0x38>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800d136:	78fa      	ldrb	r2, [r7, #3]
 800d138:	89fb      	ldrh	r3, [r7, #14]
 800d13a:	f003 030f 	and.w	r3, r3, #15
 800d13e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800d142:	6879      	ldr	r1, [r7, #4]
 800d144:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d148:	009b      	lsls	r3, r3, #2
 800d14a:	440b      	add	r3, r1
 800d14c:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800d14e:	89fb      	ldrh	r3, [r7, #14]
 800d150:	b2db      	uxtb	r3, r3
}
 800d152:	4618      	mov	r0, r3
 800d154:	3710      	adds	r7, #16
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}

0800d15a <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800d15a:	b480      	push	{r7}
 800d15c:	b083      	sub	sp, #12
 800d15e:	af00      	add	r7, sp, #0
 800d160:	6078      	str	r0, [r7, #4]
 800d162:	460b      	mov	r3, r1
 800d164:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800d166:	78fb      	ldrb	r3, [r7, #3]
 800d168:	2b0f      	cmp	r3, #15
 800d16a:	d80f      	bhi.n	800d18c <USBH_FreePipe+0x32>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800d16c:	78fb      	ldrb	r3, [r7, #3]
 800d16e:	687a      	ldr	r2, [r7, #4]
 800d170:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d174:	009b      	lsls	r3, r3, #2
 800d176:	4413      	add	r3, r2
 800d178:	685a      	ldr	r2, [r3, #4]
 800d17a:	78fb      	ldrb	r3, [r7, #3]
 800d17c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800d180:	6879      	ldr	r1, [r7, #4]
 800d182:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d186:	009b      	lsls	r3, r3, #2
 800d188:	440b      	add	r3, r1
 800d18a:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800d18c:	2300      	movs	r3, #0
}
 800d18e:	4618      	mov	r0, r3
 800d190:	370c      	adds	r7, #12
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr

0800d19a <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800d19a:	b480      	push	{r7}
 800d19c:	b085      	sub	sp, #20
 800d19e:	af00      	add	r7, sp, #0
 800d1a0:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800d1a2:	2300      	movs	r3, #0
 800d1a4:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d1a6:	2300      	movs	r3, #0
 800d1a8:	73fb      	strb	r3, [r7, #15]
 800d1aa:	e010      	b.n	800d1ce <USBH_GetFreePipe+0x34>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800d1ac:	7bfb      	ldrb	r3, [r7, #15]
 800d1ae:	687a      	ldr	r2, [r7, #4]
 800d1b0:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800d1b4:	009b      	lsls	r3, r3, #2
 800d1b6:	4413      	add	r3, r2
 800d1b8:	685b      	ldr	r3, [r3, #4]
 800d1ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800d1be:	2b00      	cmp	r3, #0
 800d1c0:	d102      	bne.n	800d1c8 <USBH_GetFreePipe+0x2e>
    {
      return (uint16_t)idx;
 800d1c2:	7bfb      	ldrb	r3, [r7, #15]
 800d1c4:	b29b      	uxth	r3, r3
 800d1c6:	e007      	b.n	800d1d8 <USBH_GetFreePipe+0x3e>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800d1c8:	7bfb      	ldrb	r3, [r7, #15]
 800d1ca:	3301      	adds	r3, #1
 800d1cc:	73fb      	strb	r3, [r7, #15]
 800d1ce:	7bfb      	ldrb	r3, [r7, #15]
 800d1d0:	2b0f      	cmp	r3, #15
 800d1d2:	d9eb      	bls.n	800d1ac <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800d1d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800d1d8:	4618      	mov	r0, r3
 800d1da:	3714      	adds	r7, #20
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1e2:	4770      	bx	lr

0800d1e4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d1e4:	b580      	push	{r7, lr}
 800d1e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d1e8:	2201      	movs	r2, #1
 800d1ea:	4921      	ldr	r1, [pc, #132]	@ (800d270 <MX_USB_HOST_Init+0x8c>)
 800d1ec:	4821      	ldr	r0, [pc, #132]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d1ee:	f7fe fa77 	bl	800b6e0 <USBH_Init>
 800d1f2:	4603      	mov	r3, r0
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d001      	beq.n	800d1fc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d1f8:	f7f3 fb1c 	bl	8000834 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_AUDIO_CLASS) != USBH_OK)
 800d1fc:	491e      	ldr	r1, [pc, #120]	@ (800d278 <MX_USB_HOST_Init+0x94>)
 800d1fe:	481d      	ldr	r0, [pc, #116]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d200:	f7fe fb1d 	bl	800b83e <USBH_RegisterClass>
 800d204:	4603      	mov	r3, r0
 800d206:	2b00      	cmp	r3, #0
 800d208:	d001      	beq.n	800d20e <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d20a:	f7f3 fb13 	bl	8000834 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800d20e:	491b      	ldr	r1, [pc, #108]	@ (800d27c <MX_USB_HOST_Init+0x98>)
 800d210:	4818      	ldr	r0, [pc, #96]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d212:	f7fe fb14 	bl	800b83e <USBH_RegisterClass>
 800d216:	4603      	mov	r3, r0
 800d218:	2b00      	cmp	r3, #0
 800d21a:	d001      	beq.n	800d220 <MX_USB_HOST_Init+0x3c>
  {
    Error_Handler();
 800d21c:	f7f3 fb0a 	bl	8000834 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d220:	4917      	ldr	r1, [pc, #92]	@ (800d280 <MX_USB_HOST_Init+0x9c>)
 800d222:	4814      	ldr	r0, [pc, #80]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d224:	f7fe fb0b 	bl	800b83e <USBH_RegisterClass>
 800d228:	4603      	mov	r3, r0
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d001      	beq.n	800d232 <MX_USB_HOST_Init+0x4e>
  {
    Error_Handler();
 800d22e:	f7f3 fb01 	bl	8000834 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_HID_CLASS) != USBH_OK)
 800d232:	4914      	ldr	r1, [pc, #80]	@ (800d284 <MX_USB_HOST_Init+0xa0>)
 800d234:	480f      	ldr	r0, [pc, #60]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d236:	f7fe fb02 	bl	800b83e <USBH_RegisterClass>
 800d23a:	4603      	mov	r3, r0
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d001      	beq.n	800d244 <MX_USB_HOST_Init+0x60>
  {
    Error_Handler();
 800d240:	f7f3 faf8 	bl	8000834 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MTP_CLASS) != USBH_OK)
 800d244:	4910      	ldr	r1, [pc, #64]	@ (800d288 <MX_USB_HOST_Init+0xa4>)
 800d246:	480b      	ldr	r0, [pc, #44]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d248:	f7fe faf9 	bl	800b83e <USBH_RegisterClass>
 800d24c:	4603      	mov	r3, r0
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d001      	beq.n	800d256 <MX_USB_HOST_Init+0x72>
  {
    Error_Handler();
 800d252:	f7f3 faef 	bl	8000834 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d256:	4807      	ldr	r0, [pc, #28]	@ (800d274 <MX_USB_HOST_Init+0x90>)
 800d258:	f7fe fbb1 	bl	800b9be <USBH_Start>
 800d25c:	4603      	mov	r3, r0
 800d25e:	2b00      	cmp	r3, #0
 800d260:	d001      	beq.n	800d266 <MX_USB_HOST_Init+0x82>
  {
    Error_Handler();
 800d262:	f7f3 fae7 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  printf("USB Host Init Successful\r\n");
 800d266:	4809      	ldr	r0, [pc, #36]	@ (800d28c <MX_USB_HOST_Init+0xa8>)
 800d268:	f000 fe18 	bl	800de9c <puts>
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d26c:	bf00      	nop
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	0800d2a5 	.word	0x0800d2a5
 800d274:	20000248 	.word	0x20000248
 800d278:	20000074 	.word	0x20000074
 800d27c:	20000094 	.word	0x20000094
 800d280:	200000d4 	.word	0x200000d4
 800d284:	200000b4 	.word	0x200000b4
 800d288:	200000f4 	.word	0x200000f4
 800d28c:	0800eee4 	.word	0x0800eee4

0800d290 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d290:	b580      	push	{r7, lr}
 800d292:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d294:	4802      	ldr	r0, [pc, #8]	@ (800d2a0 <MX_USB_HOST_Process+0x10>)
 800d296:	f7fe fba3 	bl	800b9e0 <USBH_Process>
}
 800d29a:	bf00      	nop
 800d29c:	bd80      	pop	{r7, pc}
 800d29e:	bf00      	nop
 800d2a0:	20000248 	.word	0x20000248

0800d2a4 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d2a4:	b580      	push	{r7, lr}
 800d2a6:	b082      	sub	sp, #8
 800d2a8:	af00      	add	r7, sp, #0
 800d2aa:	6078      	str	r0, [r7, #4]
 800d2ac:	460b      	mov	r3, r1
 800d2ae:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
    printf("USBH_UserProcess called with id: %d \r\n", id);
 800d2b0:	78fb      	ldrb	r3, [r7, #3]
 800d2b2:	4619      	mov	r1, r3
 800d2b4:	4812      	ldr	r0, [pc, #72]	@ (800d300 <USBH_UserProcess+0x5c>)
 800d2b6:	f000 fd89 	bl	800ddcc <iprintf>
  switch(id)
 800d2ba:	78fb      	ldrb	r3, [r7, #3]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	2b04      	cmp	r3, #4
 800d2c0:	d818      	bhi.n	800d2f4 <USBH_UserProcess+0x50>
 800d2c2:	a201      	add	r2, pc, #4	@ (adr r2, 800d2c8 <USBH_UserProcess+0x24>)
 800d2c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2c8:	0800d2f5 	.word	0x0800d2f5
 800d2cc:	0800d2e5 	.word	0x0800d2e5
 800d2d0:	0800d2f5 	.word	0x0800d2f5
 800d2d4:	0800d2ed 	.word	0x0800d2ed
 800d2d8:	0800d2dd 	.word	0x0800d2dd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d2dc:	4b09      	ldr	r3, [pc, #36]	@ (800d304 <USBH_UserProcess+0x60>)
 800d2de:	2203      	movs	r2, #3
 800d2e0:	701a      	strb	r2, [r3, #0]
  break;
 800d2e2:	e008      	b.n	800d2f6 <USBH_UserProcess+0x52>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d2e4:	4b07      	ldr	r3, [pc, #28]	@ (800d304 <USBH_UserProcess+0x60>)
 800d2e6:	2202      	movs	r2, #2
 800d2e8:	701a      	strb	r2, [r3, #0]
  break;
 800d2ea:	e004      	b.n	800d2f6 <USBH_UserProcess+0x52>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d2ec:	4b05      	ldr	r3, [pc, #20]	@ (800d304 <USBH_UserProcess+0x60>)
 800d2ee:	2201      	movs	r2, #1
 800d2f0:	701a      	strb	r2, [r3, #0]
  break;
 800d2f2:	e000      	b.n	800d2f6 <USBH_UserProcess+0x52>

  default:
  break;
 800d2f4:	bf00      	nop
  }
//  printf("Appli_STATE: " + Appli_state);
  /* USER CODE END CALL_BACK_1 */
}
 800d2f6:	bf00      	nop
 800d2f8:	3708      	adds	r7, #8
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	bd80      	pop	{r7, pc}
 800d2fe:	bf00      	nop
 800d300:	0800ef00 	.word	0x0800ef00
 800d304:	200007f0 	.word	0x200007f0

0800d308 <check_usb_device>:

/**
  * @}
  */
const char* check_usb_device(void)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b082      	sub	sp, #8
 800d30c:	af00      	add	r7, sp, #0
    static char board_name[MAX_BOARD_NAME_LENGTH] = "No Device";  // Static local storage
    // Check the application state to determine the USB connection status
    if (Appli_state == APPLICATION_READY) {
 800d30e:	4b1e      	ldr	r3, [pc, #120]	@ (800d388 <check_usb_device+0x80>)
 800d310:	781b      	ldrb	r3, [r3, #0]
 800d312:	2b02      	cmp	r3, #2
 800d314:	d118      	bne.n	800d348 <check_usb_device+0x40>
        // Device is connected and ready
//        printf("USB Device Connected\n");
        USBH_DevDescTypeDef *dev_desc = &hUsbHostFS.device.DevDesc;
 800d316:	4b1d      	ldr	r3, [pc, #116]	@ (800d38c <check_usb_device+0x84>)
 800d318:	607b      	str	r3, [r7, #4]
        //printf("VID: 0x%04X, PID: 0x%04X, Class: 0x%02X\r\n",
                 //dev_desc->idVendor, dev_desc->idProduct, dev_desc->bDeviceClass);
        // Classify and return the device's board name
        printf("Application ready\n");
 800d31a:	481d      	ldr	r0, [pc, #116]	@ (800d390 <check_usb_device+0x88>)
 800d31c:	f000 fdbe 	bl	800de9c <puts>
        const char* detected = classify_usb_device(dev_desc->idVendor, dev_desc->idProduct, dev_desc->bDeviceClass);
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	8918      	ldrh	r0, [r3, #8]
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	8959      	ldrh	r1, [r3, #10]
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	791b      	ldrb	r3, [r3, #4]
 800d32c:	461a      	mov	r2, r3
 800d32e:	f000 f837 	bl	800d3a0 <classify_usb_device>
 800d332:	6038      	str	r0, [r7, #0]
        strncpy(board_name, detected, MAX_BOARD_NAME_LENGTH - 1);
 800d334:	2231      	movs	r2, #49	@ 0x31
 800d336:	6839      	ldr	r1, [r7, #0]
 800d338:	4816      	ldr	r0, [pc, #88]	@ (800d394 <check_usb_device+0x8c>)
 800d33a:	f000 fecd 	bl	800e0d8 <strncpy>

        board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0';  // Ensure null termination
 800d33e:	4b15      	ldr	r3, [pc, #84]	@ (800d394 <check_usb_device+0x8c>)
 800d340:	2200      	movs	r2, #0
 800d342:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d346:	e019      	b.n	800d37c <check_usb_device+0x74>
    }
    else if (Appli_state == APPLICATION_DISCONNECT) {
 800d348:	4b0f      	ldr	r3, [pc, #60]	@ (800d388 <check_usb_device+0x80>)
 800d34a:	781b      	ldrb	r3, [r3, #0]
 800d34c:	2b03      	cmp	r3, #3
 800d34e:	d10c      	bne.n	800d36a <check_usb_device+0x62>
        // Device has been disconnected
        printf("USB Device Disconnected\n");
 800d350:	4811      	ldr	r0, [pc, #68]	@ (800d398 <check_usb_device+0x90>)
 800d352:	f000 fda3 	bl	800de9c <puts>
        strncpy(board_name, "No Device", MAX_BOARD_NAME_LENGTH - 1);
 800d356:	2231      	movs	r2, #49	@ 0x31
 800d358:	4910      	ldr	r1, [pc, #64]	@ (800d39c <check_usb_device+0x94>)
 800d35a:	480e      	ldr	r0, [pc, #56]	@ (800d394 <check_usb_device+0x8c>)
 800d35c:	f000 febc 	bl	800e0d8 <strncpy>
        board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0';
 800d360:	4b0c      	ldr	r3, [pc, #48]	@ (800d394 <check_usb_device+0x8c>)
 800d362:	2200      	movs	r2, #0
 800d364:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
 800d368:	e008      	b.n	800d37c <check_usb_device+0x74>
    }
    else {
        // No device detected, or in an idle state
        //printf("No USB Device Detected\n");
        strncpy(board_name, "No Device", MAX_BOARD_NAME_LENGTH - 1);
 800d36a:	2231      	movs	r2, #49	@ 0x31
 800d36c:	490b      	ldr	r1, [pc, #44]	@ (800d39c <check_usb_device+0x94>)
 800d36e:	4809      	ldr	r0, [pc, #36]	@ (800d394 <check_usb_device+0x8c>)
 800d370:	f000 feb2 	bl	800e0d8 <strncpy>
        board_name[MAX_BOARD_NAME_LENGTH - 1] = '\0';
 800d374:	4b07      	ldr	r3, [pc, #28]	@ (800d394 <check_usb_device+0x8c>)
 800d376:	2200      	movs	r2, #0
 800d378:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
    }

    return board_name;
 800d37c:	4b05      	ldr	r3, [pc, #20]	@ (800d394 <check_usb_device+0x8c>)
}
 800d37e:	4618      	mov	r0, r3
 800d380:	3708      	adds	r7, #8
 800d382:	46bd      	mov	sp, r7
 800d384:	bd80      	pop	{r7, pc}
 800d386:	bf00      	nop
 800d388:	200007f0 	.word	0x200007f0
 800d38c:	2000056e 	.word	0x2000056e
 800d390:	0800ef28 	.word	0x0800ef28
 800d394:	20000114 	.word	0x20000114
 800d398:	0800ef3c 	.word	0x0800ef3c
 800d39c:	0800ef54 	.word	0x0800ef54

0800d3a0 <classify_usb_device>:

const char* classify_usb_device(uint16_t vid, uint16_t pid, uint8_t classCode) {
 800d3a0:	b580      	push	{r7, lr}
 800d3a2:	b082      	sub	sp, #8
 800d3a4:	af00      	add	r7, sp, #0
 800d3a6:	4603      	mov	r3, r0
 800d3a8:	80fb      	strh	r3, [r7, #6]
 800d3aa:	460b      	mov	r3, r1
 800d3ac:	80bb      	strh	r3, [r7, #4]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	70fb      	strb	r3, [r7, #3]
    static char detected_board_name[MAX_BOARD_NAME_LENGTH];  // Static so it persists after the function exits

    if (vid == 0x2341 && (pid == 0x0043 || pid == 0x0010)) {
 800d3b2:	88fb      	ldrh	r3, [r7, #6]
 800d3b4:	f242 3241 	movw	r2, #9025	@ 0x2341
 800d3b8:	4293      	cmp	r3, r2
 800d3ba:	d10b      	bne.n	800d3d4 <classify_usb_device+0x34>
 800d3bc:	88bb      	ldrh	r3, [r7, #4]
 800d3be:	2b43      	cmp	r3, #67	@ 0x43
 800d3c0:	d002      	beq.n	800d3c8 <classify_usb_device+0x28>
 800d3c2:	88bb      	ldrh	r3, [r7, #4]
 800d3c4:	2b10      	cmp	r3, #16
 800d3c6:	d105      	bne.n	800d3d4 <classify_usb_device+0x34>
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "Arduino UNO R3");
 800d3c8:	4a0c      	ldr	r2, [pc, #48]	@ (800d3fc <classify_usb_device+0x5c>)
 800d3ca:	2132      	movs	r1, #50	@ 0x32
 800d3cc:	480c      	ldr	r0, [pc, #48]	@ (800d400 <classify_usb_device+0x60>)
 800d3ce:	f000 fd6d 	bl	800deac <sniprintf>
 800d3d2:	e00d      	b.n	800d3f0 <classify_usb_device+0x50>
    } else if (classCode == 0x02) {
 800d3d4:	78fb      	ldrb	r3, [r7, #3]
 800d3d6:	2b02      	cmp	r3, #2
 800d3d8:	d105      	bne.n	800d3e6 <classify_usb_device+0x46>
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "USB Serial Device");
 800d3da:	4a0a      	ldr	r2, [pc, #40]	@ (800d404 <classify_usb_device+0x64>)
 800d3dc:	2132      	movs	r1, #50	@ 0x32
 800d3de:	4808      	ldr	r0, [pc, #32]	@ (800d400 <classify_usb_device+0x60>)
 800d3e0:	f000 fd64 	bl	800deac <sniprintf>
 800d3e4:	e004      	b.n	800d3f0 <classify_usb_device+0x50>
    } else {
        snprintf(detected_board_name, MAX_BOARD_NAME_LENGTH, "Unknown Device");
 800d3e6:	4a08      	ldr	r2, [pc, #32]	@ (800d408 <classify_usb_device+0x68>)
 800d3e8:	2132      	movs	r1, #50	@ 0x32
 800d3ea:	4805      	ldr	r0, [pc, #20]	@ (800d400 <classify_usb_device+0x60>)
 800d3ec:	f000 fd5e 	bl	800deac <sniprintf>
    }
//    printf("%s\n", detected_board_name);  // Fixed string output
    return detected_board_name;
 800d3f0:	4b03      	ldr	r3, [pc, #12]	@ (800d400 <classify_usb_device+0x60>)
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3708      	adds	r7, #8
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}
 800d3fa:	bf00      	nop
 800d3fc:	0800ef60 	.word	0x0800ef60
 800d400:	200007f4 	.word	0x200007f4
 800d404:	0800ef70 	.word	0x0800ef70
 800d408:	0800ef84 	.word	0x0800ef84

0800d40c <trigger_arduino_bootloader>:
  * @brief  Set DTR line low then high to reset Arduino into bootloader mode
  * @param  None
  * @retval USBH_StatusTypeDef: Status of the operation
  */
USBH_StatusTypeDef trigger_arduino_bootloader(void)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b086      	sub	sp, #24
 800d410:	af00      	add	r7, sp, #0
    USBH_StatusTypeDef status = USBH_FAIL;
 800d412:	2302      	movs	r3, #2
 800d414:	75fb      	strb	r3, [r7, #23]

    // Check if a device is connected and ready
    if (Appli_state != APPLICATION_READY) {
 800d416:	4b33      	ldr	r3, [pc, #204]	@ (800d4e4 <trigger_arduino_bootloader+0xd8>)
 800d418:	781b      	ldrb	r3, [r3, #0]
 800d41a:	2b02      	cmp	r3, #2
 800d41c:	d004      	beq.n	800d428 <trigger_arduino_bootloader+0x1c>
        printf("No USB device connected or device not ready\r\n");
 800d41e:	4832      	ldr	r0, [pc, #200]	@ (800d4e8 <trigger_arduino_bootloader+0xdc>)
 800d420:	f000 fd3c 	bl	800de9c <puts>
        return USBH_FAIL;
 800d424:	2302      	movs	r3, #2
 800d426:	e058      	b.n	800d4da <trigger_arduino_bootloader+0xce>
    }

    // Make sure the current device is an Arduino UNO
    const char* current_device = check_usb_device();
 800d428:	f7ff ff6e 	bl	800d308 <check_usb_device>
 800d42c:	6138      	str	r0, [r7, #16]
    if (strcmp(current_device, "Arduino UNO R3") != 0) {
 800d42e:	492f      	ldr	r1, [pc, #188]	@ (800d4ec <trigger_arduino_bootloader+0xe0>)
 800d430:	6938      	ldr	r0, [r7, #16]
 800d432:	f7f2 fed5 	bl	80001e0 <strcmp>
 800d436:	4603      	mov	r3, r0
 800d438:	2b00      	cmp	r3, #0
 800d43a:	d004      	beq.n	800d446 <trigger_arduino_bootloader+0x3a>
        printf("Connected device is not an Arduino UNO R3\r\n");
 800d43c:	482c      	ldr	r0, [pc, #176]	@ (800d4f0 <trigger_arduino_bootloader+0xe4>)
 800d43e:	f000 fd2d 	bl	800de9c <puts>
        return USBH_FAIL;
 800d442:	2302      	movs	r3, #2
 800d444:	e049      	b.n	800d4da <trigger_arduino_bootloader+0xce>
    }

    printf("Triggering Arduino bootloader...\r\n");
 800d446:	482b      	ldr	r0, [pc, #172]	@ (800d4f4 <trigger_arduino_bootloader+0xe8>)
 800d448:	f000 fd28 	bl	800de9c <puts>

    // Get CDC handle
    CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *)hUsbHostFS.pActiveClass->pData;
 800d44c:	4b2a      	ldr	r3, [pc, #168]	@ (800d4f8 <trigger_arduino_bootloader+0xec>)
 800d44e:	f8d3 354c 	ldr.w	r3, [r3, #1356]	@ 0x54c
 800d452:	69db      	ldr	r3, [r3, #28]
 800d454:	60fb      	str	r3, [r7, #12]
    if (CDC_Handle == NULL) {
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d104      	bne.n	800d466 <trigger_arduino_bootloader+0x5a>
        printf("Failed to get CDC handle\r\n");
 800d45c:	4827      	ldr	r0, [pc, #156]	@ (800d4fc <trigger_arduino_bootloader+0xf0>)
 800d45e:	f000 fd1d 	bl	800de9c <puts>
        return USBH_FAIL;
 800d462:	2302      	movs	r3, #2
 800d464:	e039      	b.n	800d4da <trigger_arduino_bootloader+0xce>
    }

    // Get the interface number
    uint16_t interface_number = (uint16_t)CDC_Handle->CommItf.NotifEp;  // Correct way to get interface
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	785b      	ldrb	r3, [r3, #1]
 800d46a:	817b      	strh	r3, [r7, #10]

    // Setup packet
    USB_Setup_TypeDef setup;
    setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS | USB_REQ_RECIPIENT_INTERFACE;
 800d46c:	2321      	movs	r3, #33	@ 0x21
 800d46e:	703b      	strb	r3, [r7, #0]
    setup.b.bRequest = CDC_SET_CONTROL_LINE_STATE;
 800d470:	2322      	movs	r3, #34	@ 0x22
 800d472:	707b      	strb	r3, [r7, #1]
    setup.b.wIndex.w = interface_number;
 800d474:	897b      	ldrh	r3, [r7, #10]
 800d476:	80bb      	strh	r3, [r7, #4]
    setup.b.wLength.w = 0;
 800d478:	2300      	movs	r3, #0
 800d47a:	80fb      	strh	r3, [r7, #6]

    // Set DTR low (assert)
    setup.b.wValue.w = CDC_ACTIVATE_SIGNAL_DTR;
 800d47c:	2301      	movs	r3, #1
 800d47e:	807b      	strh	r3, [r7, #2]

    status = USBH_CtlReq(&hUsbHostFS, (uint8_t *)&setup, 0);
 800d480:	463b      	mov	r3, r7
 800d482:	2200      	movs	r2, #0
 800d484:	4619      	mov	r1, r3
 800d486:	481c      	ldr	r0, [pc, #112]	@ (800d4f8 <trigger_arduino_bootloader+0xec>)
 800d488:	f7ff fb8b 	bl	800cba2 <USBH_CtlReq>
 800d48c:	4603      	mov	r3, r0
 800d48e:	75fb      	strb	r3, [r7, #23]
    if (status != USBH_OK) {
 800d490:	7dfb      	ldrb	r3, [r7, #23]
 800d492:	2b00      	cmp	r3, #0
 800d494:	d004      	beq.n	800d4a0 <trigger_arduino_bootloader+0x94>
        printf("Failed to set DTR low\r\n");
 800d496:	481a      	ldr	r0, [pc, #104]	@ (800d500 <trigger_arduino_bootloader+0xf4>)
 800d498:	f000 fd00 	bl	800de9c <puts>
        return status;
 800d49c:	7dfb      	ldrb	r3, [r7, #23]
 800d49e:	e01c      	b.n	800d4da <trigger_arduino_bootloader+0xce>
    }

    // Wait for reset pulse duration
    HAL_Delay(ARDUINO_RESET_PULSE_DURATION);
 800d4a0:	20fa      	movs	r0, #250	@ 0xfa
 800d4a2:	f7f3 fc05 	bl	8000cb0 <HAL_Delay>

    // Set DTR high (deassert)
    setup.b.wValue.w = CDC_DEACTIVATE_SIGNAL_DTR;
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	807b      	strh	r3, [r7, #2]

    status = USBH_CtlReq(&hUsbHostFS, (uint8_t *)&setup, 0);
 800d4aa:	463b      	mov	r3, r7
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	4619      	mov	r1, r3
 800d4b0:	4811      	ldr	r0, [pc, #68]	@ (800d4f8 <trigger_arduino_bootloader+0xec>)
 800d4b2:	f7ff fb76 	bl	800cba2 <USBH_CtlReq>
 800d4b6:	4603      	mov	r3, r0
 800d4b8:	75fb      	strb	r3, [r7, #23]
    if (status != USBH_OK) {
 800d4ba:	7dfb      	ldrb	r3, [r7, #23]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d004      	beq.n	800d4ca <trigger_arduino_bootloader+0xbe>
        printf("Failed to set DTR high\r\n");
 800d4c0:	4810      	ldr	r0, [pc, #64]	@ (800d504 <trigger_arduino_bootloader+0xf8>)
 800d4c2:	f000 fceb 	bl	800de9c <puts>
        return status;
 800d4c6:	7dfb      	ldrb	r3, [r7, #23]
 800d4c8:	e007      	b.n	800d4da <trigger_arduino_bootloader+0xce>
    }

    // Wait for bootloader to be ready
    HAL_Delay(ARDUINO_BOOTLOADER_TIMEOUT);
 800d4ca:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800d4ce:	f7f3 fbef 	bl	8000cb0 <HAL_Delay>

    printf("Arduino bootloader trigger sequence completed\r\n");
 800d4d2:	480d      	ldr	r0, [pc, #52]	@ (800d508 <trigger_arduino_bootloader+0xfc>)
 800d4d4:	f000 fce2 	bl	800de9c <puts>
//    arduino_prog_state = ARDUINO_PROG_RESET_SENT;

    return USBH_OK;
 800d4d8:	2300      	movs	r3, #0
}
 800d4da:	4618      	mov	r0, r3
 800d4dc:	3718      	adds	r7, #24
 800d4de:	46bd      	mov	sp, r7
 800d4e0:	bd80      	pop	{r7, pc}
 800d4e2:	bf00      	nop
 800d4e4:	200007f0 	.word	0x200007f0
 800d4e8:	0800ef94 	.word	0x0800ef94
 800d4ec:	0800ef60 	.word	0x0800ef60
 800d4f0:	0800efc4 	.word	0x0800efc4
 800d4f4:	0800eff0 	.word	0x0800eff0
 800d4f8:	20000248 	.word	0x20000248
 800d4fc:	0800f014 	.word	0x0800f014
 800d500:	0800f030 	.word	0x0800f030
 800d504:	0800f048 	.word	0x0800f048
 800d508:	0800f060 	.word	0x0800f060

0800d50c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d50c:	b580      	push	{r7, lr}
 800d50e:	b08a      	sub	sp, #40	@ 0x28
 800d510:	af00      	add	r7, sp, #0
 800d512:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d514:	f107 0314 	add.w	r3, r7, #20
 800d518:	2200      	movs	r2, #0
 800d51a:	601a      	str	r2, [r3, #0]
 800d51c:	605a      	str	r2, [r3, #4]
 800d51e:	609a      	str	r2, [r3, #8]
 800d520:	60da      	str	r2, [r3, #12]
 800d522:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d52c:	d147      	bne.n	800d5be <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d52e:	2300      	movs	r3, #0
 800d530:	613b      	str	r3, [r7, #16]
 800d532:	4b25      	ldr	r3, [pc, #148]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d536:	4a24      	ldr	r2, [pc, #144]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d538:	f043 0301 	orr.w	r3, r3, #1
 800d53c:	6313      	str	r3, [r2, #48]	@ 0x30
 800d53e:	4b22      	ldr	r3, [pc, #136]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d540:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800d542:	f003 0301 	and.w	r3, r3, #1
 800d546:	613b      	str	r3, [r7, #16]
 800d548:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d54a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800d54e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d550:	2300      	movs	r3, #0
 800d552:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d554:	2300      	movs	r3, #0
 800d556:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d558:	f107 0314 	add.w	r3, r7, #20
 800d55c:	4619      	mov	r1, r3
 800d55e:	481b      	ldr	r0, [pc, #108]	@ (800d5cc <HAL_HCD_MspInit+0xc0>)
 800d560:	f7f3 fcdc 	bl	8000f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d564:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800d568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d56a:	2302      	movs	r3, #2
 800d56c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d56e:	2300      	movs	r3, #0
 800d570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d572:	2303      	movs	r3, #3
 800d574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d576:	230a      	movs	r3, #10
 800d578:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d57a:	f107 0314 	add.w	r3, r7, #20
 800d57e:	4619      	mov	r1, r3
 800d580:	4812      	ldr	r0, [pc, #72]	@ (800d5cc <HAL_HCD_MspInit+0xc0>)
 800d582:	f7f3 fccb 	bl	8000f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d586:	4b10      	ldr	r3, [pc, #64]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d588:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d58a:	4a0f      	ldr	r2, [pc, #60]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d58c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d590:	6353      	str	r3, [r2, #52]	@ 0x34
 800d592:	2300      	movs	r3, #0
 800d594:	60fb      	str	r3, [r7, #12]
 800d596:	4b0c      	ldr	r3, [pc, #48]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d59a:	4a0b      	ldr	r2, [pc, #44]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d59c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800d5a0:	6453      	str	r3, [r2, #68]	@ 0x44
 800d5a2:	4b09      	ldr	r3, [pc, #36]	@ (800d5c8 <HAL_HCD_MspInit+0xbc>)
 800d5a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d5a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800d5aa:	60fb      	str	r3, [r7, #12]
 800d5ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d5ae:	2200      	movs	r2, #0
 800d5b0:	2100      	movs	r1, #0
 800d5b2:	2043      	movs	r0, #67	@ 0x43
 800d5b4:	f7f3 fc7b 	bl	8000eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d5b8:	2043      	movs	r0, #67	@ 0x43
 800d5ba:	f7f3 fc94 	bl	8000ee6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d5be:	bf00      	nop
 800d5c0:	3728      	adds	r7, #40	@ 0x28
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}
 800d5c6:	bf00      	nop
 800d5c8:	40023800 	.word	0x40023800
 800d5cc:	40020000 	.word	0x40020000

0800d5d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b082      	sub	sp, #8
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d5de:	4618      	mov	r0, r3
 800d5e0:	f7fe fdd7 	bl	800c192 <USBH_LL_IncTimer>
}
 800d5e4:	bf00      	nop
 800d5e6:	3708      	adds	r7, #8
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	bd80      	pop	{r7, pc}

0800d5ec <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5ec:	b580      	push	{r7, lr}
 800d5ee:	b082      	sub	sp, #8
 800d5f0:	af00      	add	r7, sp, #0
 800d5f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	f7fe fe0f 	bl	800c21e <USBH_LL_Connect>
}
 800d600:	bf00      	nop
 800d602:	3708      	adds	r7, #8
 800d604:	46bd      	mov	sp, r7
 800d606:	bd80      	pop	{r7, pc}

0800d608 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d608:	b580      	push	{r7, lr}
 800d60a:	b082      	sub	sp, #8
 800d60c:	af00      	add	r7, sp, #0
 800d60e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d616:	4618      	mov	r0, r3
 800d618:	f7fe fe18 	bl	800c24c <USBH_LL_Disconnect>
}
 800d61c:	bf00      	nop
 800d61e:	3708      	adds	r7, #8
 800d620:	46bd      	mov	sp, r7
 800d622:	bd80      	pop	{r7, pc}

0800d624 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d624:	b480      	push	{r7}
 800d626:	b083      	sub	sp, #12
 800d628:	af00      	add	r7, sp, #0
 800d62a:	6078      	str	r0, [r7, #4]
 800d62c:	460b      	mov	r3, r1
 800d62e:	70fb      	strb	r3, [r7, #3]
 800d630:	4613      	mov	r3, r2
 800d632:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d634:	bf00      	nop
 800d636:	370c      	adds	r7, #12
 800d638:	46bd      	mov	sp, r7
 800d63a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d63e:	4770      	bx	lr

0800d640 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d640:	b580      	push	{r7, lr}
 800d642:	b082      	sub	sp, #8
 800d644:	af00      	add	r7, sp, #0
 800d646:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fdc9 	bl	800c1e6 <USBH_LL_PortEnabled>
}
 800d654:	bf00      	nop
 800d656:	3708      	adds	r7, #8
 800d658:	46bd      	mov	sp, r7
 800d65a:	bd80      	pop	{r7, pc}

0800d65c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b082      	sub	sp, #8
 800d660:	af00      	add	r7, sp, #0
 800d662:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800d66a:	4618      	mov	r0, r3
 800d66c:	f7fe fdc9 	bl	800c202 <USBH_LL_PortDisabled>
}
 800d670:	bf00      	nop
 800d672:	3708      	adds	r7, #8
 800d674:	46bd      	mov	sp, r7
 800d676:	bd80      	pop	{r7, pc}

0800d678 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d678:	b580      	push	{r7, lr}
 800d67a:	b082      	sub	sp, #8
 800d67c:	af00      	add	r7, sp, #0
 800d67e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	f893 359c 	ldrb.w	r3, [r3, #1436]	@ 0x59c
 800d686:	2b01      	cmp	r3, #1
 800d688:	d12a      	bne.n	800d6e0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d68a:	4a18      	ldr	r2, [pc, #96]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	4a15      	ldr	r2, [pc, #84]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d696:	f8c3 25a0 	str.w	r2, [r3, #1440]	@ 0x5a0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d69a:	4b14      	ldr	r3, [pc, #80]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d69c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800d6a0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d6a2:	4b12      	ldr	r3, [pc, #72]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6a4:	2208      	movs	r2, #8
 800d6a6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d6a8:	4b10      	ldr	r3, [pc, #64]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6aa:	2201      	movs	r2, #1
 800d6ac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d6ae:	4b0f      	ldr	r3, [pc, #60]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6b0:	2200      	movs	r2, #0
 800d6b2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d6b4:	4b0d      	ldr	r3, [pc, #52]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6b6:	2202      	movs	r2, #2
 800d6b8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d6ba:	4b0c      	ldr	r3, [pc, #48]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6bc:	2200      	movs	r2, #0
 800d6be:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d6c0:	480a      	ldr	r0, [pc, #40]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6c2:	f7f3 fdc8 	bl	8001256 <HAL_HCD_Init>
 800d6c6:	4603      	mov	r3, r0
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d001      	beq.n	800d6d0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d6cc:	f7f3 f8b2 	bl	8000834 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d6d0:	4806      	ldr	r0, [pc, #24]	@ (800d6ec <USBH_LL_Init+0x74>)
 800d6d2:	f7f4 fa29 	bl	8001b28 <HAL_HCD_GetCurrentFrame>
 800d6d6:	4603      	mov	r3, r0
 800d6d8:	4619      	mov	r1, r3
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7fe fd4a 	bl	800c174 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d6e0:	2300      	movs	r3, #0
}
 800d6e2:	4618      	mov	r0, r3
 800d6e4:	3708      	adds	r7, #8
 800d6e6:	46bd      	mov	sp, r7
 800d6e8:	bd80      	pop	{r7, pc}
 800d6ea:	bf00      	nop
 800d6ec:	20000828 	.word	0x20000828

0800d6f0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d6f0:	b580      	push	{r7, lr}
 800d6f2:	b084      	sub	sp, #16
 800d6f4:	af00      	add	r7, sp, #0
 800d6f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6f8:	2300      	movs	r3, #0
 800d6fa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d706:	4618      	mov	r0, r3
 800d708:	f7f4 f996 	bl	8001a38 <HAL_HCD_Start>
 800d70c:	4603      	mov	r3, r0
 800d70e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d710:	7bfb      	ldrb	r3, [r7, #15]
 800d712:	4618      	mov	r0, r3
 800d714:	f000 f992 	bl	800da3c <USBH_Get_USB_Status>
 800d718:	4603      	mov	r3, r0
 800d71a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d71c:	7bbb      	ldrb	r3, [r7, #14]
}
 800d71e:	4618      	mov	r0, r3
 800d720:	3710      	adds	r7, #16
 800d722:	46bd      	mov	sp, r7
 800d724:	bd80      	pop	{r7, pc}

0800d726 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d726:	b580      	push	{r7, lr}
 800d728:	b084      	sub	sp, #16
 800d72a:	af00      	add	r7, sp, #0
 800d72c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d732:	2300      	movs	r3, #0
 800d734:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d73c:	4618      	mov	r0, r3
 800d73e:	f7f4 f99e 	bl	8001a7e <HAL_HCD_Stop>
 800d742:	4603      	mov	r3, r0
 800d744:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d746:	7bfb      	ldrb	r3, [r7, #15]
 800d748:	4618      	mov	r0, r3
 800d74a:	f000 f977 	bl	800da3c <USBH_Get_USB_Status>
 800d74e:	4603      	mov	r3, r0
 800d750:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d752:	7bbb      	ldrb	r3, [r7, #14]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b084      	sub	sp, #16
 800d760:	af00      	add	r7, sp, #0
 800d762:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d764:	2301      	movs	r3, #1
 800d766:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d76e:	4618      	mov	r0, r3
 800d770:	f7f4 f9e8 	bl	8001b44 <HAL_HCD_GetCurrentSpeed>
 800d774:	4603      	mov	r3, r0
 800d776:	2b02      	cmp	r3, #2
 800d778:	d00c      	beq.n	800d794 <USBH_LL_GetSpeed+0x38>
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d80d      	bhi.n	800d79a <USBH_LL_GetSpeed+0x3e>
 800d77e:	2b00      	cmp	r3, #0
 800d780:	d002      	beq.n	800d788 <USBH_LL_GetSpeed+0x2c>
 800d782:	2b01      	cmp	r3, #1
 800d784:	d003      	beq.n	800d78e <USBH_LL_GetSpeed+0x32>
 800d786:	e008      	b.n	800d79a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d788:	2300      	movs	r3, #0
 800d78a:	73fb      	strb	r3, [r7, #15]
    break;
 800d78c:	e008      	b.n	800d7a0 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d78e:	2301      	movs	r3, #1
 800d790:	73fb      	strb	r3, [r7, #15]
    break;
 800d792:	e005      	b.n	800d7a0 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d794:	2302      	movs	r3, #2
 800d796:	73fb      	strb	r3, [r7, #15]
    break;
 800d798:	e002      	b.n	800d7a0 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d79a:	2301      	movs	r3, #1
 800d79c:	73fb      	strb	r3, [r7, #15]
    break;
 800d79e:	bf00      	nop
  }
  return  speed;
 800d7a0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d7a2:	4618      	mov	r0, r3
 800d7a4:	3710      	adds	r7, #16
 800d7a6:	46bd      	mov	sp, r7
 800d7a8:	bd80      	pop	{r7, pc}

0800d7aa <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d7aa:	b580      	push	{r7, lr}
 800d7ac:	b084      	sub	sp, #16
 800d7ae:	af00      	add	r7, sp, #0
 800d7b0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7b6:	2300      	movs	r3, #0
 800d7b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d7ba:	687b      	ldr	r3, [r7, #4]
 800d7bc:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	f7f4 f979 	bl	8001ab8 <HAL_HCD_ResetPort>
 800d7c6:	4603      	mov	r3, r0
 800d7c8:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7ca:	7bfb      	ldrb	r3, [r7, #15]
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f000 f935 	bl	800da3c <USBH_Get_USB_Status>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7d6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7d8:	4618      	mov	r0, r3
 800d7da:	3710      	adds	r7, #16
 800d7dc:	46bd      	mov	sp, r7
 800d7de:	bd80      	pop	{r7, pc}

0800d7e0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7e0:	b580      	push	{r7, lr}
 800d7e2:	b082      	sub	sp, #8
 800d7e4:	af00      	add	r7, sp, #0
 800d7e6:	6078      	str	r0, [r7, #4]
 800d7e8:	460b      	mov	r3, r1
 800d7ea:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d7f2:	78fa      	ldrb	r2, [r7, #3]
 800d7f4:	4611      	mov	r1, r2
 800d7f6:	4618      	mov	r0, r3
 800d7f8:	f7f4 f981 	bl	8001afe <HAL_HCD_HC_GetXferCount>
 800d7fc:	4603      	mov	r3, r0
}
 800d7fe:	4618      	mov	r0, r3
 800d800:	3708      	adds	r7, #8
 800d802:	46bd      	mov	sp, r7
 800d804:	bd80      	pop	{r7, pc}

0800d806 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d806:	b590      	push	{r4, r7, lr}
 800d808:	b089      	sub	sp, #36	@ 0x24
 800d80a:	af04      	add	r7, sp, #16
 800d80c:	6078      	str	r0, [r7, #4]
 800d80e:	4608      	mov	r0, r1
 800d810:	4611      	mov	r1, r2
 800d812:	461a      	mov	r2, r3
 800d814:	4603      	mov	r3, r0
 800d816:	70fb      	strb	r3, [r7, #3]
 800d818:	460b      	mov	r3, r1
 800d81a:	70bb      	strb	r3, [r7, #2]
 800d81c:	4613      	mov	r3, r2
 800d81e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d820:	2300      	movs	r3, #0
 800d822:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d824:	2300      	movs	r3, #0
 800d826:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	f8d3 05a0 	ldr.w	r0, [r3, #1440]	@ 0x5a0
 800d82e:	787c      	ldrb	r4, [r7, #1]
 800d830:	78ba      	ldrb	r2, [r7, #2]
 800d832:	78f9      	ldrb	r1, [r7, #3]
 800d834:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d836:	9302      	str	r3, [sp, #8]
 800d838:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800d83c:	9301      	str	r3, [sp, #4]
 800d83e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d842:	9300      	str	r3, [sp, #0]
 800d844:	4623      	mov	r3, r4
 800d846:	f7f3 fd6d 	bl	8001324 <HAL_HCD_HC_Init>
 800d84a:	4603      	mov	r3, r0
 800d84c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d84e:	7bfb      	ldrb	r3, [r7, #15]
 800d850:	4618      	mov	r0, r3
 800d852:	f000 f8f3 	bl	800da3c <USBH_Get_USB_Status>
 800d856:	4603      	mov	r3, r0
 800d858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800d85c:	4618      	mov	r0, r3
 800d85e:	3714      	adds	r7, #20
 800d860:	46bd      	mov	sp, r7
 800d862:	bd90      	pop	{r4, r7, pc}

0800d864 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	460b      	mov	r3, r1
 800d86e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d870:	2300      	movs	r3, #0
 800d872:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d874:	2300      	movs	r3, #0
 800d876:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d87e:	78fa      	ldrb	r2, [r7, #3]
 800d880:	4611      	mov	r1, r2
 800d882:	4618      	mov	r0, r3
 800d884:	f7f3 fe06 	bl	8001494 <HAL_HCD_HC_Halt>
 800d888:	4603      	mov	r3, r0
 800d88a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d88c:	7bfb      	ldrb	r3, [r7, #15]
 800d88e:	4618      	mov	r0, r3
 800d890:	f000 f8d4 	bl	800da3c <USBH_Get_USB_Status>
 800d894:	4603      	mov	r3, r0
 800d896:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d898:	7bbb      	ldrb	r3, [r7, #14]
}
 800d89a:	4618      	mov	r0, r3
 800d89c:	3710      	adds	r7, #16
 800d89e:	46bd      	mov	sp, r7
 800d8a0:	bd80      	pop	{r7, pc}

0800d8a2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d8a2:	b590      	push	{r4, r7, lr}
 800d8a4:	b089      	sub	sp, #36	@ 0x24
 800d8a6:	af04      	add	r7, sp, #16
 800d8a8:	6078      	str	r0, [r7, #4]
 800d8aa:	4608      	mov	r0, r1
 800d8ac:	4611      	mov	r1, r2
 800d8ae:	461a      	mov	r2, r3
 800d8b0:	4603      	mov	r3, r0
 800d8b2:	70fb      	strb	r3, [r7, #3]
 800d8b4:	460b      	mov	r3, r1
 800d8b6:	70bb      	strb	r3, [r7, #2]
 800d8b8:	4613      	mov	r3, r2
 800d8ba:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d8bc:	2300      	movs	r3, #0
 800d8be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d8c0:	2300      	movs	r3, #0
 800d8c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d8c4:	687b      	ldr	r3, [r7, #4]
 800d8c6:	f8d3 05a0 	ldr.w	r0, [r3, #1440]	@ 0x5a0
 800d8ca:	787c      	ldrb	r4, [r7, #1]
 800d8cc:	78ba      	ldrb	r2, [r7, #2]
 800d8ce:	78f9      	ldrb	r1, [r7, #3]
 800d8d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800d8d4:	9303      	str	r3, [sp, #12]
 800d8d6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800d8d8:	9302      	str	r3, [sp, #8]
 800d8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d8dc:	9301      	str	r3, [sp, #4]
 800d8de:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d8e2:	9300      	str	r3, [sp, #0]
 800d8e4:	4623      	mov	r3, r4
 800d8e6:	f7f3 fdf9 	bl	80014dc <HAL_HCD_HC_SubmitRequest>
 800d8ea:	4603      	mov	r3, r0
 800d8ec:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d8ee:	7bfb      	ldrb	r3, [r7, #15]
 800d8f0:	4618      	mov	r0, r3
 800d8f2:	f000 f8a3 	bl	800da3c <USBH_Get_USB_Status>
 800d8f6:	4603      	mov	r3, r0
 800d8f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d8fa:	7bbb      	ldrb	r3, [r7, #14]
}
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	3714      	adds	r7, #20
 800d900:	46bd      	mov	sp, r7
 800d902:	bd90      	pop	{r4, r7, pc}

0800d904 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d904:	b580      	push	{r7, lr}
 800d906:	b082      	sub	sp, #8
 800d908:	af00      	add	r7, sp, #0
 800d90a:	6078      	str	r0, [r7, #4]
 800d90c:	460b      	mov	r3, r1
 800d90e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d916:	78fa      	ldrb	r2, [r7, #3]
 800d918:	4611      	mov	r1, r2
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7f4 f8da 	bl	8001ad4 <HAL_HCD_HC_GetURBState>
 800d920:	4603      	mov	r3, r0
}
 800d922:	4618      	mov	r0, r3
 800d924:	3708      	adds	r7, #8
 800d926:	46bd      	mov	sp, r7
 800d928:	bd80      	pop	{r7, pc}

0800d92a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d92a:	b580      	push	{r7, lr}
 800d92c:	b082      	sub	sp, #8
 800d92e:	af00      	add	r7, sp, #0
 800d930:	6078      	str	r0, [r7, #4]
 800d932:	460b      	mov	r3, r1
 800d934:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800d936:	687b      	ldr	r3, [r7, #4]
 800d938:	f893 359c 	ldrb.w	r3, [r3, #1436]	@ 0x59c
 800d93c:	2b01      	cmp	r3, #1
 800d93e:	d103      	bne.n	800d948 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800d940:	78fb      	ldrb	r3, [r7, #3]
 800d942:	4618      	mov	r0, r3
 800d944:	f000 f8a6 	bl	800da94 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800d948:	20c8      	movs	r0, #200	@ 0xc8
 800d94a:	f7f3 f9b1 	bl	8000cb0 <HAL_Delay>
  return USBH_OK;
 800d94e:	2300      	movs	r3, #0
}
 800d950:	4618      	mov	r0, r3
 800d952:	3708      	adds	r7, #8
 800d954:	46bd      	mov	sp, r7
 800d956:	bd80      	pop	{r7, pc}

0800d958 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d958:	b480      	push	{r7}
 800d95a:	b085      	sub	sp, #20
 800d95c:	af00      	add	r7, sp, #0
 800d95e:	6078      	str	r0, [r7, #4]
 800d960:	460b      	mov	r3, r1
 800d962:	70fb      	strb	r3, [r7, #3]
 800d964:	4613      	mov	r3, r2
 800d966:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d96e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d970:	78fa      	ldrb	r2, [r7, #3]
 800d972:	68f9      	ldr	r1, [r7, #12]
 800d974:	4613      	mov	r3, r2
 800d976:	011b      	lsls	r3, r3, #4
 800d978:	1a9b      	subs	r3, r3, r2
 800d97a:	009b      	lsls	r3, r3, #2
 800d97c:	440b      	add	r3, r1
 800d97e:	3317      	adds	r3, #23
 800d980:	781b      	ldrb	r3, [r3, #0]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d00a      	beq.n	800d99c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d986:	78fa      	ldrb	r2, [r7, #3]
 800d988:	68f9      	ldr	r1, [r7, #12]
 800d98a:	4613      	mov	r3, r2
 800d98c:	011b      	lsls	r3, r3, #4
 800d98e:	1a9b      	subs	r3, r3, r2
 800d990:	009b      	lsls	r3, r3, #2
 800d992:	440b      	add	r3, r1
 800d994:	333c      	adds	r3, #60	@ 0x3c
 800d996:	78ba      	ldrb	r2, [r7, #2]
 800d998:	701a      	strb	r2, [r3, #0]
 800d99a:	e009      	b.n	800d9b0 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d99c:	78fa      	ldrb	r2, [r7, #3]
 800d99e:	68f9      	ldr	r1, [r7, #12]
 800d9a0:	4613      	mov	r3, r2
 800d9a2:	011b      	lsls	r3, r3, #4
 800d9a4:	1a9b      	subs	r3, r3, r2
 800d9a6:	009b      	lsls	r3, r3, #2
 800d9a8:	440b      	add	r3, r1
 800d9aa:	333d      	adds	r3, #61	@ 0x3d
 800d9ac:	78ba      	ldrb	r2, [r7, #2]
 800d9ae:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d9b0:	2300      	movs	r3, #0
}
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	3714      	adds	r7, #20
 800d9b6:	46bd      	mov	sp, r7
 800d9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9bc:	4770      	bx	lr

0800d9be <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d9be:	b480      	push	{r7}
 800d9c0:	b085      	sub	sp, #20
 800d9c2:	af00      	add	r7, sp, #0
 800d9c4:	6078      	str	r0, [r7, #4]
 800d9c6:	460b      	mov	r3, r1
 800d9c8:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d9ca:	2300      	movs	r3, #0
 800d9cc:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	f8d3 35a0 	ldr.w	r3, [r3, #1440]	@ 0x5a0
 800d9d4:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d9d6:	78fa      	ldrb	r2, [r7, #3]
 800d9d8:	68b9      	ldr	r1, [r7, #8]
 800d9da:	4613      	mov	r3, r2
 800d9dc:	011b      	lsls	r3, r3, #4
 800d9de:	1a9b      	subs	r3, r3, r2
 800d9e0:	009b      	lsls	r3, r3, #2
 800d9e2:	440b      	add	r3, r1
 800d9e4:	3317      	adds	r3, #23
 800d9e6:	781b      	ldrb	r3, [r3, #0]
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d00a      	beq.n	800da02 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d9ec:	78fa      	ldrb	r2, [r7, #3]
 800d9ee:	68b9      	ldr	r1, [r7, #8]
 800d9f0:	4613      	mov	r3, r2
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	1a9b      	subs	r3, r3, r2
 800d9f6:	009b      	lsls	r3, r3, #2
 800d9f8:	440b      	add	r3, r1
 800d9fa:	333c      	adds	r3, #60	@ 0x3c
 800d9fc:	781b      	ldrb	r3, [r3, #0]
 800d9fe:	73fb      	strb	r3, [r7, #15]
 800da00:	e009      	b.n	800da16 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800da02:	78fa      	ldrb	r2, [r7, #3]
 800da04:	68b9      	ldr	r1, [r7, #8]
 800da06:	4613      	mov	r3, r2
 800da08:	011b      	lsls	r3, r3, #4
 800da0a:	1a9b      	subs	r3, r3, r2
 800da0c:	009b      	lsls	r3, r3, #2
 800da0e:	440b      	add	r3, r1
 800da10:	333d      	adds	r3, #61	@ 0x3d
 800da12:	781b      	ldrb	r3, [r3, #0]
 800da14:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800da16:	7bfb      	ldrb	r3, [r7, #15]
}
 800da18:	4618      	mov	r0, r3
 800da1a:	3714      	adds	r7, #20
 800da1c:	46bd      	mov	sp, r7
 800da1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da22:	4770      	bx	lr

0800da24 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800da24:	b580      	push	{r7, lr}
 800da26:	b082      	sub	sp, #8
 800da28:	af00      	add	r7, sp, #0
 800da2a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f7f3 f93f 	bl	8000cb0 <HAL_Delay>
}
 800da32:	bf00      	nop
 800da34:	3708      	adds	r7, #8
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
	...

0800da3c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800da3c:	b480      	push	{r7}
 800da3e:	b085      	sub	sp, #20
 800da40:	af00      	add	r7, sp, #0
 800da42:	4603      	mov	r3, r0
 800da44:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800da46:	2300      	movs	r3, #0
 800da48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800da4a:	79fb      	ldrb	r3, [r7, #7]
 800da4c:	2b03      	cmp	r3, #3
 800da4e:	d817      	bhi.n	800da80 <USBH_Get_USB_Status+0x44>
 800da50:	a201      	add	r2, pc, #4	@ (adr r2, 800da58 <USBH_Get_USB_Status+0x1c>)
 800da52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da56:	bf00      	nop
 800da58:	0800da69 	.word	0x0800da69
 800da5c:	0800da6f 	.word	0x0800da6f
 800da60:	0800da75 	.word	0x0800da75
 800da64:	0800da7b 	.word	0x0800da7b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800da68:	2300      	movs	r3, #0
 800da6a:	73fb      	strb	r3, [r7, #15]
    break;
 800da6c:	e00b      	b.n	800da86 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800da6e:	2302      	movs	r3, #2
 800da70:	73fb      	strb	r3, [r7, #15]
    break;
 800da72:	e008      	b.n	800da86 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800da74:	2301      	movs	r3, #1
 800da76:	73fb      	strb	r3, [r7, #15]
    break;
 800da78:	e005      	b.n	800da86 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800da7a:	2302      	movs	r3, #2
 800da7c:	73fb      	strb	r3, [r7, #15]
    break;
 800da7e:	e002      	b.n	800da86 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800da80:	2302      	movs	r3, #2
 800da82:	73fb      	strb	r3, [r7, #15]
    break;
 800da84:	bf00      	nop
  }
  return usb_status;
 800da86:	7bfb      	ldrb	r3, [r7, #15]
}
 800da88:	4618      	mov	r0, r3
 800da8a:	3714      	adds	r7, #20
 800da8c:	46bd      	mov	sp, r7
 800da8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da92:	4770      	bx	lr

0800da94 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b084      	sub	sp, #16
 800da98:	af00      	add	r7, sp, #0
 800da9a:	4603      	mov	r3, r0
 800da9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800da9e:	79fb      	ldrb	r3, [r7, #7]
 800daa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800daa2:	79fb      	ldrb	r3, [r7, #7]
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d102      	bne.n	800daae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800daa8:	2300      	movs	r3, #0
 800daaa:	73fb      	strb	r3, [r7, #15]
 800daac:	e001      	b.n	800dab2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800daae:	2301      	movs	r3, #1
 800dab0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_5,(GPIO_PinState)data);
 800dab2:	7bfb      	ldrb	r3, [r7, #15]
 800dab4:	461a      	mov	r2, r3
 800dab6:	2120      	movs	r1, #32
 800dab8:	4803      	ldr	r0, [pc, #12]	@ (800dac8 <MX_DriverVbusFS+0x34>)
 800daba:	f7f3 fbb3 	bl	8001224 <HAL_GPIO_WritePin>
}
 800dabe:	bf00      	nop
 800dac0:	3710      	adds	r7, #16
 800dac2:	46bd      	mov	sp, r7
 800dac4:	bd80      	pop	{r7, pc}
 800dac6:	bf00      	nop
 800dac8:	40020000 	.word	0x40020000

0800dacc <malloc>:
 800dacc:	4b02      	ldr	r3, [pc, #8]	@ (800dad8 <malloc+0xc>)
 800dace:	4601      	mov	r1, r0
 800dad0:	6818      	ldr	r0, [r3, #0]
 800dad2:	f000 b82d 	b.w	800db30 <_malloc_r>
 800dad6:	bf00      	nop
 800dad8:	20000154 	.word	0x20000154

0800dadc <free>:
 800dadc:	4b02      	ldr	r3, [pc, #8]	@ (800dae8 <free+0xc>)
 800dade:	4601      	mov	r1, r0
 800dae0:	6818      	ldr	r0, [r3, #0]
 800dae2:	f000 bb9f 	b.w	800e224 <_free_r>
 800dae6:	bf00      	nop
 800dae8:	20000154 	.word	0x20000154

0800daec <sbrk_aligned>:
 800daec:	b570      	push	{r4, r5, r6, lr}
 800daee:	4e0f      	ldr	r6, [pc, #60]	@ (800db2c <sbrk_aligned+0x40>)
 800daf0:	460c      	mov	r4, r1
 800daf2:	6831      	ldr	r1, [r6, #0]
 800daf4:	4605      	mov	r5, r0
 800daf6:	b911      	cbnz	r1, 800dafe <sbrk_aligned+0x12>
 800daf8:	f000 fb36 	bl	800e168 <_sbrk_r>
 800dafc:	6030      	str	r0, [r6, #0]
 800dafe:	4621      	mov	r1, r4
 800db00:	4628      	mov	r0, r5
 800db02:	f000 fb31 	bl	800e168 <_sbrk_r>
 800db06:	1c43      	adds	r3, r0, #1
 800db08:	d103      	bne.n	800db12 <sbrk_aligned+0x26>
 800db0a:	f04f 34ff 	mov.w	r4, #4294967295
 800db0e:	4620      	mov	r0, r4
 800db10:	bd70      	pop	{r4, r5, r6, pc}
 800db12:	1cc4      	adds	r4, r0, #3
 800db14:	f024 0403 	bic.w	r4, r4, #3
 800db18:	42a0      	cmp	r0, r4
 800db1a:	d0f8      	beq.n	800db0e <sbrk_aligned+0x22>
 800db1c:	1a21      	subs	r1, r4, r0
 800db1e:	4628      	mov	r0, r5
 800db20:	f000 fb22 	bl	800e168 <_sbrk_r>
 800db24:	3001      	adds	r0, #1
 800db26:	d1f2      	bne.n	800db0e <sbrk_aligned+0x22>
 800db28:	e7ef      	b.n	800db0a <sbrk_aligned+0x1e>
 800db2a:	bf00      	nop
 800db2c:	20000c08 	.word	0x20000c08

0800db30 <_malloc_r>:
 800db30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db34:	1ccd      	adds	r5, r1, #3
 800db36:	f025 0503 	bic.w	r5, r5, #3
 800db3a:	3508      	adds	r5, #8
 800db3c:	2d0c      	cmp	r5, #12
 800db3e:	bf38      	it	cc
 800db40:	250c      	movcc	r5, #12
 800db42:	2d00      	cmp	r5, #0
 800db44:	4606      	mov	r6, r0
 800db46:	db01      	blt.n	800db4c <_malloc_r+0x1c>
 800db48:	42a9      	cmp	r1, r5
 800db4a:	d904      	bls.n	800db56 <_malloc_r+0x26>
 800db4c:	230c      	movs	r3, #12
 800db4e:	6033      	str	r3, [r6, #0]
 800db50:	2000      	movs	r0, #0
 800db52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db56:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dc2c <_malloc_r+0xfc>
 800db5a:	f000 f869 	bl	800dc30 <__malloc_lock>
 800db5e:	f8d8 3000 	ldr.w	r3, [r8]
 800db62:	461c      	mov	r4, r3
 800db64:	bb44      	cbnz	r4, 800dbb8 <_malloc_r+0x88>
 800db66:	4629      	mov	r1, r5
 800db68:	4630      	mov	r0, r6
 800db6a:	f7ff ffbf 	bl	800daec <sbrk_aligned>
 800db6e:	1c43      	adds	r3, r0, #1
 800db70:	4604      	mov	r4, r0
 800db72:	d158      	bne.n	800dc26 <_malloc_r+0xf6>
 800db74:	f8d8 4000 	ldr.w	r4, [r8]
 800db78:	4627      	mov	r7, r4
 800db7a:	2f00      	cmp	r7, #0
 800db7c:	d143      	bne.n	800dc06 <_malloc_r+0xd6>
 800db7e:	2c00      	cmp	r4, #0
 800db80:	d04b      	beq.n	800dc1a <_malloc_r+0xea>
 800db82:	6823      	ldr	r3, [r4, #0]
 800db84:	4639      	mov	r1, r7
 800db86:	4630      	mov	r0, r6
 800db88:	eb04 0903 	add.w	r9, r4, r3
 800db8c:	f000 faec 	bl	800e168 <_sbrk_r>
 800db90:	4581      	cmp	r9, r0
 800db92:	d142      	bne.n	800dc1a <_malloc_r+0xea>
 800db94:	6821      	ldr	r1, [r4, #0]
 800db96:	1a6d      	subs	r5, r5, r1
 800db98:	4629      	mov	r1, r5
 800db9a:	4630      	mov	r0, r6
 800db9c:	f7ff ffa6 	bl	800daec <sbrk_aligned>
 800dba0:	3001      	adds	r0, #1
 800dba2:	d03a      	beq.n	800dc1a <_malloc_r+0xea>
 800dba4:	6823      	ldr	r3, [r4, #0]
 800dba6:	442b      	add	r3, r5
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	f8d8 3000 	ldr.w	r3, [r8]
 800dbae:	685a      	ldr	r2, [r3, #4]
 800dbb0:	bb62      	cbnz	r2, 800dc0c <_malloc_r+0xdc>
 800dbb2:	f8c8 7000 	str.w	r7, [r8]
 800dbb6:	e00f      	b.n	800dbd8 <_malloc_r+0xa8>
 800dbb8:	6822      	ldr	r2, [r4, #0]
 800dbba:	1b52      	subs	r2, r2, r5
 800dbbc:	d420      	bmi.n	800dc00 <_malloc_r+0xd0>
 800dbbe:	2a0b      	cmp	r2, #11
 800dbc0:	d917      	bls.n	800dbf2 <_malloc_r+0xc2>
 800dbc2:	1961      	adds	r1, r4, r5
 800dbc4:	42a3      	cmp	r3, r4
 800dbc6:	6025      	str	r5, [r4, #0]
 800dbc8:	bf18      	it	ne
 800dbca:	6059      	strne	r1, [r3, #4]
 800dbcc:	6863      	ldr	r3, [r4, #4]
 800dbce:	bf08      	it	eq
 800dbd0:	f8c8 1000 	streq.w	r1, [r8]
 800dbd4:	5162      	str	r2, [r4, r5]
 800dbd6:	604b      	str	r3, [r1, #4]
 800dbd8:	4630      	mov	r0, r6
 800dbda:	f000 f82f 	bl	800dc3c <__malloc_unlock>
 800dbde:	f104 000b 	add.w	r0, r4, #11
 800dbe2:	1d23      	adds	r3, r4, #4
 800dbe4:	f020 0007 	bic.w	r0, r0, #7
 800dbe8:	1ac2      	subs	r2, r0, r3
 800dbea:	bf1c      	itt	ne
 800dbec:	1a1b      	subne	r3, r3, r0
 800dbee:	50a3      	strne	r3, [r4, r2]
 800dbf0:	e7af      	b.n	800db52 <_malloc_r+0x22>
 800dbf2:	6862      	ldr	r2, [r4, #4]
 800dbf4:	42a3      	cmp	r3, r4
 800dbf6:	bf0c      	ite	eq
 800dbf8:	f8c8 2000 	streq.w	r2, [r8]
 800dbfc:	605a      	strne	r2, [r3, #4]
 800dbfe:	e7eb      	b.n	800dbd8 <_malloc_r+0xa8>
 800dc00:	4623      	mov	r3, r4
 800dc02:	6864      	ldr	r4, [r4, #4]
 800dc04:	e7ae      	b.n	800db64 <_malloc_r+0x34>
 800dc06:	463c      	mov	r4, r7
 800dc08:	687f      	ldr	r7, [r7, #4]
 800dc0a:	e7b6      	b.n	800db7a <_malloc_r+0x4a>
 800dc0c:	461a      	mov	r2, r3
 800dc0e:	685b      	ldr	r3, [r3, #4]
 800dc10:	42a3      	cmp	r3, r4
 800dc12:	d1fb      	bne.n	800dc0c <_malloc_r+0xdc>
 800dc14:	2300      	movs	r3, #0
 800dc16:	6053      	str	r3, [r2, #4]
 800dc18:	e7de      	b.n	800dbd8 <_malloc_r+0xa8>
 800dc1a:	230c      	movs	r3, #12
 800dc1c:	6033      	str	r3, [r6, #0]
 800dc1e:	4630      	mov	r0, r6
 800dc20:	f000 f80c 	bl	800dc3c <__malloc_unlock>
 800dc24:	e794      	b.n	800db50 <_malloc_r+0x20>
 800dc26:	6005      	str	r5, [r0, #0]
 800dc28:	e7d6      	b.n	800dbd8 <_malloc_r+0xa8>
 800dc2a:	bf00      	nop
 800dc2c:	20000c0c 	.word	0x20000c0c

0800dc30 <__malloc_lock>:
 800dc30:	4801      	ldr	r0, [pc, #4]	@ (800dc38 <__malloc_lock+0x8>)
 800dc32:	f000 bae6 	b.w	800e202 <__retarget_lock_acquire_recursive>
 800dc36:	bf00      	nop
 800dc38:	20000d50 	.word	0x20000d50

0800dc3c <__malloc_unlock>:
 800dc3c:	4801      	ldr	r0, [pc, #4]	@ (800dc44 <__malloc_unlock+0x8>)
 800dc3e:	f000 bae1 	b.w	800e204 <__retarget_lock_release_recursive>
 800dc42:	bf00      	nop
 800dc44:	20000d50 	.word	0x20000d50

0800dc48 <std>:
 800dc48:	2300      	movs	r3, #0
 800dc4a:	b510      	push	{r4, lr}
 800dc4c:	4604      	mov	r4, r0
 800dc4e:	e9c0 3300 	strd	r3, r3, [r0]
 800dc52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dc56:	6083      	str	r3, [r0, #8]
 800dc58:	8181      	strh	r1, [r0, #12]
 800dc5a:	6643      	str	r3, [r0, #100]	@ 0x64
 800dc5c:	81c2      	strh	r2, [r0, #14]
 800dc5e:	6183      	str	r3, [r0, #24]
 800dc60:	4619      	mov	r1, r3
 800dc62:	2208      	movs	r2, #8
 800dc64:	305c      	adds	r0, #92	@ 0x5c
 800dc66:	f000 fa2f 	bl	800e0c8 <memset>
 800dc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800dca0 <std+0x58>)
 800dc6c:	6263      	str	r3, [r4, #36]	@ 0x24
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800dca4 <std+0x5c>)
 800dc70:	62a3      	str	r3, [r4, #40]	@ 0x28
 800dc72:	4b0d      	ldr	r3, [pc, #52]	@ (800dca8 <std+0x60>)
 800dc74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dc76:	4b0d      	ldr	r3, [pc, #52]	@ (800dcac <std+0x64>)
 800dc78:	6323      	str	r3, [r4, #48]	@ 0x30
 800dc7a:	4b0d      	ldr	r3, [pc, #52]	@ (800dcb0 <std+0x68>)
 800dc7c:	6224      	str	r4, [r4, #32]
 800dc7e:	429c      	cmp	r4, r3
 800dc80:	d006      	beq.n	800dc90 <std+0x48>
 800dc82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800dc86:	4294      	cmp	r4, r2
 800dc88:	d002      	beq.n	800dc90 <std+0x48>
 800dc8a:	33d0      	adds	r3, #208	@ 0xd0
 800dc8c:	429c      	cmp	r4, r3
 800dc8e:	d105      	bne.n	800dc9c <std+0x54>
 800dc90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800dc94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dc98:	f000 bab2 	b.w	800e200 <__retarget_lock_init_recursive>
 800dc9c:	bd10      	pop	{r4, pc}
 800dc9e:	bf00      	nop
 800dca0:	0800df19 	.word	0x0800df19
 800dca4:	0800df3b 	.word	0x0800df3b
 800dca8:	0800df73 	.word	0x0800df73
 800dcac:	0800df97 	.word	0x0800df97
 800dcb0:	20000c10 	.word	0x20000c10

0800dcb4 <stdio_exit_handler>:
 800dcb4:	4a02      	ldr	r2, [pc, #8]	@ (800dcc0 <stdio_exit_handler+0xc>)
 800dcb6:	4903      	ldr	r1, [pc, #12]	@ (800dcc4 <stdio_exit_handler+0x10>)
 800dcb8:	4803      	ldr	r0, [pc, #12]	@ (800dcc8 <stdio_exit_handler+0x14>)
 800dcba:	f000 b869 	b.w	800dd90 <_fwalk_sglue>
 800dcbe:	bf00      	nop
 800dcc0:	20000148 	.word	0x20000148
 800dcc4:	0800ec0d 	.word	0x0800ec0d
 800dcc8:	20000158 	.word	0x20000158

0800dccc <cleanup_stdio>:
 800dccc:	6841      	ldr	r1, [r0, #4]
 800dcce:	4b0c      	ldr	r3, [pc, #48]	@ (800dd00 <cleanup_stdio+0x34>)
 800dcd0:	4299      	cmp	r1, r3
 800dcd2:	b510      	push	{r4, lr}
 800dcd4:	4604      	mov	r4, r0
 800dcd6:	d001      	beq.n	800dcdc <cleanup_stdio+0x10>
 800dcd8:	f000 ff98 	bl	800ec0c <_fflush_r>
 800dcdc:	68a1      	ldr	r1, [r4, #8]
 800dcde:	4b09      	ldr	r3, [pc, #36]	@ (800dd04 <cleanup_stdio+0x38>)
 800dce0:	4299      	cmp	r1, r3
 800dce2:	d002      	beq.n	800dcea <cleanup_stdio+0x1e>
 800dce4:	4620      	mov	r0, r4
 800dce6:	f000 ff91 	bl	800ec0c <_fflush_r>
 800dcea:	68e1      	ldr	r1, [r4, #12]
 800dcec:	4b06      	ldr	r3, [pc, #24]	@ (800dd08 <cleanup_stdio+0x3c>)
 800dcee:	4299      	cmp	r1, r3
 800dcf0:	d004      	beq.n	800dcfc <cleanup_stdio+0x30>
 800dcf2:	4620      	mov	r0, r4
 800dcf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dcf8:	f000 bf88 	b.w	800ec0c <_fflush_r>
 800dcfc:	bd10      	pop	{r4, pc}
 800dcfe:	bf00      	nop
 800dd00:	20000c10 	.word	0x20000c10
 800dd04:	20000c78 	.word	0x20000c78
 800dd08:	20000ce0 	.word	0x20000ce0

0800dd0c <global_stdio_init.part.0>:
 800dd0c:	b510      	push	{r4, lr}
 800dd0e:	4b0b      	ldr	r3, [pc, #44]	@ (800dd3c <global_stdio_init.part.0+0x30>)
 800dd10:	4c0b      	ldr	r4, [pc, #44]	@ (800dd40 <global_stdio_init.part.0+0x34>)
 800dd12:	4a0c      	ldr	r2, [pc, #48]	@ (800dd44 <global_stdio_init.part.0+0x38>)
 800dd14:	601a      	str	r2, [r3, #0]
 800dd16:	4620      	mov	r0, r4
 800dd18:	2200      	movs	r2, #0
 800dd1a:	2104      	movs	r1, #4
 800dd1c:	f7ff ff94 	bl	800dc48 <std>
 800dd20:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800dd24:	2201      	movs	r2, #1
 800dd26:	2109      	movs	r1, #9
 800dd28:	f7ff ff8e 	bl	800dc48 <std>
 800dd2c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800dd30:	2202      	movs	r2, #2
 800dd32:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd36:	2112      	movs	r1, #18
 800dd38:	f7ff bf86 	b.w	800dc48 <std>
 800dd3c:	20000d48 	.word	0x20000d48
 800dd40:	20000c10 	.word	0x20000c10
 800dd44:	0800dcb5 	.word	0x0800dcb5

0800dd48 <__sfp_lock_acquire>:
 800dd48:	4801      	ldr	r0, [pc, #4]	@ (800dd50 <__sfp_lock_acquire+0x8>)
 800dd4a:	f000 ba5a 	b.w	800e202 <__retarget_lock_acquire_recursive>
 800dd4e:	bf00      	nop
 800dd50:	20000d51 	.word	0x20000d51

0800dd54 <__sfp_lock_release>:
 800dd54:	4801      	ldr	r0, [pc, #4]	@ (800dd5c <__sfp_lock_release+0x8>)
 800dd56:	f000 ba55 	b.w	800e204 <__retarget_lock_release_recursive>
 800dd5a:	bf00      	nop
 800dd5c:	20000d51 	.word	0x20000d51

0800dd60 <__sinit>:
 800dd60:	b510      	push	{r4, lr}
 800dd62:	4604      	mov	r4, r0
 800dd64:	f7ff fff0 	bl	800dd48 <__sfp_lock_acquire>
 800dd68:	6a23      	ldr	r3, [r4, #32]
 800dd6a:	b11b      	cbz	r3, 800dd74 <__sinit+0x14>
 800dd6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800dd70:	f7ff bff0 	b.w	800dd54 <__sfp_lock_release>
 800dd74:	4b04      	ldr	r3, [pc, #16]	@ (800dd88 <__sinit+0x28>)
 800dd76:	6223      	str	r3, [r4, #32]
 800dd78:	4b04      	ldr	r3, [pc, #16]	@ (800dd8c <__sinit+0x2c>)
 800dd7a:	681b      	ldr	r3, [r3, #0]
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	d1f5      	bne.n	800dd6c <__sinit+0xc>
 800dd80:	f7ff ffc4 	bl	800dd0c <global_stdio_init.part.0>
 800dd84:	e7f2      	b.n	800dd6c <__sinit+0xc>
 800dd86:	bf00      	nop
 800dd88:	0800dccd 	.word	0x0800dccd
 800dd8c:	20000d48 	.word	0x20000d48

0800dd90 <_fwalk_sglue>:
 800dd90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dd94:	4607      	mov	r7, r0
 800dd96:	4688      	mov	r8, r1
 800dd98:	4614      	mov	r4, r2
 800dd9a:	2600      	movs	r6, #0
 800dd9c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800dda0:	f1b9 0901 	subs.w	r9, r9, #1
 800dda4:	d505      	bpl.n	800ddb2 <_fwalk_sglue+0x22>
 800dda6:	6824      	ldr	r4, [r4, #0]
 800dda8:	2c00      	cmp	r4, #0
 800ddaa:	d1f7      	bne.n	800dd9c <_fwalk_sglue+0xc>
 800ddac:	4630      	mov	r0, r6
 800ddae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ddb2:	89ab      	ldrh	r3, [r5, #12]
 800ddb4:	2b01      	cmp	r3, #1
 800ddb6:	d907      	bls.n	800ddc8 <_fwalk_sglue+0x38>
 800ddb8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	d003      	beq.n	800ddc8 <_fwalk_sglue+0x38>
 800ddc0:	4629      	mov	r1, r5
 800ddc2:	4638      	mov	r0, r7
 800ddc4:	47c0      	blx	r8
 800ddc6:	4306      	orrs	r6, r0
 800ddc8:	3568      	adds	r5, #104	@ 0x68
 800ddca:	e7e9      	b.n	800dda0 <_fwalk_sglue+0x10>

0800ddcc <iprintf>:
 800ddcc:	b40f      	push	{r0, r1, r2, r3}
 800ddce:	b507      	push	{r0, r1, r2, lr}
 800ddd0:	4906      	ldr	r1, [pc, #24]	@ (800ddec <iprintf+0x20>)
 800ddd2:	ab04      	add	r3, sp, #16
 800ddd4:	6808      	ldr	r0, [r1, #0]
 800ddd6:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddda:	6881      	ldr	r1, [r0, #8]
 800dddc:	9301      	str	r3, [sp, #4]
 800ddde:	f000 fbed 	bl	800e5bc <_vfiprintf_r>
 800dde2:	b003      	add	sp, #12
 800dde4:	f85d eb04 	ldr.w	lr, [sp], #4
 800dde8:	b004      	add	sp, #16
 800ddea:	4770      	bx	lr
 800ddec:	20000154 	.word	0x20000154

0800ddf0 <_puts_r>:
 800ddf0:	6a03      	ldr	r3, [r0, #32]
 800ddf2:	b570      	push	{r4, r5, r6, lr}
 800ddf4:	6884      	ldr	r4, [r0, #8]
 800ddf6:	4605      	mov	r5, r0
 800ddf8:	460e      	mov	r6, r1
 800ddfa:	b90b      	cbnz	r3, 800de00 <_puts_r+0x10>
 800ddfc:	f7ff ffb0 	bl	800dd60 <__sinit>
 800de00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de02:	07db      	lsls	r3, r3, #31
 800de04:	d405      	bmi.n	800de12 <_puts_r+0x22>
 800de06:	89a3      	ldrh	r3, [r4, #12]
 800de08:	0598      	lsls	r0, r3, #22
 800de0a:	d402      	bmi.n	800de12 <_puts_r+0x22>
 800de0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de0e:	f000 f9f8 	bl	800e202 <__retarget_lock_acquire_recursive>
 800de12:	89a3      	ldrh	r3, [r4, #12]
 800de14:	0719      	lsls	r1, r3, #28
 800de16:	d502      	bpl.n	800de1e <_puts_r+0x2e>
 800de18:	6923      	ldr	r3, [r4, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d135      	bne.n	800de8a <_puts_r+0x9a>
 800de1e:	4621      	mov	r1, r4
 800de20:	4628      	mov	r0, r5
 800de22:	f000 f8fb 	bl	800e01c <__swsetup_r>
 800de26:	b380      	cbz	r0, 800de8a <_puts_r+0x9a>
 800de28:	f04f 35ff 	mov.w	r5, #4294967295
 800de2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800de2e:	07da      	lsls	r2, r3, #31
 800de30:	d405      	bmi.n	800de3e <_puts_r+0x4e>
 800de32:	89a3      	ldrh	r3, [r4, #12]
 800de34:	059b      	lsls	r3, r3, #22
 800de36:	d402      	bmi.n	800de3e <_puts_r+0x4e>
 800de38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800de3a:	f000 f9e3 	bl	800e204 <__retarget_lock_release_recursive>
 800de3e:	4628      	mov	r0, r5
 800de40:	bd70      	pop	{r4, r5, r6, pc}
 800de42:	2b00      	cmp	r3, #0
 800de44:	da04      	bge.n	800de50 <_puts_r+0x60>
 800de46:	69a2      	ldr	r2, [r4, #24]
 800de48:	429a      	cmp	r2, r3
 800de4a:	dc17      	bgt.n	800de7c <_puts_r+0x8c>
 800de4c:	290a      	cmp	r1, #10
 800de4e:	d015      	beq.n	800de7c <_puts_r+0x8c>
 800de50:	6823      	ldr	r3, [r4, #0]
 800de52:	1c5a      	adds	r2, r3, #1
 800de54:	6022      	str	r2, [r4, #0]
 800de56:	7019      	strb	r1, [r3, #0]
 800de58:	68a3      	ldr	r3, [r4, #8]
 800de5a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800de5e:	3b01      	subs	r3, #1
 800de60:	60a3      	str	r3, [r4, #8]
 800de62:	2900      	cmp	r1, #0
 800de64:	d1ed      	bne.n	800de42 <_puts_r+0x52>
 800de66:	2b00      	cmp	r3, #0
 800de68:	da11      	bge.n	800de8e <_puts_r+0x9e>
 800de6a:	4622      	mov	r2, r4
 800de6c:	210a      	movs	r1, #10
 800de6e:	4628      	mov	r0, r5
 800de70:	f000 f895 	bl	800df9e <__swbuf_r>
 800de74:	3001      	adds	r0, #1
 800de76:	d0d7      	beq.n	800de28 <_puts_r+0x38>
 800de78:	250a      	movs	r5, #10
 800de7a:	e7d7      	b.n	800de2c <_puts_r+0x3c>
 800de7c:	4622      	mov	r2, r4
 800de7e:	4628      	mov	r0, r5
 800de80:	f000 f88d 	bl	800df9e <__swbuf_r>
 800de84:	3001      	adds	r0, #1
 800de86:	d1e7      	bne.n	800de58 <_puts_r+0x68>
 800de88:	e7ce      	b.n	800de28 <_puts_r+0x38>
 800de8a:	3e01      	subs	r6, #1
 800de8c:	e7e4      	b.n	800de58 <_puts_r+0x68>
 800de8e:	6823      	ldr	r3, [r4, #0]
 800de90:	1c5a      	adds	r2, r3, #1
 800de92:	6022      	str	r2, [r4, #0]
 800de94:	220a      	movs	r2, #10
 800de96:	701a      	strb	r2, [r3, #0]
 800de98:	e7ee      	b.n	800de78 <_puts_r+0x88>
	...

0800de9c <puts>:
 800de9c:	4b02      	ldr	r3, [pc, #8]	@ (800dea8 <puts+0xc>)
 800de9e:	4601      	mov	r1, r0
 800dea0:	6818      	ldr	r0, [r3, #0]
 800dea2:	f7ff bfa5 	b.w	800ddf0 <_puts_r>
 800dea6:	bf00      	nop
 800dea8:	20000154 	.word	0x20000154

0800deac <sniprintf>:
 800deac:	b40c      	push	{r2, r3}
 800deae:	b530      	push	{r4, r5, lr}
 800deb0:	4b18      	ldr	r3, [pc, #96]	@ (800df14 <sniprintf+0x68>)
 800deb2:	1e0c      	subs	r4, r1, #0
 800deb4:	681d      	ldr	r5, [r3, #0]
 800deb6:	b09d      	sub	sp, #116	@ 0x74
 800deb8:	da08      	bge.n	800decc <sniprintf+0x20>
 800deba:	238b      	movs	r3, #139	@ 0x8b
 800debc:	602b      	str	r3, [r5, #0]
 800debe:	f04f 30ff 	mov.w	r0, #4294967295
 800dec2:	b01d      	add	sp, #116	@ 0x74
 800dec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dec8:	b002      	add	sp, #8
 800deca:	4770      	bx	lr
 800decc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800ded0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800ded4:	f04f 0300 	mov.w	r3, #0
 800ded8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800deda:	bf14      	ite	ne
 800dedc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800dee0:	4623      	moveq	r3, r4
 800dee2:	9304      	str	r3, [sp, #16]
 800dee4:	9307      	str	r3, [sp, #28]
 800dee6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800deea:	9002      	str	r0, [sp, #8]
 800deec:	9006      	str	r0, [sp, #24]
 800deee:	f8ad 3016 	strh.w	r3, [sp, #22]
 800def2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800def4:	ab21      	add	r3, sp, #132	@ 0x84
 800def6:	a902      	add	r1, sp, #8
 800def8:	4628      	mov	r0, r5
 800defa:	9301      	str	r3, [sp, #4]
 800defc:	f000 fa38 	bl	800e370 <_svfiprintf_r>
 800df00:	1c43      	adds	r3, r0, #1
 800df02:	bfbc      	itt	lt
 800df04:	238b      	movlt	r3, #139	@ 0x8b
 800df06:	602b      	strlt	r3, [r5, #0]
 800df08:	2c00      	cmp	r4, #0
 800df0a:	d0da      	beq.n	800dec2 <sniprintf+0x16>
 800df0c:	9b02      	ldr	r3, [sp, #8]
 800df0e:	2200      	movs	r2, #0
 800df10:	701a      	strb	r2, [r3, #0]
 800df12:	e7d6      	b.n	800dec2 <sniprintf+0x16>
 800df14:	20000154 	.word	0x20000154

0800df18 <__sread>:
 800df18:	b510      	push	{r4, lr}
 800df1a:	460c      	mov	r4, r1
 800df1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df20:	f000 f910 	bl	800e144 <_read_r>
 800df24:	2800      	cmp	r0, #0
 800df26:	bfab      	itete	ge
 800df28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800df2a:	89a3      	ldrhlt	r3, [r4, #12]
 800df2c:	181b      	addge	r3, r3, r0
 800df2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800df32:	bfac      	ite	ge
 800df34:	6563      	strge	r3, [r4, #84]	@ 0x54
 800df36:	81a3      	strhlt	r3, [r4, #12]
 800df38:	bd10      	pop	{r4, pc}

0800df3a <__swrite>:
 800df3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800df3e:	461f      	mov	r7, r3
 800df40:	898b      	ldrh	r3, [r1, #12]
 800df42:	05db      	lsls	r3, r3, #23
 800df44:	4605      	mov	r5, r0
 800df46:	460c      	mov	r4, r1
 800df48:	4616      	mov	r6, r2
 800df4a:	d505      	bpl.n	800df58 <__swrite+0x1e>
 800df4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df50:	2302      	movs	r3, #2
 800df52:	2200      	movs	r2, #0
 800df54:	f000 f8e4 	bl	800e120 <_lseek_r>
 800df58:	89a3      	ldrh	r3, [r4, #12]
 800df5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800df5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800df62:	81a3      	strh	r3, [r4, #12]
 800df64:	4632      	mov	r2, r6
 800df66:	463b      	mov	r3, r7
 800df68:	4628      	mov	r0, r5
 800df6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800df6e:	f000 b90b 	b.w	800e188 <_write_r>

0800df72 <__sseek>:
 800df72:	b510      	push	{r4, lr}
 800df74:	460c      	mov	r4, r1
 800df76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df7a:	f000 f8d1 	bl	800e120 <_lseek_r>
 800df7e:	1c43      	adds	r3, r0, #1
 800df80:	89a3      	ldrh	r3, [r4, #12]
 800df82:	bf15      	itete	ne
 800df84:	6560      	strne	r0, [r4, #84]	@ 0x54
 800df86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800df8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800df8e:	81a3      	strheq	r3, [r4, #12]
 800df90:	bf18      	it	ne
 800df92:	81a3      	strhne	r3, [r4, #12]
 800df94:	bd10      	pop	{r4, pc}

0800df96 <__sclose>:
 800df96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800df9a:	f000 b8b1 	b.w	800e100 <_close_r>

0800df9e <__swbuf_r>:
 800df9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfa0:	460e      	mov	r6, r1
 800dfa2:	4614      	mov	r4, r2
 800dfa4:	4605      	mov	r5, r0
 800dfa6:	b118      	cbz	r0, 800dfb0 <__swbuf_r+0x12>
 800dfa8:	6a03      	ldr	r3, [r0, #32]
 800dfaa:	b90b      	cbnz	r3, 800dfb0 <__swbuf_r+0x12>
 800dfac:	f7ff fed8 	bl	800dd60 <__sinit>
 800dfb0:	69a3      	ldr	r3, [r4, #24]
 800dfb2:	60a3      	str	r3, [r4, #8]
 800dfb4:	89a3      	ldrh	r3, [r4, #12]
 800dfb6:	071a      	lsls	r2, r3, #28
 800dfb8:	d501      	bpl.n	800dfbe <__swbuf_r+0x20>
 800dfba:	6923      	ldr	r3, [r4, #16]
 800dfbc:	b943      	cbnz	r3, 800dfd0 <__swbuf_r+0x32>
 800dfbe:	4621      	mov	r1, r4
 800dfc0:	4628      	mov	r0, r5
 800dfc2:	f000 f82b 	bl	800e01c <__swsetup_r>
 800dfc6:	b118      	cbz	r0, 800dfd0 <__swbuf_r+0x32>
 800dfc8:	f04f 37ff 	mov.w	r7, #4294967295
 800dfcc:	4638      	mov	r0, r7
 800dfce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dfd0:	6823      	ldr	r3, [r4, #0]
 800dfd2:	6922      	ldr	r2, [r4, #16]
 800dfd4:	1a98      	subs	r0, r3, r2
 800dfd6:	6963      	ldr	r3, [r4, #20]
 800dfd8:	b2f6      	uxtb	r6, r6
 800dfda:	4283      	cmp	r3, r0
 800dfdc:	4637      	mov	r7, r6
 800dfde:	dc05      	bgt.n	800dfec <__swbuf_r+0x4e>
 800dfe0:	4621      	mov	r1, r4
 800dfe2:	4628      	mov	r0, r5
 800dfe4:	f000 fe12 	bl	800ec0c <_fflush_r>
 800dfe8:	2800      	cmp	r0, #0
 800dfea:	d1ed      	bne.n	800dfc8 <__swbuf_r+0x2a>
 800dfec:	68a3      	ldr	r3, [r4, #8]
 800dfee:	3b01      	subs	r3, #1
 800dff0:	60a3      	str	r3, [r4, #8]
 800dff2:	6823      	ldr	r3, [r4, #0]
 800dff4:	1c5a      	adds	r2, r3, #1
 800dff6:	6022      	str	r2, [r4, #0]
 800dff8:	701e      	strb	r6, [r3, #0]
 800dffa:	6962      	ldr	r2, [r4, #20]
 800dffc:	1c43      	adds	r3, r0, #1
 800dffe:	429a      	cmp	r2, r3
 800e000:	d004      	beq.n	800e00c <__swbuf_r+0x6e>
 800e002:	89a3      	ldrh	r3, [r4, #12]
 800e004:	07db      	lsls	r3, r3, #31
 800e006:	d5e1      	bpl.n	800dfcc <__swbuf_r+0x2e>
 800e008:	2e0a      	cmp	r6, #10
 800e00a:	d1df      	bne.n	800dfcc <__swbuf_r+0x2e>
 800e00c:	4621      	mov	r1, r4
 800e00e:	4628      	mov	r0, r5
 800e010:	f000 fdfc 	bl	800ec0c <_fflush_r>
 800e014:	2800      	cmp	r0, #0
 800e016:	d0d9      	beq.n	800dfcc <__swbuf_r+0x2e>
 800e018:	e7d6      	b.n	800dfc8 <__swbuf_r+0x2a>
	...

0800e01c <__swsetup_r>:
 800e01c:	b538      	push	{r3, r4, r5, lr}
 800e01e:	4b29      	ldr	r3, [pc, #164]	@ (800e0c4 <__swsetup_r+0xa8>)
 800e020:	4605      	mov	r5, r0
 800e022:	6818      	ldr	r0, [r3, #0]
 800e024:	460c      	mov	r4, r1
 800e026:	b118      	cbz	r0, 800e030 <__swsetup_r+0x14>
 800e028:	6a03      	ldr	r3, [r0, #32]
 800e02a:	b90b      	cbnz	r3, 800e030 <__swsetup_r+0x14>
 800e02c:	f7ff fe98 	bl	800dd60 <__sinit>
 800e030:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e034:	0719      	lsls	r1, r3, #28
 800e036:	d422      	bmi.n	800e07e <__swsetup_r+0x62>
 800e038:	06da      	lsls	r2, r3, #27
 800e03a:	d407      	bmi.n	800e04c <__swsetup_r+0x30>
 800e03c:	2209      	movs	r2, #9
 800e03e:	602a      	str	r2, [r5, #0]
 800e040:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e044:	81a3      	strh	r3, [r4, #12]
 800e046:	f04f 30ff 	mov.w	r0, #4294967295
 800e04a:	e033      	b.n	800e0b4 <__swsetup_r+0x98>
 800e04c:	0758      	lsls	r0, r3, #29
 800e04e:	d512      	bpl.n	800e076 <__swsetup_r+0x5a>
 800e050:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e052:	b141      	cbz	r1, 800e066 <__swsetup_r+0x4a>
 800e054:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e058:	4299      	cmp	r1, r3
 800e05a:	d002      	beq.n	800e062 <__swsetup_r+0x46>
 800e05c:	4628      	mov	r0, r5
 800e05e:	f000 f8e1 	bl	800e224 <_free_r>
 800e062:	2300      	movs	r3, #0
 800e064:	6363      	str	r3, [r4, #52]	@ 0x34
 800e066:	89a3      	ldrh	r3, [r4, #12]
 800e068:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e06c:	81a3      	strh	r3, [r4, #12]
 800e06e:	2300      	movs	r3, #0
 800e070:	6063      	str	r3, [r4, #4]
 800e072:	6923      	ldr	r3, [r4, #16]
 800e074:	6023      	str	r3, [r4, #0]
 800e076:	89a3      	ldrh	r3, [r4, #12]
 800e078:	f043 0308 	orr.w	r3, r3, #8
 800e07c:	81a3      	strh	r3, [r4, #12]
 800e07e:	6923      	ldr	r3, [r4, #16]
 800e080:	b94b      	cbnz	r3, 800e096 <__swsetup_r+0x7a>
 800e082:	89a3      	ldrh	r3, [r4, #12]
 800e084:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e088:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e08c:	d003      	beq.n	800e096 <__swsetup_r+0x7a>
 800e08e:	4621      	mov	r1, r4
 800e090:	4628      	mov	r0, r5
 800e092:	f000 fe09 	bl	800eca8 <__smakebuf_r>
 800e096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e09a:	f013 0201 	ands.w	r2, r3, #1
 800e09e:	d00a      	beq.n	800e0b6 <__swsetup_r+0x9a>
 800e0a0:	2200      	movs	r2, #0
 800e0a2:	60a2      	str	r2, [r4, #8]
 800e0a4:	6962      	ldr	r2, [r4, #20]
 800e0a6:	4252      	negs	r2, r2
 800e0a8:	61a2      	str	r2, [r4, #24]
 800e0aa:	6922      	ldr	r2, [r4, #16]
 800e0ac:	b942      	cbnz	r2, 800e0c0 <__swsetup_r+0xa4>
 800e0ae:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e0b2:	d1c5      	bne.n	800e040 <__swsetup_r+0x24>
 800e0b4:	bd38      	pop	{r3, r4, r5, pc}
 800e0b6:	0799      	lsls	r1, r3, #30
 800e0b8:	bf58      	it	pl
 800e0ba:	6962      	ldrpl	r2, [r4, #20]
 800e0bc:	60a2      	str	r2, [r4, #8]
 800e0be:	e7f4      	b.n	800e0aa <__swsetup_r+0x8e>
 800e0c0:	2000      	movs	r0, #0
 800e0c2:	e7f7      	b.n	800e0b4 <__swsetup_r+0x98>
 800e0c4:	20000154 	.word	0x20000154

0800e0c8 <memset>:
 800e0c8:	4402      	add	r2, r0
 800e0ca:	4603      	mov	r3, r0
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	d100      	bne.n	800e0d2 <memset+0xa>
 800e0d0:	4770      	bx	lr
 800e0d2:	f803 1b01 	strb.w	r1, [r3], #1
 800e0d6:	e7f9      	b.n	800e0cc <memset+0x4>

0800e0d8 <strncpy>:
 800e0d8:	b510      	push	{r4, lr}
 800e0da:	3901      	subs	r1, #1
 800e0dc:	4603      	mov	r3, r0
 800e0de:	b132      	cbz	r2, 800e0ee <strncpy+0x16>
 800e0e0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800e0e4:	f803 4b01 	strb.w	r4, [r3], #1
 800e0e8:	3a01      	subs	r2, #1
 800e0ea:	2c00      	cmp	r4, #0
 800e0ec:	d1f7      	bne.n	800e0de <strncpy+0x6>
 800e0ee:	441a      	add	r2, r3
 800e0f0:	2100      	movs	r1, #0
 800e0f2:	4293      	cmp	r3, r2
 800e0f4:	d100      	bne.n	800e0f8 <strncpy+0x20>
 800e0f6:	bd10      	pop	{r4, pc}
 800e0f8:	f803 1b01 	strb.w	r1, [r3], #1
 800e0fc:	e7f9      	b.n	800e0f2 <strncpy+0x1a>
	...

0800e100 <_close_r>:
 800e100:	b538      	push	{r3, r4, r5, lr}
 800e102:	4d06      	ldr	r5, [pc, #24]	@ (800e11c <_close_r+0x1c>)
 800e104:	2300      	movs	r3, #0
 800e106:	4604      	mov	r4, r0
 800e108:	4608      	mov	r0, r1
 800e10a:	602b      	str	r3, [r5, #0]
 800e10c:	f7f2 fc46 	bl	800099c <_close>
 800e110:	1c43      	adds	r3, r0, #1
 800e112:	d102      	bne.n	800e11a <_close_r+0x1a>
 800e114:	682b      	ldr	r3, [r5, #0]
 800e116:	b103      	cbz	r3, 800e11a <_close_r+0x1a>
 800e118:	6023      	str	r3, [r4, #0]
 800e11a:	bd38      	pop	{r3, r4, r5, pc}
 800e11c:	20000d4c 	.word	0x20000d4c

0800e120 <_lseek_r>:
 800e120:	b538      	push	{r3, r4, r5, lr}
 800e122:	4d07      	ldr	r5, [pc, #28]	@ (800e140 <_lseek_r+0x20>)
 800e124:	4604      	mov	r4, r0
 800e126:	4608      	mov	r0, r1
 800e128:	4611      	mov	r1, r2
 800e12a:	2200      	movs	r2, #0
 800e12c:	602a      	str	r2, [r5, #0]
 800e12e:	461a      	mov	r2, r3
 800e130:	f7f2 fc5b 	bl	80009ea <_lseek>
 800e134:	1c43      	adds	r3, r0, #1
 800e136:	d102      	bne.n	800e13e <_lseek_r+0x1e>
 800e138:	682b      	ldr	r3, [r5, #0]
 800e13a:	b103      	cbz	r3, 800e13e <_lseek_r+0x1e>
 800e13c:	6023      	str	r3, [r4, #0]
 800e13e:	bd38      	pop	{r3, r4, r5, pc}
 800e140:	20000d4c 	.word	0x20000d4c

0800e144 <_read_r>:
 800e144:	b538      	push	{r3, r4, r5, lr}
 800e146:	4d07      	ldr	r5, [pc, #28]	@ (800e164 <_read_r+0x20>)
 800e148:	4604      	mov	r4, r0
 800e14a:	4608      	mov	r0, r1
 800e14c:	4611      	mov	r1, r2
 800e14e:	2200      	movs	r2, #0
 800e150:	602a      	str	r2, [r5, #0]
 800e152:	461a      	mov	r2, r3
 800e154:	f7f2 fbd6 	bl	8000904 <_read>
 800e158:	1c43      	adds	r3, r0, #1
 800e15a:	d102      	bne.n	800e162 <_read_r+0x1e>
 800e15c:	682b      	ldr	r3, [r5, #0]
 800e15e:	b103      	cbz	r3, 800e162 <_read_r+0x1e>
 800e160:	6023      	str	r3, [r4, #0]
 800e162:	bd38      	pop	{r3, r4, r5, pc}
 800e164:	20000d4c 	.word	0x20000d4c

0800e168 <_sbrk_r>:
 800e168:	b538      	push	{r3, r4, r5, lr}
 800e16a:	4d06      	ldr	r5, [pc, #24]	@ (800e184 <_sbrk_r+0x1c>)
 800e16c:	2300      	movs	r3, #0
 800e16e:	4604      	mov	r4, r0
 800e170:	4608      	mov	r0, r1
 800e172:	602b      	str	r3, [r5, #0]
 800e174:	f7f2 fc46 	bl	8000a04 <_sbrk>
 800e178:	1c43      	adds	r3, r0, #1
 800e17a:	d102      	bne.n	800e182 <_sbrk_r+0x1a>
 800e17c:	682b      	ldr	r3, [r5, #0]
 800e17e:	b103      	cbz	r3, 800e182 <_sbrk_r+0x1a>
 800e180:	6023      	str	r3, [r4, #0]
 800e182:	bd38      	pop	{r3, r4, r5, pc}
 800e184:	20000d4c 	.word	0x20000d4c

0800e188 <_write_r>:
 800e188:	b538      	push	{r3, r4, r5, lr}
 800e18a:	4d07      	ldr	r5, [pc, #28]	@ (800e1a8 <_write_r+0x20>)
 800e18c:	4604      	mov	r4, r0
 800e18e:	4608      	mov	r0, r1
 800e190:	4611      	mov	r1, r2
 800e192:	2200      	movs	r2, #0
 800e194:	602a      	str	r2, [r5, #0]
 800e196:	461a      	mov	r2, r3
 800e198:	f7f2 fbe4 	bl	8000964 <_write>
 800e19c:	1c43      	adds	r3, r0, #1
 800e19e:	d102      	bne.n	800e1a6 <_write_r+0x1e>
 800e1a0:	682b      	ldr	r3, [r5, #0]
 800e1a2:	b103      	cbz	r3, 800e1a6 <_write_r+0x1e>
 800e1a4:	6023      	str	r3, [r4, #0]
 800e1a6:	bd38      	pop	{r3, r4, r5, pc}
 800e1a8:	20000d4c 	.word	0x20000d4c

0800e1ac <__errno>:
 800e1ac:	4b01      	ldr	r3, [pc, #4]	@ (800e1b4 <__errno+0x8>)
 800e1ae:	6818      	ldr	r0, [r3, #0]
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	20000154 	.word	0x20000154

0800e1b8 <__libc_init_array>:
 800e1b8:	b570      	push	{r4, r5, r6, lr}
 800e1ba:	4d0d      	ldr	r5, [pc, #52]	@ (800e1f0 <__libc_init_array+0x38>)
 800e1bc:	4c0d      	ldr	r4, [pc, #52]	@ (800e1f4 <__libc_init_array+0x3c>)
 800e1be:	1b64      	subs	r4, r4, r5
 800e1c0:	10a4      	asrs	r4, r4, #2
 800e1c2:	2600      	movs	r6, #0
 800e1c4:	42a6      	cmp	r6, r4
 800e1c6:	d109      	bne.n	800e1dc <__libc_init_array+0x24>
 800e1c8:	4d0b      	ldr	r5, [pc, #44]	@ (800e1f8 <__libc_init_array+0x40>)
 800e1ca:	4c0c      	ldr	r4, [pc, #48]	@ (800e1fc <__libc_init_array+0x44>)
 800e1cc:	f000 fe1a 	bl	800ee04 <_init>
 800e1d0:	1b64      	subs	r4, r4, r5
 800e1d2:	10a4      	asrs	r4, r4, #2
 800e1d4:	2600      	movs	r6, #0
 800e1d6:	42a6      	cmp	r6, r4
 800e1d8:	d105      	bne.n	800e1e6 <__libc_init_array+0x2e>
 800e1da:	bd70      	pop	{r4, r5, r6, pc}
 800e1dc:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1e0:	4798      	blx	r3
 800e1e2:	3601      	adds	r6, #1
 800e1e4:	e7ee      	b.n	800e1c4 <__libc_init_array+0xc>
 800e1e6:	f855 3b04 	ldr.w	r3, [r5], #4
 800e1ea:	4798      	blx	r3
 800e1ec:	3601      	adds	r6, #1
 800e1ee:	e7f2      	b.n	800e1d6 <__libc_init_array+0x1e>
 800e1f0:	0800f0e4 	.word	0x0800f0e4
 800e1f4:	0800f0e4 	.word	0x0800f0e4
 800e1f8:	0800f0e4 	.word	0x0800f0e4
 800e1fc:	0800f0e8 	.word	0x0800f0e8

0800e200 <__retarget_lock_init_recursive>:
 800e200:	4770      	bx	lr

0800e202 <__retarget_lock_acquire_recursive>:
 800e202:	4770      	bx	lr

0800e204 <__retarget_lock_release_recursive>:
 800e204:	4770      	bx	lr

0800e206 <memcpy>:
 800e206:	440a      	add	r2, r1
 800e208:	4291      	cmp	r1, r2
 800e20a:	f100 33ff 	add.w	r3, r0, #4294967295
 800e20e:	d100      	bne.n	800e212 <memcpy+0xc>
 800e210:	4770      	bx	lr
 800e212:	b510      	push	{r4, lr}
 800e214:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e218:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e21c:	4291      	cmp	r1, r2
 800e21e:	d1f9      	bne.n	800e214 <memcpy+0xe>
 800e220:	bd10      	pop	{r4, pc}
	...

0800e224 <_free_r>:
 800e224:	b538      	push	{r3, r4, r5, lr}
 800e226:	4605      	mov	r5, r0
 800e228:	2900      	cmp	r1, #0
 800e22a:	d041      	beq.n	800e2b0 <_free_r+0x8c>
 800e22c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e230:	1f0c      	subs	r4, r1, #4
 800e232:	2b00      	cmp	r3, #0
 800e234:	bfb8      	it	lt
 800e236:	18e4      	addlt	r4, r4, r3
 800e238:	f7ff fcfa 	bl	800dc30 <__malloc_lock>
 800e23c:	4a1d      	ldr	r2, [pc, #116]	@ (800e2b4 <_free_r+0x90>)
 800e23e:	6813      	ldr	r3, [r2, #0]
 800e240:	b933      	cbnz	r3, 800e250 <_free_r+0x2c>
 800e242:	6063      	str	r3, [r4, #4]
 800e244:	6014      	str	r4, [r2, #0]
 800e246:	4628      	mov	r0, r5
 800e248:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e24c:	f7ff bcf6 	b.w	800dc3c <__malloc_unlock>
 800e250:	42a3      	cmp	r3, r4
 800e252:	d908      	bls.n	800e266 <_free_r+0x42>
 800e254:	6820      	ldr	r0, [r4, #0]
 800e256:	1821      	adds	r1, r4, r0
 800e258:	428b      	cmp	r3, r1
 800e25a:	bf01      	itttt	eq
 800e25c:	6819      	ldreq	r1, [r3, #0]
 800e25e:	685b      	ldreq	r3, [r3, #4]
 800e260:	1809      	addeq	r1, r1, r0
 800e262:	6021      	streq	r1, [r4, #0]
 800e264:	e7ed      	b.n	800e242 <_free_r+0x1e>
 800e266:	461a      	mov	r2, r3
 800e268:	685b      	ldr	r3, [r3, #4]
 800e26a:	b10b      	cbz	r3, 800e270 <_free_r+0x4c>
 800e26c:	42a3      	cmp	r3, r4
 800e26e:	d9fa      	bls.n	800e266 <_free_r+0x42>
 800e270:	6811      	ldr	r1, [r2, #0]
 800e272:	1850      	adds	r0, r2, r1
 800e274:	42a0      	cmp	r0, r4
 800e276:	d10b      	bne.n	800e290 <_free_r+0x6c>
 800e278:	6820      	ldr	r0, [r4, #0]
 800e27a:	4401      	add	r1, r0
 800e27c:	1850      	adds	r0, r2, r1
 800e27e:	4283      	cmp	r3, r0
 800e280:	6011      	str	r1, [r2, #0]
 800e282:	d1e0      	bne.n	800e246 <_free_r+0x22>
 800e284:	6818      	ldr	r0, [r3, #0]
 800e286:	685b      	ldr	r3, [r3, #4]
 800e288:	6053      	str	r3, [r2, #4]
 800e28a:	4408      	add	r0, r1
 800e28c:	6010      	str	r0, [r2, #0]
 800e28e:	e7da      	b.n	800e246 <_free_r+0x22>
 800e290:	d902      	bls.n	800e298 <_free_r+0x74>
 800e292:	230c      	movs	r3, #12
 800e294:	602b      	str	r3, [r5, #0]
 800e296:	e7d6      	b.n	800e246 <_free_r+0x22>
 800e298:	6820      	ldr	r0, [r4, #0]
 800e29a:	1821      	adds	r1, r4, r0
 800e29c:	428b      	cmp	r3, r1
 800e29e:	bf04      	itt	eq
 800e2a0:	6819      	ldreq	r1, [r3, #0]
 800e2a2:	685b      	ldreq	r3, [r3, #4]
 800e2a4:	6063      	str	r3, [r4, #4]
 800e2a6:	bf04      	itt	eq
 800e2a8:	1809      	addeq	r1, r1, r0
 800e2aa:	6021      	streq	r1, [r4, #0]
 800e2ac:	6054      	str	r4, [r2, #4]
 800e2ae:	e7ca      	b.n	800e246 <_free_r+0x22>
 800e2b0:	bd38      	pop	{r3, r4, r5, pc}
 800e2b2:	bf00      	nop
 800e2b4:	20000c0c 	.word	0x20000c0c

0800e2b8 <__ssputs_r>:
 800e2b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e2bc:	688e      	ldr	r6, [r1, #8]
 800e2be:	461f      	mov	r7, r3
 800e2c0:	42be      	cmp	r6, r7
 800e2c2:	680b      	ldr	r3, [r1, #0]
 800e2c4:	4682      	mov	sl, r0
 800e2c6:	460c      	mov	r4, r1
 800e2c8:	4690      	mov	r8, r2
 800e2ca:	d82d      	bhi.n	800e328 <__ssputs_r+0x70>
 800e2cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e2d4:	d026      	beq.n	800e324 <__ssputs_r+0x6c>
 800e2d6:	6965      	ldr	r5, [r4, #20]
 800e2d8:	6909      	ldr	r1, [r1, #16]
 800e2da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2de:	eba3 0901 	sub.w	r9, r3, r1
 800e2e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e2e6:	1c7b      	adds	r3, r7, #1
 800e2e8:	444b      	add	r3, r9
 800e2ea:	106d      	asrs	r5, r5, #1
 800e2ec:	429d      	cmp	r5, r3
 800e2ee:	bf38      	it	cc
 800e2f0:	461d      	movcc	r5, r3
 800e2f2:	0553      	lsls	r3, r2, #21
 800e2f4:	d527      	bpl.n	800e346 <__ssputs_r+0x8e>
 800e2f6:	4629      	mov	r1, r5
 800e2f8:	f7ff fc1a 	bl	800db30 <_malloc_r>
 800e2fc:	4606      	mov	r6, r0
 800e2fe:	b360      	cbz	r0, 800e35a <__ssputs_r+0xa2>
 800e300:	6921      	ldr	r1, [r4, #16]
 800e302:	464a      	mov	r2, r9
 800e304:	f7ff ff7f 	bl	800e206 <memcpy>
 800e308:	89a3      	ldrh	r3, [r4, #12]
 800e30a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e30e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e312:	81a3      	strh	r3, [r4, #12]
 800e314:	6126      	str	r6, [r4, #16]
 800e316:	6165      	str	r5, [r4, #20]
 800e318:	444e      	add	r6, r9
 800e31a:	eba5 0509 	sub.w	r5, r5, r9
 800e31e:	6026      	str	r6, [r4, #0]
 800e320:	60a5      	str	r5, [r4, #8]
 800e322:	463e      	mov	r6, r7
 800e324:	42be      	cmp	r6, r7
 800e326:	d900      	bls.n	800e32a <__ssputs_r+0x72>
 800e328:	463e      	mov	r6, r7
 800e32a:	6820      	ldr	r0, [r4, #0]
 800e32c:	4632      	mov	r2, r6
 800e32e:	4641      	mov	r1, r8
 800e330:	f000 fcf6 	bl	800ed20 <memmove>
 800e334:	68a3      	ldr	r3, [r4, #8]
 800e336:	1b9b      	subs	r3, r3, r6
 800e338:	60a3      	str	r3, [r4, #8]
 800e33a:	6823      	ldr	r3, [r4, #0]
 800e33c:	4433      	add	r3, r6
 800e33e:	6023      	str	r3, [r4, #0]
 800e340:	2000      	movs	r0, #0
 800e342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e346:	462a      	mov	r2, r5
 800e348:	f000 fd26 	bl	800ed98 <_realloc_r>
 800e34c:	4606      	mov	r6, r0
 800e34e:	2800      	cmp	r0, #0
 800e350:	d1e0      	bne.n	800e314 <__ssputs_r+0x5c>
 800e352:	6921      	ldr	r1, [r4, #16]
 800e354:	4650      	mov	r0, sl
 800e356:	f7ff ff65 	bl	800e224 <_free_r>
 800e35a:	230c      	movs	r3, #12
 800e35c:	f8ca 3000 	str.w	r3, [sl]
 800e360:	89a3      	ldrh	r3, [r4, #12]
 800e362:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e366:	81a3      	strh	r3, [r4, #12]
 800e368:	f04f 30ff 	mov.w	r0, #4294967295
 800e36c:	e7e9      	b.n	800e342 <__ssputs_r+0x8a>
	...

0800e370 <_svfiprintf_r>:
 800e370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e374:	4698      	mov	r8, r3
 800e376:	898b      	ldrh	r3, [r1, #12]
 800e378:	061b      	lsls	r3, r3, #24
 800e37a:	b09d      	sub	sp, #116	@ 0x74
 800e37c:	4607      	mov	r7, r0
 800e37e:	460d      	mov	r5, r1
 800e380:	4614      	mov	r4, r2
 800e382:	d510      	bpl.n	800e3a6 <_svfiprintf_r+0x36>
 800e384:	690b      	ldr	r3, [r1, #16]
 800e386:	b973      	cbnz	r3, 800e3a6 <_svfiprintf_r+0x36>
 800e388:	2140      	movs	r1, #64	@ 0x40
 800e38a:	f7ff fbd1 	bl	800db30 <_malloc_r>
 800e38e:	6028      	str	r0, [r5, #0]
 800e390:	6128      	str	r0, [r5, #16]
 800e392:	b930      	cbnz	r0, 800e3a2 <_svfiprintf_r+0x32>
 800e394:	230c      	movs	r3, #12
 800e396:	603b      	str	r3, [r7, #0]
 800e398:	f04f 30ff 	mov.w	r0, #4294967295
 800e39c:	b01d      	add	sp, #116	@ 0x74
 800e39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3a2:	2340      	movs	r3, #64	@ 0x40
 800e3a4:	616b      	str	r3, [r5, #20]
 800e3a6:	2300      	movs	r3, #0
 800e3a8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e3aa:	2320      	movs	r3, #32
 800e3ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e3b0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e3b4:	2330      	movs	r3, #48	@ 0x30
 800e3b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e554 <_svfiprintf_r+0x1e4>
 800e3ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e3be:	f04f 0901 	mov.w	r9, #1
 800e3c2:	4623      	mov	r3, r4
 800e3c4:	469a      	mov	sl, r3
 800e3c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e3ca:	b10a      	cbz	r2, 800e3d0 <_svfiprintf_r+0x60>
 800e3cc:	2a25      	cmp	r2, #37	@ 0x25
 800e3ce:	d1f9      	bne.n	800e3c4 <_svfiprintf_r+0x54>
 800e3d0:	ebba 0b04 	subs.w	fp, sl, r4
 800e3d4:	d00b      	beq.n	800e3ee <_svfiprintf_r+0x7e>
 800e3d6:	465b      	mov	r3, fp
 800e3d8:	4622      	mov	r2, r4
 800e3da:	4629      	mov	r1, r5
 800e3dc:	4638      	mov	r0, r7
 800e3de:	f7ff ff6b 	bl	800e2b8 <__ssputs_r>
 800e3e2:	3001      	adds	r0, #1
 800e3e4:	f000 80a7 	beq.w	800e536 <_svfiprintf_r+0x1c6>
 800e3e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e3ea:	445a      	add	r2, fp
 800e3ec:	9209      	str	r2, [sp, #36]	@ 0x24
 800e3ee:	f89a 3000 	ldrb.w	r3, [sl]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	f000 809f 	beq.w	800e536 <_svfiprintf_r+0x1c6>
 800e3f8:	2300      	movs	r3, #0
 800e3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800e3fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e402:	f10a 0a01 	add.w	sl, sl, #1
 800e406:	9304      	str	r3, [sp, #16]
 800e408:	9307      	str	r3, [sp, #28]
 800e40a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e40e:	931a      	str	r3, [sp, #104]	@ 0x68
 800e410:	4654      	mov	r4, sl
 800e412:	2205      	movs	r2, #5
 800e414:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e418:	484e      	ldr	r0, [pc, #312]	@ (800e554 <_svfiprintf_r+0x1e4>)
 800e41a:	f7f1 fef1 	bl	8000200 <memchr>
 800e41e:	9a04      	ldr	r2, [sp, #16]
 800e420:	b9d8      	cbnz	r0, 800e45a <_svfiprintf_r+0xea>
 800e422:	06d0      	lsls	r0, r2, #27
 800e424:	bf44      	itt	mi
 800e426:	2320      	movmi	r3, #32
 800e428:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e42c:	0711      	lsls	r1, r2, #28
 800e42e:	bf44      	itt	mi
 800e430:	232b      	movmi	r3, #43	@ 0x2b
 800e432:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e436:	f89a 3000 	ldrb.w	r3, [sl]
 800e43a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e43c:	d015      	beq.n	800e46a <_svfiprintf_r+0xfa>
 800e43e:	9a07      	ldr	r2, [sp, #28]
 800e440:	4654      	mov	r4, sl
 800e442:	2000      	movs	r0, #0
 800e444:	f04f 0c0a 	mov.w	ip, #10
 800e448:	4621      	mov	r1, r4
 800e44a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e44e:	3b30      	subs	r3, #48	@ 0x30
 800e450:	2b09      	cmp	r3, #9
 800e452:	d94b      	bls.n	800e4ec <_svfiprintf_r+0x17c>
 800e454:	b1b0      	cbz	r0, 800e484 <_svfiprintf_r+0x114>
 800e456:	9207      	str	r2, [sp, #28]
 800e458:	e014      	b.n	800e484 <_svfiprintf_r+0x114>
 800e45a:	eba0 0308 	sub.w	r3, r0, r8
 800e45e:	fa09 f303 	lsl.w	r3, r9, r3
 800e462:	4313      	orrs	r3, r2
 800e464:	9304      	str	r3, [sp, #16]
 800e466:	46a2      	mov	sl, r4
 800e468:	e7d2      	b.n	800e410 <_svfiprintf_r+0xa0>
 800e46a:	9b03      	ldr	r3, [sp, #12]
 800e46c:	1d19      	adds	r1, r3, #4
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	9103      	str	r1, [sp, #12]
 800e472:	2b00      	cmp	r3, #0
 800e474:	bfbb      	ittet	lt
 800e476:	425b      	neglt	r3, r3
 800e478:	f042 0202 	orrlt.w	r2, r2, #2
 800e47c:	9307      	strge	r3, [sp, #28]
 800e47e:	9307      	strlt	r3, [sp, #28]
 800e480:	bfb8      	it	lt
 800e482:	9204      	strlt	r2, [sp, #16]
 800e484:	7823      	ldrb	r3, [r4, #0]
 800e486:	2b2e      	cmp	r3, #46	@ 0x2e
 800e488:	d10a      	bne.n	800e4a0 <_svfiprintf_r+0x130>
 800e48a:	7863      	ldrb	r3, [r4, #1]
 800e48c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e48e:	d132      	bne.n	800e4f6 <_svfiprintf_r+0x186>
 800e490:	9b03      	ldr	r3, [sp, #12]
 800e492:	1d1a      	adds	r2, r3, #4
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	9203      	str	r2, [sp, #12]
 800e498:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e49c:	3402      	adds	r4, #2
 800e49e:	9305      	str	r3, [sp, #20]
 800e4a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e564 <_svfiprintf_r+0x1f4>
 800e4a4:	7821      	ldrb	r1, [r4, #0]
 800e4a6:	2203      	movs	r2, #3
 800e4a8:	4650      	mov	r0, sl
 800e4aa:	f7f1 fea9 	bl	8000200 <memchr>
 800e4ae:	b138      	cbz	r0, 800e4c0 <_svfiprintf_r+0x150>
 800e4b0:	9b04      	ldr	r3, [sp, #16]
 800e4b2:	eba0 000a 	sub.w	r0, r0, sl
 800e4b6:	2240      	movs	r2, #64	@ 0x40
 800e4b8:	4082      	lsls	r2, r0
 800e4ba:	4313      	orrs	r3, r2
 800e4bc:	3401      	adds	r4, #1
 800e4be:	9304      	str	r3, [sp, #16]
 800e4c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c4:	4824      	ldr	r0, [pc, #144]	@ (800e558 <_svfiprintf_r+0x1e8>)
 800e4c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e4ca:	2206      	movs	r2, #6
 800e4cc:	f7f1 fe98 	bl	8000200 <memchr>
 800e4d0:	2800      	cmp	r0, #0
 800e4d2:	d036      	beq.n	800e542 <_svfiprintf_r+0x1d2>
 800e4d4:	4b21      	ldr	r3, [pc, #132]	@ (800e55c <_svfiprintf_r+0x1ec>)
 800e4d6:	bb1b      	cbnz	r3, 800e520 <_svfiprintf_r+0x1b0>
 800e4d8:	9b03      	ldr	r3, [sp, #12]
 800e4da:	3307      	adds	r3, #7
 800e4dc:	f023 0307 	bic.w	r3, r3, #7
 800e4e0:	3308      	adds	r3, #8
 800e4e2:	9303      	str	r3, [sp, #12]
 800e4e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e4e6:	4433      	add	r3, r6
 800e4e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ea:	e76a      	b.n	800e3c2 <_svfiprintf_r+0x52>
 800e4ec:	fb0c 3202 	mla	r2, ip, r2, r3
 800e4f0:	460c      	mov	r4, r1
 800e4f2:	2001      	movs	r0, #1
 800e4f4:	e7a8      	b.n	800e448 <_svfiprintf_r+0xd8>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	3401      	adds	r4, #1
 800e4fa:	9305      	str	r3, [sp, #20]
 800e4fc:	4619      	mov	r1, r3
 800e4fe:	f04f 0c0a 	mov.w	ip, #10
 800e502:	4620      	mov	r0, r4
 800e504:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e508:	3a30      	subs	r2, #48	@ 0x30
 800e50a:	2a09      	cmp	r2, #9
 800e50c:	d903      	bls.n	800e516 <_svfiprintf_r+0x1a6>
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d0c6      	beq.n	800e4a0 <_svfiprintf_r+0x130>
 800e512:	9105      	str	r1, [sp, #20]
 800e514:	e7c4      	b.n	800e4a0 <_svfiprintf_r+0x130>
 800e516:	fb0c 2101 	mla	r1, ip, r1, r2
 800e51a:	4604      	mov	r4, r0
 800e51c:	2301      	movs	r3, #1
 800e51e:	e7f0      	b.n	800e502 <_svfiprintf_r+0x192>
 800e520:	ab03      	add	r3, sp, #12
 800e522:	9300      	str	r3, [sp, #0]
 800e524:	462a      	mov	r2, r5
 800e526:	4b0e      	ldr	r3, [pc, #56]	@ (800e560 <_svfiprintf_r+0x1f0>)
 800e528:	a904      	add	r1, sp, #16
 800e52a:	4638      	mov	r0, r7
 800e52c:	f3af 8000 	nop.w
 800e530:	1c42      	adds	r2, r0, #1
 800e532:	4606      	mov	r6, r0
 800e534:	d1d6      	bne.n	800e4e4 <_svfiprintf_r+0x174>
 800e536:	89ab      	ldrh	r3, [r5, #12]
 800e538:	065b      	lsls	r3, r3, #25
 800e53a:	f53f af2d 	bmi.w	800e398 <_svfiprintf_r+0x28>
 800e53e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e540:	e72c      	b.n	800e39c <_svfiprintf_r+0x2c>
 800e542:	ab03      	add	r3, sp, #12
 800e544:	9300      	str	r3, [sp, #0]
 800e546:	462a      	mov	r2, r5
 800e548:	4b05      	ldr	r3, [pc, #20]	@ (800e560 <_svfiprintf_r+0x1f0>)
 800e54a:	a904      	add	r1, sp, #16
 800e54c:	4638      	mov	r0, r7
 800e54e:	f000 f9bb 	bl	800e8c8 <_printf_i>
 800e552:	e7ed      	b.n	800e530 <_svfiprintf_r+0x1c0>
 800e554:	0800f0a8 	.word	0x0800f0a8
 800e558:	0800f0b2 	.word	0x0800f0b2
 800e55c:	00000000 	.word	0x00000000
 800e560:	0800e2b9 	.word	0x0800e2b9
 800e564:	0800f0ae 	.word	0x0800f0ae

0800e568 <__sfputc_r>:
 800e568:	6893      	ldr	r3, [r2, #8]
 800e56a:	3b01      	subs	r3, #1
 800e56c:	2b00      	cmp	r3, #0
 800e56e:	b410      	push	{r4}
 800e570:	6093      	str	r3, [r2, #8]
 800e572:	da08      	bge.n	800e586 <__sfputc_r+0x1e>
 800e574:	6994      	ldr	r4, [r2, #24]
 800e576:	42a3      	cmp	r3, r4
 800e578:	db01      	blt.n	800e57e <__sfputc_r+0x16>
 800e57a:	290a      	cmp	r1, #10
 800e57c:	d103      	bne.n	800e586 <__sfputc_r+0x1e>
 800e57e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e582:	f7ff bd0c 	b.w	800df9e <__swbuf_r>
 800e586:	6813      	ldr	r3, [r2, #0]
 800e588:	1c58      	adds	r0, r3, #1
 800e58a:	6010      	str	r0, [r2, #0]
 800e58c:	7019      	strb	r1, [r3, #0]
 800e58e:	4608      	mov	r0, r1
 800e590:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e594:	4770      	bx	lr

0800e596 <__sfputs_r>:
 800e596:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e598:	4606      	mov	r6, r0
 800e59a:	460f      	mov	r7, r1
 800e59c:	4614      	mov	r4, r2
 800e59e:	18d5      	adds	r5, r2, r3
 800e5a0:	42ac      	cmp	r4, r5
 800e5a2:	d101      	bne.n	800e5a8 <__sfputs_r+0x12>
 800e5a4:	2000      	movs	r0, #0
 800e5a6:	e007      	b.n	800e5b8 <__sfputs_r+0x22>
 800e5a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5ac:	463a      	mov	r2, r7
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f7ff ffda 	bl	800e568 <__sfputc_r>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d1f3      	bne.n	800e5a0 <__sfputs_r+0xa>
 800e5b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e5bc <_vfiprintf_r>:
 800e5bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e5c0:	460d      	mov	r5, r1
 800e5c2:	b09d      	sub	sp, #116	@ 0x74
 800e5c4:	4614      	mov	r4, r2
 800e5c6:	4698      	mov	r8, r3
 800e5c8:	4606      	mov	r6, r0
 800e5ca:	b118      	cbz	r0, 800e5d4 <_vfiprintf_r+0x18>
 800e5cc:	6a03      	ldr	r3, [r0, #32]
 800e5ce:	b90b      	cbnz	r3, 800e5d4 <_vfiprintf_r+0x18>
 800e5d0:	f7ff fbc6 	bl	800dd60 <__sinit>
 800e5d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5d6:	07d9      	lsls	r1, r3, #31
 800e5d8:	d405      	bmi.n	800e5e6 <_vfiprintf_r+0x2a>
 800e5da:	89ab      	ldrh	r3, [r5, #12]
 800e5dc:	059a      	lsls	r2, r3, #22
 800e5de:	d402      	bmi.n	800e5e6 <_vfiprintf_r+0x2a>
 800e5e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5e2:	f7ff fe0e 	bl	800e202 <__retarget_lock_acquire_recursive>
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	071b      	lsls	r3, r3, #28
 800e5ea:	d501      	bpl.n	800e5f0 <_vfiprintf_r+0x34>
 800e5ec:	692b      	ldr	r3, [r5, #16]
 800e5ee:	b99b      	cbnz	r3, 800e618 <_vfiprintf_r+0x5c>
 800e5f0:	4629      	mov	r1, r5
 800e5f2:	4630      	mov	r0, r6
 800e5f4:	f7ff fd12 	bl	800e01c <__swsetup_r>
 800e5f8:	b170      	cbz	r0, 800e618 <_vfiprintf_r+0x5c>
 800e5fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5fc:	07dc      	lsls	r4, r3, #31
 800e5fe:	d504      	bpl.n	800e60a <_vfiprintf_r+0x4e>
 800e600:	f04f 30ff 	mov.w	r0, #4294967295
 800e604:	b01d      	add	sp, #116	@ 0x74
 800e606:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e60a:	89ab      	ldrh	r3, [r5, #12]
 800e60c:	0598      	lsls	r0, r3, #22
 800e60e:	d4f7      	bmi.n	800e600 <_vfiprintf_r+0x44>
 800e610:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e612:	f7ff fdf7 	bl	800e204 <__retarget_lock_release_recursive>
 800e616:	e7f3      	b.n	800e600 <_vfiprintf_r+0x44>
 800e618:	2300      	movs	r3, #0
 800e61a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e61c:	2320      	movs	r3, #32
 800e61e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e622:	f8cd 800c 	str.w	r8, [sp, #12]
 800e626:	2330      	movs	r3, #48	@ 0x30
 800e628:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e7d8 <_vfiprintf_r+0x21c>
 800e62c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e630:	f04f 0901 	mov.w	r9, #1
 800e634:	4623      	mov	r3, r4
 800e636:	469a      	mov	sl, r3
 800e638:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e63c:	b10a      	cbz	r2, 800e642 <_vfiprintf_r+0x86>
 800e63e:	2a25      	cmp	r2, #37	@ 0x25
 800e640:	d1f9      	bne.n	800e636 <_vfiprintf_r+0x7a>
 800e642:	ebba 0b04 	subs.w	fp, sl, r4
 800e646:	d00b      	beq.n	800e660 <_vfiprintf_r+0xa4>
 800e648:	465b      	mov	r3, fp
 800e64a:	4622      	mov	r2, r4
 800e64c:	4629      	mov	r1, r5
 800e64e:	4630      	mov	r0, r6
 800e650:	f7ff ffa1 	bl	800e596 <__sfputs_r>
 800e654:	3001      	adds	r0, #1
 800e656:	f000 80a7 	beq.w	800e7a8 <_vfiprintf_r+0x1ec>
 800e65a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e65c:	445a      	add	r2, fp
 800e65e:	9209      	str	r2, [sp, #36]	@ 0x24
 800e660:	f89a 3000 	ldrb.w	r3, [sl]
 800e664:	2b00      	cmp	r3, #0
 800e666:	f000 809f 	beq.w	800e7a8 <_vfiprintf_r+0x1ec>
 800e66a:	2300      	movs	r3, #0
 800e66c:	f04f 32ff 	mov.w	r2, #4294967295
 800e670:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e674:	f10a 0a01 	add.w	sl, sl, #1
 800e678:	9304      	str	r3, [sp, #16]
 800e67a:	9307      	str	r3, [sp, #28]
 800e67c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e680:	931a      	str	r3, [sp, #104]	@ 0x68
 800e682:	4654      	mov	r4, sl
 800e684:	2205      	movs	r2, #5
 800e686:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e68a:	4853      	ldr	r0, [pc, #332]	@ (800e7d8 <_vfiprintf_r+0x21c>)
 800e68c:	f7f1 fdb8 	bl	8000200 <memchr>
 800e690:	9a04      	ldr	r2, [sp, #16]
 800e692:	b9d8      	cbnz	r0, 800e6cc <_vfiprintf_r+0x110>
 800e694:	06d1      	lsls	r1, r2, #27
 800e696:	bf44      	itt	mi
 800e698:	2320      	movmi	r3, #32
 800e69a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e69e:	0713      	lsls	r3, r2, #28
 800e6a0:	bf44      	itt	mi
 800e6a2:	232b      	movmi	r3, #43	@ 0x2b
 800e6a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6a8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6ac:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6ae:	d015      	beq.n	800e6dc <_vfiprintf_r+0x120>
 800e6b0:	9a07      	ldr	r2, [sp, #28]
 800e6b2:	4654      	mov	r4, sl
 800e6b4:	2000      	movs	r0, #0
 800e6b6:	f04f 0c0a 	mov.w	ip, #10
 800e6ba:	4621      	mov	r1, r4
 800e6bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e6c0:	3b30      	subs	r3, #48	@ 0x30
 800e6c2:	2b09      	cmp	r3, #9
 800e6c4:	d94b      	bls.n	800e75e <_vfiprintf_r+0x1a2>
 800e6c6:	b1b0      	cbz	r0, 800e6f6 <_vfiprintf_r+0x13a>
 800e6c8:	9207      	str	r2, [sp, #28]
 800e6ca:	e014      	b.n	800e6f6 <_vfiprintf_r+0x13a>
 800e6cc:	eba0 0308 	sub.w	r3, r0, r8
 800e6d0:	fa09 f303 	lsl.w	r3, r9, r3
 800e6d4:	4313      	orrs	r3, r2
 800e6d6:	9304      	str	r3, [sp, #16]
 800e6d8:	46a2      	mov	sl, r4
 800e6da:	e7d2      	b.n	800e682 <_vfiprintf_r+0xc6>
 800e6dc:	9b03      	ldr	r3, [sp, #12]
 800e6de:	1d19      	adds	r1, r3, #4
 800e6e0:	681b      	ldr	r3, [r3, #0]
 800e6e2:	9103      	str	r1, [sp, #12]
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	bfbb      	ittet	lt
 800e6e8:	425b      	neglt	r3, r3
 800e6ea:	f042 0202 	orrlt.w	r2, r2, #2
 800e6ee:	9307      	strge	r3, [sp, #28]
 800e6f0:	9307      	strlt	r3, [sp, #28]
 800e6f2:	bfb8      	it	lt
 800e6f4:	9204      	strlt	r2, [sp, #16]
 800e6f6:	7823      	ldrb	r3, [r4, #0]
 800e6f8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e6fa:	d10a      	bne.n	800e712 <_vfiprintf_r+0x156>
 800e6fc:	7863      	ldrb	r3, [r4, #1]
 800e6fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800e700:	d132      	bne.n	800e768 <_vfiprintf_r+0x1ac>
 800e702:	9b03      	ldr	r3, [sp, #12]
 800e704:	1d1a      	adds	r2, r3, #4
 800e706:	681b      	ldr	r3, [r3, #0]
 800e708:	9203      	str	r2, [sp, #12]
 800e70a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e70e:	3402      	adds	r4, #2
 800e710:	9305      	str	r3, [sp, #20]
 800e712:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e7e8 <_vfiprintf_r+0x22c>
 800e716:	7821      	ldrb	r1, [r4, #0]
 800e718:	2203      	movs	r2, #3
 800e71a:	4650      	mov	r0, sl
 800e71c:	f7f1 fd70 	bl	8000200 <memchr>
 800e720:	b138      	cbz	r0, 800e732 <_vfiprintf_r+0x176>
 800e722:	9b04      	ldr	r3, [sp, #16]
 800e724:	eba0 000a 	sub.w	r0, r0, sl
 800e728:	2240      	movs	r2, #64	@ 0x40
 800e72a:	4082      	lsls	r2, r0
 800e72c:	4313      	orrs	r3, r2
 800e72e:	3401      	adds	r4, #1
 800e730:	9304      	str	r3, [sp, #16]
 800e732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e736:	4829      	ldr	r0, [pc, #164]	@ (800e7dc <_vfiprintf_r+0x220>)
 800e738:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e73c:	2206      	movs	r2, #6
 800e73e:	f7f1 fd5f 	bl	8000200 <memchr>
 800e742:	2800      	cmp	r0, #0
 800e744:	d03f      	beq.n	800e7c6 <_vfiprintf_r+0x20a>
 800e746:	4b26      	ldr	r3, [pc, #152]	@ (800e7e0 <_vfiprintf_r+0x224>)
 800e748:	bb1b      	cbnz	r3, 800e792 <_vfiprintf_r+0x1d6>
 800e74a:	9b03      	ldr	r3, [sp, #12]
 800e74c:	3307      	adds	r3, #7
 800e74e:	f023 0307 	bic.w	r3, r3, #7
 800e752:	3308      	adds	r3, #8
 800e754:	9303      	str	r3, [sp, #12]
 800e756:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e758:	443b      	add	r3, r7
 800e75a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e75c:	e76a      	b.n	800e634 <_vfiprintf_r+0x78>
 800e75e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e762:	460c      	mov	r4, r1
 800e764:	2001      	movs	r0, #1
 800e766:	e7a8      	b.n	800e6ba <_vfiprintf_r+0xfe>
 800e768:	2300      	movs	r3, #0
 800e76a:	3401      	adds	r4, #1
 800e76c:	9305      	str	r3, [sp, #20]
 800e76e:	4619      	mov	r1, r3
 800e770:	f04f 0c0a 	mov.w	ip, #10
 800e774:	4620      	mov	r0, r4
 800e776:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e77a:	3a30      	subs	r2, #48	@ 0x30
 800e77c:	2a09      	cmp	r2, #9
 800e77e:	d903      	bls.n	800e788 <_vfiprintf_r+0x1cc>
 800e780:	2b00      	cmp	r3, #0
 800e782:	d0c6      	beq.n	800e712 <_vfiprintf_r+0x156>
 800e784:	9105      	str	r1, [sp, #20]
 800e786:	e7c4      	b.n	800e712 <_vfiprintf_r+0x156>
 800e788:	fb0c 2101 	mla	r1, ip, r1, r2
 800e78c:	4604      	mov	r4, r0
 800e78e:	2301      	movs	r3, #1
 800e790:	e7f0      	b.n	800e774 <_vfiprintf_r+0x1b8>
 800e792:	ab03      	add	r3, sp, #12
 800e794:	9300      	str	r3, [sp, #0]
 800e796:	462a      	mov	r2, r5
 800e798:	4b12      	ldr	r3, [pc, #72]	@ (800e7e4 <_vfiprintf_r+0x228>)
 800e79a:	a904      	add	r1, sp, #16
 800e79c:	4630      	mov	r0, r6
 800e79e:	f3af 8000 	nop.w
 800e7a2:	4607      	mov	r7, r0
 800e7a4:	1c78      	adds	r0, r7, #1
 800e7a6:	d1d6      	bne.n	800e756 <_vfiprintf_r+0x19a>
 800e7a8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7aa:	07d9      	lsls	r1, r3, #31
 800e7ac:	d405      	bmi.n	800e7ba <_vfiprintf_r+0x1fe>
 800e7ae:	89ab      	ldrh	r3, [r5, #12]
 800e7b0:	059a      	lsls	r2, r3, #22
 800e7b2:	d402      	bmi.n	800e7ba <_vfiprintf_r+0x1fe>
 800e7b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e7b6:	f7ff fd25 	bl	800e204 <__retarget_lock_release_recursive>
 800e7ba:	89ab      	ldrh	r3, [r5, #12]
 800e7bc:	065b      	lsls	r3, r3, #25
 800e7be:	f53f af1f 	bmi.w	800e600 <_vfiprintf_r+0x44>
 800e7c2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e7c4:	e71e      	b.n	800e604 <_vfiprintf_r+0x48>
 800e7c6:	ab03      	add	r3, sp, #12
 800e7c8:	9300      	str	r3, [sp, #0]
 800e7ca:	462a      	mov	r2, r5
 800e7cc:	4b05      	ldr	r3, [pc, #20]	@ (800e7e4 <_vfiprintf_r+0x228>)
 800e7ce:	a904      	add	r1, sp, #16
 800e7d0:	4630      	mov	r0, r6
 800e7d2:	f000 f879 	bl	800e8c8 <_printf_i>
 800e7d6:	e7e4      	b.n	800e7a2 <_vfiprintf_r+0x1e6>
 800e7d8:	0800f0a8 	.word	0x0800f0a8
 800e7dc:	0800f0b2 	.word	0x0800f0b2
 800e7e0:	00000000 	.word	0x00000000
 800e7e4:	0800e597 	.word	0x0800e597
 800e7e8:	0800f0ae 	.word	0x0800f0ae

0800e7ec <_printf_common>:
 800e7ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e7f0:	4616      	mov	r6, r2
 800e7f2:	4698      	mov	r8, r3
 800e7f4:	688a      	ldr	r2, [r1, #8]
 800e7f6:	690b      	ldr	r3, [r1, #16]
 800e7f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800e7fc:	4293      	cmp	r3, r2
 800e7fe:	bfb8      	it	lt
 800e800:	4613      	movlt	r3, r2
 800e802:	6033      	str	r3, [r6, #0]
 800e804:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800e808:	4607      	mov	r7, r0
 800e80a:	460c      	mov	r4, r1
 800e80c:	b10a      	cbz	r2, 800e812 <_printf_common+0x26>
 800e80e:	3301      	adds	r3, #1
 800e810:	6033      	str	r3, [r6, #0]
 800e812:	6823      	ldr	r3, [r4, #0]
 800e814:	0699      	lsls	r1, r3, #26
 800e816:	bf42      	ittt	mi
 800e818:	6833      	ldrmi	r3, [r6, #0]
 800e81a:	3302      	addmi	r3, #2
 800e81c:	6033      	strmi	r3, [r6, #0]
 800e81e:	6825      	ldr	r5, [r4, #0]
 800e820:	f015 0506 	ands.w	r5, r5, #6
 800e824:	d106      	bne.n	800e834 <_printf_common+0x48>
 800e826:	f104 0a19 	add.w	sl, r4, #25
 800e82a:	68e3      	ldr	r3, [r4, #12]
 800e82c:	6832      	ldr	r2, [r6, #0]
 800e82e:	1a9b      	subs	r3, r3, r2
 800e830:	42ab      	cmp	r3, r5
 800e832:	dc26      	bgt.n	800e882 <_printf_common+0x96>
 800e834:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800e838:	6822      	ldr	r2, [r4, #0]
 800e83a:	3b00      	subs	r3, #0
 800e83c:	bf18      	it	ne
 800e83e:	2301      	movne	r3, #1
 800e840:	0692      	lsls	r2, r2, #26
 800e842:	d42b      	bmi.n	800e89c <_printf_common+0xb0>
 800e844:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800e848:	4641      	mov	r1, r8
 800e84a:	4638      	mov	r0, r7
 800e84c:	47c8      	blx	r9
 800e84e:	3001      	adds	r0, #1
 800e850:	d01e      	beq.n	800e890 <_printf_common+0xa4>
 800e852:	6823      	ldr	r3, [r4, #0]
 800e854:	6922      	ldr	r2, [r4, #16]
 800e856:	f003 0306 	and.w	r3, r3, #6
 800e85a:	2b04      	cmp	r3, #4
 800e85c:	bf02      	ittt	eq
 800e85e:	68e5      	ldreq	r5, [r4, #12]
 800e860:	6833      	ldreq	r3, [r6, #0]
 800e862:	1aed      	subeq	r5, r5, r3
 800e864:	68a3      	ldr	r3, [r4, #8]
 800e866:	bf0c      	ite	eq
 800e868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e86c:	2500      	movne	r5, #0
 800e86e:	4293      	cmp	r3, r2
 800e870:	bfc4      	itt	gt
 800e872:	1a9b      	subgt	r3, r3, r2
 800e874:	18ed      	addgt	r5, r5, r3
 800e876:	2600      	movs	r6, #0
 800e878:	341a      	adds	r4, #26
 800e87a:	42b5      	cmp	r5, r6
 800e87c:	d11a      	bne.n	800e8b4 <_printf_common+0xc8>
 800e87e:	2000      	movs	r0, #0
 800e880:	e008      	b.n	800e894 <_printf_common+0xa8>
 800e882:	2301      	movs	r3, #1
 800e884:	4652      	mov	r2, sl
 800e886:	4641      	mov	r1, r8
 800e888:	4638      	mov	r0, r7
 800e88a:	47c8      	blx	r9
 800e88c:	3001      	adds	r0, #1
 800e88e:	d103      	bne.n	800e898 <_printf_common+0xac>
 800e890:	f04f 30ff 	mov.w	r0, #4294967295
 800e894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e898:	3501      	adds	r5, #1
 800e89a:	e7c6      	b.n	800e82a <_printf_common+0x3e>
 800e89c:	18e1      	adds	r1, r4, r3
 800e89e:	1c5a      	adds	r2, r3, #1
 800e8a0:	2030      	movs	r0, #48	@ 0x30
 800e8a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800e8a6:	4422      	add	r2, r4
 800e8a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800e8ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800e8b0:	3302      	adds	r3, #2
 800e8b2:	e7c7      	b.n	800e844 <_printf_common+0x58>
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	4622      	mov	r2, r4
 800e8b8:	4641      	mov	r1, r8
 800e8ba:	4638      	mov	r0, r7
 800e8bc:	47c8      	blx	r9
 800e8be:	3001      	adds	r0, #1
 800e8c0:	d0e6      	beq.n	800e890 <_printf_common+0xa4>
 800e8c2:	3601      	adds	r6, #1
 800e8c4:	e7d9      	b.n	800e87a <_printf_common+0x8e>
	...

0800e8c8 <_printf_i>:
 800e8c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800e8cc:	7e0f      	ldrb	r7, [r1, #24]
 800e8ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800e8d0:	2f78      	cmp	r7, #120	@ 0x78
 800e8d2:	4691      	mov	r9, r2
 800e8d4:	4680      	mov	r8, r0
 800e8d6:	460c      	mov	r4, r1
 800e8d8:	469a      	mov	sl, r3
 800e8da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800e8de:	d807      	bhi.n	800e8f0 <_printf_i+0x28>
 800e8e0:	2f62      	cmp	r7, #98	@ 0x62
 800e8e2:	d80a      	bhi.n	800e8fa <_printf_i+0x32>
 800e8e4:	2f00      	cmp	r7, #0
 800e8e6:	f000 80d1 	beq.w	800ea8c <_printf_i+0x1c4>
 800e8ea:	2f58      	cmp	r7, #88	@ 0x58
 800e8ec:	f000 80b8 	beq.w	800ea60 <_printf_i+0x198>
 800e8f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e8f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800e8f8:	e03a      	b.n	800e970 <_printf_i+0xa8>
 800e8fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800e8fe:	2b15      	cmp	r3, #21
 800e900:	d8f6      	bhi.n	800e8f0 <_printf_i+0x28>
 800e902:	a101      	add	r1, pc, #4	@ (adr r1, 800e908 <_printf_i+0x40>)
 800e904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800e908:	0800e961 	.word	0x0800e961
 800e90c:	0800e975 	.word	0x0800e975
 800e910:	0800e8f1 	.word	0x0800e8f1
 800e914:	0800e8f1 	.word	0x0800e8f1
 800e918:	0800e8f1 	.word	0x0800e8f1
 800e91c:	0800e8f1 	.word	0x0800e8f1
 800e920:	0800e975 	.word	0x0800e975
 800e924:	0800e8f1 	.word	0x0800e8f1
 800e928:	0800e8f1 	.word	0x0800e8f1
 800e92c:	0800e8f1 	.word	0x0800e8f1
 800e930:	0800e8f1 	.word	0x0800e8f1
 800e934:	0800ea73 	.word	0x0800ea73
 800e938:	0800e99f 	.word	0x0800e99f
 800e93c:	0800ea2d 	.word	0x0800ea2d
 800e940:	0800e8f1 	.word	0x0800e8f1
 800e944:	0800e8f1 	.word	0x0800e8f1
 800e948:	0800ea95 	.word	0x0800ea95
 800e94c:	0800e8f1 	.word	0x0800e8f1
 800e950:	0800e99f 	.word	0x0800e99f
 800e954:	0800e8f1 	.word	0x0800e8f1
 800e958:	0800e8f1 	.word	0x0800e8f1
 800e95c:	0800ea35 	.word	0x0800ea35
 800e960:	6833      	ldr	r3, [r6, #0]
 800e962:	1d1a      	adds	r2, r3, #4
 800e964:	681b      	ldr	r3, [r3, #0]
 800e966:	6032      	str	r2, [r6, #0]
 800e968:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800e96c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800e970:	2301      	movs	r3, #1
 800e972:	e09c      	b.n	800eaae <_printf_i+0x1e6>
 800e974:	6833      	ldr	r3, [r6, #0]
 800e976:	6820      	ldr	r0, [r4, #0]
 800e978:	1d19      	adds	r1, r3, #4
 800e97a:	6031      	str	r1, [r6, #0]
 800e97c:	0606      	lsls	r6, r0, #24
 800e97e:	d501      	bpl.n	800e984 <_printf_i+0xbc>
 800e980:	681d      	ldr	r5, [r3, #0]
 800e982:	e003      	b.n	800e98c <_printf_i+0xc4>
 800e984:	0645      	lsls	r5, r0, #25
 800e986:	d5fb      	bpl.n	800e980 <_printf_i+0xb8>
 800e988:	f9b3 5000 	ldrsh.w	r5, [r3]
 800e98c:	2d00      	cmp	r5, #0
 800e98e:	da03      	bge.n	800e998 <_printf_i+0xd0>
 800e990:	232d      	movs	r3, #45	@ 0x2d
 800e992:	426d      	negs	r5, r5
 800e994:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e998:	4858      	ldr	r0, [pc, #352]	@ (800eafc <_printf_i+0x234>)
 800e99a:	230a      	movs	r3, #10
 800e99c:	e011      	b.n	800e9c2 <_printf_i+0xfa>
 800e99e:	6821      	ldr	r1, [r4, #0]
 800e9a0:	6833      	ldr	r3, [r6, #0]
 800e9a2:	0608      	lsls	r0, r1, #24
 800e9a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800e9a8:	d402      	bmi.n	800e9b0 <_printf_i+0xe8>
 800e9aa:	0649      	lsls	r1, r1, #25
 800e9ac:	bf48      	it	mi
 800e9ae:	b2ad      	uxthmi	r5, r5
 800e9b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800e9b2:	4852      	ldr	r0, [pc, #328]	@ (800eafc <_printf_i+0x234>)
 800e9b4:	6033      	str	r3, [r6, #0]
 800e9b6:	bf14      	ite	ne
 800e9b8:	230a      	movne	r3, #10
 800e9ba:	2308      	moveq	r3, #8
 800e9bc:	2100      	movs	r1, #0
 800e9be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800e9c2:	6866      	ldr	r6, [r4, #4]
 800e9c4:	60a6      	str	r6, [r4, #8]
 800e9c6:	2e00      	cmp	r6, #0
 800e9c8:	db05      	blt.n	800e9d6 <_printf_i+0x10e>
 800e9ca:	6821      	ldr	r1, [r4, #0]
 800e9cc:	432e      	orrs	r6, r5
 800e9ce:	f021 0104 	bic.w	r1, r1, #4
 800e9d2:	6021      	str	r1, [r4, #0]
 800e9d4:	d04b      	beq.n	800ea6e <_printf_i+0x1a6>
 800e9d6:	4616      	mov	r6, r2
 800e9d8:	fbb5 f1f3 	udiv	r1, r5, r3
 800e9dc:	fb03 5711 	mls	r7, r3, r1, r5
 800e9e0:	5dc7      	ldrb	r7, [r0, r7]
 800e9e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800e9e6:	462f      	mov	r7, r5
 800e9e8:	42bb      	cmp	r3, r7
 800e9ea:	460d      	mov	r5, r1
 800e9ec:	d9f4      	bls.n	800e9d8 <_printf_i+0x110>
 800e9ee:	2b08      	cmp	r3, #8
 800e9f0:	d10b      	bne.n	800ea0a <_printf_i+0x142>
 800e9f2:	6823      	ldr	r3, [r4, #0]
 800e9f4:	07df      	lsls	r7, r3, #31
 800e9f6:	d508      	bpl.n	800ea0a <_printf_i+0x142>
 800e9f8:	6923      	ldr	r3, [r4, #16]
 800e9fa:	6861      	ldr	r1, [r4, #4]
 800e9fc:	4299      	cmp	r1, r3
 800e9fe:	bfde      	ittt	le
 800ea00:	2330      	movle	r3, #48	@ 0x30
 800ea02:	f806 3c01 	strble.w	r3, [r6, #-1]
 800ea06:	f106 36ff 	addle.w	r6, r6, #4294967295
 800ea0a:	1b92      	subs	r2, r2, r6
 800ea0c:	6122      	str	r2, [r4, #16]
 800ea0e:	f8cd a000 	str.w	sl, [sp]
 800ea12:	464b      	mov	r3, r9
 800ea14:	aa03      	add	r2, sp, #12
 800ea16:	4621      	mov	r1, r4
 800ea18:	4640      	mov	r0, r8
 800ea1a:	f7ff fee7 	bl	800e7ec <_printf_common>
 800ea1e:	3001      	adds	r0, #1
 800ea20:	d14a      	bne.n	800eab8 <_printf_i+0x1f0>
 800ea22:	f04f 30ff 	mov.w	r0, #4294967295
 800ea26:	b004      	add	sp, #16
 800ea28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea2c:	6823      	ldr	r3, [r4, #0]
 800ea2e:	f043 0320 	orr.w	r3, r3, #32
 800ea32:	6023      	str	r3, [r4, #0]
 800ea34:	4832      	ldr	r0, [pc, #200]	@ (800eb00 <_printf_i+0x238>)
 800ea36:	2778      	movs	r7, #120	@ 0x78
 800ea38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ea3c:	6823      	ldr	r3, [r4, #0]
 800ea3e:	6831      	ldr	r1, [r6, #0]
 800ea40:	061f      	lsls	r7, r3, #24
 800ea42:	f851 5b04 	ldr.w	r5, [r1], #4
 800ea46:	d402      	bmi.n	800ea4e <_printf_i+0x186>
 800ea48:	065f      	lsls	r7, r3, #25
 800ea4a:	bf48      	it	mi
 800ea4c:	b2ad      	uxthmi	r5, r5
 800ea4e:	6031      	str	r1, [r6, #0]
 800ea50:	07d9      	lsls	r1, r3, #31
 800ea52:	bf44      	itt	mi
 800ea54:	f043 0320 	orrmi.w	r3, r3, #32
 800ea58:	6023      	strmi	r3, [r4, #0]
 800ea5a:	b11d      	cbz	r5, 800ea64 <_printf_i+0x19c>
 800ea5c:	2310      	movs	r3, #16
 800ea5e:	e7ad      	b.n	800e9bc <_printf_i+0xf4>
 800ea60:	4826      	ldr	r0, [pc, #152]	@ (800eafc <_printf_i+0x234>)
 800ea62:	e7e9      	b.n	800ea38 <_printf_i+0x170>
 800ea64:	6823      	ldr	r3, [r4, #0]
 800ea66:	f023 0320 	bic.w	r3, r3, #32
 800ea6a:	6023      	str	r3, [r4, #0]
 800ea6c:	e7f6      	b.n	800ea5c <_printf_i+0x194>
 800ea6e:	4616      	mov	r6, r2
 800ea70:	e7bd      	b.n	800e9ee <_printf_i+0x126>
 800ea72:	6833      	ldr	r3, [r6, #0]
 800ea74:	6825      	ldr	r5, [r4, #0]
 800ea76:	6961      	ldr	r1, [r4, #20]
 800ea78:	1d18      	adds	r0, r3, #4
 800ea7a:	6030      	str	r0, [r6, #0]
 800ea7c:	062e      	lsls	r6, r5, #24
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	d501      	bpl.n	800ea86 <_printf_i+0x1be>
 800ea82:	6019      	str	r1, [r3, #0]
 800ea84:	e002      	b.n	800ea8c <_printf_i+0x1c4>
 800ea86:	0668      	lsls	r0, r5, #25
 800ea88:	d5fb      	bpl.n	800ea82 <_printf_i+0x1ba>
 800ea8a:	8019      	strh	r1, [r3, #0]
 800ea8c:	2300      	movs	r3, #0
 800ea8e:	6123      	str	r3, [r4, #16]
 800ea90:	4616      	mov	r6, r2
 800ea92:	e7bc      	b.n	800ea0e <_printf_i+0x146>
 800ea94:	6833      	ldr	r3, [r6, #0]
 800ea96:	1d1a      	adds	r2, r3, #4
 800ea98:	6032      	str	r2, [r6, #0]
 800ea9a:	681e      	ldr	r6, [r3, #0]
 800ea9c:	6862      	ldr	r2, [r4, #4]
 800ea9e:	2100      	movs	r1, #0
 800eaa0:	4630      	mov	r0, r6
 800eaa2:	f7f1 fbad 	bl	8000200 <memchr>
 800eaa6:	b108      	cbz	r0, 800eaac <_printf_i+0x1e4>
 800eaa8:	1b80      	subs	r0, r0, r6
 800eaaa:	6060      	str	r0, [r4, #4]
 800eaac:	6863      	ldr	r3, [r4, #4]
 800eaae:	6123      	str	r3, [r4, #16]
 800eab0:	2300      	movs	r3, #0
 800eab2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eab6:	e7aa      	b.n	800ea0e <_printf_i+0x146>
 800eab8:	6923      	ldr	r3, [r4, #16]
 800eaba:	4632      	mov	r2, r6
 800eabc:	4649      	mov	r1, r9
 800eabe:	4640      	mov	r0, r8
 800eac0:	47d0      	blx	sl
 800eac2:	3001      	adds	r0, #1
 800eac4:	d0ad      	beq.n	800ea22 <_printf_i+0x15a>
 800eac6:	6823      	ldr	r3, [r4, #0]
 800eac8:	079b      	lsls	r3, r3, #30
 800eaca:	d413      	bmi.n	800eaf4 <_printf_i+0x22c>
 800eacc:	68e0      	ldr	r0, [r4, #12]
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	4298      	cmp	r0, r3
 800ead2:	bfb8      	it	lt
 800ead4:	4618      	movlt	r0, r3
 800ead6:	e7a6      	b.n	800ea26 <_printf_i+0x15e>
 800ead8:	2301      	movs	r3, #1
 800eada:	4632      	mov	r2, r6
 800eadc:	4649      	mov	r1, r9
 800eade:	4640      	mov	r0, r8
 800eae0:	47d0      	blx	sl
 800eae2:	3001      	adds	r0, #1
 800eae4:	d09d      	beq.n	800ea22 <_printf_i+0x15a>
 800eae6:	3501      	adds	r5, #1
 800eae8:	68e3      	ldr	r3, [r4, #12]
 800eaea:	9903      	ldr	r1, [sp, #12]
 800eaec:	1a5b      	subs	r3, r3, r1
 800eaee:	42ab      	cmp	r3, r5
 800eaf0:	dcf2      	bgt.n	800ead8 <_printf_i+0x210>
 800eaf2:	e7eb      	b.n	800eacc <_printf_i+0x204>
 800eaf4:	2500      	movs	r5, #0
 800eaf6:	f104 0619 	add.w	r6, r4, #25
 800eafa:	e7f5      	b.n	800eae8 <_printf_i+0x220>
 800eafc:	0800f0b9 	.word	0x0800f0b9
 800eb00:	0800f0ca 	.word	0x0800f0ca

0800eb04 <__sflush_r>:
 800eb04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eb08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb0c:	0716      	lsls	r6, r2, #28
 800eb0e:	4605      	mov	r5, r0
 800eb10:	460c      	mov	r4, r1
 800eb12:	d454      	bmi.n	800ebbe <__sflush_r+0xba>
 800eb14:	684b      	ldr	r3, [r1, #4]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	dc02      	bgt.n	800eb20 <__sflush_r+0x1c>
 800eb1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800eb1c:	2b00      	cmp	r3, #0
 800eb1e:	dd48      	ble.n	800ebb2 <__sflush_r+0xae>
 800eb20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb22:	2e00      	cmp	r6, #0
 800eb24:	d045      	beq.n	800ebb2 <__sflush_r+0xae>
 800eb26:	2300      	movs	r3, #0
 800eb28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800eb2c:	682f      	ldr	r7, [r5, #0]
 800eb2e:	6a21      	ldr	r1, [r4, #32]
 800eb30:	602b      	str	r3, [r5, #0]
 800eb32:	d030      	beq.n	800eb96 <__sflush_r+0x92>
 800eb34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb36:	89a3      	ldrh	r3, [r4, #12]
 800eb38:	0759      	lsls	r1, r3, #29
 800eb3a:	d505      	bpl.n	800eb48 <__sflush_r+0x44>
 800eb3c:	6863      	ldr	r3, [r4, #4]
 800eb3e:	1ad2      	subs	r2, r2, r3
 800eb40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb42:	b10b      	cbz	r3, 800eb48 <__sflush_r+0x44>
 800eb44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb46:	1ad2      	subs	r2, r2, r3
 800eb48:	2300      	movs	r3, #0
 800eb4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800eb4c:	6a21      	ldr	r1, [r4, #32]
 800eb4e:	4628      	mov	r0, r5
 800eb50:	47b0      	blx	r6
 800eb52:	1c43      	adds	r3, r0, #1
 800eb54:	89a3      	ldrh	r3, [r4, #12]
 800eb56:	d106      	bne.n	800eb66 <__sflush_r+0x62>
 800eb58:	6829      	ldr	r1, [r5, #0]
 800eb5a:	291d      	cmp	r1, #29
 800eb5c:	d82b      	bhi.n	800ebb6 <__sflush_r+0xb2>
 800eb5e:	4a2a      	ldr	r2, [pc, #168]	@ (800ec08 <__sflush_r+0x104>)
 800eb60:	40ca      	lsrs	r2, r1
 800eb62:	07d6      	lsls	r6, r2, #31
 800eb64:	d527      	bpl.n	800ebb6 <__sflush_r+0xb2>
 800eb66:	2200      	movs	r2, #0
 800eb68:	6062      	str	r2, [r4, #4]
 800eb6a:	04d9      	lsls	r1, r3, #19
 800eb6c:	6922      	ldr	r2, [r4, #16]
 800eb6e:	6022      	str	r2, [r4, #0]
 800eb70:	d504      	bpl.n	800eb7c <__sflush_r+0x78>
 800eb72:	1c42      	adds	r2, r0, #1
 800eb74:	d101      	bne.n	800eb7a <__sflush_r+0x76>
 800eb76:	682b      	ldr	r3, [r5, #0]
 800eb78:	b903      	cbnz	r3, 800eb7c <__sflush_r+0x78>
 800eb7a:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb7e:	602f      	str	r7, [r5, #0]
 800eb80:	b1b9      	cbz	r1, 800ebb2 <__sflush_r+0xae>
 800eb82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800eb86:	4299      	cmp	r1, r3
 800eb88:	d002      	beq.n	800eb90 <__sflush_r+0x8c>
 800eb8a:	4628      	mov	r0, r5
 800eb8c:	f7ff fb4a 	bl	800e224 <_free_r>
 800eb90:	2300      	movs	r3, #0
 800eb92:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb94:	e00d      	b.n	800ebb2 <__sflush_r+0xae>
 800eb96:	2301      	movs	r3, #1
 800eb98:	4628      	mov	r0, r5
 800eb9a:	47b0      	blx	r6
 800eb9c:	4602      	mov	r2, r0
 800eb9e:	1c50      	adds	r0, r2, #1
 800eba0:	d1c9      	bne.n	800eb36 <__sflush_r+0x32>
 800eba2:	682b      	ldr	r3, [r5, #0]
 800eba4:	2b00      	cmp	r3, #0
 800eba6:	d0c6      	beq.n	800eb36 <__sflush_r+0x32>
 800eba8:	2b1d      	cmp	r3, #29
 800ebaa:	d001      	beq.n	800ebb0 <__sflush_r+0xac>
 800ebac:	2b16      	cmp	r3, #22
 800ebae:	d11e      	bne.n	800ebee <__sflush_r+0xea>
 800ebb0:	602f      	str	r7, [r5, #0]
 800ebb2:	2000      	movs	r0, #0
 800ebb4:	e022      	b.n	800ebfc <__sflush_r+0xf8>
 800ebb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebba:	b21b      	sxth	r3, r3
 800ebbc:	e01b      	b.n	800ebf6 <__sflush_r+0xf2>
 800ebbe:	690f      	ldr	r7, [r1, #16]
 800ebc0:	2f00      	cmp	r7, #0
 800ebc2:	d0f6      	beq.n	800ebb2 <__sflush_r+0xae>
 800ebc4:	0793      	lsls	r3, r2, #30
 800ebc6:	680e      	ldr	r6, [r1, #0]
 800ebc8:	bf08      	it	eq
 800ebca:	694b      	ldreq	r3, [r1, #20]
 800ebcc:	600f      	str	r7, [r1, #0]
 800ebce:	bf18      	it	ne
 800ebd0:	2300      	movne	r3, #0
 800ebd2:	eba6 0807 	sub.w	r8, r6, r7
 800ebd6:	608b      	str	r3, [r1, #8]
 800ebd8:	f1b8 0f00 	cmp.w	r8, #0
 800ebdc:	dde9      	ble.n	800ebb2 <__sflush_r+0xae>
 800ebde:	6a21      	ldr	r1, [r4, #32]
 800ebe0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800ebe2:	4643      	mov	r3, r8
 800ebe4:	463a      	mov	r2, r7
 800ebe6:	4628      	mov	r0, r5
 800ebe8:	47b0      	blx	r6
 800ebea:	2800      	cmp	r0, #0
 800ebec:	dc08      	bgt.n	800ec00 <__sflush_r+0xfc>
 800ebee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ebf2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ebf6:	81a3      	strh	r3, [r4, #12]
 800ebf8:	f04f 30ff 	mov.w	r0, #4294967295
 800ebfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec00:	4407      	add	r7, r0
 800ec02:	eba8 0800 	sub.w	r8, r8, r0
 800ec06:	e7e7      	b.n	800ebd8 <__sflush_r+0xd4>
 800ec08:	20400001 	.word	0x20400001

0800ec0c <_fflush_r>:
 800ec0c:	b538      	push	{r3, r4, r5, lr}
 800ec0e:	690b      	ldr	r3, [r1, #16]
 800ec10:	4605      	mov	r5, r0
 800ec12:	460c      	mov	r4, r1
 800ec14:	b913      	cbnz	r3, 800ec1c <_fflush_r+0x10>
 800ec16:	2500      	movs	r5, #0
 800ec18:	4628      	mov	r0, r5
 800ec1a:	bd38      	pop	{r3, r4, r5, pc}
 800ec1c:	b118      	cbz	r0, 800ec26 <_fflush_r+0x1a>
 800ec1e:	6a03      	ldr	r3, [r0, #32]
 800ec20:	b90b      	cbnz	r3, 800ec26 <_fflush_r+0x1a>
 800ec22:	f7ff f89d 	bl	800dd60 <__sinit>
 800ec26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec2a:	2b00      	cmp	r3, #0
 800ec2c:	d0f3      	beq.n	800ec16 <_fflush_r+0xa>
 800ec2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec30:	07d0      	lsls	r0, r2, #31
 800ec32:	d404      	bmi.n	800ec3e <_fflush_r+0x32>
 800ec34:	0599      	lsls	r1, r3, #22
 800ec36:	d402      	bmi.n	800ec3e <_fflush_r+0x32>
 800ec38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec3a:	f7ff fae2 	bl	800e202 <__retarget_lock_acquire_recursive>
 800ec3e:	4628      	mov	r0, r5
 800ec40:	4621      	mov	r1, r4
 800ec42:	f7ff ff5f 	bl	800eb04 <__sflush_r>
 800ec46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec48:	07da      	lsls	r2, r3, #31
 800ec4a:	4605      	mov	r5, r0
 800ec4c:	d4e4      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec4e:	89a3      	ldrh	r3, [r4, #12]
 800ec50:	059b      	lsls	r3, r3, #22
 800ec52:	d4e1      	bmi.n	800ec18 <_fflush_r+0xc>
 800ec54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec56:	f7ff fad5 	bl	800e204 <__retarget_lock_release_recursive>
 800ec5a:	e7dd      	b.n	800ec18 <_fflush_r+0xc>

0800ec5c <__swhatbuf_r>:
 800ec5c:	b570      	push	{r4, r5, r6, lr}
 800ec5e:	460c      	mov	r4, r1
 800ec60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ec64:	2900      	cmp	r1, #0
 800ec66:	b096      	sub	sp, #88	@ 0x58
 800ec68:	4615      	mov	r5, r2
 800ec6a:	461e      	mov	r6, r3
 800ec6c:	da0d      	bge.n	800ec8a <__swhatbuf_r+0x2e>
 800ec6e:	89a3      	ldrh	r3, [r4, #12]
 800ec70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ec74:	f04f 0100 	mov.w	r1, #0
 800ec78:	bf14      	ite	ne
 800ec7a:	2340      	movne	r3, #64	@ 0x40
 800ec7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ec80:	2000      	movs	r0, #0
 800ec82:	6031      	str	r1, [r6, #0]
 800ec84:	602b      	str	r3, [r5, #0]
 800ec86:	b016      	add	sp, #88	@ 0x58
 800ec88:	bd70      	pop	{r4, r5, r6, pc}
 800ec8a:	466a      	mov	r2, sp
 800ec8c:	f000 f862 	bl	800ed54 <_fstat_r>
 800ec90:	2800      	cmp	r0, #0
 800ec92:	dbec      	blt.n	800ec6e <__swhatbuf_r+0x12>
 800ec94:	9901      	ldr	r1, [sp, #4]
 800ec96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ec9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ec9e:	4259      	negs	r1, r3
 800eca0:	4159      	adcs	r1, r3
 800eca2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800eca6:	e7eb      	b.n	800ec80 <__swhatbuf_r+0x24>

0800eca8 <__smakebuf_r>:
 800eca8:	898b      	ldrh	r3, [r1, #12]
 800ecaa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ecac:	079d      	lsls	r5, r3, #30
 800ecae:	4606      	mov	r6, r0
 800ecb0:	460c      	mov	r4, r1
 800ecb2:	d507      	bpl.n	800ecc4 <__smakebuf_r+0x1c>
 800ecb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ecb8:	6023      	str	r3, [r4, #0]
 800ecba:	6123      	str	r3, [r4, #16]
 800ecbc:	2301      	movs	r3, #1
 800ecbe:	6163      	str	r3, [r4, #20]
 800ecc0:	b003      	add	sp, #12
 800ecc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ecc4:	ab01      	add	r3, sp, #4
 800ecc6:	466a      	mov	r2, sp
 800ecc8:	f7ff ffc8 	bl	800ec5c <__swhatbuf_r>
 800eccc:	9f00      	ldr	r7, [sp, #0]
 800ecce:	4605      	mov	r5, r0
 800ecd0:	4639      	mov	r1, r7
 800ecd2:	4630      	mov	r0, r6
 800ecd4:	f7fe ff2c 	bl	800db30 <_malloc_r>
 800ecd8:	b948      	cbnz	r0, 800ecee <__smakebuf_r+0x46>
 800ecda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecde:	059a      	lsls	r2, r3, #22
 800ece0:	d4ee      	bmi.n	800ecc0 <__smakebuf_r+0x18>
 800ece2:	f023 0303 	bic.w	r3, r3, #3
 800ece6:	f043 0302 	orr.w	r3, r3, #2
 800ecea:	81a3      	strh	r3, [r4, #12]
 800ecec:	e7e2      	b.n	800ecb4 <__smakebuf_r+0xc>
 800ecee:	89a3      	ldrh	r3, [r4, #12]
 800ecf0:	6020      	str	r0, [r4, #0]
 800ecf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ecf6:	81a3      	strh	r3, [r4, #12]
 800ecf8:	9b01      	ldr	r3, [sp, #4]
 800ecfa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ecfe:	b15b      	cbz	r3, 800ed18 <__smakebuf_r+0x70>
 800ed00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ed04:	4630      	mov	r0, r6
 800ed06:	f000 f837 	bl	800ed78 <_isatty_r>
 800ed0a:	b128      	cbz	r0, 800ed18 <__smakebuf_r+0x70>
 800ed0c:	89a3      	ldrh	r3, [r4, #12]
 800ed0e:	f023 0303 	bic.w	r3, r3, #3
 800ed12:	f043 0301 	orr.w	r3, r3, #1
 800ed16:	81a3      	strh	r3, [r4, #12]
 800ed18:	89a3      	ldrh	r3, [r4, #12]
 800ed1a:	431d      	orrs	r5, r3
 800ed1c:	81a5      	strh	r5, [r4, #12]
 800ed1e:	e7cf      	b.n	800ecc0 <__smakebuf_r+0x18>

0800ed20 <memmove>:
 800ed20:	4288      	cmp	r0, r1
 800ed22:	b510      	push	{r4, lr}
 800ed24:	eb01 0402 	add.w	r4, r1, r2
 800ed28:	d902      	bls.n	800ed30 <memmove+0x10>
 800ed2a:	4284      	cmp	r4, r0
 800ed2c:	4623      	mov	r3, r4
 800ed2e:	d807      	bhi.n	800ed40 <memmove+0x20>
 800ed30:	1e43      	subs	r3, r0, #1
 800ed32:	42a1      	cmp	r1, r4
 800ed34:	d008      	beq.n	800ed48 <memmove+0x28>
 800ed36:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ed3a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ed3e:	e7f8      	b.n	800ed32 <memmove+0x12>
 800ed40:	4402      	add	r2, r0
 800ed42:	4601      	mov	r1, r0
 800ed44:	428a      	cmp	r2, r1
 800ed46:	d100      	bne.n	800ed4a <memmove+0x2a>
 800ed48:	bd10      	pop	{r4, pc}
 800ed4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ed4e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ed52:	e7f7      	b.n	800ed44 <memmove+0x24>

0800ed54 <_fstat_r>:
 800ed54:	b538      	push	{r3, r4, r5, lr}
 800ed56:	4d07      	ldr	r5, [pc, #28]	@ (800ed74 <_fstat_r+0x20>)
 800ed58:	2300      	movs	r3, #0
 800ed5a:	4604      	mov	r4, r0
 800ed5c:	4608      	mov	r0, r1
 800ed5e:	4611      	mov	r1, r2
 800ed60:	602b      	str	r3, [r5, #0]
 800ed62:	f7f1 fe27 	bl	80009b4 <_fstat>
 800ed66:	1c43      	adds	r3, r0, #1
 800ed68:	d102      	bne.n	800ed70 <_fstat_r+0x1c>
 800ed6a:	682b      	ldr	r3, [r5, #0]
 800ed6c:	b103      	cbz	r3, 800ed70 <_fstat_r+0x1c>
 800ed6e:	6023      	str	r3, [r4, #0]
 800ed70:	bd38      	pop	{r3, r4, r5, pc}
 800ed72:	bf00      	nop
 800ed74:	20000d4c 	.word	0x20000d4c

0800ed78 <_isatty_r>:
 800ed78:	b538      	push	{r3, r4, r5, lr}
 800ed7a:	4d06      	ldr	r5, [pc, #24]	@ (800ed94 <_isatty_r+0x1c>)
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	4604      	mov	r4, r0
 800ed80:	4608      	mov	r0, r1
 800ed82:	602b      	str	r3, [r5, #0]
 800ed84:	f7f1 fe26 	bl	80009d4 <_isatty>
 800ed88:	1c43      	adds	r3, r0, #1
 800ed8a:	d102      	bne.n	800ed92 <_isatty_r+0x1a>
 800ed8c:	682b      	ldr	r3, [r5, #0]
 800ed8e:	b103      	cbz	r3, 800ed92 <_isatty_r+0x1a>
 800ed90:	6023      	str	r3, [r4, #0]
 800ed92:	bd38      	pop	{r3, r4, r5, pc}
 800ed94:	20000d4c 	.word	0x20000d4c

0800ed98 <_realloc_r>:
 800ed98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed9c:	4607      	mov	r7, r0
 800ed9e:	4614      	mov	r4, r2
 800eda0:	460d      	mov	r5, r1
 800eda2:	b921      	cbnz	r1, 800edae <_realloc_r+0x16>
 800eda4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800eda8:	4611      	mov	r1, r2
 800edaa:	f7fe bec1 	b.w	800db30 <_malloc_r>
 800edae:	b92a      	cbnz	r2, 800edbc <_realloc_r+0x24>
 800edb0:	f7ff fa38 	bl	800e224 <_free_r>
 800edb4:	4625      	mov	r5, r4
 800edb6:	4628      	mov	r0, r5
 800edb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800edbc:	f000 f81a 	bl	800edf4 <_malloc_usable_size_r>
 800edc0:	4284      	cmp	r4, r0
 800edc2:	4606      	mov	r6, r0
 800edc4:	d802      	bhi.n	800edcc <_realloc_r+0x34>
 800edc6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800edca:	d8f4      	bhi.n	800edb6 <_realloc_r+0x1e>
 800edcc:	4621      	mov	r1, r4
 800edce:	4638      	mov	r0, r7
 800edd0:	f7fe feae 	bl	800db30 <_malloc_r>
 800edd4:	4680      	mov	r8, r0
 800edd6:	b908      	cbnz	r0, 800eddc <_realloc_r+0x44>
 800edd8:	4645      	mov	r5, r8
 800edda:	e7ec      	b.n	800edb6 <_realloc_r+0x1e>
 800eddc:	42b4      	cmp	r4, r6
 800edde:	4622      	mov	r2, r4
 800ede0:	4629      	mov	r1, r5
 800ede2:	bf28      	it	cs
 800ede4:	4632      	movcs	r2, r6
 800ede6:	f7ff fa0e 	bl	800e206 <memcpy>
 800edea:	4629      	mov	r1, r5
 800edec:	4638      	mov	r0, r7
 800edee:	f7ff fa19 	bl	800e224 <_free_r>
 800edf2:	e7f1      	b.n	800edd8 <_realloc_r+0x40>

0800edf4 <_malloc_usable_size_r>:
 800edf4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800edf8:	1f18      	subs	r0, r3, #4
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	bfbc      	itt	lt
 800edfe:	580b      	ldrlt	r3, [r1, r0]
 800ee00:	18c0      	addlt	r0, r0, r3
 800ee02:	4770      	bx	lr

0800ee04 <_init>:
 800ee04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee06:	bf00      	nop
 800ee08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee0a:	bc08      	pop	{r3}
 800ee0c:	469e      	mov	lr, r3
 800ee0e:	4770      	bx	lr

0800ee10 <_fini>:
 800ee10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee12:	bf00      	nop
 800ee14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ee16:	bc08      	pop	{r3}
 800ee18:	469e      	mov	lr, r3
 800ee1a:	4770      	bx	lr
