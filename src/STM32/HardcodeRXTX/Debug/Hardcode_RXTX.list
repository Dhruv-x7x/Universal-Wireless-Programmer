
Hardcode_RXTX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049e4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001648  08004b84  08004b84  00005b84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061cc  080061cc  00008060  2**0
                  CONTENTS
  4 .ARM          00000008  080061cc  080061cc  000071cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080061d4  080061d4  00008060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d4  080061d4  000071d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061d8  080061d8  000071d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080061dc  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004fc  20000060  0800623c  00008060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000055c  0800623c  0000855c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008060  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008f12  00000000  00000000  00008090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a40  00000000  00000000  00010fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000790  00000000  00000000  000129e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005c2  00000000  00000000  00013178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b98  00000000  00000000  0001373a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a4b4  00000000  00000000  000292d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085846  00000000  00000000  00033786  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b8fcc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022a0  00000000  00000000  000b9010  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000bb2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000060 	.word	0x20000060
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004b6c 	.word	0x08004b6c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000064 	.word	0x20000064
 80001dc:	08004b6c 	.word	0x08004b6c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <MX_GPIO_Init+0xf8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a36      	ldr	r2, [pc, #216]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a28      	ldr	r2, [pc, #160]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	481c      	ldr	r0, [pc, #112]	@ (800067c <MX_GPIO_Init+0xfc>)
 800060c:	f002 f820 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	481a      	ldr	r0, [pc, #104]	@ (8000680 <MX_GPIO_Init+0x100>)
 8000616:	f002 f81b 	bl	8002650 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000620:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4814      	ldr	r0, [pc, #80]	@ (8000684 <MX_GPIO_Init+0x104>)
 8000632:	f001 fe89 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000636:	2320      	movs	r3, #32
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <MX_GPIO_Init+0xfc>)
 800064e:	f001 fe7b 	bl	8002348 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000652:	2310      	movs	r3, #16
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_GPIO_Init+0x100>)
 800066a:	f001 fe6d 	bl	8002348 <HAL_GPIO_Init>

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	@ 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800

08000688 <ResetArduino>:
/**
  * @brief Reset Arduino UNO into bootloader mode with precise timing for ATmega328P
  * @retval None
  */
void ResetArduino(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	af00      	add	r7, sp, #0
  // Log the reset action start
  sprintf(debugBuffer, "[%lu] SYSTEM: Arduino UNO reset sequence initiated\r\n", HAL_GetTick());
 800068c:	f001 fc7c 	bl	8001f88 <HAL_GetTick>
 8000690:	4603      	mov	r3, r0
 8000692:	461a      	mov	r2, r3
 8000694:	491a      	ldr	r1, [pc, #104]	@ (8000700 <ResetArduino+0x78>)
 8000696:	481b      	ldr	r0, [pc, #108]	@ (8000704 <ResetArduino+0x7c>)
 8000698:	f003 fdc8 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800069c:	4819      	ldr	r0, [pc, #100]	@ (8000704 <ResetArduino+0x7c>)
 800069e:	f7ff fd9f 	bl	80001e0 <strlen>
 80006a2:	4603      	mov	r3, r0
 80006a4:	b29a      	uxth	r2, r3
 80006a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006aa:	4916      	ldr	r1, [pc, #88]	@ (8000704 <ResetArduino+0x7c>)
 80006ac:	4816      	ldr	r0, [pc, #88]	@ (8000708 <ResetArduino+0x80>)
 80006ae:	f002 fcd1 	bl	8003054 <HAL_UART_Transmit>

  // UNO/ATmega328P specific bootloader entry sequence:

  // 1. Set RESET low (Arduino enters reset)
  HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2110      	movs	r1, #16
 80006b6:	4815      	ldr	r0, [pc, #84]	@ (800070c <ResetArduino+0x84>)
 80006b8:	f001 ffca 	bl	8002650 <HAL_GPIO_WritePin>

  // 2. Hold reset for much longer to ensure the LED visibly blinks (2 seconds)
  HAL_Delay(RESET_PULSE_DURATION);
 80006bc:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80006c0:	f001 fc6e 	bl	8001fa0 <HAL_Delay>

  // 3. Release RESET - bootloader starts immediately after release
  HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_SET);
 80006c4:	2201      	movs	r2, #1
 80006c6:	2110      	movs	r1, #16
 80006c8:	4810      	ldr	r0, [pc, #64]	@ (800070c <ResetArduino+0x84>)
 80006ca:	f001 ffc1 	bl	8002650 <HAL_GPIO_WritePin>

  // 4. Wait longer for the bootloader to initialize properly
  HAL_Delay(POST_RESET_DELAY);
 80006ce:	20fa      	movs	r0, #250	@ 0xfa
 80006d0:	f001 fc66 	bl	8001fa0 <HAL_Delay>

  // Log the reset action completion
  sprintf(debugBuffer, "[%lu] SYSTEM: Arduino UNO reset sequence completed - bootloader window active\r\n", HAL_GetTick());
 80006d4:	f001 fc58 	bl	8001f88 <HAL_GetTick>
 80006d8:	4603      	mov	r3, r0
 80006da:	461a      	mov	r2, r3
 80006dc:	490c      	ldr	r1, [pc, #48]	@ (8000710 <ResetArduino+0x88>)
 80006de:	4809      	ldr	r0, [pc, #36]	@ (8000704 <ResetArduino+0x7c>)
 80006e0:	f003 fda4 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80006e4:	4807      	ldr	r0, [pc, #28]	@ (8000704 <ResetArduino+0x7c>)
 80006e6:	f7ff fd7b 	bl	80001e0 <strlen>
 80006ea:	4603      	mov	r3, r0
 80006ec:	b29a      	uxth	r2, r3
 80006ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80006f2:	4904      	ldr	r1, [pc, #16]	@ (8000704 <ResetArduino+0x7c>)
 80006f4:	4804      	ldr	r0, [pc, #16]	@ (8000708 <ResetArduino+0x80>)
 80006f6:	f002 fcad 	bl	8003054 <HAL_UART_Transmit>
}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	08004b84 	.word	0x08004b84
 8000704:	2000017c 	.word	0x2000017c
 8000708:	200003c8 	.word	0x200003c8
 800070c:	40020400 	.word	0x40020400
 8000710:	08004bbc 	.word	0x08004bbc

08000714 <LogMessage>:
  * @param buffer: Message content
  * @param size: Message size
  * @retval None
  */
void LogMessage(LogType type, uint8_t* buffer, uint16_t size)
{
 8000714:	b590      	push	{r4, r7, lr}
 8000716:	b08f      	sub	sp, #60	@ 0x3c
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
 8000720:	4613      	mov	r3, r2
 8000722:	80bb      	strh	r3, [r7, #4]
  uint32_t timestamp = HAL_GetTick();
 8000724:	f001 fc30 	bl	8001f88 <HAL_GetTick>
 8000728:	6338      	str	r0, [r7, #48]	@ 0x30
  char prefix[32];

  // Determine message prefix based on type
  switch(type) {
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	2b00      	cmp	r3, #0
 800072e:	d002      	beq.n	8000736 <LogMessage+0x22>
 8000730:	2b01      	cmp	r3, #1
 8000732:	d009      	beq.n	8000748 <LogMessage+0x34>
 8000734:	e011      	b.n	800075a <LogMessage+0x46>
    case LOG_STM_TO_ARDUINO:
      strcpy(prefix, "STM->ARDUINO");
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	4a29      	ldr	r2, [pc, #164]	@ (80007e0 <LogMessage+0xcc>)
 800073c:	461c      	mov	r4, r3
 800073e:	4613      	mov	r3, r2
 8000740:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000742:	c407      	stmia	r4!, {r0, r1, r2}
 8000744:	7023      	strb	r3, [r4, #0]
      break;
 8000746:	e00f      	b.n	8000768 <LogMessage+0x54>
    case LOG_ARDUINO_TO_STM:
      strcpy(prefix, "ARDUINO->STM");
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	4a25      	ldr	r2, [pc, #148]	@ (80007e4 <LogMessage+0xd0>)
 800074e:	461c      	mov	r4, r3
 8000750:	4613      	mov	r3, r2
 8000752:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000754:	c407      	stmia	r4!, {r0, r1, r2}
 8000756:	7023      	strb	r3, [r4, #0]
      break;
 8000758:	e006      	b.n	8000768 <LogMessage+0x54>
    default:
      strcpy(prefix, "UNKNOWN");
 800075a:	f107 030c 	add.w	r3, r7, #12
 800075e:	4a22      	ldr	r2, [pc, #136]	@ (80007e8 <LogMessage+0xd4>)
 8000760:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000764:	e883 0003 	stmia.w	r3, {r0, r1}
  }

  // Format the log header with timestamp and direction
  sprintf(debugBuffer, "[%lu] %s: ", timestamp, prefix);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800076e:	491f      	ldr	r1, [pc, #124]	@ (80007ec <LogMessage+0xd8>)
 8000770:	481f      	ldr	r0, [pc, #124]	@ (80007f0 <LogMessage+0xdc>)
 8000772:	f003 fd5b 	bl	800422c <siprintf>
  uint16_t headerLen = strlen(debugBuffer);
 8000776:	481e      	ldr	r0, [pc, #120]	@ (80007f0 <LogMessage+0xdc>)
 8000778:	f7ff fd32 	bl	80001e0 <strlen>
 800077c:	4603      	mov	r3, r0
 800077e:	85fb      	strh	r3, [r7, #46]	@ 0x2e

  // Send log header
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, headerLen, UART_TIMEOUT);
 8000780:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000782:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000786:	491a      	ldr	r1, [pc, #104]	@ (80007f0 <LogMessage+0xdc>)
 8000788:	481a      	ldr	r0, [pc, #104]	@ (80007f4 <LogMessage+0xe0>)
 800078a:	f002 fc63 	bl	8003054 <HAL_UART_Transmit>

  // For binary data, output hex values
  for (uint16_t i = 0; i < size; i++) {
 800078e:	2300      	movs	r3, #0
 8000790:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000792:	e016      	b.n	80007c2 <LogMessage+0xae>
    sprintf(debugBuffer, "0x%02X ", buffer[i]);
 8000794:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8000796:	683a      	ldr	r2, [r7, #0]
 8000798:	4413      	add	r3, r2
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	461a      	mov	r2, r3
 800079e:	4916      	ldr	r1, [pc, #88]	@ (80007f8 <LogMessage+0xe4>)
 80007a0:	4813      	ldr	r0, [pc, #76]	@ (80007f0 <LogMessage+0xdc>)
 80007a2:	f003 fd43 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80007a6:	4812      	ldr	r0, [pc, #72]	@ (80007f0 <LogMessage+0xdc>)
 80007a8:	f7ff fd1a 	bl	80001e0 <strlen>
 80007ac:	4603      	mov	r3, r0
 80007ae:	b29a      	uxth	r2, r3
 80007b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007b4:	490e      	ldr	r1, [pc, #56]	@ (80007f0 <LogMessage+0xdc>)
 80007b6:	480f      	ldr	r0, [pc, #60]	@ (80007f4 <LogMessage+0xe0>)
 80007b8:	f002 fc4c 	bl	8003054 <HAL_UART_Transmit>
  for (uint16_t i = 0; i < size; i++) {
 80007bc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80007be:	3301      	adds	r3, #1
 80007c0:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80007c2:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 80007c4:	88bb      	ldrh	r3, [r7, #4]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	d3e4      	bcc.n	8000794 <LogMessage+0x80>
  }

  // Add newline
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"\r\n", 2, UART_TIMEOUT);
 80007ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007ce:	2202      	movs	r2, #2
 80007d0:	490a      	ldr	r1, [pc, #40]	@ (80007fc <LogMessage+0xe8>)
 80007d2:	4808      	ldr	r0, [pc, #32]	@ (80007f4 <LogMessage+0xe0>)
 80007d4:	f002 fc3e 	bl	8003054 <HAL_UART_Transmit>
}
 80007d8:	bf00      	nop
 80007da:	373c      	adds	r7, #60	@ 0x3c
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd90      	pop	{r4, r7, pc}
 80007e0:	08004c0c 	.word	0x08004c0c
 80007e4:	08004c1c 	.word	0x08004c1c
 80007e8:	08004c2c 	.word	0x08004c2c
 80007ec:	08004c34 	.word	0x08004c34
 80007f0:	2000017c 	.word	0x2000017c
 80007f4:	200003c8 	.word	0x200003c8
 80007f8:	08004c40 	.word	0x08004c40
 80007fc:	08004c48 	.word	0x08004c48

08000800 <SendDirectSync>:
/**
  * @brief Send a sync command directly to Arduino bootloader
  * @retval true if sync response received
  */
bool SendDirectSync(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
  uint8_t syncCmd[2] = {STK_GET_SYNC, STK_GET_SYNC_EXT};
 8000806:	f242 0330 	movw	r3, #8240	@ 0x2030
 800080a:	80bb      	strh	r3, [r7, #4]
  uint8_t response[2] = {0, 0};
 800080c:	2300      	movs	r3, #0
 800080e:	803b      	strh	r3, [r7, #0]
  bool success = false;
 8000810:	2300      	movs	r3, #0
 8000812:	71fb      	strb	r3, [r7, #7]

  // Log action
  sprintf(debugBuffer, "[%lu] SYSTEM: Sending direct sync command to bootloader\r\n", HAL_GetTick());
 8000814:	f001 fbb8 	bl	8001f88 <HAL_GetTick>
 8000818:	4603      	mov	r3, r0
 800081a:	461a      	mov	r2, r3
 800081c:	4963      	ldr	r1, [pc, #396]	@ (80009ac <SendDirectSync+0x1ac>)
 800081e:	4864      	ldr	r0, [pc, #400]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000820:	f003 fd04 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000824:	4862      	ldr	r0, [pc, #392]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000826:	f7ff fcdb 	bl	80001e0 <strlen>
 800082a:	4603      	mov	r3, r0
 800082c:	b29a      	uxth	r2, r3
 800082e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000832:	495f      	ldr	r1, [pc, #380]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000834:	485f      	ldr	r0, [pc, #380]	@ (80009b4 <SendDirectSync+0x1b4>)
 8000836:	f002 fc0d 	bl	8003054 <HAL_UART_Transmit>

  // Flush any existing data in the UART buffers
  HAL_UART_AbortReceive(&UART_ARDUINO);
 800083a:	485f      	ldr	r0, [pc, #380]	@ (80009b8 <SendDirectSync+0x1b8>)
 800083c:	f002 fd2c 	bl	8003298 <HAL_UART_AbortReceive>

  // Wait for UART to stabilize
  HAL_Delay(10);
 8000840:	200a      	movs	r0, #10
 8000842:	f001 fbad 	bl	8001fa0 <HAL_Delay>

  // Send sync command
  HAL_UART_Transmit(&UART_ARDUINO, syncCmd, 2, UART_TIMEOUT);
 8000846:	1d39      	adds	r1, r7, #4
 8000848:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800084c:	2202      	movs	r2, #2
 800084e:	485a      	ldr	r0, [pc, #360]	@ (80009b8 <SendDirectSync+0x1b8>)
 8000850:	f002 fc00 	bl	8003054 <HAL_UART_Transmit>

  // Try to receive first byte with longer timeout
  if (HAL_UART_Receive(&UART_ARDUINO, &response[0], 1, SYNC_RESPONSE_TIMEOUT) == HAL_OK) {
 8000854:	4639      	mov	r1, r7
 8000856:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800085a:	2201      	movs	r2, #1
 800085c:	4856      	ldr	r0, [pc, #344]	@ (80009b8 <SendDirectSync+0x1b8>)
 800085e:	f002 fc84 	bl	800316a <HAL_UART_Receive>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	f040 8089 	bne.w	800097c <SendDirectSync+0x17c>
    // We got the first byte, check if it's STK_INSYNC
    if (response[0] == STK_INSYNC) {
 800086a:	783b      	ldrb	r3, [r7, #0]
 800086c:	2b14      	cmp	r3, #20
 800086e:	d171      	bne.n	8000954 <SendDirectSync+0x154>
      sprintf(debugBuffer, "[%lu] SYSTEM: Received STK_INSYNC (0x%02X)\r\n", HAL_GetTick(), response[0]);
 8000870:	f001 fb8a 	bl	8001f88 <HAL_GetTick>
 8000874:	4602      	mov	r2, r0
 8000876:	783b      	ldrb	r3, [r7, #0]
 8000878:	4950      	ldr	r1, [pc, #320]	@ (80009bc <SendDirectSync+0x1bc>)
 800087a:	484d      	ldr	r0, [pc, #308]	@ (80009b0 <SendDirectSync+0x1b0>)
 800087c:	f003 fcd6 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000880:	484b      	ldr	r0, [pc, #300]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000882:	f7ff fcad 	bl	80001e0 <strlen>
 8000886:	4603      	mov	r3, r0
 8000888:	b29a      	uxth	r2, r3
 800088a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088e:	4948      	ldr	r1, [pc, #288]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000890:	4848      	ldr	r0, [pc, #288]	@ (80009b4 <SendDirectSync+0x1b4>)
 8000892:	f002 fbdf 	bl	8003054 <HAL_UART_Transmit>

      // Try to get the second byte (STK_OK) with dedicated timeout
      if (HAL_UART_Receive(&UART_ARDUINO, &response[1], 1, SECOND_BYTE_TIMEOUT) == HAL_OK) {
 8000896:	463b      	mov	r3, r7
 8000898:	1c59      	adds	r1, r3, #1
 800089a:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 800089e:	2201      	movs	r2, #1
 80008a0:	4845      	ldr	r0, [pc, #276]	@ (80009b8 <SendDirectSync+0x1b8>)
 80008a2:	f002 fc62 	bl	800316a <HAL_UART_Receive>
 80008a6:	4603      	mov	r3, r0
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d13f      	bne.n	800092c <SendDirectSync+0x12c>
        sprintf(debugBuffer, "[%lu] SYSTEM: Received second byte: 0x%02X\r\n", HAL_GetTick(), response[1]);
 80008ac:	f001 fb6c 	bl	8001f88 <HAL_GetTick>
 80008b0:	4602      	mov	r2, r0
 80008b2:	787b      	ldrb	r3, [r7, #1]
 80008b4:	4942      	ldr	r1, [pc, #264]	@ (80009c0 <SendDirectSync+0x1c0>)
 80008b6:	483e      	ldr	r0, [pc, #248]	@ (80009b0 <SendDirectSync+0x1b0>)
 80008b8:	f003 fcb8 	bl	800422c <siprintf>
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80008bc:	483c      	ldr	r0, [pc, #240]	@ (80009b0 <SendDirectSync+0x1b0>)
 80008be:	f7ff fc8f 	bl	80001e0 <strlen>
 80008c2:	4603      	mov	r3, r0
 80008c4:	b29a      	uxth	r2, r3
 80008c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ca:	4939      	ldr	r1, [pc, #228]	@ (80009b0 <SendDirectSync+0x1b0>)
 80008cc:	4839      	ldr	r0, [pc, #228]	@ (80009b4 <SendDirectSync+0x1b4>)
 80008ce:	f002 fbc1 	bl	8003054 <HAL_UART_Transmit>

        if (response[1] == STK_OK) {
 80008d2:	787b      	ldrb	r3, [r7, #1]
 80008d4:	2b10      	cmp	r3, #16
 80008d6:	d115      	bne.n	8000904 <SendDirectSync+0x104>
          sprintf(debugBuffer, "[%lu] SYSTEM: Second byte is STK_OK - Bootloader sync confirmed!\r\n", HAL_GetTick());
 80008d8:	f001 fb56 	bl	8001f88 <HAL_GetTick>
 80008dc:	4603      	mov	r3, r0
 80008de:	461a      	mov	r2, r3
 80008e0:	4938      	ldr	r1, [pc, #224]	@ (80009c4 <SendDirectSync+0x1c4>)
 80008e2:	4833      	ldr	r0, [pc, #204]	@ (80009b0 <SendDirectSync+0x1b0>)
 80008e4:	f003 fca2 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80008e8:	4831      	ldr	r0, [pc, #196]	@ (80009b0 <SendDirectSync+0x1b0>)
 80008ea:	f7ff fc79 	bl	80001e0 <strlen>
 80008ee:	4603      	mov	r3, r0
 80008f0:	b29a      	uxth	r2, r3
 80008f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008f6:	492e      	ldr	r1, [pc, #184]	@ (80009b0 <SendDirectSync+0x1b0>)
 80008f8:	482e      	ldr	r0, [pc, #184]	@ (80009b4 <SendDirectSync+0x1b4>)
 80008fa:	f002 fbab 	bl	8003054 <HAL_UART_Transmit>
          success = true;
 80008fe:	2301      	movs	r3, #1
 8000900:	71fb      	strb	r3, [r7, #7]
 8000902:	e04e      	b.n	80009a2 <SendDirectSync+0x1a2>
        } else {
          sprintf(debugBuffer, "[%lu] SYSTEM: Second byte is not STK_OK\r\n", HAL_GetTick());
 8000904:	f001 fb40 	bl	8001f88 <HAL_GetTick>
 8000908:	4603      	mov	r3, r0
 800090a:	461a      	mov	r2, r3
 800090c:	492e      	ldr	r1, [pc, #184]	@ (80009c8 <SendDirectSync+0x1c8>)
 800090e:	4828      	ldr	r0, [pc, #160]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000910:	f003 fc8c 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000914:	4826      	ldr	r0, [pc, #152]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000916:	f7ff fc63 	bl	80001e0 <strlen>
 800091a:	4603      	mov	r3, r0
 800091c:	b29a      	uxth	r2, r3
 800091e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000922:	4923      	ldr	r1, [pc, #140]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000924:	4823      	ldr	r0, [pc, #140]	@ (80009b4 <SendDirectSync+0x1b4>)
 8000926:	f002 fb95 	bl	8003054 <HAL_UART_Transmit>
 800092a:	e03a      	b.n	80009a2 <SendDirectSync+0x1a2>
        }
      } else {
        sprintf(debugBuffer, "[%lu] SYSTEM: No second byte received after STK_INSYNC\r\n", HAL_GetTick());
 800092c:	f001 fb2c 	bl	8001f88 <HAL_GetTick>
 8000930:	4603      	mov	r3, r0
 8000932:	461a      	mov	r2, r3
 8000934:	4925      	ldr	r1, [pc, #148]	@ (80009cc <SendDirectSync+0x1cc>)
 8000936:	481e      	ldr	r0, [pc, #120]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000938:	f003 fc78 	bl	800422c <siprintf>
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800093c:	481c      	ldr	r0, [pc, #112]	@ (80009b0 <SendDirectSync+0x1b0>)
 800093e:	f7ff fc4f 	bl	80001e0 <strlen>
 8000942:	4603      	mov	r3, r0
 8000944:	b29a      	uxth	r2, r3
 8000946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800094a:	4919      	ldr	r1, [pc, #100]	@ (80009b0 <SendDirectSync+0x1b0>)
 800094c:	4819      	ldr	r0, [pc, #100]	@ (80009b4 <SendDirectSync+0x1b4>)
 800094e:	f002 fb81 	bl	8003054 <HAL_UART_Transmit>
 8000952:	e026      	b.n	80009a2 <SendDirectSync+0x1a2>
      }
    } else {
      sprintf(debugBuffer, "[%lu] SYSTEM: Received 0x%02X instead of STK_INSYNC\r\n", HAL_GetTick(), response[0]);
 8000954:	f001 fb18 	bl	8001f88 <HAL_GetTick>
 8000958:	4602      	mov	r2, r0
 800095a:	783b      	ldrb	r3, [r7, #0]
 800095c:	491c      	ldr	r1, [pc, #112]	@ (80009d0 <SendDirectSync+0x1d0>)
 800095e:	4814      	ldr	r0, [pc, #80]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000960:	f003 fc64 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000964:	4812      	ldr	r0, [pc, #72]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000966:	f7ff fc3b 	bl	80001e0 <strlen>
 800096a:	4603      	mov	r3, r0
 800096c:	b29a      	uxth	r2, r3
 800096e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000972:	490f      	ldr	r1, [pc, #60]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000974:	480f      	ldr	r0, [pc, #60]	@ (80009b4 <SendDirectSync+0x1b4>)
 8000976:	f002 fb6d 	bl	8003054 <HAL_UART_Transmit>
 800097a:	e012      	b.n	80009a2 <SendDirectSync+0x1a2>
    }
  } else {
    sprintf(debugBuffer, "[%lu] SYSTEM: No response from bootloader\r\n", HAL_GetTick());
 800097c:	f001 fb04 	bl	8001f88 <HAL_GetTick>
 8000980:	4603      	mov	r3, r0
 8000982:	461a      	mov	r2, r3
 8000984:	4913      	ldr	r1, [pc, #76]	@ (80009d4 <SendDirectSync+0x1d4>)
 8000986:	480a      	ldr	r0, [pc, #40]	@ (80009b0 <SendDirectSync+0x1b0>)
 8000988:	f003 fc50 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800098c:	4808      	ldr	r0, [pc, #32]	@ (80009b0 <SendDirectSync+0x1b0>)
 800098e:	f7ff fc27 	bl	80001e0 <strlen>
 8000992:	4603      	mov	r3, r0
 8000994:	b29a      	uxth	r2, r3
 8000996:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800099a:	4905      	ldr	r1, [pc, #20]	@ (80009b0 <SendDirectSync+0x1b0>)
 800099c:	4805      	ldr	r0, [pc, #20]	@ (80009b4 <SendDirectSync+0x1b4>)
 800099e:	f002 fb59 	bl	8003054 <HAL_UART_Transmit>
  }

  return success;
 80009a2:	79fb      	ldrb	r3, [r7, #7]
}
 80009a4:	4618      	mov	r0, r3
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08004c4c 	.word	0x08004c4c
 80009b0:	2000017c 	.word	0x2000017c
 80009b4:	200003c8 	.word	0x200003c8
 80009b8:	20000380 	.word	0x20000380
 80009bc:	08004c88 	.word	0x08004c88
 80009c0:	08004cb8 	.word	0x08004cb8
 80009c4:	08004ce8 	.word	0x08004ce8
 80009c8:	08004d2c 	.word	0x08004d2c
 80009cc:	08004d58 	.word	0x08004d58
 80009d0:	08004d94 	.word	0x08004d94
 80009d4:	08004dcc 	.word	0x08004dcc

080009d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	b082      	sub	sp, #8
 80009dc:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/
  HAL_Init();
 80009de:	f001 fa6d 	bl	8001ebc <HAL_Init>
  SystemClock_Config();
 80009e2:	f001 f83f 	bl	8001a64 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009e6:	f7ff fdcb 	bl	8000580 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80009ea:	f001 f965 	bl	8001cb8 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80009ee:	f001 f98d 	bl	8001d0c <MX_USART2_UART_Init>

  // Initialize Arduino reset pin to high (not in reset)
  HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_SET);
 80009f2:	2201      	movs	r2, #1
 80009f4:	2110      	movs	r1, #16
 80009f6:	4849      	ldr	r0, [pc, #292]	@ (8000b1c <main+0x144>)
 80009f8:	f001 fe2a 	bl	8002650 <HAL_GPIO_WritePin>
  HAL_Delay(500); // Initial delay to stabilize
 80009fc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000a00:	f001 face 	bl	8001fa0 <HAL_Delay>

  // Send startup message to debug UART
  sprintf(debugBuffer, "[%lu] SYSTEM: STM32 USB-Serial bridge for Arduino UNO started\r\n", HAL_GetTick());
 8000a04:	f001 fac0 	bl	8001f88 <HAL_GetTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	4944      	ldr	r1, [pc, #272]	@ (8000b20 <main+0x148>)
 8000a0e:	4845      	ldr	r0, [pc, #276]	@ (8000b24 <main+0x14c>)
 8000a10:	f003 fc0c 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000a14:	4843      	ldr	r0, [pc, #268]	@ (8000b24 <main+0x14c>)
 8000a16:	f7ff fbe3 	bl	80001e0 <strlen>
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	b29a      	uxth	r2, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a22:	4940      	ldr	r1, [pc, #256]	@ (8000b24 <main+0x14c>)
 8000a24:	4840      	ldr	r0, [pc, #256]	@ (8000b28 <main+0x150>)
 8000a26:	f002 fb15 	bl	8003054 <HAL_UART_Transmit>

  // UNO bootloader works at 115200 baud
  sprintf(debugBuffer, "[%lu] SYSTEM: Target: Arduino UNO (ATmega328P) at 115200 baud\r\n", HAL_GetTick());
 8000a2a:	f001 faad 	bl	8001f88 <HAL_GetTick>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	493e      	ldr	r1, [pc, #248]	@ (8000b2c <main+0x154>)
 8000a34:	483b      	ldr	r0, [pc, #236]	@ (8000b24 <main+0x14c>)
 8000a36:	f003 fbf9 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000a3a:	483a      	ldr	r0, [pc, #232]	@ (8000b24 <main+0x14c>)
 8000a3c:	f7ff fbd0 	bl	80001e0 <strlen>
 8000a40:	4603      	mov	r3, r0
 8000a42:	b29a      	uxth	r2, r3
 8000a44:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a48:	4936      	ldr	r1, [pc, #216]	@ (8000b24 <main+0x14c>)
 8000a4a:	4837      	ldr	r0, [pc, #220]	@ (8000b28 <main+0x150>)
 8000a4c:	f002 fb02 	bl	8003054 <HAL_UART_Transmit>

  // Attempt to upload hex file
  sprintf(debugBuffer, "[%lu] SYSTEM: Starting Arduino hex file upload\r\n", HAL_GetTick());
 8000a50:	f001 fa9a 	bl	8001f88 <HAL_GetTick>
 8000a54:	4603      	mov	r3, r0
 8000a56:	461a      	mov	r2, r3
 8000a58:	4935      	ldr	r1, [pc, #212]	@ (8000b30 <main+0x158>)
 8000a5a:	4832      	ldr	r0, [pc, #200]	@ (8000b24 <main+0x14c>)
 8000a5c:	f003 fbe6 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000a60:	4830      	ldr	r0, [pc, #192]	@ (8000b24 <main+0x14c>)
 8000a62:	f7ff fbbd 	bl	80001e0 <strlen>
 8000a66:	4603      	mov	r3, r0
 8000a68:	b29a      	uxth	r2, r3
 8000a6a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a6e:	492d      	ldr	r1, [pc, #180]	@ (8000b24 <main+0x14c>)
 8000a70:	482d      	ldr	r0, [pc, #180]	@ (8000b28 <main+0x150>)
 8000a72:	f002 faef 	bl	8003054 <HAL_UART_Transmit>

  if (UploadHexFile()) {
 8000a76:	f000 fe51 	bl	800171c <UploadHexFile>
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d013      	beq.n	8000aa8 <main+0xd0>
    sprintf(debugBuffer, "[%lu] SYSTEM: Upload successful - Arduino is now running the new program\r\n", HAL_GetTick());
 8000a80:	f001 fa82 	bl	8001f88 <HAL_GetTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	461a      	mov	r2, r3
 8000a88:	492a      	ldr	r1, [pc, #168]	@ (8000b34 <main+0x15c>)
 8000a8a:	4826      	ldr	r0, [pc, #152]	@ (8000b24 <main+0x14c>)
 8000a8c:	f003 fbce 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000a90:	4824      	ldr	r0, [pc, #144]	@ (8000b24 <main+0x14c>)
 8000a92:	f7ff fba5 	bl	80001e0 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	b29a      	uxth	r2, r3
 8000a9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a9e:	4921      	ldr	r1, [pc, #132]	@ (8000b24 <main+0x14c>)
 8000aa0:	4821      	ldr	r0, [pc, #132]	@ (8000b28 <main+0x150>)
 8000aa2:	f002 fad7 	bl	8003054 <HAL_UART_Transmit>
 8000aa6:	e012      	b.n	8000ace <main+0xf6>
  } else {
    sprintf(debugBuffer, "[%lu] SYSTEM: Upload failed - Check connections and retry\r\n", HAL_GetTick());
 8000aa8:	f001 fa6e 	bl	8001f88 <HAL_GetTick>
 8000aac:	4603      	mov	r3, r0
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4921      	ldr	r1, [pc, #132]	@ (8000b38 <main+0x160>)
 8000ab2:	481c      	ldr	r0, [pc, #112]	@ (8000b24 <main+0x14c>)
 8000ab4:	f003 fbba 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000ab8:	481a      	ldr	r0, [pc, #104]	@ (8000b24 <main+0x14c>)
 8000aba:	f7ff fb91 	bl	80001e0 <strlen>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	b29a      	uxth	r2, r3
 8000ac2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac6:	4917      	ldr	r1, [pc, #92]	@ (8000b24 <main+0x14c>)
 8000ac8:	4817      	ldr	r0, [pc, #92]	@ (8000b28 <main+0x150>)
 8000aca:	f002 fac3 	bl	8003054 <HAL_UART_Transmit>
  }

  // Infinite loop after completing upload
  while (1) {
    // Check for data from Arduino
    if (HAL_UART_Receive(&UART_ARDUINO, rxBuffer, 1, 10) == HAL_OK) {
 8000ace:	230a      	movs	r3, #10
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	491a      	ldr	r1, [pc, #104]	@ (8000b3c <main+0x164>)
 8000ad4:	481a      	ldr	r0, [pc, #104]	@ (8000b40 <main+0x168>)
 8000ad6:	f002 fb48 	bl	800316a <HAL_UART_Receive>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d119      	bne.n	8000b14 <main+0x13c>
      // Got at least one byte, check for more with short timeout
      uint16_t rxSize = 1;
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	80fb      	strh	r3, [r7, #6]

      // Try to receive more bytes that might be in the buffer (with short timeout)
      while (rxSize < RX_BUFFER_SIZE &&
 8000ae4:	e002      	b.n	8000aec <main+0x114>
             HAL_UART_Receive(&UART_ARDUINO, &rxBuffer[rxSize], 1, 2) == HAL_OK) {
        rxSize++;
 8000ae6:	88fb      	ldrh	r3, [r7, #6]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	80fb      	strh	r3, [r7, #6]
      while (rxSize < RX_BUFFER_SIZE &&
 8000aec:	88fb      	ldrh	r3, [r7, #6]
 8000aee:	2bff      	cmp	r3, #255	@ 0xff
 8000af0:	d80a      	bhi.n	8000b08 <main+0x130>
             HAL_UART_Receive(&UART_ARDUINO, &rxBuffer[rxSize], 1, 2) == HAL_OK) {
 8000af2:	88fb      	ldrh	r3, [r7, #6]
 8000af4:	4a11      	ldr	r2, [pc, #68]	@ (8000b3c <main+0x164>)
 8000af6:	1899      	adds	r1, r3, r2
 8000af8:	2302      	movs	r3, #2
 8000afa:	2201      	movs	r2, #1
 8000afc:	4810      	ldr	r0, [pc, #64]	@ (8000b40 <main+0x168>)
 8000afe:	f002 fb34 	bl	800316a <HAL_UART_Receive>
 8000b02:	4603      	mov	r3, r0
      while (rxSize < RX_BUFFER_SIZE &&
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d0ee      	beq.n	8000ae6 <main+0x10e>
      }

      // Log data received from Arduino
      LogMessage(LOG_ARDUINO_TO_STM, rxBuffer, rxSize);
 8000b08:	88fb      	ldrh	r3, [r7, #6]
 8000b0a:	461a      	mov	r2, r3
 8000b0c:	490b      	ldr	r1, [pc, #44]	@ (8000b3c <main+0x164>)
 8000b0e:	2001      	movs	r0, #1
 8000b10:	f7ff fe00 	bl	8000714 <LogMessage>
    }

    // Blink an LED or perform other maintenance tasks
    HAL_Delay(100);
 8000b14:	2064      	movs	r0, #100	@ 0x64
 8000b16:	f001 fa43 	bl	8001fa0 <HAL_Delay>
    if (HAL_UART_Receive(&UART_ARDUINO, rxBuffer, 1, 10) == HAL_OK) {
 8000b1a:	e7d8      	b.n	8000ace <main+0xf6>
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	08004df8 	.word	0x08004df8
 8000b24:	2000017c 	.word	0x2000017c
 8000b28:	200003c8 	.word	0x200003c8
 8000b2c:	08004e38 	.word	0x08004e38
 8000b30:	08004e78 	.word	0x08004e78
 8000b34:	08004eac 	.word	0x08004eac
 8000b38:	08004ef8 	.word	0x08004ef8
 8000b3c:	2000007c 	.word	0x2000007c
 8000b40:	20000380 	.word	0x20000380

08000b44 <SendSyncWithRetries>:
  * @brief Send sync commands with multiple retries
  * @param retries: Number of sync command retries
  * @retval true if sync was achieved
  */
bool SendSyncWithRetries(uint8_t retries)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b086      	sub	sp, #24
 8000b48:	af02      	add	r7, sp, #8
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  bool syncSuccess = false;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < retries; i++) {
 8000b52:	2300      	movs	r3, #0
 8000b54:	73bb      	strb	r3, [r7, #14]
 8000b56:	e02a      	b.n	8000bae <SendSyncWithRetries+0x6a>
    sprintf(debugBuffer, "[%lu] SYSTEM: Sync attempt %d of %d\r\n", HAL_GetTick(), i+1, retries);
 8000b58:	f001 fa16 	bl	8001f88 <HAL_GetTick>
 8000b5c:	4601      	mov	r1, r0
 8000b5e:	7bbb      	ldrb	r3, [r7, #14]
 8000b60:	1c5a      	adds	r2, r3, #1
 8000b62:	79fb      	ldrb	r3, [r7, #7]
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	4613      	mov	r3, r2
 8000b68:	460a      	mov	r2, r1
 8000b6a:	4915      	ldr	r1, [pc, #84]	@ (8000bc0 <SendSyncWithRetries+0x7c>)
 8000b6c:	4815      	ldr	r0, [pc, #84]	@ (8000bc4 <SendSyncWithRetries+0x80>)
 8000b6e:	f003 fb5d 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000b72:	4814      	ldr	r0, [pc, #80]	@ (8000bc4 <SendSyncWithRetries+0x80>)
 8000b74:	f7ff fb34 	bl	80001e0 <strlen>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	b29a      	uxth	r2, r3
 8000b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b80:	4910      	ldr	r1, [pc, #64]	@ (8000bc4 <SendSyncWithRetries+0x80>)
 8000b82:	4811      	ldr	r0, [pc, #68]	@ (8000bc8 <SendSyncWithRetries+0x84>)
 8000b84:	f002 fa66 	bl	8003054 <HAL_UART_Transmit>

    if (SendDirectSync()) {
 8000b88:	f7ff fe3a 	bl	8000800 <SendDirectSync>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d002      	beq.n	8000b98 <SendSyncWithRetries+0x54>
      syncSuccess = true;
 8000b92:	2301      	movs	r3, #1
 8000b94:	73fb      	strb	r3, [r7, #15]
      break;
 8000b96:	e00e      	b.n	8000bb6 <SendSyncWithRetries+0x72>
    }

    // Wait before trying again
    if (i < retries - 1) {
 8000b98:	7bba      	ldrb	r2, [r7, #14]
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	3b01      	subs	r3, #1
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	da02      	bge.n	8000ba8 <SendSyncWithRetries+0x64>
      HAL_Delay(SYNC_RETRY_DELAY);
 8000ba2:	2064      	movs	r0, #100	@ 0x64
 8000ba4:	f001 f9fc 	bl	8001fa0 <HAL_Delay>
  for (uint8_t i = 0; i < retries; i++) {
 8000ba8:	7bbb      	ldrb	r3, [r7, #14]
 8000baa:	3301      	adds	r3, #1
 8000bac:	73bb      	strb	r3, [r7, #14]
 8000bae:	7bba      	ldrb	r2, [r7, #14]
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	d3d0      	bcc.n	8000b58 <SendSyncWithRetries+0x14>
    }
  }

  return syncSuccess;
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	08004f34 	.word	0x08004f34
 8000bc4:	2000017c 	.word	0x2000017c
 8000bc8:	200003c8 	.word	0x200003c8

08000bcc <ResetAndSyncArduino>:
  * @brief Perform multiple reset attempts to ensure bootloader entry
  * @param attempts: Number of reset attempts
  * @retval true if sync was achieved
  */
bool ResetAndSyncArduino(uint8_t attempts)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af02      	add	r7, sp, #8
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	71fb      	strb	r3, [r7, #7]
  bool syncAchieved = false;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	73fb      	strb	r3, [r7, #15]

  for (uint8_t i = 0; i < attempts; i++) {
 8000bda:	2300      	movs	r3, #0
 8000bdc:	73bb      	strb	r3, [r7, #14]
 8000bde:	e058      	b.n	8000c92 <ResetAndSyncArduino+0xc6>
    // Log attempt number if multiple attempts
    if (attempts > 1) {
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	2b01      	cmp	r3, #1
 8000be4:	d917      	bls.n	8000c16 <ResetAndSyncArduino+0x4a>
      sprintf(debugBuffer, "[%lu] SYSTEM: Reset attempt %d of %d\r\n", HAL_GetTick(), i+1, attempts);
 8000be6:	f001 f9cf 	bl	8001f88 <HAL_GetTick>
 8000bea:	4601      	mov	r1, r0
 8000bec:	7bbb      	ldrb	r3, [r7, #14]
 8000bee:	1c5a      	adds	r2, r3, #1
 8000bf0:	79fb      	ldrb	r3, [r7, #7]
 8000bf2:	9300      	str	r3, [sp, #0]
 8000bf4:	4613      	mov	r3, r2
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	4938      	ldr	r1, [pc, #224]	@ (8000cdc <ResetAndSyncArduino+0x110>)
 8000bfa:	4839      	ldr	r0, [pc, #228]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000bfc:	f003 fb16 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000c00:	4837      	ldr	r0, [pc, #220]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c02:	f7ff faed 	bl	80001e0 <strlen>
 8000c06:	4603      	mov	r3, r0
 8000c08:	b29a      	uxth	r2, r3
 8000c0a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c0e:	4934      	ldr	r1, [pc, #208]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c10:	4834      	ldr	r0, [pc, #208]	@ (8000ce4 <ResetAndSyncArduino+0x118>)
 8000c12:	f002 fa1f 	bl	8003054 <HAL_UART_Transmit>
    }

    // Reset Arduino
    ResetArduino();
 8000c16:	f7ff fd37 	bl	8000688 <ResetArduino>

    // Try multiple sync commands after each reset
    if (SendSyncWithRetries(ARDUINO_SYNC_RETRIES)) {
 8000c1a:	200a      	movs	r0, #10
 8000c1c:	f7ff ff92 	bl	8000b44 <SendSyncWithRetries>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d016      	beq.n	8000c54 <ResetAndSyncArduino+0x88>
      sprintf(debugBuffer, "[%lu] SYSTEM: Bootloader sync achieved on reset attempt %d!\r\n", HAL_GetTick(), i+1);
 8000c26:	f001 f9af 	bl	8001f88 <HAL_GetTick>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	7bbb      	ldrb	r3, [r7, #14]
 8000c2e:	3301      	adds	r3, #1
 8000c30:	492d      	ldr	r1, [pc, #180]	@ (8000ce8 <ResetAndSyncArduino+0x11c>)
 8000c32:	482b      	ldr	r0, [pc, #172]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c34:	f003 fafa 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000c38:	4829      	ldr	r0, [pc, #164]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c3a:	f7ff fad1 	bl	80001e0 <strlen>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	b29a      	uxth	r2, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c46:	4926      	ldr	r1, [pc, #152]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c48:	4826      	ldr	r0, [pc, #152]	@ (8000ce4 <ResetAndSyncArduino+0x118>)
 8000c4a:	f002 fa03 	bl	8003054 <HAL_UART_Transmit>
      syncAchieved = true;
 8000c4e:	2301      	movs	r3, #1
 8000c50:	73fb      	strb	r3, [r7, #15]
      break;
 8000c52:	e022      	b.n	8000c9a <ResetAndSyncArduino+0xce>
    }

    // If this wasn't the last attempt, wait before trying again
    if (i < attempts - 1) {
 8000c54:	7bba      	ldrb	r2, [r7, #14]
 8000c56:	79fb      	ldrb	r3, [r7, #7]
 8000c58:	3b01      	subs	r3, #1
 8000c5a:	429a      	cmp	r2, r3
 8000c5c:	da16      	bge.n	8000c8c <ResetAndSyncArduino+0xc0>
      sprintf(debugBuffer, "[%lu] SYSTEM: Sync failed, waiting before next reset attempt...\r\n", HAL_GetTick());
 8000c5e:	f001 f993 	bl	8001f88 <HAL_GetTick>
 8000c62:	4603      	mov	r3, r0
 8000c64:	461a      	mov	r2, r3
 8000c66:	4921      	ldr	r1, [pc, #132]	@ (8000cec <ResetAndSyncArduino+0x120>)
 8000c68:	481d      	ldr	r0, [pc, #116]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c6a:	f003 fadf 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000c6e:	481c      	ldr	r0, [pc, #112]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c70:	f7ff fab6 	bl	80001e0 <strlen>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7c:	4918      	ldr	r1, [pc, #96]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000c7e:	4819      	ldr	r0, [pc, #100]	@ (8000ce4 <ResetAndSyncArduino+0x118>)
 8000c80:	f002 f9e8 	bl	8003054 <HAL_UART_Transmit>
      HAL_Delay(INTER_RESET_DELAY);
 8000c84:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000c88:	f001 f98a 	bl	8001fa0 <HAL_Delay>
  for (uint8_t i = 0; i < attempts; i++) {
 8000c8c:	7bbb      	ldrb	r3, [r7, #14]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73bb      	strb	r3, [r7, #14]
 8000c92:	7bba      	ldrb	r2, [r7, #14]
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	429a      	cmp	r2, r3
 8000c98:	d3a2      	bcc.n	8000be0 <ResetAndSyncArduino+0x14>
    }
  }

  if (!syncAchieved && attempts > 1) {
 8000c9a:	7bfb      	ldrb	r3, [r7, #15]
 8000c9c:	f083 0301 	eor.w	r3, r3, #1
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d015      	beq.n	8000cd2 <ResetAndSyncArduino+0x106>
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	2b01      	cmp	r3, #1
 8000caa:	d912      	bls.n	8000cd2 <ResetAndSyncArduino+0x106>
    sprintf(debugBuffer, "[%lu] SYSTEM: Failed to sync after %d reset attempts\r\n", HAL_GetTick(), attempts);
 8000cac:	f001 f96c 	bl	8001f88 <HAL_GetTick>
 8000cb0:	4602      	mov	r2, r0
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	490e      	ldr	r1, [pc, #56]	@ (8000cf0 <ResetAndSyncArduino+0x124>)
 8000cb6:	480a      	ldr	r0, [pc, #40]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000cb8:	f003 fab8 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000cbc:	4808      	ldr	r0, [pc, #32]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000cbe:	f7ff fa8f 	bl	80001e0 <strlen>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cca:	4905      	ldr	r1, [pc, #20]	@ (8000ce0 <ResetAndSyncArduino+0x114>)
 8000ccc:	4805      	ldr	r0, [pc, #20]	@ (8000ce4 <ResetAndSyncArduino+0x118>)
 8000cce:	f002 f9c1 	bl	8003054 <HAL_UART_Transmit>
  }

  return syncAchieved;
 8000cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3710      	adds	r7, #16
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	08004f5c 	.word	0x08004f5c
 8000ce0:	2000017c 	.word	0x2000017c
 8000ce4:	200003c8 	.word	0x200003c8
 8000ce8:	08004f84 	.word	0x08004f84
 8000cec:	08004fc4 	.word	0x08004fc4
 8000cf0:	08005008 	.word	0x08005008

08000cf4 <SendCommandAndWaitForSync>:
  * @param  response: Buffer to store any additional response data
  * @param  responseSize: Expected response data size (excluding INSYNC/OK bytes)
  * @retval true if command succeeded
  */
bool SendCommandAndWaitForSync(uint8_t cmd, uint8_t *params, uint8_t paramSize, uint8_t *response, uint8_t responseSize)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	f5ad 7d0b 	sub.w	sp, sp, #556	@ 0x22c
 8000cfa:	af02      	add	r7, sp, #8
 8000cfc:	4604      	mov	r4, r0
 8000cfe:	f507 7008 	add.w	r0, r7, #544	@ 0x220
 8000d02:	f5a0 7006 	sub.w	r0, r0, #536	@ 0x218
 8000d06:	6001      	str	r1, [r0, #0]
 8000d08:	4611      	mov	r1, r2
 8000d0a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000d0e:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8000d12:	6013      	str	r3, [r2, #0]
 8000d14:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d18:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8000d1c:	4622      	mov	r2, r4
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d24:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8000d28:	460a      	mov	r2, r1
 8000d2a:	701a      	strb	r2, [r3, #0]
  uint8_t cmdBuffer[RX_BUFFER_SIZE];
  uint8_t respBuffer[2 + RX_BUFFER_SIZE]; // INSYNC + OK + any response data
  bool success = false;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

  // Prepare command buffer
  cmdBuffer[0] = cmd;
 8000d32:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d36:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000d3a:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000d3e:	f2a2 2211 	subw	r2, r2, #529	@ 0x211
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	701a      	strb	r2, [r3, #0]

  // Copy parameters if any
  if (params != NULL && paramSize > 0) {
 8000d46:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d4a:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d016      	beq.n	8000d82 <SendCommandAndWaitForSync+0x8e>
 8000d54:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d58:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d00f      	beq.n	8000d82 <SendCommandAndWaitForSync+0x8e>
    memcpy(&cmdBuffer[1], params, paramSize);
 8000d62:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d66:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8000d6a:	7819      	ldrb	r1, [r3, #0]
 8000d6c:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d70:	f5a3 7306 	sub.w	r3, r3, #536	@ 0x218
 8000d74:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000d78:	1c50      	adds	r0, r2, #1
 8000d7a:	460a      	mov	r2, r1
 8000d7c:	6819      	ldr	r1, [r3, #0]
 8000d7e:	f003 faa9 	bl	80042d4 <memcpy>
  }

  // Add Sync_CRC_EOP byte at the end
  cmdBuffer[1 + paramSize] = 0x20;  // Sync_CRC_EOP
 8000d82:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d86:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	3301      	adds	r3, #1
 8000d8e:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000d92:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8000d96:	2120      	movs	r1, #32
 8000d98:	54d1      	strb	r1, [r2, r3]

  // Total command size is: 1 byte command + paramSize + 1 byte Sync_CRC_EOP
  uint8_t totalSize = 1 + paramSize + 1;
 8000d9a:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000d9e:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	3302      	adds	r3, #2
 8000da6:	f887 3216 	strb.w	r3, [r7, #534]	@ 0x216

  // Log command with detailed hex values
  sprintf(debugBuffer, "[%lu] UPLOAD: Sending command 0x%02X with %d params + Sync_CRC_EOP\r\n",
 8000daa:	f001 f8ed 	bl	8001f88 <HAL_GetTick>
 8000dae:	4601      	mov	r1, r0
 8000db0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000db4:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8000db8:	781a      	ldrb	r2, [r3, #0]
 8000dba:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000dbe:	f2a3 2312 	subw	r3, r3, #530	@ 0x212
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	9300      	str	r3, [sp, #0]
 8000dc6:	4613      	mov	r3, r2
 8000dc8:	460a      	mov	r2, r1
 8000dca:	49bd      	ldr	r1, [pc, #756]	@ (80010c0 <SendCommandAndWaitForSync+0x3cc>)
 8000dcc:	48bd      	ldr	r0, [pc, #756]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000dce:	f003 fa2d 	bl	800422c <siprintf>
          HAL_GetTick(), cmd, paramSize);
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000dd2:	48bc      	ldr	r0, [pc, #752]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000dd4:	f7ff fa04 	bl	80001e0 <strlen>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de0:	49b8      	ldr	r1, [pc, #736]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000de2:	48b9      	ldr	r0, [pc, #740]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000de4:	f002 f936 	bl	8003054 <HAL_UART_Transmit>

  // For detailed debugging, log the exact bytes being sent
  sprintf(debugBuffer, "[%lu] UPLOAD: Raw bytes: ", HAL_GetTick());
 8000de8:	f001 f8ce 	bl	8001f88 <HAL_GetTick>
 8000dec:	4603      	mov	r3, r0
 8000dee:	461a      	mov	r2, r3
 8000df0:	49b6      	ldr	r1, [pc, #728]	@ (80010cc <SendCommandAndWaitForSync+0x3d8>)
 8000df2:	48b4      	ldr	r0, [pc, #720]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000df4:	f003 fa1a 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000df8:	48b2      	ldr	r0, [pc, #712]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000dfa:	f7ff f9f1 	bl	80001e0 <strlen>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	b29a      	uxth	r2, r3
 8000e02:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e06:	49af      	ldr	r1, [pc, #700]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e08:	48af      	ldr	r0, [pc, #700]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000e0a:	f002 f923 	bl	8003054 <HAL_UART_Transmit>

  for (int i = 0; i < totalSize; i++) {
 8000e0e:	2300      	movs	r3, #0
 8000e10:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000e14:	e01c      	b.n	8000e50 <SendCommandAndWaitForSync+0x15c>
    sprintf(debugBuffer, "0x%02X ", cmdBuffer[i]);
 8000e16:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000e1a:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8000e1e:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000e22:	4413      	add	r3, r2
 8000e24:	781b      	ldrb	r3, [r3, #0]
 8000e26:	461a      	mov	r2, r3
 8000e28:	49a9      	ldr	r1, [pc, #676]	@ (80010d0 <SendCommandAndWaitForSync+0x3dc>)
 8000e2a:	48a6      	ldr	r0, [pc, #664]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e2c:	f003 f9fe 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000e30:	48a4      	ldr	r0, [pc, #656]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e32:	f7ff f9d5 	bl	80001e0 <strlen>
 8000e36:	4603      	mov	r3, r0
 8000e38:	b29a      	uxth	r2, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3e:	49a1      	ldr	r1, [pc, #644]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e40:	48a1      	ldr	r0, [pc, #644]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000e42:	f002 f907 	bl	8003054 <HAL_UART_Transmit>
  for (int i = 0; i < totalSize; i++) {
 8000e46:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218
 8000e50:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8000e54:	f8d7 2218 	ldr.w	r2, [r7, #536]	@ 0x218
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	dbdc      	blt.n	8000e16 <SendCommandAndWaitForSync+0x122>
  }

  sprintf(debugBuffer, "\r\n");
 8000e5c:	499d      	ldr	r1, [pc, #628]	@ (80010d4 <SendCommandAndWaitForSync+0x3e0>)
 8000e5e:	4899      	ldr	r0, [pc, #612]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e60:	f003 f9e4 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000e64:	4897      	ldr	r0, [pc, #604]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e66:	f7ff f9bb 	bl	80001e0 <strlen>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e72:	4994      	ldr	r1, [pc, #592]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000e74:	4894      	ldr	r0, [pc, #592]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000e76:	f002 f8ed 	bl	8003054 <HAL_UART_Transmit>

  // Flush any existing data in the UART buffers
  HAL_UART_AbortReceive(&UART_ARDUINO);
 8000e7a:	4897      	ldr	r0, [pc, #604]	@ (80010d8 <SendCommandAndWaitForSync+0x3e4>)
 8000e7c:	f002 fa0c 	bl	8003298 <HAL_UART_AbortReceive>

  // Wait for UART to stabilize
  HAL_Delay(10);
 8000e80:	200a      	movs	r0, #10
 8000e82:	f001 f88d 	bl	8001fa0 <HAL_Delay>

  // Send command + parameters + Sync_CRC_EOP
  HAL_UART_Transmit(&UART_ARDUINO, cmdBuffer, totalSize, UART_TIMEOUT);
 8000e86:	f897 3216 	ldrb.w	r3, [r7, #534]	@ 0x216
 8000e8a:	b29a      	uxth	r2, r3
 8000e8c:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000e90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e94:	4890      	ldr	r0, [pc, #576]	@ (80010d8 <SendCommandAndWaitForSync+0x3e4>)
 8000e96:	f002 f8dd 	bl	8003054 <HAL_UART_Transmit>

  // Try to receive first byte with longer timeout (INSYNC)
  if (HAL_UART_Receive(&UART_ARDUINO, &respBuffer[0], 1, SYNC_RESPONSE_TIMEOUT) == HAL_OK) {
 8000e9a:	f107 0110 	add.w	r1, r7, #16
 8000e9e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	488c      	ldr	r0, [pc, #560]	@ (80010d8 <SendCommandAndWaitForSync+0x3e4>)
 8000ea6:	f002 f960 	bl	800316a <HAL_UART_Receive>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	f040 8125 	bne.w	80010fc <SendCommandAndWaitForSync+0x408>
    // We got the first byte, check if it's STK_INSYNC
    if (respBuffer[0] == STK_INSYNC) {
 8000eb2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000eb6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b14      	cmp	r3, #20
 8000ebe:	f040 80e6 	bne.w	800108e <SendCommandAndWaitForSync+0x39a>
      sprintf(debugBuffer, "[%lu] UPLOAD: Received STK_INSYNC (0x%02X)\r\n", HAL_GetTick(), respBuffer[0]);
 8000ec2:	f001 f861 	bl	8001f88 <HAL_GetTick>
 8000ec6:	4602      	mov	r2, r0
 8000ec8:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ecc:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	4982      	ldr	r1, [pc, #520]	@ (80010dc <SendCommandAndWaitForSync+0x3e8>)
 8000ed4:	487b      	ldr	r0, [pc, #492]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000ed6:	f003 f9a9 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000eda:	487a      	ldr	r0, [pc, #488]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000edc:	f7ff f980 	bl	80001e0 <strlen>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	b29a      	uxth	r2, r3
 8000ee4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee8:	4976      	ldr	r1, [pc, #472]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000eea:	4877      	ldr	r0, [pc, #476]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000eec:	f002 f8b2 	bl	8003054 <HAL_UART_Transmit>

      // Receive additional response data if expected
      if (response != NULL && responseSize > 0) {
 8000ef0:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ef4:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d05a      	beq.n	8000fb4 <SendCommandAndWaitForSync+0x2c0>
 8000efe:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d056      	beq.n	8000fb4 <SendCommandAndWaitForSync+0x2c0>
        // Process response data one byte at a time with logging
        for (uint8_t i = 0; i < responseSize; i++) {
 8000f06:	2300      	movs	r3, #0
 8000f08:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8000f0c:	e04c      	b.n	8000fa8 <SendCommandAndWaitForSync+0x2b4>
          if (HAL_UART_Receive(&UART_ARDUINO, &response[i], 1, UART_TIMEOUT) != HAL_OK) {
 8000f0e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000f12:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000f16:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	18d1      	adds	r1, r2, r3
 8000f1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f22:	2201      	movs	r2, #1
 8000f24:	486c      	ldr	r0, [pc, #432]	@ (80010d8 <SendCommandAndWaitForSync+0x3e4>)
 8000f26:	f002 f920 	bl	800316a <HAL_UART_Receive>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d016      	beq.n	8000f5e <SendCommandAndWaitForSync+0x26a>
            sprintf(debugBuffer, "[%lu] UPLOAD: Failed to receive response byte %d\r\n", HAL_GetTick(), i+1);
 8000f30:	f001 f82a 	bl	8001f88 <HAL_GetTick>
 8000f34:	4602      	mov	r2, r0
 8000f36:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000f3a:	3301      	adds	r3, #1
 8000f3c:	4968      	ldr	r1, [pc, #416]	@ (80010e0 <SendCommandAndWaitForSync+0x3ec>)
 8000f3e:	4861      	ldr	r0, [pc, #388]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000f40:	f003 f974 	bl	800422c <siprintf>
            HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000f44:	485f      	ldr	r0, [pc, #380]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000f46:	f7ff f94b 	bl	80001e0 <strlen>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f52:	495c      	ldr	r1, [pc, #368]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000f54:	485c      	ldr	r0, [pc, #368]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000f56:	f002 f87d 	bl	8003054 <HAL_UART_Transmit>
            return false;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	e0e3      	b.n	8001126 <SendCommandAndWaitForSync+0x432>
          }

          sprintf(debugBuffer, "[%lu] UPLOAD: Response byte %d: 0x%02X\r\n", HAL_GetTick(), i+1, response[i]);
 8000f5e:	f001 f813 	bl	8001f88 <HAL_GetTick>
 8000f62:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000f66:	1c59      	adds	r1, r3, #1
 8000f68:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000f6c:	f507 7208 	add.w	r2, r7, #544	@ 0x220
 8000f70:	f5a2 7207 	sub.w	r2, r2, #540	@ 0x21c
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	4413      	add	r3, r2
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	9300      	str	r3, [sp, #0]
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4602      	mov	r2, r0
 8000f80:	4958      	ldr	r1, [pc, #352]	@ (80010e4 <SendCommandAndWaitForSync+0x3f0>)
 8000f82:	4850      	ldr	r0, [pc, #320]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000f84:	f003 f952 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000f88:	484e      	ldr	r0, [pc, #312]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000f8a:	f7ff f929 	bl	80001e0 <strlen>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	b29a      	uxth	r2, r3
 8000f92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f96:	494b      	ldr	r1, [pc, #300]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000f98:	484b      	ldr	r0, [pc, #300]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000f9a:	f002 f85b 	bl	8003054 <HAL_UART_Transmit>
        for (uint8_t i = 0; i < responseSize; i++) {
 8000f9e:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000fa2:	3301      	adds	r3, #1
 8000fa4:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217
 8000fa8:	f897 2217 	ldrb.w	r2, [r7, #535]	@ 0x217
 8000fac:	f897 3230 	ldrb.w	r3, [r7, #560]	@ 0x230
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d3ac      	bcc.n	8000f0e <SendCommandAndWaitForSync+0x21a>
        }
      }

      // Try to get the final byte (STK_OK) with dedicated timeout
      if (HAL_UART_Receive(&UART_ARDUINO, &respBuffer[1], 1, SECOND_BYTE_TIMEOUT) == HAL_OK) {
 8000fb4:	f107 0310 	add.w	r3, r7, #16
 8000fb8:	1c59      	adds	r1, r3, #1
 8000fba:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	4845      	ldr	r0, [pc, #276]	@ (80010d8 <SendCommandAndWaitForSync+0x3e4>)
 8000fc2:	f002 f8d2 	bl	800316a <HAL_UART_Receive>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d14c      	bne.n	8001066 <SendCommandAndWaitForSync+0x372>
        sprintf(debugBuffer, "[%lu] UPLOAD: Received final byte: 0x%02X\r\n", HAL_GetTick(), respBuffer[1]);
 8000fcc:	f000 ffdc 	bl	8001f88 <HAL_GetTick>
 8000fd0:	4602      	mov	r2, r0
 8000fd2:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000fd6:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	4942      	ldr	r1, [pc, #264]	@ (80010e8 <SendCommandAndWaitForSync+0x3f4>)
 8000fde:	4839      	ldr	r0, [pc, #228]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000fe0:	f003 f924 	bl	800422c <siprintf>
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000fe4:	4837      	ldr	r0, [pc, #220]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000fe6:	f7ff f8fb 	bl	80001e0 <strlen>
 8000fea:	4603      	mov	r3, r0
 8000fec:	b29a      	uxth	r2, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff2:	4934      	ldr	r1, [pc, #208]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8000ff4:	4834      	ldr	r0, [pc, #208]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8000ff6:	f002 f82d 	bl	8003054 <HAL_UART_Transmit>

        if (respBuffer[1] == STK_OK) {
 8000ffa:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8000ffe:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001002:	785b      	ldrb	r3, [r3, #1]
 8001004:	2b10      	cmp	r3, #16
 8001006:	d11a      	bne.n	800103e <SendCommandAndWaitForSync+0x34a>
          sprintf(debugBuffer, "[%lu] UPLOAD: Command 0x%02X completed successfully!\r\n", HAL_GetTick(), cmd);
 8001008:	f000 ffbe 	bl	8001f88 <HAL_GetTick>
 800100c:	4602      	mov	r2, r0
 800100e:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001012:	f2a3 2311 	subw	r3, r3, #529	@ 0x211
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	4934      	ldr	r1, [pc, #208]	@ (80010ec <SendCommandAndWaitForSync+0x3f8>)
 800101a:	482a      	ldr	r0, [pc, #168]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 800101c:	f003 f906 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001020:	4828      	ldr	r0, [pc, #160]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8001022:	f7ff f8dd 	bl	80001e0 <strlen>
 8001026:	4603      	mov	r3, r0
 8001028:	b29a      	uxth	r2, r3
 800102a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800102e:	4925      	ldr	r1, [pc, #148]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8001030:	4825      	ldr	r0, [pc, #148]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8001032:	f002 f80f 	bl	8003054 <HAL_UART_Transmit>
          success = true;
 8001036:	2301      	movs	r3, #1
 8001038:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f
 800103c:	e071      	b.n	8001122 <SendCommandAndWaitForSync+0x42e>
        } else {
          sprintf(debugBuffer, "[%lu] UPLOAD: Final byte is not STK_OK\r\n", HAL_GetTick());
 800103e:	f000 ffa3 	bl	8001f88 <HAL_GetTick>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	492a      	ldr	r1, [pc, #168]	@ (80010f0 <SendCommandAndWaitForSync+0x3fc>)
 8001048:	481e      	ldr	r0, [pc, #120]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 800104a:	f003 f8ef 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800104e:	481d      	ldr	r0, [pc, #116]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8001050:	f7ff f8c6 	bl	80001e0 <strlen>
 8001054:	4603      	mov	r3, r0
 8001056:	b29a      	uxth	r2, r3
 8001058:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105c:	4919      	ldr	r1, [pc, #100]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 800105e:	481a      	ldr	r0, [pc, #104]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8001060:	f001 fff8 	bl	8003054 <HAL_UART_Transmit>
 8001064:	e05d      	b.n	8001122 <SendCommandAndWaitForSync+0x42e>
        }
      } else {
        sprintf(debugBuffer, "[%lu] UPLOAD: No final byte received after STK_INSYNC\r\n", HAL_GetTick());
 8001066:	f000 ff8f 	bl	8001f88 <HAL_GetTick>
 800106a:	4603      	mov	r3, r0
 800106c:	461a      	mov	r2, r3
 800106e:	4921      	ldr	r1, [pc, #132]	@ (80010f4 <SendCommandAndWaitForSync+0x400>)
 8001070:	4814      	ldr	r0, [pc, #80]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8001072:	f003 f8db 	bl	800422c <siprintf>
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001076:	4813      	ldr	r0, [pc, #76]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8001078:	f7ff f8b2 	bl	80001e0 <strlen>
 800107c:	4603      	mov	r3, r0
 800107e:	b29a      	uxth	r2, r3
 8001080:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001084:	490f      	ldr	r1, [pc, #60]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 8001086:	4810      	ldr	r0, [pc, #64]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 8001088:	f001 ffe4 	bl	8003054 <HAL_UART_Transmit>
 800108c:	e049      	b.n	8001122 <SendCommandAndWaitForSync+0x42e>
      }
    } else {
      sprintf(debugBuffer, "[%lu] UPLOAD: Received 0x%02X instead of STK_INSYNC\r\n", HAL_GetTick(), respBuffer[0]);
 800108e:	f000 ff7b 	bl	8001f88 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	f507 7308 	add.w	r3, r7, #544	@ 0x220
 8001098:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	4916      	ldr	r1, [pc, #88]	@ (80010f8 <SendCommandAndWaitForSync+0x404>)
 80010a0:	4808      	ldr	r0, [pc, #32]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 80010a2:	f003 f8c3 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80010a6:	4807      	ldr	r0, [pc, #28]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 80010a8:	f7ff f89a 	bl	80001e0 <strlen>
 80010ac:	4603      	mov	r3, r0
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80010b4:	4903      	ldr	r1, [pc, #12]	@ (80010c4 <SendCommandAndWaitForSync+0x3d0>)
 80010b6:	4804      	ldr	r0, [pc, #16]	@ (80010c8 <SendCommandAndWaitForSync+0x3d4>)
 80010b8:	f001 ffcc 	bl	8003054 <HAL_UART_Transmit>
 80010bc:	e031      	b.n	8001122 <SendCommandAndWaitForSync+0x42e>
 80010be:	bf00      	nop
 80010c0:	08005040 	.word	0x08005040
 80010c4:	2000017c 	.word	0x2000017c
 80010c8:	200003c8 	.word	0x200003c8
 80010cc:	08005088 	.word	0x08005088
 80010d0:	08004c40 	.word	0x08004c40
 80010d4:	08004c48 	.word	0x08004c48
 80010d8:	20000380 	.word	0x20000380
 80010dc:	080050a4 	.word	0x080050a4
 80010e0:	080050d4 	.word	0x080050d4
 80010e4:	08005108 	.word	0x08005108
 80010e8:	08005134 	.word	0x08005134
 80010ec:	08005160 	.word	0x08005160
 80010f0:	08005198 	.word	0x08005198
 80010f4:	080051c4 	.word	0x080051c4
 80010f8:	080051fc 	.word	0x080051fc
    }
  } else {
    sprintf(debugBuffer, "[%lu] UPLOAD: No response from bootloader\r\n", HAL_GetTick());
 80010fc:	f000 ff44 	bl	8001f88 <HAL_GetTick>
 8001100:	4603      	mov	r3, r0
 8001102:	461a      	mov	r2, r3
 8001104:	490a      	ldr	r1, [pc, #40]	@ (8001130 <SendCommandAndWaitForSync+0x43c>)
 8001106:	480b      	ldr	r0, [pc, #44]	@ (8001134 <SendCommandAndWaitForSync+0x440>)
 8001108:	f003 f890 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <SendCommandAndWaitForSync+0x440>)
 800110e:	f7ff f867 	bl	80001e0 <strlen>
 8001112:	4603      	mov	r3, r0
 8001114:	b29a      	uxth	r2, r3
 8001116:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800111a:	4906      	ldr	r1, [pc, #24]	@ (8001134 <SendCommandAndWaitForSync+0x440>)
 800111c:	4806      	ldr	r0, [pc, #24]	@ (8001138 <SendCommandAndWaitForSync+0x444>)
 800111e:	f001 ff99 	bl	8003054 <HAL_UART_Transmit>
  }

  return success;
 8001122:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
}
 8001126:	4618      	mov	r0, r3
 8001128:	f507 7709 	add.w	r7, r7, #548	@ 0x224
 800112c:	46bd      	mov	sp, r7
 800112e:	bd90      	pop	{r4, r7, pc}
 8001130:	08005234 	.word	0x08005234
 8001134:	2000017c 	.word	0x2000017c
 8001138:	200003c8 	.word	0x200003c8

0800113c <EnterProgrammingMode>:
/**
  * @brief  Enter programming mode
  * @retval true if successful
  */
bool EnterProgrammingMode(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af02      	add	r7, sp, #8
  uint8_t cmd[2] = {STK_ENTER_PROGMODE, 0x20};  // Command + Sync_CRC_EOP
 8001142:	f242 0350 	movw	r3, #8272	@ 0x2050
 8001146:	80bb      	strh	r3, [r7, #4]
  uint8_t response[2] = {0, 0};
 8001148:	2300      	movs	r3, #0
 800114a:	803b      	strh	r3, [r7, #0]
  bool success = false;
 800114c:	2300      	movs	r3, #0
 800114e:	71fb      	strb	r3, [r7, #7]

  // Log action
  sprintf(debugBuffer, "[%lu] UPLOAD: Sending enter programming mode command\r\n", HAL_GetTick());
 8001150:	f000 ff1a 	bl	8001f88 <HAL_GetTick>
 8001154:	4603      	mov	r3, r0
 8001156:	461a      	mov	r2, r3
 8001158:	496f      	ldr	r1, [pc, #444]	@ (8001318 <EnterProgrammingMode+0x1dc>)
 800115a:	4870      	ldr	r0, [pc, #448]	@ (800131c <EnterProgrammingMode+0x1e0>)
 800115c:	f003 f866 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001160:	486e      	ldr	r0, [pc, #440]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001162:	f7ff f83d 	bl	80001e0 <strlen>
 8001166:	4603      	mov	r3, r0
 8001168:	b29a      	uxth	r2, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800116e:	496b      	ldr	r1, [pc, #428]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001170:	486b      	ldr	r0, [pc, #428]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 8001172:	f001 ff6f 	bl	8003054 <HAL_UART_Transmit>

  // Flush any existing data in the UART buffers
  HAL_UART_AbortReceive(&UART_ARDUINO);
 8001176:	486b      	ldr	r0, [pc, #428]	@ (8001324 <EnterProgrammingMode+0x1e8>)
 8001178:	f002 f88e 	bl	8003298 <HAL_UART_AbortReceive>

  // Wait for UART to stabilize
  HAL_Delay(10);
 800117c:	200a      	movs	r0, #10
 800117e:	f000 ff0f 	bl	8001fa0 <HAL_Delay>

  // Send command
  HAL_UART_Transmit(&UART_ARDUINO, cmd, 2, UART_TIMEOUT);
 8001182:	1d39      	adds	r1, r7, #4
 8001184:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001188:	2202      	movs	r2, #2
 800118a:	4866      	ldr	r0, [pc, #408]	@ (8001324 <EnterProgrammingMode+0x1e8>)
 800118c:	f001 ff62 	bl	8003054 <HAL_UART_Transmit>

  // Log the bytes sent
  sprintf(debugBuffer, "[%lu] UPLOAD: Sent bytes: 0x%02X 0x%02X\r\n", HAL_GetTick(), cmd[0], cmd[1]);
 8001190:	f000 fefa 	bl	8001f88 <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	793b      	ldrb	r3, [r7, #4]
 8001198:	4619      	mov	r1, r3
 800119a:	797b      	ldrb	r3, [r7, #5]
 800119c:	9300      	str	r3, [sp, #0]
 800119e:	460b      	mov	r3, r1
 80011a0:	4961      	ldr	r1, [pc, #388]	@ (8001328 <EnterProgrammingMode+0x1ec>)
 80011a2:	485e      	ldr	r0, [pc, #376]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80011a4:	f003 f842 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80011a8:	485c      	ldr	r0, [pc, #368]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80011aa:	f7ff f819 	bl	80001e0 <strlen>
 80011ae:	4603      	mov	r3, r0
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011b6:	4959      	ldr	r1, [pc, #356]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80011b8:	4859      	ldr	r0, [pc, #356]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 80011ba:	f001 ff4b 	bl	8003054 <HAL_UART_Transmit>

  // Try to receive first byte with longer timeout
  if (HAL_UART_Receive(&UART_ARDUINO, &response[0], 1, SYNC_RESPONSE_TIMEOUT) == HAL_OK) {
 80011be:	4639      	mov	r1, r7
 80011c0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80011c4:	2201      	movs	r2, #1
 80011c6:	4857      	ldr	r0, [pc, #348]	@ (8001324 <EnterProgrammingMode+0x1e8>)
 80011c8:	f001 ffcf 	bl	800316a <HAL_UART_Receive>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f040 8089 	bne.w	80012e6 <EnterProgrammingMode+0x1aa>
    // We got the first byte, check if it's STK_INSYNC
    if (response[0] == STK_INSYNC) {
 80011d4:	783b      	ldrb	r3, [r7, #0]
 80011d6:	2b14      	cmp	r3, #20
 80011d8:	d171      	bne.n	80012be <EnterProgrammingMode+0x182>
      sprintf(debugBuffer, "[%lu] UPLOAD: Received STK_INSYNC (0x%02X)\r\n", HAL_GetTick(), response[0]);
 80011da:	f000 fed5 	bl	8001f88 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	783b      	ldrb	r3, [r7, #0]
 80011e2:	4952      	ldr	r1, [pc, #328]	@ (800132c <EnterProgrammingMode+0x1f0>)
 80011e4:	484d      	ldr	r0, [pc, #308]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80011e6:	f003 f821 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80011ea:	484c      	ldr	r0, [pc, #304]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80011ec:	f7fe fff8 	bl	80001e0 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f8:	4948      	ldr	r1, [pc, #288]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80011fa:	4849      	ldr	r0, [pc, #292]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 80011fc:	f001 ff2a 	bl	8003054 <HAL_UART_Transmit>

      // Try to get the second byte (STK_OK) with dedicated timeout
      if (HAL_UART_Receive(&UART_ARDUINO, &response[1], 1, SECOND_BYTE_TIMEOUT) == HAL_OK) {
 8001200:	463b      	mov	r3, r7
 8001202:	1c59      	adds	r1, r3, #1
 8001204:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8001208:	2201      	movs	r2, #1
 800120a:	4846      	ldr	r0, [pc, #280]	@ (8001324 <EnterProgrammingMode+0x1e8>)
 800120c:	f001 ffad 	bl	800316a <HAL_UART_Receive>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d13f      	bne.n	8001296 <EnterProgrammingMode+0x15a>
        sprintf(debugBuffer, "[%lu] UPLOAD: Received second byte: 0x%02X\r\n", HAL_GetTick(), response[1]);
 8001216:	f000 feb7 	bl	8001f88 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	787b      	ldrb	r3, [r7, #1]
 800121e:	4944      	ldr	r1, [pc, #272]	@ (8001330 <EnterProgrammingMode+0x1f4>)
 8001220:	483e      	ldr	r0, [pc, #248]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001222:	f003 f803 	bl	800422c <siprintf>
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001226:	483d      	ldr	r0, [pc, #244]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001228:	f7fe ffda 	bl	80001e0 <strlen>
 800122c:	4603      	mov	r3, r0
 800122e:	b29a      	uxth	r2, r3
 8001230:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001234:	4939      	ldr	r1, [pc, #228]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001236:	483a      	ldr	r0, [pc, #232]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 8001238:	f001 ff0c 	bl	8003054 <HAL_UART_Transmit>

        if (response[1] == STK_OK) {
 800123c:	787b      	ldrb	r3, [r7, #1]
 800123e:	2b10      	cmp	r3, #16
 8001240:	d115      	bne.n	800126e <EnterProgrammingMode+0x132>
          sprintf(debugBuffer, "[%lu] UPLOAD: Programming mode entered successfully!\r\n", HAL_GetTick());
 8001242:	f000 fea1 	bl	8001f88 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	461a      	mov	r2, r3
 800124a:	493a      	ldr	r1, [pc, #232]	@ (8001334 <EnterProgrammingMode+0x1f8>)
 800124c:	4833      	ldr	r0, [pc, #204]	@ (800131c <EnterProgrammingMode+0x1e0>)
 800124e:	f002 ffed 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001252:	4832      	ldr	r0, [pc, #200]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001254:	f7fe ffc4 	bl	80001e0 <strlen>
 8001258:	4603      	mov	r3, r0
 800125a:	b29a      	uxth	r2, r3
 800125c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001260:	492e      	ldr	r1, [pc, #184]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001262:	482f      	ldr	r0, [pc, #188]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 8001264:	f001 fef6 	bl	8003054 <HAL_UART_Transmit>
          success = true;
 8001268:	2301      	movs	r3, #1
 800126a:	71fb      	strb	r3, [r7, #7]
 800126c:	e04e      	b.n	800130c <EnterProgrammingMode+0x1d0>
        } else {
          sprintf(debugBuffer, "[%lu] UPLOAD: Second byte is not STK_OK\r\n", HAL_GetTick());
 800126e:	f000 fe8b 	bl	8001f88 <HAL_GetTick>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	4930      	ldr	r1, [pc, #192]	@ (8001338 <EnterProgrammingMode+0x1fc>)
 8001278:	4828      	ldr	r0, [pc, #160]	@ (800131c <EnterProgrammingMode+0x1e0>)
 800127a:	f002 ffd7 	bl	800422c <siprintf>
          HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800127e:	4827      	ldr	r0, [pc, #156]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001280:	f7fe ffae 	bl	80001e0 <strlen>
 8001284:	4603      	mov	r3, r0
 8001286:	b29a      	uxth	r2, r3
 8001288:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128c:	4923      	ldr	r1, [pc, #140]	@ (800131c <EnterProgrammingMode+0x1e0>)
 800128e:	4824      	ldr	r0, [pc, #144]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 8001290:	f001 fee0 	bl	8003054 <HAL_UART_Transmit>
 8001294:	e03a      	b.n	800130c <EnterProgrammingMode+0x1d0>
        }
      } else {
        sprintf(debugBuffer, "[%lu] UPLOAD: No second byte received after STK_INSYNC\r\n", HAL_GetTick());
 8001296:	f000 fe77 	bl	8001f88 <HAL_GetTick>
 800129a:	4603      	mov	r3, r0
 800129c:	461a      	mov	r2, r3
 800129e:	4927      	ldr	r1, [pc, #156]	@ (800133c <EnterProgrammingMode+0x200>)
 80012a0:	481e      	ldr	r0, [pc, #120]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012a2:	f002 ffc3 	bl	800422c <siprintf>
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80012a6:	481d      	ldr	r0, [pc, #116]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012a8:	f7fe ff9a 	bl	80001e0 <strlen>
 80012ac:	4603      	mov	r3, r0
 80012ae:	b29a      	uxth	r2, r3
 80012b0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b4:	4919      	ldr	r1, [pc, #100]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012b6:	481a      	ldr	r0, [pc, #104]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 80012b8:	f001 fecc 	bl	8003054 <HAL_UART_Transmit>
 80012bc:	e026      	b.n	800130c <EnterProgrammingMode+0x1d0>
      }
    } else {
      sprintf(debugBuffer, "[%lu] UPLOAD: Received 0x%02X instead of STK_INSYNC\r\n", HAL_GetTick(), response[0]);
 80012be:	f000 fe63 	bl	8001f88 <HAL_GetTick>
 80012c2:	4602      	mov	r2, r0
 80012c4:	783b      	ldrb	r3, [r7, #0]
 80012c6:	491e      	ldr	r1, [pc, #120]	@ (8001340 <EnterProgrammingMode+0x204>)
 80012c8:	4814      	ldr	r0, [pc, #80]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012ca:	f002 ffaf 	bl	800422c <siprintf>
      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80012ce:	4813      	ldr	r0, [pc, #76]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012d0:	f7fe ff86 	bl	80001e0 <strlen>
 80012d4:	4603      	mov	r3, r0
 80012d6:	b29a      	uxth	r2, r3
 80012d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012dc:	490f      	ldr	r1, [pc, #60]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012de:	4810      	ldr	r0, [pc, #64]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 80012e0:	f001 feb8 	bl	8003054 <HAL_UART_Transmit>
 80012e4:	e012      	b.n	800130c <EnterProgrammingMode+0x1d0>
    }
  } else {
    sprintf(debugBuffer, "[%lu] UPLOAD: No response from bootloader\r\n", HAL_GetTick());
 80012e6:	f000 fe4f 	bl	8001f88 <HAL_GetTick>
 80012ea:	4603      	mov	r3, r0
 80012ec:	461a      	mov	r2, r3
 80012ee:	4915      	ldr	r1, [pc, #84]	@ (8001344 <EnterProgrammingMode+0x208>)
 80012f0:	480a      	ldr	r0, [pc, #40]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012f2:	f002 ff9b 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80012f6:	4809      	ldr	r0, [pc, #36]	@ (800131c <EnterProgrammingMode+0x1e0>)
 80012f8:	f7fe ff72 	bl	80001e0 <strlen>
 80012fc:	4603      	mov	r3, r0
 80012fe:	b29a      	uxth	r2, r3
 8001300:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001304:	4905      	ldr	r1, [pc, #20]	@ (800131c <EnterProgrammingMode+0x1e0>)
 8001306:	4806      	ldr	r0, [pc, #24]	@ (8001320 <EnterProgrammingMode+0x1e4>)
 8001308:	f001 fea4 	bl	8003054 <HAL_UART_Transmit>
  }

  return success;
 800130c:	79fb      	ldrb	r3, [r7, #7]
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	08005260 	.word	0x08005260
 800131c:	2000017c 	.word	0x2000017c
 8001320:	200003c8 	.word	0x200003c8
 8001324:	20000380 	.word	0x20000380
 8001328:	08005298 	.word	0x08005298
 800132c:	080050a4 	.word	0x080050a4
 8001330:	080052c4 	.word	0x080052c4
 8001334:	080052f4 	.word	0x080052f4
 8001338:	0800532c 	.word	0x0800532c
 800133c:	08005358 	.word	0x08005358
 8001340:	080051fc 	.word	0x080051fc
 8001344:	08005234 	.word	0x08005234

08001348 <LeaveProgrammingMode>:
/**
  * @brief  Leave programming mode
  * @retval true if successful
  */
bool LeaveProgrammingMode(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af02      	add	r7, sp, #8
  sprintf(debugBuffer, "[%lu] UPLOAD: Leaving programming mode\r\n", HAL_GetTick());
 800134e:	f000 fe1b 	bl	8001f88 <HAL_GetTick>
 8001352:	4603      	mov	r3, r0
 8001354:	461a      	mov	r2, r3
 8001356:	490d      	ldr	r1, [pc, #52]	@ (800138c <LeaveProgrammingMode+0x44>)
 8001358:	480d      	ldr	r0, [pc, #52]	@ (8001390 <LeaveProgrammingMode+0x48>)
 800135a:	f002 ff67 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800135e:	480c      	ldr	r0, [pc, #48]	@ (8001390 <LeaveProgrammingMode+0x48>)
 8001360:	f7fe ff3e 	bl	80001e0 <strlen>
 8001364:	4603      	mov	r3, r0
 8001366:	b29a      	uxth	r2, r3
 8001368:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800136c:	4908      	ldr	r1, [pc, #32]	@ (8001390 <LeaveProgrammingMode+0x48>)
 800136e:	4809      	ldr	r0, [pc, #36]	@ (8001394 <LeaveProgrammingMode+0x4c>)
 8001370:	f001 fe70 	bl	8003054 <HAL_UART_Transmit>

  return SendCommandAndWaitForSync(STK_LEAVE_PROGMODE, NULL, 0, NULL, 0);
 8001374:	2300      	movs	r3, #0
 8001376:	9300      	str	r3, [sp, #0]
 8001378:	2300      	movs	r3, #0
 800137a:	2200      	movs	r2, #0
 800137c:	2100      	movs	r1, #0
 800137e:	2051      	movs	r0, #81	@ 0x51
 8001380:	f7ff fcb8 	bl	8000cf4 <SendCommandAndWaitForSync>
 8001384:	4603      	mov	r3, r0
}
 8001386:	4618      	mov	r0, r3
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	08005394 	.word	0x08005394
 8001390:	2000017c 	.word	0x2000017c
 8001394:	200003c8 	.word	0x200003c8

08001398 <LoadAddress>:
  * @brief  Load address for subsequent operations
  * @param  address: Word address (address/2 for flash)
  * @retval true if successful
  */
bool LoadAddress(uint16_t address)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af02      	add	r7, sp, #8
 800139e:	4603      	mov	r3, r0
 80013a0:	80fb      	strh	r3, [r7, #6]
  uint8_t params[2];

  // Convert byte address to word address for flash memory
  uint16_t wordAddress = address >> 1;
 80013a2:	88fb      	ldrh	r3, [r7, #6]
 80013a4:	085b      	lsrs	r3, r3, #1
 80013a6:	81fb      	strh	r3, [r7, #14]

  // STK500 protocol expects low byte first
  params[0] = wordAddress & 0xFF;        // Low byte
 80013a8:	89fb      	ldrh	r3, [r7, #14]
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	733b      	strb	r3, [r7, #12]
  params[1] = (wordAddress >> 8) & 0xFF; // High byte
 80013ae:	89fb      	ldrh	r3, [r7, #14]
 80013b0:	0a1b      	lsrs	r3, r3, #8
 80013b2:	b29b      	uxth	r3, r3
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	737b      	strb	r3, [r7, #13]

  sprintf(debugBuffer, "[%lu] UPLOAD: Loading address 0x%04X (word: 0x%04X)\r\n",
 80013b8:	f000 fde6 	bl	8001f88 <HAL_GetTick>
 80013bc:	4601      	mov	r1, r0
 80013be:	88fa      	ldrh	r2, [r7, #6]
 80013c0:	89fb      	ldrh	r3, [r7, #14]
 80013c2:	9300      	str	r3, [sp, #0]
 80013c4:	4613      	mov	r3, r2
 80013c6:	460a      	mov	r2, r1
 80013c8:	490e      	ldr	r1, [pc, #56]	@ (8001404 <LoadAddress+0x6c>)
 80013ca:	480f      	ldr	r0, [pc, #60]	@ (8001408 <LoadAddress+0x70>)
 80013cc:	f002 ff2e 	bl	800422c <siprintf>
          HAL_GetTick(), address, wordAddress);
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80013d0:	480d      	ldr	r0, [pc, #52]	@ (8001408 <LoadAddress+0x70>)
 80013d2:	f7fe ff05 	bl	80001e0 <strlen>
 80013d6:	4603      	mov	r3, r0
 80013d8:	b29a      	uxth	r2, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013de:	490a      	ldr	r1, [pc, #40]	@ (8001408 <LoadAddress+0x70>)
 80013e0:	480a      	ldr	r0, [pc, #40]	@ (800140c <LoadAddress+0x74>)
 80013e2:	f001 fe37 	bl	8003054 <HAL_UART_Transmit>

  return SendCommandAndWaitForSync(STK_LOAD_ADDRESS, params, 2, NULL, 0);
 80013e6:	f107 010c 	add.w	r1, r7, #12
 80013ea:	2300      	movs	r3, #0
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	2300      	movs	r3, #0
 80013f0:	2202      	movs	r2, #2
 80013f2:	2055      	movs	r0, #85	@ 0x55
 80013f4:	f7ff fc7e 	bl	8000cf4 <SendCommandAndWaitForSync>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	080053c0 	.word	0x080053c0
 8001408:	2000017c 	.word	0x2000017c
 800140c:	200003c8 	.word	0x200003c8

08001410 <ProgramPage>:
  * @param  size: Size of data to program
  * @param  type: Type of memory (FLASH or EEPROM)
  * @retval true if successful
  */
bool ProgramPage(uint8_t *data, uint16_t size, MemoryType type)
{
 8001410:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001414:	b089      	sub	sp, #36	@ 0x24
 8001416:	af02      	add	r7, sp, #8
 8001418:	6078      	str	r0, [r7, #4]
 800141a:	460b      	mov	r3, r1
 800141c:	807b      	strh	r3, [r7, #2]
 800141e:	4613      	mov	r3, r2
 8001420:	707b      	strb	r3, [r7, #1]
 8001422:	466b      	mov	r3, sp
 8001424:	461e      	mov	r6, r3
  uint8_t params[size + 3]; // size_low, size_high, memtype, data[size]
 8001426:	887b      	ldrh	r3, [r7, #2]
 8001428:	1cd9      	adds	r1, r3, #3
 800142a:	1e4b      	subs	r3, r1, #1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	460a      	mov	r2, r1
 8001430:	2300      	movs	r3, #0
 8001432:	4690      	mov	r8, r2
 8001434:	4699      	mov	r9, r3
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800144a:	460a      	mov	r2, r1
 800144c:	2300      	movs	r3, #0
 800144e:	4614      	mov	r4, r2
 8001450:	461d      	mov	r5, r3
 8001452:	f04f 0200 	mov.w	r2, #0
 8001456:	f04f 0300 	mov.w	r3, #0
 800145a:	00eb      	lsls	r3, r5, #3
 800145c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001460:	00e2      	lsls	r2, r4, #3
 8001462:	460b      	mov	r3, r1
 8001464:	3307      	adds	r3, #7
 8001466:	08db      	lsrs	r3, r3, #3
 8001468:	00db      	lsls	r3, r3, #3
 800146a:	ebad 0d03 	sub.w	sp, sp, r3
 800146e:	ab02      	add	r3, sp, #8
 8001470:	3300      	adds	r3, #0
 8001472:	613b      	str	r3, [r7, #16]

  // Check size limits based on memory type
  uint16_t maxSize = (type == MEMORY_TYPE_FLASH) ? FLASH_PAGE_SIZE : EEPROM_PAGE_SIZE;
 8001474:	787b      	ldrb	r3, [r7, #1]
 8001476:	2b00      	cmp	r3, #0
 8001478:	d101      	bne.n	800147e <ProgramPage+0x6e>
 800147a:	2380      	movs	r3, #128	@ 0x80
 800147c:	e000      	b.n	8001480 <ProgramPage+0x70>
 800147e:	2304      	movs	r3, #4
 8001480:	81fb      	strh	r3, [r7, #14]
  if (size > maxSize) {
 8001482:	887a      	ldrh	r2, [r7, #2]
 8001484:	89fb      	ldrh	r3, [r7, #14]
 8001486:	429a      	cmp	r2, r3
 8001488:	d919      	bls.n	80014be <ProgramPage+0xae>
    sprintf(debugBuffer, "[%lu] UPLOAD: Page size %d exceeds max %d for memory type %d\r\n",
 800148a:	f000 fd7d 	bl	8001f88 <HAL_GetTick>
 800148e:	8879      	ldrh	r1, [r7, #2]
 8001490:	89fb      	ldrh	r3, [r7, #14]
 8001492:	787a      	ldrb	r2, [r7, #1]
 8001494:	9201      	str	r2, [sp, #4]
 8001496:	9300      	str	r3, [sp, #0]
 8001498:	460b      	mov	r3, r1
 800149a:	4602      	mov	r2, r0
 800149c:	4929      	ldr	r1, [pc, #164]	@ (8001544 <ProgramPage+0x134>)
 800149e:	482a      	ldr	r0, [pc, #168]	@ (8001548 <ProgramPage+0x138>)
 80014a0:	f002 fec4 	bl	800422c <siprintf>
            HAL_GetTick(), size, maxSize, type);
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80014a4:	4828      	ldr	r0, [pc, #160]	@ (8001548 <ProgramPage+0x138>)
 80014a6:	f7fe fe9b 	bl	80001e0 <strlen>
 80014aa:	4603      	mov	r3, r0
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014b2:	4925      	ldr	r1, [pc, #148]	@ (8001548 <ProgramPage+0x138>)
 80014b4:	4825      	ldr	r0, [pc, #148]	@ (800154c <ProgramPage+0x13c>)
 80014b6:	f001 fdcd 	bl	8003054 <HAL_UART_Transmit>
    return false;
 80014ba:	2300      	movs	r3, #0
 80014bc:	e03c      	b.n	8001538 <ProgramPage+0x128>
  }

  // Prepare parameters
  params[0] = size & 0xFF;         // Size low byte
 80014be:	887b      	ldrh	r3, [r7, #2]
 80014c0:	b2da      	uxtb	r2, r3
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	701a      	strb	r2, [r3, #0]
  params[1] = (size >> 8) & 0xFF;  // Size high byte
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	0a1b      	lsrs	r3, r3, #8
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b2da      	uxtb	r2, r3
 80014ce:	693b      	ldr	r3, [r7, #16]
 80014d0:	705a      	strb	r2, [r3, #1]
  params[2] = (type == MEMORY_TYPE_FLASH) ? 'F' : 'E'; // 'F' for flash, 'E' for EEPROM
 80014d2:	787b      	ldrb	r3, [r7, #1]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d101      	bne.n	80014dc <ProgramPage+0xcc>
 80014d8:	2246      	movs	r2, #70	@ 0x46
 80014da:	e000      	b.n	80014de <ProgramPage+0xce>
 80014dc:	2245      	movs	r2, #69	@ 0x45
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	709a      	strb	r2, [r3, #2]

  // Copy data
  memcpy(&params[3], data, size);
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	3303      	adds	r3, #3
 80014e6:	887a      	ldrh	r2, [r7, #2]
 80014e8:	6879      	ldr	r1, [r7, #4]
 80014ea:	4618      	mov	r0, r3
 80014ec:	f002 fef2 	bl	80042d4 <memcpy>

  sprintf(debugBuffer, "[%lu] UPLOAD: Programming %d bytes to %c memory\r\n",
 80014f0:	f000 fd4a 	bl	8001f88 <HAL_GetTick>
 80014f4:	4601      	mov	r1, r0
 80014f6:	887a      	ldrh	r2, [r7, #2]
          HAL_GetTick(), size, params[2]);
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	789b      	ldrb	r3, [r3, #2]
  sprintf(debugBuffer, "[%lu] UPLOAD: Programming %d bytes to %c memory\r\n",
 80014fc:	9300      	str	r3, [sp, #0]
 80014fe:	4613      	mov	r3, r2
 8001500:	460a      	mov	r2, r1
 8001502:	4913      	ldr	r1, [pc, #76]	@ (8001550 <ProgramPage+0x140>)
 8001504:	4810      	ldr	r0, [pc, #64]	@ (8001548 <ProgramPage+0x138>)
 8001506:	f002 fe91 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800150a:	480f      	ldr	r0, [pc, #60]	@ (8001548 <ProgramPage+0x138>)
 800150c:	f7fe fe68 	bl	80001e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001518:	490b      	ldr	r1, [pc, #44]	@ (8001548 <ProgramPage+0x138>)
 800151a:	480c      	ldr	r0, [pc, #48]	@ (800154c <ProgramPage+0x13c>)
 800151c:	f001 fd9a 	bl	8003054 <HAL_UART_Transmit>

  return SendCommandAndWaitForSync(STK_PROG_PAGE, params, size + 3, NULL, 0);
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	b2db      	uxtb	r3, r3
 8001524:	3303      	adds	r3, #3
 8001526:	b2da      	uxtb	r2, r3
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2300      	movs	r3, #0
 800152e:	6939      	ldr	r1, [r7, #16]
 8001530:	2064      	movs	r0, #100	@ 0x64
 8001532:	f7ff fbdf 	bl	8000cf4 <SendCommandAndWaitForSync>
 8001536:	4603      	mov	r3, r0
 8001538:	46b5      	mov	sp, r6
}
 800153a:	4618      	mov	r0, r3
 800153c:	371c      	adds	r7, #28
 800153e:	46bd      	mov	sp, r7
 8001540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001544:	080053f8 	.word	0x080053f8
 8001548:	2000017c 	.word	0x2000017c
 800154c:	200003c8 	.word	0x200003c8
 8001550:	08005438 	.word	0x08005438

08001554 <EraseChip>:
/**
  * @brief  Erase chip
  * @retval true if successful
  */
bool EraseChip(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af02      	add	r7, sp, #8
  sprintf(debugBuffer, "[%lu] UPLOAD: Erasing chip\r\n", HAL_GetTick());
 800155a:	f000 fd15 	bl	8001f88 <HAL_GetTick>
 800155e:	4603      	mov	r3, r0
 8001560:	461a      	mov	r2, r3
 8001562:	490d      	ldr	r1, [pc, #52]	@ (8001598 <EraseChip+0x44>)
 8001564:	480d      	ldr	r0, [pc, #52]	@ (800159c <EraseChip+0x48>)
 8001566:	f002 fe61 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800156a:	480c      	ldr	r0, [pc, #48]	@ (800159c <EraseChip+0x48>)
 800156c:	f7fe fe38 	bl	80001e0 <strlen>
 8001570:	4603      	mov	r3, r0
 8001572:	b29a      	uxth	r2, r3
 8001574:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001578:	4908      	ldr	r1, [pc, #32]	@ (800159c <EraseChip+0x48>)
 800157a:	4809      	ldr	r0, [pc, #36]	@ (80015a0 <EraseChip+0x4c>)
 800157c:	f001 fd6a 	bl	8003054 <HAL_UART_Transmit>

  return SendCommandAndWaitForSync(STK_CHIP_ERASE, NULL, 0, NULL, 0);
 8001580:	2300      	movs	r3, #0
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2300      	movs	r3, #0
 8001586:	2200      	movs	r2, #0
 8001588:	2100      	movs	r1, #0
 800158a:	2052      	movs	r0, #82	@ 0x52
 800158c:	f7ff fbb2 	bl	8000cf4 <SendCommandAndWaitForSync>
 8001590:	4603      	mov	r3, r0
}
 8001592:	4618      	mov	r0, r3
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	0800546c 	.word	0x0800546c
 800159c:	2000017c 	.word	0x2000017c
 80015a0:	200003c8 	.word	0x200003c8

080015a4 <VerifySignature>:
/**
  * @brief  Verify device signature
  * @retval true if device is ATmega328P
  */
bool VerifySignature(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af02      	add	r7, sp, #8
  uint8_t response[3];

  sprintf(debugBuffer, "[%lu] UPLOAD: Reading device signature\r\n", HAL_GetTick());
 80015aa:	f000 fced 	bl	8001f88 <HAL_GetTick>
 80015ae:	4603      	mov	r3, r0
 80015b0:	461a      	mov	r2, r3
 80015b2:	492d      	ldr	r1, [pc, #180]	@ (8001668 <VerifySignature+0xc4>)
 80015b4:	482d      	ldr	r0, [pc, #180]	@ (800166c <VerifySignature+0xc8>)
 80015b6:	f002 fe39 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80015ba:	482c      	ldr	r0, [pc, #176]	@ (800166c <VerifySignature+0xc8>)
 80015bc:	f7fe fe10 	bl	80001e0 <strlen>
 80015c0:	4603      	mov	r3, r0
 80015c2:	b29a      	uxth	r2, r3
 80015c4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015c8:	4928      	ldr	r1, [pc, #160]	@ (800166c <VerifySignature+0xc8>)
 80015ca:	4829      	ldr	r0, [pc, #164]	@ (8001670 <VerifySignature+0xcc>)
 80015cc:	f001 fd42 	bl	8003054 <HAL_UART_Transmit>

  if (!SendCommandAndWaitForSync(STK_READ_SIGN, NULL, 0, response, 3)) {
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	2203      	movs	r2, #3
 80015d4:	9200      	str	r2, [sp, #0]
 80015d6:	2200      	movs	r2, #0
 80015d8:	2100      	movs	r1, #0
 80015da:	2075      	movs	r0, #117	@ 0x75
 80015dc:	f7ff fb8a 	bl	8000cf4 <SendCommandAndWaitForSync>
 80015e0:	4603      	mov	r3, r0
 80015e2:	f083 0301 	eor.w	r3, r3, #1
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <VerifySignature+0x4c>
    return false;
 80015ec:	2300      	movs	r3, #0
 80015ee:	e037      	b.n	8001660 <VerifySignature+0xbc>
  }

  // ATmega328P signature is 0x1E 0x95 0x0F
  if (response[0] == 0x1E && response[1] == 0x95 && response[2] == 0x0F) {
 80015f0:	793b      	ldrb	r3, [r7, #4]
 80015f2:	2b1e      	cmp	r3, #30
 80015f4:	d11a      	bne.n	800162c <VerifySignature+0x88>
 80015f6:	797b      	ldrb	r3, [r7, #5]
 80015f8:	2b95      	cmp	r3, #149	@ 0x95
 80015fa:	d117      	bne.n	800162c <VerifySignature+0x88>
 80015fc:	79bb      	ldrb	r3, [r7, #6]
 80015fe:	2b0f      	cmp	r3, #15
 8001600:	d114      	bne.n	800162c <VerifySignature+0x88>
    sprintf(debugBuffer, "[%lu] UPLOAD: Signature verified: ATmega328P\r\n", HAL_GetTick());
 8001602:	f000 fcc1 	bl	8001f88 <HAL_GetTick>
 8001606:	4603      	mov	r3, r0
 8001608:	461a      	mov	r2, r3
 800160a:	491a      	ldr	r1, [pc, #104]	@ (8001674 <VerifySignature+0xd0>)
 800160c:	4817      	ldr	r0, [pc, #92]	@ (800166c <VerifySignature+0xc8>)
 800160e:	f002 fe0d 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001612:	4816      	ldr	r0, [pc, #88]	@ (800166c <VerifySignature+0xc8>)
 8001614:	f7fe fde4 	bl	80001e0 <strlen>
 8001618:	4603      	mov	r3, r0
 800161a:	b29a      	uxth	r2, r3
 800161c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001620:	4912      	ldr	r1, [pc, #72]	@ (800166c <VerifySignature+0xc8>)
 8001622:	4813      	ldr	r0, [pc, #76]	@ (8001670 <VerifySignature+0xcc>)
 8001624:	f001 fd16 	bl	8003054 <HAL_UART_Transmit>
    return true;
 8001628:	2301      	movs	r3, #1
 800162a:	e019      	b.n	8001660 <VerifySignature+0xbc>
  } else {
    sprintf(debugBuffer, "[%lu] UPLOAD: Unexpected signature: 0x%02X 0x%02X 0x%02X\r\n",
 800162c:	f000 fcac 	bl	8001f88 <HAL_GetTick>
 8001630:	4602      	mov	r2, r0
            HAL_GetTick(), response[0], response[1], response[2]);
 8001632:	793b      	ldrb	r3, [r7, #4]
    sprintf(debugBuffer, "[%lu] UPLOAD: Unexpected signature: 0x%02X 0x%02X 0x%02X\r\n",
 8001634:	4618      	mov	r0, r3
            HAL_GetTick(), response[0], response[1], response[2]);
 8001636:	797b      	ldrb	r3, [r7, #5]
 8001638:	79b9      	ldrb	r1, [r7, #6]
    sprintf(debugBuffer, "[%lu] UPLOAD: Unexpected signature: 0x%02X 0x%02X 0x%02X\r\n",
 800163a:	9101      	str	r1, [sp, #4]
 800163c:	9300      	str	r3, [sp, #0]
 800163e:	4603      	mov	r3, r0
 8001640:	490d      	ldr	r1, [pc, #52]	@ (8001678 <VerifySignature+0xd4>)
 8001642:	480a      	ldr	r0, [pc, #40]	@ (800166c <VerifySignature+0xc8>)
 8001644:	f002 fdf2 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001648:	4808      	ldr	r0, [pc, #32]	@ (800166c <VerifySignature+0xc8>)
 800164a:	f7fe fdc9 	bl	80001e0 <strlen>
 800164e:	4603      	mov	r3, r0
 8001650:	b29a      	uxth	r2, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001656:	4905      	ldr	r1, [pc, #20]	@ (800166c <VerifySignature+0xc8>)
 8001658:	4805      	ldr	r0, [pc, #20]	@ (8001670 <VerifySignature+0xcc>)
 800165a:	f001 fcfb 	bl	8003054 <HAL_UART_Transmit>
    return false;
 800165e:	2300      	movs	r3, #0
  }
}
 8001660:	4618      	mov	r0, r3
 8001662:	3708      	adds	r7, #8
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	0800548c 	.word	0x0800548c
 800166c:	2000017c 	.word	0x2000017c
 8001670:	200003c8 	.word	0x200003c8
 8001674:	080054b8 	.word	0x080054b8
 8001678:	080054e8 	.word	0x080054e8

0800167c <PrintUploadProgress>:
  * @param  currentAddress: Current address being programmed
  * @param  totalSize: Total size to program
  * @retval None
  */
void PrintUploadProgress(uint32_t currentAddress, uint32_t totalSize)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b086      	sub	sp, #24
 8001680:	af02      	add	r7, sp, #8
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint8_t percent = (currentAddress * 100) / totalSize;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2264      	movs	r2, #100	@ 0x64
 800168a:	fb03 f202 	mul.w	r2, r3, r2
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	fbb2 f3f3 	udiv	r3, r2, r3
 8001694:	73fb      	strb	r3, [r7, #15]
  static uint8_t lastPercent = 0xFF;

  // Only print when percentage changes significantly to avoid flooding debug port
  if (percent != lastPercent && (percent % 10 == 0 || percent == 5 || percent == 95)) {
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <PrintUploadProgress+0x8c>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	7bfa      	ldrb	r2, [r7, #15]
 800169c:	429a      	cmp	r2, r3
 800169e:	d02e      	beq.n	80016fe <PrintUploadProgress+0x82>
 80016a0:	7bfa      	ldrb	r2, [r7, #15]
 80016a2:	4b1a      	ldr	r3, [pc, #104]	@ (800170c <PrintUploadProgress+0x90>)
 80016a4:	fba3 1302 	umull	r1, r3, r3, r2
 80016a8:	08d9      	lsrs	r1, r3, #3
 80016aa:	460b      	mov	r3, r1
 80016ac:	009b      	lsls	r3, r3, #2
 80016ae:	440b      	add	r3, r1
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d005      	beq.n	80016c6 <PrintUploadProgress+0x4a>
 80016ba:	7bfb      	ldrb	r3, [r7, #15]
 80016bc:	2b05      	cmp	r3, #5
 80016be:	d002      	beq.n	80016c6 <PrintUploadProgress+0x4a>
 80016c0:	7bfb      	ldrb	r3, [r7, #15]
 80016c2:	2b5f      	cmp	r3, #95	@ 0x5f
 80016c4:	d11b      	bne.n	80016fe <PrintUploadProgress+0x82>
    sprintf(debugBuffer, "[%lu] UPLOAD: Progress %d%% - Address 0x%04lX of 0x%04lX\r\n",
 80016c6:	f000 fc5f 	bl	8001f88 <HAL_GetTick>
 80016ca:	4601      	mov	r1, r0
 80016cc:	7bfa      	ldrb	r2, [r7, #15]
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	9301      	str	r3, [sp, #4]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4613      	mov	r3, r2
 80016d8:	460a      	mov	r2, r1
 80016da:	490d      	ldr	r1, [pc, #52]	@ (8001710 <PrintUploadProgress+0x94>)
 80016dc:	480d      	ldr	r0, [pc, #52]	@ (8001714 <PrintUploadProgress+0x98>)
 80016de:	f002 fda5 	bl	800422c <siprintf>
            HAL_GetTick(), percent, currentAddress, totalSize);
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80016e2:	480c      	ldr	r0, [pc, #48]	@ (8001714 <PrintUploadProgress+0x98>)
 80016e4:	f7fe fd7c 	bl	80001e0 <strlen>
 80016e8:	4603      	mov	r3, r0
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016f0:	4908      	ldr	r1, [pc, #32]	@ (8001714 <PrintUploadProgress+0x98>)
 80016f2:	4809      	ldr	r0, [pc, #36]	@ (8001718 <PrintUploadProgress+0x9c>)
 80016f4:	f001 fcae 	bl	8003054 <HAL_UART_Transmit>
    lastPercent = percent;
 80016f8:	4a03      	ldr	r2, [pc, #12]	@ (8001708 <PrintUploadProgress+0x8c>)
 80016fa:	7bfb      	ldrb	r3, [r7, #15]
 80016fc:	7013      	strb	r3, [r2, #0]
  }
}
 80016fe:	bf00      	nop
 8001700:	3710      	adds	r7, #16
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000
 800170c:	cccccccd 	.word	0xcccccccd
 8001710:	08005524 	.word	0x08005524
 8001714:	2000017c 	.word	0x2000017c
 8001718:	200003c8 	.word	0x200003c8

0800171c <UploadHexFile>:
/**
  * @brief  Upload the hex file to Arduino
  * @retval true if upload successful
  */
bool UploadHexFile(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b0a4      	sub	sp, #144	@ 0x90
 8001720:	af00      	add	r7, sp, #0
  uint32_t currentAddress = 0;
 8001722:	2300      	movs	r3, #0
 8001724:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint16_t pageStart = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
  uint8_t pageBuffer[FLASH_PAGE_SIZE];
  uint16_t pageSize = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
  bool success = false;
 8001734:	2300      	movs	r3, #0
 8001736:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

  sprintf(debugBuffer, "[%lu] UPLOAD: Starting hex file upload (size: %u bytes)\r\n",
 800173a:	f000 fc25 	bl	8001f88 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	f640 13c1 	movw	r3, #2497	@ 0x9c1
 8001744:	49b9      	ldr	r1, [pc, #740]	@ (8001a2c <UploadHexFile+0x310>)
 8001746:	48ba      	ldr	r0, [pc, #744]	@ (8001a30 <UploadHexFile+0x314>)
 8001748:	f002 fd70 	bl	800422c <siprintf>
          HAL_GetTick(), sizeof(arduino_hex_data));
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800174c:	48b8      	ldr	r0, [pc, #736]	@ (8001a30 <UploadHexFile+0x314>)
 800174e:	f7fe fd47 	bl	80001e0 <strlen>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800175a:	49b5      	ldr	r1, [pc, #724]	@ (8001a30 <UploadHexFile+0x314>)
 800175c:	48b5      	ldr	r0, [pc, #724]	@ (8001a34 <UploadHexFile+0x318>)
 800175e:	f001 fc79 	bl	8003054 <HAL_UART_Transmit>

  // Reset Arduino and establish sync
  if (!ResetAndSyncArduino(MAX_RESET_ATTEMPTS)) {
 8001762:	2005      	movs	r0, #5
 8001764:	f7ff fa32 	bl	8000bcc <ResetAndSyncArduino>
 8001768:	4603      	mov	r3, r0
 800176a:	f083 0301 	eor.w	r3, r3, #1
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b00      	cmp	r3, #0
 8001772:	d014      	beq.n	800179e <UploadHexFile+0x82>
    sprintf(debugBuffer, "[%lu] UPLOAD: Failed to sync with Arduino\r\n", HAL_GetTick());
 8001774:	f000 fc08 	bl	8001f88 <HAL_GetTick>
 8001778:	4603      	mov	r3, r0
 800177a:	461a      	mov	r2, r3
 800177c:	49ae      	ldr	r1, [pc, #696]	@ (8001a38 <UploadHexFile+0x31c>)
 800177e:	48ac      	ldr	r0, [pc, #688]	@ (8001a30 <UploadHexFile+0x314>)
 8001780:	f002 fd54 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001784:	48aa      	ldr	r0, [pc, #680]	@ (8001a30 <UploadHexFile+0x314>)
 8001786:	f7fe fd2b 	bl	80001e0 <strlen>
 800178a:	4603      	mov	r3, r0
 800178c:	b29a      	uxth	r2, r3
 800178e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001792:	49a7      	ldr	r1, [pc, #668]	@ (8001a30 <UploadHexFile+0x314>)
 8001794:	48a7      	ldr	r0, [pc, #668]	@ (8001a34 <UploadHexFile+0x318>)
 8001796:	f001 fc5d 	bl	8003054 <HAL_UART_Transmit>
    return false;
 800179a:	2300      	movs	r3, #0
 800179c:	e142      	b.n	8001a24 <UploadHexFile+0x308>
  }

  // Verify device signature
  if (!VerifySignature()) {
 800179e:	f7ff ff01 	bl	80015a4 <VerifySignature>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f083 0301 	eor.w	r3, r3, #1
 80017a8:	b2db      	uxtb	r3, r3
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <UploadHexFile+0x96>
    return false;
 80017ae:	2300      	movs	r3, #0
 80017b0:	e138      	b.n	8001a24 <UploadHexFile+0x308>
  }

  // Enter programming mode
  if (!EnterProgrammingMode()) {
 80017b2:	f7ff fcc3 	bl	800113c <EnterProgrammingMode>
 80017b6:	4603      	mov	r3, r0
 80017b8:	f083 0301 	eor.w	r3, r3, #1
 80017bc:	b2db      	uxtb	r3, r3
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d014      	beq.n	80017ec <UploadHexFile+0xd0>
    sprintf(debugBuffer, "[%lu] UPLOAD: Failed to enter programming mode\r\n", HAL_GetTick());
 80017c2:	f000 fbe1 	bl	8001f88 <HAL_GetTick>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	499c      	ldr	r1, [pc, #624]	@ (8001a3c <UploadHexFile+0x320>)
 80017cc:	4898      	ldr	r0, [pc, #608]	@ (8001a30 <UploadHexFile+0x314>)
 80017ce:	f002 fd2d 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80017d2:	4897      	ldr	r0, [pc, #604]	@ (8001a30 <UploadHexFile+0x314>)
 80017d4:	f7fe fd04 	bl	80001e0 <strlen>
 80017d8:	4603      	mov	r3, r0
 80017da:	b29a      	uxth	r2, r3
 80017dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017e0:	4993      	ldr	r1, [pc, #588]	@ (8001a30 <UploadHexFile+0x314>)
 80017e2:	4894      	ldr	r0, [pc, #592]	@ (8001a34 <UploadHexFile+0x318>)
 80017e4:	f001 fc36 	bl	8003054 <HAL_UART_Transmit>
    return false;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e11b      	b.n	8001a24 <UploadHexFile+0x308>
  }

  // Erase the chip
  if (!EraseChip()) {
 80017ec:	f7ff feb2 	bl	8001554 <EraseChip>
 80017f0:	4603      	mov	r3, r0
 80017f2:	f083 0301 	eor.w	r3, r3, #1
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	f000 80a3 	beq.w	8001944 <UploadHexFile+0x228>
    sprintf(debugBuffer, "[%lu] UPLOAD: Failed to erase chip\r\n", HAL_GetTick());
 80017fe:	f000 fbc3 	bl	8001f88 <HAL_GetTick>
 8001802:	4603      	mov	r3, r0
 8001804:	461a      	mov	r2, r3
 8001806:	498e      	ldr	r1, [pc, #568]	@ (8001a40 <UploadHexFile+0x324>)
 8001808:	4889      	ldr	r0, [pc, #548]	@ (8001a30 <UploadHexFile+0x314>)
 800180a:	f002 fd0f 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800180e:	4888      	ldr	r0, [pc, #544]	@ (8001a30 <UploadHexFile+0x314>)
 8001810:	f7fe fce6 	bl	80001e0 <strlen>
 8001814:	4603      	mov	r3, r0
 8001816:	b29a      	uxth	r2, r3
 8001818:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800181c:	4984      	ldr	r1, [pc, #528]	@ (8001a30 <UploadHexFile+0x314>)
 800181e:	4885      	ldr	r0, [pc, #532]	@ (8001a34 <UploadHexFile+0x318>)
 8001820:	f001 fc18 	bl	8003054 <HAL_UART_Transmit>
    LeaveProgrammingMode(); // Try to exit gracefully
 8001824:	f7ff fd90 	bl	8001348 <LeaveProgrammingMode>
    return false;
 8001828:	2300      	movs	r3, #0
 800182a:	e0fb      	b.n	8001a24 <UploadHexFile+0x308>
  }

  // Process hex file in pages
  while (currentAddress < sizeof(arduino_hex_data)) {
    // Check if we need to start a new page
    if (pageSize == 0) {
 800182c:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 8001830:	2b00      	cmp	r3, #0
 8001832:	d123      	bne.n	800187c <UploadHexFile+0x160>
      pageStart = currentAddress;
 8001834:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001838:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a

      // Load address for the new page
      if (!LoadAddress(pageStart)) {
 800183c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8001840:	4618      	mov	r0, r3
 8001842:	f7ff fda9 	bl	8001398 <LoadAddress>
 8001846:	4603      	mov	r3, r0
 8001848:	f083 0301 	eor.w	r3, r3, #1
 800184c:	b2db      	uxtb	r3, r3
 800184e:	2b00      	cmp	r3, #0
 8001850:	d014      	beq.n	800187c <UploadHexFile+0x160>
        sprintf(debugBuffer, "[%lu] UPLOAD: Failed to load address 0x%04X\r\n",
 8001852:	f000 fb99 	bl	8001f88 <HAL_GetTick>
 8001856:	4602      	mov	r2, r0
 8001858:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800185c:	4979      	ldr	r1, [pc, #484]	@ (8001a44 <UploadHexFile+0x328>)
 800185e:	4874      	ldr	r0, [pc, #464]	@ (8001a30 <UploadHexFile+0x314>)
 8001860:	f002 fce4 	bl	800422c <siprintf>
                HAL_GetTick(), pageStart);
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001864:	4872      	ldr	r0, [pc, #456]	@ (8001a30 <UploadHexFile+0x314>)
 8001866:	f7fe fcbb 	bl	80001e0 <strlen>
 800186a:	4603      	mov	r3, r0
 800186c:	b29a      	uxth	r2, r3
 800186e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001872:	496f      	ldr	r1, [pc, #444]	@ (8001a30 <UploadHexFile+0x314>)
 8001874:	486f      	ldr	r0, [pc, #444]	@ (8001a34 <UploadHexFile+0x318>)
 8001876:	f001 fbed 	bl	8003054 <HAL_UART_Transmit>
        break;
 800187a:	e069      	b.n	8001950 <UploadHexFile+0x234>
      }
    }

    // Add byte to page buffer
    pageBuffer[pageSize++] = arduino_hex_data[currentAddress++];
 800187c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001880:	1c5a      	adds	r2, r3, #1
 8001882:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001886:	f8b7 2088 	ldrh.w	r2, [r7, #136]	@ 0x88
 800188a:	1c51      	adds	r1, r2, #1
 800188c:	f8a7 1088 	strh.w	r1, [r7, #136]	@ 0x88
 8001890:	4611      	mov	r1, r2
 8001892:	4a6d      	ldr	r2, [pc, #436]	@ (8001a48 <UploadHexFile+0x32c>)
 8001894:	5cd2      	ldrb	r2, [r2, r3]
 8001896:	f101 0390 	add.w	r3, r1, #144	@ 0x90
 800189a:	443b      	add	r3, r7
 800189c:	f803 2c8c 	strb.w	r2, [r3, #-140]

    // Print progress
    PrintUploadProgress(currentAddress, sizeof(arduino_hex_data));
 80018a0:	f640 11c1 	movw	r1, #2497	@ 0x9c1
 80018a4:	f8d7 008c 	ldr.w	r0, [r7, #140]	@ 0x8c
 80018a8:	f7ff fee8 	bl	800167c <PrintUploadProgress>

    // When page is full or we've reached the end, write it
    if (pageSize == FLASH_PAGE_SIZE || currentAddress == sizeof(arduino_hex_data)) {
 80018ac:	f8b7 3088 	ldrh.w	r3, [r7, #136]	@ 0x88
 80018b0:	2b80      	cmp	r3, #128	@ 0x80
 80018b2:	d005      	beq.n	80018c0 <UploadHexFile+0x1a4>
 80018b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80018b8:	f640 12c1 	movw	r2, #2497	@ 0x9c1
 80018bc:	4293      	cmp	r3, r2
 80018be:	d141      	bne.n	8001944 <UploadHexFile+0x228>
      // Skip if we're trying to write to bootloader section
      if (pageStart >= BOOT_SECTION_START) {
 80018c0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80018c4:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 80018c8:	d317      	bcc.n	80018fa <UploadHexFile+0x1de>
        sprintf(debugBuffer, "[%lu] UPLOAD: Skipping bootloader area at 0x%04X\r\n",
 80018ca:	f000 fb5d 	bl	8001f88 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80018d4:	495d      	ldr	r1, [pc, #372]	@ (8001a4c <UploadHexFile+0x330>)
 80018d6:	4856      	ldr	r0, [pc, #344]	@ (8001a30 <UploadHexFile+0x314>)
 80018d8:	f002 fca8 	bl	800422c <siprintf>
                HAL_GetTick(), pageStart);
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80018dc:	4854      	ldr	r0, [pc, #336]	@ (8001a30 <UploadHexFile+0x314>)
 80018de:	f7fe fc7f 	bl	80001e0 <strlen>
 80018e2:	4603      	mov	r3, r0
 80018e4:	b29a      	uxth	r2, r3
 80018e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018ea:	4951      	ldr	r1, [pc, #324]	@ (8001a30 <UploadHexFile+0x314>)
 80018ec:	4851      	ldr	r0, [pc, #324]	@ (8001a34 <UploadHexFile+0x318>)
 80018ee:	f001 fbb1 	bl	8003054 <HAL_UART_Transmit>
        pageSize = 0; // Reset for next page
 80018f2:	2300      	movs	r3, #0
 80018f4:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
        continue;
 80018f8:	e024      	b.n	8001944 <UploadHexFile+0x228>
      }

      // Program the page
      if (!ProgramPage(pageBuffer, pageSize, MEMORY_TYPE_FLASH)) {
 80018fa:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 80018fe:	1d3b      	adds	r3, r7, #4
 8001900:	2200      	movs	r2, #0
 8001902:	4618      	mov	r0, r3
 8001904:	f7ff fd84 	bl	8001410 <ProgramPage>
 8001908:	4603      	mov	r3, r0
 800190a:	f083 0301 	eor.w	r3, r3, #1
 800190e:	b2db      	uxtb	r3, r3
 8001910:	2b00      	cmp	r3, #0
 8001912:	d014      	beq.n	800193e <UploadHexFile+0x222>
        sprintf(debugBuffer, "[%lu] UPLOAD: Failed to program page at 0x%04X\r\n",
 8001914:	f000 fb38 	bl	8001f88 <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 800191e:	494c      	ldr	r1, [pc, #304]	@ (8001a50 <UploadHexFile+0x334>)
 8001920:	4843      	ldr	r0, [pc, #268]	@ (8001a30 <UploadHexFile+0x314>)
 8001922:	f002 fc83 	bl	800422c <siprintf>
                HAL_GetTick(), pageStart);
        HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001926:	4842      	ldr	r0, [pc, #264]	@ (8001a30 <UploadHexFile+0x314>)
 8001928:	f7fe fc5a 	bl	80001e0 <strlen>
 800192c:	4603      	mov	r3, r0
 800192e:	b29a      	uxth	r2, r3
 8001930:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001934:	493e      	ldr	r1, [pc, #248]	@ (8001a30 <UploadHexFile+0x314>)
 8001936:	483f      	ldr	r0, [pc, #252]	@ (8001a34 <UploadHexFile+0x318>)
 8001938:	f001 fb8c 	bl	8003054 <HAL_UART_Transmit>
        break;
 800193c:	e008      	b.n	8001950 <UploadHexFile+0x234>
      }

      // Reset page buffer for next page
      pageSize = 0;
 800193e:	2300      	movs	r3, #0
 8001940:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88
  while (currentAddress < sizeof(arduino_hex_data)) {
 8001944:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001948:	f5b3 6f1c 	cmp.w	r3, #2496	@ 0x9c0
 800194c:	f67f af6e 	bls.w	800182c <UploadHexFile+0x110>
    }
  }

  // Check if upload was complete
  if (currentAddress == sizeof(arduino_hex_data)) {
 8001950:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001954:	f640 12c1 	movw	r2, #2497	@ 0x9c1
 8001958:	4293      	cmp	r3, r2
 800195a:	d116      	bne.n	800198a <UploadHexFile+0x26e>
    sprintf(debugBuffer, "[%lu] UPLOAD: Hex file upload complete\r\n", HAL_GetTick());
 800195c:	f000 fb14 	bl	8001f88 <HAL_GetTick>
 8001960:	4603      	mov	r3, r0
 8001962:	461a      	mov	r2, r3
 8001964:	493b      	ldr	r1, [pc, #236]	@ (8001a54 <UploadHexFile+0x338>)
 8001966:	4832      	ldr	r0, [pc, #200]	@ (8001a30 <UploadHexFile+0x314>)
 8001968:	f002 fc60 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800196c:	4830      	ldr	r0, [pc, #192]	@ (8001a30 <UploadHexFile+0x314>)
 800196e:	f7fe fc37 	bl	80001e0 <strlen>
 8001972:	4603      	mov	r3, r0
 8001974:	b29a      	uxth	r2, r3
 8001976:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800197a:	492d      	ldr	r1, [pc, #180]	@ (8001a30 <UploadHexFile+0x314>)
 800197c:	482d      	ldr	r0, [pc, #180]	@ (8001a34 <UploadHexFile+0x318>)
 800197e:	f001 fb69 	bl	8003054 <HAL_UART_Transmit>
    success = true;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
 8001988:	e013      	b.n	80019b2 <UploadHexFile+0x296>
  } else {
    sprintf(debugBuffer, "[%lu] UPLOAD: Upload failed at address 0x%04lX\r\n",
 800198a:	f000 fafd 	bl	8001f88 <HAL_GetTick>
 800198e:	4602      	mov	r2, r0
 8001990:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001994:	4930      	ldr	r1, [pc, #192]	@ (8001a58 <UploadHexFile+0x33c>)
 8001996:	4826      	ldr	r0, [pc, #152]	@ (8001a30 <UploadHexFile+0x314>)
 8001998:	f002 fc48 	bl	800422c <siprintf>
            HAL_GetTick(), currentAddress);
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800199c:	4824      	ldr	r0, [pc, #144]	@ (8001a30 <UploadHexFile+0x314>)
 800199e:	f7fe fc1f 	bl	80001e0 <strlen>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b29a      	uxth	r2, r3
 80019a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019aa:	4921      	ldr	r1, [pc, #132]	@ (8001a30 <UploadHexFile+0x314>)
 80019ac:	4821      	ldr	r0, [pc, #132]	@ (8001a34 <UploadHexFile+0x318>)
 80019ae:	f001 fb51 	bl	8003054 <HAL_UART_Transmit>
  }

  // Leave programming mode
  if (!LeaveProgrammingMode()) {
 80019b2:	f7ff fcc9 	bl	8001348 <LeaveProgrammingMode>
 80019b6:	4603      	mov	r3, r0
 80019b8:	f083 0301 	eor.w	r3, r3, #1
 80019bc:	b2db      	uxtb	r3, r3
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d015      	beq.n	80019ee <UploadHexFile+0x2d2>
    sprintf(debugBuffer, "[%lu] UPLOAD: Failed to leave programming mode\r\n", HAL_GetTick());
 80019c2:	f000 fae1 	bl	8001f88 <HAL_GetTick>
 80019c6:	4603      	mov	r3, r0
 80019c8:	461a      	mov	r2, r3
 80019ca:	4924      	ldr	r1, [pc, #144]	@ (8001a5c <UploadHexFile+0x340>)
 80019cc:	4818      	ldr	r0, [pc, #96]	@ (8001a30 <UploadHexFile+0x314>)
 80019ce:	f002 fc2d 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80019d2:	4817      	ldr	r0, [pc, #92]	@ (8001a30 <UploadHexFile+0x314>)
 80019d4:	f7fe fc04 	bl	80001e0 <strlen>
 80019d8:	4603      	mov	r3, r0
 80019da:	b29a      	uxth	r2, r3
 80019dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019e0:	4913      	ldr	r1, [pc, #76]	@ (8001a30 <UploadHexFile+0x314>)
 80019e2:	4814      	ldr	r0, [pc, #80]	@ (8001a34 <UploadHexFile+0x318>)
 80019e4:	f001 fb36 	bl	8003054 <HAL_UART_Transmit>
    success = false;
 80019e8:	2300      	movs	r3, #0
 80019ea:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87
  }

  // Final reset to run the newly uploaded program
  if (success) {
 80019ee:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d014      	beq.n	8001a20 <UploadHexFile+0x304>
    sprintf(debugBuffer, "[%lu] UPLOAD: Resetting Arduino to run new program\r\n", HAL_GetTick());
 80019f6:	f000 fac7 	bl	8001f88 <HAL_GetTick>
 80019fa:	4603      	mov	r3, r0
 80019fc:	461a      	mov	r2, r3
 80019fe:	4918      	ldr	r1, [pc, #96]	@ (8001a60 <UploadHexFile+0x344>)
 8001a00:	480b      	ldr	r0, [pc, #44]	@ (8001a30 <UploadHexFile+0x314>)
 8001a02:	f002 fc13 	bl	800422c <siprintf>
    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001a06:	480a      	ldr	r0, [pc, #40]	@ (8001a30 <UploadHexFile+0x314>)
 8001a08:	f7fe fbea 	bl	80001e0 <strlen>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	b29a      	uxth	r2, r3
 8001a10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a14:	4906      	ldr	r1, [pc, #24]	@ (8001a30 <UploadHexFile+0x314>)
 8001a16:	4807      	ldr	r0, [pc, #28]	@ (8001a34 <UploadHexFile+0x318>)
 8001a18:	f001 fb1c 	bl	8003054 <HAL_UART_Transmit>
    ResetArduino();
 8001a1c:	f7fe fe34 	bl	8000688 <ResetArduino>
  }

  return success;
 8001a20:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3790      	adds	r7, #144	@ 0x90
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	08005560 	.word	0x08005560
 8001a30:	2000017c 	.word	0x2000017c
 8001a34:	200003c8 	.word	0x200003c8
 8001a38:	0800559c 	.word	0x0800559c
 8001a3c:	080055c8 	.word	0x080055c8
 8001a40:	080055fc 	.word	0x080055fc
 8001a44:	08005624 	.word	0x08005624
 8001a48:	080057bc 	.word	0x080057bc
 8001a4c:	08005654 	.word	0x08005654
 8001a50:	08005688 	.word	0x08005688
 8001a54:	080056bc 	.word	0x080056bc
 8001a58:	080056e8 	.word	0x080056e8
 8001a5c:	0800571c 	.word	0x0800571c
 8001a60:	08005750 	.word	0x08005750

08001a64 <SystemClock_Config>:


void SystemClock_Config(void)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b094      	sub	sp, #80	@ 0x50
 8001a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a6a:	f107 0320 	add.w	r3, r7, #32
 8001a6e:	2230      	movs	r2, #48	@ 0x30
 8001a70:	2100      	movs	r1, #0
 8001a72:	4618      	mov	r0, r3
 8001a74:	f002 fbfa 	bl	800426c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a78:	f107 030c 	add.w	r3, r7, #12
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a88:	2300      	movs	r3, #0
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	4b23      	ldr	r3, [pc, #140]	@ (8001b1c <SystemClock_Config+0xb8>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a90:	4a22      	ldr	r2, [pc, #136]	@ (8001b1c <SystemClock_Config+0xb8>)
 8001a92:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a96:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a98:	4b20      	ldr	r3, [pc, #128]	@ (8001b1c <SystemClock_Config+0xb8>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa0:	60bb      	str	r3, [r7, #8]
 8001aa2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	4b1d      	ldr	r3, [pc, #116]	@ (8001b20 <SystemClock_Config+0xbc>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001ab0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b20 <SystemClock_Config+0xbc>)
 8001ab2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b19      	ldr	r3, [pc, #100]	@ (8001b20 <SystemClock_Config+0xbc>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001ac0:	607b      	str	r3, [r7, #4]
 8001ac2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001acc:	2310      	movs	r3, #16
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ad4:	f107 0320 	add.w	r3, r7, #32
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f000 fdd3 	bl	8002684 <HAL_RCC_OscConfig>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d001      	beq.n	8001ae8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001ae4:	f000 f81e 	bl	8001b24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ae8:	230f      	movs	r3, #15
 8001aea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001aec:	2300      	movs	r3, #0
 8001aee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001af4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001af8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001afe:	f107 030c 	add.w	r3, r7, #12
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f001 f835 	bl	8002b74 <HAL_RCC_ClockConfig>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001b10:	f000 f808 	bl	8001b24 <Error_Handler>
  }
}
 8001b14:	bf00      	nop
 8001b16:	3750      	adds	r7, #80	@ 0x50
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	40023800 	.word	0x40023800
 8001b20:	40007000 	.word	0x40007000

08001b24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b28:	b672      	cpsid	i
}
 8001b2a:	bf00      	nop
  __disable_irq();

  // Send error message to debug UART
  sprintf(debugBuffer, "[%lu] ERROR: System halted due to critical error\r\n", HAL_GetTick());
 8001b2c:	f000 fa2c 	bl	8001f88 <HAL_GetTick>
 8001b30:	4603      	mov	r3, r0
 8001b32:	461a      	mov	r2, r3
 8001b34:	4908      	ldr	r1, [pc, #32]	@ (8001b58 <Error_Handler+0x34>)
 8001b36:	4809      	ldr	r0, [pc, #36]	@ (8001b5c <Error_Handler+0x38>)
 8001b38:	f002 fb78 	bl	800422c <siprintf>
  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001b3c:	4807      	ldr	r0, [pc, #28]	@ (8001b5c <Error_Handler+0x38>)
 8001b3e:	f7fe fb4f 	bl	80001e0 <strlen>
 8001b42:	4603      	mov	r3, r0
 8001b44:	b29a      	uxth	r2, r3
 8001b46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b4a:	4904      	ldr	r1, [pc, #16]	@ (8001b5c <Error_Handler+0x38>)
 8001b4c:	4804      	ldr	r0, [pc, #16]	@ (8001b60 <Error_Handler+0x3c>)
 8001b4e:	f001 fa81 	bl	8003054 <HAL_UART_Transmit>

  while (1)
 8001b52:	bf00      	nop
 8001b54:	e7fd      	b.n	8001b52 <Error_Handler+0x2e>
 8001b56:	bf00      	nop
 8001b58:	08005788 	.word	0x08005788
 8001b5c:	2000017c 	.word	0x2000017c
 8001b60:	200003c8 	.word	0x200003c8

08001b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b083      	sub	sp, #12
 8001b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	607b      	str	r3, [r7, #4]
 8001b6e:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b72:	4a0f      	ldr	r2, [pc, #60]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	603b      	str	r3, [r7, #0]
 8001b8a:	4b09      	ldr	r3, [pc, #36]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b8e:	4a08      	ldr	r2, [pc, #32]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b96:	4b06      	ldr	r3, [pc, #24]	@ (8001bb0 <HAL_MspInit+0x4c>)
 8001b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b9e:	603b      	str	r3, [r7, #0]
 8001ba0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ba2:	bf00      	nop
 8001ba4:	370c      	adds	r7, #12
 8001ba6:	46bd      	mov	sp, r7
 8001ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bac:	4770      	bx	lr
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <NMI_Handler+0x4>

08001bbc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <HardFault_Handler+0x4>

08001bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <MemManage_Handler+0x4>

08001bcc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bd0:	bf00      	nop
 8001bd2:	e7fd      	b.n	8001bd0 <BusFault_Handler+0x4>

08001bd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <UsageFault_Handler+0x4>

08001bdc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001be0:	bf00      	nop
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr

08001bea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bea:	b480      	push	{r7}
 8001bec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	46bd      	mov	sp, r7
 8001bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf6:	4770      	bx	lr

08001bf8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr

08001c06 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c0a:	f000 f9a9 	bl	8001f60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c0e:	bf00      	nop
 8001c10:	bd80      	pop	{r7, pc}
	...

08001c14 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001c18:	4802      	ldr	r0, [pc, #8]	@ (8001c24 <USART1_IRQHandler+0x10>)
 8001c1a:	f001 fbe1 	bl	80033e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001c1e:	bf00      	nop
 8001c20:	bd80      	pop	{r7, pc}
 8001c22:	bf00      	nop
 8001c24:	20000380 	.word	0x20000380

08001c28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c30:	4a14      	ldr	r2, [pc, #80]	@ (8001c84 <_sbrk+0x5c>)
 8001c32:	4b15      	ldr	r3, [pc, #84]	@ (8001c88 <_sbrk+0x60>)
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c38:	697b      	ldr	r3, [r7, #20]
 8001c3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c3c:	4b13      	ldr	r3, [pc, #76]	@ (8001c8c <_sbrk+0x64>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c44:	4b11      	ldr	r3, [pc, #68]	@ (8001c8c <_sbrk+0x64>)
 8001c46:	4a12      	ldr	r2, [pc, #72]	@ (8001c90 <_sbrk+0x68>)
 8001c48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c4a:	4b10      	ldr	r3, [pc, #64]	@ (8001c8c <_sbrk+0x64>)
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	4413      	add	r3, r2
 8001c52:	693a      	ldr	r2, [r7, #16]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	d207      	bcs.n	8001c68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c58:	f002 fb10 	bl	800427c <__errno>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	220c      	movs	r2, #12
 8001c60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c62:	f04f 33ff 	mov.w	r3, #4294967295
 8001c66:	e009      	b.n	8001c7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c68:	4b08      	ldr	r3, [pc, #32]	@ (8001c8c <_sbrk+0x64>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c6e:	4b07      	ldr	r3, [pc, #28]	@ (8001c8c <_sbrk+0x64>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4413      	add	r3, r2
 8001c76:	4a05      	ldr	r2, [pc, #20]	@ (8001c8c <_sbrk+0x64>)
 8001c78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3718      	adds	r7, #24
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20018000 	.word	0x20018000
 8001c88:	00000400 	.word	0x00000400
 8001c8c:	2000037c 	.word	0x2000037c
 8001c90:	20000560 	.word	0x20000560

08001c94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c98:	4b06      	ldr	r3, [pc, #24]	@ (8001cb4 <SystemInit+0x20>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c9e:	4a05      	ldr	r2, [pc, #20]	@ (8001cb4 <SystemInit+0x20>)
 8001ca0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ca4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ca8:	bf00      	nop
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	e000ed00 	.word	0xe000ed00

08001cb8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001cbc:	4b11      	ldr	r3, [pc, #68]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cbe:	4a12      	ldr	r2, [pc, #72]	@ (8001d08 <MX_USART1_UART_Init+0x50>)
 8001cc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001cc2:	4b10      	ldr	r3, [pc, #64]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001cc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001cca:	4b0e      	ldr	r3, [pc, #56]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001cd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001cd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cd8:	2200      	movs	r2, #0
 8001cda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001cdc:	4b09      	ldr	r3, [pc, #36]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cde:	220c      	movs	r2, #12
 8001ce0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ce2:	4b08      	ldr	r3, [pc, #32]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ce8:	4b06      	ldr	r3, [pc, #24]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cea:	2200      	movs	r2, #0
 8001cec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001cee:	4805      	ldr	r0, [pc, #20]	@ (8001d04 <MX_USART1_UART_Init+0x4c>)
 8001cf0:	f001 f960 	bl	8002fb4 <HAL_UART_Init>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001cfa:	f7ff ff13 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001cfe:	bf00      	nop
 8001d00:	bd80      	pop	{r7, pc}
 8001d02:	bf00      	nop
 8001d04:	20000380 	.word	0x20000380
 8001d08:	40011000 	.word	0x40011000

08001d0c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001d10:	4b11      	ldr	r3, [pc, #68]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d12:	4a12      	ldr	r2, [pc, #72]	@ (8001d5c <MX_USART2_UART_Init+0x50>)
 8001d14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001d16:	4b10      	ldr	r3, [pc, #64]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d18:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001d24:	4b0c      	ldr	r3, [pc, #48]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001d2a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001d30:	4b09      	ldr	r3, [pc, #36]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d32:	220c      	movs	r2, #12
 8001d34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d36:	4b08      	ldr	r3, [pc, #32]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d3c:	4b06      	ldr	r3, [pc, #24]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d3e:	2200      	movs	r2, #0
 8001d40:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d42:	4805      	ldr	r0, [pc, #20]	@ (8001d58 <MX_USART2_UART_Init+0x4c>)
 8001d44:	f001 f936 	bl	8002fb4 <HAL_UART_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001d4e:	f7ff fee9 	bl	8001b24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d52:	bf00      	nop
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	200003c8 	.word	0x200003c8
 8001d5c:	40004400 	.word	0x40004400

08001d60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08c      	sub	sp, #48	@ 0x30
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 031c 	add.w	r3, r7, #28
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a36      	ldr	r2, [pc, #216]	@ (8001e58 <HAL_UART_MspInit+0xf8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d135      	bne.n	8001dee <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	61bb      	str	r3, [r7, #24]
 8001d86:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d8a:	4a34      	ldr	r2, [pc, #208]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001d8c:	f043 0310 	orr.w	r3, r3, #16
 8001d90:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d92:	4b32      	ldr	r3, [pc, #200]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	61bb      	str	r3, [r7, #24]
 8001d9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	617b      	str	r3, [r7, #20]
 8001da2:	4b2e      	ldr	r3, [pc, #184]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001da6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dae:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	617b      	str	r3, [r7, #20]
 8001db8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001dba:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001dbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc0:	2302      	movs	r3, #2
 8001dc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001dcc:	2307      	movs	r3, #7
 8001dce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd0:	f107 031c 	add.w	r3, r7, #28
 8001dd4:	4619      	mov	r1, r3
 8001dd6:	4822      	ldr	r0, [pc, #136]	@ (8001e60 <HAL_UART_MspInit+0x100>)
 8001dd8:	f000 fab6 	bl	8002348 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ddc:	2200      	movs	r2, #0
 8001dde:	2100      	movs	r1, #0
 8001de0:	2025      	movs	r0, #37	@ 0x25
 8001de2:	f000 f9dc 	bl	800219e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001de6:	2025      	movs	r0, #37	@ 0x25
 8001de8:	f000 f9f5 	bl	80021d6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001dec:	e030      	b.n	8001e50 <HAL_UART_MspInit+0xf0>
  else if(uartHandle->Instance==USART2)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a1c      	ldr	r2, [pc, #112]	@ (8001e64 <HAL_UART_MspInit+0x104>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d12b      	bne.n	8001e50 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001df8:	2300      	movs	r3, #0
 8001dfa:	613b      	str	r3, [r7, #16]
 8001dfc:	4b17      	ldr	r3, [pc, #92]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e00:	4a16      	ldr	r2, [pc, #88]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001e02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e06:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e08:	4b14      	ldr	r3, [pc, #80]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001e0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	2300      	movs	r3, #0
 8001e16:	60fb      	str	r3, [r7, #12]
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e24:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_UART_MspInit+0xfc>)
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001e30:	230c      	movs	r3, #12
 8001e32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e34:	2302      	movs	r3, #2
 8001e36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e40:	2307      	movs	r3, #7
 8001e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e44:	f107 031c 	add.w	r3, r7, #28
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	@ (8001e60 <HAL_UART_MspInit+0x100>)
 8001e4c:	f000 fa7c 	bl	8002348 <HAL_GPIO_Init>
}
 8001e50:	bf00      	nop
 8001e52:	3730      	adds	r7, #48	@ 0x30
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40011000 	.word	0x40011000
 8001e5c:	40023800 	.word	0x40023800
 8001e60:	40020000 	.word	0x40020000
 8001e64:	40004400 	.word	0x40004400

08001e68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ea0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e6c:	f7ff ff12 	bl	8001c94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e70:	480c      	ldr	r0, [pc, #48]	@ (8001ea4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e72:	490d      	ldr	r1, [pc, #52]	@ (8001ea8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e74:	4a0d      	ldr	r2, [pc, #52]	@ (8001eac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e78:	e002      	b.n	8001e80 <LoopCopyDataInit>

08001e7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e7e:	3304      	adds	r3, #4

08001e80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e84:	d3f9      	bcc.n	8001e7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e86:	4a0a      	ldr	r2, [pc, #40]	@ (8001eb0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e88:	4c0a      	ldr	r4, [pc, #40]	@ (8001eb4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e8c:	e001      	b.n	8001e92 <LoopFillZerobss>

08001e8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e90:	3204      	adds	r2, #4

08001e92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e94:	d3fb      	bcc.n	8001e8e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001e96:	f002 f9f7 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e9a:	f7fe fd9d 	bl	80009d8 <main>
  bx  lr    
 8001e9e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001ea4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001eac:	080061dc 	.word	0x080061dc
  ldr r2, =_sbss
 8001eb0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001eb4:	2000055c 	.word	0x2000055c

08001eb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb8:	e7fe      	b.n	8001eb8 <ADC_IRQHandler>
	...

08001ebc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ec0:	4b0e      	ldr	r3, [pc, #56]	@ (8001efc <HAL_Init+0x40>)
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	@ (8001efc <HAL_Init+0x40>)
 8001ec6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8001efc <HAL_Init+0x40>)
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	4a0a      	ldr	r2, [pc, #40]	@ (8001efc <HAL_Init+0x40>)
 8001ed2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ed6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed8:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_Init+0x40>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a07      	ldr	r2, [pc, #28]	@ (8001efc <HAL_Init+0x40>)
 8001ede:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ee2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee4:	2003      	movs	r0, #3
 8001ee6:	f000 f94f 	bl	8002188 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001eea:	2000      	movs	r0, #0
 8001eec:	f000 f808 	bl	8001f00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ef0:	f7ff fe38 	bl	8001b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40023c00 	.word	0x40023c00

08001f00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f08:	4b12      	ldr	r3, [pc, #72]	@ (8001f54 <HAL_InitTick+0x54>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	4b12      	ldr	r3, [pc, #72]	@ (8001f58 <HAL_InitTick+0x58>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	4619      	mov	r1, r3
 8001f12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 f967 	bl	80021f2 <HAL_SYSTICK_Config>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e00e      	b.n	8001f4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2b0f      	cmp	r3, #15
 8001f32:	d80a      	bhi.n	8001f4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f34:	2200      	movs	r2, #0
 8001f36:	6879      	ldr	r1, [r7, #4]
 8001f38:	f04f 30ff 	mov.w	r0, #4294967295
 8001f3c:	f000 f92f 	bl	800219e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f40:	4a06      	ldr	r2, [pc, #24]	@ (8001f5c <HAL_InitTick+0x5c>)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f46:	2300      	movs	r3, #0
 8001f48:	e000      	b.n	8001f4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
}
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	3708      	adds	r7, #8
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000004 	.word	0x20000004
 8001f58:	2000000c 	.word	0x2000000c
 8001f5c:	20000008 	.word	0x20000008

08001f60 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <HAL_IncTick+0x20>)
 8001f66:	781b      	ldrb	r3, [r3, #0]
 8001f68:	461a      	mov	r2, r3
 8001f6a:	4b06      	ldr	r3, [pc, #24]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	4a04      	ldr	r2, [pc, #16]	@ (8001f84 <HAL_IncTick+0x24>)
 8001f72:	6013      	str	r3, [r2, #0]
}
 8001f74:	bf00      	nop
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr
 8001f7e:	bf00      	nop
 8001f80:	2000000c 	.word	0x2000000c
 8001f84:	20000410 	.word	0x20000410

08001f88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f8c:	4b03      	ldr	r3, [pc, #12]	@ (8001f9c <HAL_GetTick+0x14>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr
 8001f9a:	bf00      	nop
 8001f9c:	20000410 	.word	0x20000410

08001fa0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	b084      	sub	sp, #16
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff ffee 	bl	8001f88 <HAL_GetTick>
 8001fac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb8:	d005      	beq.n	8001fc6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_Delay+0x44>)
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc6:	bf00      	nop
 8001fc8:	f7ff ffde 	bl	8001f88 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	68fa      	ldr	r2, [r7, #12]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d8f7      	bhi.n	8001fc8 <HAL_Delay+0x28>
  {
  }
}
 8001fd8:	bf00      	nop
 8001fda:	bf00      	nop
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	2000000c 	.word	0x2000000c

08001fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b085      	sub	sp, #20
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ff8:	4b0c      	ldr	r3, [pc, #48]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ffe:	68ba      	ldr	r2, [r7, #8]
 8002000:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002004:	4013      	ands	r3, r2
 8002006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002010:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002014:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	@ (800202c <__NVIC_SetPriorityGrouping+0x44>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00

08002030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002030:	b480      	push	{r7}
 8002032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002034:	4b04      	ldr	r3, [pc, #16]	@ (8002048 <__NVIC_GetPriorityGrouping+0x18>)
 8002036:	68db      	ldr	r3, [r3, #12]
 8002038:	0a1b      	lsrs	r3, r3, #8
 800203a:	f003 0307 	and.w	r3, r3, #7
}
 800203e:	4618      	mov	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	e000ed00 	.word	0xe000ed00

0800204c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	4603      	mov	r3, r0
 8002054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205a:	2b00      	cmp	r3, #0
 800205c:	db0b      	blt.n	8002076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800205e:	79fb      	ldrb	r3, [r7, #7]
 8002060:	f003 021f 	and.w	r2, r3, #31
 8002064:	4907      	ldr	r1, [pc, #28]	@ (8002084 <__NVIC_EnableIRQ+0x38>)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	095b      	lsrs	r3, r3, #5
 800206c:	2001      	movs	r0, #1
 800206e:	fa00 f202 	lsl.w	r2, r0, r2
 8002072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002076:	bf00      	nop
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	e000e100 	.word	0xe000e100

08002088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	4603      	mov	r3, r0
 8002090:	6039      	str	r1, [r7, #0]
 8002092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002098:	2b00      	cmp	r3, #0
 800209a:	db0a      	blt.n	80020b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	b2da      	uxtb	r2, r3
 80020a0:	490c      	ldr	r1, [pc, #48]	@ (80020d4 <__NVIC_SetPriority+0x4c>)
 80020a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a6:	0112      	lsls	r2, r2, #4
 80020a8:	b2d2      	uxtb	r2, r2
 80020aa:	440b      	add	r3, r1
 80020ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b0:	e00a      	b.n	80020c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	4908      	ldr	r1, [pc, #32]	@ (80020d8 <__NVIC_SetPriority+0x50>)
 80020b8:	79fb      	ldrb	r3, [r7, #7]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	3b04      	subs	r3, #4
 80020c0:	0112      	lsls	r2, r2, #4
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	440b      	add	r3, r1
 80020c6:	761a      	strb	r2, [r3, #24]
}
 80020c8:	bf00      	nop
 80020ca:	370c      	adds	r7, #12
 80020cc:	46bd      	mov	sp, r7
 80020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d2:	4770      	bx	lr
 80020d4:	e000e100 	.word	0xe000e100
 80020d8:	e000ed00 	.word	0xe000ed00

080020dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b480      	push	{r7}
 80020de:	b089      	sub	sp, #36	@ 0x24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	f003 0307 	and.w	r3, r3, #7
 80020ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	f1c3 0307 	rsb	r3, r3, #7
 80020f6:	2b04      	cmp	r3, #4
 80020f8:	bf28      	it	cs
 80020fa:	2304      	movcs	r3, #4
 80020fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	3304      	adds	r3, #4
 8002102:	2b06      	cmp	r3, #6
 8002104:	d902      	bls.n	800210c <NVIC_EncodePriority+0x30>
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	3b03      	subs	r3, #3
 800210a:	e000      	b.n	800210e <NVIC_EncodePriority+0x32>
 800210c:	2300      	movs	r3, #0
 800210e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002110:	f04f 32ff 	mov.w	r2, #4294967295
 8002114:	69bb      	ldr	r3, [r7, #24]
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	401a      	ands	r2, r3
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002124:	f04f 31ff 	mov.w	r1, #4294967295
 8002128:	697b      	ldr	r3, [r7, #20]
 800212a:	fa01 f303 	lsl.w	r3, r1, r3
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002134:	4313      	orrs	r3, r2
         );
}
 8002136:	4618      	mov	r0, r3
 8002138:	3724      	adds	r7, #36	@ 0x24
 800213a:	46bd      	mov	sp, r7
 800213c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002140:	4770      	bx	lr
	...

08002144 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b082      	sub	sp, #8
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	3b01      	subs	r3, #1
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002154:	d301      	bcc.n	800215a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002156:	2301      	movs	r3, #1
 8002158:	e00f      	b.n	800217a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215a:	4a0a      	ldr	r2, [pc, #40]	@ (8002184 <SysTick_Config+0x40>)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002162:	210f      	movs	r1, #15
 8002164:	f04f 30ff 	mov.w	r0, #4294967295
 8002168:	f7ff ff8e 	bl	8002088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <SysTick_Config+0x40>)
 800216e:	2200      	movs	r2, #0
 8002170:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002172:	4b04      	ldr	r3, [pc, #16]	@ (8002184 <SysTick_Config+0x40>)
 8002174:	2207      	movs	r2, #7
 8002176:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002178:	2300      	movs	r3, #0
}
 800217a:	4618      	mov	r0, r3
 800217c:	3708      	adds	r7, #8
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	e000e010 	.word	0xe000e010

08002188 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b082      	sub	sp, #8
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f7ff ff29 	bl	8001fe8 <__NVIC_SetPriorityGrouping>
}
 8002196:	bf00      	nop
 8002198:	3708      	adds	r7, #8
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800219e:	b580      	push	{r7, lr}
 80021a0:	b086      	sub	sp, #24
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	4603      	mov	r3, r0
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b0:	f7ff ff3e 	bl	8002030 <__NVIC_GetPriorityGrouping>
 80021b4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	6978      	ldr	r0, [r7, #20]
 80021bc:	f7ff ff8e 	bl	80020dc <NVIC_EncodePriority>
 80021c0:	4602      	mov	r2, r0
 80021c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021c6:	4611      	mov	r1, r2
 80021c8:	4618      	mov	r0, r3
 80021ca:	f7ff ff5d 	bl	8002088 <__NVIC_SetPriority>
}
 80021ce:	bf00      	nop
 80021d0:	3718      	adds	r7, #24
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}

080021d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	4603      	mov	r3, r0
 80021de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7ff ff31 	bl	800204c <__NVIC_EnableIRQ>
}
 80021ea:	bf00      	nop
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b082      	sub	sp, #8
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f7ff ffa2 	bl	8002144 <SysTick_Config>
 8002200:	4603      	mov	r3, r0
}
 8002202:	4618      	mov	r0, r3
 8002204:	3708      	adds	r7, #8
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}

0800220a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800220a:	b580      	push	{r7, lr}
 800220c:	b084      	sub	sp, #16
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002216:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002218:	f7ff feb6 	bl	8001f88 <HAL_GetTick>
 800221c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002224:	b2db      	uxtb	r3, r3
 8002226:	2b02      	cmp	r3, #2
 8002228:	d008      	beq.n	800223c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2280      	movs	r2, #128	@ 0x80
 800222e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e052      	b.n	80022e2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f022 0216 	bic.w	r2, r2, #22
 800224a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	695a      	ldr	r2, [r3, #20]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800225a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002260:	2b00      	cmp	r3, #0
 8002262:	d103      	bne.n	800226c <HAL_DMA_Abort+0x62>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0208 	bic.w	r2, r2, #8
 800227a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 0201 	bic.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800228c:	e013      	b.n	80022b6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800228e:	f7ff fe7b 	bl	8001f88 <HAL_GetTick>
 8002292:	4602      	mov	r2, r0
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b05      	cmp	r3, #5
 800229a:	d90c      	bls.n	80022b6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2220      	movs	r2, #32
 80022a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2203      	movs	r2, #3
 80022a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2200      	movs	r2, #0
 80022ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e015      	b.n	80022e2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0301 	and.w	r3, r3, #1
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d1e4      	bne.n	800228e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022c8:	223f      	movs	r2, #63	@ 0x3f
 80022ca:	409a      	lsls	r2, r3
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2201      	movs	r2, #1
 80022d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	2200      	movs	r2, #0
 80022dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80022e0:	2300      	movs	r3, #0
}
 80022e2:	4618      	mov	r0, r3
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ea:	b480      	push	{r7}
 80022ec:	b083      	sub	sp, #12
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80022f8:	b2db      	uxtb	r3, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d004      	beq.n	8002308 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2280      	movs	r2, #128	@ 0x80
 8002302:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e00c      	b.n	8002322 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2205      	movs	r2, #5
 800230c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f022 0201 	bic.w	r2, r2, #1
 800231e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002320:	2300      	movs	r3, #0
}
 8002322:	4618      	mov	r0, r3
 8002324:	370c      	adds	r7, #12
 8002326:	46bd      	mov	sp, r7
 8002328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232c:	4770      	bx	lr

0800232e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800232e:	b480      	push	{r7}
 8002330:	b083      	sub	sp, #12
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
	...

08002348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002348:	b480      	push	{r7}
 800234a:	b089      	sub	sp, #36	@ 0x24
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002356:	2300      	movs	r3, #0
 8002358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	e159      	b.n	8002618 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002364:	2201      	movs	r2, #1
 8002366:	69fb      	ldr	r3, [r7, #28]
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4013      	ands	r3, r2
 8002376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002378:	693a      	ldr	r2, [r7, #16]
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8148 	bne.w	8002612 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b01      	cmp	r3, #1
 800238c:	d005      	beq.n	800239a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002396:	2b02      	cmp	r3, #2
 8002398:	d130      	bne.n	80023fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a0:	69fb      	ldr	r3, [r7, #28]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	2203      	movs	r2, #3
 80023a6:	fa02 f303 	lsl.w	r3, r2, r3
 80023aa:	43db      	mvns	r3, r3
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	4013      	ands	r3, r2
 80023b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	68da      	ldr	r2, [r3, #12]
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d0:	2201      	movs	r2, #1
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa02 f303 	lsl.w	r3, r2, r3
 80023d8:	43db      	mvns	r3, r3
 80023da:	69ba      	ldr	r2, [r7, #24]
 80023dc:	4013      	ands	r3, r2
 80023de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	091b      	lsrs	r3, r3, #4
 80023e6:	f003 0201 	and.w	r2, r3, #1
 80023ea:	69fb      	ldr	r3, [r7, #28]
 80023ec:	fa02 f303 	lsl.w	r3, r2, r3
 80023f0:	69ba      	ldr	r2, [r7, #24]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f003 0303 	and.w	r3, r3, #3
 8002404:	2b03      	cmp	r3, #3
 8002406:	d017      	beq.n	8002438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	68db      	ldr	r3, [r3, #12]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800240e:	69fb      	ldr	r3, [r7, #28]
 8002410:	005b      	lsls	r3, r3, #1
 8002412:	2203      	movs	r2, #3
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	43db      	mvns	r3, r3
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	4013      	ands	r3, r2
 800241e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	005b      	lsls	r3, r3, #1
 8002428:	fa02 f303 	lsl.w	r3, r2, r3
 800242c:	69ba      	ldr	r2, [r7, #24]
 800242e:	4313      	orrs	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f003 0303 	and.w	r3, r3, #3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d123      	bne.n	800248c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	08da      	lsrs	r2, r3, #3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	3208      	adds	r2, #8
 800244c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	009b      	lsls	r3, r3, #2
 800245a:	220f      	movs	r2, #15
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	43db      	mvns	r3, r3
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	4013      	ands	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691a      	ldr	r2, [r3, #16]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	f003 0307 	and.w	r3, r3, #7
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	fa02 f303 	lsl.w	r3, r2, r3
 8002478:	69ba      	ldr	r2, [r7, #24]
 800247a:	4313      	orrs	r3, r2
 800247c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	08da      	lsrs	r2, r3, #3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	3208      	adds	r2, #8
 8002486:	69b9      	ldr	r1, [r7, #24]
 8002488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	005b      	lsls	r3, r3, #1
 8002496:	2203      	movs	r2, #3
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	43db      	mvns	r3, r3
 800249e:	69ba      	ldr	r2, [r7, #24]
 80024a0:	4013      	ands	r3, r2
 80024a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	f003 0203 	and.w	r2, r3, #3
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	005b      	lsls	r3, r3, #1
 80024b0:	fa02 f303 	lsl.w	r3, r2, r3
 80024b4:	69ba      	ldr	r2, [r7, #24]
 80024b6:	4313      	orrs	r3, r2
 80024b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	f000 80a2 	beq.w	8002612 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024ce:	2300      	movs	r3, #0
 80024d0:	60fb      	str	r3, [r7, #12]
 80024d2:	4b57      	ldr	r3, [pc, #348]	@ (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024d6:	4a56      	ldr	r2, [pc, #344]	@ (8002630 <HAL_GPIO_Init+0x2e8>)
 80024d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80024de:	4b54      	ldr	r3, [pc, #336]	@ (8002630 <HAL_GPIO_Init+0x2e8>)
 80024e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024ea:	4a52      	ldr	r2, [pc, #328]	@ (8002634 <HAL_GPIO_Init+0x2ec>)
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	3302      	adds	r3, #2
 80024f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024f8:	69fb      	ldr	r3, [r7, #28]
 80024fa:	f003 0303 	and.w	r3, r3, #3
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	220f      	movs	r2, #15
 8002502:	fa02 f303 	lsl.w	r3, r2, r3
 8002506:	43db      	mvns	r3, r3
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	4013      	ands	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a49      	ldr	r2, [pc, #292]	@ (8002638 <HAL_GPIO_Init+0x2f0>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x202>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a48      	ldr	r2, [pc, #288]	@ (800263c <HAL_GPIO_Init+0x2f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x1fe>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a47      	ldr	r2, [pc, #284]	@ (8002640 <HAL_GPIO_Init+0x2f8>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x1fa>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a46      	ldr	r2, [pc, #280]	@ (8002644 <HAL_GPIO_Init+0x2fc>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x1f6>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a45      	ldr	r2, [pc, #276]	@ (8002648 <HAL_GPIO_Init+0x300>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x1f2>
 8002536:	2304      	movs	r3, #4
 8002538:	e008      	b.n	800254c <HAL_GPIO_Init+0x204>
 800253a:	2307      	movs	r3, #7
 800253c:	e006      	b.n	800254c <HAL_GPIO_Init+0x204>
 800253e:	2303      	movs	r3, #3
 8002540:	e004      	b.n	800254c <HAL_GPIO_Init+0x204>
 8002542:	2302      	movs	r3, #2
 8002544:	e002      	b.n	800254c <HAL_GPIO_Init+0x204>
 8002546:	2301      	movs	r3, #1
 8002548:	e000      	b.n	800254c <HAL_GPIO_Init+0x204>
 800254a:	2300      	movs	r3, #0
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	f002 0203 	and.w	r2, r2, #3
 8002552:	0092      	lsls	r2, r2, #2
 8002554:	4093      	lsls	r3, r2
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	4313      	orrs	r3, r2
 800255a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800255c:	4935      	ldr	r1, [pc, #212]	@ (8002634 <HAL_GPIO_Init+0x2ec>)
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	089b      	lsrs	r3, r3, #2
 8002562:	3302      	adds	r3, #2
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800256a:	4b38      	ldr	r3, [pc, #224]	@ (800264c <HAL_GPIO_Init+0x304>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002570:	693b      	ldr	r3, [r7, #16]
 8002572:	43db      	mvns	r3, r3
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	4013      	ands	r3, r2
 8002578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002586:	69ba      	ldr	r2, [r7, #24]
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	4313      	orrs	r3, r2
 800258c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800258e:	4a2f      	ldr	r2, [pc, #188]	@ (800264c <HAL_GPIO_Init+0x304>)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002594:	4b2d      	ldr	r3, [pc, #180]	@ (800264c <HAL_GPIO_Init+0x304>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	43db      	mvns	r3, r3
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	4013      	ands	r3, r2
 80025a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d003      	beq.n	80025b8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	4313      	orrs	r3, r2
 80025b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025b8:	4a24      	ldr	r2, [pc, #144]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025ba:	69bb      	ldr	r3, [r7, #24]
 80025bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025be:	4b23      	ldr	r3, [pc, #140]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025c4:	693b      	ldr	r3, [r7, #16]
 80025c6:	43db      	mvns	r3, r3
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	4013      	ands	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	4313      	orrs	r3, r2
 80025e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025e2:	4a1a      	ldr	r2, [pc, #104]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025e8:	4b18      	ldr	r3, [pc, #96]	@ (800264c <HAL_GPIO_Init+0x304>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d003      	beq.n	800260c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	4313      	orrs	r3, r2
 800260a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800260c:	4a0f      	ldr	r2, [pc, #60]	@ (800264c <HAL_GPIO_Init+0x304>)
 800260e:	69bb      	ldr	r3, [r7, #24]
 8002610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	3301      	adds	r3, #1
 8002616:	61fb      	str	r3, [r7, #28]
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	2b0f      	cmp	r3, #15
 800261c:	f67f aea2 	bls.w	8002364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002620:	bf00      	nop
 8002622:	bf00      	nop
 8002624:	3724      	adds	r7, #36	@ 0x24
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	40023800 	.word	0x40023800
 8002634:	40013800 	.word	0x40013800
 8002638:	40020000 	.word	0x40020000
 800263c:	40020400 	.word	0x40020400
 8002640:	40020800 	.word	0x40020800
 8002644:	40020c00 	.word	0x40020c00
 8002648:	40021000 	.word	0x40021000
 800264c:	40013c00 	.word	0x40013c00

08002650 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002650:	b480      	push	{r7}
 8002652:	b083      	sub	sp, #12
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	460b      	mov	r3, r1
 800265a:	807b      	strh	r3, [r7, #2]
 800265c:	4613      	mov	r3, r2
 800265e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002660:	787b      	ldrb	r3, [r7, #1]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d003      	beq.n	800266e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002666:	887a      	ldrh	r2, [r7, #2]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800266c:	e003      	b.n	8002676 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800266e:	887b      	ldrh	r3, [r7, #2]
 8002670:	041a      	lsls	r2, r3, #16
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	619a      	str	r2, [r3, #24]
}
 8002676:	bf00      	nop
 8002678:	370c      	adds	r7, #12
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
	...

08002684 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b086      	sub	sp, #24
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d101      	bne.n	8002696 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e267      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0301 	and.w	r3, r3, #1
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d075      	beq.n	800278e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026a2:	4b88      	ldr	r3, [pc, #544]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f003 030c 	and.w	r3, r3, #12
 80026aa:	2b04      	cmp	r3, #4
 80026ac:	d00c      	beq.n	80026c8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ae:	4b85      	ldr	r3, [pc, #532]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026b6:	2b08      	cmp	r3, #8
 80026b8:	d112      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026ba:	4b82      	ldr	r3, [pc, #520]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026c2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026c6:	d10b      	bne.n	80026e0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026c8:	4b7e      	ldr	r3, [pc, #504]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d05b      	beq.n	800278c <HAL_RCC_OscConfig+0x108>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d157      	bne.n	800278c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e242      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026e8:	d106      	bne.n	80026f8 <HAL_RCC_OscConfig+0x74>
 80026ea:	4b76      	ldr	r3, [pc, #472]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a75      	ldr	r2, [pc, #468]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80026f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026f4:	6013      	str	r3, [r2, #0]
 80026f6:	e01d      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002700:	d10c      	bne.n	800271c <HAL_RCC_OscConfig+0x98>
 8002702:	4b70      	ldr	r3, [pc, #448]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4a6f      	ldr	r2, [pc, #444]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002708:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800270c:	6013      	str	r3, [r2, #0]
 800270e:	4b6d      	ldr	r3, [pc, #436]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a6c      	ldr	r2, [pc, #432]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002714:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002718:	6013      	str	r3, [r2, #0]
 800271a:	e00b      	b.n	8002734 <HAL_RCC_OscConfig+0xb0>
 800271c:	4b69      	ldr	r3, [pc, #420]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a68      	ldr	r2, [pc, #416]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002722:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002726:	6013      	str	r3, [r2, #0]
 8002728:	4b66      	ldr	r3, [pc, #408]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a65      	ldr	r2, [pc, #404]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800272e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002732:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d013      	beq.n	8002764 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800273c:	f7ff fc24 	bl	8001f88 <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002744:	f7ff fc20 	bl	8001f88 <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b64      	cmp	r3, #100	@ 0x64
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e207      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002756:	4b5b      	ldr	r3, [pc, #364]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0xc0>
 8002762:	e014      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002764:	f7ff fc10 	bl	8001f88 <HAL_GetTick>
 8002768:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800276c:	f7ff fc0c 	bl	8001f88 <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	@ 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1f3      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800277e:	4b51      	ldr	r3, [pc, #324]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002786:	2b00      	cmp	r3, #0
 8002788:	d1f0      	bne.n	800276c <HAL_RCC_OscConfig+0xe8>
 800278a:	e000      	b.n	800278e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d063      	beq.n	8002862 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800279a:	4b4a      	ldr	r3, [pc, #296]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00b      	beq.n	80027be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027a6:	4b47      	ldr	r3, [pc, #284]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027ae:	2b08      	cmp	r3, #8
 80027b0:	d11c      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027b2:	4b44      	ldr	r3, [pc, #272]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d116      	bne.n	80027ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027be:	4b41      	ldr	r3, [pc, #260]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0302 	and.w	r3, r3, #2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d005      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	2b01      	cmp	r3, #1
 80027d0:	d001      	beq.n	80027d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e1c7      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027d6:	4b3b      	ldr	r3, [pc, #236]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4937      	ldr	r1, [pc, #220]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 80027e6:	4313      	orrs	r3, r2
 80027e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027ea:	e03a      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d020      	beq.n	8002836 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027f4:	4b34      	ldr	r3, [pc, #208]	@ (80028c8 <HAL_RCC_OscConfig+0x244>)
 80027f6:	2201      	movs	r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff fbc5 	bl	8001f88 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002802:	f7ff fbc1 	bl	8001f88 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e1a8      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002814:	4b2b      	ldr	r3, [pc, #172]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0f0      	beq.n	8002802 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002820:	4b28      	ldr	r3, [pc, #160]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	00db      	lsls	r3, r3, #3
 800282e:	4925      	ldr	r1, [pc, #148]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]
 8002834:	e015      	b.n	8002862 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002836:	4b24      	ldr	r3, [pc, #144]	@ (80028c8 <HAL_RCC_OscConfig+0x244>)
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800283c:	f7ff fba4 	bl	8001f88 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002844:	f7ff fba0 	bl	8001f88 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e187      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002856:	4b1b      	ldr	r3, [pc, #108]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d1f0      	bne.n	8002844 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 0308 	and.w	r3, r3, #8
 800286a:	2b00      	cmp	r3, #0
 800286c:	d036      	beq.n	80028dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d016      	beq.n	80028a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002876:	4b15      	ldr	r3, [pc, #84]	@ (80028cc <HAL_RCC_OscConfig+0x248>)
 8002878:	2201      	movs	r2, #1
 800287a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800287c:	f7ff fb84 	bl	8001f88 <HAL_GetTick>
 8002880:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002882:	e008      	b.n	8002896 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002884:	f7ff fb80 	bl	8001f88 <HAL_GetTick>
 8002888:	4602      	mov	r2, r0
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	2b02      	cmp	r3, #2
 8002890:	d901      	bls.n	8002896 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e167      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002896:	4b0b      	ldr	r3, [pc, #44]	@ (80028c4 <HAL_RCC_OscConfig+0x240>)
 8002898:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800289a:	f003 0302 	and.w	r3, r3, #2
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d0f0      	beq.n	8002884 <HAL_RCC_OscConfig+0x200>
 80028a2:	e01b      	b.n	80028dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028a4:	4b09      	ldr	r3, [pc, #36]	@ (80028cc <HAL_RCC_OscConfig+0x248>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028aa:	f7ff fb6d 	bl	8001f88 <HAL_GetTick>
 80028ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b0:	e00e      	b.n	80028d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028b2:	f7ff fb69 	bl	8001f88 <HAL_GetTick>
 80028b6:	4602      	mov	r2, r0
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	1ad3      	subs	r3, r2, r3
 80028bc:	2b02      	cmp	r3, #2
 80028be:	d907      	bls.n	80028d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c0:	2303      	movs	r3, #3
 80028c2:	e150      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
 80028c4:	40023800 	.word	0x40023800
 80028c8:	42470000 	.word	0x42470000
 80028cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d0:	4b88      	ldr	r3, [pc, #544]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028d4:	f003 0302 	and.w	r3, r3, #2
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d1ea      	bne.n	80028b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0304 	and.w	r3, r3, #4
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	f000 8097 	beq.w	8002a18 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028ea:	2300      	movs	r3, #0
 80028ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ee:	4b81      	ldr	r3, [pc, #516]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80028f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d10f      	bne.n	800291a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028fa:	2300      	movs	r3, #0
 80028fc:	60bb      	str	r3, [r7, #8]
 80028fe:	4b7d      	ldr	r3, [pc, #500]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002900:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002902:	4a7c      	ldr	r2, [pc, #496]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002904:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002908:	6413      	str	r3, [r2, #64]	@ 0x40
 800290a:	4b7a      	ldr	r3, [pc, #488]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 800290c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002912:	60bb      	str	r3, [r7, #8]
 8002914:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002916:	2301      	movs	r3, #1
 8002918:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800291a:	4b77      	ldr	r3, [pc, #476]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002922:	2b00      	cmp	r3, #0
 8002924:	d118      	bne.n	8002958 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002926:	4b74      	ldr	r3, [pc, #464]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a73      	ldr	r2, [pc, #460]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 800292c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002930:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002932:	f7ff fb29 	bl	8001f88 <HAL_GetTick>
 8002936:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800293a:	f7ff fb25 	bl	8001f88 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	693b      	ldr	r3, [r7, #16]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e10c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800294c:	4b6a      	ldr	r3, [pc, #424]	@ (8002af8 <HAL_RCC_OscConfig+0x474>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002954:	2b00      	cmp	r3, #0
 8002956:	d0f0      	beq.n	800293a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d106      	bne.n	800296e <HAL_RCC_OscConfig+0x2ea>
 8002960:	4b64      	ldr	r3, [pc, #400]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002962:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002964:	4a63      	ldr	r2, [pc, #396]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002966:	f043 0301 	orr.w	r3, r3, #1
 800296a:	6713      	str	r3, [r2, #112]	@ 0x70
 800296c:	e01c      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b05      	cmp	r3, #5
 8002974:	d10c      	bne.n	8002990 <HAL_RCC_OscConfig+0x30c>
 8002976:	4b5f      	ldr	r3, [pc, #380]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002978:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800297a:	4a5e      	ldr	r2, [pc, #376]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 800297c:	f043 0304 	orr.w	r3, r3, #4
 8002980:	6713      	str	r3, [r2, #112]	@ 0x70
 8002982:	4b5c      	ldr	r3, [pc, #368]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002984:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002986:	4a5b      	ldr	r2, [pc, #364]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002988:	f043 0301 	orr.w	r3, r3, #1
 800298c:	6713      	str	r3, [r2, #112]	@ 0x70
 800298e:	e00b      	b.n	80029a8 <HAL_RCC_OscConfig+0x324>
 8002990:	4b58      	ldr	r3, [pc, #352]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002992:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002994:	4a57      	ldr	r2, [pc, #348]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002996:	f023 0301 	bic.w	r3, r3, #1
 800299a:	6713      	str	r3, [r2, #112]	@ 0x70
 800299c:	4b55      	ldr	r3, [pc, #340]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 800299e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a0:	4a54      	ldr	r2, [pc, #336]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029a2:	f023 0304 	bic.w	r3, r3, #4
 80029a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d015      	beq.n	80029dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b0:	f7ff faea 	bl	8001f88 <HAL_GetTick>
 80029b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029b6:	e00a      	b.n	80029ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029b8:	f7ff fae6 	bl	8001f88 <HAL_GetTick>
 80029bc:	4602      	mov	r2, r0
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	1ad3      	subs	r3, r2, r3
 80029c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0cb      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029ce:	4b49      	ldr	r3, [pc, #292]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029d2:	f003 0302 	and.w	r3, r3, #2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d0ee      	beq.n	80029b8 <HAL_RCC_OscConfig+0x334>
 80029da:	e014      	b.n	8002a06 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029dc:	f7ff fad4 	bl	8001f88 <HAL_GetTick>
 80029e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029e4:	f7ff fad0 	bl	8001f88 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e0b5      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029fa:	4b3e      	ldr	r3, [pc, #248]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 80029fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029fe:	f003 0302 	and.w	r3, r3, #2
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1ee      	bne.n	80029e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a06:	7dfb      	ldrb	r3, [r7, #23]
 8002a08:	2b01      	cmp	r3, #1
 8002a0a:	d105      	bne.n	8002a18 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a0c:	4b39      	ldr	r3, [pc, #228]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	4a38      	ldr	r2, [pc, #224]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a16:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 80a1 	beq.w	8002b64 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a22:	4b34      	ldr	r3, [pc, #208]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a24:	689b      	ldr	r3, [r3, #8]
 8002a26:	f003 030c 	and.w	r3, r3, #12
 8002a2a:	2b08      	cmp	r3, #8
 8002a2c:	d05c      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	699b      	ldr	r3, [r3, #24]
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d141      	bne.n	8002aba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a36:	4b31      	ldr	r3, [pc, #196]	@ (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a38:	2200      	movs	r2, #0
 8002a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a3c:	f7ff faa4 	bl	8001f88 <HAL_GetTick>
 8002a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a44:	f7ff faa0 	bl	8001f88 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	693b      	ldr	r3, [r7, #16]
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e087      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a56:	4b27      	ldr	r3, [pc, #156]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d1f0      	bne.n	8002a44 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69da      	ldr	r2, [r3, #28]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	431a      	orrs	r2, r3
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a70:	019b      	lsls	r3, r3, #6
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a78:	085b      	lsrs	r3, r3, #1
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	041b      	lsls	r3, r3, #16
 8002a7e:	431a      	orrs	r2, r3
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a84:	061b      	lsls	r3, r3, #24
 8002a86:	491b      	ldr	r1, [pc, #108]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x478>)
 8002a8e:	2201      	movs	r2, #1
 8002a90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a92:	f7ff fa79 	bl	8001f88 <HAL_GetTick>
 8002a96:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a98:	e008      	b.n	8002aac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7ff fa75 	bl	8001f88 <HAL_GetTick>
 8002a9e:	4602      	mov	r2, r0
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	1ad3      	subs	r3, r2, r3
 8002aa4:	2b02      	cmp	r3, #2
 8002aa6:	d901      	bls.n	8002aac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	e05c      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aac:	4b11      	ldr	r3, [pc, #68]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d0f0      	beq.n	8002a9a <HAL_RCC_OscConfig+0x416>
 8002ab8:	e054      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aba:	4b10      	ldr	r3, [pc, #64]	@ (8002afc <HAL_RCC_OscConfig+0x478>)
 8002abc:	2200      	movs	r2, #0
 8002abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac0:	f7ff fa62 	bl	8001f88 <HAL_GetTick>
 8002ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ac6:	e008      	b.n	8002ada <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ac8:	f7ff fa5e 	bl	8001f88 <HAL_GetTick>
 8002acc:	4602      	mov	r2, r0
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	1ad3      	subs	r3, r2, r3
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d901      	bls.n	8002ada <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e045      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ada:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_RCC_OscConfig+0x470>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d1f0      	bne.n	8002ac8 <HAL_RCC_OscConfig+0x444>
 8002ae6:	e03d      	b.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	699b      	ldr	r3, [r3, #24]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d107      	bne.n	8002b00 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af0:	2301      	movs	r3, #1
 8002af2:	e038      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40007000 	.word	0x40007000
 8002afc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b00:	4b1b      	ldr	r3, [pc, #108]	@ (8002b70 <HAL_RCC_OscConfig+0x4ec>)
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d028      	beq.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b18:	429a      	cmp	r2, r3
 8002b1a:	d121      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b26:	429a      	cmp	r2, r3
 8002b28:	d11a      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b2a:	68fa      	ldr	r2, [r7, #12]
 8002b2c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b30:	4013      	ands	r3, r2
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b36:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d111      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b46:	085b      	lsrs	r3, r3, #1
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d107      	bne.n	8002b60 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b5a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	d001      	beq.n	8002b64 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b60:	2301      	movs	r3, #1
 8002b62:	e000      	b.n	8002b66 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b64:	2300      	movs	r3, #0
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3718      	adds	r7, #24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}
 8002b6e:	bf00      	nop
 8002b70:	40023800 	.word	0x40023800

08002b74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	b084      	sub	sp, #16
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d101      	bne.n	8002b88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e0cc      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b88:	4b68      	ldr	r3, [pc, #416]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0307 	and.w	r3, r3, #7
 8002b90:	683a      	ldr	r2, [r7, #0]
 8002b92:	429a      	cmp	r2, r3
 8002b94:	d90c      	bls.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b96:	4b65      	ldr	r3, [pc, #404]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	b2d2      	uxtb	r2, r2
 8002b9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b9e:	4b63      	ldr	r3, [pc, #396]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0307 	and.w	r3, r3, #7
 8002ba6:	683a      	ldr	r2, [r7, #0]
 8002ba8:	429a      	cmp	r2, r3
 8002baa:	d001      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e0b8      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f003 0302 	and.w	r3, r3, #2
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d020      	beq.n	8002bfe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d005      	beq.n	8002bd4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bc8:	4b59      	ldr	r3, [pc, #356]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bca:	689b      	ldr	r3, [r3, #8]
 8002bcc:	4a58      	ldr	r2, [pc, #352]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bd2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be0:	4b53      	ldr	r3, [pc, #332]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	4a52      	ldr	r2, [pc, #328]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002be6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bec:	4b50      	ldr	r3, [pc, #320]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	494d      	ldr	r1, [pc, #308]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d044      	beq.n	8002c94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d107      	bne.n	8002c22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c12:	4b47      	ldr	r3, [pc, #284]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d119      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e07f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d003      	beq.n	8002c32 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d107      	bne.n	8002c42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c32:	4b3f      	ldr	r3, [pc, #252]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d109      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e06f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c42:	4b3b      	ldr	r3, [pc, #236]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f003 0302 	and.w	r3, r3, #2
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e067      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c52:	4b37      	ldr	r3, [pc, #220]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f023 0203 	bic.w	r2, r3, #3
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	4934      	ldr	r1, [pc, #208]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c64:	f7ff f990 	bl	8001f88 <HAL_GetTick>
 8002c68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c6a:	e00a      	b.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c6c:	f7ff f98c 	bl	8001f88 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d901      	bls.n	8002c82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c7e:	2303      	movs	r3, #3
 8002c80:	e04f      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c82:	4b2b      	ldr	r3, [pc, #172]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	f003 020c 	and.w	r2, r3, #12
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	009b      	lsls	r3, r3, #2
 8002c90:	429a      	cmp	r2, r3
 8002c92:	d1eb      	bne.n	8002c6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c94:	4b25      	ldr	r3, [pc, #148]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	683a      	ldr	r2, [r7, #0]
 8002c9e:	429a      	cmp	r2, r3
 8002ca0:	d20c      	bcs.n	8002cbc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ca2:	4b22      	ldr	r3, [pc, #136]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	b2d2      	uxtb	r2, r2
 8002ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002caa:	4b20      	ldr	r3, [pc, #128]	@ (8002d2c <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f003 0307 	and.w	r3, r3, #7
 8002cb2:	683a      	ldr	r2, [r7, #0]
 8002cb4:	429a      	cmp	r2, r3
 8002cb6:	d001      	beq.n	8002cbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	e032      	b.n	8002d22 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0304 	and.w	r3, r3, #4
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d008      	beq.n	8002cda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cc8:	4b19      	ldr	r3, [pc, #100]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cca:	689b      	ldr	r3, [r3, #8]
 8002ccc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	4916      	ldr	r1, [pc, #88]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0308 	and.w	r3, r3, #8
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d009      	beq.n	8002cfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ce6:	4b12      	ldr	r3, [pc, #72]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	691b      	ldr	r3, [r3, #16]
 8002cf2:	00db      	lsls	r3, r3, #3
 8002cf4:	490e      	ldr	r1, [pc, #56]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cfa:	f000 f821 	bl	8002d40 <HAL_RCC_GetSysClockFreq>
 8002cfe:	4602      	mov	r2, r0
 8002d00:	4b0b      	ldr	r3, [pc, #44]	@ (8002d30 <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	091b      	lsrs	r3, r3, #4
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	490a      	ldr	r1, [pc, #40]	@ (8002d34 <HAL_RCC_ClockConfig+0x1c0>)
 8002d0c:	5ccb      	ldrb	r3, [r1, r3]
 8002d0e:	fa22 f303 	lsr.w	r3, r2, r3
 8002d12:	4a09      	ldr	r2, [pc, #36]	@ (8002d38 <HAL_RCC_ClockConfig+0x1c4>)
 8002d14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d16:	4b09      	ldr	r3, [pc, #36]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f7ff f8f0 	bl	8001f00 <HAL_InitTick>

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	40023c00 	.word	0x40023c00
 8002d30:	40023800 	.word	0x40023800
 8002d34:	08006180 	.word	0x08006180
 8002d38:	20000004 	.word	0x20000004
 8002d3c:	20000008 	.word	0x20000008

08002d40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d44:	b094      	sub	sp, #80	@ 0x50
 8002d46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d58:	4b79      	ldr	r3, [pc, #484]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	f003 030c 	and.w	r3, r3, #12
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d00d      	beq.n	8002d80 <HAL_RCC_GetSysClockFreq+0x40>
 8002d64:	2b08      	cmp	r3, #8
 8002d66:	f200 80e1 	bhi.w	8002f2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_RCC_GetSysClockFreq+0x34>
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d003      	beq.n	8002d7a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d72:	e0db      	b.n	8002f2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d74:	4b73      	ldr	r3, [pc, #460]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002d76:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d78:	e0db      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d7a:	4b73      	ldr	r3, [pc, #460]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d7e:	e0d8      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d80:	4b6f      	ldr	r3, [pc, #444]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d88:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d8a:	4b6d      	ldr	r3, [pc, #436]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8c:	685b      	ldr	r3, [r3, #4]
 8002d8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d063      	beq.n	8002e5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d96:	4b6a      	ldr	r3, [pc, #424]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	099b      	lsrs	r3, r3, #6
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002da8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002daa:	2300      	movs	r3, #0
 8002dac:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002db2:	4622      	mov	r2, r4
 8002db4:	462b      	mov	r3, r5
 8002db6:	f04f 0000 	mov.w	r0, #0
 8002dba:	f04f 0100 	mov.w	r1, #0
 8002dbe:	0159      	lsls	r1, r3, #5
 8002dc0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dc4:	0150      	lsls	r0, r2, #5
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4621      	mov	r1, r4
 8002dcc:	1a51      	subs	r1, r2, r1
 8002dce:	6139      	str	r1, [r7, #16]
 8002dd0:	4629      	mov	r1, r5
 8002dd2:	eb63 0301 	sbc.w	r3, r3, r1
 8002dd6:	617b      	str	r3, [r7, #20]
 8002dd8:	f04f 0200 	mov.w	r2, #0
 8002ddc:	f04f 0300 	mov.w	r3, #0
 8002de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002de4:	4659      	mov	r1, fp
 8002de6:	018b      	lsls	r3, r1, #6
 8002de8:	4651      	mov	r1, sl
 8002dea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002dee:	4651      	mov	r1, sl
 8002df0:	018a      	lsls	r2, r1, #6
 8002df2:	4651      	mov	r1, sl
 8002df4:	ebb2 0801 	subs.w	r8, r2, r1
 8002df8:	4659      	mov	r1, fp
 8002dfa:	eb63 0901 	sbc.w	r9, r3, r1
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e12:	4690      	mov	r8, r2
 8002e14:	4699      	mov	r9, r3
 8002e16:	4623      	mov	r3, r4
 8002e18:	eb18 0303 	adds.w	r3, r8, r3
 8002e1c:	60bb      	str	r3, [r7, #8]
 8002e1e:	462b      	mov	r3, r5
 8002e20:	eb49 0303 	adc.w	r3, r9, r3
 8002e24:	60fb      	str	r3, [r7, #12]
 8002e26:	f04f 0200 	mov.w	r2, #0
 8002e2a:	f04f 0300 	mov.w	r3, #0
 8002e2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e32:	4629      	mov	r1, r5
 8002e34:	024b      	lsls	r3, r1, #9
 8002e36:	4621      	mov	r1, r4
 8002e38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e3c:	4621      	mov	r1, r4
 8002e3e:	024a      	lsls	r2, r1, #9
 8002e40:	4610      	mov	r0, r2
 8002e42:	4619      	mov	r1, r3
 8002e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e46:	2200      	movs	r2, #0
 8002e48:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e50:	f7fd fa1e 	bl	8000290 <__aeabi_uldivmod>
 8002e54:	4602      	mov	r2, r0
 8002e56:	460b      	mov	r3, r1
 8002e58:	4613      	mov	r3, r2
 8002e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e5c:	e058      	b.n	8002f10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e5e:	4b38      	ldr	r3, [pc, #224]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	099b      	lsrs	r3, r3, #6
 8002e64:	2200      	movs	r2, #0
 8002e66:	4618      	mov	r0, r3
 8002e68:	4611      	mov	r1, r2
 8002e6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e6e:	623b      	str	r3, [r7, #32]
 8002e70:	2300      	movs	r3, #0
 8002e72:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e78:	4642      	mov	r2, r8
 8002e7a:	464b      	mov	r3, r9
 8002e7c:	f04f 0000 	mov.w	r0, #0
 8002e80:	f04f 0100 	mov.w	r1, #0
 8002e84:	0159      	lsls	r1, r3, #5
 8002e86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e8a:	0150      	lsls	r0, r2, #5
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4641      	mov	r1, r8
 8002e92:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e96:	4649      	mov	r1, r9
 8002e98:	eb63 0b01 	sbc.w	fp, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ea8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb0:	ebb2 040a 	subs.w	r4, r2, sl
 8002eb4:	eb63 050b 	sbc.w	r5, r3, fp
 8002eb8:	f04f 0200 	mov.w	r2, #0
 8002ebc:	f04f 0300 	mov.w	r3, #0
 8002ec0:	00eb      	lsls	r3, r5, #3
 8002ec2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ec6:	00e2      	lsls	r2, r4, #3
 8002ec8:	4614      	mov	r4, r2
 8002eca:	461d      	mov	r5, r3
 8002ecc:	4643      	mov	r3, r8
 8002ece:	18e3      	adds	r3, r4, r3
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	464b      	mov	r3, r9
 8002ed4:	eb45 0303 	adc.w	r3, r5, r3
 8002ed8:	607b      	str	r3, [r7, #4]
 8002eda:	f04f 0200 	mov.w	r2, #0
 8002ede:	f04f 0300 	mov.w	r3, #0
 8002ee2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	028b      	lsls	r3, r1, #10
 8002eea:	4621      	mov	r1, r4
 8002eec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef0:	4621      	mov	r1, r4
 8002ef2:	028a      	lsls	r2, r1, #10
 8002ef4:	4610      	mov	r0, r2
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002efa:	2200      	movs	r2, #0
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	61fa      	str	r2, [r7, #28]
 8002f00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f04:	f7fd f9c4 	bl	8000290 <__aeabi_uldivmod>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f10:	4b0b      	ldr	r3, [pc, #44]	@ (8002f40 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	0c1b      	lsrs	r3, r3, #16
 8002f16:	f003 0303 	and.w	r3, r3, #3
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	005b      	lsls	r3, r3, #1
 8002f1e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f20:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f22:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f24:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f2a:	e002      	b.n	8002f32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f2c:	4b05      	ldr	r3, [pc, #20]	@ (8002f44 <HAL_RCC_GetSysClockFreq+0x204>)
 8002f2e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	3750      	adds	r7, #80	@ 0x50
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f3e:	bf00      	nop
 8002f40:	40023800 	.word	0x40023800
 8002f44:	00f42400 	.word	0x00f42400
 8002f48:	007a1200 	.word	0x007a1200

08002f4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f50:	4b03      	ldr	r3, [pc, #12]	@ (8002f60 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f52:	681b      	ldr	r3, [r3, #0]
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	20000004 	.word	0x20000004

08002f64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f68:	f7ff fff0 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	4b05      	ldr	r3, [pc, #20]	@ (8002f84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	0a9b      	lsrs	r3, r3, #10
 8002f74:	f003 0307 	and.w	r3, r3, #7
 8002f78:	4903      	ldr	r1, [pc, #12]	@ (8002f88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f7a:	5ccb      	ldrb	r3, [r1, r3]
 8002f7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f80:	4618      	mov	r0, r3
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	40023800 	.word	0x40023800
 8002f88:	08006190 	.word	0x08006190

08002f8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f90:	f7ff ffdc 	bl	8002f4c <HAL_RCC_GetHCLKFreq>
 8002f94:	4602      	mov	r2, r0
 8002f96:	4b05      	ldr	r3, [pc, #20]	@ (8002fac <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	0b5b      	lsrs	r3, r3, #13
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	4903      	ldr	r1, [pc, #12]	@ (8002fb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fa2:	5ccb      	ldrb	r3, [r1, r3]
 8002fa4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08006190 	.word	0x08006190

08002fb4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fb4:	b580      	push	{r7, lr}
 8002fb6:	b082      	sub	sp, #8
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d101      	bne.n	8002fc6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e042      	b.n	800304c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d106      	bne.n	8002fe0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fda:	6878      	ldr	r0, [r7, #4]
 8002fdc:	f7fe fec0 	bl	8001d60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2224      	movs	r2, #36	@ 0x24
 8002fe4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	68da      	ldr	r2, [r3, #12]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ff6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f000 fea3 	bl	8003d44 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	691a      	ldr	r2, [r3, #16]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800300c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695a      	ldr	r2, [r3, #20]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800301c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	68da      	ldr	r2, [r3, #12]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800302c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2220      	movs	r2, #32
 8003038:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b08a      	sub	sp, #40	@ 0x28
 8003058:	af02      	add	r7, sp, #8
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	603b      	str	r3, [r7, #0]
 8003060:	4613      	mov	r3, r2
 8003062:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003064:	2300      	movs	r3, #0
 8003066:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800306e:	b2db      	uxtb	r3, r3
 8003070:	2b20      	cmp	r3, #32
 8003072:	d175      	bne.n	8003160 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d002      	beq.n	8003080 <HAL_UART_Transmit+0x2c>
 800307a:	88fb      	ldrh	r3, [r7, #6]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d101      	bne.n	8003084 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003080:	2301      	movs	r3, #1
 8003082:	e06e      	b.n	8003162 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	2200      	movs	r2, #0
 8003088:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2221      	movs	r2, #33	@ 0x21
 800308e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003092:	f7fe ff79 	bl	8001f88 <HAL_GetTick>
 8003096:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	88fa      	ldrh	r2, [r7, #6]
 800309c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	88fa      	ldrh	r2, [r7, #6]
 80030a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030ac:	d108      	bne.n	80030c0 <HAL_UART_Transmit+0x6c>
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d104      	bne.n	80030c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030b6:	2300      	movs	r3, #0
 80030b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030ba:	68bb      	ldr	r3, [r7, #8]
 80030bc:	61bb      	str	r3, [r7, #24]
 80030be:	e003      	b.n	80030c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030c4:	2300      	movs	r3, #0
 80030c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030c8:	e02e      	b.n	8003128 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	697b      	ldr	r3, [r7, #20]
 80030d0:	2200      	movs	r2, #0
 80030d2:	2180      	movs	r1, #128	@ 0x80
 80030d4:	68f8      	ldr	r0, [r7, #12]
 80030d6:	f000 fc3f 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 80030da:	4603      	mov	r3, r0
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d005      	beq.n	80030ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2220      	movs	r2, #32
 80030e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e03a      	b.n	8003162 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d10b      	bne.n	800310a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	881b      	ldrh	r3, [r3, #0]
 80030f6:	461a      	mov	r2, r3
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003100:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003102:	69bb      	ldr	r3, [r7, #24]
 8003104:	3302      	adds	r3, #2
 8003106:	61bb      	str	r3, [r7, #24]
 8003108:	e007      	b.n	800311a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	781a      	ldrb	r2, [r3, #0]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	3301      	adds	r3, #1
 8003118:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800312c:	b29b      	uxth	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d1cb      	bne.n	80030ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	2200      	movs	r2, #0
 800313a:	2140      	movs	r1, #64	@ 0x40
 800313c:	68f8      	ldr	r0, [r7, #12]
 800313e:	f000 fc0b 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d005      	beq.n	8003154 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2220      	movs	r2, #32
 800314c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003150:	2303      	movs	r3, #3
 8003152:	e006      	b.n	8003162 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2220      	movs	r2, #32
 8003158:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3720      	adds	r7, #32
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}

0800316a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800316a:	b580      	push	{r7, lr}
 800316c:	b08a      	sub	sp, #40	@ 0x28
 800316e:	af02      	add	r7, sp, #8
 8003170:	60f8      	str	r0, [r7, #12]
 8003172:	60b9      	str	r1, [r7, #8]
 8003174:	603b      	str	r3, [r7, #0]
 8003176:	4613      	mov	r3, r2
 8003178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003184:	b2db      	uxtb	r3, r3
 8003186:	2b20      	cmp	r3, #32
 8003188:	f040 8081 	bne.w	800328e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d002      	beq.n	8003198 <HAL_UART_Receive+0x2e>
 8003192:	88fb      	ldrh	r3, [r7, #6]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d101      	bne.n	800319c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e079      	b.n	8003290 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2222      	movs	r2, #34	@ 0x22
 80031a6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80031b0:	f7fe feea 	bl	8001f88 <HAL_GetTick>
 80031b4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	88fa      	ldrh	r2, [r7, #6]
 80031ba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80031ca:	d108      	bne.n	80031de <HAL_UART_Receive+0x74>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	691b      	ldr	r3, [r3, #16]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d104      	bne.n	80031de <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80031d4:	2300      	movs	r3, #0
 80031d6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e003      	b.n	80031e6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80031de:	68bb      	ldr	r3, [r7, #8]
 80031e0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80031e2:	2300      	movs	r3, #0
 80031e4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 80031e6:	e047      	b.n	8003278 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	9300      	str	r3, [sp, #0]
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2200      	movs	r2, #0
 80031f0:	2120      	movs	r1, #32
 80031f2:	68f8      	ldr	r0, [r7, #12]
 80031f4:	f000 fbb0 	bl	8003958 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d005      	beq.n	800320a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2220      	movs	r2, #32
 8003202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003206:	2303      	movs	r3, #3
 8003208:	e042      	b.n	8003290 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	2b00      	cmp	r3, #0
 800320e:	d10c      	bne.n	800322a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	b29b      	uxth	r3, r3
 8003218:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800321c:	b29a      	uxth	r2, r3
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003222:	69bb      	ldr	r3, [r7, #24]
 8003224:	3302      	adds	r3, #2
 8003226:	61bb      	str	r3, [r7, #24]
 8003228:	e01f      	b.n	800326a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003232:	d007      	beq.n	8003244 <HAL_UART_Receive+0xda>
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d10a      	bne.n	8003252 <HAL_UART_Receive+0xe8>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	691b      	ldr	r3, [r3, #16]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d106      	bne.n	8003252 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	b2da      	uxtb	r2, r3
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	701a      	strb	r2, [r3, #0]
 8003250:	e008      	b.n	8003264 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	b2db      	uxtb	r3, r3
 800325a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800325e:	b2da      	uxtb	r2, r3
 8003260:	69fb      	ldr	r3, [r7, #28]
 8003262:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	3301      	adds	r3, #1
 8003268:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800326e:	b29b      	uxth	r3, r3
 8003270:	3b01      	subs	r3, #1
 8003272:	b29a      	uxth	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800327c:	b29b      	uxth	r3, r3
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1b2      	bne.n	80031e8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	2220      	movs	r2, #32
 8003286:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 800328a:	2300      	movs	r3, #0
 800328c:	e000      	b.n	8003290 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 800328e:	2302      	movs	r3, #2
  }
}
 8003290:	4618      	mov	r0, r3
 8003292:	3720      	adds	r7, #32
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}

08003298 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b09a      	sub	sp, #104	@ 0x68
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	330c      	adds	r3, #12
 80032a6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032aa:	e853 3f00 	ldrex	r3, [r3]
 80032ae:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80032b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80032b6:	667b      	str	r3, [r7, #100]	@ 0x64
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	330c      	adds	r3, #12
 80032be:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80032c0:	657a      	str	r2, [r7, #84]	@ 0x54
 80032c2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c4:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80032c6:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80032c8:	e841 2300 	strex	r3, r2, [r1]
 80032cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80032ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1e5      	bne.n	80032a0 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	3314      	adds	r3, #20
 80032da:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032de:	e853 3f00 	ldrex	r3, [r3]
 80032e2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80032e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032e6:	f023 0301 	bic.w	r3, r3, #1
 80032ea:	663b      	str	r3, [r7, #96]	@ 0x60
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3314      	adds	r3, #20
 80032f2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80032f4:	643a      	str	r2, [r7, #64]	@ 0x40
 80032f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032f8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80032fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80032fc:	e841 2300 	strex	r3, r2, [r1]
 8003300:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1e5      	bne.n	80032d4 <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800330c:	2b01      	cmp	r3, #1
 800330e:	d119      	bne.n	8003344 <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	330c      	adds	r3, #12
 8003316:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003318:	6a3b      	ldr	r3, [r7, #32]
 800331a:	e853 3f00 	ldrex	r3, [r3]
 800331e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	f023 0310 	bic.w	r3, r3, #16
 8003326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	330c      	adds	r3, #12
 800332e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003330:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003332:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003334:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003336:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003338:	e841 2300 	strex	r3, r2, [r1]
 800333c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800333e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d1e5      	bne.n	8003310 <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800334e:	2b40      	cmp	r3, #64	@ 0x40
 8003350:	d136      	bne.n	80033c0 <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	3314      	adds	r3, #20
 8003358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	e853 3f00 	ldrex	r3, [r3]
 8003360:	60bb      	str	r3, [r7, #8]
   return(result);
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003368:	65bb      	str	r3, [r7, #88]	@ 0x58
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	3314      	adds	r3, #20
 8003370:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003372:	61ba      	str	r2, [r7, #24]
 8003374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003376:	6979      	ldr	r1, [r7, #20]
 8003378:	69ba      	ldr	r2, [r7, #24]
 800337a:	e841 2300 	strex	r3, r2, [r1]
 800337e:	613b      	str	r3, [r7, #16]
   return(result);
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d1e5      	bne.n	8003352 <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800338a:	2b00      	cmp	r3, #0
 800338c:	d018      	beq.n	80033c0 <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003392:	2200      	movs	r2, #0
 8003394:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800339a:	4618      	mov	r0, r3
 800339c:	f7fe ff35 	bl	800220a <HAL_DMA_Abort>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00c      	beq.n	80033c0 <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7fe ffbf 	bl	800232e <HAL_DMA_GetError>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b20      	cmp	r3, #32
 80033b4:	d104      	bne.n	80033c0 <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2210      	movs	r2, #16
 80033ba:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e00a      	b.n	80033d6 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2220      	movs	r2, #32
 80033ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3768      	adds	r7, #104	@ 0x68
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
	...

080033e0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80033e0:	b580      	push	{r7, lr}
 80033e2:	b0ba      	sub	sp, #232	@ 0xe8
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	68db      	ldr	r3, [r3, #12]
 80033f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	695b      	ldr	r3, [r3, #20]
 8003402:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003406:	2300      	movs	r3, #0
 8003408:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800340c:	2300      	movs	r3, #0
 800340e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003412:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003416:	f003 030f 	and.w	r3, r3, #15
 800341a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800341e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10f      	bne.n	8003446 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800342a:	f003 0320 	and.w	r3, r3, #32
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_UART_IRQHandler+0x66>
 8003432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003436:	f003 0320 	and.w	r3, r3, #32
 800343a:	2b00      	cmp	r3, #0
 800343c:	d003      	beq.n	8003446 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800343e:	6878      	ldr	r0, [r7, #4]
 8003440:	f000 fbc2 	bl	8003bc8 <UART_Receive_IT>
      return;
 8003444:	e25b      	b.n	80038fe <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003446:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800344a:	2b00      	cmp	r3, #0
 800344c:	f000 80de 	beq.w	800360c <HAL_UART_IRQHandler+0x22c>
 8003450:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003454:	f003 0301 	and.w	r3, r3, #1
 8003458:	2b00      	cmp	r3, #0
 800345a:	d106      	bne.n	800346a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800345c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003460:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003464:	2b00      	cmp	r3, #0
 8003466:	f000 80d1 	beq.w	800360c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800346a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800346e:	f003 0301 	and.w	r3, r3, #1
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_UART_IRQHandler+0xae>
 8003476:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800347a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003486:	f043 0201 	orr.w	r2, r3, #1
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800348e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003492:	f003 0304 	and.w	r3, r3, #4
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00b      	beq.n	80034b2 <HAL_UART_IRQHandler+0xd2>
 800349a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d005      	beq.n	80034b2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034aa:	f043 0202 	orr.w	r2, r3, #2
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80034b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d00b      	beq.n	80034d6 <HAL_UART_IRQHandler+0xf6>
 80034be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034c2:	f003 0301 	and.w	r3, r3, #1
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d005      	beq.n	80034d6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ce:	f043 0204 	orr.w	r2, r3, #4
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80034d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80034da:	f003 0308 	and.w	r3, r3, #8
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_UART_IRQHandler+0x126>
 80034e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80034e6:	f003 0320 	and.w	r3, r3, #32
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d105      	bne.n	80034fa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80034ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d005      	beq.n	8003506 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034fe:	f043 0208 	orr.w	r2, r3, #8
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800350a:	2b00      	cmp	r3, #0
 800350c:	f000 81f2 	beq.w	80038f4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003510:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003514:	f003 0320 	and.w	r3, r3, #32
 8003518:	2b00      	cmp	r3, #0
 800351a:	d008      	beq.n	800352e <HAL_UART_IRQHandler+0x14e>
 800351c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003520:	f003 0320 	and.w	r3, r3, #32
 8003524:	2b00      	cmp	r3, #0
 8003526:	d002      	beq.n	800352e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003528:	6878      	ldr	r0, [r7, #4]
 800352a:	f000 fb4d 	bl	8003bc8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	bf0c      	ite	eq
 800353c:	2301      	moveq	r3, #1
 800353e:	2300      	movne	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354a:	f003 0308 	and.w	r3, r3, #8
 800354e:	2b00      	cmp	r3, #0
 8003550:	d103      	bne.n	800355a <HAL_UART_IRQHandler+0x17a>
 8003552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003556:	2b00      	cmp	r3, #0
 8003558:	d04f      	beq.n	80035fa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 fa55 	bl	8003a0a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356a:	2b40      	cmp	r3, #64	@ 0x40
 800356c:	d141      	bne.n	80035f2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	3314      	adds	r3, #20
 8003574:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003578:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800357c:	e853 3f00 	ldrex	r3, [r3]
 8003580:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003584:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003588:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800358c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	3314      	adds	r3, #20
 8003596:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800359a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800359e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80035a6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80035aa:	e841 2300 	strex	r3, r2, [r1]
 80035ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80035b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d1d9      	bne.n	800356e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d013      	beq.n	80035ea <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c6:	4a7e      	ldr	r2, [pc, #504]	@ (80037c0 <HAL_UART_IRQHandler+0x3e0>)
 80035c8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fe fe8b 	bl	80022ea <HAL_DMA_Abort_IT>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d016      	beq.n	8003608 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80035e0:	687a      	ldr	r2, [r7, #4]
 80035e2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80035e4:	4610      	mov	r0, r2
 80035e6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035e8:	e00e      	b.n	8003608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 f99e 	bl	800392c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f0:	e00a      	b.n	8003608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80035f2:	6878      	ldr	r0, [r7, #4]
 80035f4:	f000 f99a 	bl	800392c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035f8:	e006      	b.n	8003608 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f000 f996 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	2200      	movs	r2, #0
 8003604:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003606:	e175      	b.n	80038f4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003608:	bf00      	nop
    return;
 800360a:	e173      	b.n	80038f4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003610:	2b01      	cmp	r3, #1
 8003612:	f040 814f 	bne.w	80038b4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800361a:	f003 0310 	and.w	r3, r3, #16
 800361e:	2b00      	cmp	r3, #0
 8003620:	f000 8148 	beq.w	80038b4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003628:	f003 0310 	and.w	r3, r3, #16
 800362c:	2b00      	cmp	r3, #0
 800362e:	f000 8141 	beq.w	80038b4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003632:	2300      	movs	r3, #0
 8003634:	60bb      	str	r3, [r7, #8]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	60bb      	str	r3, [r7, #8]
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	60bb      	str	r3, [r7, #8]
 8003646:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003652:	2b40      	cmp	r3, #64	@ 0x40
 8003654:	f040 80b6 	bne.w	80037c4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003664:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003668:	2b00      	cmp	r3, #0
 800366a:	f000 8145 	beq.w	80038f8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003672:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003676:	429a      	cmp	r2, r3
 8003678:	f080 813e 	bcs.w	80038f8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003682:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800368e:	f000 8088 	beq.w	80037a2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	330c      	adds	r3, #12
 8003698:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800369c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80036a0:	e853 3f00 	ldrex	r3, [r3]
 80036a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80036a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80036ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80036b0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	330c      	adds	r3, #12
 80036ba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80036be:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80036c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80036ca:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80036ce:	e841 2300 	strex	r3, r2, [r1]
 80036d2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80036d6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d1d9      	bne.n	8003692 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3314      	adds	r3, #20
 80036e4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80036e8:	e853 3f00 	ldrex	r3, [r3]
 80036ec:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80036ee:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80036f0:	f023 0301 	bic.w	r3, r3, #1
 80036f4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	3314      	adds	r3, #20
 80036fe:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003702:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003706:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003708:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800370a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800370e:	e841 2300 	strex	r3, r2, [r1]
 8003712:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003714:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003716:	2b00      	cmp	r3, #0
 8003718:	d1e1      	bne.n	80036de <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	3314      	adds	r3, #20
 8003720:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003722:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003724:	e853 3f00 	ldrex	r3, [r3]
 8003728:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800372a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800372c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003730:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	3314      	adds	r3, #20
 800373a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800373e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003740:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003742:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003744:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003746:	e841 2300 	strex	r3, r2, [r1]
 800374a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800374c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1e3      	bne.n	800371a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2220      	movs	r2, #32
 8003756:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2200      	movs	r2, #0
 800375e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	330c      	adds	r3, #12
 8003766:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003768:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800376a:	e853 3f00 	ldrex	r3, [r3]
 800376e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003770:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003772:	f023 0310 	bic.w	r3, r3, #16
 8003776:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	330c      	adds	r3, #12
 8003780:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003784:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003786:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003788:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800378a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800378c:	e841 2300 	strex	r3, r2, [r1]
 8003790:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003792:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003794:	2b00      	cmp	r3, #0
 8003796:	d1e3      	bne.n	8003760 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800379c:	4618      	mov	r0, r3
 800379e:	f7fe fd34 	bl	800220a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2202      	movs	r2, #2
 80037a6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	4619      	mov	r1, r3
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 f8c1 	bl	8003940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80037be:	e09b      	b.n	80038f8 <HAL_UART_IRQHandler+0x518>
 80037c0:	08003ad1 	.word	0x08003ad1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037d8:	b29b      	uxth	r3, r3
 80037da:	2b00      	cmp	r3, #0
 80037dc:	f000 808e 	beq.w	80038fc <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80037e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8089 	beq.w	80038fc <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	330c      	adds	r3, #12
 80037f0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037f4:	e853 3f00 	ldrex	r3, [r3]
 80037f8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037fc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003800:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800380e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003810:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003812:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003814:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003816:	e841 2300 	strex	r3, r2, [r1]
 800381a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800381c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800381e:	2b00      	cmp	r3, #0
 8003820:	d1e3      	bne.n	80037ea <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	3314      	adds	r3, #20
 8003828:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800382c:	e853 3f00 	ldrex	r3, [r3]
 8003830:	623b      	str	r3, [r7, #32]
   return(result);
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	f023 0301 	bic.w	r3, r3, #1
 8003838:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3314      	adds	r3, #20
 8003842:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003846:	633a      	str	r2, [r7, #48]	@ 0x30
 8003848:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800384c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e3      	bne.n	8003822 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2220      	movs	r2, #32
 800385e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	2200      	movs	r2, #0
 8003866:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	330c      	adds	r3, #12
 800386e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	e853 3f00 	ldrex	r3, [r3]
 8003876:	60fb      	str	r3, [r7, #12]
   return(result);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	f023 0310 	bic.w	r3, r3, #16
 800387e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	330c      	adds	r3, #12
 8003888:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 800388c:	61fa      	str	r2, [r7, #28]
 800388e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003890:	69b9      	ldr	r1, [r7, #24]
 8003892:	69fa      	ldr	r2, [r7, #28]
 8003894:	e841 2300 	strex	r3, r2, [r1]
 8003898:	617b      	str	r3, [r7, #20]
   return(result);
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1e3      	bne.n	8003868 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2202      	movs	r2, #2
 80038a4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80038a6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f847 	bl	8003940 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80038b2:	e023      	b.n	80038fc <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80038b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <HAL_UART_IRQHandler+0x4f4>
 80038c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d003      	beq.n	80038d4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 f913 	bl	8003af8 <UART_Transmit_IT>
    return;
 80038d2:	e014      	b.n	80038fe <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80038d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d00e      	beq.n	80038fe <HAL_UART_IRQHandler+0x51e>
 80038e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d008      	beq.n	80038fe <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f953 	bl	8003b98 <UART_EndTransmit_IT>
    return;
 80038f2:	e004      	b.n	80038fe <HAL_UART_IRQHandler+0x51e>
    return;
 80038f4:	bf00      	nop
 80038f6:	e002      	b.n	80038fe <HAL_UART_IRQHandler+0x51e>
      return;
 80038f8:	bf00      	nop
 80038fa:	e000      	b.n	80038fe <HAL_UART_IRQHandler+0x51e>
      return;
 80038fc:	bf00      	nop
  }
}
 80038fe:	37e8      	adds	r7, #232	@ 0xe8
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}

08003904 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003904:	b480      	push	{r7}
 8003906:	b083      	sub	sp, #12
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003920:	bf00      	nop
 8003922:	370c      	adds	r7, #12
 8003924:	46bd      	mov	sp, r7
 8003926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392a:	4770      	bx	lr

0800392c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800392c:	b480      	push	{r7}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003934:	bf00      	nop
 8003936:	370c      	adds	r7, #12
 8003938:	46bd      	mov	sp, r7
 800393a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393e:	4770      	bx	lr

08003940 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003940:	b480      	push	{r7}
 8003942:	b083      	sub	sp, #12
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	460b      	mov	r3, r1
 800394a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800394c:	bf00      	nop
 800394e:	370c      	adds	r7, #12
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	4613      	mov	r3, r2
 8003966:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003968:	e03b      	b.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800396a:	6a3b      	ldr	r3, [r7, #32]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d037      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003972:	f7fe fb09 	bl	8001f88 <HAL_GetTick>
 8003976:	4602      	mov	r2, r0
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	1ad3      	subs	r3, r2, r3
 800397c:	6a3a      	ldr	r2, [r7, #32]
 800397e:	429a      	cmp	r2, r3
 8003980:	d302      	bcc.n	8003988 <UART_WaitOnFlagUntilTimeout+0x30>
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d101      	bne.n	800398c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e03a      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f003 0304 	and.w	r3, r3, #4
 8003996:	2b00      	cmp	r3, #0
 8003998:	d023      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	2b80      	cmp	r3, #128	@ 0x80
 800399e:	d020      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	2b40      	cmp	r3, #64	@ 0x40
 80039a4:	d01d      	beq.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0308 	and.w	r3, r3, #8
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d116      	bne.n	80039e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80039b4:	2300      	movs	r3, #0
 80039b6:	617b      	str	r3, [r7, #20]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	617b      	str	r3, [r7, #20]
 80039c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f81d 	bl	8003a0a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2208      	movs	r2, #8
 80039d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e00f      	b.n	8003a02 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	681a      	ldr	r2, [r3, #0]
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	4013      	ands	r3, r2
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	bf0c      	ite	eq
 80039f2:	2301      	moveq	r3, #1
 80039f4:	2300      	movne	r3, #0
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	461a      	mov	r2, r3
 80039fa:	79fb      	ldrb	r3, [r7, #7]
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d0b4      	beq.n	800396a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003a00:	2300      	movs	r3, #0
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3718      	adds	r7, #24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b095      	sub	sp, #84	@ 0x54
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	330c      	adds	r3, #12
 8003a18:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a1c:	e853 3f00 	ldrex	r3, [r3]
 8003a20:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a24:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003a28:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	330c      	adds	r3, #12
 8003a30:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003a32:	643a      	str	r2, [r7, #64]	@ 0x40
 8003a34:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a36:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003a38:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a3a:	e841 2300 	strex	r3, r2, [r1]
 8003a3e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1e5      	bne.n	8003a12 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	3314      	adds	r3, #20
 8003a4c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	6a3b      	ldr	r3, [r7, #32]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f023 0301 	bic.w	r3, r3, #1
 8003a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	3314      	adds	r3, #20
 8003a64:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003a66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003a68:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e5      	bne.n	8003a46 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	d119      	bne.n	8003ab6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	330c      	adds	r3, #12
 8003a88:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	e853 3f00 	ldrex	r3, [r3]
 8003a90:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	f023 0310 	bic.w	r3, r3, #16
 8003a98:	647b      	str	r3, [r7, #68]	@ 0x44
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	330c      	adds	r3, #12
 8003aa0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003aa2:	61ba      	str	r2, [r7, #24]
 8003aa4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa6:	6979      	ldr	r1, [r7, #20]
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	e841 2300 	strex	r3, r2, [r1]
 8003aae:	613b      	str	r3, [r7, #16]
   return(result);
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d1e5      	bne.n	8003a82 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003ac4:	bf00      	nop
 8003ac6:	3754      	adds	r7, #84	@ 0x54
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr

08003ad0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b084      	sub	sp, #16
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003adc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7ff ff1e 	bl	800392c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003af0:	bf00      	nop
 8003af2:	3710      	adds	r7, #16
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	2b21      	cmp	r3, #33	@ 0x21
 8003b0a:	d13e      	bne.n	8003b8a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	689b      	ldr	r3, [r3, #8]
 8003b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b14:	d114      	bne.n	8003b40 <UART_Transmit_IT+0x48>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	691b      	ldr	r3, [r3, #16]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d110      	bne.n	8003b40 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a1b      	ldr	r3, [r3, #32]
 8003b22:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	881b      	ldrh	r3, [r3, #0]
 8003b28:	461a      	mov	r2, r3
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003b32:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a1b      	ldr	r3, [r3, #32]
 8003b38:	1c9a      	adds	r2, r3, #2
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	621a      	str	r2, [r3, #32]
 8003b3e:	e008      	b.n	8003b52 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	1c59      	adds	r1, r3, #1
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6211      	str	r1, [r2, #32]
 8003b4a:	781a      	ldrb	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	687a      	ldr	r2, [r7, #4]
 8003b5e:	4619      	mov	r1, r3
 8003b60:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d10f      	bne.n	8003b86 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	68da      	ldr	r2, [r3, #12]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003b74:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	68da      	ldr	r2, [r3, #12]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b84:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003b86:	2300      	movs	r3, #0
 8003b88:	e000      	b.n	8003b8c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003b8a:	2302      	movs	r3, #2
  }
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	68da      	ldr	r2, [r3, #12]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003bae:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2220      	movs	r2, #32
 8003bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f7ff fea3 	bl	8003904 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3708      	adds	r7, #8
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08c      	sub	sp, #48	@ 0x30
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b22      	cmp	r3, #34	@ 0x22
 8003bda:	f040 80ae 	bne.w	8003d3a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	689b      	ldr	r3, [r3, #8]
 8003be2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003be6:	d117      	bne.n	8003c18 <UART_Receive_IT+0x50>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d113      	bne.n	8003c18 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c10:	1c9a      	adds	r2, r3, #2
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c16:	e026      	b.n	8003c66 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c2a:	d007      	beq.n	8003c3c <UART_Receive_IT+0x74>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d10a      	bne.n	8003c4a <UART_Receive_IT+0x82>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d106      	bne.n	8003c4a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	e008      	b.n	8003c5c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	b2db      	uxtb	r3, r3
 8003c52:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c56:	b2da      	uxtb	r2, r3
 8003c58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c5a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c60:	1c5a      	adds	r2, r3, #1
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003c6a:	b29b      	uxth	r3, r3
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29b      	uxth	r3, r3
 8003c70:	687a      	ldr	r2, [r7, #4]
 8003c72:	4619      	mov	r1, r3
 8003c74:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d15d      	bne.n	8003d36 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68da      	ldr	r2, [r3, #12]
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f022 0220 	bic.w	r2, r2, #32
 8003c88:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68da      	ldr	r2, [r3, #12]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003c98:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	695a      	ldr	r2, [r3, #20]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 0201 	bic.w	r2, r2, #1
 8003ca8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	2220      	movs	r2, #32
 8003cae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d135      	bne.n	8003d2c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	330c      	adds	r3, #12
 8003ccc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cce:	697b      	ldr	r3, [r7, #20]
 8003cd0:	e853 3f00 	ldrex	r3, [r3]
 8003cd4:	613b      	str	r3, [r7, #16]
   return(result);
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	f023 0310 	bic.w	r3, r3, #16
 8003cdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ce6:	623a      	str	r2, [r7, #32]
 8003ce8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cea:	69f9      	ldr	r1, [r7, #28]
 8003cec:	6a3a      	ldr	r2, [r7, #32]
 8003cee:	e841 2300 	strex	r3, r2, [r1]
 8003cf2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cf4:	69bb      	ldr	r3, [r7, #24]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d1e5      	bne.n	8003cc6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f003 0310 	and.w	r3, r3, #16
 8003d04:	2b10      	cmp	r3, #16
 8003d06:	d10a      	bne.n	8003d1e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003d08:	2300      	movs	r3, #0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	60fb      	str	r3, [r7, #12]
 8003d1c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003d22:	4619      	mov	r1, r3
 8003d24:	6878      	ldr	r0, [r7, #4]
 8003d26:	f7ff fe0b 	bl	8003940 <HAL_UARTEx_RxEventCallback>
 8003d2a:	e002      	b.n	8003d32 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f7ff fdf3 	bl	8003918 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003d32:	2300      	movs	r3, #0
 8003d34:	e002      	b.n	8003d3c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003d36:	2300      	movs	r3, #0
 8003d38:	e000      	b.n	8003d3c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003d3a:	2302      	movs	r3, #2
  }
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3730      	adds	r7, #48	@ 0x30
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d44:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d48:	b0c0      	sub	sp, #256	@ 0x100
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d60:	68d9      	ldr	r1, [r3, #12]
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d66:	681a      	ldr	r2, [r3, #0]
 8003d68:	ea40 0301 	orr.w	r3, r0, r1
 8003d6c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d72:	689a      	ldr	r2, [r3, #8]
 8003d74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	431a      	orrs	r2, r3
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	431a      	orrs	r2, r3
 8003d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	68db      	ldr	r3, [r3, #12]
 8003d98:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d9c:	f021 010c 	bic.w	r1, r1, #12
 8003da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003daa:	430b      	orrs	r3, r1
 8003dac:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbe:	6999      	ldr	r1, [r3, #24]
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	ea40 0301 	orr.w	r3, r0, r1
 8003dca:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dd0:	681a      	ldr	r2, [r3, #0]
 8003dd2:	4b8f      	ldr	r3, [pc, #572]	@ (8004010 <UART_SetConfig+0x2cc>)
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	d005      	beq.n	8003de4 <UART_SetConfig+0xa0>
 8003dd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ddc:	681a      	ldr	r2, [r3, #0]
 8003dde:	4b8d      	ldr	r3, [pc, #564]	@ (8004014 <UART_SetConfig+0x2d0>)
 8003de0:	429a      	cmp	r2, r3
 8003de2:	d104      	bne.n	8003dee <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003de4:	f7ff f8d2 	bl	8002f8c <HAL_RCC_GetPCLK2Freq>
 8003de8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dec:	e003      	b.n	8003df6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dee:	f7ff f8b9 	bl	8002f64 <HAL_RCC_GetPCLK1Freq>
 8003df2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dfa:	69db      	ldr	r3, [r3, #28]
 8003dfc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003e00:	f040 810c 	bne.w	800401c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e04:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003e0e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003e12:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e16:	4622      	mov	r2, r4
 8003e18:	462b      	mov	r3, r5
 8003e1a:	1891      	adds	r1, r2, r2
 8003e1c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e1e:	415b      	adcs	r3, r3
 8003e20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e22:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e26:	4621      	mov	r1, r4
 8003e28:	eb12 0801 	adds.w	r8, r2, r1
 8003e2c:	4629      	mov	r1, r5
 8003e2e:	eb43 0901 	adc.w	r9, r3, r1
 8003e32:	f04f 0200 	mov.w	r2, #0
 8003e36:	f04f 0300 	mov.w	r3, #0
 8003e3a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e3e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e42:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e46:	4690      	mov	r8, r2
 8003e48:	4699      	mov	r9, r3
 8003e4a:	4623      	mov	r3, r4
 8003e4c:	eb18 0303 	adds.w	r3, r8, r3
 8003e50:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e54:	462b      	mov	r3, r5
 8003e56:	eb49 0303 	adc.w	r3, r9, r3
 8003e5a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e6a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e6e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e72:	460b      	mov	r3, r1
 8003e74:	18db      	adds	r3, r3, r3
 8003e76:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e78:	4613      	mov	r3, r2
 8003e7a:	eb42 0303 	adc.w	r3, r2, r3
 8003e7e:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e80:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e84:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e88:	f7fc fa02 	bl	8000290 <__aeabi_uldivmod>
 8003e8c:	4602      	mov	r2, r0
 8003e8e:	460b      	mov	r3, r1
 8003e90:	4b61      	ldr	r3, [pc, #388]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003e92:	fba3 2302 	umull	r2, r3, r3, r2
 8003e96:	095b      	lsrs	r3, r3, #5
 8003e98:	011c      	lsls	r4, r3, #4
 8003e9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ea4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ea8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003eac:	4642      	mov	r2, r8
 8003eae:	464b      	mov	r3, r9
 8003eb0:	1891      	adds	r1, r2, r2
 8003eb2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003eb4:	415b      	adcs	r3, r3
 8003eb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003eb8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ebc:	4641      	mov	r1, r8
 8003ebe:	eb12 0a01 	adds.w	sl, r2, r1
 8003ec2:	4649      	mov	r1, r9
 8003ec4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ed4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ed8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003edc:	4692      	mov	sl, r2
 8003ede:	469b      	mov	fp, r3
 8003ee0:	4643      	mov	r3, r8
 8003ee2:	eb1a 0303 	adds.w	r3, sl, r3
 8003ee6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003eea:	464b      	mov	r3, r9
 8003eec:	eb4b 0303 	adc.w	r3, fp, r3
 8003ef0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003f00:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003f04:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003f08:	460b      	mov	r3, r1
 8003f0a:	18db      	adds	r3, r3, r3
 8003f0c:	643b      	str	r3, [r7, #64]	@ 0x40
 8003f0e:	4613      	mov	r3, r2
 8003f10:	eb42 0303 	adc.w	r3, r2, r3
 8003f14:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f16:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f1a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f1e:	f7fc f9b7 	bl	8000290 <__aeabi_uldivmod>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4611      	mov	r1, r2
 8003f28:	4b3b      	ldr	r3, [pc, #236]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003f2a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f2e:	095b      	lsrs	r3, r3, #5
 8003f30:	2264      	movs	r2, #100	@ 0x64
 8003f32:	fb02 f303 	mul.w	r3, r2, r3
 8003f36:	1acb      	subs	r3, r1, r3
 8003f38:	00db      	lsls	r3, r3, #3
 8003f3a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f3e:	4b36      	ldr	r3, [pc, #216]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003f40:	fba3 2302 	umull	r2, r3, r3, r2
 8003f44:	095b      	lsrs	r3, r3, #5
 8003f46:	005b      	lsls	r3, r3, #1
 8003f48:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f4c:	441c      	add	r4, r3
 8003f4e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f52:	2200      	movs	r2, #0
 8003f54:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f58:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f5c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f60:	4642      	mov	r2, r8
 8003f62:	464b      	mov	r3, r9
 8003f64:	1891      	adds	r1, r2, r2
 8003f66:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f68:	415b      	adcs	r3, r3
 8003f6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f70:	4641      	mov	r1, r8
 8003f72:	1851      	adds	r1, r2, r1
 8003f74:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f76:	4649      	mov	r1, r9
 8003f78:	414b      	adcs	r3, r1
 8003f7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f7c:	f04f 0200 	mov.w	r2, #0
 8003f80:	f04f 0300 	mov.w	r3, #0
 8003f84:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f88:	4659      	mov	r1, fp
 8003f8a:	00cb      	lsls	r3, r1, #3
 8003f8c:	4651      	mov	r1, sl
 8003f8e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f92:	4651      	mov	r1, sl
 8003f94:	00ca      	lsls	r2, r1, #3
 8003f96:	4610      	mov	r0, r2
 8003f98:	4619      	mov	r1, r3
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4642      	mov	r2, r8
 8003f9e:	189b      	adds	r3, r3, r2
 8003fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003fa4:	464b      	mov	r3, r9
 8003fa6:	460a      	mov	r2, r1
 8003fa8:	eb42 0303 	adc.w	r3, r2, r3
 8003fac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fbc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fc0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fc4:	460b      	mov	r3, r1
 8003fc6:	18db      	adds	r3, r3, r3
 8003fc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fca:	4613      	mov	r3, r2
 8003fcc:	eb42 0303 	adc.w	r3, r2, r3
 8003fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fd6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fda:	f7fc f959 	bl	8000290 <__aeabi_uldivmod>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	460b      	mov	r3, r1
 8003fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	2164      	movs	r1, #100	@ 0x64
 8003fec:	fb01 f303 	mul.w	r3, r1, r3
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	00db      	lsls	r3, r3, #3
 8003ff4:	3332      	adds	r3, #50	@ 0x32
 8003ff6:	4a08      	ldr	r2, [pc, #32]	@ (8004018 <UART_SetConfig+0x2d4>)
 8003ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ffc:	095b      	lsrs	r3, r3, #5
 8003ffe:	f003 0207 	and.w	r2, r3, #7
 8004002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4422      	add	r2, r4
 800400a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800400c:	e106      	b.n	800421c <UART_SetConfig+0x4d8>
 800400e:	bf00      	nop
 8004010:	40011000 	.word	0x40011000
 8004014:	40011400 	.word	0x40011400
 8004018:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800401c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004020:	2200      	movs	r2, #0
 8004022:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004026:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800402a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800402e:	4642      	mov	r2, r8
 8004030:	464b      	mov	r3, r9
 8004032:	1891      	adds	r1, r2, r2
 8004034:	6239      	str	r1, [r7, #32]
 8004036:	415b      	adcs	r3, r3
 8004038:	627b      	str	r3, [r7, #36]	@ 0x24
 800403a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800403e:	4641      	mov	r1, r8
 8004040:	1854      	adds	r4, r2, r1
 8004042:	4649      	mov	r1, r9
 8004044:	eb43 0501 	adc.w	r5, r3, r1
 8004048:	f04f 0200 	mov.w	r2, #0
 800404c:	f04f 0300 	mov.w	r3, #0
 8004050:	00eb      	lsls	r3, r5, #3
 8004052:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004056:	00e2      	lsls	r2, r4, #3
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4643      	mov	r3, r8
 800405e:	18e3      	adds	r3, r4, r3
 8004060:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004064:	464b      	mov	r3, r9
 8004066:	eb45 0303 	adc.w	r3, r5, r3
 800406a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800406e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800407a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800407e:	f04f 0200 	mov.w	r2, #0
 8004082:	f04f 0300 	mov.w	r3, #0
 8004086:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800408a:	4629      	mov	r1, r5
 800408c:	008b      	lsls	r3, r1, #2
 800408e:	4621      	mov	r1, r4
 8004090:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004094:	4621      	mov	r1, r4
 8004096:	008a      	lsls	r2, r1, #2
 8004098:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800409c:	f7fc f8f8 	bl	8000290 <__aeabi_uldivmod>
 80040a0:	4602      	mov	r2, r0
 80040a2:	460b      	mov	r3, r1
 80040a4:	4b60      	ldr	r3, [pc, #384]	@ (8004228 <UART_SetConfig+0x4e4>)
 80040a6:	fba3 2302 	umull	r2, r3, r3, r2
 80040aa:	095b      	lsrs	r3, r3, #5
 80040ac:	011c      	lsls	r4, r3, #4
 80040ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80040b2:	2200      	movs	r2, #0
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040b8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040bc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040c0:	4642      	mov	r2, r8
 80040c2:	464b      	mov	r3, r9
 80040c4:	1891      	adds	r1, r2, r2
 80040c6:	61b9      	str	r1, [r7, #24]
 80040c8:	415b      	adcs	r3, r3
 80040ca:	61fb      	str	r3, [r7, #28]
 80040cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040d0:	4641      	mov	r1, r8
 80040d2:	1851      	adds	r1, r2, r1
 80040d4:	6139      	str	r1, [r7, #16]
 80040d6:	4649      	mov	r1, r9
 80040d8:	414b      	adcs	r3, r1
 80040da:	617b      	str	r3, [r7, #20]
 80040dc:	f04f 0200 	mov.w	r2, #0
 80040e0:	f04f 0300 	mov.w	r3, #0
 80040e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040e8:	4659      	mov	r1, fp
 80040ea:	00cb      	lsls	r3, r1, #3
 80040ec:	4651      	mov	r1, sl
 80040ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040f2:	4651      	mov	r1, sl
 80040f4:	00ca      	lsls	r2, r1, #3
 80040f6:	4610      	mov	r0, r2
 80040f8:	4619      	mov	r1, r3
 80040fa:	4603      	mov	r3, r0
 80040fc:	4642      	mov	r2, r8
 80040fe:	189b      	adds	r3, r3, r2
 8004100:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004104:	464b      	mov	r3, r9
 8004106:	460a      	mov	r2, r1
 8004108:	eb42 0303 	adc.w	r3, r2, r3
 800410c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004110:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	2200      	movs	r2, #0
 8004118:	67bb      	str	r3, [r7, #120]	@ 0x78
 800411a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800411c:	f04f 0200 	mov.w	r2, #0
 8004120:	f04f 0300 	mov.w	r3, #0
 8004124:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004128:	4649      	mov	r1, r9
 800412a:	008b      	lsls	r3, r1, #2
 800412c:	4641      	mov	r1, r8
 800412e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004132:	4641      	mov	r1, r8
 8004134:	008a      	lsls	r2, r1, #2
 8004136:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800413a:	f7fc f8a9 	bl	8000290 <__aeabi_uldivmod>
 800413e:	4602      	mov	r2, r0
 8004140:	460b      	mov	r3, r1
 8004142:	4611      	mov	r1, r2
 8004144:	4b38      	ldr	r3, [pc, #224]	@ (8004228 <UART_SetConfig+0x4e4>)
 8004146:	fba3 2301 	umull	r2, r3, r3, r1
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2264      	movs	r2, #100	@ 0x64
 800414e:	fb02 f303 	mul.w	r3, r2, r3
 8004152:	1acb      	subs	r3, r1, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	@ 0x32
 8004158:	4a33      	ldr	r2, [pc, #204]	@ (8004228 <UART_SetConfig+0x4e4>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004164:	441c      	add	r4, r3
 8004166:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800416a:	2200      	movs	r2, #0
 800416c:	673b      	str	r3, [r7, #112]	@ 0x70
 800416e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004170:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004174:	4642      	mov	r2, r8
 8004176:	464b      	mov	r3, r9
 8004178:	1891      	adds	r1, r2, r2
 800417a:	60b9      	str	r1, [r7, #8]
 800417c:	415b      	adcs	r3, r3
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004184:	4641      	mov	r1, r8
 8004186:	1851      	adds	r1, r2, r1
 8004188:	6039      	str	r1, [r7, #0]
 800418a:	4649      	mov	r1, r9
 800418c:	414b      	adcs	r3, r1
 800418e:	607b      	str	r3, [r7, #4]
 8004190:	f04f 0200 	mov.w	r2, #0
 8004194:	f04f 0300 	mov.w	r3, #0
 8004198:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800419c:	4659      	mov	r1, fp
 800419e:	00cb      	lsls	r3, r1, #3
 80041a0:	4651      	mov	r1, sl
 80041a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041a6:	4651      	mov	r1, sl
 80041a8:	00ca      	lsls	r2, r1, #3
 80041aa:	4610      	mov	r0, r2
 80041ac:	4619      	mov	r1, r3
 80041ae:	4603      	mov	r3, r0
 80041b0:	4642      	mov	r2, r8
 80041b2:	189b      	adds	r3, r3, r2
 80041b4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041b6:	464b      	mov	r3, r9
 80041b8:	460a      	mov	r2, r1
 80041ba:	eb42 0303 	adc.w	r3, r2, r3
 80041be:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041c4:	685b      	ldr	r3, [r3, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	663b      	str	r3, [r7, #96]	@ 0x60
 80041ca:	667a      	str	r2, [r7, #100]	@ 0x64
 80041cc:	f04f 0200 	mov.w	r2, #0
 80041d0:	f04f 0300 	mov.w	r3, #0
 80041d4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041d8:	4649      	mov	r1, r9
 80041da:	008b      	lsls	r3, r1, #2
 80041dc:	4641      	mov	r1, r8
 80041de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041e2:	4641      	mov	r1, r8
 80041e4:	008a      	lsls	r2, r1, #2
 80041e6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041ea:	f7fc f851 	bl	8000290 <__aeabi_uldivmod>
 80041ee:	4602      	mov	r2, r0
 80041f0:	460b      	mov	r3, r1
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <UART_SetConfig+0x4e4>)
 80041f4:	fba3 1302 	umull	r1, r3, r3, r2
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	2164      	movs	r1, #100	@ 0x64
 80041fc:	fb01 f303 	mul.w	r3, r1, r3
 8004200:	1ad3      	subs	r3, r2, r3
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	3332      	adds	r3, #50	@ 0x32
 8004206:	4a08      	ldr	r2, [pc, #32]	@ (8004228 <UART_SetConfig+0x4e4>)
 8004208:	fba2 2303 	umull	r2, r3, r2, r3
 800420c:	095b      	lsrs	r3, r3, #5
 800420e:	f003 020f 	and.w	r2, r3, #15
 8004212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4422      	add	r2, r4
 800421a:	609a      	str	r2, [r3, #8]
}
 800421c:	bf00      	nop
 800421e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004222:	46bd      	mov	sp, r7
 8004224:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004228:	51eb851f 	.word	0x51eb851f

0800422c <siprintf>:
 800422c:	b40e      	push	{r1, r2, r3}
 800422e:	b500      	push	{lr}
 8004230:	b09c      	sub	sp, #112	@ 0x70
 8004232:	ab1d      	add	r3, sp, #116	@ 0x74
 8004234:	9002      	str	r0, [sp, #8]
 8004236:	9006      	str	r0, [sp, #24]
 8004238:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800423c:	4809      	ldr	r0, [pc, #36]	@ (8004264 <siprintf+0x38>)
 800423e:	9107      	str	r1, [sp, #28]
 8004240:	9104      	str	r1, [sp, #16]
 8004242:	4909      	ldr	r1, [pc, #36]	@ (8004268 <siprintf+0x3c>)
 8004244:	f853 2b04 	ldr.w	r2, [r3], #4
 8004248:	9105      	str	r1, [sp, #20]
 800424a:	6800      	ldr	r0, [r0, #0]
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	a902      	add	r1, sp, #8
 8004250:	f000 f9a2 	bl	8004598 <_svfiprintf_r>
 8004254:	9b02      	ldr	r3, [sp, #8]
 8004256:	2200      	movs	r2, #0
 8004258:	701a      	strb	r2, [r3, #0]
 800425a:	b01c      	add	sp, #112	@ 0x70
 800425c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004260:	b003      	add	sp, #12
 8004262:	4770      	bx	lr
 8004264:	20000010 	.word	0x20000010
 8004268:	ffff0208 	.word	0xffff0208

0800426c <memset>:
 800426c:	4402      	add	r2, r0
 800426e:	4603      	mov	r3, r0
 8004270:	4293      	cmp	r3, r2
 8004272:	d100      	bne.n	8004276 <memset+0xa>
 8004274:	4770      	bx	lr
 8004276:	f803 1b01 	strb.w	r1, [r3], #1
 800427a:	e7f9      	b.n	8004270 <memset+0x4>

0800427c <__errno>:
 800427c:	4b01      	ldr	r3, [pc, #4]	@ (8004284 <__errno+0x8>)
 800427e:	6818      	ldr	r0, [r3, #0]
 8004280:	4770      	bx	lr
 8004282:	bf00      	nop
 8004284:	20000010 	.word	0x20000010

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4d0d      	ldr	r5, [pc, #52]	@ (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	@ (80042c4 <__libc_init_array+0x3c>)
 800428e:	1b64      	subs	r4, r4, r5
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2600      	movs	r6, #0
 8004294:	42a6      	cmp	r6, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4d0b      	ldr	r5, [pc, #44]	@ (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	@ (80042cc <__libc_init_array+0x44>)
 800429c:	f000 fc66 	bl	8004b6c <_init>
 80042a0:	1b64      	subs	r4, r4, r5
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2600      	movs	r6, #0
 80042a6:	42a6      	cmp	r6, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80042b0:	4798      	blx	r3
 80042b2:	3601      	adds	r6, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80042ba:	4798      	blx	r3
 80042bc:	3601      	adds	r6, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	080061d4 	.word	0x080061d4
 80042c4:	080061d4 	.word	0x080061d4
 80042c8:	080061d4 	.word	0x080061d4
 80042cc:	080061d8 	.word	0x080061d8

080042d0 <__retarget_lock_acquire_recursive>:
 80042d0:	4770      	bx	lr

080042d2 <__retarget_lock_release_recursive>:
 80042d2:	4770      	bx	lr

080042d4 <memcpy>:
 80042d4:	440a      	add	r2, r1
 80042d6:	4291      	cmp	r1, r2
 80042d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80042dc:	d100      	bne.n	80042e0 <memcpy+0xc>
 80042de:	4770      	bx	lr
 80042e0:	b510      	push	{r4, lr}
 80042e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042ea:	4291      	cmp	r1, r2
 80042ec:	d1f9      	bne.n	80042e2 <memcpy+0xe>
 80042ee:	bd10      	pop	{r4, pc}

080042f0 <_free_r>:
 80042f0:	b538      	push	{r3, r4, r5, lr}
 80042f2:	4605      	mov	r5, r0
 80042f4:	2900      	cmp	r1, #0
 80042f6:	d041      	beq.n	800437c <_free_r+0x8c>
 80042f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042fc:	1f0c      	subs	r4, r1, #4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	bfb8      	it	lt
 8004302:	18e4      	addlt	r4, r4, r3
 8004304:	f000 f8e0 	bl	80044c8 <__malloc_lock>
 8004308:	4a1d      	ldr	r2, [pc, #116]	@ (8004380 <_free_r+0x90>)
 800430a:	6813      	ldr	r3, [r2, #0]
 800430c:	b933      	cbnz	r3, 800431c <_free_r+0x2c>
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	6014      	str	r4, [r2, #0]
 8004312:	4628      	mov	r0, r5
 8004314:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004318:	f000 b8dc 	b.w	80044d4 <__malloc_unlock>
 800431c:	42a3      	cmp	r3, r4
 800431e:	d908      	bls.n	8004332 <_free_r+0x42>
 8004320:	6820      	ldr	r0, [r4, #0]
 8004322:	1821      	adds	r1, r4, r0
 8004324:	428b      	cmp	r3, r1
 8004326:	bf01      	itttt	eq
 8004328:	6819      	ldreq	r1, [r3, #0]
 800432a:	685b      	ldreq	r3, [r3, #4]
 800432c:	1809      	addeq	r1, r1, r0
 800432e:	6021      	streq	r1, [r4, #0]
 8004330:	e7ed      	b.n	800430e <_free_r+0x1e>
 8004332:	461a      	mov	r2, r3
 8004334:	685b      	ldr	r3, [r3, #4]
 8004336:	b10b      	cbz	r3, 800433c <_free_r+0x4c>
 8004338:	42a3      	cmp	r3, r4
 800433a:	d9fa      	bls.n	8004332 <_free_r+0x42>
 800433c:	6811      	ldr	r1, [r2, #0]
 800433e:	1850      	adds	r0, r2, r1
 8004340:	42a0      	cmp	r0, r4
 8004342:	d10b      	bne.n	800435c <_free_r+0x6c>
 8004344:	6820      	ldr	r0, [r4, #0]
 8004346:	4401      	add	r1, r0
 8004348:	1850      	adds	r0, r2, r1
 800434a:	4283      	cmp	r3, r0
 800434c:	6011      	str	r1, [r2, #0]
 800434e:	d1e0      	bne.n	8004312 <_free_r+0x22>
 8004350:	6818      	ldr	r0, [r3, #0]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	6053      	str	r3, [r2, #4]
 8004356:	4408      	add	r0, r1
 8004358:	6010      	str	r0, [r2, #0]
 800435a:	e7da      	b.n	8004312 <_free_r+0x22>
 800435c:	d902      	bls.n	8004364 <_free_r+0x74>
 800435e:	230c      	movs	r3, #12
 8004360:	602b      	str	r3, [r5, #0]
 8004362:	e7d6      	b.n	8004312 <_free_r+0x22>
 8004364:	6820      	ldr	r0, [r4, #0]
 8004366:	1821      	adds	r1, r4, r0
 8004368:	428b      	cmp	r3, r1
 800436a:	bf04      	itt	eq
 800436c:	6819      	ldreq	r1, [r3, #0]
 800436e:	685b      	ldreq	r3, [r3, #4]
 8004370:	6063      	str	r3, [r4, #4]
 8004372:	bf04      	itt	eq
 8004374:	1809      	addeq	r1, r1, r0
 8004376:	6021      	streq	r1, [r4, #0]
 8004378:	6054      	str	r4, [r2, #4]
 800437a:	e7ca      	b.n	8004312 <_free_r+0x22>
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	20000558 	.word	0x20000558

08004384 <sbrk_aligned>:
 8004384:	b570      	push	{r4, r5, r6, lr}
 8004386:	4e0f      	ldr	r6, [pc, #60]	@ (80043c4 <sbrk_aligned+0x40>)
 8004388:	460c      	mov	r4, r1
 800438a:	6831      	ldr	r1, [r6, #0]
 800438c:	4605      	mov	r5, r0
 800438e:	b911      	cbnz	r1, 8004396 <sbrk_aligned+0x12>
 8004390:	f000 fba6 	bl	8004ae0 <_sbrk_r>
 8004394:	6030      	str	r0, [r6, #0]
 8004396:	4621      	mov	r1, r4
 8004398:	4628      	mov	r0, r5
 800439a:	f000 fba1 	bl	8004ae0 <_sbrk_r>
 800439e:	1c43      	adds	r3, r0, #1
 80043a0:	d103      	bne.n	80043aa <sbrk_aligned+0x26>
 80043a2:	f04f 34ff 	mov.w	r4, #4294967295
 80043a6:	4620      	mov	r0, r4
 80043a8:	bd70      	pop	{r4, r5, r6, pc}
 80043aa:	1cc4      	adds	r4, r0, #3
 80043ac:	f024 0403 	bic.w	r4, r4, #3
 80043b0:	42a0      	cmp	r0, r4
 80043b2:	d0f8      	beq.n	80043a6 <sbrk_aligned+0x22>
 80043b4:	1a21      	subs	r1, r4, r0
 80043b6:	4628      	mov	r0, r5
 80043b8:	f000 fb92 	bl	8004ae0 <_sbrk_r>
 80043bc:	3001      	adds	r0, #1
 80043be:	d1f2      	bne.n	80043a6 <sbrk_aligned+0x22>
 80043c0:	e7ef      	b.n	80043a2 <sbrk_aligned+0x1e>
 80043c2:	bf00      	nop
 80043c4:	20000554 	.word	0x20000554

080043c8 <_malloc_r>:
 80043c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80043cc:	1ccd      	adds	r5, r1, #3
 80043ce:	f025 0503 	bic.w	r5, r5, #3
 80043d2:	3508      	adds	r5, #8
 80043d4:	2d0c      	cmp	r5, #12
 80043d6:	bf38      	it	cc
 80043d8:	250c      	movcc	r5, #12
 80043da:	2d00      	cmp	r5, #0
 80043dc:	4606      	mov	r6, r0
 80043de:	db01      	blt.n	80043e4 <_malloc_r+0x1c>
 80043e0:	42a9      	cmp	r1, r5
 80043e2:	d904      	bls.n	80043ee <_malloc_r+0x26>
 80043e4:	230c      	movs	r3, #12
 80043e6:	6033      	str	r3, [r6, #0]
 80043e8:	2000      	movs	r0, #0
 80043ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80043ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80044c4 <_malloc_r+0xfc>
 80043f2:	f000 f869 	bl	80044c8 <__malloc_lock>
 80043f6:	f8d8 3000 	ldr.w	r3, [r8]
 80043fa:	461c      	mov	r4, r3
 80043fc:	bb44      	cbnz	r4, 8004450 <_malloc_r+0x88>
 80043fe:	4629      	mov	r1, r5
 8004400:	4630      	mov	r0, r6
 8004402:	f7ff ffbf 	bl	8004384 <sbrk_aligned>
 8004406:	1c43      	adds	r3, r0, #1
 8004408:	4604      	mov	r4, r0
 800440a:	d158      	bne.n	80044be <_malloc_r+0xf6>
 800440c:	f8d8 4000 	ldr.w	r4, [r8]
 8004410:	4627      	mov	r7, r4
 8004412:	2f00      	cmp	r7, #0
 8004414:	d143      	bne.n	800449e <_malloc_r+0xd6>
 8004416:	2c00      	cmp	r4, #0
 8004418:	d04b      	beq.n	80044b2 <_malloc_r+0xea>
 800441a:	6823      	ldr	r3, [r4, #0]
 800441c:	4639      	mov	r1, r7
 800441e:	4630      	mov	r0, r6
 8004420:	eb04 0903 	add.w	r9, r4, r3
 8004424:	f000 fb5c 	bl	8004ae0 <_sbrk_r>
 8004428:	4581      	cmp	r9, r0
 800442a:	d142      	bne.n	80044b2 <_malloc_r+0xea>
 800442c:	6821      	ldr	r1, [r4, #0]
 800442e:	1a6d      	subs	r5, r5, r1
 8004430:	4629      	mov	r1, r5
 8004432:	4630      	mov	r0, r6
 8004434:	f7ff ffa6 	bl	8004384 <sbrk_aligned>
 8004438:	3001      	adds	r0, #1
 800443a:	d03a      	beq.n	80044b2 <_malloc_r+0xea>
 800443c:	6823      	ldr	r3, [r4, #0]
 800443e:	442b      	add	r3, r5
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	f8d8 3000 	ldr.w	r3, [r8]
 8004446:	685a      	ldr	r2, [r3, #4]
 8004448:	bb62      	cbnz	r2, 80044a4 <_malloc_r+0xdc>
 800444a:	f8c8 7000 	str.w	r7, [r8]
 800444e:	e00f      	b.n	8004470 <_malloc_r+0xa8>
 8004450:	6822      	ldr	r2, [r4, #0]
 8004452:	1b52      	subs	r2, r2, r5
 8004454:	d420      	bmi.n	8004498 <_malloc_r+0xd0>
 8004456:	2a0b      	cmp	r2, #11
 8004458:	d917      	bls.n	800448a <_malloc_r+0xc2>
 800445a:	1961      	adds	r1, r4, r5
 800445c:	42a3      	cmp	r3, r4
 800445e:	6025      	str	r5, [r4, #0]
 8004460:	bf18      	it	ne
 8004462:	6059      	strne	r1, [r3, #4]
 8004464:	6863      	ldr	r3, [r4, #4]
 8004466:	bf08      	it	eq
 8004468:	f8c8 1000 	streq.w	r1, [r8]
 800446c:	5162      	str	r2, [r4, r5]
 800446e:	604b      	str	r3, [r1, #4]
 8004470:	4630      	mov	r0, r6
 8004472:	f000 f82f 	bl	80044d4 <__malloc_unlock>
 8004476:	f104 000b 	add.w	r0, r4, #11
 800447a:	1d23      	adds	r3, r4, #4
 800447c:	f020 0007 	bic.w	r0, r0, #7
 8004480:	1ac2      	subs	r2, r0, r3
 8004482:	bf1c      	itt	ne
 8004484:	1a1b      	subne	r3, r3, r0
 8004486:	50a3      	strne	r3, [r4, r2]
 8004488:	e7af      	b.n	80043ea <_malloc_r+0x22>
 800448a:	6862      	ldr	r2, [r4, #4]
 800448c:	42a3      	cmp	r3, r4
 800448e:	bf0c      	ite	eq
 8004490:	f8c8 2000 	streq.w	r2, [r8]
 8004494:	605a      	strne	r2, [r3, #4]
 8004496:	e7eb      	b.n	8004470 <_malloc_r+0xa8>
 8004498:	4623      	mov	r3, r4
 800449a:	6864      	ldr	r4, [r4, #4]
 800449c:	e7ae      	b.n	80043fc <_malloc_r+0x34>
 800449e:	463c      	mov	r4, r7
 80044a0:	687f      	ldr	r7, [r7, #4]
 80044a2:	e7b6      	b.n	8004412 <_malloc_r+0x4a>
 80044a4:	461a      	mov	r2, r3
 80044a6:	685b      	ldr	r3, [r3, #4]
 80044a8:	42a3      	cmp	r3, r4
 80044aa:	d1fb      	bne.n	80044a4 <_malloc_r+0xdc>
 80044ac:	2300      	movs	r3, #0
 80044ae:	6053      	str	r3, [r2, #4]
 80044b0:	e7de      	b.n	8004470 <_malloc_r+0xa8>
 80044b2:	230c      	movs	r3, #12
 80044b4:	6033      	str	r3, [r6, #0]
 80044b6:	4630      	mov	r0, r6
 80044b8:	f000 f80c 	bl	80044d4 <__malloc_unlock>
 80044bc:	e794      	b.n	80043e8 <_malloc_r+0x20>
 80044be:	6005      	str	r5, [r0, #0]
 80044c0:	e7d6      	b.n	8004470 <_malloc_r+0xa8>
 80044c2:	bf00      	nop
 80044c4:	20000558 	.word	0x20000558

080044c8 <__malloc_lock>:
 80044c8:	4801      	ldr	r0, [pc, #4]	@ (80044d0 <__malloc_lock+0x8>)
 80044ca:	f7ff bf01 	b.w	80042d0 <__retarget_lock_acquire_recursive>
 80044ce:	bf00      	nop
 80044d0:	20000550 	.word	0x20000550

080044d4 <__malloc_unlock>:
 80044d4:	4801      	ldr	r0, [pc, #4]	@ (80044dc <__malloc_unlock+0x8>)
 80044d6:	f7ff befc 	b.w	80042d2 <__retarget_lock_release_recursive>
 80044da:	bf00      	nop
 80044dc:	20000550 	.word	0x20000550

080044e0 <__ssputs_r>:
 80044e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044e4:	688e      	ldr	r6, [r1, #8]
 80044e6:	461f      	mov	r7, r3
 80044e8:	42be      	cmp	r6, r7
 80044ea:	680b      	ldr	r3, [r1, #0]
 80044ec:	4682      	mov	sl, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	4690      	mov	r8, r2
 80044f2:	d82d      	bhi.n	8004550 <__ssputs_r+0x70>
 80044f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80044f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80044fc:	d026      	beq.n	800454c <__ssputs_r+0x6c>
 80044fe:	6965      	ldr	r5, [r4, #20]
 8004500:	6909      	ldr	r1, [r1, #16]
 8004502:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004506:	eba3 0901 	sub.w	r9, r3, r1
 800450a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800450e:	1c7b      	adds	r3, r7, #1
 8004510:	444b      	add	r3, r9
 8004512:	106d      	asrs	r5, r5, #1
 8004514:	429d      	cmp	r5, r3
 8004516:	bf38      	it	cc
 8004518:	461d      	movcc	r5, r3
 800451a:	0553      	lsls	r3, r2, #21
 800451c:	d527      	bpl.n	800456e <__ssputs_r+0x8e>
 800451e:	4629      	mov	r1, r5
 8004520:	f7ff ff52 	bl	80043c8 <_malloc_r>
 8004524:	4606      	mov	r6, r0
 8004526:	b360      	cbz	r0, 8004582 <__ssputs_r+0xa2>
 8004528:	6921      	ldr	r1, [r4, #16]
 800452a:	464a      	mov	r2, r9
 800452c:	f7ff fed2 	bl	80042d4 <memcpy>
 8004530:	89a3      	ldrh	r3, [r4, #12]
 8004532:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004536:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800453a:	81a3      	strh	r3, [r4, #12]
 800453c:	6126      	str	r6, [r4, #16]
 800453e:	6165      	str	r5, [r4, #20]
 8004540:	444e      	add	r6, r9
 8004542:	eba5 0509 	sub.w	r5, r5, r9
 8004546:	6026      	str	r6, [r4, #0]
 8004548:	60a5      	str	r5, [r4, #8]
 800454a:	463e      	mov	r6, r7
 800454c:	42be      	cmp	r6, r7
 800454e:	d900      	bls.n	8004552 <__ssputs_r+0x72>
 8004550:	463e      	mov	r6, r7
 8004552:	6820      	ldr	r0, [r4, #0]
 8004554:	4632      	mov	r2, r6
 8004556:	4641      	mov	r1, r8
 8004558:	f000 faa8 	bl	8004aac <memmove>
 800455c:	68a3      	ldr	r3, [r4, #8]
 800455e:	1b9b      	subs	r3, r3, r6
 8004560:	60a3      	str	r3, [r4, #8]
 8004562:	6823      	ldr	r3, [r4, #0]
 8004564:	4433      	add	r3, r6
 8004566:	6023      	str	r3, [r4, #0]
 8004568:	2000      	movs	r0, #0
 800456a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800456e:	462a      	mov	r2, r5
 8004570:	f000 fac6 	bl	8004b00 <_realloc_r>
 8004574:	4606      	mov	r6, r0
 8004576:	2800      	cmp	r0, #0
 8004578:	d1e0      	bne.n	800453c <__ssputs_r+0x5c>
 800457a:	6921      	ldr	r1, [r4, #16]
 800457c:	4650      	mov	r0, sl
 800457e:	f7ff feb7 	bl	80042f0 <_free_r>
 8004582:	230c      	movs	r3, #12
 8004584:	f8ca 3000 	str.w	r3, [sl]
 8004588:	89a3      	ldrh	r3, [r4, #12]
 800458a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800458e:	81a3      	strh	r3, [r4, #12]
 8004590:	f04f 30ff 	mov.w	r0, #4294967295
 8004594:	e7e9      	b.n	800456a <__ssputs_r+0x8a>
	...

08004598 <_svfiprintf_r>:
 8004598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800459c:	4698      	mov	r8, r3
 800459e:	898b      	ldrh	r3, [r1, #12]
 80045a0:	061b      	lsls	r3, r3, #24
 80045a2:	b09d      	sub	sp, #116	@ 0x74
 80045a4:	4607      	mov	r7, r0
 80045a6:	460d      	mov	r5, r1
 80045a8:	4614      	mov	r4, r2
 80045aa:	d510      	bpl.n	80045ce <_svfiprintf_r+0x36>
 80045ac:	690b      	ldr	r3, [r1, #16]
 80045ae:	b973      	cbnz	r3, 80045ce <_svfiprintf_r+0x36>
 80045b0:	2140      	movs	r1, #64	@ 0x40
 80045b2:	f7ff ff09 	bl	80043c8 <_malloc_r>
 80045b6:	6028      	str	r0, [r5, #0]
 80045b8:	6128      	str	r0, [r5, #16]
 80045ba:	b930      	cbnz	r0, 80045ca <_svfiprintf_r+0x32>
 80045bc:	230c      	movs	r3, #12
 80045be:	603b      	str	r3, [r7, #0]
 80045c0:	f04f 30ff 	mov.w	r0, #4294967295
 80045c4:	b01d      	add	sp, #116	@ 0x74
 80045c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80045ca:	2340      	movs	r3, #64	@ 0x40
 80045cc:	616b      	str	r3, [r5, #20]
 80045ce:	2300      	movs	r3, #0
 80045d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80045d2:	2320      	movs	r3, #32
 80045d4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80045d8:	f8cd 800c 	str.w	r8, [sp, #12]
 80045dc:	2330      	movs	r3, #48	@ 0x30
 80045de:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800477c <_svfiprintf_r+0x1e4>
 80045e2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80045e6:	f04f 0901 	mov.w	r9, #1
 80045ea:	4623      	mov	r3, r4
 80045ec:	469a      	mov	sl, r3
 80045ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80045f2:	b10a      	cbz	r2, 80045f8 <_svfiprintf_r+0x60>
 80045f4:	2a25      	cmp	r2, #37	@ 0x25
 80045f6:	d1f9      	bne.n	80045ec <_svfiprintf_r+0x54>
 80045f8:	ebba 0b04 	subs.w	fp, sl, r4
 80045fc:	d00b      	beq.n	8004616 <_svfiprintf_r+0x7e>
 80045fe:	465b      	mov	r3, fp
 8004600:	4622      	mov	r2, r4
 8004602:	4629      	mov	r1, r5
 8004604:	4638      	mov	r0, r7
 8004606:	f7ff ff6b 	bl	80044e0 <__ssputs_r>
 800460a:	3001      	adds	r0, #1
 800460c:	f000 80a7 	beq.w	800475e <_svfiprintf_r+0x1c6>
 8004610:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004612:	445a      	add	r2, fp
 8004614:	9209      	str	r2, [sp, #36]	@ 0x24
 8004616:	f89a 3000 	ldrb.w	r3, [sl]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 809f 	beq.w	800475e <_svfiprintf_r+0x1c6>
 8004620:	2300      	movs	r3, #0
 8004622:	f04f 32ff 	mov.w	r2, #4294967295
 8004626:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800462a:	f10a 0a01 	add.w	sl, sl, #1
 800462e:	9304      	str	r3, [sp, #16]
 8004630:	9307      	str	r3, [sp, #28]
 8004632:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004636:	931a      	str	r3, [sp, #104]	@ 0x68
 8004638:	4654      	mov	r4, sl
 800463a:	2205      	movs	r2, #5
 800463c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004640:	484e      	ldr	r0, [pc, #312]	@ (800477c <_svfiprintf_r+0x1e4>)
 8004642:	f7fb fdd5 	bl	80001f0 <memchr>
 8004646:	9a04      	ldr	r2, [sp, #16]
 8004648:	b9d8      	cbnz	r0, 8004682 <_svfiprintf_r+0xea>
 800464a:	06d0      	lsls	r0, r2, #27
 800464c:	bf44      	itt	mi
 800464e:	2320      	movmi	r3, #32
 8004650:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004654:	0711      	lsls	r1, r2, #28
 8004656:	bf44      	itt	mi
 8004658:	232b      	movmi	r3, #43	@ 0x2b
 800465a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800465e:	f89a 3000 	ldrb.w	r3, [sl]
 8004662:	2b2a      	cmp	r3, #42	@ 0x2a
 8004664:	d015      	beq.n	8004692 <_svfiprintf_r+0xfa>
 8004666:	9a07      	ldr	r2, [sp, #28]
 8004668:	4654      	mov	r4, sl
 800466a:	2000      	movs	r0, #0
 800466c:	f04f 0c0a 	mov.w	ip, #10
 8004670:	4621      	mov	r1, r4
 8004672:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004676:	3b30      	subs	r3, #48	@ 0x30
 8004678:	2b09      	cmp	r3, #9
 800467a:	d94b      	bls.n	8004714 <_svfiprintf_r+0x17c>
 800467c:	b1b0      	cbz	r0, 80046ac <_svfiprintf_r+0x114>
 800467e:	9207      	str	r2, [sp, #28]
 8004680:	e014      	b.n	80046ac <_svfiprintf_r+0x114>
 8004682:	eba0 0308 	sub.w	r3, r0, r8
 8004686:	fa09 f303 	lsl.w	r3, r9, r3
 800468a:	4313      	orrs	r3, r2
 800468c:	9304      	str	r3, [sp, #16]
 800468e:	46a2      	mov	sl, r4
 8004690:	e7d2      	b.n	8004638 <_svfiprintf_r+0xa0>
 8004692:	9b03      	ldr	r3, [sp, #12]
 8004694:	1d19      	adds	r1, r3, #4
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	9103      	str	r1, [sp, #12]
 800469a:	2b00      	cmp	r3, #0
 800469c:	bfbb      	ittet	lt
 800469e:	425b      	neglt	r3, r3
 80046a0:	f042 0202 	orrlt.w	r2, r2, #2
 80046a4:	9307      	strge	r3, [sp, #28]
 80046a6:	9307      	strlt	r3, [sp, #28]
 80046a8:	bfb8      	it	lt
 80046aa:	9204      	strlt	r2, [sp, #16]
 80046ac:	7823      	ldrb	r3, [r4, #0]
 80046ae:	2b2e      	cmp	r3, #46	@ 0x2e
 80046b0:	d10a      	bne.n	80046c8 <_svfiprintf_r+0x130>
 80046b2:	7863      	ldrb	r3, [r4, #1]
 80046b4:	2b2a      	cmp	r3, #42	@ 0x2a
 80046b6:	d132      	bne.n	800471e <_svfiprintf_r+0x186>
 80046b8:	9b03      	ldr	r3, [sp, #12]
 80046ba:	1d1a      	adds	r2, r3, #4
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	9203      	str	r2, [sp, #12]
 80046c0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80046c4:	3402      	adds	r4, #2
 80046c6:	9305      	str	r3, [sp, #20]
 80046c8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800478c <_svfiprintf_r+0x1f4>
 80046cc:	7821      	ldrb	r1, [r4, #0]
 80046ce:	2203      	movs	r2, #3
 80046d0:	4650      	mov	r0, sl
 80046d2:	f7fb fd8d 	bl	80001f0 <memchr>
 80046d6:	b138      	cbz	r0, 80046e8 <_svfiprintf_r+0x150>
 80046d8:	9b04      	ldr	r3, [sp, #16]
 80046da:	eba0 000a 	sub.w	r0, r0, sl
 80046de:	2240      	movs	r2, #64	@ 0x40
 80046e0:	4082      	lsls	r2, r0
 80046e2:	4313      	orrs	r3, r2
 80046e4:	3401      	adds	r4, #1
 80046e6:	9304      	str	r3, [sp, #16]
 80046e8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046ec:	4824      	ldr	r0, [pc, #144]	@ (8004780 <_svfiprintf_r+0x1e8>)
 80046ee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80046f2:	2206      	movs	r2, #6
 80046f4:	f7fb fd7c 	bl	80001f0 <memchr>
 80046f8:	2800      	cmp	r0, #0
 80046fa:	d036      	beq.n	800476a <_svfiprintf_r+0x1d2>
 80046fc:	4b21      	ldr	r3, [pc, #132]	@ (8004784 <_svfiprintf_r+0x1ec>)
 80046fe:	bb1b      	cbnz	r3, 8004748 <_svfiprintf_r+0x1b0>
 8004700:	9b03      	ldr	r3, [sp, #12]
 8004702:	3307      	adds	r3, #7
 8004704:	f023 0307 	bic.w	r3, r3, #7
 8004708:	3308      	adds	r3, #8
 800470a:	9303      	str	r3, [sp, #12]
 800470c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800470e:	4433      	add	r3, r6
 8004710:	9309      	str	r3, [sp, #36]	@ 0x24
 8004712:	e76a      	b.n	80045ea <_svfiprintf_r+0x52>
 8004714:	fb0c 3202 	mla	r2, ip, r2, r3
 8004718:	460c      	mov	r4, r1
 800471a:	2001      	movs	r0, #1
 800471c:	e7a8      	b.n	8004670 <_svfiprintf_r+0xd8>
 800471e:	2300      	movs	r3, #0
 8004720:	3401      	adds	r4, #1
 8004722:	9305      	str	r3, [sp, #20]
 8004724:	4619      	mov	r1, r3
 8004726:	f04f 0c0a 	mov.w	ip, #10
 800472a:	4620      	mov	r0, r4
 800472c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004730:	3a30      	subs	r2, #48	@ 0x30
 8004732:	2a09      	cmp	r2, #9
 8004734:	d903      	bls.n	800473e <_svfiprintf_r+0x1a6>
 8004736:	2b00      	cmp	r3, #0
 8004738:	d0c6      	beq.n	80046c8 <_svfiprintf_r+0x130>
 800473a:	9105      	str	r1, [sp, #20]
 800473c:	e7c4      	b.n	80046c8 <_svfiprintf_r+0x130>
 800473e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004742:	4604      	mov	r4, r0
 8004744:	2301      	movs	r3, #1
 8004746:	e7f0      	b.n	800472a <_svfiprintf_r+0x192>
 8004748:	ab03      	add	r3, sp, #12
 800474a:	9300      	str	r3, [sp, #0]
 800474c:	462a      	mov	r2, r5
 800474e:	4b0e      	ldr	r3, [pc, #56]	@ (8004788 <_svfiprintf_r+0x1f0>)
 8004750:	a904      	add	r1, sp, #16
 8004752:	4638      	mov	r0, r7
 8004754:	f3af 8000 	nop.w
 8004758:	1c42      	adds	r2, r0, #1
 800475a:	4606      	mov	r6, r0
 800475c:	d1d6      	bne.n	800470c <_svfiprintf_r+0x174>
 800475e:	89ab      	ldrh	r3, [r5, #12]
 8004760:	065b      	lsls	r3, r3, #25
 8004762:	f53f af2d 	bmi.w	80045c0 <_svfiprintf_r+0x28>
 8004766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004768:	e72c      	b.n	80045c4 <_svfiprintf_r+0x2c>
 800476a:	ab03      	add	r3, sp, #12
 800476c:	9300      	str	r3, [sp, #0]
 800476e:	462a      	mov	r2, r5
 8004770:	4b05      	ldr	r3, [pc, #20]	@ (8004788 <_svfiprintf_r+0x1f0>)
 8004772:	a904      	add	r1, sp, #16
 8004774:	4638      	mov	r0, r7
 8004776:	f000 f879 	bl	800486c <_printf_i>
 800477a:	e7ed      	b.n	8004758 <_svfiprintf_r+0x1c0>
 800477c:	08006198 	.word	0x08006198
 8004780:	080061a2 	.word	0x080061a2
 8004784:	00000000 	.word	0x00000000
 8004788:	080044e1 	.word	0x080044e1
 800478c:	0800619e 	.word	0x0800619e

08004790 <_printf_common>:
 8004790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004794:	4616      	mov	r6, r2
 8004796:	4698      	mov	r8, r3
 8004798:	688a      	ldr	r2, [r1, #8]
 800479a:	690b      	ldr	r3, [r1, #16]
 800479c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80047a0:	4293      	cmp	r3, r2
 80047a2:	bfb8      	it	lt
 80047a4:	4613      	movlt	r3, r2
 80047a6:	6033      	str	r3, [r6, #0]
 80047a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80047ac:	4607      	mov	r7, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	b10a      	cbz	r2, 80047b6 <_printf_common+0x26>
 80047b2:	3301      	adds	r3, #1
 80047b4:	6033      	str	r3, [r6, #0]
 80047b6:	6823      	ldr	r3, [r4, #0]
 80047b8:	0699      	lsls	r1, r3, #26
 80047ba:	bf42      	ittt	mi
 80047bc:	6833      	ldrmi	r3, [r6, #0]
 80047be:	3302      	addmi	r3, #2
 80047c0:	6033      	strmi	r3, [r6, #0]
 80047c2:	6825      	ldr	r5, [r4, #0]
 80047c4:	f015 0506 	ands.w	r5, r5, #6
 80047c8:	d106      	bne.n	80047d8 <_printf_common+0x48>
 80047ca:	f104 0a19 	add.w	sl, r4, #25
 80047ce:	68e3      	ldr	r3, [r4, #12]
 80047d0:	6832      	ldr	r2, [r6, #0]
 80047d2:	1a9b      	subs	r3, r3, r2
 80047d4:	42ab      	cmp	r3, r5
 80047d6:	dc26      	bgt.n	8004826 <_printf_common+0x96>
 80047d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80047dc:	6822      	ldr	r2, [r4, #0]
 80047de:	3b00      	subs	r3, #0
 80047e0:	bf18      	it	ne
 80047e2:	2301      	movne	r3, #1
 80047e4:	0692      	lsls	r2, r2, #26
 80047e6:	d42b      	bmi.n	8004840 <_printf_common+0xb0>
 80047e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80047ec:	4641      	mov	r1, r8
 80047ee:	4638      	mov	r0, r7
 80047f0:	47c8      	blx	r9
 80047f2:	3001      	adds	r0, #1
 80047f4:	d01e      	beq.n	8004834 <_printf_common+0xa4>
 80047f6:	6823      	ldr	r3, [r4, #0]
 80047f8:	6922      	ldr	r2, [r4, #16]
 80047fa:	f003 0306 	and.w	r3, r3, #6
 80047fe:	2b04      	cmp	r3, #4
 8004800:	bf02      	ittt	eq
 8004802:	68e5      	ldreq	r5, [r4, #12]
 8004804:	6833      	ldreq	r3, [r6, #0]
 8004806:	1aed      	subeq	r5, r5, r3
 8004808:	68a3      	ldr	r3, [r4, #8]
 800480a:	bf0c      	ite	eq
 800480c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004810:	2500      	movne	r5, #0
 8004812:	4293      	cmp	r3, r2
 8004814:	bfc4      	itt	gt
 8004816:	1a9b      	subgt	r3, r3, r2
 8004818:	18ed      	addgt	r5, r5, r3
 800481a:	2600      	movs	r6, #0
 800481c:	341a      	adds	r4, #26
 800481e:	42b5      	cmp	r5, r6
 8004820:	d11a      	bne.n	8004858 <_printf_common+0xc8>
 8004822:	2000      	movs	r0, #0
 8004824:	e008      	b.n	8004838 <_printf_common+0xa8>
 8004826:	2301      	movs	r3, #1
 8004828:	4652      	mov	r2, sl
 800482a:	4641      	mov	r1, r8
 800482c:	4638      	mov	r0, r7
 800482e:	47c8      	blx	r9
 8004830:	3001      	adds	r0, #1
 8004832:	d103      	bne.n	800483c <_printf_common+0xac>
 8004834:	f04f 30ff 	mov.w	r0, #4294967295
 8004838:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800483c:	3501      	adds	r5, #1
 800483e:	e7c6      	b.n	80047ce <_printf_common+0x3e>
 8004840:	18e1      	adds	r1, r4, r3
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	2030      	movs	r0, #48	@ 0x30
 8004846:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800484a:	4422      	add	r2, r4
 800484c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004850:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004854:	3302      	adds	r3, #2
 8004856:	e7c7      	b.n	80047e8 <_printf_common+0x58>
 8004858:	2301      	movs	r3, #1
 800485a:	4622      	mov	r2, r4
 800485c:	4641      	mov	r1, r8
 800485e:	4638      	mov	r0, r7
 8004860:	47c8      	blx	r9
 8004862:	3001      	adds	r0, #1
 8004864:	d0e6      	beq.n	8004834 <_printf_common+0xa4>
 8004866:	3601      	adds	r6, #1
 8004868:	e7d9      	b.n	800481e <_printf_common+0x8e>
	...

0800486c <_printf_i>:
 800486c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004870:	7e0f      	ldrb	r7, [r1, #24]
 8004872:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004874:	2f78      	cmp	r7, #120	@ 0x78
 8004876:	4691      	mov	r9, r2
 8004878:	4680      	mov	r8, r0
 800487a:	460c      	mov	r4, r1
 800487c:	469a      	mov	sl, r3
 800487e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004882:	d807      	bhi.n	8004894 <_printf_i+0x28>
 8004884:	2f62      	cmp	r7, #98	@ 0x62
 8004886:	d80a      	bhi.n	800489e <_printf_i+0x32>
 8004888:	2f00      	cmp	r7, #0
 800488a:	f000 80d2 	beq.w	8004a32 <_printf_i+0x1c6>
 800488e:	2f58      	cmp	r7, #88	@ 0x58
 8004890:	f000 80b9 	beq.w	8004a06 <_printf_i+0x19a>
 8004894:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004898:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800489c:	e03a      	b.n	8004914 <_printf_i+0xa8>
 800489e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80048a2:	2b15      	cmp	r3, #21
 80048a4:	d8f6      	bhi.n	8004894 <_printf_i+0x28>
 80048a6:	a101      	add	r1, pc, #4	@ (adr r1, 80048ac <_printf_i+0x40>)
 80048a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80048ac:	08004905 	.word	0x08004905
 80048b0:	08004919 	.word	0x08004919
 80048b4:	08004895 	.word	0x08004895
 80048b8:	08004895 	.word	0x08004895
 80048bc:	08004895 	.word	0x08004895
 80048c0:	08004895 	.word	0x08004895
 80048c4:	08004919 	.word	0x08004919
 80048c8:	08004895 	.word	0x08004895
 80048cc:	08004895 	.word	0x08004895
 80048d0:	08004895 	.word	0x08004895
 80048d4:	08004895 	.word	0x08004895
 80048d8:	08004a19 	.word	0x08004a19
 80048dc:	08004943 	.word	0x08004943
 80048e0:	080049d3 	.word	0x080049d3
 80048e4:	08004895 	.word	0x08004895
 80048e8:	08004895 	.word	0x08004895
 80048ec:	08004a3b 	.word	0x08004a3b
 80048f0:	08004895 	.word	0x08004895
 80048f4:	08004943 	.word	0x08004943
 80048f8:	08004895 	.word	0x08004895
 80048fc:	08004895 	.word	0x08004895
 8004900:	080049db 	.word	0x080049db
 8004904:	6833      	ldr	r3, [r6, #0]
 8004906:	1d1a      	adds	r2, r3, #4
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	6032      	str	r2, [r6, #0]
 800490c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004910:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004914:	2301      	movs	r3, #1
 8004916:	e09d      	b.n	8004a54 <_printf_i+0x1e8>
 8004918:	6833      	ldr	r3, [r6, #0]
 800491a:	6820      	ldr	r0, [r4, #0]
 800491c:	1d19      	adds	r1, r3, #4
 800491e:	6031      	str	r1, [r6, #0]
 8004920:	0606      	lsls	r6, r0, #24
 8004922:	d501      	bpl.n	8004928 <_printf_i+0xbc>
 8004924:	681d      	ldr	r5, [r3, #0]
 8004926:	e003      	b.n	8004930 <_printf_i+0xc4>
 8004928:	0645      	lsls	r5, r0, #25
 800492a:	d5fb      	bpl.n	8004924 <_printf_i+0xb8>
 800492c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004930:	2d00      	cmp	r5, #0
 8004932:	da03      	bge.n	800493c <_printf_i+0xd0>
 8004934:	232d      	movs	r3, #45	@ 0x2d
 8004936:	426d      	negs	r5, r5
 8004938:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800493c:	4859      	ldr	r0, [pc, #356]	@ (8004aa4 <_printf_i+0x238>)
 800493e:	230a      	movs	r3, #10
 8004940:	e011      	b.n	8004966 <_printf_i+0xfa>
 8004942:	6821      	ldr	r1, [r4, #0]
 8004944:	6833      	ldr	r3, [r6, #0]
 8004946:	0608      	lsls	r0, r1, #24
 8004948:	f853 5b04 	ldr.w	r5, [r3], #4
 800494c:	d402      	bmi.n	8004954 <_printf_i+0xe8>
 800494e:	0649      	lsls	r1, r1, #25
 8004950:	bf48      	it	mi
 8004952:	b2ad      	uxthmi	r5, r5
 8004954:	2f6f      	cmp	r7, #111	@ 0x6f
 8004956:	4853      	ldr	r0, [pc, #332]	@ (8004aa4 <_printf_i+0x238>)
 8004958:	6033      	str	r3, [r6, #0]
 800495a:	bf14      	ite	ne
 800495c:	230a      	movne	r3, #10
 800495e:	2308      	moveq	r3, #8
 8004960:	2100      	movs	r1, #0
 8004962:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004966:	6866      	ldr	r6, [r4, #4]
 8004968:	60a6      	str	r6, [r4, #8]
 800496a:	2e00      	cmp	r6, #0
 800496c:	bfa2      	ittt	ge
 800496e:	6821      	ldrge	r1, [r4, #0]
 8004970:	f021 0104 	bicge.w	r1, r1, #4
 8004974:	6021      	strge	r1, [r4, #0]
 8004976:	b90d      	cbnz	r5, 800497c <_printf_i+0x110>
 8004978:	2e00      	cmp	r6, #0
 800497a:	d04b      	beq.n	8004a14 <_printf_i+0x1a8>
 800497c:	4616      	mov	r6, r2
 800497e:	fbb5 f1f3 	udiv	r1, r5, r3
 8004982:	fb03 5711 	mls	r7, r3, r1, r5
 8004986:	5dc7      	ldrb	r7, [r0, r7]
 8004988:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800498c:	462f      	mov	r7, r5
 800498e:	42bb      	cmp	r3, r7
 8004990:	460d      	mov	r5, r1
 8004992:	d9f4      	bls.n	800497e <_printf_i+0x112>
 8004994:	2b08      	cmp	r3, #8
 8004996:	d10b      	bne.n	80049b0 <_printf_i+0x144>
 8004998:	6823      	ldr	r3, [r4, #0]
 800499a:	07df      	lsls	r7, r3, #31
 800499c:	d508      	bpl.n	80049b0 <_printf_i+0x144>
 800499e:	6923      	ldr	r3, [r4, #16]
 80049a0:	6861      	ldr	r1, [r4, #4]
 80049a2:	4299      	cmp	r1, r3
 80049a4:	bfde      	ittt	le
 80049a6:	2330      	movle	r3, #48	@ 0x30
 80049a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80049ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80049b0:	1b92      	subs	r2, r2, r6
 80049b2:	6122      	str	r2, [r4, #16]
 80049b4:	f8cd a000 	str.w	sl, [sp]
 80049b8:	464b      	mov	r3, r9
 80049ba:	aa03      	add	r2, sp, #12
 80049bc:	4621      	mov	r1, r4
 80049be:	4640      	mov	r0, r8
 80049c0:	f7ff fee6 	bl	8004790 <_printf_common>
 80049c4:	3001      	adds	r0, #1
 80049c6:	d14a      	bne.n	8004a5e <_printf_i+0x1f2>
 80049c8:	f04f 30ff 	mov.w	r0, #4294967295
 80049cc:	b004      	add	sp, #16
 80049ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049d2:	6823      	ldr	r3, [r4, #0]
 80049d4:	f043 0320 	orr.w	r3, r3, #32
 80049d8:	6023      	str	r3, [r4, #0]
 80049da:	4833      	ldr	r0, [pc, #204]	@ (8004aa8 <_printf_i+0x23c>)
 80049dc:	2778      	movs	r7, #120	@ 0x78
 80049de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80049e2:	6823      	ldr	r3, [r4, #0]
 80049e4:	6831      	ldr	r1, [r6, #0]
 80049e6:	061f      	lsls	r7, r3, #24
 80049e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80049ec:	d402      	bmi.n	80049f4 <_printf_i+0x188>
 80049ee:	065f      	lsls	r7, r3, #25
 80049f0:	bf48      	it	mi
 80049f2:	b2ad      	uxthmi	r5, r5
 80049f4:	6031      	str	r1, [r6, #0]
 80049f6:	07d9      	lsls	r1, r3, #31
 80049f8:	bf44      	itt	mi
 80049fa:	f043 0320 	orrmi.w	r3, r3, #32
 80049fe:	6023      	strmi	r3, [r4, #0]
 8004a00:	b11d      	cbz	r5, 8004a0a <_printf_i+0x19e>
 8004a02:	2310      	movs	r3, #16
 8004a04:	e7ac      	b.n	8004960 <_printf_i+0xf4>
 8004a06:	4827      	ldr	r0, [pc, #156]	@ (8004aa4 <_printf_i+0x238>)
 8004a08:	e7e9      	b.n	80049de <_printf_i+0x172>
 8004a0a:	6823      	ldr	r3, [r4, #0]
 8004a0c:	f023 0320 	bic.w	r3, r3, #32
 8004a10:	6023      	str	r3, [r4, #0]
 8004a12:	e7f6      	b.n	8004a02 <_printf_i+0x196>
 8004a14:	4616      	mov	r6, r2
 8004a16:	e7bd      	b.n	8004994 <_printf_i+0x128>
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	6825      	ldr	r5, [r4, #0]
 8004a1c:	6961      	ldr	r1, [r4, #20]
 8004a1e:	1d18      	adds	r0, r3, #4
 8004a20:	6030      	str	r0, [r6, #0]
 8004a22:	062e      	lsls	r6, r5, #24
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	d501      	bpl.n	8004a2c <_printf_i+0x1c0>
 8004a28:	6019      	str	r1, [r3, #0]
 8004a2a:	e002      	b.n	8004a32 <_printf_i+0x1c6>
 8004a2c:	0668      	lsls	r0, r5, #25
 8004a2e:	d5fb      	bpl.n	8004a28 <_printf_i+0x1bc>
 8004a30:	8019      	strh	r1, [r3, #0]
 8004a32:	2300      	movs	r3, #0
 8004a34:	6123      	str	r3, [r4, #16]
 8004a36:	4616      	mov	r6, r2
 8004a38:	e7bc      	b.n	80049b4 <_printf_i+0x148>
 8004a3a:	6833      	ldr	r3, [r6, #0]
 8004a3c:	1d1a      	adds	r2, r3, #4
 8004a3e:	6032      	str	r2, [r6, #0]
 8004a40:	681e      	ldr	r6, [r3, #0]
 8004a42:	6862      	ldr	r2, [r4, #4]
 8004a44:	2100      	movs	r1, #0
 8004a46:	4630      	mov	r0, r6
 8004a48:	f7fb fbd2 	bl	80001f0 <memchr>
 8004a4c:	b108      	cbz	r0, 8004a52 <_printf_i+0x1e6>
 8004a4e:	1b80      	subs	r0, r0, r6
 8004a50:	6060      	str	r0, [r4, #4]
 8004a52:	6863      	ldr	r3, [r4, #4]
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	2300      	movs	r3, #0
 8004a58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a5c:	e7aa      	b.n	80049b4 <_printf_i+0x148>
 8004a5e:	6923      	ldr	r3, [r4, #16]
 8004a60:	4632      	mov	r2, r6
 8004a62:	4649      	mov	r1, r9
 8004a64:	4640      	mov	r0, r8
 8004a66:	47d0      	blx	sl
 8004a68:	3001      	adds	r0, #1
 8004a6a:	d0ad      	beq.n	80049c8 <_printf_i+0x15c>
 8004a6c:	6823      	ldr	r3, [r4, #0]
 8004a6e:	079b      	lsls	r3, r3, #30
 8004a70:	d413      	bmi.n	8004a9a <_printf_i+0x22e>
 8004a72:	68e0      	ldr	r0, [r4, #12]
 8004a74:	9b03      	ldr	r3, [sp, #12]
 8004a76:	4298      	cmp	r0, r3
 8004a78:	bfb8      	it	lt
 8004a7a:	4618      	movlt	r0, r3
 8004a7c:	e7a6      	b.n	80049cc <_printf_i+0x160>
 8004a7e:	2301      	movs	r3, #1
 8004a80:	4632      	mov	r2, r6
 8004a82:	4649      	mov	r1, r9
 8004a84:	4640      	mov	r0, r8
 8004a86:	47d0      	blx	sl
 8004a88:	3001      	adds	r0, #1
 8004a8a:	d09d      	beq.n	80049c8 <_printf_i+0x15c>
 8004a8c:	3501      	adds	r5, #1
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	9903      	ldr	r1, [sp, #12]
 8004a92:	1a5b      	subs	r3, r3, r1
 8004a94:	42ab      	cmp	r3, r5
 8004a96:	dcf2      	bgt.n	8004a7e <_printf_i+0x212>
 8004a98:	e7eb      	b.n	8004a72 <_printf_i+0x206>
 8004a9a:	2500      	movs	r5, #0
 8004a9c:	f104 0619 	add.w	r6, r4, #25
 8004aa0:	e7f5      	b.n	8004a8e <_printf_i+0x222>
 8004aa2:	bf00      	nop
 8004aa4:	080061a9 	.word	0x080061a9
 8004aa8:	080061ba 	.word	0x080061ba

08004aac <memmove>:
 8004aac:	4288      	cmp	r0, r1
 8004aae:	b510      	push	{r4, lr}
 8004ab0:	eb01 0402 	add.w	r4, r1, r2
 8004ab4:	d902      	bls.n	8004abc <memmove+0x10>
 8004ab6:	4284      	cmp	r4, r0
 8004ab8:	4623      	mov	r3, r4
 8004aba:	d807      	bhi.n	8004acc <memmove+0x20>
 8004abc:	1e43      	subs	r3, r0, #1
 8004abe:	42a1      	cmp	r1, r4
 8004ac0:	d008      	beq.n	8004ad4 <memmove+0x28>
 8004ac2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004ac6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004aca:	e7f8      	b.n	8004abe <memmove+0x12>
 8004acc:	4402      	add	r2, r0
 8004ace:	4601      	mov	r1, r0
 8004ad0:	428a      	cmp	r2, r1
 8004ad2:	d100      	bne.n	8004ad6 <memmove+0x2a>
 8004ad4:	bd10      	pop	{r4, pc}
 8004ad6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ada:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004ade:	e7f7      	b.n	8004ad0 <memmove+0x24>

08004ae0 <_sbrk_r>:
 8004ae0:	b538      	push	{r3, r4, r5, lr}
 8004ae2:	4d06      	ldr	r5, [pc, #24]	@ (8004afc <_sbrk_r+0x1c>)
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	4604      	mov	r4, r0
 8004ae8:	4608      	mov	r0, r1
 8004aea:	602b      	str	r3, [r5, #0]
 8004aec:	f7fd f89c 	bl	8001c28 <_sbrk>
 8004af0:	1c43      	adds	r3, r0, #1
 8004af2:	d102      	bne.n	8004afa <_sbrk_r+0x1a>
 8004af4:	682b      	ldr	r3, [r5, #0]
 8004af6:	b103      	cbz	r3, 8004afa <_sbrk_r+0x1a>
 8004af8:	6023      	str	r3, [r4, #0]
 8004afa:	bd38      	pop	{r3, r4, r5, pc}
 8004afc:	2000054c 	.word	0x2000054c

08004b00 <_realloc_r>:
 8004b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b04:	4680      	mov	r8, r0
 8004b06:	4615      	mov	r5, r2
 8004b08:	460c      	mov	r4, r1
 8004b0a:	b921      	cbnz	r1, 8004b16 <_realloc_r+0x16>
 8004b0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b10:	4611      	mov	r1, r2
 8004b12:	f7ff bc59 	b.w	80043c8 <_malloc_r>
 8004b16:	b92a      	cbnz	r2, 8004b24 <_realloc_r+0x24>
 8004b18:	f7ff fbea 	bl	80042f0 <_free_r>
 8004b1c:	2400      	movs	r4, #0
 8004b1e:	4620      	mov	r0, r4
 8004b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b24:	f000 f81a 	bl	8004b5c <_malloc_usable_size_r>
 8004b28:	4285      	cmp	r5, r0
 8004b2a:	4606      	mov	r6, r0
 8004b2c:	d802      	bhi.n	8004b34 <_realloc_r+0x34>
 8004b2e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b32:	d8f4      	bhi.n	8004b1e <_realloc_r+0x1e>
 8004b34:	4629      	mov	r1, r5
 8004b36:	4640      	mov	r0, r8
 8004b38:	f7ff fc46 	bl	80043c8 <_malloc_r>
 8004b3c:	4607      	mov	r7, r0
 8004b3e:	2800      	cmp	r0, #0
 8004b40:	d0ec      	beq.n	8004b1c <_realloc_r+0x1c>
 8004b42:	42b5      	cmp	r5, r6
 8004b44:	462a      	mov	r2, r5
 8004b46:	4621      	mov	r1, r4
 8004b48:	bf28      	it	cs
 8004b4a:	4632      	movcs	r2, r6
 8004b4c:	f7ff fbc2 	bl	80042d4 <memcpy>
 8004b50:	4621      	mov	r1, r4
 8004b52:	4640      	mov	r0, r8
 8004b54:	f7ff fbcc 	bl	80042f0 <_free_r>
 8004b58:	463c      	mov	r4, r7
 8004b5a:	e7e0      	b.n	8004b1e <_realloc_r+0x1e>

08004b5c <_malloc_usable_size_r>:
 8004b5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b60:	1f18      	subs	r0, r3, #4
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	bfbc      	itt	lt
 8004b66:	580b      	ldrlt	r3, [r1, r0]
 8004b68:	18c0      	addlt	r0, r0, r3
 8004b6a:	4770      	bx	lr

08004b6c <_init>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr

08004b78 <_fini>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	bf00      	nop
 8004b7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b7e:	bc08      	pop	{r3}
 8004b80:	469e      	mov	lr, r3
 8004b82:	4770      	bx	lr
