
Bluetooth_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011dc  080056f8  080056f8  000066f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068d4  080068d4  0000805c  2**0
                  CONTENTS
  4 .ARM          00000008  080068d4  080068d4  000078d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068dc  080068dc  0000805c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068dc  080068dc  000078dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080068e0  080068e0  000078e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080068e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008658  2000005c  08006940  0000805c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200086b4  08006940  000086b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009472  00000000  00000000  0000808c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a7a  00000000  00000000  000114fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007c0  00000000  00000000  00012f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000608  00000000  00000000  00013738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015b97  00000000  00000000  00013d40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a8c7  00000000  00000000  000298d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00085a8d  00000000  00000000  0003419e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b9c2b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023a4  00000000  00000000  000b9c70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  000bc014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080056e0 	.word	0x080056e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080056e0 	.word	0x080056e0

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b08a      	sub	sp, #40	@ 0x28
 8000584:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000586:	f107 0314 	add.w	r3, r7, #20
 800058a:	2200      	movs	r2, #0
 800058c:	601a      	str	r2, [r3, #0]
 800058e:	605a      	str	r2, [r3, #4]
 8000590:	609a      	str	r2, [r3, #8]
 8000592:	60da      	str	r2, [r3, #12]
 8000594:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000596:	2300      	movs	r3, #0
 8000598:	613b      	str	r3, [r7, #16]
 800059a:	4b37      	ldr	r3, [pc, #220]	@ (8000678 <MX_GPIO_Init+0xf8>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800059e:	4a36      	ldr	r2, [pc, #216]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005a0:	f043 0304 	orr.w	r3, r3, #4
 80005a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80005a6:	4b34      	ldr	r3, [pc, #208]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005aa:	f003 0304 	and.w	r3, r3, #4
 80005ae:	613b      	str	r3, [r7, #16]
 80005b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005b2:	2300      	movs	r3, #0
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b30      	ldr	r3, [pc, #192]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ba:	4a2f      	ldr	r2, [pc, #188]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005c2:	4b2d      	ldr	r3, [pc, #180]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ca:	60fb      	str	r3, [r7, #12]
 80005cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ce:	2300      	movs	r3, #0
 80005d0:	60bb      	str	r3, [r7, #8]
 80005d2:	4b29      	ldr	r3, [pc, #164]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	4a28      	ldr	r2, [pc, #160]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005d8:	f043 0301 	orr.w	r3, r3, #1
 80005dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80005de:	4b26      	ldr	r3, [pc, #152]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	f003 0301 	and.w	r3, r3, #1
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ea:	2300      	movs	r3, #0
 80005ec:	607b      	str	r3, [r7, #4]
 80005ee:	4b22      	ldr	r3, [pc, #136]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005f2:	4a21      	ldr	r2, [pc, #132]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005fa:	4b1f      	ldr	r3, [pc, #124]	@ (8000678 <MX_GPIO_Init+0xf8>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	481c      	ldr	r0, [pc, #112]	@ (800067c <MX_GPIO_Init+0xfc>)
 800060c:	f002 fca0 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2110      	movs	r1, #16
 8000614:	481a      	ldr	r0, [pc, #104]	@ (8000680 <MX_GPIO_Init+0x100>)
 8000616:	f002 fc9b 	bl	8002f50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800061a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800061e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000620:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000624:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800062a:	f107 0314 	add.w	r3, r7, #20
 800062e:	4619      	mov	r1, r3
 8000630:	4814      	ldr	r0, [pc, #80]	@ (8000684 <MX_GPIO_Init+0x104>)
 8000632:	f002 fb09 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000636:	2320      	movs	r3, #32
 8000638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800063a:	2301      	movs	r3, #1
 800063c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	480b      	ldr	r0, [pc, #44]	@ (800067c <MX_GPIO_Init+0xfc>)
 800064e:	f002 fafb 	bl	8002c48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000652:	2310      	movs	r3, #16
 8000654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000656:	2301      	movs	r3, #1
 8000658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065a:	2300      	movs	r3, #0
 800065c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800065e:	2300      	movs	r3, #0
 8000660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000662:	f107 0314 	add.w	r3, r7, #20
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	@ (8000680 <MX_GPIO_Init+0x100>)
 800066a:	f002 faed 	bl	8002c48 <HAL_GPIO_Init>

}
 800066e:	bf00      	nop
 8000670:	3728      	adds	r7, #40	@ 0x28
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800
 800067c:	40020000 	.word	0x40020000
 8000680:	40020400 	.word	0x40020400
 8000684:	40020800 	.word	0x40020800

08000688 <HAL_UART_RxCpltCallback>:
	/**
	  * @brief Reset Arduino UNO into bootloader mode with precise timing for ATmega328P
	  * @retval None
	  */
	void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
	{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
	  if (huart->Instance == UART_ARDUINO.Instance) {
 8000690:	687b      	ldr	r3, [r7, #4]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	4b11      	ldr	r3, [pc, #68]	@ (80006dc <HAL_UART_RxCpltCallback+0x54>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	429a      	cmp	r2, r3
 800069a:	d11b      	bne.n	80006d4 <HAL_UART_RxCpltCallback+0x4c>
	    // Save the received byte in the circular buffer
	    uartRxCircBuffer[rxHead] = rxBuffer[0]; // Get the received byte from the temp buffer
 800069c:	4b10      	ldr	r3, [pc, #64]	@ (80006e0 <HAL_UART_RxCpltCallback+0x58>)
 800069e:	881b      	ldrh	r3, [r3, #0]
 80006a0:	b29b      	uxth	r3, r3
 80006a2:	461a      	mov	r2, r3
 80006a4:	4b0f      	ldr	r3, [pc, #60]	@ (80006e4 <HAL_UART_RxCpltCallback+0x5c>)
 80006a6:	7819      	ldrb	r1, [r3, #0]
 80006a8:	4b0f      	ldr	r3, [pc, #60]	@ (80006e8 <HAL_UART_RxCpltCallback+0x60>)
 80006aa:	5499      	strb	r1, [r3, r2]
	    rxHead = (rxHead + 1) % RX_BUFFER_SIZE; // Increment head with wrap-around
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <HAL_UART_RxCpltCallback+0x58>)
 80006ae:	881b      	ldrh	r3, [r3, #0]
 80006b0:	b29b      	uxth	r3, r3
 80006b2:	3301      	adds	r3, #1
 80006b4:	425a      	negs	r2, r3
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	bf58      	it	pl
 80006bc:	4253      	negpl	r3, r2
 80006be:	b29a      	uxth	r2, r3
 80006c0:	4b07      	ldr	r3, [pc, #28]	@ (80006e0 <HAL_UART_RxCpltCallback+0x58>)
 80006c2:	801a      	strh	r2, [r3, #0]

	    // Set flag indicating data is available
	    uartRxReady = true;
 80006c4:	4b09      	ldr	r3, [pc, #36]	@ (80006ec <HAL_UART_RxCpltCallback+0x64>)
 80006c6:	2201      	movs	r2, #1
 80006c8:	701a      	strb	r2, [r3, #0]

	    // Re-enable the UART receive interrupt for the next byte
	    HAL_UART_Receive_IT(&UART_ARDUINO, rxBuffer, 1);
 80006ca:	2201      	movs	r2, #1
 80006cc:	4905      	ldr	r1, [pc, #20]	@ (80006e4 <HAL_UART_RxCpltCallback+0x5c>)
 80006ce:	4803      	ldr	r0, [pc, #12]	@ (80006dc <HAL_UART_RxCpltCallback+0x54>)
 80006d0:	f003 fa62 	bl	8003b98 <HAL_UART_Receive_IT>
	  }
	}
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20008490 	.word	0x20008490
 80006e0:	20000478 	.word	0x20000478
 80006e4:	20000078 	.word	0x20000078
 80006e8:	20000378 	.word	0x20000378
 80006ec:	2000047c 	.word	0x2000047c

080006f0 <StartUartInterruptMode>:
	/**
	  * @brief Start UART receive in interrupt mode
	  * @retval None
	  */
	void StartUartInterruptMode(void)
	{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
	  // Reset buffer pointers
	  rxHead = 0;
 80006f4:	4b11      	ldr	r3, [pc, #68]	@ (800073c <StartUartInterruptMode+0x4c>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	801a      	strh	r2, [r3, #0]
	  rxTail = 0;
 80006fa:	4b11      	ldr	r3, [pc, #68]	@ (8000740 <StartUartInterruptMode+0x50>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	801a      	strh	r2, [r3, #0]
	  uartRxReady = false;
 8000700:	4b10      	ldr	r3, [pc, #64]	@ (8000744 <StartUartInterruptMode+0x54>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

	  // Enable UART receive interrupt
	  HAL_UART_Receive_IT(&UART_ARDUINO, rxBuffer, 1);
 8000706:	2201      	movs	r2, #1
 8000708:	490f      	ldr	r1, [pc, #60]	@ (8000748 <StartUartInterruptMode+0x58>)
 800070a:	4810      	ldr	r0, [pc, #64]	@ (800074c <StartUartInterruptMode+0x5c>)
 800070c:	f003 fa44 	bl	8003b98 <HAL_UART_Receive_IT>

	  sprintf(debugBuffer, "[%lu] SYSTEM: UART interrupt mode started\r\n", HAL_GetTick());
 8000710:	f002 f8ba 	bl	8002888 <HAL_GetTick>
 8000714:	4603      	mov	r3, r0
 8000716:	461a      	mov	r2, r3
 8000718:	490d      	ldr	r1, [pc, #52]	@ (8000750 <StartUartInterruptMode+0x60>)
 800071a:	480e      	ldr	r0, [pc, #56]	@ (8000754 <StartUartInterruptMode+0x64>)
 800071c:	f004 fb2e 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000720:	480c      	ldr	r0, [pc, #48]	@ (8000754 <StartUartInterruptMode+0x64>)
 8000722:	f7ff fd5d 	bl	80001e0 <strlen>
 8000726:	4603      	mov	r3, r0
 8000728:	b29a      	uxth	r2, r3
 800072a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800072e:	4909      	ldr	r1, [pc, #36]	@ (8000754 <StartUartInterruptMode+0x64>)
 8000730:	4809      	ldr	r0, [pc, #36]	@ (8000758 <StartUartInterruptMode+0x68>)
 8000732:	f003 f90f 	bl	8003954 <HAL_UART_Transmit>
	}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000478 	.word	0x20000478
 8000740:	2000047a 	.word	0x2000047a
 8000744:	2000047c 	.word	0x2000047c
 8000748:	20000078 	.word	0x20000078
 800074c:	20008490 	.word	0x20008490
 8000750:	080056f8 	.word	0x080056f8
 8000754:	20000178 	.word	0x20000178
 8000758:	20008520 	.word	0x20008520

0800075c <ResetArduino>:


	void ResetArduino(void)
	{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
	  // Log the reset action start
	  sprintf(debugBuffer, "[%lu] SYSTEM: Arduino UNO reset sequence initiated\r\n", HAL_GetTick());
 8000760:	f002 f892 	bl	8002888 <HAL_GetTick>
 8000764:	4603      	mov	r3, r0
 8000766:	461a      	mov	r2, r3
 8000768:	491a      	ldr	r1, [pc, #104]	@ (80007d4 <ResetArduino+0x78>)
 800076a:	481b      	ldr	r0, [pc, #108]	@ (80007d8 <ResetArduino+0x7c>)
 800076c:	f004 fb06 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000770:	4819      	ldr	r0, [pc, #100]	@ (80007d8 <ResetArduino+0x7c>)
 8000772:	f7ff fd35 	bl	80001e0 <strlen>
 8000776:	4603      	mov	r3, r0
 8000778:	b29a      	uxth	r2, r3
 800077a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800077e:	4916      	ldr	r1, [pc, #88]	@ (80007d8 <ResetArduino+0x7c>)
 8000780:	4816      	ldr	r0, [pc, #88]	@ (80007dc <ResetArduino+0x80>)
 8000782:	f003 f8e7 	bl	8003954 <HAL_UART_Transmit>

	  // UNO/ATmega328P specific bootloader entry sequence:

	  // 1. Set RESET low (Arduino enters reset)
	  HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2110      	movs	r1, #16
 800078a:	4815      	ldr	r0, [pc, #84]	@ (80007e0 <ResetArduino+0x84>)
 800078c:	f002 fbe0 	bl	8002f50 <HAL_GPIO_WritePin>

	  // 2. Hold reset for much longer to ensure the LED visibly blinks (2 seconds)
	  HAL_Delay(RESET_PULSE_DURATION);
 8000790:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000794:	f002 f884 	bl	80028a0 <HAL_Delay>

	  // 3. Release RESET - bootloader starts immediately after release
	  HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_SET);
 8000798:	2201      	movs	r2, #1
 800079a:	2110      	movs	r1, #16
 800079c:	4810      	ldr	r0, [pc, #64]	@ (80007e0 <ResetArduino+0x84>)
 800079e:	f002 fbd7 	bl	8002f50 <HAL_GPIO_WritePin>

	  // 4. Wait longer for the bootloader to initialize properly
	  HAL_Delay(POST_RESET_DELAY);
 80007a2:	20fa      	movs	r0, #250	@ 0xfa
 80007a4:	f002 f87c 	bl	80028a0 <HAL_Delay>

	  // Log the reset action completion
	  sprintf(debugBuffer, "[%lu] SYSTEM: Arduino UNO reset sequence completed - bootloader window active\r\n", HAL_GetTick());
 80007a8:	f002 f86e 	bl	8002888 <HAL_GetTick>
 80007ac:	4603      	mov	r3, r0
 80007ae:	461a      	mov	r2, r3
 80007b0:	490c      	ldr	r1, [pc, #48]	@ (80007e4 <ResetArduino+0x88>)
 80007b2:	4809      	ldr	r0, [pc, #36]	@ (80007d8 <ResetArduino+0x7c>)
 80007b4:	f004 fae2 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80007b8:	4807      	ldr	r0, [pc, #28]	@ (80007d8 <ResetArduino+0x7c>)
 80007ba:	f7ff fd11 	bl	80001e0 <strlen>
 80007be:	4603      	mov	r3, r0
 80007c0:	b29a      	uxth	r2, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80007c6:	4904      	ldr	r1, [pc, #16]	@ (80007d8 <ResetArduino+0x7c>)
 80007c8:	4804      	ldr	r0, [pc, #16]	@ (80007dc <ResetArduino+0x80>)
 80007ca:	f003 f8c3 	bl	8003954 <HAL_UART_Transmit>
	}
 80007ce:	bf00      	nop
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	08005724 	.word	0x08005724
 80007d8:	20000178 	.word	0x20000178
 80007dc:	20008520 	.word	0x20008520
 80007e0:	40020400 	.word	0x40020400
 80007e4:	0800575c 	.word	0x0800575c

080007e8 <SendDirectSync>:
	/**
	  * @brief Send a sync command directly to Arduino bootloader
	  * @retval true if sync response received
	  */
	bool SendDirectSync(void)
	{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
	  uint8_t syncCmd[2] = {STK_GET_SYNC, STK_GET_SYNC_EXT};
 80007ee:	f242 0330 	movw	r3, #8240	@ 0x2030
 80007f2:	80bb      	strh	r3, [r7, #4]
	  uint8_t response[2] = {0, 0};
 80007f4:	2300      	movs	r3, #0
 80007f6:	803b      	strh	r3, [r7, #0]
	  bool success = false;
 80007f8:	2300      	movs	r3, #0
 80007fa:	71fb      	strb	r3, [r7, #7]

	  // Log action
	  sprintf(debugBuffer, "[%lu] SYSTEM: Sending direct sync command to bootloader\r\n", HAL_GetTick());
 80007fc:	f002 f844 	bl	8002888 <HAL_GetTick>
 8000800:	4603      	mov	r3, r0
 8000802:	461a      	mov	r2, r3
 8000804:	4963      	ldr	r1, [pc, #396]	@ (8000994 <SendDirectSync+0x1ac>)
 8000806:	4864      	ldr	r0, [pc, #400]	@ (8000998 <SendDirectSync+0x1b0>)
 8000808:	f004 fab8 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800080c:	4862      	ldr	r0, [pc, #392]	@ (8000998 <SendDirectSync+0x1b0>)
 800080e:	f7ff fce7 	bl	80001e0 <strlen>
 8000812:	4603      	mov	r3, r0
 8000814:	b29a      	uxth	r2, r3
 8000816:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800081a:	495f      	ldr	r1, [pc, #380]	@ (8000998 <SendDirectSync+0x1b0>)
 800081c:	485f      	ldr	r0, [pc, #380]	@ (800099c <SendDirectSync+0x1b4>)
 800081e:	f003 f899 	bl	8003954 <HAL_UART_Transmit>

	  // Flush any existing data in the UART buffers
	  HAL_UART_AbortReceive(&UART_ARDUINO);
 8000822:	485f      	ldr	r0, [pc, #380]	@ (80009a0 <SendDirectSync+0x1b8>)
 8000824:	f003 f9dd 	bl	8003be2 <HAL_UART_AbortReceive>

	  // Wait for UART to stabilize
	  HAL_Delay(10);
 8000828:	200a      	movs	r0, #10
 800082a:	f002 f839 	bl	80028a0 <HAL_Delay>

	  // Send sync command
	  HAL_UART_Transmit(&UART_ARDUINO, syncCmd, 2, UART_TIMEOUT);
 800082e:	1d39      	adds	r1, r7, #4
 8000830:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000834:	2202      	movs	r2, #2
 8000836:	485a      	ldr	r0, [pc, #360]	@ (80009a0 <SendDirectSync+0x1b8>)
 8000838:	f003 f88c 	bl	8003954 <HAL_UART_Transmit>

	  // Try to receive first byte with longer timeout
	  if (HAL_UART_Receive(&UART_ARDUINO, &response[0], 1, SYNC_RESPONSE_TIMEOUT) == HAL_OK) {
 800083c:	4639      	mov	r1, r7
 800083e:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000842:	2201      	movs	r2, #1
 8000844:	4856      	ldr	r0, [pc, #344]	@ (80009a0 <SendDirectSync+0x1b8>)
 8000846:	f003 f910 	bl	8003a6a <HAL_UART_Receive>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	f040 8089 	bne.w	8000964 <SendDirectSync+0x17c>
		// We got the first byte, check if it's STK_INSYNC
		if (response[0] == STK_INSYNC) {
 8000852:	783b      	ldrb	r3, [r7, #0]
 8000854:	2b14      	cmp	r3, #20
 8000856:	d171      	bne.n	800093c <SendDirectSync+0x154>
		  sprintf(debugBuffer, "[%lu] SYSTEM: Received STK_INSYNC (0x%02X)\r\n", HAL_GetTick(), response[0]);
 8000858:	f002 f816 	bl	8002888 <HAL_GetTick>
 800085c:	4602      	mov	r2, r0
 800085e:	783b      	ldrb	r3, [r7, #0]
 8000860:	4950      	ldr	r1, [pc, #320]	@ (80009a4 <SendDirectSync+0x1bc>)
 8000862:	484d      	ldr	r0, [pc, #308]	@ (8000998 <SendDirectSync+0x1b0>)
 8000864:	f004 fa8a 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000868:	484b      	ldr	r0, [pc, #300]	@ (8000998 <SendDirectSync+0x1b0>)
 800086a:	f7ff fcb9 	bl	80001e0 <strlen>
 800086e:	4603      	mov	r3, r0
 8000870:	b29a      	uxth	r2, r3
 8000872:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000876:	4948      	ldr	r1, [pc, #288]	@ (8000998 <SendDirectSync+0x1b0>)
 8000878:	4848      	ldr	r0, [pc, #288]	@ (800099c <SendDirectSync+0x1b4>)
 800087a:	f003 f86b 	bl	8003954 <HAL_UART_Transmit>

		  // Try to get the second byte (STK_OK) with dedicated timeout
		  if (HAL_UART_Receive(&UART_ARDUINO, &response[1], 1, SECOND_BYTE_TIMEOUT) == HAL_OK) {
 800087e:	463b      	mov	r3, r7
 8000880:	1c59      	adds	r1, r3, #1
 8000882:	f44f 7396 	mov.w	r3, #300	@ 0x12c
 8000886:	2201      	movs	r2, #1
 8000888:	4845      	ldr	r0, [pc, #276]	@ (80009a0 <SendDirectSync+0x1b8>)
 800088a:	f003 f8ee 	bl	8003a6a <HAL_UART_Receive>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d13f      	bne.n	8000914 <SendDirectSync+0x12c>
			sprintf(debugBuffer, "[%lu] SYSTEM: Received second byte: 0x%02X\r\n", HAL_GetTick(), response[1]);
 8000894:	f001 fff8 	bl	8002888 <HAL_GetTick>
 8000898:	4602      	mov	r2, r0
 800089a:	787b      	ldrb	r3, [r7, #1]
 800089c:	4942      	ldr	r1, [pc, #264]	@ (80009a8 <SendDirectSync+0x1c0>)
 800089e:	483e      	ldr	r0, [pc, #248]	@ (8000998 <SendDirectSync+0x1b0>)
 80008a0:	f004 fa6c 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80008a4:	483c      	ldr	r0, [pc, #240]	@ (8000998 <SendDirectSync+0x1b0>)
 80008a6:	f7ff fc9b 	bl	80001e0 <strlen>
 80008aa:	4603      	mov	r3, r0
 80008ac:	b29a      	uxth	r2, r3
 80008ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008b2:	4939      	ldr	r1, [pc, #228]	@ (8000998 <SendDirectSync+0x1b0>)
 80008b4:	4839      	ldr	r0, [pc, #228]	@ (800099c <SendDirectSync+0x1b4>)
 80008b6:	f003 f84d 	bl	8003954 <HAL_UART_Transmit>

			if (response[1] == STK_OK) {
 80008ba:	787b      	ldrb	r3, [r7, #1]
 80008bc:	2b10      	cmp	r3, #16
 80008be:	d115      	bne.n	80008ec <SendDirectSync+0x104>
			  sprintf(debugBuffer, "[%lu] SYSTEM: Second byte is STK_OK - Bootloader sync confirmed!\r\n", HAL_GetTick());
 80008c0:	f001 ffe2 	bl	8002888 <HAL_GetTick>
 80008c4:	4603      	mov	r3, r0
 80008c6:	461a      	mov	r2, r3
 80008c8:	4938      	ldr	r1, [pc, #224]	@ (80009ac <SendDirectSync+0x1c4>)
 80008ca:	4833      	ldr	r0, [pc, #204]	@ (8000998 <SendDirectSync+0x1b0>)
 80008cc:	f004 fa56 	bl	8004d7c <siprintf>
			  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80008d0:	4831      	ldr	r0, [pc, #196]	@ (8000998 <SendDirectSync+0x1b0>)
 80008d2:	f7ff fc85 	bl	80001e0 <strlen>
 80008d6:	4603      	mov	r3, r0
 80008d8:	b29a      	uxth	r2, r3
 80008da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008de:	492e      	ldr	r1, [pc, #184]	@ (8000998 <SendDirectSync+0x1b0>)
 80008e0:	482e      	ldr	r0, [pc, #184]	@ (800099c <SendDirectSync+0x1b4>)
 80008e2:	f003 f837 	bl	8003954 <HAL_UART_Transmit>
			  success = true;
 80008e6:	2301      	movs	r3, #1
 80008e8:	71fb      	strb	r3, [r7, #7]
 80008ea:	e04e      	b.n	800098a <SendDirectSync+0x1a2>
			} else {
			  sprintf(debugBuffer, "[%lu] SYSTEM: Second byte is not STK_OK\r\n", HAL_GetTick());
 80008ec:	f001 ffcc 	bl	8002888 <HAL_GetTick>
 80008f0:	4603      	mov	r3, r0
 80008f2:	461a      	mov	r2, r3
 80008f4:	492e      	ldr	r1, [pc, #184]	@ (80009b0 <SendDirectSync+0x1c8>)
 80008f6:	4828      	ldr	r0, [pc, #160]	@ (8000998 <SendDirectSync+0x1b0>)
 80008f8:	f004 fa40 	bl	8004d7c <siprintf>
			  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80008fc:	4826      	ldr	r0, [pc, #152]	@ (8000998 <SendDirectSync+0x1b0>)
 80008fe:	f7ff fc6f 	bl	80001e0 <strlen>
 8000902:	4603      	mov	r3, r0
 8000904:	b29a      	uxth	r2, r3
 8000906:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800090a:	4923      	ldr	r1, [pc, #140]	@ (8000998 <SendDirectSync+0x1b0>)
 800090c:	4823      	ldr	r0, [pc, #140]	@ (800099c <SendDirectSync+0x1b4>)
 800090e:	f003 f821 	bl	8003954 <HAL_UART_Transmit>
 8000912:	e03a      	b.n	800098a <SendDirectSync+0x1a2>
			}
		  } else {
			sprintf(debugBuffer, "[%lu] SYSTEM: No second byte received after STK_INSYNC\r\n", HAL_GetTick());
 8000914:	f001 ffb8 	bl	8002888 <HAL_GetTick>
 8000918:	4603      	mov	r3, r0
 800091a:	461a      	mov	r2, r3
 800091c:	4925      	ldr	r1, [pc, #148]	@ (80009b4 <SendDirectSync+0x1cc>)
 800091e:	481e      	ldr	r0, [pc, #120]	@ (8000998 <SendDirectSync+0x1b0>)
 8000920:	f004 fa2c 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000924:	481c      	ldr	r0, [pc, #112]	@ (8000998 <SendDirectSync+0x1b0>)
 8000926:	f7ff fc5b 	bl	80001e0 <strlen>
 800092a:	4603      	mov	r3, r0
 800092c:	b29a      	uxth	r2, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000932:	4919      	ldr	r1, [pc, #100]	@ (8000998 <SendDirectSync+0x1b0>)
 8000934:	4819      	ldr	r0, [pc, #100]	@ (800099c <SendDirectSync+0x1b4>)
 8000936:	f003 f80d 	bl	8003954 <HAL_UART_Transmit>
 800093a:	e026      	b.n	800098a <SendDirectSync+0x1a2>
		  }
		} else {
		  sprintf(debugBuffer, "[%lu] SYSTEM: Received 0x%02X instead of STK_INSYNC\r\n", HAL_GetTick(), response[0]);
 800093c:	f001 ffa4 	bl	8002888 <HAL_GetTick>
 8000940:	4602      	mov	r2, r0
 8000942:	783b      	ldrb	r3, [r7, #0]
 8000944:	491c      	ldr	r1, [pc, #112]	@ (80009b8 <SendDirectSync+0x1d0>)
 8000946:	4814      	ldr	r0, [pc, #80]	@ (8000998 <SendDirectSync+0x1b0>)
 8000948:	f004 fa18 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800094c:	4812      	ldr	r0, [pc, #72]	@ (8000998 <SendDirectSync+0x1b0>)
 800094e:	f7ff fc47 	bl	80001e0 <strlen>
 8000952:	4603      	mov	r3, r0
 8000954:	b29a      	uxth	r2, r3
 8000956:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800095a:	490f      	ldr	r1, [pc, #60]	@ (8000998 <SendDirectSync+0x1b0>)
 800095c:	480f      	ldr	r0, [pc, #60]	@ (800099c <SendDirectSync+0x1b4>)
 800095e:	f002 fff9 	bl	8003954 <HAL_UART_Transmit>
 8000962:	e012      	b.n	800098a <SendDirectSync+0x1a2>
		}
	  } else {
		sprintf(debugBuffer, "[%lu] SYSTEM: No response from bootloader\r\n", HAL_GetTick());
 8000964:	f001 ff90 	bl	8002888 <HAL_GetTick>
 8000968:	4603      	mov	r3, r0
 800096a:	461a      	mov	r2, r3
 800096c:	4913      	ldr	r1, [pc, #76]	@ (80009bc <SendDirectSync+0x1d4>)
 800096e:	480a      	ldr	r0, [pc, #40]	@ (8000998 <SendDirectSync+0x1b0>)
 8000970:	f004 fa04 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000974:	4808      	ldr	r0, [pc, #32]	@ (8000998 <SendDirectSync+0x1b0>)
 8000976:	f7ff fc33 	bl	80001e0 <strlen>
 800097a:	4603      	mov	r3, r0
 800097c:	b29a      	uxth	r2, r3
 800097e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000982:	4905      	ldr	r1, [pc, #20]	@ (8000998 <SendDirectSync+0x1b0>)
 8000984:	4805      	ldr	r0, [pc, #20]	@ (800099c <SendDirectSync+0x1b4>)
 8000986:	f002 ffe5 	bl	8003954 <HAL_UART_Transmit>
	  }

	  return success;
 800098a:	79fb      	ldrb	r3, [r7, #7]
	}
 800098c:	4618      	mov	r0, r3
 800098e:	3708      	adds	r7, #8
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	080058c8 	.word	0x080058c8
 8000998:	20000178 	.word	0x20000178
 800099c:	20008520 	.word	0x20008520
 80009a0:	20008490 	.word	0x20008490
 80009a4:	08005904 	.word	0x08005904
 80009a8:	08005934 	.word	0x08005934
 80009ac:	08005964 	.word	0x08005964
 80009b0:	080059a8 	.word	0x080059a8
 80009b4:	080059d4 	.word	0x080059d4
 80009b8:	08005a10 	.word	0x08005a10
 80009bc:	08005a48 	.word	0x08005a48

080009c0 <SendSyncWithRetries>:
	  * @brief Send sync commands with multiple retries
	  * @param retries: Number of sync command retries
	  * @retval true if sync was achieved
	  */
	bool SendSyncWithRetries(uint8_t retries)
	{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af02      	add	r7, sp, #8
 80009c6:	4603      	mov	r3, r0
 80009c8:	71fb      	strb	r3, [r7, #7]
	  bool syncSuccess = false;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]

	  for (uint8_t i = 0; i < retries; i++) {
 80009ce:	2300      	movs	r3, #0
 80009d0:	73bb      	strb	r3, [r7, #14]
 80009d2:	e02a      	b.n	8000a2a <SendSyncWithRetries+0x6a>
		sprintf(debugBuffer, "[%lu] SYSTEM: Sync attempt %d of %d\r\n", HAL_GetTick(), i+1, retries);
 80009d4:	f001 ff58 	bl	8002888 <HAL_GetTick>
 80009d8:	4601      	mov	r1, r0
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	79fb      	ldrb	r3, [r7, #7]
 80009e0:	9300      	str	r3, [sp, #0]
 80009e2:	4613      	mov	r3, r2
 80009e4:	460a      	mov	r2, r1
 80009e6:	4915      	ldr	r1, [pc, #84]	@ (8000a3c <SendSyncWithRetries+0x7c>)
 80009e8:	4815      	ldr	r0, [pc, #84]	@ (8000a40 <SendSyncWithRetries+0x80>)
 80009ea:	f004 f9c7 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80009ee:	4814      	ldr	r0, [pc, #80]	@ (8000a40 <SendSyncWithRetries+0x80>)
 80009f0:	f7ff fbf6 	bl	80001e0 <strlen>
 80009f4:	4603      	mov	r3, r0
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009fc:	4910      	ldr	r1, [pc, #64]	@ (8000a40 <SendSyncWithRetries+0x80>)
 80009fe:	4811      	ldr	r0, [pc, #68]	@ (8000a44 <SendSyncWithRetries+0x84>)
 8000a00:	f002 ffa8 	bl	8003954 <HAL_UART_Transmit>

		if (SendDirectSync()) {
 8000a04:	f7ff fef0 	bl	80007e8 <SendDirectSync>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d002      	beq.n	8000a14 <SendSyncWithRetries+0x54>
		  syncSuccess = true;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	73fb      	strb	r3, [r7, #15]
		  break;
 8000a12:	e00e      	b.n	8000a32 <SendSyncWithRetries+0x72>
		}

		// Wait before trying again
		if (i < retries - 1) {
 8000a14:	7bba      	ldrb	r2, [r7, #14]
 8000a16:	79fb      	ldrb	r3, [r7, #7]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	da02      	bge.n	8000a24 <SendSyncWithRetries+0x64>
		  HAL_Delay(SYNC_RETRY_DELAY);
 8000a1e:	2064      	movs	r0, #100	@ 0x64
 8000a20:	f001 ff3e 	bl	80028a0 <HAL_Delay>
	  for (uint8_t i = 0; i < retries; i++) {
 8000a24:	7bbb      	ldrb	r3, [r7, #14]
 8000a26:	3301      	adds	r3, #1
 8000a28:	73bb      	strb	r3, [r7, #14]
 8000a2a:	7bba      	ldrb	r2, [r7, #14]
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	429a      	cmp	r2, r3
 8000a30:	d3d0      	bcc.n	80009d4 <SendSyncWithRetries+0x14>
		}
	  }

	  return syncSuccess;
 8000a32:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3710      	adds	r7, #16
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	08005a74 	.word	0x08005a74
 8000a40:	20000178 	.word	0x20000178
 8000a44:	20008520 	.word	0x20008520

08000a48 <ResetAndSyncArduino>:
	  * @brief Perform multiple reset attempts to ensure bootloader entry
	  * @param attempts: Number of reset attempts
	  * @retval true if sync was achieved
	  */
	bool ResetAndSyncArduino(uint8_t attempts)
	{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b086      	sub	sp, #24
 8000a4c:	af02      	add	r7, sp, #8
 8000a4e:	4603      	mov	r3, r0
 8000a50:	71fb      	strb	r3, [r7, #7]
	  bool syncAchieved = false;
 8000a52:	2300      	movs	r3, #0
 8000a54:	73fb      	strb	r3, [r7, #15]

	  for (uint8_t i = 0; i < attempts; i++) {
 8000a56:	2300      	movs	r3, #0
 8000a58:	73bb      	strb	r3, [r7, #14]
 8000a5a:	e058      	b.n	8000b0e <ResetAndSyncArduino+0xc6>
		// Log attempt number if multiple attempts
		if (attempts > 1) {
 8000a5c:	79fb      	ldrb	r3, [r7, #7]
 8000a5e:	2b01      	cmp	r3, #1
 8000a60:	d917      	bls.n	8000a92 <ResetAndSyncArduino+0x4a>
		  sprintf(debugBuffer, "[%lu] SYSTEM: Reset attempt %d of %d\r\n", HAL_GetTick(), i+1, attempts);
 8000a62:	f001 ff11 	bl	8002888 <HAL_GetTick>
 8000a66:	4601      	mov	r1, r0
 8000a68:	7bbb      	ldrb	r3, [r7, #14]
 8000a6a:	1c5a      	adds	r2, r3, #1
 8000a6c:	79fb      	ldrb	r3, [r7, #7]
 8000a6e:	9300      	str	r3, [sp, #0]
 8000a70:	4613      	mov	r3, r2
 8000a72:	460a      	mov	r2, r1
 8000a74:	4938      	ldr	r1, [pc, #224]	@ (8000b58 <ResetAndSyncArduino+0x110>)
 8000a76:	4839      	ldr	r0, [pc, #228]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000a78:	f004 f980 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000a7c:	4837      	ldr	r0, [pc, #220]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000a7e:	f7ff fbaf 	bl	80001e0 <strlen>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29a      	uxth	r2, r3
 8000a86:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000a8a:	4934      	ldr	r1, [pc, #208]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000a8c:	4834      	ldr	r0, [pc, #208]	@ (8000b60 <ResetAndSyncArduino+0x118>)
 8000a8e:	f002 ff61 	bl	8003954 <HAL_UART_Transmit>
		}

		// Reset Arduino
		ResetArduino();
 8000a92:	f7ff fe63 	bl	800075c <ResetArduino>

		// Try multiple sync commands after each reset
		if (SendSyncWithRetries(ARDUINO_SYNC_RETRIES)) {
 8000a96:	200a      	movs	r0, #10
 8000a98:	f7ff ff92 	bl	80009c0 <SendSyncWithRetries>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d016      	beq.n	8000ad0 <ResetAndSyncArduino+0x88>
		  sprintf(debugBuffer, "[%lu] SYSTEM: Bootloader sync achieved on reset attempt %d!\r\n", HAL_GetTick(), i+1);
 8000aa2:	f001 fef1 	bl	8002888 <HAL_GetTick>
 8000aa6:	4602      	mov	r2, r0
 8000aa8:	7bbb      	ldrb	r3, [r7, #14]
 8000aaa:	3301      	adds	r3, #1
 8000aac:	492d      	ldr	r1, [pc, #180]	@ (8000b64 <ResetAndSyncArduino+0x11c>)
 8000aae:	482b      	ldr	r0, [pc, #172]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000ab0:	f004 f964 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000ab4:	4829      	ldr	r0, [pc, #164]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000ab6:	f7ff fb93 	bl	80001e0 <strlen>
 8000aba:	4603      	mov	r3, r0
 8000abc:	b29a      	uxth	r2, r3
 8000abe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ac2:	4926      	ldr	r1, [pc, #152]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000ac4:	4826      	ldr	r0, [pc, #152]	@ (8000b60 <ResetAndSyncArduino+0x118>)
 8000ac6:	f002 ff45 	bl	8003954 <HAL_UART_Transmit>
		  syncAchieved = true;
 8000aca:	2301      	movs	r3, #1
 8000acc:	73fb      	strb	r3, [r7, #15]
		  break;
 8000ace:	e022      	b.n	8000b16 <ResetAndSyncArduino+0xce>
		}

		// If this wasn't the last attempt, wait before trying again
		if (i < attempts - 1) {
 8000ad0:	7bba      	ldrb	r2, [r7, #14]
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	429a      	cmp	r2, r3
 8000ad8:	da16      	bge.n	8000b08 <ResetAndSyncArduino+0xc0>
		  sprintf(debugBuffer, "[%lu] SYSTEM: Sync failed, waiting before next reset attempt...\r\n", HAL_GetTick());
 8000ada:	f001 fed5 	bl	8002888 <HAL_GetTick>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	4921      	ldr	r1, [pc, #132]	@ (8000b68 <ResetAndSyncArduino+0x120>)
 8000ae4:	481d      	ldr	r0, [pc, #116]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000ae6:	f004 f949 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000aea:	481c      	ldr	r0, [pc, #112]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000aec:	f7ff fb78 	bl	80001e0 <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000af8:	4918      	ldr	r1, [pc, #96]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000afa:	4819      	ldr	r0, [pc, #100]	@ (8000b60 <ResetAndSyncArduino+0x118>)
 8000afc:	f002 ff2a 	bl	8003954 <HAL_UART_Transmit>
		  HAL_Delay(INTER_RESET_DELAY);
 8000b00:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b04:	f001 fecc 	bl	80028a0 <HAL_Delay>
	  for (uint8_t i = 0; i < attempts; i++) {
 8000b08:	7bbb      	ldrb	r3, [r7, #14]
 8000b0a:	3301      	adds	r3, #1
 8000b0c:	73bb      	strb	r3, [r7, #14]
 8000b0e:	7bba      	ldrb	r2, [r7, #14]
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	429a      	cmp	r2, r3
 8000b14:	d3a2      	bcc.n	8000a5c <ResetAndSyncArduino+0x14>
		}
	  }

	  if (!syncAchieved && attempts > 1) {
 8000b16:	7bfb      	ldrb	r3, [r7, #15]
 8000b18:	f083 0301 	eor.w	r3, r3, #1
 8000b1c:	b2db      	uxtb	r3, r3
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d015      	beq.n	8000b4e <ResetAndSyncArduino+0x106>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	2b01      	cmp	r3, #1
 8000b26:	d912      	bls.n	8000b4e <ResetAndSyncArduino+0x106>
		sprintf(debugBuffer, "[%lu] SYSTEM: Failed to sync after %d reset attempts\r\n", HAL_GetTick(), attempts);
 8000b28:	f001 feae 	bl	8002888 <HAL_GetTick>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	79fb      	ldrb	r3, [r7, #7]
 8000b30:	490e      	ldr	r1, [pc, #56]	@ (8000b6c <ResetAndSyncArduino+0x124>)
 8000b32:	480a      	ldr	r0, [pc, #40]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000b34:	f004 f922 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000b38:	4808      	ldr	r0, [pc, #32]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000b3a:	f7ff fb51 	bl	80001e0 <strlen>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	b29a      	uxth	r2, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000b46:	4905      	ldr	r1, [pc, #20]	@ (8000b5c <ResetAndSyncArduino+0x114>)
 8000b48:	4805      	ldr	r0, [pc, #20]	@ (8000b60 <ResetAndSyncArduino+0x118>)
 8000b4a:	f002 ff03 	bl	8003954 <HAL_UART_Transmit>
	  }

	  return syncAchieved;
 8000b4e:	7bfb      	ldrb	r3, [r7, #15]
	}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3710      	adds	r7, #16
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	08005a9c 	.word	0x08005a9c
 8000b5c:	20000178 	.word	0x20000178
 8000b60:	20008520 	.word	0x20008520
 8000b64:	08005ac4 	.word	0x08005ac4
 8000b68:	08005b04 	.word	0x08005b04
 8000b6c:	08005b48 	.word	0x08005b48

08000b70 <SendCommandAndWaitForSync>:
	  * @param  response: Buffer to store any additional response data
	  * @param  responseSize: Expected response data size (excluding INSYNC/OK bytes)
	  * @retval true if command succeeded
	  */
	bool SendCommandAndWaitForSync(uint8_t cmd, uint8_t *params, uint8_t paramSize, uint8_t *response, uint8_t responseSize)
	  {
 8000b70:	b590      	push	{r4, r7, lr}
 8000b72:	f5ad 7d0f 	sub.w	sp, sp, #572	@ 0x23c
 8000b76:	af02      	add	r7, sp, #8
 8000b78:	4604      	mov	r4, r0
 8000b7a:	f507 700c 	add.w	r0, r7, #560	@ 0x230
 8000b7e:	f5a0 700a 	sub.w	r0, r0, #552	@ 0x228
 8000b82:	6001      	str	r1, [r0, #0]
 8000b84:	4611      	mov	r1, r2
 8000b86:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000b8a:	f5a2 720b 	sub.w	r2, r2, #556	@ 0x22c
 8000b8e:	6013      	str	r3, [r2, #0]
 8000b90:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000b94:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8000b98:	4622      	mov	r2, r4
 8000b9a:	701a      	strb	r2, [r3, #0]
 8000b9c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000ba0:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8000ba4:	460a      	mov	r2, r1
 8000ba6:	701a      	strb	r2, [r3, #0]
		uint8_t cmdBuffer[RX_BUFFER_SIZE];
	//    uint8_t respBuffer[2 + RX_BUFFER_SIZE]; // INSYNC + OK + any response data
		bool success = false;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f

		// Prepare command buffer
		cmdBuffer[0] = cmd;
 8000bae:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000bb2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8000bb6:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000bba:	f2a2 2221 	subw	r2, r2, #545	@ 0x221
 8000bbe:	7812      	ldrb	r2, [r2, #0]
 8000bc0:	701a      	strb	r2, [r3, #0]

		// Copy parameters if any
		if (params != NULL && paramSize > 0) {
 8000bc2:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000bc6:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d016      	beq.n	8000bfe <SendCommandAndWaitForSync+0x8e>
 8000bd0:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000bd4:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d00f      	beq.n	8000bfe <SendCommandAndWaitForSync+0x8e>
		  memcpy(&cmdBuffer[1], params, paramSize);
 8000bde:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000be2:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8000be6:	7819      	ldrb	r1, [r3, #0]
 8000be8:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000bec:	f5a3 730a 	sub.w	r3, r3, #552	@ 0x228
 8000bf0:	f507 728a 	add.w	r2, r7, #276	@ 0x114
 8000bf4:	1c50      	adds	r0, r2, #1
 8000bf6:	460a      	mov	r2, r1
 8000bf8:	6819      	ldr	r1, [r3, #0]
 8000bfa:	f004 f925 	bl	8004e48 <memcpy>
		}

		// Add Sync_CRC_EOP byte at the end
		cmdBuffer[1 + paramSize] = 0x20;  // Sync_CRC_EOP
 8000bfe:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c02:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	3301      	adds	r3, #1
 8000c0a:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000c0e:	f5a2 728e 	sub.w	r2, r2, #284	@ 0x11c
 8000c12:	2120      	movs	r1, #32
 8000c14:	54d1      	strb	r1, [r2, r3]

		// Total command size is: 1 byte command + paramSize + 1 byte Sync_CRC_EOP
		uint8_t totalSize = 1 + paramSize + 1;
 8000c16:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c1a:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	3302      	adds	r3, #2
 8000c22:	f887 321f 	strb.w	r3, [r7, #543]	@ 0x21f

		// Log command with simple format to minimize processing time
		sprintf(debugBuffer, "[%lu] UPLOAD: Command 0x%02X, %d params\r\n", HAL_GetTick(), cmd, paramSize);
 8000c26:	f001 fe2f 	bl	8002888 <HAL_GetTick>
 8000c2a:	4601      	mov	r1, r0
 8000c2c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c30:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8000c34:	781a      	ldrb	r2, [r3, #0]
 8000c36:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c3a:	f2a3 2322 	subw	r3, r3, #546	@ 0x222
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	4613      	mov	r3, r2
 8000c44:	460a      	mov	r2, r1
 8000c46:	49a7      	ldr	r1, [pc, #668]	@ (8000ee4 <SendCommandAndWaitForSync+0x374>)
 8000c48:	48a7      	ldr	r0, [pc, #668]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000c4a:	f004 f897 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000c4e:	48a6      	ldr	r0, [pc, #664]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000c50:	f7ff fac6 	bl	80001e0 <strlen>
 8000c54:	4603      	mov	r3, r0
 8000c56:	b29a      	uxth	r2, r3
 8000c58:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c5c:	49a2      	ldr	r1, [pc, #648]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000c5e:	48a3      	ldr	r0, [pc, #652]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000c60:	f002 fe78 	bl	8003954 <HAL_UART_Transmit>

		// Flush any existing data in the UART buffers
		HAL_UART_AbortReceive(&UART_ARDUINO);
 8000c64:	48a2      	ldr	r0, [pc, #648]	@ (8000ef0 <SendCommandAndWaitForSync+0x380>)
 8000c66:	f002 ffbc 	bl	8003be2 <HAL_UART_AbortReceive>

		// Wait for UART to stabilize - keep this delay
		HAL_Delay(10);
 8000c6a:	200a      	movs	r0, #10
 8000c6c:	f001 fe18 	bl	80028a0 <HAL_Delay>

		// Send command + parameters + Sync_CRC_EOP
		HAL_UART_Transmit(&UART_ARDUINO, cmdBuffer, totalSize, UART_TIMEOUT);
 8000c70:	f897 321f 	ldrb.w	r3, [r7, #543]	@ 0x21f
 8000c74:	b29a      	uxth	r2, r3
 8000c76:	f507 718a 	add.w	r1, r7, #276	@ 0x114
 8000c7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c7e:	489c      	ldr	r0, [pc, #624]	@ (8000ef0 <SendCommandAndWaitForSync+0x380>)
 8000c80:	f002 fe68 	bl	8003954 <HAL_UART_Transmit>

		// Calculate total expected response size: INSYNC + responseSize + STK_OK
		uint8_t totalResponseSize = 1 + responseSize + 1;
 8000c84:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8000c88:	3302      	adds	r3, #2
 8000c8a:	f887 321e 	strb.w	r3, [r7, #542]	@ 0x21e

		// Create a single buffer for the entire response
		uint8_t fullResponse[2 + RX_BUFFER_SIZE] = {0}; // Size should be enough for all responses
 8000c8e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000c92:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	3304      	adds	r3, #4
 8000c9c:	22fe      	movs	r2, #254	@ 0xfe
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	f004 f88b 	bl	8004dbc <memset>

		// Extended timeout for receiving complete response
		uint32_t extendedTimeout = SYNC_RESPONSE_TIMEOUT + (responseSize * 100);
 8000ca6:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8000caa:	2264      	movs	r2, #100	@ 0x64
 8000cac:	fb02 f303 	mul.w	r3, r2, r3
 8000cb0:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 8000cb4:	f8c7 3218 	str.w	r3, [r7, #536]	@ 0x218

		// Receive the entire response with a single call
		HAL_StatusTypeDef receiveStatus = HAL_UART_Receive(&UART_ARDUINO, fullResponse, totalResponseSize, extendedTimeout);
 8000cb8:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	f107 0110 	add.w	r1, r7, #16
 8000cc2:	f8d7 3218 	ldr.w	r3, [r7, #536]	@ 0x218
 8000cc6:	488a      	ldr	r0, [pc, #552]	@ (8000ef0 <SendCommandAndWaitForSync+0x380>)
 8000cc8:	f002 fecf 	bl	8003a6a <HAL_UART_Receive>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	f887 3217 	strb.w	r3, [r7, #535]	@ 0x217

		// Log the received bytes without processing between receives
		if (receiveStatus == HAL_OK) {
 8000cd2:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	f040 8093 	bne.w	8000e02 <SendCommandAndWaitForSync+0x292>
		  sprintf(debugBuffer, "[%lu] UPLOAD: Received %d bytes in response:\r\n", HAL_GetTick(), totalResponseSize);
 8000cdc:	f001 fdd4 	bl	8002888 <HAL_GetTick>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8000ce6:	4983      	ldr	r1, [pc, #524]	@ (8000ef4 <SendCommandAndWaitForSync+0x384>)
 8000ce8:	487f      	ldr	r0, [pc, #508]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000cea:	f004 f847 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000cee:	487e      	ldr	r0, [pc, #504]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000cf0:	f7ff fa76 	bl	80001e0 <strlen>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	b29a      	uxth	r2, r3
 8000cf8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cfc:	497a      	ldr	r1, [pc, #488]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000cfe:	487b      	ldr	r0, [pc, #492]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000d00:	f002 fe28 	bl	8003954 <HAL_UART_Transmit>

		  for (int i = 0; i < totalResponseSize; i++) {
 8000d04:	2300      	movs	r3, #0
 8000d06:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8000d0a:	e01d      	b.n	8000d48 <SendCommandAndWaitForSync+0x1d8>
			sprintf(debugBuffer, "  Byte %d: 0x%02X\r\n", i, fullResponse[i]);
 8000d0c:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000d10:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8000d14:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000d18:	4413      	add	r3, r2
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8000d20:	4975      	ldr	r1, [pc, #468]	@ (8000ef8 <SendCommandAndWaitForSync+0x388>)
 8000d22:	4871      	ldr	r0, [pc, #452]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000d24:	f004 f82a 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000d28:	486f      	ldr	r0, [pc, #444]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000d2a:	f7ff fa59 	bl	80001e0 <strlen>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	b29a      	uxth	r2, r3
 8000d32:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d36:	496c      	ldr	r1, [pc, #432]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000d38:	486c      	ldr	r0, [pc, #432]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000d3a:	f002 fe0b 	bl	8003954 <HAL_UART_Transmit>
		  for (int i = 0; i < totalResponseSize; i++) {
 8000d3e:	f8d7 3228 	ldr.w	r3, [r7, #552]	@ 0x228
 8000d42:	3301      	adds	r3, #1
 8000d44:	f8c7 3228 	str.w	r3, [r7, #552]	@ 0x228
 8000d48:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8000d4c:	f8d7 2228 	ldr.w	r2, [r7, #552]	@ 0x228
 8000d50:	429a      	cmp	r2, r3
 8000d52:	dbdb      	blt.n	8000d0c <SendCommandAndWaitForSync+0x19c>
		  }

		  // Check if response pattern is correct
		  if (fullResponse[0] == STK_INSYNC && fullResponse[totalResponseSize-1] == STK_OK) {
 8000d54:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000d58:	f5a3 7308 	sub.w	r3, r3, #544	@ 0x220
 8000d5c:	781b      	ldrb	r3, [r3, #0]
 8000d5e:	2b14      	cmp	r3, #20
 8000d60:	d13b      	bne.n	8000dda <SendCommandAndWaitForSync+0x26a>
 8000d62:	f897 321e 	ldrb.w	r3, [r7, #542]	@ 0x21e
 8000d66:	3b01      	subs	r3, #1
 8000d68:	f507 720c 	add.w	r2, r7, #560	@ 0x230
 8000d6c:	f5a2 7208 	sub.w	r2, r2, #544	@ 0x220
 8000d70:	5cd3      	ldrb	r3, [r2, r3]
 8000d72:	2b10      	cmp	r3, #16
 8000d74:	d131      	bne.n	8000dda <SendCommandAndWaitForSync+0x26a>
			// Copy response data if needed
			if (response != NULL && responseSize > 0) {
 8000d76:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000d7a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d00f      	beq.n	8000da4 <SendCommandAndWaitForSync+0x234>
 8000d84:	f897 3240 	ldrb.w	r3, [r7, #576]	@ 0x240
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d00b      	beq.n	8000da4 <SendCommandAndWaitForSync+0x234>
			  memcpy(response, &fullResponse[1], responseSize);
 8000d8c:	f897 2240 	ldrb.w	r2, [r7, #576]	@ 0x240
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	1c59      	adds	r1, r3, #1
 8000d96:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000d9a:	f5a3 730b 	sub.w	r3, r3, #556	@ 0x22c
 8000d9e:	6818      	ldr	r0, [r3, #0]
 8000da0:	f004 f852 	bl	8004e48 <memcpy>
			}

			sprintf(debugBuffer, "[%lu] UPLOAD: Command 0x%02X completed successfully!\r\n", HAL_GetTick(), cmd);
 8000da4:	f001 fd70 	bl	8002888 <HAL_GetTick>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000dae:	f2a3 2321 	subw	r3, r3, #545	@ 0x221
 8000db2:	781b      	ldrb	r3, [r3, #0]
 8000db4:	4951      	ldr	r1, [pc, #324]	@ (8000efc <SendCommandAndWaitForSync+0x38c>)
 8000db6:	484c      	ldr	r0, [pc, #304]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000db8:	f003 ffe0 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000dbc:	484a      	ldr	r0, [pc, #296]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000dbe:	f7ff fa0f 	bl	80001e0 <strlen>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	b29a      	uxth	r2, r3
 8000dc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dca:	4947      	ldr	r1, [pc, #284]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000dcc:	4847      	ldr	r0, [pc, #284]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000dce:	f002 fdc1 	bl	8003954 <HAL_UART_Transmit>
			success = true;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
 8000dd8:	e07d      	b.n	8000ed6 <SendCommandAndWaitForSync+0x366>
		  } else {
			sprintf(debugBuffer, "[%lu] UPLOAD: Response pattern incorrect\r\n", HAL_GetTick());
 8000dda:	f001 fd55 	bl	8002888 <HAL_GetTick>
 8000dde:	4603      	mov	r3, r0
 8000de0:	461a      	mov	r2, r3
 8000de2:	4947      	ldr	r1, [pc, #284]	@ (8000f00 <SendCommandAndWaitForSync+0x390>)
 8000de4:	4840      	ldr	r0, [pc, #256]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000de6:	f003 ffc9 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000dea:	483f      	ldr	r0, [pc, #252]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000dec:	f7ff f9f8 	bl	80001e0 <strlen>
 8000df0:	4603      	mov	r3, r0
 8000df2:	b29a      	uxth	r2, r3
 8000df4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000df8:	493b      	ldr	r1, [pc, #236]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000dfa:	483c      	ldr	r0, [pc, #240]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000dfc:	f002 fdaa 	bl	8003954 <HAL_UART_Transmit>
 8000e00:	e069      	b.n	8000ed6 <SendCommandAndWaitForSync+0x366>
		  }
		} else {
		  sprintf(debugBuffer, "[%lu] UPLOAD: Failed to receive complete response (status: %d)\r\n",
 8000e02:	f001 fd41 	bl	8002888 <HAL_GetTick>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f897 3217 	ldrb.w	r3, [r7, #535]	@ 0x217
 8000e0c:	493d      	ldr	r1, [pc, #244]	@ (8000f04 <SendCommandAndWaitForSync+0x394>)
 8000e0e:	4836      	ldr	r0, [pc, #216]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000e10:	f003 ffb4 	bl	8004d7c <siprintf>
				  HAL_GetTick(), receiveStatus);
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000e14:	4834      	ldr	r0, [pc, #208]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000e16:	f7ff f9e3 	bl	80001e0 <strlen>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	b29a      	uxth	r2, r3
 8000e1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e22:	4931      	ldr	r1, [pc, #196]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000e24:	4831      	ldr	r0, [pc, #196]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000e26:	f002 fd95 	bl	8003954 <HAL_UART_Transmit>

		  // Try to read whatever bytes we can get
		  uint8_t availableBytes = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
		  while (HAL_UART_Receive(&UART_ARDUINO, &fullResponse[availableBytes], 1, 10) == HAL_OK && availableBytes < sizeof(fullResponse)) {
 8000e30:	e004      	b.n	8000e3c <SendCommandAndWaitForSync+0x2cc>
			availableBytes++;
 8000e32:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8000e36:	3301      	adds	r3, #1
 8000e38:	f887 3227 	strb.w	r3, [r7, #551]	@ 0x227
		  while (HAL_UART_Receive(&UART_ARDUINO, &fullResponse[availableBytes], 1, 10) == HAL_OK && availableBytes < sizeof(fullResponse)) {
 8000e3c:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8000e40:	f107 0210 	add.w	r2, r7, #16
 8000e44:	18d1      	adds	r1, r2, r3
 8000e46:	230a      	movs	r3, #10
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4829      	ldr	r0, [pc, #164]	@ (8000ef0 <SendCommandAndWaitForSync+0x380>)
 8000e4c:	f002 fe0d 	bl	8003a6a <HAL_UART_Receive>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d0ed      	beq.n	8000e32 <SendCommandAndWaitForSync+0x2c2>
		  }

		  if (availableBytes > 0) {
 8000e56:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d03b      	beq.n	8000ed6 <SendCommandAndWaitForSync+0x366>
			sprintf(debugBuffer, "[%lu] UPLOAD: Retrieved %d partial bytes:\r\n", HAL_GetTick(), availableBytes);
 8000e5e:	f001 fd13 	bl	8002888 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8000e68:	4927      	ldr	r1, [pc, #156]	@ (8000f08 <SendCommandAndWaitForSync+0x398>)
 8000e6a:	481f      	ldr	r0, [pc, #124]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000e6c:	f003 ff86 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000e70:	481d      	ldr	r0, [pc, #116]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000e72:	f7ff f9b5 	bl	80001e0 <strlen>
 8000e76:	4603      	mov	r3, r0
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e7e:	491a      	ldr	r1, [pc, #104]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000e80:	481a      	ldr	r0, [pc, #104]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000e82:	f002 fd67 	bl	8003954 <HAL_UART_Transmit>

			for (int i = 0; i < availableBytes; i++) {
 8000e86:	2300      	movs	r3, #0
 8000e88:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8000e8c:	e01d      	b.n	8000eca <SendCommandAndWaitForSync+0x35a>
			  sprintf(debugBuffer, "  Byte %d: 0x%02X\r\n", i, fullResponse[i]);
 8000e8e:	f507 730c 	add.w	r3, r7, #560	@ 0x230
 8000e92:	f5a3 7208 	sub.w	r2, r3, #544	@ 0x220
 8000e96:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000e9a:	4413      	add	r3, r2
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8000ea2:	4915      	ldr	r1, [pc, #84]	@ (8000ef8 <SendCommandAndWaitForSync+0x388>)
 8000ea4:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000ea6:	f003 ff69 	bl	8004d7c <siprintf>
			  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000eaa:	480f      	ldr	r0, [pc, #60]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000eac:	f7ff f998 	bl	80001e0 <strlen>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eb8:	490b      	ldr	r1, [pc, #44]	@ (8000ee8 <SendCommandAndWaitForSync+0x378>)
 8000eba:	480c      	ldr	r0, [pc, #48]	@ (8000eec <SendCommandAndWaitForSync+0x37c>)
 8000ebc:	f002 fd4a 	bl	8003954 <HAL_UART_Transmit>
			for (int i = 0; i < availableBytes; i++) {
 8000ec0:	f8d7 3220 	ldr.w	r3, [r7, #544]	@ 0x220
 8000ec4:	3301      	adds	r3, #1
 8000ec6:	f8c7 3220 	str.w	r3, [r7, #544]	@ 0x220
 8000eca:	f897 3227 	ldrb.w	r3, [r7, #551]	@ 0x227
 8000ece:	f8d7 2220 	ldr.w	r2, [r7, #544]	@ 0x220
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	dbdb      	blt.n	8000e8e <SendCommandAndWaitForSync+0x31e>
			}
		  }
		}

		return success;
 8000ed6:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
	  }
 8000eda:	4618      	mov	r0, r3
 8000edc:	f507 770d 	add.w	r7, r7, #564	@ 0x234
 8000ee0:	46bd      	mov	sp, r7
 8000ee2:	bd90      	pop	{r4, r7, pc}
 8000ee4:	08005b80 	.word	0x08005b80
 8000ee8:	20000178 	.word	0x20000178
 8000eec:	20008520 	.word	0x20008520
 8000ef0:	20008490 	.word	0x20008490
 8000ef4:	08005bac 	.word	0x08005bac
 8000ef8:	08005bdc 	.word	0x08005bdc
 8000efc:	08005bf0 	.word	0x08005bf0
 8000f00:	08005c28 	.word	0x08005c28
 8000f04:	08005c54 	.word	0x08005c54
 8000f08:	08005c98 	.word	0x08005c98

08000f0c <EnterProgrammingMode>:
	/**
	  * @brief  Enter programming mode
	  * @retval true if successful
	  */
	bool EnterProgrammingMode(void)
	{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af02      	add	r7, sp, #8
	  sprintf(debugBuffer, "[%lu] UPLOAD: Entering programming mode\r\n", HAL_GetTick());
 8000f12:	f001 fcb9 	bl	8002888 <HAL_GetTick>
 8000f16:	4603      	mov	r3, r0
 8000f18:	461a      	mov	r2, r3
 8000f1a:	4924      	ldr	r1, [pc, #144]	@ (8000fac <EnterProgrammingMode+0xa0>)
 8000f1c:	4824      	ldr	r0, [pc, #144]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f1e:	f003 ff2d 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000f22:	4823      	ldr	r0, [pc, #140]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f24:	f7ff f95c 	bl	80001e0 <strlen>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b29a      	uxth	r2, r3
 8000f2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f30:	491f      	ldr	r1, [pc, #124]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f32:	4820      	ldr	r0, [pc, #128]	@ (8000fb4 <EnterProgrammingMode+0xa8>)
 8000f34:	f002 fd0e 	bl	8003954 <HAL_UART_Transmit>

	  // Use SendCommandAndWaitForSync with no parameters and no expected response data
	  if (!SendCommandAndWaitForSync(STK_ENTER_PROGMODE, NULL, 0, NULL, 0)) {
 8000f38:	2300      	movs	r3, #0
 8000f3a:	9300      	str	r3, [sp, #0]
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	2200      	movs	r2, #0
 8000f40:	2100      	movs	r1, #0
 8000f42:	2050      	movs	r0, #80	@ 0x50
 8000f44:	f7ff fe14 	bl	8000b70 <SendCommandAndWaitForSync>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f083 0301 	eor.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d014      	beq.n	8000f7e <EnterProgrammingMode+0x72>
		sprintf(debugBuffer, "[%lu] UPLOAD: Failed to enter programming mode\r\n", HAL_GetTick());
 8000f54:	f001 fc98 	bl	8002888 <HAL_GetTick>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	4916      	ldr	r1, [pc, #88]	@ (8000fb8 <EnterProgrammingMode+0xac>)
 8000f5e:	4814      	ldr	r0, [pc, #80]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f60:	f003 ff0c 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000f64:	4812      	ldr	r0, [pc, #72]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f66:	f7ff f93b 	bl	80001e0 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f72:	490f      	ldr	r1, [pc, #60]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f74:	480f      	ldr	r0, [pc, #60]	@ (8000fb4 <EnterProgrammingMode+0xa8>)
 8000f76:	f002 fced 	bl	8003954 <HAL_UART_Transmit>
		return false;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e013      	b.n	8000fa6 <EnterProgrammingMode+0x9a>
	  }

	  sprintf(debugBuffer, "[%lu] UPLOAD: Successfully entered programming mode\r\n", HAL_GetTick());
 8000f7e:	f001 fc83 	bl	8002888 <HAL_GetTick>
 8000f82:	4603      	mov	r3, r0
 8000f84:	461a      	mov	r2, r3
 8000f86:	490d      	ldr	r1, [pc, #52]	@ (8000fbc <EnterProgrammingMode+0xb0>)
 8000f88:	4809      	ldr	r0, [pc, #36]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f8a:	f003 fef7 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000f8e:	4808      	ldr	r0, [pc, #32]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f90:	f7ff f926 	bl	80001e0 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9c:	4904      	ldr	r1, [pc, #16]	@ (8000fb0 <EnterProgrammingMode+0xa4>)
 8000f9e:	4805      	ldr	r0, [pc, #20]	@ (8000fb4 <EnterProgrammingMode+0xa8>)
 8000fa0:	f002 fcd8 	bl	8003954 <HAL_UART_Transmit>
	  return true;
 8000fa4:	2301      	movs	r3, #1
	}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	bd80      	pop	{r7, pc}
 8000fac:	08005cc4 	.word	0x08005cc4
 8000fb0:	20000178 	.word	0x20000178
 8000fb4:	20008520 	.word	0x20008520
 8000fb8:	08005cf0 	.word	0x08005cf0
 8000fbc:	08005d24 	.word	0x08005d24

08000fc0 <LeaveProgrammingMode>:
	/**
	  * @brief  Leave programming mode
	  * @retval true if successful
	  */
	bool LeaveProgrammingMode(void)
	{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af02      	add	r7, sp, #8
	  sprintf(debugBuffer, "[%lu] UPLOAD: Leaving programming mode\r\n", HAL_GetTick());
 8000fc6:	f001 fc5f 	bl	8002888 <HAL_GetTick>
 8000fca:	4603      	mov	r3, r0
 8000fcc:	461a      	mov	r2, r3
 8000fce:	490d      	ldr	r1, [pc, #52]	@ (8001004 <LeaveProgrammingMode+0x44>)
 8000fd0:	480d      	ldr	r0, [pc, #52]	@ (8001008 <LeaveProgrammingMode+0x48>)
 8000fd2:	f003 fed3 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8000fd6:	480c      	ldr	r0, [pc, #48]	@ (8001008 <LeaveProgrammingMode+0x48>)
 8000fd8:	f7ff f902 	bl	80001e0 <strlen>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	b29a      	uxth	r2, r3
 8000fe0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fe4:	4908      	ldr	r1, [pc, #32]	@ (8001008 <LeaveProgrammingMode+0x48>)
 8000fe6:	4809      	ldr	r0, [pc, #36]	@ (800100c <LeaveProgrammingMode+0x4c>)
 8000fe8:	f002 fcb4 	bl	8003954 <HAL_UART_Transmit>

	  return SendCommandAndWaitForSync(STK_LEAVE_PROGMODE, NULL, 0, NULL, 0);
 8000fec:	2300      	movs	r3, #0
 8000fee:	9300      	str	r3, [sp, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	2051      	movs	r0, #81	@ 0x51
 8000ff8:	f7ff fdba 	bl	8000b70 <SendCommandAndWaitForSync>
 8000ffc:	4603      	mov	r3, r0
	}
 8000ffe:	4618      	mov	r0, r3
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	08005d5c 	.word	0x08005d5c
 8001008:	20000178 	.word	0x20000178
 800100c:	20008520 	.word	0x20008520

08001010 <LoadAddress>:
	  * @brief  Load address for subsequent operations
	  * @param  address: Word address (address/2 for flash)
	  * @retval true if successful
	  */
	bool LoadAddress(uint16_t address)
	{
 8001010:	b580      	push	{r7, lr}
 8001012:	b086      	sub	sp, #24
 8001014:	af02      	add	r7, sp, #8
 8001016:	4603      	mov	r3, r0
 8001018:	80fb      	strh	r3, [r7, #6]
	  uint8_t params[2];

	  // Convert byte address to word address for flash memory
	  uint16_t wordAddress = address >> 1;
 800101a:	88fb      	ldrh	r3, [r7, #6]
 800101c:	085b      	lsrs	r3, r3, #1
 800101e:	81fb      	strh	r3, [r7, #14]

	  // STK500 protocol expects low byte first
	  params[0] = wordAddress & 0xFF;        // Low byte
 8001020:	89fb      	ldrh	r3, [r7, #14]
 8001022:	b2db      	uxtb	r3, r3
 8001024:	733b      	strb	r3, [r7, #12]
	  params[1] = (wordAddress >> 8) & 0xFF; // High byte
 8001026:	89fb      	ldrh	r3, [r7, #14]
 8001028:	0a1b      	lsrs	r3, r3, #8
 800102a:	b29b      	uxth	r3, r3
 800102c:	b2db      	uxtb	r3, r3
 800102e:	737b      	strb	r3, [r7, #13]

	  sprintf(debugBuffer, "[%lu] UPLOAD: Loading address 0x%04X (word: 0x%04X)\r\n",
 8001030:	f001 fc2a 	bl	8002888 <HAL_GetTick>
 8001034:	4601      	mov	r1, r0
 8001036:	88fa      	ldrh	r2, [r7, #6]
 8001038:	89fb      	ldrh	r3, [r7, #14]
 800103a:	9300      	str	r3, [sp, #0]
 800103c:	4613      	mov	r3, r2
 800103e:	460a      	mov	r2, r1
 8001040:	490e      	ldr	r1, [pc, #56]	@ (800107c <LoadAddress+0x6c>)
 8001042:	480f      	ldr	r0, [pc, #60]	@ (8001080 <LoadAddress+0x70>)
 8001044:	f003 fe9a 	bl	8004d7c <siprintf>
			  HAL_GetTick(), address, wordAddress);
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001048:	480d      	ldr	r0, [pc, #52]	@ (8001080 <LoadAddress+0x70>)
 800104a:	f7ff f8c9 	bl	80001e0 <strlen>
 800104e:	4603      	mov	r3, r0
 8001050:	b29a      	uxth	r2, r3
 8001052:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001056:	490a      	ldr	r1, [pc, #40]	@ (8001080 <LoadAddress+0x70>)
 8001058:	480a      	ldr	r0, [pc, #40]	@ (8001084 <LoadAddress+0x74>)
 800105a:	f002 fc7b 	bl	8003954 <HAL_UART_Transmit>

	  return SendCommandAndWaitForSync(STK_LOAD_ADDRESS, params, 2, NULL, 0);
 800105e:	f107 010c 	add.w	r1, r7, #12
 8001062:	2300      	movs	r3, #0
 8001064:	9300      	str	r3, [sp, #0]
 8001066:	2300      	movs	r3, #0
 8001068:	2202      	movs	r2, #2
 800106a:	2055      	movs	r0, #85	@ 0x55
 800106c:	f7ff fd80 	bl	8000b70 <SendCommandAndWaitForSync>
 8001070:	4603      	mov	r3, r0
	}
 8001072:	4618      	mov	r0, r3
 8001074:	3710      	adds	r7, #16
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
 800107a:	bf00      	nop
 800107c:	08005d88 	.word	0x08005d88
 8001080:	20000178 	.word	0x20000178
 8001084:	20008520 	.word	0x20008520

08001088 <ProgramPageSpecial>:

	  return SendCommandAndWaitForSync(STK_PROG_PAGE, params, size + 3, NULL, 0);
	}

	bool ProgramPageSpecial(uint8_t *data, uint16_t size, char memoryType)
	{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0aa      	sub	sp, #168	@ 0xa8
 800108c:	af02      	add	r7, sp, #8
 800108e:	6078      	str	r0, [r7, #4]
 8001090:	460b      	mov	r3, r1
 8001092:	807b      	strh	r3, [r7, #2]
 8001094:	4613      	mov	r3, r2
 8001096:	707b      	strb	r3, [r7, #1]
	  uint8_t cmdBuffer[4 + FLASH_PAGE_SIZE + 1]; // Command + size high/low + memory type + data + CRC_EOP
	  uint8_t response[2] = {0}; // For INSYNC and OK responses
 8001098:	2300      	movs	r3, #0
 800109a:	813b      	strh	r3, [r7, #8]
	  bool success = false;
 800109c:	2300      	movs	r3, #0
 800109e:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f

	  // Prepare command buffer
	  cmdBuffer[0] = STK_PROG_PAGE;     // Command
 80010a2:	2364      	movs	r3, #100	@ 0x64
 80010a4:	733b      	strb	r3, [r7, #12]
	  cmdBuffer[1] = (size >> 8) & 0xFF; // Size high byte
 80010a6:	887b      	ldrh	r3, [r7, #2]
 80010a8:	0a1b      	lsrs	r3, r3, #8
 80010aa:	b29b      	uxth	r3, r3
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	737b      	strb	r3, [r7, #13]
	  cmdBuffer[2] = size & 0xFF;        // Size low byte
 80010b0:	887b      	ldrh	r3, [r7, #2]
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	73bb      	strb	r3, [r7, #14]
	  cmdBuffer[3] = memoryType;         // 'F' for flash, 'E' for EEPROM
 80010b6:	787b      	ldrb	r3, [r7, #1]
 80010b8:	73fb      	strb	r3, [r7, #15]

	  // Copy data
	  memcpy(&cmdBuffer[4], data, size);
 80010ba:	887a      	ldrh	r2, [r7, #2]
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	3304      	adds	r3, #4
 80010c2:	6879      	ldr	r1, [r7, #4]
 80010c4:	4618      	mov	r0, r3
 80010c6:	f003 febf 	bl	8004e48 <memcpy>

	  // Add Sync_CRC_EOP at the end
	  cmdBuffer[4 + size] = 0x20; // Sync_CRC_EOP
 80010ca:	887b      	ldrh	r3, [r7, #2]
 80010cc:	3304      	adds	r3, #4
 80010ce:	33a0      	adds	r3, #160	@ 0xa0
 80010d0:	443b      	add	r3, r7
 80010d2:	2220      	movs	r2, #32
 80010d4:	f803 2c94 	strb.w	r2, [r3, #-148]

	  // Total length of command
	  uint16_t totalSize = 4 + size + 1;
 80010d8:	887b      	ldrh	r3, [r7, #2]
 80010da:	3305      	adds	r3, #5
 80010dc:	f8a7 309a 	strh.w	r3, [r7, #154]	@ 0x9a

	  sprintf(debugBuffer, "[%lu] UPLOAD: Programming %d bytes to %c memory (special method)\r\n",
 80010e0:	f001 fbd2 	bl	8002888 <HAL_GetTick>
 80010e4:	4601      	mov	r1, r0
 80010e6:	887a      	ldrh	r2, [r7, #2]
 80010e8:	787b      	ldrb	r3, [r7, #1]
 80010ea:	9300      	str	r3, [sp, #0]
 80010ec:	4613      	mov	r3, r2
 80010ee:	460a      	mov	r2, r1
 80010f0:	4981      	ldr	r1, [pc, #516]	@ (80012f8 <ProgramPageSpecial+0x270>)
 80010f2:	4882      	ldr	r0, [pc, #520]	@ (80012fc <ProgramPageSpecial+0x274>)
 80010f4:	f003 fe42 	bl	8004d7c <siprintf>
			  HAL_GetTick(), size, memoryType);
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80010f8:	4880      	ldr	r0, [pc, #512]	@ (80012fc <ProgramPageSpecial+0x274>)
 80010fa:	f7ff f871 	bl	80001e0 <strlen>
 80010fe:	4603      	mov	r3, r0
 8001100:	b29a      	uxth	r2, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001106:	497d      	ldr	r1, [pc, #500]	@ (80012fc <ProgramPageSpecial+0x274>)
 8001108:	487d      	ldr	r0, [pc, #500]	@ (8001300 <ProgramPageSpecial+0x278>)
 800110a:	f002 fc23 	bl	8003954 <HAL_UART_Transmit>

	  // Flush any existing data in the UART buffers
	  HAL_UART_AbortReceive(&UART_ARDUINO);
 800110e:	487d      	ldr	r0, [pc, #500]	@ (8001304 <ProgramPageSpecial+0x27c>)
 8001110:	f002 fd67 	bl	8003be2 <HAL_UART_AbortReceive>

	  // Wait for UART to stabilize
	  HAL_Delay(20);
 8001114:	2014      	movs	r0, #20
 8001116:	f001 fbc3 	bl	80028a0 <HAL_Delay>

	  // 1. Send command byte
	  HAL_UART_Transmit(&UART_ARDUINO, &cmdBuffer[0], 1, UART_TIMEOUT);
 800111a:	f107 010c 	add.w	r1, r7, #12
 800111e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001122:	2201      	movs	r2, #1
 8001124:	4877      	ldr	r0, [pc, #476]	@ (8001304 <ProgramPageSpecial+0x27c>)
 8001126:	f002 fc15 	bl	8003954 <HAL_UART_Transmit>
	  HAL_Delay(5);
 800112a:	2005      	movs	r0, #5
 800112c:	f001 fbb8 	bl	80028a0 <HAL_Delay>

	  // 2. Send size bytes and memory type
	  HAL_UART_Transmit(&UART_ARDUINO, &cmdBuffer[1], 3, UART_TIMEOUT);
 8001130:	f107 030c 	add.w	r3, r7, #12
 8001134:	1c59      	adds	r1, r3, #1
 8001136:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800113a:	2203      	movs	r2, #3
 800113c:	4871      	ldr	r0, [pc, #452]	@ (8001304 <ProgramPageSpecial+0x27c>)
 800113e:	f002 fc09 	bl	8003954 <HAL_UART_Transmit>
	  HAL_Delay(5);
 8001142:	2005      	movs	r0, #5
 8001144:	f001 fbac 	bl	80028a0 <HAL_Delay>

	  // 3. Send data in smaller chunks with delays
	  for (uint16_t offset = 0; offset < size; offset += 16) {
 8001148:	2300      	movs	r3, #0
 800114a:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 800114e:	e022      	b.n	8001196 <ProgramPageSpecial+0x10e>
		uint16_t chunkSize = ((offset + 16) > size) ? (size - offset) : 16;
 8001150:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001154:	f103 020f 	add.w	r2, r3, #15
 8001158:	887b      	ldrh	r3, [r7, #2]
 800115a:	429a      	cmp	r2, r3
 800115c:	db05      	blt.n	800116a <ProgramPageSpecial+0xe2>
 800115e:	887a      	ldrh	r2, [r7, #2]
 8001160:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	b29b      	uxth	r3, r3
 8001168:	e000      	b.n	800116c <ProgramPageSpecial+0xe4>
 800116a:	2310      	movs	r3, #16
 800116c:	f8a7 3092 	strh.w	r3, [r7, #146]	@ 0x92
		HAL_UART_Transmit(&UART_ARDUINO, &data[offset], chunkSize, UART_TIMEOUT);
 8001170:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001174:	687a      	ldr	r2, [r7, #4]
 8001176:	18d1      	adds	r1, r2, r3
 8001178:	f8b7 2092 	ldrh.w	r2, [r7, #146]	@ 0x92
 800117c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001180:	4860      	ldr	r0, [pc, #384]	@ (8001304 <ProgramPageSpecial+0x27c>)
 8001182:	f002 fbe7 	bl	8003954 <HAL_UART_Transmit>
		HAL_Delay(1); // Brief delay between chunks
 8001186:	2001      	movs	r0, #1
 8001188:	f001 fb8a 	bl	80028a0 <HAL_Delay>
	  for (uint16_t offset = 0; offset < size; offset += 16) {
 800118c:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8001190:	3310      	adds	r3, #16
 8001192:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
 8001196:	f8b7 209c 	ldrh.w	r2, [r7, #156]	@ 0x9c
 800119a:	887b      	ldrh	r3, [r7, #2]
 800119c:	429a      	cmp	r2, r3
 800119e:	d3d7      	bcc.n	8001150 <ProgramPageSpecial+0xc8>
	  }

	  // 4. Send final Sync_CRC_EOP
	  HAL_UART_Transmit(&UART_ARDUINO, &cmdBuffer[4 + size], 1, UART_TIMEOUT);
 80011a0:	887b      	ldrh	r3, [r7, #2]
 80011a2:	3304      	adds	r3, #4
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	18d1      	adds	r1, r2, r3
 80011aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ae:	2201      	movs	r2, #1
 80011b0:	4854      	ldr	r0, [pc, #336]	@ (8001304 <ProgramPageSpecial+0x27c>)
 80011b2:	f002 fbcf 	bl	8003954 <HAL_UART_Transmit>

	  // 5. Wait for INSYNC response with extended timeout
	  uint32_t programmingTimeout = 1000; // 1 second timeout for flash programming
 80011b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

	  if (HAL_UART_Receive(&UART_ARDUINO, &response[0], 1, programmingTimeout) == HAL_OK) {
 80011be:	f107 0108 	add.w	r1, r7, #8
 80011c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011c6:	2201      	movs	r2, #1
 80011c8:	484e      	ldr	r0, [pc, #312]	@ (8001304 <ProgramPageSpecial+0x27c>)
 80011ca:	f002 fc4e 	bl	8003a6a <HAL_UART_Receive>
 80011ce:	4603      	mov	r3, r0
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d177      	bne.n	80012c4 <ProgramPageSpecial+0x23c>
		if (response[0] == STK_INSYNC) {
 80011d4:	7a3b      	ldrb	r3, [r7, #8]
 80011d6:	2b14      	cmp	r3, #20
 80011d8:	d160      	bne.n	800129c <ProgramPageSpecial+0x214>
		  sprintf(debugBuffer, "[%lu] UPLOAD: Received STK_INSYNC after programming\r\n", HAL_GetTick());
 80011da:	f001 fb55 	bl	8002888 <HAL_GetTick>
 80011de:	4603      	mov	r3, r0
 80011e0:	461a      	mov	r2, r3
 80011e2:	4949      	ldr	r1, [pc, #292]	@ (8001308 <ProgramPageSpecial+0x280>)
 80011e4:	4845      	ldr	r0, [pc, #276]	@ (80012fc <ProgramPageSpecial+0x274>)
 80011e6:	f003 fdc9 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80011ea:	4844      	ldr	r0, [pc, #272]	@ (80012fc <ProgramPageSpecial+0x274>)
 80011ec:	f7fe fff8 	bl	80001e0 <strlen>
 80011f0:	4603      	mov	r3, r0
 80011f2:	b29a      	uxth	r2, r3
 80011f4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f8:	4940      	ldr	r1, [pc, #256]	@ (80012fc <ProgramPageSpecial+0x274>)
 80011fa:	4841      	ldr	r0, [pc, #260]	@ (8001300 <ProgramPageSpecial+0x278>)
 80011fc:	f002 fbaa 	bl	8003954 <HAL_UART_Transmit>

		  // 6. Wait for OK response
		  if (HAL_UART_Receive(&UART_ARDUINO, &response[1], 1, 500) == HAL_OK) {
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	1c59      	adds	r1, r3, #1
 8001206:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 800120a:	2201      	movs	r2, #1
 800120c:	483d      	ldr	r0, [pc, #244]	@ (8001304 <ProgramPageSpecial+0x27c>)
 800120e:	f002 fc2c 	bl	8003a6a <HAL_UART_Receive>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d12d      	bne.n	8001274 <ProgramPageSpecial+0x1ec>
			if (response[1] == STK_OK) {
 8001218:	7a7b      	ldrb	r3, [r7, #9]
 800121a:	2b10      	cmp	r3, #16
 800121c:	d116      	bne.n	800124c <ProgramPageSpecial+0x1c4>
			  sprintf(debugBuffer, "[%lu] UPLOAD: Programming successful\r\n", HAL_GetTick());
 800121e:	f001 fb33 	bl	8002888 <HAL_GetTick>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	4939      	ldr	r1, [pc, #228]	@ (800130c <ProgramPageSpecial+0x284>)
 8001228:	4834      	ldr	r0, [pc, #208]	@ (80012fc <ProgramPageSpecial+0x274>)
 800122a:	f003 fda7 	bl	8004d7c <siprintf>
			  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800122e:	4833      	ldr	r0, [pc, #204]	@ (80012fc <ProgramPageSpecial+0x274>)
 8001230:	f7fe ffd6 	bl	80001e0 <strlen>
 8001234:	4603      	mov	r3, r0
 8001236:	b29a      	uxth	r2, r3
 8001238:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800123c:	492f      	ldr	r1, [pc, #188]	@ (80012fc <ProgramPageSpecial+0x274>)
 800123e:	4830      	ldr	r0, [pc, #192]	@ (8001300 <ProgramPageSpecial+0x278>)
 8001240:	f002 fb88 	bl	8003954 <HAL_UART_Transmit>
			  success = true;
 8001244:	2301      	movs	r3, #1
 8001246:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
 800124a:	e04e      	b.n	80012ea <ProgramPageSpecial+0x262>
			} else {
			  sprintf(debugBuffer, "[%lu] UPLOAD: Received non-OK response: 0x%02X\r\n",
 800124c:	f001 fb1c 	bl	8002888 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
					 HAL_GetTick(), response[1]);
 8001252:	7a7b      	ldrb	r3, [r7, #9]
			  sprintf(debugBuffer, "[%lu] UPLOAD: Received non-OK response: 0x%02X\r\n",
 8001254:	492e      	ldr	r1, [pc, #184]	@ (8001310 <ProgramPageSpecial+0x288>)
 8001256:	4829      	ldr	r0, [pc, #164]	@ (80012fc <ProgramPageSpecial+0x274>)
 8001258:	f003 fd90 	bl	8004d7c <siprintf>
			  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800125c:	4827      	ldr	r0, [pc, #156]	@ (80012fc <ProgramPageSpecial+0x274>)
 800125e:	f7fe ffbf 	bl	80001e0 <strlen>
 8001262:	4603      	mov	r3, r0
 8001264:	b29a      	uxth	r2, r3
 8001266:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126a:	4924      	ldr	r1, [pc, #144]	@ (80012fc <ProgramPageSpecial+0x274>)
 800126c:	4824      	ldr	r0, [pc, #144]	@ (8001300 <ProgramPageSpecial+0x278>)
 800126e:	f002 fb71 	bl	8003954 <HAL_UART_Transmit>
 8001272:	e03a      	b.n	80012ea <ProgramPageSpecial+0x262>
			}
		  } else {
			sprintf(debugBuffer, "[%lu] UPLOAD: No OK response received\r\n", HAL_GetTick());
 8001274:	f001 fb08 	bl	8002888 <HAL_GetTick>
 8001278:	4603      	mov	r3, r0
 800127a:	461a      	mov	r2, r3
 800127c:	4925      	ldr	r1, [pc, #148]	@ (8001314 <ProgramPageSpecial+0x28c>)
 800127e:	481f      	ldr	r0, [pc, #124]	@ (80012fc <ProgramPageSpecial+0x274>)
 8001280:	f003 fd7c 	bl	8004d7c <siprintf>
			HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001284:	481d      	ldr	r0, [pc, #116]	@ (80012fc <ProgramPageSpecial+0x274>)
 8001286:	f7fe ffab 	bl	80001e0 <strlen>
 800128a:	4603      	mov	r3, r0
 800128c:	b29a      	uxth	r2, r3
 800128e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001292:	491a      	ldr	r1, [pc, #104]	@ (80012fc <ProgramPageSpecial+0x274>)
 8001294:	481a      	ldr	r0, [pc, #104]	@ (8001300 <ProgramPageSpecial+0x278>)
 8001296:	f002 fb5d 	bl	8003954 <HAL_UART_Transmit>
 800129a:	e026      	b.n	80012ea <ProgramPageSpecial+0x262>
		  }
		} else {
		  sprintf(debugBuffer, "[%lu] UPLOAD: Received 0x%02X instead of STK_INSYNC\r\n",
 800129c:	f001 faf4 	bl	8002888 <HAL_GetTick>
 80012a0:	4602      	mov	r2, r0
				 HAL_GetTick(), response[0]);
 80012a2:	7a3b      	ldrb	r3, [r7, #8]
		  sprintf(debugBuffer, "[%lu] UPLOAD: Received 0x%02X instead of STK_INSYNC\r\n",
 80012a4:	491c      	ldr	r1, [pc, #112]	@ (8001318 <ProgramPageSpecial+0x290>)
 80012a6:	4815      	ldr	r0, [pc, #84]	@ (80012fc <ProgramPageSpecial+0x274>)
 80012a8:	f003 fd68 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80012ac:	4813      	ldr	r0, [pc, #76]	@ (80012fc <ProgramPageSpecial+0x274>)
 80012ae:	f7fe ff97 	bl	80001e0 <strlen>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b29a      	uxth	r2, r3
 80012b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ba:	4910      	ldr	r1, [pc, #64]	@ (80012fc <ProgramPageSpecial+0x274>)
 80012bc:	4810      	ldr	r0, [pc, #64]	@ (8001300 <ProgramPageSpecial+0x278>)
 80012be:	f002 fb49 	bl	8003954 <HAL_UART_Transmit>
 80012c2:	e012      	b.n	80012ea <ProgramPageSpecial+0x262>
		}
	  } else {
		sprintf(debugBuffer, "[%lu] UPLOAD: No response after programming\r\n", HAL_GetTick());
 80012c4:	f001 fae0 	bl	8002888 <HAL_GetTick>
 80012c8:	4603      	mov	r3, r0
 80012ca:	461a      	mov	r2, r3
 80012cc:	4913      	ldr	r1, [pc, #76]	@ (800131c <ProgramPageSpecial+0x294>)
 80012ce:	480b      	ldr	r0, [pc, #44]	@ (80012fc <ProgramPageSpecial+0x274>)
 80012d0:	f003 fd54 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80012d4:	4809      	ldr	r0, [pc, #36]	@ (80012fc <ProgramPageSpecial+0x274>)
 80012d6:	f7fe ff83 	bl	80001e0 <strlen>
 80012da:	4603      	mov	r3, r0
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e2:	4906      	ldr	r1, [pc, #24]	@ (80012fc <ProgramPageSpecial+0x274>)
 80012e4:	4806      	ldr	r0, [pc, #24]	@ (8001300 <ProgramPageSpecial+0x278>)
 80012e6:	f002 fb35 	bl	8003954 <HAL_UART_Transmit>
	  }

	  return success;
 80012ea:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
	}
 80012ee:	4618      	mov	r0, r3
 80012f0:	37a0      	adds	r7, #160	@ 0xa0
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	08005e34 	.word	0x08005e34
 80012fc:	20000178 	.word	0x20000178
 8001300:	20008520 	.word	0x20008520
 8001304:	20008490 	.word	0x20008490
 8001308:	08005e78 	.word	0x08005e78
 800130c:	08005eb0 	.word	0x08005eb0
 8001310:	08005ed8 	.word	0x08005ed8
 8001314:	08005f0c 	.word	0x08005f0c
 8001318:	08005f34 	.word	0x08005f34
 800131c:	08005f6c 	.word	0x08005f6c

08001320 <EraseChip>:
	/**
	  * @brief  Erase chip
	  * @retval true if successful
	  */
	bool EraseChip(void)
	{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af02      	add	r7, sp, #8
	  sprintf(debugBuffer, "[%lu] UPLOAD: Erasing chip\r\n", HAL_GetTick());
 8001326:	f001 faaf 	bl	8002888 <HAL_GetTick>
 800132a:	4603      	mov	r3, r0
 800132c:	461a      	mov	r2, r3
 800132e:	490d      	ldr	r1, [pc, #52]	@ (8001364 <EraseChip+0x44>)
 8001330:	480d      	ldr	r0, [pc, #52]	@ (8001368 <EraseChip+0x48>)
 8001332:	f003 fd23 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001336:	480c      	ldr	r0, [pc, #48]	@ (8001368 <EraseChip+0x48>)
 8001338:	f7fe ff52 	bl	80001e0 <strlen>
 800133c:	4603      	mov	r3, r0
 800133e:	b29a      	uxth	r2, r3
 8001340:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001344:	4908      	ldr	r1, [pc, #32]	@ (8001368 <EraseChip+0x48>)
 8001346:	4809      	ldr	r0, [pc, #36]	@ (800136c <EraseChip+0x4c>)
 8001348:	f002 fb04 	bl	8003954 <HAL_UART_Transmit>

	  return SendCommandAndWaitForSync(STK_CHIP_ERASE, NULL, 0, NULL, 0);
 800134c:	2300      	movs	r3, #0
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2300      	movs	r3, #0
 8001352:	2200      	movs	r2, #0
 8001354:	2100      	movs	r1, #0
 8001356:	2052      	movs	r0, #82	@ 0x52
 8001358:	f7ff fc0a 	bl	8000b70 <SendCommandAndWaitForSync>
 800135c:	4603      	mov	r3, r0
	}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	bd80      	pop	{r7, pc}
 8001364:	08005f9c 	.word	0x08005f9c
 8001368:	20000178 	.word	0x20000178
 800136c:	20008520 	.word	0x20008520

08001370 <VerifySignature>:
	/**
	  * @brief  Verify device signature
	  * @retval true if device is ATmega328P
	  */
	bool VerifySignature(void)
	{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af02      	add	r7, sp, #8
	  uint8_t response[3];

	  sprintf(debugBuffer, "[%lu] UPLOAD: Reading device signature\r\n", HAL_GetTick());
 8001376:	f001 fa87 	bl	8002888 <HAL_GetTick>
 800137a:	4603      	mov	r3, r0
 800137c:	461a      	mov	r2, r3
 800137e:	492d      	ldr	r1, [pc, #180]	@ (8001434 <VerifySignature+0xc4>)
 8001380:	482d      	ldr	r0, [pc, #180]	@ (8001438 <VerifySignature+0xc8>)
 8001382:	f003 fcfb 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001386:	482c      	ldr	r0, [pc, #176]	@ (8001438 <VerifySignature+0xc8>)
 8001388:	f7fe ff2a 	bl	80001e0 <strlen>
 800138c:	4603      	mov	r3, r0
 800138e:	b29a      	uxth	r2, r3
 8001390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001394:	4928      	ldr	r1, [pc, #160]	@ (8001438 <VerifySignature+0xc8>)
 8001396:	4829      	ldr	r0, [pc, #164]	@ (800143c <VerifySignature+0xcc>)
 8001398:	f002 fadc 	bl	8003954 <HAL_UART_Transmit>

	  if (!SendCommandAndWaitForSync(STK_READ_SIGN, NULL, 0, response, 3)) {
 800139c:	1d3b      	adds	r3, r7, #4
 800139e:	2203      	movs	r2, #3
 80013a0:	9200      	str	r2, [sp, #0]
 80013a2:	2200      	movs	r2, #0
 80013a4:	2100      	movs	r1, #0
 80013a6:	2075      	movs	r0, #117	@ 0x75
 80013a8:	f7ff fbe2 	bl	8000b70 <SendCommandAndWaitForSync>
 80013ac:	4603      	mov	r3, r0
 80013ae:	f083 0301 	eor.w	r3, r3, #1
 80013b2:	b2db      	uxtb	r3, r3
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <VerifySignature+0x4c>
		return false;
 80013b8:	2300      	movs	r3, #0
 80013ba:	e037      	b.n	800142c <VerifySignature+0xbc>
	  }

	  // ATmega328P signature is 0x1E 0x95 0x0F
	  if (response[0] == 0x1E && response[1] == 0x95 && response[2] == 0x0F) {
 80013bc:	793b      	ldrb	r3, [r7, #4]
 80013be:	2b1e      	cmp	r3, #30
 80013c0:	d11a      	bne.n	80013f8 <VerifySignature+0x88>
 80013c2:	797b      	ldrb	r3, [r7, #5]
 80013c4:	2b95      	cmp	r3, #149	@ 0x95
 80013c6:	d117      	bne.n	80013f8 <VerifySignature+0x88>
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	2b0f      	cmp	r3, #15
 80013cc:	d114      	bne.n	80013f8 <VerifySignature+0x88>
		sprintf(debugBuffer, "[%lu] UPLOAD: Signature verified: ATmega328P\r\n", HAL_GetTick());
 80013ce:	f001 fa5b 	bl	8002888 <HAL_GetTick>
 80013d2:	4603      	mov	r3, r0
 80013d4:	461a      	mov	r2, r3
 80013d6:	491a      	ldr	r1, [pc, #104]	@ (8001440 <VerifySignature+0xd0>)
 80013d8:	4817      	ldr	r0, [pc, #92]	@ (8001438 <VerifySignature+0xc8>)
 80013da:	f003 fccf 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80013de:	4816      	ldr	r0, [pc, #88]	@ (8001438 <VerifySignature+0xc8>)
 80013e0:	f7fe fefe 	bl	80001e0 <strlen>
 80013e4:	4603      	mov	r3, r0
 80013e6:	b29a      	uxth	r2, r3
 80013e8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ec:	4912      	ldr	r1, [pc, #72]	@ (8001438 <VerifySignature+0xc8>)
 80013ee:	4813      	ldr	r0, [pc, #76]	@ (800143c <VerifySignature+0xcc>)
 80013f0:	f002 fab0 	bl	8003954 <HAL_UART_Transmit>
		return true;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e019      	b.n	800142c <VerifySignature+0xbc>
	  } else {
		sprintf(debugBuffer, "[%lu] UPLOAD: Unexpected signature: 0x%02X 0x%02X 0x%02X\r\n",
 80013f8:	f001 fa46 	bl	8002888 <HAL_GetTick>
 80013fc:	4602      	mov	r2, r0
				HAL_GetTick(), response[0], response[1], response[2]);
 80013fe:	793b      	ldrb	r3, [r7, #4]
		sprintf(debugBuffer, "[%lu] UPLOAD: Unexpected signature: 0x%02X 0x%02X 0x%02X\r\n",
 8001400:	4618      	mov	r0, r3
				HAL_GetTick(), response[0], response[1], response[2]);
 8001402:	797b      	ldrb	r3, [r7, #5]
 8001404:	79b9      	ldrb	r1, [r7, #6]
		sprintf(debugBuffer, "[%lu] UPLOAD: Unexpected signature: 0x%02X 0x%02X 0x%02X\r\n",
 8001406:	9101      	str	r1, [sp, #4]
 8001408:	9300      	str	r3, [sp, #0]
 800140a:	4603      	mov	r3, r0
 800140c:	490d      	ldr	r1, [pc, #52]	@ (8001444 <VerifySignature+0xd4>)
 800140e:	480a      	ldr	r0, [pc, #40]	@ (8001438 <VerifySignature+0xc8>)
 8001410:	f003 fcb4 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001414:	4808      	ldr	r0, [pc, #32]	@ (8001438 <VerifySignature+0xc8>)
 8001416:	f7fe fee3 	bl	80001e0 <strlen>
 800141a:	4603      	mov	r3, r0
 800141c:	b29a      	uxth	r2, r3
 800141e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001422:	4905      	ldr	r1, [pc, #20]	@ (8001438 <VerifySignature+0xc8>)
 8001424:	4805      	ldr	r0, [pc, #20]	@ (800143c <VerifySignature+0xcc>)
 8001426:	f002 fa95 	bl	8003954 <HAL_UART_Transmit>
		return false;
 800142a:	2300      	movs	r3, #0
	  }
	}
 800142c:	4618      	mov	r0, r3
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	08005fbc 	.word	0x08005fbc
 8001438:	20000178 	.word	0x20000178
 800143c:	20008520 	.word	0x20008520
 8001440:	08005fe8 	.word	0x08005fe8
 8001444:	08006018 	.word	0x08006018

08001448 <UploadHexFile>:
	/**
	  * @brief  Upload the hex file to Arduino
	  * @retval true if upload successful
	  */
	bool UploadHexFile(void)
	{
 8001448:	b5b0      	push	{r4, r5, r7, lr}
 800144a:	f5ad 5d04 	sub.w	sp, sp, #8448	@ 0x2100
 800144e:	b086      	sub	sp, #24
 8001450:	af04      	add	r7, sp, #16
	  bool success = false;
 8001452:	2300      	movs	r3, #0
 8001454:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001458:	f102 0207 	add.w	r2, r2, #7
 800145c:	7013      	strb	r3, [r2, #0]
	  uint8_t preparedPages[MAX_PAGES][FLASH_PAGE_SIZE];
	  uint16_t pageSizes[MAX_PAGES];
	  uint16_t pageAddresses[MAX_PAGES];

	  // Pre-process hex file first
	  uint16_t totalPages = PrepareHexFilePages(preparedPages, pageSizes, pageAddresses, MAX_PAGES);
 800145e:	f107 0208 	add.w	r2, r7, #8
 8001462:	3a08      	subs	r2, #8
 8001464:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8001468:	3908      	subs	r1, #8
 800146a:	f507 7084 	add.w	r0, r7, #264	@ 0x108
 800146e:	3808      	subs	r0, #8
 8001470:	2340      	movs	r3, #64	@ 0x40
 8001472:	f000 fe33 	bl	80020dc <PrepareHexFilePages>
 8001476:	4603      	mov	r3, r0
 8001478:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800147c:	f102 0202 	add.w	r2, r2, #2
 8001480:	8013      	strh	r3, [r2, #0]

	  if (totalPages == 0) {
 8001482:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001486:	f103 0302 	add.w	r3, r3, #2
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	2b00      	cmp	r3, #0
 800148e:	d114      	bne.n	80014ba <UploadHexFile+0x72>
		sprintf(debugBuffer, "[%lu] UPLOAD: No valid pages to upload\r\n", HAL_GetTick());
 8001490:	f001 f9fa 	bl	8002888 <HAL_GetTick>
 8001494:	4603      	mov	r3, r0
 8001496:	461a      	mov	r2, r3
 8001498:	49c4      	ldr	r1, [pc, #784]	@ (80017ac <UploadHexFile+0x364>)
 800149a:	48c5      	ldr	r0, [pc, #788]	@ (80017b0 <UploadHexFile+0x368>)
 800149c:	f003 fc6e 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80014a0:	48c3      	ldr	r0, [pc, #780]	@ (80017b0 <UploadHexFile+0x368>)
 80014a2:	f7fe fe9d 	bl	80001e0 <strlen>
 80014a6:	4603      	mov	r3, r0
 80014a8:	b29a      	uxth	r2, r3
 80014aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014ae:	49c0      	ldr	r1, [pc, #768]	@ (80017b0 <UploadHexFile+0x368>)
 80014b0:	48c0      	ldr	r0, [pc, #768]	@ (80017b4 <UploadHexFile+0x36c>)
 80014b2:	f002 fa4f 	bl	8003954 <HAL_UART_Transmit>
		return false;
 80014b6:	2300      	movs	r3, #0
 80014b8:	e1f0      	b.n	800189c <UploadHexFile+0x454>
	  }

	  // Now perform the actual upload
	  sprintf(debugBuffer, "[%lu] UPLOAD: Starting upload of %d pages\r\n", HAL_GetTick(), totalPages);
 80014ba:	f001 f9e5 	bl	8002888 <HAL_GetTick>
 80014be:	4602      	mov	r2, r0
 80014c0:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80014c4:	f103 0302 	add.w	r3, r3, #2
 80014c8:	881b      	ldrh	r3, [r3, #0]
 80014ca:	49bb      	ldr	r1, [pc, #748]	@ (80017b8 <UploadHexFile+0x370>)
 80014cc:	48b8      	ldr	r0, [pc, #736]	@ (80017b0 <UploadHexFile+0x368>)
 80014ce:	f003 fc55 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80014d2:	48b7      	ldr	r0, [pc, #732]	@ (80017b0 <UploadHexFile+0x368>)
 80014d4:	f7fe fe84 	bl	80001e0 <strlen>
 80014d8:	4603      	mov	r3, r0
 80014da:	b29a      	uxth	r2, r3
 80014dc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80014e0:	49b3      	ldr	r1, [pc, #716]	@ (80017b0 <UploadHexFile+0x368>)
 80014e2:	48b4      	ldr	r0, [pc, #720]	@ (80017b4 <UploadHexFile+0x36c>)
 80014e4:	f002 fa36 	bl	8003954 <HAL_UART_Transmit>

	  // Reset Arduino and establish sync
	  if (!ResetAndSyncArduino(MAX_RESET_ATTEMPTS)) {
 80014e8:	2005      	movs	r0, #5
 80014ea:	f7ff faad 	bl	8000a48 <ResetAndSyncArduino>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f083 0301 	eor.w	r3, r3, #1
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d014      	beq.n	8001524 <UploadHexFile+0xdc>
		sprintf(debugBuffer, "[%lu] UPLOAD: Failed to sync with Arduino\r\n", HAL_GetTick());
 80014fa:	f001 f9c5 	bl	8002888 <HAL_GetTick>
 80014fe:	4603      	mov	r3, r0
 8001500:	461a      	mov	r2, r3
 8001502:	49ae      	ldr	r1, [pc, #696]	@ (80017bc <UploadHexFile+0x374>)
 8001504:	48aa      	ldr	r0, [pc, #680]	@ (80017b0 <UploadHexFile+0x368>)
 8001506:	f003 fc39 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800150a:	48a9      	ldr	r0, [pc, #676]	@ (80017b0 <UploadHexFile+0x368>)
 800150c:	f7fe fe68 	bl	80001e0 <strlen>
 8001510:	4603      	mov	r3, r0
 8001512:	b29a      	uxth	r2, r3
 8001514:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001518:	49a5      	ldr	r1, [pc, #660]	@ (80017b0 <UploadHexFile+0x368>)
 800151a:	48a6      	ldr	r0, [pc, #664]	@ (80017b4 <UploadHexFile+0x36c>)
 800151c:	f002 fa1a 	bl	8003954 <HAL_UART_Transmit>
		return false;
 8001520:	2300      	movs	r3, #0
 8001522:	e1bb      	b.n	800189c <UploadHexFile+0x454>
	  }

	  // Verify device signature
	  if (!VerifySignature()) {
 8001524:	f7ff ff24 	bl	8001370 <VerifySignature>
 8001528:	4603      	mov	r3, r0
 800152a:	f083 0301 	eor.w	r3, r3, #1
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <UploadHexFile+0xf0>
		return false;
 8001534:	2300      	movs	r3, #0
 8001536:	e1b1      	b.n	800189c <UploadHexFile+0x454>
	  }

	  // Enter programming mode
	  if (!EnterProgrammingMode()) {
 8001538:	f7ff fce8 	bl	8000f0c <EnterProgrammingMode>
 800153c:	4603      	mov	r3, r0
 800153e:	f083 0301 	eor.w	r3, r3, #1
 8001542:	b2db      	uxtb	r3, r3
 8001544:	2b00      	cmp	r3, #0
 8001546:	d014      	beq.n	8001572 <UploadHexFile+0x12a>
		sprintf(debugBuffer, "[%lu] UPLOAD: Failed to enter programming mode\r\n", HAL_GetTick());
 8001548:	f001 f99e 	bl	8002888 <HAL_GetTick>
 800154c:	4603      	mov	r3, r0
 800154e:	461a      	mov	r2, r3
 8001550:	499b      	ldr	r1, [pc, #620]	@ (80017c0 <UploadHexFile+0x378>)
 8001552:	4897      	ldr	r0, [pc, #604]	@ (80017b0 <UploadHexFile+0x368>)
 8001554:	f003 fc12 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001558:	4895      	ldr	r0, [pc, #596]	@ (80017b0 <UploadHexFile+0x368>)
 800155a:	f7fe fe41 	bl	80001e0 <strlen>
 800155e:	4603      	mov	r3, r0
 8001560:	b29a      	uxth	r2, r3
 8001562:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001566:	4992      	ldr	r1, [pc, #584]	@ (80017b0 <UploadHexFile+0x368>)
 8001568:	4892      	ldr	r0, [pc, #584]	@ (80017b4 <UploadHexFile+0x36c>)
 800156a:	f002 f9f3 	bl	8003954 <HAL_UART_Transmit>
		return false;
 800156e:	2300      	movs	r3, #0
 8001570:	e194      	b.n	800189c <UploadHexFile+0x454>
	  }

	  // Erase the chip
	  if (!EraseChip()) {
 8001572:	f7ff fed5 	bl	8001320 <EraseChip>
 8001576:	4603      	mov	r3, r0
 8001578:	f083 0301 	eor.w	r3, r3, #1
 800157c:	b2db      	uxtb	r3, r3
 800157e:	2b00      	cmp	r3, #0
 8001580:	d016      	beq.n	80015b0 <UploadHexFile+0x168>
		sprintf(debugBuffer, "[%lu] UPLOAD: Failed to erase chip\r\n", HAL_GetTick());
 8001582:	f001 f981 	bl	8002888 <HAL_GetTick>
 8001586:	4603      	mov	r3, r0
 8001588:	461a      	mov	r2, r3
 800158a:	498e      	ldr	r1, [pc, #568]	@ (80017c4 <UploadHexFile+0x37c>)
 800158c:	4888      	ldr	r0, [pc, #544]	@ (80017b0 <UploadHexFile+0x368>)
 800158e:	f003 fbf5 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001592:	4887      	ldr	r0, [pc, #540]	@ (80017b0 <UploadHexFile+0x368>)
 8001594:	f7fe fe24 	bl	80001e0 <strlen>
 8001598:	4603      	mov	r3, r0
 800159a:	b29a      	uxth	r2, r3
 800159c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015a0:	4983      	ldr	r1, [pc, #524]	@ (80017b0 <UploadHexFile+0x368>)
 80015a2:	4884      	ldr	r0, [pc, #528]	@ (80017b4 <UploadHexFile+0x36c>)
 80015a4:	f002 f9d6 	bl	8003954 <HAL_UART_Transmit>
		LeaveProgrammingMode(); // Try to exit gracefully
 80015a8:	f7ff fd0a 	bl	8000fc0 <LeaveProgrammingMode>
		return false;
 80015ac:	2300      	movs	r3, #0
 80015ae:	e175      	b.n	800189c <UploadHexFile+0x454>
	  }

	  // Upload all prepared pages
	  uint16_t i;
	  for (i = 0; i < totalPages; i++) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80015b6:	f102 0204 	add.w	r2, r2, #4
 80015ba:	8013      	strh	r3, [r2, #0]
 80015bc:	e0c2      	b.n	8001744 <UploadHexFile+0x2fc>
		// Load address for this page
		if (!LoadAddress(pageAddresses[i])) {
 80015be:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80015c2:	f103 0304 	add.w	r3, r3, #4
 80015c6:	881a      	ldrh	r2, [r3, #0]
 80015c8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015cc:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015d0:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80015d4:	4618      	mov	r0, r3
 80015d6:	f7ff fd1b 	bl	8001010 <LoadAddress>
 80015da:	4603      	mov	r3, r0
 80015dc:	f083 0301 	eor.w	r3, r3, #1
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d01e      	beq.n	8001624 <UploadHexFile+0x1dc>
		  sprintf(debugBuffer, "[%lu] UPLOAD: Failed to load address 0x%04X\r\n",
 80015e6:	f001 f94f 	bl	8002888 <HAL_GetTick>
 80015ea:	4601      	mov	r1, r0
				  HAL_GetTick(), pageAddresses[i]);
 80015ec:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80015f0:	f103 0304 	add.w	r3, r3, #4
 80015f4:	881a      	ldrh	r2, [r3, #0]
 80015f6:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80015fa:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80015fe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		  sprintf(debugBuffer, "[%lu] UPLOAD: Failed to load address 0x%04X\r\n",
 8001602:	460a      	mov	r2, r1
 8001604:	4970      	ldr	r1, [pc, #448]	@ (80017c8 <UploadHexFile+0x380>)
 8001606:	486a      	ldr	r0, [pc, #424]	@ (80017b0 <UploadHexFile+0x368>)
 8001608:	f003 fbb8 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800160c:	4868      	ldr	r0, [pc, #416]	@ (80017b0 <UploadHexFile+0x368>)
 800160e:	f7fe fde7 	bl	80001e0 <strlen>
 8001612:	4603      	mov	r3, r0
 8001614:	b29a      	uxth	r2, r3
 8001616:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161a:	4965      	ldr	r1, [pc, #404]	@ (80017b0 <UploadHexFile+0x368>)
 800161c:	4865      	ldr	r0, [pc, #404]	@ (80017b4 <UploadHexFile+0x36c>)
 800161e:	f002 f999 	bl	8003954 <HAL_UART_Transmit>
		  break;
 8001622:	e09c      	b.n	800175e <UploadHexFile+0x316>
		}

		// Program the page using the special method for better timing
		if (!ProgramPageSpecial(preparedPages[i], pageSizes[i], 'F')) {
 8001624:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001628:	f103 0304 	add.w	r3, r3, #4
 800162c:	881a      	ldrh	r2, [r3, #0]
 800162e:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001632:	3b08      	subs	r3, #8
 8001634:	01d2      	lsls	r2, r2, #7
 8001636:	1898      	adds	r0, r3, r2
 8001638:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800163c:	f103 0304 	add.w	r3, r3, #4
 8001640:	881b      	ldrh	r3, [r3, #0]
 8001642:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001646:	005b      	lsls	r3, r3, #1
 8001648:	4413      	add	r3, r2
 800164a:	f833 3c88 	ldrh.w	r3, [r3, #-136]
 800164e:	2246      	movs	r2, #70	@ 0x46
 8001650:	4619      	mov	r1, r3
 8001652:	f7ff fd19 	bl	8001088 <ProgramPageSpecial>
 8001656:	4603      	mov	r3, r0
 8001658:	f083 0301 	eor.w	r3, r3, #1
 800165c:	b2db      	uxtb	r3, r3
 800165e:	2b00      	cmp	r3, #0
 8001660:	d01e      	beq.n	80016a0 <UploadHexFile+0x258>
		  sprintf(debugBuffer, "[%lu] UPLOAD: Failed to program page at 0x%04X\r\n",
 8001662:	f001 f911 	bl	8002888 <HAL_GetTick>
 8001666:	4601      	mov	r1, r0
				  HAL_GetTick(), pageAddresses[i]);
 8001668:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800166c:	f103 0304 	add.w	r3, r3, #4
 8001670:	881a      	ldrh	r2, [r3, #0]
 8001672:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001676:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 800167a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
		  sprintf(debugBuffer, "[%lu] UPLOAD: Failed to program page at 0x%04X\r\n",
 800167e:	460a      	mov	r2, r1
 8001680:	4952      	ldr	r1, [pc, #328]	@ (80017cc <UploadHexFile+0x384>)
 8001682:	484b      	ldr	r0, [pc, #300]	@ (80017b0 <UploadHexFile+0x368>)
 8001684:	f003 fb7a 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001688:	4849      	ldr	r0, [pc, #292]	@ (80017b0 <UploadHexFile+0x368>)
 800168a:	f7fe fda9 	bl	80001e0 <strlen>
 800168e:	4603      	mov	r3, r0
 8001690:	b29a      	uxth	r2, r3
 8001692:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001696:	4946      	ldr	r1, [pc, #280]	@ (80017b0 <UploadHexFile+0x368>)
 8001698:	4846      	ldr	r0, [pc, #280]	@ (80017b4 <UploadHexFile+0x36c>)
 800169a:	f002 f95b 	bl	8003954 <HAL_UART_Transmit>
		  break;
 800169e:	e05e      	b.n	800175e <UploadHexFile+0x316>
		}

		// Print progress
		uint8_t percent = ((i + 1) * 100) / totalPages;
 80016a0:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80016a4:	f103 0304 	add.w	r3, r3, #4
 80016a8:	881b      	ldrh	r3, [r3, #0]
 80016aa:	3301      	adds	r3, #1
 80016ac:	2264      	movs	r2, #100	@ 0x64
 80016ae:	fb03 f202 	mul.w	r2, r3, r2
 80016b2:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80016b6:	f103 0302 	add.w	r3, r3, #2
 80016ba:	881b      	ldrh	r3, [r3, #0]
 80016bc:	fb92 f3f3 	sdiv	r3, r2, r3
 80016c0:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80016c4:	f102 0201 	add.w	r2, r2, #1
 80016c8:	7013      	strb	r3, [r2, #0]
		sprintf(debugBuffer, "[%lu] UPLOAD: Progress %d%% - Programmed page %d/%d at 0x%04X\r\n",
 80016ca:	f001 f8dd 	bl	8002888 <HAL_GetTick>
 80016ce:	4605      	mov	r5, r0
 80016d0:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80016d4:	f103 0301 	add.w	r3, r3, #1
 80016d8:	781c      	ldrb	r4, [r3, #0]
 80016da:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80016de:	f103 0304 	add.w	r3, r3, #4
 80016e2:	881b      	ldrh	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80016ea:	f102 0202 	add.w	r2, r2, #2
 80016ee:	8812      	ldrh	r2, [r2, #0]
				HAL_GetTick(), percent, i+1, totalPages, pageAddresses[i]);
 80016f0:	f507 5104 	add.w	r1, r7, #8448	@ 0x2100
 80016f4:	f101 0104 	add.w	r1, r1, #4
 80016f8:	8808      	ldrh	r0, [r1, #0]
 80016fa:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 80016fe:	f5a1 7184 	sub.w	r1, r1, #264	@ 0x108
 8001702:	f831 1010 	ldrh.w	r1, [r1, r0, lsl #1]
		sprintf(debugBuffer, "[%lu] UPLOAD: Progress %d%% - Programmed page %d/%d at 0x%04X\r\n",
 8001706:	9102      	str	r1, [sp, #8]
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4623      	mov	r3, r4
 800170e:	462a      	mov	r2, r5
 8001710:	492f      	ldr	r1, [pc, #188]	@ (80017d0 <UploadHexFile+0x388>)
 8001712:	4827      	ldr	r0, [pc, #156]	@ (80017b0 <UploadHexFile+0x368>)
 8001714:	f003 fb32 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001718:	4825      	ldr	r0, [pc, #148]	@ (80017b0 <UploadHexFile+0x368>)
 800171a:	f7fe fd61 	bl	80001e0 <strlen>
 800171e:	4603      	mov	r3, r0
 8001720:	b29a      	uxth	r2, r3
 8001722:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001726:	4922      	ldr	r1, [pc, #136]	@ (80017b0 <UploadHexFile+0x368>)
 8001728:	4822      	ldr	r0, [pc, #136]	@ (80017b4 <UploadHexFile+0x36c>)
 800172a:	f002 f913 	bl	8003954 <HAL_UART_Transmit>
	  for (i = 0; i < totalPages; i++) {
 800172e:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001732:	f103 0304 	add.w	r3, r3, #4
 8001736:	881b      	ldrh	r3, [r3, #0]
 8001738:	3301      	adds	r3, #1
 800173a:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 800173e:	f102 0204 	add.w	r2, r2, #4
 8001742:	8013      	strh	r3, [r2, #0]
 8001744:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001748:	f103 0304 	add.w	r3, r3, #4
 800174c:	881a      	ldrh	r2, [r3, #0]
 800174e:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001752:	f103 0302 	add.w	r3, r3, #2
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	429a      	cmp	r2, r3
 800175a:	f4ff af30 	bcc.w	80015be <UploadHexFile+0x176>
	  }

	  // Check if upload was complete
	  if (i == totalPages) {
 800175e:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001762:	f103 0304 	add.w	r3, r3, #4
 8001766:	881a      	ldrh	r2, [r3, #0]
 8001768:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800176c:	f103 0302 	add.w	r3, r3, #2
 8001770:	881b      	ldrh	r3, [r3, #0]
 8001772:	429a      	cmp	r2, r3
 8001774:	d130      	bne.n	80017d8 <UploadHexFile+0x390>
		sprintf(debugBuffer, "[%lu] UPLOAD: Hex file upload complete\r\n", HAL_GetTick());
 8001776:	f001 f887 	bl	8002888 <HAL_GetTick>
 800177a:	4603      	mov	r3, r0
 800177c:	461a      	mov	r2, r3
 800177e:	4915      	ldr	r1, [pc, #84]	@ (80017d4 <UploadHexFile+0x38c>)
 8001780:	480b      	ldr	r0, [pc, #44]	@ (80017b0 <UploadHexFile+0x368>)
 8001782:	f003 fafb 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001786:	480a      	ldr	r0, [pc, #40]	@ (80017b0 <UploadHexFile+0x368>)
 8001788:	f7fe fd2a 	bl	80001e0 <strlen>
 800178c:	4603      	mov	r3, r0
 800178e:	b29a      	uxth	r2, r3
 8001790:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001794:	4906      	ldr	r1, [pc, #24]	@ (80017b0 <UploadHexFile+0x368>)
 8001796:	4807      	ldr	r0, [pc, #28]	@ (80017b4 <UploadHexFile+0x36c>)
 8001798:	f002 f8dc 	bl	8003954 <HAL_UART_Transmit>
		success = true;
 800179c:	2301      	movs	r3, #1
 800179e:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 80017a2:	f102 0207 	add.w	r2, r2, #7
 80017a6:	7013      	strb	r3, [r2, #0]
 80017a8:	e036      	b.n	8001818 <UploadHexFile+0x3d0>
 80017aa:	bf00      	nop
 80017ac:	08006090 	.word	0x08006090
 80017b0:	20000178 	.word	0x20000178
 80017b4:	20008520 	.word	0x20008520
 80017b8:	080060bc 	.word	0x080060bc
 80017bc:	080060e8 	.word	0x080060e8
 80017c0:	08005cf0 	.word	0x08005cf0
 80017c4:	08006114 	.word	0x08006114
 80017c8:	0800613c 	.word	0x0800613c
 80017cc:	0800616c 	.word	0x0800616c
 80017d0:	080061a0 	.word	0x080061a0
 80017d4:	080061e0 	.word	0x080061e0
	  } else {
		sprintf(debugBuffer, "[%lu] UPLOAD: Upload failed at page %d/%d\r\n",
 80017d8:	f001 f856 	bl	8002888 <HAL_GetTick>
 80017dc:	4601      	mov	r1, r0
 80017de:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80017e2:	f103 0304 	add.w	r3, r3, #4
 80017e6:	881b      	ldrh	r3, [r3, #0]
 80017e8:	1c5a      	adds	r2, r3, #1
 80017ea:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 80017ee:	f103 0302 	add.w	r3, r3, #2
 80017f2:	881b      	ldrh	r3, [r3, #0]
 80017f4:	9300      	str	r3, [sp, #0]
 80017f6:	4613      	mov	r3, r2
 80017f8:	460a      	mov	r2, r1
 80017fa:	492b      	ldr	r1, [pc, #172]	@ (80018a8 <UploadHexFile+0x460>)
 80017fc:	482b      	ldr	r0, [pc, #172]	@ (80018ac <UploadHexFile+0x464>)
 80017fe:	f003 fabd 	bl	8004d7c <siprintf>
				HAL_GetTick(), i+1, totalPages);
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001802:	482a      	ldr	r0, [pc, #168]	@ (80018ac <UploadHexFile+0x464>)
 8001804:	f7fe fcec 	bl	80001e0 <strlen>
 8001808:	4603      	mov	r3, r0
 800180a:	b29a      	uxth	r2, r3
 800180c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001810:	4926      	ldr	r1, [pc, #152]	@ (80018ac <UploadHexFile+0x464>)
 8001812:	4827      	ldr	r0, [pc, #156]	@ (80018b0 <UploadHexFile+0x468>)
 8001814:	f002 f89e 	bl	8003954 <HAL_UART_Transmit>
	  }

	  // Leave programming mode
	  if (!LeaveProgrammingMode()) {
 8001818:	f7ff fbd2 	bl	8000fc0 <LeaveProgrammingMode>
 800181c:	4603      	mov	r3, r0
 800181e:	f083 0301 	eor.w	r3, r3, #1
 8001822:	b2db      	uxtb	r3, r3
 8001824:	2b00      	cmp	r3, #0
 8001826:	d018      	beq.n	800185a <UploadHexFile+0x412>
		sprintf(debugBuffer, "[%lu] UPLOAD: Failed to leave programming mode\r\n", HAL_GetTick());
 8001828:	f001 f82e 	bl	8002888 <HAL_GetTick>
 800182c:	4603      	mov	r3, r0
 800182e:	461a      	mov	r2, r3
 8001830:	4920      	ldr	r1, [pc, #128]	@ (80018b4 <UploadHexFile+0x46c>)
 8001832:	481e      	ldr	r0, [pc, #120]	@ (80018ac <UploadHexFile+0x464>)
 8001834:	f003 faa2 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001838:	481c      	ldr	r0, [pc, #112]	@ (80018ac <UploadHexFile+0x464>)
 800183a:	f7fe fcd1 	bl	80001e0 <strlen>
 800183e:	4603      	mov	r3, r0
 8001840:	b29a      	uxth	r2, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001846:	4919      	ldr	r1, [pc, #100]	@ (80018ac <UploadHexFile+0x464>)
 8001848:	4819      	ldr	r0, [pc, #100]	@ (80018b0 <UploadHexFile+0x468>)
 800184a:	f002 f883 	bl	8003954 <HAL_UART_Transmit>
		success = false;
 800184e:	2300      	movs	r3, #0
 8001850:	f507 5204 	add.w	r2, r7, #8448	@ 0x2100
 8001854:	f102 0207 	add.w	r2, r2, #7
 8001858:	7013      	strb	r3, [r2, #0]
	  }

	  // Final reset to run the newly uploaded program
	  if (success) {
 800185a:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 800185e:	f103 0307 	add.w	r3, r3, #7
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	2b00      	cmp	r3, #0
 8001866:	d014      	beq.n	8001892 <UploadHexFile+0x44a>
		sprintf(debugBuffer, "[%lu] UPLOAD: Resetting Arduino to run new program\r\n", HAL_GetTick());
 8001868:	f001 f80e 	bl	8002888 <HAL_GetTick>
 800186c:	4603      	mov	r3, r0
 800186e:	461a      	mov	r2, r3
 8001870:	4911      	ldr	r1, [pc, #68]	@ (80018b8 <UploadHexFile+0x470>)
 8001872:	480e      	ldr	r0, [pc, #56]	@ (80018ac <UploadHexFile+0x464>)
 8001874:	f003 fa82 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001878:	480c      	ldr	r0, [pc, #48]	@ (80018ac <UploadHexFile+0x464>)
 800187a:	f7fe fcb1 	bl	80001e0 <strlen>
 800187e:	4603      	mov	r3, r0
 8001880:	b29a      	uxth	r2, r3
 8001882:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001886:	4909      	ldr	r1, [pc, #36]	@ (80018ac <UploadHexFile+0x464>)
 8001888:	4809      	ldr	r0, [pc, #36]	@ (80018b0 <UploadHexFile+0x468>)
 800188a:	f002 f863 	bl	8003954 <HAL_UART_Transmit>
		ResetArduino();
 800188e:	f7fe ff65 	bl	800075c <ResetArduino>
	  }

	  return success;
 8001892:	f507 5304 	add.w	r3, r7, #8448	@ 0x2100
 8001896:	f103 0307 	add.w	r3, r3, #7
 800189a:	781b      	ldrb	r3, [r3, #0]
	}
 800189c:	4618      	mov	r0, r3
 800189e:	f507 5704 	add.w	r7, r7, #8448	@ 0x2100
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bdb0      	pop	{r4, r5, r7, pc}
 80018a8:	0800620c 	.word	0x0800620c
 80018ac:	20000178 	.word	0x20000178
 80018b0:	20008520 	.word	0x20008520
 80018b4:	08006238 	.word	0x08006238
 80018b8:	0800626c 	.word	0x0800626c

080018bc <main>:
	/**
	  * @brief  The application entry point with wireless programming support
	  * @retval int
	  */
int main(void)
	{
 80018bc:	b580      	push	{r7, lr}
 80018be:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 80018c2:	af02      	add	r7, sp, #8
	  /* MCU Configuration--------------------------------------------------------*/
	  HAL_Init();
 80018c4:	f000 ff7a 	bl	80027bc <HAL_Init>
	  SystemClock_Config();
 80018c8:	f000 fd06 	bl	80022d8 <SystemClock_Config>

	  /* Initialize all configured peripherals */
	  MX_GPIO_Init();
 80018cc:	f7fe fe58 	bl	8000580 <MX_GPIO_Init>
	  MX_USART1_UART_Init();  // Arduino UART
 80018d0:	f000 fe12 	bl	80024f8 <MX_USART1_UART_Init>
	  MX_USART2_UART_Init();  // Bluetooth TX (to laptop)
 80018d4:	f000 fe3a 	bl	800254c <MX_USART2_UART_Init>
	  MX_USART6_UART_Init();  // Bluetooth RX (from laptop)
 80018d8:	f000 fe62 	bl	80025a0 <MX_USART6_UART_Init>
		STATE_RECEIVING_HEX,
		STATE_PROGRAMMING,
		STATE_PASSTHROUGH
	  } SystemState;

	  SystemState currentState = STATE_IDLE;
 80018dc:	2300      	movs	r3, #0
 80018de:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237

	  // Initialize Arduino reset pin to high (not in reset)
	  HAL_GPIO_WritePin(ARDUINO_RESET_PORT, ARDUINO_RESET_PIN, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	2110      	movs	r1, #16
 80018e6:	48ae      	ldr	r0, [pc, #696]	@ (8001ba0 <main+0x2e4>)
 80018e8:	f001 fb32 	bl	8002f50 <HAL_GPIO_WritePin>
	  HAL_Delay(500); // Initial delay to stabilize
 80018ec:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80018f0:	f000 ffd6 	bl	80028a0 <HAL_Delay>

	  // Send startup message via Bluetooth
	  sprintf(debugBuffer, "[%lu] SYSTEM: STM32 Wireless Arduino Programmer started\r\n", HAL_GetTick());
 80018f4:	f000 ffc8 	bl	8002888 <HAL_GetTick>
 80018f8:	4603      	mov	r3, r0
 80018fa:	461a      	mov	r2, r3
 80018fc:	49a9      	ldr	r1, [pc, #676]	@ (8001ba4 <main+0x2e8>)
 80018fe:	48aa      	ldr	r0, [pc, #680]	@ (8001ba8 <main+0x2ec>)
 8001900:	f003 fa3c 	bl	8004d7c <siprintf>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001904:	48a8      	ldr	r0, [pc, #672]	@ (8001ba8 <main+0x2ec>)
 8001906:	f7fe fc6b 	bl	80001e0 <strlen>
 800190a:	4603      	mov	r3, r0
 800190c:	b29a      	uxth	r2, r3
 800190e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001912:	49a5      	ldr	r1, [pc, #660]	@ (8001ba8 <main+0x2ec>)
 8001914:	48a5      	ldr	r0, [pc, #660]	@ (8001bac <main+0x2f0>)
 8001916:	f002 f81d 	bl	8003954 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"SYSTEM:READY", 12, UART_TIMEOUT);
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	220c      	movs	r2, #12
 8001920:	49a3      	ldr	r1, [pc, #652]	@ (8001bb0 <main+0x2f4>)
 8001922:	48a2      	ldr	r0, [pc, #648]	@ (8001bac <main+0x2f0>)
 8001924:	f002 f816 	bl	8003954 <HAL_UART_Transmit>

	  // Main loop
	  while (1) {
		// Check for commands from Bluetooth (UART6)
		uint8_t commandBuffer[32] = {0};
 8001928:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 800192c:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001930:	2200      	movs	r2, #0
 8001932:	601a      	str	r2, [r3, #0]
 8001934:	3304      	adds	r3, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
 8001940:	611a      	str	r2, [r3, #16]
 8001942:	615a      	str	r2, [r3, #20]
 8001944:	619a      	str	r2, [r3, #24]
		uint16_t cmdSize = 0;
 8001946:	2300      	movs	r3, #0
 8001948:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234

		// Try to receive a command byte
		if (HAL_UART_Receive(&huart6, &commandBuffer[0], 1, 10) == HAL_OK) {
 800194c:	4639      	mov	r1, r7
 800194e:	230a      	movs	r3, #10
 8001950:	2201      	movs	r2, #1
 8001952:	4896      	ldr	r0, [pc, #600]	@ (8001bac <main+0x2f0>)
 8001954:	f002 f889 	bl	8003a6a <HAL_UART_Receive>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	f040 8331 	bne.w	8001fc2 <main+0x706>
		  cmdSize = 1;
 8001960:	2301      	movs	r3, #1
 8001962:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234

		  // Try to receive more bytes that might be in the buffer (with short timeout)
		  while (cmdSize < sizeof(commandBuffer) - 1 &&
 8001966:	e004      	b.n	8001972 <main+0xb6>
				 HAL_UART_Receive(&huart6, &commandBuffer[cmdSize], 1, 5) == HAL_OK) {
			cmdSize++;
 8001968:	f8b7 3234 	ldrh.w	r3, [r7, #564]	@ 0x234
 800196c:	3301      	adds	r3, #1
 800196e:	f8a7 3234 	strh.w	r3, [r7, #564]	@ 0x234
		  while (cmdSize < sizeof(commandBuffer) - 1 &&
 8001972:	f8b7 3234 	ldrh.w	r3, [r7, #564]	@ 0x234
 8001976:	2b1e      	cmp	r3, #30
 8001978:	d80b      	bhi.n	8001992 <main+0xd6>
				 HAL_UART_Receive(&huart6, &commandBuffer[cmdSize], 1, 5) == HAL_OK) {
 800197a:	f8b7 3234 	ldrh.w	r3, [r7, #564]	@ 0x234
 800197e:	463a      	mov	r2, r7
 8001980:	18d1      	adds	r1, r2, r3
 8001982:	2305      	movs	r3, #5
 8001984:	2201      	movs	r2, #1
 8001986:	4889      	ldr	r0, [pc, #548]	@ (8001bac <main+0x2f0>)
 8001988:	f002 f86f 	bl	8003a6a <HAL_UART_Receive>
 800198c:	4603      	mov	r3, r0
		  while (cmdSize < sizeof(commandBuffer) - 1 &&
 800198e:	2b00      	cmp	r3, #0
 8001990:	d0ea      	beq.n	8001968 <main+0xac>
		  }

		  // Null-terminate the command
		  commandBuffer[cmdSize] = '\0';
 8001992:	f8b7 3234 	ldrh.w	r3, [r7, #564]	@ 0x234
 8001996:	f507 720e 	add.w	r2, r7, #568	@ 0x238
 800199a:	f5a2 720e 	sub.w	r2, r2, #568	@ 0x238
 800199e:	2100      	movs	r1, #0
 80019a0:	54d1      	strb	r1, [r2, r3]

		  // Log the received command
		  sprintf(debugBuffer, "[%lu] BT_CMD: Received command: %s\r\n", HAL_GetTick(), commandBuffer);
 80019a2:	f000 ff71 	bl	8002888 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	463b      	mov	r3, r7
 80019aa:	4982      	ldr	r1, [pc, #520]	@ (8001bb4 <main+0x2f8>)
 80019ac:	487e      	ldr	r0, [pc, #504]	@ (8001ba8 <main+0x2ec>)
 80019ae:	f003 f9e5 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 80019b2:	487d      	ldr	r0, [pc, #500]	@ (8001ba8 <main+0x2ec>)
 80019b4:	f7fe fc14 	bl	80001e0 <strlen>
 80019b8:	4603      	mov	r3, r0
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80019c0:	4979      	ldr	r1, [pc, #484]	@ (8001ba8 <main+0x2ec>)
 80019c2:	487a      	ldr	r0, [pc, #488]	@ (8001bac <main+0x2f0>)
 80019c4:	f001 ffc6 	bl	8003954 <HAL_UART_Transmit>

		  // Process commands based on current state
		  switch (currentState) {
 80019c8:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	f200 82f8 	bhi.w	8001fc2 <main+0x706>
 80019d2:	a201      	add	r2, pc, #4	@ (adr r2, 80019d8 <main+0x11c>)
 80019d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	08001bf5 	.word	0x08001bf5
 80019e0:	08001f2d 	.word	0x08001f2d
 80019e4:	08001f55 	.word	0x08001f55
			case STATE_IDLE:
			  // Check for signature request command
			  if (strncmp((char*)commandBuffer, "s", 1) == 0) {
 80019e8:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 80019ec:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 80019f0:	781a      	ldrb	r2, [r3, #0]
 80019f2:	4b71      	ldr	r3, [pc, #452]	@ (8001bb8 <main+0x2fc>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	1ad3      	subs	r3, r2, r3
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d173      	bne.n	8001ae4 <main+0x228>
				sprintf(debugBuffer, "[%lu] SYSTEM: Signature request received\r\n", HAL_GetTick());
 80019fc:	f000 ff44 	bl	8002888 <HAL_GetTick>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	496d      	ldr	r1, [pc, #436]	@ (8001bbc <main+0x300>)
 8001a06:	4868      	ldr	r0, [pc, #416]	@ (8001ba8 <main+0x2ec>)
 8001a08:	f003 f9b8 	bl	8004d7c <siprintf>
				HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001a0c:	4866      	ldr	r0, [pc, #408]	@ (8001ba8 <main+0x2ec>)
 8001a0e:	f7fe fbe7 	bl	80001e0 <strlen>
 8001a12:	4603      	mov	r3, r0
 8001a14:	b29a      	uxth	r2, r3
 8001a16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a1a:	4963      	ldr	r1, [pc, #396]	@ (8001ba8 <main+0x2ec>)
 8001a1c:	4863      	ldr	r0, [pc, #396]	@ (8001bac <main+0x2f0>)
 8001a1e:	f001 ff99 	bl	8003954 <HAL_UART_Transmit>

				// Reset Arduino and establish sync
				if (ResetAndSyncArduino(MAX_RESET_ATTEMPTS)) {
 8001a22:	2005      	movs	r0, #5
 8001a24:	f7ff f810 	bl	8000a48 <ResetAndSyncArduino>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d052      	beq.n	8001ad4 <main+0x218>
				  // Verify signature
				  uint8_t response[3];
				  bool success = SendCommandAndWaitForSync(STK_READ_SIGN, NULL, 0, response, 3);
 8001a2e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a32:	2203      	movs	r2, #3
 8001a34:	9200      	str	r2, [sp, #0]
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	2075      	movs	r0, #117	@ 0x75
 8001a3c:	f7ff f898 	bl	8000b70 <SendCommandAndWaitForSync>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f887 322d 	strb.w	r3, [r7, #557]	@ 0x22d

				  if (success) {
 8001a46:	f897 322d 	ldrb.w	r3, [r7, #557]	@ 0x22d
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d03a      	beq.n	8001ac4 <main+0x208>
					// Format signature response
					sprintf((char*)btTxBuffer, "SIG:%02X,%02X,%02X", response[0], response[1], response[2]);
 8001a4e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001a52:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001a56:	781b      	ldrb	r3, [r3, #0]
 8001a58:	461a      	mov	r2, r3
 8001a5a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001a5e:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001a62:	785b      	ldrb	r3, [r3, #1]
 8001a64:	4619      	mov	r1, r3
 8001a66:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001a6a:	f5a3 7304 	sub.w	r3, r3, #528	@ 0x210
 8001a6e:	789b      	ldrb	r3, [r3, #2]
 8001a70:	f107 002c 	add.w	r0, r7, #44	@ 0x2c
 8001a74:	9300      	str	r3, [sp, #0]
 8001a76:	460b      	mov	r3, r1
 8001a78:	4951      	ldr	r1, [pc, #324]	@ (8001bc0 <main+0x304>)
 8001a7a:	f003 f97f 	bl	8004d7c <siprintf>
					HAL_UART_Transmit(&UART_DEBUG, btTxBuffer, strlen((char*)btTxBuffer), UART_TIMEOUT);
 8001a7e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a82:	4618      	mov	r0, r3
 8001a84:	f7fe fbac 	bl	80001e0 <strlen>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	f107 012c 	add.w	r1, r7, #44	@ 0x2c
 8001a90:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a94:	4845      	ldr	r0, [pc, #276]	@ (8001bac <main+0x2f0>)
 8001a96:	f001 ff5d 	bl	8003954 <HAL_UART_Transmit>

					// Log signature
					sprintf(debugBuffer, "[%lu] SYSTEM: Signature sent: %s\r\n", HAL_GetTick(), btTxBuffer);
 8001a9a:	f000 fef5 	bl	8002888 <HAL_GetTick>
 8001a9e:	4602      	mov	r2, r0
 8001aa0:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001aa4:	4947      	ldr	r1, [pc, #284]	@ (8001bc4 <main+0x308>)
 8001aa6:	4840      	ldr	r0, [pc, #256]	@ (8001ba8 <main+0x2ec>)
 8001aa8:	f003 f968 	bl	8004d7c <siprintf>
					HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001aac:	483e      	ldr	r0, [pc, #248]	@ (8001ba8 <main+0x2ec>)
 8001aae:	f7fe fb97 	bl	80001e0 <strlen>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	b29a      	uxth	r2, r3
 8001ab6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001aba:	493b      	ldr	r1, [pc, #236]	@ (8001ba8 <main+0x2ec>)
 8001abc:	483b      	ldr	r0, [pc, #236]	@ (8001bac <main+0x2f0>)
 8001abe:	f001 ff49 	bl	8003954 <HAL_UART_Transmit>

				// Switch to passthrough state
				currentState = STATE_PASSTHROUGH;
				HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PASS:OK", 7, UART_TIMEOUT);
			  }
			  break;
 8001ac2:	e27b      	b.n	8001fbc <main+0x700>
					HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"SIG:FAIL", 8, UART_TIMEOUT);
 8001ac4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ac8:	2208      	movs	r2, #8
 8001aca:	493f      	ldr	r1, [pc, #252]	@ (8001bc8 <main+0x30c>)
 8001acc:	4837      	ldr	r0, [pc, #220]	@ (8001bac <main+0x2f0>)
 8001ace:	f001 ff41 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001ad2:	e273      	b.n	8001fbc <main+0x700>
				  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"SIG:NOSYNC", 10, UART_TIMEOUT);
 8001ad4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ad8:	220a      	movs	r2, #10
 8001ada:	493c      	ldr	r1, [pc, #240]	@ (8001bcc <main+0x310>)
 8001adc:	4833      	ldr	r0, [pc, #204]	@ (8001bac <main+0x2f0>)
 8001ade:	f001 ff39 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001ae2:	e26b      	b.n	8001fbc <main+0x700>
			  else if (strncmp((char*)commandBuffer, "p", 1) == 0) {
 8001ae4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001ae8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001aec:	781a      	ldrb	r2, [r3, #0]
 8001aee:	4b38      	ldr	r3, [pc, #224]	@ (8001bd0 <main+0x314>)
 8001af0:	781b      	ldrb	r3, [r3, #0]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d129      	bne.n	8001b4c <main+0x290>
				sprintf(debugBuffer, "[%lu] SYSTEM: Programming request received\r\n", HAL_GetTick());
 8001af8:	f000 fec6 	bl	8002888 <HAL_GetTick>
 8001afc:	4603      	mov	r3, r0
 8001afe:	461a      	mov	r2, r3
 8001b00:	4934      	ldr	r1, [pc, #208]	@ (8001bd4 <main+0x318>)
 8001b02:	4829      	ldr	r0, [pc, #164]	@ (8001ba8 <main+0x2ec>)
 8001b04:	f003 f93a 	bl	8004d7c <siprintf>
				HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001b08:	4827      	ldr	r0, [pc, #156]	@ (8001ba8 <main+0x2ec>)
 8001b0a:	f7fe fb69 	bl	80001e0 <strlen>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b16:	4924      	ldr	r1, [pc, #144]	@ (8001ba8 <main+0x2ec>)
 8001b18:	4824      	ldr	r0, [pc, #144]	@ (8001bac <main+0x2f0>)
 8001b1a:	f001 ff1b 	bl	8003954 <HAL_UART_Transmit>
				program_data_size = 0;
 8001b1e:	4b2e      	ldr	r3, [pc, #184]	@ (8001bd8 <main+0x31c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	601a      	str	r2, [r3, #0]
				memset(dynamic_program_data, 0xFF, sizeof(dynamic_program_data));
 8001b24:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001b28:	21ff      	movs	r1, #255	@ 0xff
 8001b2a:	482c      	ldr	r0, [pc, #176]	@ (8001bdc <main+0x320>)
 8001b2c:	f003 f946 	bl	8004dbc <memset>
				program_data_ptr = dynamic_program_data;
 8001b30:	4b2b      	ldr	r3, [pc, #172]	@ (8001be0 <main+0x324>)
 8001b32:	4a2a      	ldr	r2, [pc, #168]	@ (8001bdc <main+0x320>)
 8001b34:	601a      	str	r2, [r3, #0]
				currentState = STATE_RECEIVING_HEX;
 8001b36:	2301      	movs	r3, #1
 8001b38:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
				HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PROG:READY", 10, UART_TIMEOUT);
 8001b3c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b40:	220a      	movs	r2, #10
 8001b42:	4928      	ldr	r1, [pc, #160]	@ (8001be4 <main+0x328>)
 8001b44:	4819      	ldr	r0, [pc, #100]	@ (8001bac <main+0x2f0>)
 8001b46:	f001 ff05 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001b4a:	e237      	b.n	8001fbc <main+0x700>
			  else if (strncmp((char*)commandBuffer, "c", 1) == 0) {
 8001b4c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001b50:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001b54:	781a      	ldrb	r2, [r3, #0]
 8001b56:	4b24      	ldr	r3, [pc, #144]	@ (8001be8 <main+0x32c>)
 8001b58:	781b      	ldrb	r3, [r3, #0]
 8001b5a:	1ad3      	subs	r3, r2, r3
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f040 822d 	bne.w	8001fbc <main+0x700>
				sprintf(debugBuffer, "[%lu] SYSTEM: Entering passthrough mode\r\n", HAL_GetTick());
 8001b62:	f000 fe91 	bl	8002888 <HAL_GetTick>
 8001b66:	4603      	mov	r3, r0
 8001b68:	461a      	mov	r2, r3
 8001b6a:	4920      	ldr	r1, [pc, #128]	@ (8001bec <main+0x330>)
 8001b6c:	480e      	ldr	r0, [pc, #56]	@ (8001ba8 <main+0x2ec>)
 8001b6e:	f003 f905 	bl	8004d7c <siprintf>
				HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001b72:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <main+0x2ec>)
 8001b74:	f7fe fb34 	bl	80001e0 <strlen>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	b29a      	uxth	r2, r3
 8001b7c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b80:	4909      	ldr	r1, [pc, #36]	@ (8001ba8 <main+0x2ec>)
 8001b82:	480a      	ldr	r0, [pc, #40]	@ (8001bac <main+0x2f0>)
 8001b84:	f001 fee6 	bl	8003954 <HAL_UART_Transmit>
				currentState = STATE_PASSTHROUGH;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
				HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PASS:OK", 7, UART_TIMEOUT);
 8001b8e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001b92:	2207      	movs	r2, #7
 8001b94:	4916      	ldr	r1, [pc, #88]	@ (8001bf0 <main+0x334>)
 8001b96:	4805      	ldr	r0, [pc, #20]	@ (8001bac <main+0x2f0>)
 8001b98:	f001 fedc 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001b9c:	e20e      	b.n	8001fbc <main+0x700>
 8001b9e:	bf00      	nop
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	080062a4 	.word	0x080062a4
 8001ba8:	20000178 	.word	0x20000178
 8001bac:	20008520 	.word	0x20008520
 8001bb0:	080062e0 	.word	0x080062e0
 8001bb4:	080062f0 	.word	0x080062f0
 8001bb8:	08006318 	.word	0x08006318
 8001bbc:	0800631c 	.word	0x0800631c
 8001bc0:	08006348 	.word	0x08006348
 8001bc4:	0800635c 	.word	0x0800635c
 8001bc8:	08006380 	.word	0x08006380
 8001bcc:	0800638c 	.word	0x0800638c
 8001bd0:	08006398 	.word	0x08006398
 8001bd4:	0800639c 	.word	0x0800639c
 8001bd8:	20000484 	.word	0x20000484
 8001bdc:	20000488 	.word	0x20000488
 8001be0:	20000480 	.word	0x20000480
 8001be4:	080063cc 	.word	0x080063cc
 8001be8:	080063d8 	.word	0x080063d8
 8001bec:	080063dc 	.word	0x080063dc
 8001bf0:	08006408 	.word	0x08006408
			case STATE_RECEIVING_HEX:
			  // Check for end of hex transmission
			  if (strncmp((char*)commandBuffer, "e", 1) == 0) {
 8001bf4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001bf8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001bfc:	781a      	ldrb	r2, [r3, #0]
 8001bfe:	4bb5      	ldr	r3, [pc, #724]	@ (8001ed4 <main+0x618>)
 8001c00:	781b      	ldrb	r3, [r3, #0]
 8001c02:	1ad3      	subs	r3, r2, r3
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d165      	bne.n	8001cd4 <main+0x418>
			    sprintf(debugBuffer, "[%lu] SYSTEM: Hex file reception complete, size: %lu bytes\r\n",
 8001c08:	f000 fe3e 	bl	8002888 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	4bb2      	ldr	r3, [pc, #712]	@ (8001ed8 <main+0x61c>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	49b2      	ldr	r1, [pc, #712]	@ (8001edc <main+0x620>)
 8001c14:	48b2      	ldr	r0, [pc, #712]	@ (8001ee0 <main+0x624>)
 8001c16:	f003 f8b1 	bl	8004d7c <siprintf>
			            HAL_GetTick(), program_data_size);
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001c1a:	48b1      	ldr	r0, [pc, #708]	@ (8001ee0 <main+0x624>)
 8001c1c:	f7fe fae0 	bl	80001e0 <strlen>
 8001c20:	4603      	mov	r3, r0
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c28:	49ad      	ldr	r1, [pc, #692]	@ (8001ee0 <main+0x624>)
 8001c2a:	48ae      	ldr	r0, [pc, #696]	@ (8001ee4 <main+0x628>)
 8001c2c:	f001 fe92 	bl	8003954 <HAL_UART_Transmit>

			    // Switch to programming state
			    currentState = STATE_PROGRAMMING;
 8001c30:	2302      	movs	r3, #2
 8001c32:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PROG:START", 10, UART_TIMEOUT);
 8001c36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c3a:	220a      	movs	r2, #10
 8001c3c:	49aa      	ldr	r1, [pc, #680]	@ (8001ee8 <main+0x62c>)
 8001c3e:	48a9      	ldr	r0, [pc, #676]	@ (8001ee4 <main+0x628>)
 8001c40:	f001 fe88 	bl	8003954 <HAL_UART_Transmit>

			    // Execute the upload process
			    bool uploadResult = UploadHexFile();
 8001c44:	f7ff fc00 	bl	8001448 <UploadHexFile>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	f887 322e 	strb.w	r3, [r7, #558]	@ 0x22e

			    // Report status
			    if (uploadResult) {
 8001c4e:	f897 322e 	ldrb.w	r3, [r7, #558]	@ 0x22e
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d01a      	beq.n	8001c8c <main+0x3d0>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PROG:SUCCESS", 12, UART_TIMEOUT);
 8001c56:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c5a:	220c      	movs	r2, #12
 8001c5c:	49a3      	ldr	r1, [pc, #652]	@ (8001eec <main+0x630>)
 8001c5e:	48a1      	ldr	r0, [pc, #644]	@ (8001ee4 <main+0x628>)
 8001c60:	f001 fe78 	bl	8003954 <HAL_UART_Transmit>
			      sprintf(debugBuffer, "[%lu] SYSTEM: Upload successful - Arduino is now running the new program\r\n", HAL_GetTick());
 8001c64:	f000 fe10 	bl	8002888 <HAL_GetTick>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	49a0      	ldr	r1, [pc, #640]	@ (8001ef0 <main+0x634>)
 8001c6e:	489c      	ldr	r0, [pc, #624]	@ (8001ee0 <main+0x624>)
 8001c70:	f003 f884 	bl	8004d7c <siprintf>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001c74:	489a      	ldr	r0, [pc, #616]	@ (8001ee0 <main+0x624>)
 8001c76:	f7fe fab3 	bl	80001e0 <strlen>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c82:	4997      	ldr	r1, [pc, #604]	@ (8001ee0 <main+0x624>)
 8001c84:	4897      	ldr	r0, [pc, #604]	@ (8001ee4 <main+0x628>)
 8001c86:	f001 fe65 	bl	8003954 <HAL_UART_Transmit>
 8001c8a:	e019      	b.n	8001cc0 <main+0x404>
			    } else {
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PROG:FAIL", 9, UART_TIMEOUT);
 8001c8c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c90:	2209      	movs	r2, #9
 8001c92:	4998      	ldr	r1, [pc, #608]	@ (8001ef4 <main+0x638>)
 8001c94:	4893      	ldr	r0, [pc, #588]	@ (8001ee4 <main+0x628>)
 8001c96:	f001 fe5d 	bl	8003954 <HAL_UART_Transmit>
			      sprintf(debugBuffer, "[%lu] SYSTEM: Upload failed - Check connections and retry\r\n", HAL_GetTick());
 8001c9a:	f000 fdf5 	bl	8002888 <HAL_GetTick>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	4995      	ldr	r1, [pc, #596]	@ (8001ef8 <main+0x63c>)
 8001ca4:	488e      	ldr	r0, [pc, #568]	@ (8001ee0 <main+0x624>)
 8001ca6:	f003 f869 	bl	8004d7c <siprintf>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001caa:	488d      	ldr	r0, [pc, #564]	@ (8001ee0 <main+0x624>)
 8001cac:	f7fe fa98 	bl	80001e0 <strlen>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cb8:	4989      	ldr	r1, [pc, #548]	@ (8001ee0 <main+0x624>)
 8001cba:	488a      	ldr	r0, [pc, #552]	@ (8001ee4 <main+0x628>)
 8001cbc:	f001 fe4a 	bl	8003954 <HAL_UART_Transmit>
			    }

			    // Reset the program data pointer for safety
			    program_data_ptr = NULL;
 8001cc0:	4b8e      	ldr	r3, [pc, #568]	@ (8001efc <main+0x640>)
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
			    program_data_size = 0;
 8001cc6:	4b84      	ldr	r3, [pc, #528]	@ (8001ed8 <main+0x61c>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	601a      	str	r2, [r3, #0]

			    // Return to idle state
			    currentState = STATE_IDLE;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"HEX:CANCELLED", 13, UART_TIMEOUT);

			    sprintf(debugBuffer, "[%lu] SYSTEM: Hex file reception cancelled\r\n", HAL_GetTick());
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
			  }
			  break;
 8001cd2:	e175      	b.n	8001fc0 <main+0x704>
			  else if (strncmp((char*)commandBuffer, "h", 1) == 0) {
 8001cd4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001cd8:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	4b88      	ldr	r3, [pc, #544]	@ (8001f00 <main+0x644>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f040 80cd 	bne.w	8001e84 <main+0x5c8>
			    uint32_t expected_size = 0;
 8001cea:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001cee:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	601a      	str	r2, [r3, #0]
			    sprintf(debugBuffer, "[%lu] SYSTEM: Waiting for file size information\r\n", HAL_GetTick());
 8001cf6:	f000 fdc7 	bl	8002888 <HAL_GetTick>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	4981      	ldr	r1, [pc, #516]	@ (8001f04 <main+0x648>)
 8001d00:	4877      	ldr	r0, [pc, #476]	@ (8001ee0 <main+0x624>)
 8001d02:	f003 f83b 	bl	8004d7c <siprintf>
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001d06:	4876      	ldr	r0, [pc, #472]	@ (8001ee0 <main+0x624>)
 8001d08:	f7fe fa6a 	bl	80001e0 <strlen>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	b29a      	uxth	r2, r3
 8001d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d14:	4972      	ldr	r1, [pc, #456]	@ (8001ee0 <main+0x624>)
 8001d16:	4873      	ldr	r0, [pc, #460]	@ (8001ee4 <main+0x628>)
 8001d18:	f001 fe1c 	bl	8003954 <HAL_UART_Transmit>
			    if (HAL_UART_Receive(&huart6, (uint8_t*)&expected_size, 4, 1000) != HAL_OK) {
 8001d1c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001d20:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d24:	2204      	movs	r2, #4
 8001d26:	486f      	ldr	r0, [pc, #444]	@ (8001ee4 <main+0x628>)
 8001d28:	f001 fe9f 	bl	8003a6a <HAL_UART_Receive>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d013      	beq.n	8001d5a <main+0x49e>
			      sprintf(debugBuffer, "[%lu] SYSTEM: Failed to receive file size\r\n", HAL_GetTick());
 8001d32:	f000 fda9 	bl	8002888 <HAL_GetTick>
 8001d36:	4603      	mov	r3, r0
 8001d38:	461a      	mov	r2, r3
 8001d3a:	4973      	ldr	r1, [pc, #460]	@ (8001f08 <main+0x64c>)
 8001d3c:	4868      	ldr	r0, [pc, #416]	@ (8001ee0 <main+0x624>)
 8001d3e:	f003 f81d 	bl	8004d7c <siprintf>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001d42:	4867      	ldr	r0, [pc, #412]	@ (8001ee0 <main+0x624>)
 8001d44:	f7fe fa4c 	bl	80001e0 <strlen>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	b29a      	uxth	r2, r3
 8001d4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001d50:	4963      	ldr	r1, [pc, #396]	@ (8001ee0 <main+0x624>)
 8001d52:	4864      	ldr	r0, [pc, #400]	@ (8001ee4 <main+0x628>)
 8001d54:	f001 fdfe 	bl	8003954 <HAL_UART_Transmit>
			      return;
 8001d58:	e19e      	b.n	8002098 <main+0x7dc>
			    if (expected_size == 0 || expected_size > sizeof(dynamic_program_data)) {
 8001d5a:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001d5e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d007      	beq.n	8001d78 <main+0x4bc>
 8001d68:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001d6c:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001d76:	d91a      	bls.n	8001dae <main+0x4f2>
			      sprintf(debugBuffer, "[%lu] SYSTEM: Invalid file size: %lu bytes (max: %lu)\r\n",
 8001d78:	f000 fd86 	bl	8002888 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001d82:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d8c:	9100      	str	r1, [sp, #0]
 8001d8e:	495f      	ldr	r1, [pc, #380]	@ (8001f0c <main+0x650>)
 8001d90:	4853      	ldr	r0, [pc, #332]	@ (8001ee0 <main+0x624>)
 8001d92:	f002 fff3 	bl	8004d7c <siprintf>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001d96:	4852      	ldr	r0, [pc, #328]	@ (8001ee0 <main+0x624>)
 8001d98:	f7fe fa22 	bl	80001e0 <strlen>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	b29a      	uxth	r2, r3
 8001da0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001da4:	494e      	ldr	r1, [pc, #312]	@ (8001ee0 <main+0x624>)
 8001da6:	484f      	ldr	r0, [pc, #316]	@ (8001ee4 <main+0x628>)
 8001da8:	f001 fdd4 	bl	8003954 <HAL_UART_Transmit>
			      return;
 8001dac:	e174      	b.n	8002098 <main+0x7dc>
			    sprintf(debugBuffer, "[%lu] SYSTEM: Receiving %lu bytes of binary data...\r\n", HAL_GetTick(), expected_size);
 8001dae:	f000 fd6b 	bl	8002888 <HAL_GetTick>
 8001db2:	4602      	mov	r2, r0
 8001db4:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001db8:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4954      	ldr	r1, [pc, #336]	@ (8001f10 <main+0x654>)
 8001dc0:	4847      	ldr	r0, [pc, #284]	@ (8001ee0 <main+0x624>)
 8001dc2:	f002 ffdb 	bl	8004d7c <siprintf>
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001dc6:	4846      	ldr	r0, [pc, #280]	@ (8001ee0 <main+0x624>)
 8001dc8:	f7fe fa0a 	bl	80001e0 <strlen>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	b29a      	uxth	r2, r3
 8001dd0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001dd4:	4942      	ldr	r1, [pc, #264]	@ (8001ee0 <main+0x624>)
 8001dd6:	4843      	ldr	r0, [pc, #268]	@ (8001ee4 <main+0x628>)
 8001dd8:	f001 fdbc 	bl	8003954 <HAL_UART_Transmit>
			    uint32_t receive_timeout = expected_size * 10 + 2000;
 8001ddc:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001de0:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4613      	mov	r3, r2
 8001de8:	009b      	lsls	r3, r3, #2
 8001dea:	4413      	add	r3, r2
 8001dec:	005b      	lsls	r3, r3, #1
 8001dee:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8001df2:	f8c7 3230 	str.w	r3, [r7, #560]	@ 0x230
			    HAL_StatusTypeDef receive_status = HAL_UART_Receive(&huart6, dynamic_program_data, expected_size, receive_timeout);
 8001df6:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001dfa:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	b29a      	uxth	r2, r3
 8001e02:	f8d7 3230 	ldr.w	r3, [r7, #560]	@ 0x230
 8001e06:	4943      	ldr	r1, [pc, #268]	@ (8001f14 <main+0x658>)
 8001e08:	4836      	ldr	r0, [pc, #216]	@ (8001ee4 <main+0x628>)
 8001e0a:	f001 fe2e 	bl	8003a6a <HAL_UART_Receive>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	f887 322f 	strb.w	r3, [r7, #559]	@ 0x22f
			    if (receive_status == HAL_OK) {
 8001e14:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d11e      	bne.n	8001e5a <main+0x59e>
			      program_data_size = expected_size;
 8001e1c:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001e20:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4a2c      	ldr	r2, [pc, #176]	@ (8001ed8 <main+0x61c>)
 8001e28:	6013      	str	r3, [r2, #0]
			      program_data_ptr = dynamic_program_data;
 8001e2a:	4b34      	ldr	r3, [pc, #208]	@ (8001efc <main+0x640>)
 8001e2c:	4a39      	ldr	r2, [pc, #228]	@ (8001f14 <main+0x658>)
 8001e2e:	601a      	str	r2, [r3, #0]
			      sprintf(debugBuffer, "[%lu] SYSTEM: Successfully received %lu bytes of binary data\r\n",
 8001e30:	f000 fd2a 	bl	8002888 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	4b28      	ldr	r3, [pc, #160]	@ (8001ed8 <main+0x61c>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4937      	ldr	r1, [pc, #220]	@ (8001f18 <main+0x65c>)
 8001e3c:	4828      	ldr	r0, [pc, #160]	@ (8001ee0 <main+0x624>)
 8001e3e:	f002 ff9d 	bl	8004d7c <siprintf>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001e42:	4827      	ldr	r0, [pc, #156]	@ (8001ee0 <main+0x624>)
 8001e44:	f7fe f9cc 	bl	80001e0 <strlen>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	b29a      	uxth	r2, r3
 8001e4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e50:	4923      	ldr	r1, [pc, #140]	@ (8001ee0 <main+0x624>)
 8001e52:	4824      	ldr	r0, [pc, #144]	@ (8001ee4 <main+0x628>)
 8001e54:	f001 fd7e 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001e58:	e0b2      	b.n	8001fc0 <main+0x704>
			      sprintf(debugBuffer, "[%lu] SYSTEM: Failed to receive binary data (status: %d)\r\n",
 8001e5a:	f000 fd15 	bl	8002888 <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	f897 322f 	ldrb.w	r3, [r7, #559]	@ 0x22f
 8001e64:	492d      	ldr	r1, [pc, #180]	@ (8001f1c <main+0x660>)
 8001e66:	481e      	ldr	r0, [pc, #120]	@ (8001ee0 <main+0x624>)
 8001e68:	f002 ff88 	bl	8004d7c <siprintf>
			      HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001e6c:	481c      	ldr	r0, [pc, #112]	@ (8001ee0 <main+0x624>)
 8001e6e:	f7fe f9b7 	bl	80001e0 <strlen>
 8001e72:	4603      	mov	r3, r0
 8001e74:	b29a      	uxth	r2, r3
 8001e76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e7a:	4919      	ldr	r1, [pc, #100]	@ (8001ee0 <main+0x624>)
 8001e7c:	4819      	ldr	r0, [pc, #100]	@ (8001ee4 <main+0x628>)
 8001e7e:	f001 fd69 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001e82:	e09d      	b.n	8001fc0 <main+0x704>
			  else if (strncmp((char*)commandBuffer, "cancel", 6) == 0) {
 8001e84:	463b      	mov	r3, r7
 8001e86:	2206      	movs	r2, #6
 8001e88:	4925      	ldr	r1, [pc, #148]	@ (8001f20 <main+0x664>)
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f002 ff9e 	bl	8004dcc <strncmp>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	f040 8094 	bne.w	8001fc0 <main+0x704>
			    currentState = STATE_IDLE;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"HEX:CANCELLED", 13, UART_TIMEOUT);
 8001e9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001ea2:	220d      	movs	r2, #13
 8001ea4:	491f      	ldr	r1, [pc, #124]	@ (8001f24 <main+0x668>)
 8001ea6:	480f      	ldr	r0, [pc, #60]	@ (8001ee4 <main+0x628>)
 8001ea8:	f001 fd54 	bl	8003954 <HAL_UART_Transmit>
			    sprintf(debugBuffer, "[%lu] SYSTEM: Hex file reception cancelled\r\n", HAL_GetTick());
 8001eac:	f000 fcec 	bl	8002888 <HAL_GetTick>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	491c      	ldr	r1, [pc, #112]	@ (8001f28 <main+0x66c>)
 8001eb6:	480a      	ldr	r0, [pc, #40]	@ (8001ee0 <main+0x624>)
 8001eb8:	f002 ff60 	bl	8004d7c <siprintf>
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001ebc:	4808      	ldr	r0, [pc, #32]	@ (8001ee0 <main+0x624>)
 8001ebe:	f7fe f98f 	bl	80001e0 <strlen>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eca:	4905      	ldr	r1, [pc, #20]	@ (8001ee0 <main+0x624>)
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <main+0x628>)
 8001ece:	f001 fd41 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001ed2:	e075      	b.n	8001fc0 <main+0x704>
 8001ed4:	08006410 	.word	0x08006410
 8001ed8:	20000484 	.word	0x20000484
 8001edc:	08006414 	.word	0x08006414
 8001ee0:	20000178 	.word	0x20000178
 8001ee4:	20008520 	.word	0x20008520
 8001ee8:	08006454 	.word	0x08006454
 8001eec:	08006460 	.word	0x08006460
 8001ef0:	08006470 	.word	0x08006470
 8001ef4:	080064bc 	.word	0x080064bc
 8001ef8:	080064c8 	.word	0x080064c8
 8001efc:	20000480 	.word	0x20000480
 8001f00:	08006504 	.word	0x08006504
 8001f04:	08006508 	.word	0x08006508
 8001f08:	0800653c 	.word	0x0800653c
 8001f0c:	08006568 	.word	0x08006568
 8001f10:	080065a0 	.word	0x080065a0
 8001f14:	20000488 	.word	0x20000488
 8001f18:	080065d8 	.word	0x080065d8
 8001f1c:	08006618 	.word	0x08006618
 8001f20:	08006654 	.word	0x08006654
 8001f24:	0800665c 	.word	0x0800665c
 8001f28:	0800666c 	.word	0x0800666c

			case STATE_PROGRAMMING:
			  // This state is handled by the UploadHexFile function
			  // We should not receive commands while in this state
			  // But if we do, just log them
			  sprintf(debugBuffer, "[%lu] SYSTEM: Ignoring command during programming\r\n", HAL_GetTick());
 8001f2c:	f000 fcac 	bl	8002888 <HAL_GetTick>
 8001f30:	4603      	mov	r3, r0
 8001f32:	461a      	mov	r2, r3
 8001f34:	495b      	ldr	r1, [pc, #364]	@ (80020a4 <main+0x7e8>)
 8001f36:	485c      	ldr	r0, [pc, #368]	@ (80020a8 <main+0x7ec>)
 8001f38:	f002 ff20 	bl	8004d7c <siprintf>
			  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001f3c:	485a      	ldr	r0, [pc, #360]	@ (80020a8 <main+0x7ec>)
 8001f3e:	f7fe f94f 	bl	80001e0 <strlen>
 8001f42:	4603      	mov	r3, r0
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4a:	4957      	ldr	r1, [pc, #348]	@ (80020a8 <main+0x7ec>)
 8001f4c:	4857      	ldr	r0, [pc, #348]	@ (80020ac <main+0x7f0>)
 8001f4e:	f001 fd01 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001f52:	e036      	b.n	8001fc2 <main+0x706>

			case STATE_PASSTHROUGH:
			  // Exit passthrough mode command
			  if (strncmp((char*)commandBuffer, "x", 1) == 0) {
 8001f54:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8001f58:	f5a3 730e 	sub.w	r3, r3, #568	@ 0x238
 8001f5c:	781a      	ldrb	r2, [r3, #0]
 8001f5e:	4b54      	ldr	r3, [pc, #336]	@ (80020b0 <main+0x7f4>)
 8001f60:	781b      	ldrb	r3, [r3, #0]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d120      	bne.n	8001faa <main+0x6ee>
			    sprintf(debugBuffer, "[%lu] SYSTEM: Exiting passthrough mode\r\n", HAL_GetTick());
 8001f68:	f000 fc8e 	bl	8002888 <HAL_GetTick>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	461a      	mov	r2, r3
 8001f70:	4950      	ldr	r1, [pc, #320]	@ (80020b4 <main+0x7f8>)
 8001f72:	484d      	ldr	r0, [pc, #308]	@ (80020a8 <main+0x7ec>)
 8001f74:	f002 ff02 	bl	8004d7c <siprintf>
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8001f78:	484b      	ldr	r0, [pc, #300]	@ (80020a8 <main+0x7ec>)
 8001f7a:	f7fe f931 	bl	80001e0 <strlen>
 8001f7e:	4603      	mov	r3, r0
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f86:	4948      	ldr	r1, [pc, #288]	@ (80020a8 <main+0x7ec>)
 8001f88:	4848      	ldr	r0, [pc, #288]	@ (80020ac <main+0x7f0>)
 8001f8a:	f001 fce3 	bl	8003954 <HAL_UART_Transmit>

			    // Stop UART interrupt reception
			    HAL_UART_AbortReceive_IT(&UART_ARDUINO);
 8001f8e:	484a      	ldr	r0, [pc, #296]	@ (80020b8 <main+0x7fc>)
 8001f90:	f001 feca 	bl	8003d28 <HAL_UART_AbortReceive_IT>

			    currentState = STATE_IDLE;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 3237 	strb.w	r3, [r7, #567]	@ 0x237
			    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)"PASS:EXIT", 9, UART_TIMEOUT);
 8001f9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f9e:	2209      	movs	r2, #9
 8001fa0:	4946      	ldr	r1, [pc, #280]	@ (80020bc <main+0x800>)
 8001fa2:	4842      	ldr	r0, [pc, #264]	@ (80020ac <main+0x7f0>)
 8001fa4:	f001 fcd6 	bl	8003954 <HAL_UART_Transmit>
			  } else {
			    // Forward data from Bluetooth to Arduino
			    HAL_UART_Transmit(&UART_ARDUINO, commandBuffer, cmdSize, UART_TIMEOUT);
			  }
			  break;
 8001fa8:	e00b      	b.n	8001fc2 <main+0x706>
			    HAL_UART_Transmit(&UART_ARDUINO, commandBuffer, cmdSize, UART_TIMEOUT);
 8001faa:	f8b7 2234 	ldrh.w	r2, [r7, #564]	@ 0x234
 8001fae:	4639      	mov	r1, r7
 8001fb0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fb4:	4840      	ldr	r0, [pc, #256]	@ (80020b8 <main+0x7fc>)
 8001fb6:	f001 fccd 	bl	8003954 <HAL_UART_Transmit>
			  break;
 8001fba:	e002      	b.n	8001fc2 <main+0x706>
			  break;
 8001fbc:	bf00      	nop
 8001fbe:	e000      	b.n	8001fc2 <main+0x706>
			  break;
 8001fc0:	bf00      	nop
		}

		// In passthrough mode, check for data from Arduino and forward to Bluetooth
		// In passthrough mode, check for data from Arduino and forward to Bluetooth
		// In passthrough mode, check for data from Arduino and forward to Bluetooth
		if (currentState == STATE_PASSTHROUGH) {
 8001fc2:	f897 3237 	ldrb.w	r3, [r7, #567]	@ 0x237
 8001fc6:	2b03      	cmp	r3, #3
 8001fc8:	d147      	bne.n	800205a <main+0x79e>
		  // Start interrupt mode if we just entered passthrough state
		  static bool interruptModeStarted = false;
		  if (!interruptModeStarted) {
 8001fca:	4b3d      	ldr	r3, [pc, #244]	@ (80020c0 <main+0x804>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	f083 0301 	eor.w	r3, r3, #1
 8001fd2:	b2db      	uxtb	r3, r3
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d004      	beq.n	8001fe2 <main+0x726>
		    StartUartInterruptMode();
 8001fd8:	f7fe fb8a 	bl	80006f0 <StartUartInterruptMode>
		    interruptModeStarted = true;
 8001fdc:	4b38      	ldr	r3, [pc, #224]	@ (80020c0 <main+0x804>)
 8001fde:	2201      	movs	r2, #1
 8001fe0:	701a      	strb	r2, [r3, #0]
		  }

		  // Check if we have received data from Arduino via interrupt
		  if (uartRxReady) {
 8001fe2:	4b38      	ldr	r3, [pc, #224]	@ (80020c4 <main+0x808>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	b2db      	uxtb	r3, r3
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f43f ac9d 	beq.w	8001928 <main+0x6c>
		    // Process all available bytes in the circular buffer
		    while (rxHead != rxTail) {
 8001fee:	e01f      	b.n	8002030 <main+0x774>
		      // Get a byte from the buffer
		      uint8_t byte = uartRxCircBuffer[rxTail];
 8001ff0:	4b35      	ldr	r3, [pc, #212]	@ (80020c8 <main+0x80c>)
 8001ff2:	881b      	ldrh	r3, [r3, #0]
 8001ff4:	b29b      	uxth	r3, r3
 8001ff6:	461a      	mov	r2, r3
 8001ff8:	4b34      	ldr	r3, [pc, #208]	@ (80020cc <main+0x810>)
 8001ffa:	5c9b      	ldrb	r3, [r3, r2]
 8001ffc:	b2da      	uxtb	r2, r3
 8001ffe:	f507 730e 	add.w	r3, r7, #568	@ 0x238
 8002002:	f2a3 2315 	subw	r3, r3, #533	@ 0x215
 8002006:	701a      	strb	r2, [r3, #0]
		      rxTail = (rxTail + 1) % RX_BUFFER_SIZE;
 8002008:	4b2f      	ldr	r3, [pc, #188]	@ (80020c8 <main+0x80c>)
 800200a:	881b      	ldrh	r3, [r3, #0]
 800200c:	b29b      	uxth	r3, r3
 800200e:	3301      	adds	r3, #1
 8002010:	425a      	negs	r2, r3
 8002012:	b2db      	uxtb	r3, r3
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	bf58      	it	pl
 8002018:	4253      	negpl	r3, r2
 800201a:	b29a      	uxth	r2, r3
 800201c:	4b2a      	ldr	r3, [pc, #168]	@ (80020c8 <main+0x80c>)
 800201e:	801a      	strh	r2, [r3, #0]

		      // Forward the byte to the debug UART
		      HAL_UART_Transmit(&UART_DEBUG, &byte, 1, UART_TIMEOUT);
 8002020:	f107 0123 	add.w	r1, r7, #35	@ 0x23
 8002024:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002028:	2201      	movs	r2, #1
 800202a:	4820      	ldr	r0, [pc, #128]	@ (80020ac <main+0x7f0>)
 800202c:	f001 fc92 	bl	8003954 <HAL_UART_Transmit>
		    while (rxHead != rxTail) {
 8002030:	4b27      	ldr	r3, [pc, #156]	@ (80020d0 <main+0x814>)
 8002032:	881b      	ldrh	r3, [r3, #0]
 8002034:	b29a      	uxth	r2, r3
 8002036:	4b24      	ldr	r3, [pc, #144]	@ (80020c8 <main+0x80c>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b29b      	uxth	r3, r3
 800203c:	429a      	cmp	r2, r3
 800203e:	d1d7      	bne.n	8001ff0 <main+0x734>
		    }

		    // Reset the flag after processing all available bytes
		    if (rxHead == rxTail) {
 8002040:	4b23      	ldr	r3, [pc, #140]	@ (80020d0 <main+0x814>)
 8002042:	881b      	ldrh	r3, [r3, #0]
 8002044:	b29a      	uxth	r2, r3
 8002046:	4b20      	ldr	r3, [pc, #128]	@ (80020c8 <main+0x80c>)
 8002048:	881b      	ldrh	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	429a      	cmp	r2, r3
 800204e:	f47f ac6b 	bne.w	8001928 <main+0x6c>
		      uartRxReady = false;
 8002052:	4b1c      	ldr	r3, [pc, #112]	@ (80020c4 <main+0x808>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
 8002058:	e466      	b.n	8001928 <main+0x6c>
		    }
		  }
		} else {
		  // Reset interrupt mode flag when not in passthrough mode
		  static bool interruptModeStarted = false;
		  if (interruptModeStarted) {
 800205a:	4b1e      	ldr	r3, [pc, #120]	@ (80020d4 <main+0x818>)
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	2b00      	cmp	r3, #0
 8002060:	f43f ac62 	beq.w	8001928 <main+0x6c>
		    HAL_UART_AbortReceive_IT(&UART_ARDUINO);
 8002064:	4814      	ldr	r0, [pc, #80]	@ (80020b8 <main+0x7fc>)
 8002066:	f001 fe5f 	bl	8003d28 <HAL_UART_AbortReceive_IT>
		    interruptModeStarted = false;
 800206a:	4b1a      	ldr	r3, [pc, #104]	@ (80020d4 <main+0x818>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]

		    sprintf(debugBuffer, "[%lu] SYSTEM: UART interrupt mode stopped\r\n", HAL_GetTick());
 8002070:	f000 fc0a 	bl	8002888 <HAL_GetTick>
 8002074:	4603      	mov	r3, r0
 8002076:	461a      	mov	r2, r3
 8002078:	4917      	ldr	r1, [pc, #92]	@ (80020d8 <main+0x81c>)
 800207a:	480b      	ldr	r0, [pc, #44]	@ (80020a8 <main+0x7ec>)
 800207c:	f002 fe7e 	bl	8004d7c <siprintf>
		    HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8002080:	4809      	ldr	r0, [pc, #36]	@ (80020a8 <main+0x7ec>)
 8002082:	f7fe f8ad 	bl	80001e0 <strlen>
 8002086:	4603      	mov	r3, r0
 8002088:	b29a      	uxth	r2, r3
 800208a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800208e:	4906      	ldr	r1, [pc, #24]	@ (80020a8 <main+0x7ec>)
 8002090:	4806      	ldr	r0, [pc, #24]	@ (80020ac <main+0x7f0>)
 8002092:	f001 fc5f 	bl	8003954 <HAL_UART_Transmit>
	  while (1) {
 8002096:	e447      	b.n	8001928 <main+0x6c>
//		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);

		// Blink status LED or perform other maintenance tasks
//		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13); // Assuming LED is on PC13
	  }
	}
 8002098:	4618      	mov	r0, r3
 800209a:	f507 770e 	add.w	r7, r7, #568	@ 0x238
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	0800669c 	.word	0x0800669c
 80020a8:	20000178 	.word	0x20000178
 80020ac:	20008520 	.word	0x20008520
 80020b0:	080066d0 	.word	0x080066d0
 80020b4:	080066d4 	.word	0x080066d4
 80020b8:	20008490 	.word	0x20008490
 80020bc:	08006700 	.word	0x08006700
 80020c0:	20008488 	.word	0x20008488
 80020c4:	2000047c 	.word	0x2000047c
 80020c8:	2000047a 	.word	0x2000047a
 80020cc:	20000378 	.word	0x20000378
 80020d0:	20000478 	.word	0x20000478
 80020d4:	20008489 	.word	0x20008489
 80020d8:	0800670c 	.word	0x0800670c

080020dc <PrepareHexFilePages>:
	 */
	uint16_t PrepareHexFilePages(uint8_t preparedPages[][FLASH_PAGE_SIZE],
								uint16_t pageSizes[],
								uint16_t pageAddresses[],
								uint16_t maxPages)
	{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b08a      	sub	sp, #40	@ 0x28
 80020e0:	af02      	add	r7, sp, #8
 80020e2:	60f8      	str	r0, [r7, #12]
 80020e4:	60b9      	str	r1, [r7, #8]
 80020e6:	607a      	str	r2, [r7, #4]
 80020e8:	807b      	strh	r3, [r7, #2]
	  uint16_t totalPages = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	83fb      	strh	r3, [r7, #30]
	  uint16_t currentAddress = 0;
 80020ee:	2300      	movs	r3, #0
 80020f0:	83bb      	strh	r3, [r7, #28]

	  // Only use the dynamically received data
	  uint8_t* data_source = program_data_ptr;
 80020f2:	4b6e      	ldr	r3, [pc, #440]	@ (80022ac <PrepareHexFilePages+0x1d0>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	617b      	str	r3, [r7, #20]
	  uint16_t bytesRemaining = program_data_size;
 80020f8:	4b6d      	ldr	r3, [pc, #436]	@ (80022b0 <PrepareHexFilePages+0x1d4>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	837b      	strh	r3, [r7, #26]

	  // Safety check to ensure we have valid data
	  if (data_source == NULL || bytesRemaining == 0) {
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d002      	beq.n	800210a <PrepareHexFilePages+0x2e>
 8002104:	8b7b      	ldrh	r3, [r7, #26]
 8002106:	2b00      	cmp	r3, #0
 8002108:	d114      	bne.n	8002134 <PrepareHexFilePages+0x58>
		sprintf(debugBuffer, "[%lu] UPLOAD: No valid program data available\r\n", HAL_GetTick());
 800210a:	f000 fbbd 	bl	8002888 <HAL_GetTick>
 800210e:	4603      	mov	r3, r0
 8002110:	461a      	mov	r2, r3
 8002112:	4968      	ldr	r1, [pc, #416]	@ (80022b4 <PrepareHexFilePages+0x1d8>)
 8002114:	4868      	ldr	r0, [pc, #416]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002116:	f002 fe31 	bl	8004d7c <siprintf>
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800211a:	4867      	ldr	r0, [pc, #412]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 800211c:	f7fe f860 	bl	80001e0 <strlen>
 8002120:	4603      	mov	r3, r0
 8002122:	b29a      	uxth	r2, r3
 8002124:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002128:	4963      	ldr	r1, [pc, #396]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 800212a:	4864      	ldr	r0, [pc, #400]	@ (80022bc <PrepareHexFilePages+0x1e0>)
 800212c:	f001 fc12 	bl	8003954 <HAL_UART_Transmit>
		return 0;
 8002130:	2300      	movs	r3, #0
 8002132:	e0b7      	b.n	80022a4 <PrepareHexFilePages+0x1c8>
	  }

	  sprintf(debugBuffer, "[%lu] UPLOAD: Pre-processing binary program data (size: %u bytes)...\r\n",
 8002134:	f000 fba8 	bl	8002888 <HAL_GetTick>
 8002138:	4602      	mov	r2, r0
 800213a:	8b7b      	ldrh	r3, [r7, #26]
 800213c:	4960      	ldr	r1, [pc, #384]	@ (80022c0 <PrepareHexFilePages+0x1e4>)
 800213e:	485e      	ldr	r0, [pc, #376]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002140:	f002 fe1c 	bl	8004d7c <siprintf>
			  HAL_GetTick(), bytesRemaining);
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8002144:	485c      	ldr	r0, [pc, #368]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002146:	f7fe f84b 	bl	80001e0 <strlen>
 800214a:	4603      	mov	r3, r0
 800214c:	b29a      	uxth	r2, r3
 800214e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002152:	4959      	ldr	r1, [pc, #356]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002154:	4859      	ldr	r0, [pc, #356]	@ (80022bc <PrepareHexFilePages+0x1e0>)
 8002156:	f001 fbfd 	bl	8003954 <HAL_UART_Transmit>

	  // Process all data in chunks of FLASH_PAGE_SIZE
	  while (bytesRemaining > 0 && totalPages < maxPages) {
 800215a:	e087      	b.n	800226c <PrepareHexFilePages+0x190>
		// Skip bootloader area
		if (currentAddress >= BOOT_SECTION_START) {
 800215c:	8bbb      	ldrh	r3, [r7, #28]
 800215e:	f5b3 4fe0 	cmp.w	r3, #28672	@ 0x7000
 8002162:	d313      	bcc.n	800218c <PrepareHexFilePages+0xb0>
		  sprintf(debugBuffer, "[%lu] UPLOAD: Skipping bootloader area at 0x%04X\r\n",
 8002164:	f000 fb90 	bl	8002888 <HAL_GetTick>
 8002168:	4602      	mov	r2, r0
 800216a:	8bbb      	ldrh	r3, [r7, #28]
 800216c:	4955      	ldr	r1, [pc, #340]	@ (80022c4 <PrepareHexFilePages+0x1e8>)
 800216e:	4852      	ldr	r0, [pc, #328]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002170:	f002 fe04 	bl	8004d7c <siprintf>
				  HAL_GetTick(), currentAddress);
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8002174:	4850      	ldr	r0, [pc, #320]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002176:	f7fe f833 	bl	80001e0 <strlen>
 800217a:	4603      	mov	r3, r0
 800217c:	b29a      	uxth	r2, r3
 800217e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002182:	494d      	ldr	r1, [pc, #308]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002184:	484d      	ldr	r0, [pc, #308]	@ (80022bc <PrepareHexFilePages+0x1e0>)
 8002186:	f001 fbe5 	bl	8003954 <HAL_UART_Transmit>
		  break; // Stop processing as we've reached the bootloader area
 800218a:	e077      	b.n	800227c <PrepareHexFilePages+0x1a0>
		}

		// Calculate bytes to copy for this page
		uint16_t bytesToCopy = (bytesRemaining > FLASH_PAGE_SIZE) ? FLASH_PAGE_SIZE : bytesRemaining;
 800218c:	8b7b      	ldrh	r3, [r7, #26]
 800218e:	2b80      	cmp	r3, #128	@ 0x80
 8002190:	bf28      	it	cs
 8002192:	2380      	movcs	r3, #128	@ 0x80
 8002194:	827b      	strh	r3, [r7, #18]

		// Copy data for this page
		memcpy(preparedPages[totalPages], &data_source[currentAddress], bytesToCopy);
 8002196:	8bfb      	ldrh	r3, [r7, #30]
 8002198:	01db      	lsls	r3, r3, #7
 800219a:	68fa      	ldr	r2, [r7, #12]
 800219c:	18d0      	adds	r0, r2, r3
 800219e:	8bbb      	ldrh	r3, [r7, #28]
 80021a0:	697a      	ldr	r2, [r7, #20]
 80021a2:	4413      	add	r3, r2
 80021a4:	8a7a      	ldrh	r2, [r7, #18]
 80021a6:	4619      	mov	r1, r3
 80021a8:	f002 fe4e 	bl	8004e48 <memcpy>

		// If we didn't fill the page, pad with 0xFF (erased flash state)
		if (bytesToCopy < FLASH_PAGE_SIZE) {
 80021ac:	8a7b      	ldrh	r3, [r7, #18]
 80021ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80021b0:	d80c      	bhi.n	80021cc <PrepareHexFilePages+0xf0>
		  memset(&preparedPages[totalPages][bytesToCopy], 0xFF, FLASH_PAGE_SIZE - bytesToCopy);
 80021b2:	8bfb      	ldrh	r3, [r7, #30]
 80021b4:	01db      	lsls	r3, r3, #7
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	441a      	add	r2, r3
 80021ba:	8a7b      	ldrh	r3, [r7, #18]
 80021bc:	18d0      	adds	r0, r2, r3
 80021be:	8a7b      	ldrh	r3, [r7, #18]
 80021c0:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 80021c4:	461a      	mov	r2, r3
 80021c6:	21ff      	movs	r1, #255	@ 0xff
 80021c8:	f002 fdf8 	bl	8004dbc <memset>
		}

		// Store page information
		pageAddresses[totalPages] = currentAddress;
 80021cc:	8bfb      	ldrh	r3, [r7, #30]
 80021ce:	005b      	lsls	r3, r3, #1
 80021d0:	687a      	ldr	r2, [r7, #4]
 80021d2:	4413      	add	r3, r2
 80021d4:	8bba      	ldrh	r2, [r7, #28]
 80021d6:	801a      	strh	r2, [r3, #0]
		pageSizes[totalPages] = FLASH_PAGE_SIZE; // Always send full pages for consistent programming
 80021d8:	8bfb      	ldrh	r3, [r7, #30]
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	68ba      	ldr	r2, [r7, #8]
 80021de:	4413      	add	r3, r2
 80021e0:	2280      	movs	r2, #128	@ 0x80
 80021e2:	801a      	strh	r2, [r3, #0]

		// Debug output
		sprintf(debugBuffer, "[%lu] UPLOAD: Prepared page %d: address=0x%04X, size=%d bytes\r\n",
 80021e4:	f000 fb50 	bl	8002888 <HAL_GetTick>
 80021e8:	4601      	mov	r1, r0
 80021ea:	8bfa      	ldrh	r2, [r7, #30]
 80021ec:	8bbb      	ldrh	r3, [r7, #28]
 80021ee:	2080      	movs	r0, #128	@ 0x80
 80021f0:	9001      	str	r0, [sp, #4]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	4613      	mov	r3, r2
 80021f6:	460a      	mov	r2, r1
 80021f8:	4933      	ldr	r1, [pc, #204]	@ (80022c8 <PrepareHexFilePages+0x1ec>)
 80021fa:	482f      	ldr	r0, [pc, #188]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 80021fc:	f002 fdbe 	bl	8004d7c <siprintf>
				HAL_GetTick(), totalPages, currentAddress, FLASH_PAGE_SIZE);
		HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8002200:	482d      	ldr	r0, [pc, #180]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002202:	f7fd ffed 	bl	80001e0 <strlen>
 8002206:	4603      	mov	r3, r0
 8002208:	b29a      	uxth	r2, r3
 800220a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800220e:	492a      	ldr	r1, [pc, #168]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002210:	482a      	ldr	r0, [pc, #168]	@ (80022bc <PrepareHexFilePages+0x1e0>)
 8002212:	f001 fb9f 	bl	8003954 <HAL_UART_Transmit>

		// Update counters
		currentAddress += bytesToCopy;
 8002216:	8bba      	ldrh	r2, [r7, #28]
 8002218:	8a7b      	ldrh	r3, [r7, #18]
 800221a:	4413      	add	r3, r2
 800221c:	83bb      	strh	r3, [r7, #28]
		bytesRemaining -= bytesToCopy;
 800221e:	8b7a      	ldrh	r2, [r7, #26]
 8002220:	8a7b      	ldrh	r3, [r7, #18]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	837b      	strh	r3, [r7, #26]
		totalPages++;
 8002226:	8bfb      	ldrh	r3, [r7, #30]
 8002228:	3301      	adds	r3, #1
 800222a:	83fb      	strh	r3, [r7, #30]

		// Progress indicator every few pages
		if (totalPages % 10 == 0) {
 800222c:	8bfa      	ldrh	r2, [r7, #30]
 800222e:	4b27      	ldr	r3, [pc, #156]	@ (80022cc <PrepareHexFilePages+0x1f0>)
 8002230:	fba3 1302 	umull	r1, r3, r3, r2
 8002234:	08d9      	lsrs	r1, r3, #3
 8002236:	460b      	mov	r3, r1
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	440b      	add	r3, r1
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	b29b      	uxth	r3, r3
 8002242:	2b00      	cmp	r3, #0
 8002244:	d112      	bne.n	800226c <PrepareHexFilePages+0x190>
		  sprintf(debugBuffer, "[%lu] UPLOAD: Processed %d pages...\r\n", HAL_GetTick(), totalPages);
 8002246:	f000 fb1f 	bl	8002888 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	8bfb      	ldrh	r3, [r7, #30]
 800224e:	4920      	ldr	r1, [pc, #128]	@ (80022d0 <PrepareHexFilePages+0x1f4>)
 8002250:	4819      	ldr	r0, [pc, #100]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002252:	f002 fd93 	bl	8004d7c <siprintf>
		  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 8002256:	4818      	ldr	r0, [pc, #96]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002258:	f7fd ffc2 	bl	80001e0 <strlen>
 800225c:	4603      	mov	r3, r0
 800225e:	b29a      	uxth	r2, r3
 8002260:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002264:	4914      	ldr	r1, [pc, #80]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002266:	4815      	ldr	r0, [pc, #84]	@ (80022bc <PrepareHexFilePages+0x1e0>)
 8002268:	f001 fb74 	bl	8003954 <HAL_UART_Transmit>
	  while (bytesRemaining > 0 && totalPages < maxPages) {
 800226c:	8b7b      	ldrh	r3, [r7, #26]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <PrepareHexFilePages+0x1a0>
 8002272:	8bfa      	ldrh	r2, [r7, #30]
 8002274:	887b      	ldrh	r3, [r7, #2]
 8002276:	429a      	cmp	r2, r3
 8002278:	f4ff af70 	bcc.w	800215c <PrepareHexFilePages+0x80>
		}
	  }

	  sprintf(debugBuffer, "[%lu] UPLOAD: Pre-processing complete: %d pages prepared\r\n",
 800227c:	f000 fb04 	bl	8002888 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	8bfb      	ldrh	r3, [r7, #30]
 8002284:	4913      	ldr	r1, [pc, #76]	@ (80022d4 <PrepareHexFilePages+0x1f8>)
 8002286:	480c      	ldr	r0, [pc, #48]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 8002288:	f002 fd78 	bl	8004d7c <siprintf>
			  HAL_GetTick(), totalPages);
	  HAL_UART_Transmit(&UART_DEBUG, (uint8_t*)debugBuffer, strlen(debugBuffer), UART_TIMEOUT);
 800228c:	480a      	ldr	r0, [pc, #40]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 800228e:	f7fd ffa7 	bl	80001e0 <strlen>
 8002292:	4603      	mov	r3, r0
 8002294:	b29a      	uxth	r2, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229a:	4907      	ldr	r1, [pc, #28]	@ (80022b8 <PrepareHexFilePages+0x1dc>)
 800229c:	4807      	ldr	r0, [pc, #28]	@ (80022bc <PrepareHexFilePages+0x1e0>)
 800229e:	f001 fb59 	bl	8003954 <HAL_UART_Transmit>

	  return totalPages;
 80022a2:	8bfb      	ldrh	r3, [r7, #30]
	}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3720      	adds	r7, #32
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}
 80022ac:	20000480 	.word	0x20000480
 80022b0:	20000484 	.word	0x20000484
 80022b4:	08006738 	.word	0x08006738
 80022b8:	20000178 	.word	0x20000178
 80022bc:	20008520 	.word	0x20008520
 80022c0:	08006768 	.word	0x08006768
 80022c4:	080067b0 	.word	0x080067b0
 80022c8:	080067e4 	.word	0x080067e4
 80022cc:	cccccccd 	.word	0xcccccccd
 80022d0:	08006824 	.word	0x08006824
 80022d4:	0800684c 	.word	0x0800684c

080022d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b094      	sub	sp, #80	@ 0x50
 80022dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80022de:	f107 0320 	add.w	r3, r7, #32
 80022e2:	2230      	movs	r2, #48	@ 0x30
 80022e4:	2100      	movs	r1, #0
 80022e6:	4618      	mov	r0, r3
 80022e8:	f002 fd68 	bl	8004dbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80022ec:	f107 030c 	add.w	r3, r7, #12
 80022f0:	2200      	movs	r2, #0
 80022f2:	601a      	str	r2, [r3, #0]
 80022f4:	605a      	str	r2, [r3, #4]
 80022f6:	609a      	str	r2, [r3, #8]
 80022f8:	60da      	str	r2, [r3, #12]
 80022fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80022fc:	2300      	movs	r3, #0
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	4b23      	ldr	r3, [pc, #140]	@ (8002390 <SystemClock_Config+0xb8>)
 8002302:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002304:	4a22      	ldr	r2, [pc, #136]	@ (8002390 <SystemClock_Config+0xb8>)
 8002306:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800230a:	6413      	str	r3, [r2, #64]	@ 0x40
 800230c:	4b20      	ldr	r3, [pc, #128]	@ (8002390 <SystemClock_Config+0xb8>)
 800230e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002310:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8002318:	2300      	movs	r3, #0
 800231a:	607b      	str	r3, [r7, #4]
 800231c:	4b1d      	ldr	r3, [pc, #116]	@ (8002394 <SystemClock_Config+0xbc>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8002324:	4a1b      	ldr	r2, [pc, #108]	@ (8002394 <SystemClock_Config+0xbc>)
 8002326:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800232a:	6013      	str	r3, [r2, #0]
 800232c:	4b19      	ldr	r3, [pc, #100]	@ (8002394 <SystemClock_Config+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002334:	607b      	str	r3, [r7, #4]
 8002336:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002338:	2302      	movs	r3, #2
 800233a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800233c:	2301      	movs	r3, #1
 800233e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002340:	2310      	movs	r3, #16
 8002342:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002344:	2300      	movs	r3, #0
 8002346:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002348:	f107 0320 	add.w	r3, r7, #32
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fe19 	bl	8002f84 <HAL_RCC_OscConfig>
 8002352:	4603      	mov	r3, r0
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8002358:	f000 f81e 	bl	8002398 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800235c:	230f      	movs	r3, #15
 800235e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002368:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800236c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800236e:	2300      	movs	r3, #0
 8002370:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002372:	f107 030c 	add.w	r3, r7, #12
 8002376:	2100      	movs	r1, #0
 8002378:	4618      	mov	r0, r3
 800237a:	f001 f87b 	bl	8003474 <HAL_RCC_ClockConfig>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d001      	beq.n	8002388 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8002384:	f000 f808 	bl	8002398 <Error_Handler>
  }
}
 8002388:	bf00      	nop
 800238a:	3750      	adds	r7, #80	@ 0x50
 800238c:	46bd      	mov	sp, r7
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40023800 	.word	0x40023800
 8002394:	40007000 	.word	0x40007000

08002398 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002398:	b480      	push	{r7}
 800239a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800239c:	b672      	cpsid	i
}
 800239e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 80023a0:	bf00      	nop
 80023a2:	e7fd      	b.n	80023a0 <Error_Handler+0x8>

080023a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b083      	sub	sp, #12
 80023a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023aa:	2300      	movs	r3, #0
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	4b10      	ldr	r3, [pc, #64]	@ (80023f0 <HAL_MspInit+0x4c>)
 80023b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023b2:	4a0f      	ldr	r2, [pc, #60]	@ (80023f0 <HAL_MspInit+0x4c>)
 80023b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023ba:	4b0d      	ldr	r3, [pc, #52]	@ (80023f0 <HAL_MspInit+0x4c>)
 80023bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023c2:	607b      	str	r3, [r7, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023c6:	2300      	movs	r3, #0
 80023c8:	603b      	str	r3, [r7, #0]
 80023ca:	4b09      	ldr	r3, [pc, #36]	@ (80023f0 <HAL_MspInit+0x4c>)
 80023cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ce:	4a08      	ldr	r2, [pc, #32]	@ (80023f0 <HAL_MspInit+0x4c>)
 80023d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d6:	4b06      	ldr	r3, [pc, #24]	@ (80023f0 <HAL_MspInit+0x4c>)
 80023d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023de:	603b      	str	r3, [r7, #0]
 80023e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023e2:	bf00      	nop
 80023e4:	370c      	adds	r7, #12
 80023e6:	46bd      	mov	sp, r7
 80023e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ec:	4770      	bx	lr
 80023ee:	bf00      	nop
 80023f0:	40023800 	.word	0x40023800

080023f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023f8:	bf00      	nop
 80023fa:	e7fd      	b.n	80023f8 <NMI_Handler+0x4>

080023fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023fc:	b480      	push	{r7}
 80023fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002400:	bf00      	nop
 8002402:	e7fd      	b.n	8002400 <HardFault_Handler+0x4>

08002404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002408:	bf00      	nop
 800240a:	e7fd      	b.n	8002408 <MemManage_Handler+0x4>

0800240c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002410:	bf00      	nop
 8002412:	e7fd      	b.n	8002410 <BusFault_Handler+0x4>

08002414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002414:	b480      	push	{r7}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002418:	bf00      	nop
 800241a:	e7fd      	b.n	8002418 <UsageFault_Handler+0x4>

0800241c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800241c:	b480      	push	{r7}
 800241e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002420:	bf00      	nop
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr

0800242a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800242a:	b480      	push	{r7}
 800242c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800242e:	bf00      	nop
 8002430:	46bd      	mov	sp, r7
 8002432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002436:	4770      	bx	lr

08002438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002446:	b580      	push	{r7, lr}
 8002448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800244a:	f000 fa09 	bl	8002860 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800244e:	bf00      	nop
 8002450:	bd80      	pop	{r7, pc}
	...

08002454 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002458:	4802      	ldr	r0, [pc, #8]	@ (8002464 <USART1_IRQHandler+0x10>)
 800245a:	f001 fd17 	bl	8003e8c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	20008490 	.word	0x20008490

08002468 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b086      	sub	sp, #24
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002470:	4a14      	ldr	r2, [pc, #80]	@ (80024c4 <_sbrk+0x5c>)
 8002472:	4b15      	ldr	r3, [pc, #84]	@ (80024c8 <_sbrk+0x60>)
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800247c:	4b13      	ldr	r3, [pc, #76]	@ (80024cc <_sbrk+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d102      	bne.n	800248a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <_sbrk+0x64>)
 8002486:	4a12      	ldr	r2, [pc, #72]	@ (80024d0 <_sbrk+0x68>)
 8002488:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800248a:	4b10      	ldr	r3, [pc, #64]	@ (80024cc <_sbrk+0x64>)
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4413      	add	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	429a      	cmp	r2, r3
 8002496:	d207      	bcs.n	80024a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002498:	f002 fcaa 	bl	8004df0 <__errno>
 800249c:	4603      	mov	r3, r0
 800249e:	220c      	movs	r2, #12
 80024a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80024a2:	f04f 33ff 	mov.w	r3, #4294967295
 80024a6:	e009      	b.n	80024bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a8:	4b08      	ldr	r3, [pc, #32]	@ (80024cc <_sbrk+0x64>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024ae:	4b07      	ldr	r3, [pc, #28]	@ (80024cc <_sbrk+0x64>)
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	4413      	add	r3, r2
 80024b6:	4a05      	ldr	r2, [pc, #20]	@ (80024cc <_sbrk+0x64>)
 80024b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024ba:	68fb      	ldr	r3, [r7, #12]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}
 80024c4:	20018000 	.word	0x20018000
 80024c8:	00000400 	.word	0x00000400
 80024cc:	2000848c 	.word	0x2000848c
 80024d0:	200086b8 	.word	0x200086b8

080024d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d8:	4b06      	ldr	r3, [pc, #24]	@ (80024f4 <SystemInit+0x20>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80024de:	4a05      	ldr	r2, [pc, #20]	@ (80024f4 <SystemInit+0x20>)
 80024e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart6;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024fc:	4b11      	ldr	r3, [pc, #68]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 80024fe:	4a12      	ldr	r2, [pc, #72]	@ (8002548 <MX_USART1_UART_Init+0x50>)
 8002500:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002502:	4b10      	ldr	r3, [pc, #64]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 8002504:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002508:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 800250c:	2200      	movs	r2, #0
 800250e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 8002512:	2200      	movs	r2, #0
 8002514:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002516:	4b0b      	ldr	r3, [pc, #44]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 8002518:	2200      	movs	r2, #0
 800251a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800251c:	4b09      	ldr	r3, [pc, #36]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 800251e:	220c      	movs	r2, #12
 8002520:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002522:	4b08      	ldr	r3, [pc, #32]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 8002524:	2200      	movs	r2, #0
 8002526:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002528:	4b06      	ldr	r3, [pc, #24]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 800252a:	2200      	movs	r2, #0
 800252c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800252e:	4805      	ldr	r0, [pc, #20]	@ (8002544 <MX_USART1_UART_Init+0x4c>)
 8002530:	f001 f9c0 	bl	80038b4 <HAL_UART_Init>
 8002534:	4603      	mov	r3, r0
 8002536:	2b00      	cmp	r3, #0
 8002538:	d001      	beq.n	800253e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800253a:	f7ff ff2d 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20008490 	.word	0x20008490
 8002548:	40011000 	.word	0x40011000

0800254c <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002550:	4b11      	ldr	r3, [pc, #68]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002552:	4a12      	ldr	r2, [pc, #72]	@ (800259c <MX_USART2_UART_Init+0x50>)
 8002554:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8002556:	4b10      	ldr	r3, [pc, #64]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002558:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 800255c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800255e:	4b0e      	ldr	r3, [pc, #56]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002560:	2200      	movs	r2, #0
 8002562:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002564:	4b0c      	ldr	r3, [pc, #48]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002566:	2200      	movs	r2, #0
 8002568:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800256a:	4b0b      	ldr	r3, [pc, #44]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 800256c:	2200      	movs	r2, #0
 800256e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002570:	4b09      	ldr	r3, [pc, #36]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002572:	220c      	movs	r2, #12
 8002574:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002576:	4b08      	ldr	r3, [pc, #32]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002578:	2200      	movs	r2, #0
 800257a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800257c:	4b06      	ldr	r3, [pc, #24]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 800257e:	2200      	movs	r2, #0
 8002580:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002582:	4805      	ldr	r0, [pc, #20]	@ (8002598 <MX_USART2_UART_Init+0x4c>)
 8002584:	f001 f996 	bl	80038b4 <HAL_UART_Init>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800258e:	f7ff ff03 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002592:	bf00      	nop
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	200084d8 	.word	0x200084d8
 800259c:	40004400 	.word	0x40004400

080025a0 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80025a4:	4b11      	ldr	r3, [pc, #68]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	@ (80025f0 <MX_USART6_UART_Init+0x50>)
 80025a8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 38400;
 80025aa:	4b10      	ldr	r3, [pc, #64]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025ac:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80025b0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80025b2:	4b0e      	ldr	r3, [pc, #56]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025b4:	2200      	movs	r2, #0
 80025b6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80025b8:	4b0c      	ldr	r3, [pc, #48]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025ba:	2200      	movs	r2, #0
 80025bc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80025be:	4b0b      	ldr	r3, [pc, #44]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025c0:	2200      	movs	r2, #0
 80025c2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80025c4:	4b09      	ldr	r3, [pc, #36]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025c6:	220c      	movs	r2, #12
 80025c8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ca:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80025d0:	4b06      	ldr	r3, [pc, #24]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80025d6:	4805      	ldr	r0, [pc, #20]	@ (80025ec <MX_USART6_UART_Init+0x4c>)
 80025d8:	f001 f96c 	bl	80038b4 <HAL_UART_Init>
 80025dc:	4603      	mov	r3, r0
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80025e2:	f7ff fed9 	bl	8002398 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80025e6:	bf00      	nop
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20008520 	.word	0x20008520
 80025f0:	40011400 	.word	0x40011400

080025f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b08e      	sub	sp, #56	@ 0x38
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002600:	2200      	movs	r2, #0
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	605a      	str	r2, [r3, #4]
 8002606:	609a      	str	r2, [r3, #8]
 8002608:	60da      	str	r2, [r3, #12]
 800260a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a4f      	ldr	r2, [pc, #316]	@ (8002750 <HAL_UART_MspInit+0x15c>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d135      	bne.n	8002682 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002616:	2300      	movs	r3, #0
 8002618:	623b      	str	r3, [r7, #32]
 800261a:	4b4e      	ldr	r3, [pc, #312]	@ (8002754 <HAL_UART_MspInit+0x160>)
 800261c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800261e:	4a4d      	ldr	r2, [pc, #308]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002620:	f043 0310 	orr.w	r3, r3, #16
 8002624:	6453      	str	r3, [r2, #68]	@ 0x44
 8002626:	4b4b      	ldr	r3, [pc, #300]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	f003 0310 	and.w	r3, r3, #16
 800262e:	623b      	str	r3, [r7, #32]
 8002630:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002632:	2300      	movs	r3, #0
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	4b47      	ldr	r3, [pc, #284]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800263a:	4a46      	ldr	r2, [pc, #280]	@ (8002754 <HAL_UART_MspInit+0x160>)
 800263c:	f043 0301 	orr.w	r3, r3, #1
 8002640:	6313      	str	r3, [r2, #48]	@ 0x30
 8002642:	4b44      	ldr	r3, [pc, #272]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	61fb      	str	r3, [r7, #28]
 800264c:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800264e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002652:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002654:	2302      	movs	r3, #2
 8002656:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800265c:	2303      	movs	r3, #3
 800265e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002660:	2307      	movs	r3, #7
 8002662:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002664:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002668:	4619      	mov	r1, r3
 800266a:	483b      	ldr	r0, [pc, #236]	@ (8002758 <HAL_UART_MspInit+0x164>)
 800266c:	f000 faec 	bl	8002c48 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002670:	2200      	movs	r2, #0
 8002672:	2100      	movs	r1, #0
 8002674:	2025      	movs	r0, #37	@ 0x25
 8002676:	f000 fa12 	bl	8002a9e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800267a:	2025      	movs	r0, #37	@ 0x25
 800267c:	f000 fa2b 	bl	8002ad6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 8002680:	e062      	b.n	8002748 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART2)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a35      	ldr	r2, [pc, #212]	@ (800275c <HAL_UART_MspInit+0x168>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d12c      	bne.n	80026e6 <HAL_UART_MspInit+0xf2>
    __HAL_RCC_USART2_CLK_ENABLE();
 800268c:	2300      	movs	r3, #0
 800268e:	61bb      	str	r3, [r7, #24]
 8002690:	4b30      	ldr	r3, [pc, #192]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002694:	4a2f      	ldr	r2, [pc, #188]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002696:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800269a:	6413      	str	r3, [r2, #64]	@ 0x40
 800269c:	4b2d      	ldr	r3, [pc, #180]	@ (8002754 <HAL_UART_MspInit+0x160>)
 800269e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026a4:	61bb      	str	r3, [r7, #24]
 80026a6:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026a8:	2300      	movs	r3, #0
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <HAL_UART_MspInit+0x160>)
 80026ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026b0:	4a28      	ldr	r2, [pc, #160]	@ (8002754 <HAL_UART_MspInit+0x160>)
 80026b2:	f043 0301 	orr.w	r3, r3, #1
 80026b6:	6313      	str	r3, [r2, #48]	@ 0x30
 80026b8:	4b26      	ldr	r3, [pc, #152]	@ (8002754 <HAL_UART_MspInit+0x160>)
 80026ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026bc:	f003 0301 	and.w	r3, r3, #1
 80026c0:	617b      	str	r3, [r7, #20]
 80026c2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80026c4:	230c      	movs	r3, #12
 80026c6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026c8:	2302      	movs	r3, #2
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026cc:	2300      	movs	r3, #0
 80026ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026d0:	2300      	movs	r3, #0
 80026d2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80026d4:	2307      	movs	r3, #7
 80026d6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80026dc:	4619      	mov	r1, r3
 80026de:	481e      	ldr	r0, [pc, #120]	@ (8002758 <HAL_UART_MspInit+0x164>)
 80026e0:	f000 fab2 	bl	8002c48 <HAL_GPIO_Init>
}
 80026e4:	e030      	b.n	8002748 <HAL_UART_MspInit+0x154>
  else if(uartHandle->Instance==USART6)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	4a1d      	ldr	r2, [pc, #116]	@ (8002760 <HAL_UART_MspInit+0x16c>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d12b      	bne.n	8002748 <HAL_UART_MspInit+0x154>
    __HAL_RCC_USART6_CLK_ENABLE();
 80026f0:	2300      	movs	r3, #0
 80026f2:	613b      	str	r3, [r7, #16]
 80026f4:	4b17      	ldr	r3, [pc, #92]	@ (8002754 <HAL_UART_MspInit+0x160>)
 80026f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026f8:	4a16      	ldr	r2, [pc, #88]	@ (8002754 <HAL_UART_MspInit+0x160>)
 80026fa:	f043 0320 	orr.w	r3, r3, #32
 80026fe:	6453      	str	r3, [r2, #68]	@ 0x44
 8002700:	4b14      	ldr	r3, [pc, #80]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002704:	f003 0320 	and.w	r3, r3, #32
 8002708:	613b      	str	r3, [r7, #16]
 800270a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800270c:	2300      	movs	r3, #0
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	4b10      	ldr	r3, [pc, #64]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002712:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002714:	4a0f      	ldr	r2, [pc, #60]	@ (8002754 <HAL_UART_MspInit+0x160>)
 8002716:	f043 0304 	orr.w	r3, r3, #4
 800271a:	6313      	str	r3, [r2, #48]	@ 0x30
 800271c:	4b0d      	ldr	r3, [pc, #52]	@ (8002754 <HAL_UART_MspInit+0x160>)
 800271e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002720:	f003 0304 	and.w	r3, r3, #4
 8002724:	60fb      	str	r3, [r7, #12]
 8002726:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002728:	23c0      	movs	r3, #192	@ 0xc0
 800272a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272c:	2302      	movs	r3, #2
 800272e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002730:	2300      	movs	r3, #0
 8002732:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002734:	2303      	movs	r3, #3
 8002736:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002738:	2308      	movs	r3, #8
 800273a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800273c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002740:	4619      	mov	r1, r3
 8002742:	4808      	ldr	r0, [pc, #32]	@ (8002764 <HAL_UART_MspInit+0x170>)
 8002744:	f000 fa80 	bl	8002c48 <HAL_GPIO_Init>
}
 8002748:	bf00      	nop
 800274a:	3738      	adds	r7, #56	@ 0x38
 800274c:	46bd      	mov	sp, r7
 800274e:	bd80      	pop	{r7, pc}
 8002750:	40011000 	.word	0x40011000
 8002754:	40023800 	.word	0x40023800
 8002758:	40020000 	.word	0x40020000
 800275c:	40004400 	.word	0x40004400
 8002760:	40011400 	.word	0x40011400
 8002764:	40020800 	.word	0x40020800

08002768 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002768:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027a0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 800276c:	f7ff feb2 	bl	80024d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002770:	480c      	ldr	r0, [pc, #48]	@ (80027a4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002772:	490d      	ldr	r1, [pc, #52]	@ (80027a8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002778:	e002      	b.n	8002780 <LoopCopyDataInit>

0800277a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800277a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800277c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800277e:	3304      	adds	r3, #4

08002780 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002780:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002782:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002784:	d3f9      	bcc.n	800277a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002786:	4a0a      	ldr	r2, [pc, #40]	@ (80027b0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002788:	4c0a      	ldr	r4, [pc, #40]	@ (80027b4 <LoopFillZerobss+0x22>)
  movs r3, #0
 800278a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800278c:	e001      	b.n	8002792 <LoopFillZerobss>

0800278e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800278e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002790:	3204      	adds	r2, #4

08002792 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002792:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002794:	d3fb      	bcc.n	800278e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002796:	f002 fb31 	bl	8004dfc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800279a:	f7ff f88f 	bl	80018bc <main>
  bx  lr    
 800279e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80027a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027a8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80027ac:	080068e4 	.word	0x080068e4
  ldr r2, =_sbss
 80027b0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80027b4:	200086b4 	.word	0x200086b4

080027b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027b8:	e7fe      	b.n	80027b8 <ADC_IRQHandler>
	...

080027bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027c0:	4b0e      	ldr	r3, [pc, #56]	@ (80027fc <HAL_Init+0x40>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0d      	ldr	r2, [pc, #52]	@ (80027fc <HAL_Init+0x40>)
 80027c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027cc:	4b0b      	ldr	r3, [pc, #44]	@ (80027fc <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0a      	ldr	r2, [pc, #40]	@ (80027fc <HAL_Init+0x40>)
 80027d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a07      	ldr	r2, [pc, #28]	@ (80027fc <HAL_Init+0x40>)
 80027de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027e4:	2003      	movs	r0, #3
 80027e6:	f000 f94f 	bl	8002a88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027ea:	2000      	movs	r0, #0
 80027ec:	f000 f808 	bl	8002800 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027f0:	f7ff fdd8 	bl	80023a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40023c00 	.word	0x40023c00

08002800 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b082      	sub	sp, #8
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002808:	4b12      	ldr	r3, [pc, #72]	@ (8002854 <HAL_InitTick+0x54>)
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b12      	ldr	r3, [pc, #72]	@ (8002858 <HAL_InitTick+0x58>)
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	4619      	mov	r1, r3
 8002812:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002816:	fbb3 f3f1 	udiv	r3, r3, r1
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4618      	mov	r0, r3
 8002820:	f000 f967 	bl	8002af2 <HAL_SYSTICK_Config>
 8002824:	4603      	mov	r3, r0
 8002826:	2b00      	cmp	r3, #0
 8002828:	d001      	beq.n	800282e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	e00e      	b.n	800284c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	2b0f      	cmp	r3, #15
 8002832:	d80a      	bhi.n	800284a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002834:	2200      	movs	r2, #0
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	f04f 30ff 	mov.w	r0, #4294967295
 800283c:	f000 f92f 	bl	8002a9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002840:	4a06      	ldr	r2, [pc, #24]	@ (800285c <HAL_InitTick+0x5c>)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002846:	2300      	movs	r3, #0
 8002848:	e000      	b.n	800284c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
}
 800284c:	4618      	mov	r0, r3
 800284e:	3708      	adds	r7, #8
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}
 8002854:	20000000 	.word	0x20000000
 8002858:	20000008 	.word	0x20000008
 800285c:	20000004 	.word	0x20000004

08002860 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002864:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_IncTick+0x20>)
 8002866:	781b      	ldrb	r3, [r3, #0]
 8002868:	461a      	mov	r2, r3
 800286a:	4b06      	ldr	r3, [pc, #24]	@ (8002884 <HAL_IncTick+0x24>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4413      	add	r3, r2
 8002870:	4a04      	ldr	r2, [pc, #16]	@ (8002884 <HAL_IncTick+0x24>)
 8002872:	6013      	str	r3, [r2, #0]
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
 800287e:	bf00      	nop
 8002880:	20000008 	.word	0x20000008
 8002884:	20008568 	.word	0x20008568

08002888 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002888:	b480      	push	{r7}
 800288a:	af00      	add	r7, sp, #0
  return uwTick;
 800288c:	4b03      	ldr	r3, [pc, #12]	@ (800289c <HAL_GetTick+0x14>)
 800288e:	681b      	ldr	r3, [r3, #0]
}
 8002890:	4618      	mov	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002898:	4770      	bx	lr
 800289a:	bf00      	nop
 800289c:	20008568 	.word	0x20008568

080028a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028a8:	f7ff ffee 	bl	8002888 <HAL_GetTick>
 80028ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028b8:	d005      	beq.n	80028c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ba:	4b0a      	ldr	r3, [pc, #40]	@ (80028e4 <HAL_Delay+0x44>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	461a      	mov	r2, r3
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	4413      	add	r3, r2
 80028c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028c6:	bf00      	nop
 80028c8:	f7ff ffde 	bl	8002888 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	68bb      	ldr	r3, [r7, #8]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d8f7      	bhi.n	80028c8 <HAL_Delay+0x28>
  {
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3710      	adds	r7, #16
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	20000008 	.word	0x20000008

080028e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028f8:	4b0c      	ldr	r3, [pc, #48]	@ (800292c <__NVIC_SetPriorityGrouping+0x44>)
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002904:	4013      	ands	r3, r2
 8002906:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002910:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002914:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002918:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800291a:	4a04      	ldr	r2, [pc, #16]	@ (800292c <__NVIC_SetPriorityGrouping+0x44>)
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	60d3      	str	r3, [r2, #12]
}
 8002920:	bf00      	nop
 8002922:	3714      	adds	r7, #20
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	e000ed00 	.word	0xe000ed00

08002930 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002934:	4b04      	ldr	r3, [pc, #16]	@ (8002948 <__NVIC_GetPriorityGrouping+0x18>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	f003 0307 	and.w	r3, r3, #7
}
 800293e:	4618      	mov	r0, r3
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr
 8002948:	e000ed00 	.word	0xe000ed00

0800294c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800294c:	b480      	push	{r7}
 800294e:	b083      	sub	sp, #12
 8002950:	af00      	add	r7, sp, #0
 8002952:	4603      	mov	r3, r0
 8002954:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800295a:	2b00      	cmp	r3, #0
 800295c:	db0b      	blt.n	8002976 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800295e:	79fb      	ldrb	r3, [r7, #7]
 8002960:	f003 021f 	and.w	r2, r3, #31
 8002964:	4907      	ldr	r1, [pc, #28]	@ (8002984 <__NVIC_EnableIRQ+0x38>)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	095b      	lsrs	r3, r3, #5
 800296c:	2001      	movs	r0, #1
 800296e:	fa00 f202 	lsl.w	r2, r0, r2
 8002972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	e000e100 	.word	0xe000e100

08002988 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002988:	b480      	push	{r7}
 800298a:	b083      	sub	sp, #12
 800298c:	af00      	add	r7, sp, #0
 800298e:	4603      	mov	r3, r0
 8002990:	6039      	str	r1, [r7, #0]
 8002992:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002994:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db0a      	blt.n	80029b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	b2da      	uxtb	r2, r3
 80029a0:	490c      	ldr	r1, [pc, #48]	@ (80029d4 <__NVIC_SetPriority+0x4c>)
 80029a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a6:	0112      	lsls	r2, r2, #4
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	440b      	add	r3, r1
 80029ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029b0:	e00a      	b.n	80029c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	b2da      	uxtb	r2, r3
 80029b6:	4908      	ldr	r1, [pc, #32]	@ (80029d8 <__NVIC_SetPriority+0x50>)
 80029b8:	79fb      	ldrb	r3, [r7, #7]
 80029ba:	f003 030f 	and.w	r3, r3, #15
 80029be:	3b04      	subs	r3, #4
 80029c0:	0112      	lsls	r2, r2, #4
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	440b      	add	r3, r1
 80029c6:	761a      	strb	r2, [r3, #24]
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr
 80029d4:	e000e100 	.word	0xe000e100
 80029d8:	e000ed00 	.word	0xe000ed00

080029dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029dc:	b480      	push	{r7}
 80029de:	b089      	sub	sp, #36	@ 0x24
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	f1c3 0307 	rsb	r3, r3, #7
 80029f6:	2b04      	cmp	r3, #4
 80029f8:	bf28      	it	cs
 80029fa:	2304      	movcs	r3, #4
 80029fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029fe:	69fb      	ldr	r3, [r7, #28]
 8002a00:	3304      	adds	r3, #4
 8002a02:	2b06      	cmp	r3, #6
 8002a04:	d902      	bls.n	8002a0c <NVIC_EncodePriority+0x30>
 8002a06:	69fb      	ldr	r3, [r7, #28]
 8002a08:	3b03      	subs	r3, #3
 8002a0a:	e000      	b.n	8002a0e <NVIC_EncodePriority+0x32>
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a10:	f04f 32ff 	mov.w	r2, #4294967295
 8002a14:	69bb      	ldr	r3, [r7, #24]
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43da      	mvns	r2, r3
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	401a      	ands	r2, r3
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a24:	f04f 31ff 	mov.w	r1, #4294967295
 8002a28:	697b      	ldr	r3, [r7, #20]
 8002a2a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a2e:	43d9      	mvns	r1, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a34:	4313      	orrs	r3, r2
         );
}
 8002a36:	4618      	mov	r0, r3
 8002a38:	3724      	adds	r7, #36	@ 0x24
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
	...

08002a44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	3b01      	subs	r3, #1
 8002a50:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a54:	d301      	bcc.n	8002a5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a56:	2301      	movs	r3, #1
 8002a58:	e00f      	b.n	8002a7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002a84 <SysTick_Config+0x40>)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3b01      	subs	r3, #1
 8002a60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a62:	210f      	movs	r1, #15
 8002a64:	f04f 30ff 	mov.w	r0, #4294967295
 8002a68:	f7ff ff8e 	bl	8002988 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a6c:	4b05      	ldr	r3, [pc, #20]	@ (8002a84 <SysTick_Config+0x40>)
 8002a6e:	2200      	movs	r2, #0
 8002a70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a72:	4b04      	ldr	r3, [pc, #16]	@ (8002a84 <SysTick_Config+0x40>)
 8002a74:	2207      	movs	r2, #7
 8002a76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3708      	adds	r7, #8
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	e000e010 	.word	0xe000e010

08002a88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f7ff ff29 	bl	80028e8 <__NVIC_SetPriorityGrouping>
}
 8002a96:	bf00      	nop
 8002a98:	3708      	adds	r7, #8
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}

08002a9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a9e:	b580      	push	{r7, lr}
 8002aa0:	b086      	sub	sp, #24
 8002aa2:	af00      	add	r7, sp, #0
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	60b9      	str	r1, [r7, #8]
 8002aa8:	607a      	str	r2, [r7, #4]
 8002aaa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002aac:	2300      	movs	r3, #0
 8002aae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ab0:	f7ff ff3e 	bl	8002930 <__NVIC_GetPriorityGrouping>
 8002ab4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	68b9      	ldr	r1, [r7, #8]
 8002aba:	6978      	ldr	r0, [r7, #20]
 8002abc:	f7ff ff8e 	bl	80029dc <NVIC_EncodePriority>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ac6:	4611      	mov	r1, r2
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff ff5d 	bl	8002988 <__NVIC_SetPriority>
}
 8002ace:	bf00      	nop
 8002ad0:	3718      	adds	r7, #24
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}

08002ad6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ad6:	b580      	push	{r7, lr}
 8002ad8:	b082      	sub	sp, #8
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	4603      	mov	r3, r0
 8002ade:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f7ff ff31 	bl	800294c <__NVIC_EnableIRQ>
}
 8002aea:	bf00      	nop
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}

08002af2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002af2:	b580      	push	{r7, lr}
 8002af4:	b082      	sub	sp, #8
 8002af6:	af00      	add	r7, sp, #0
 8002af8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f7ff ffa2 	bl	8002a44 <SysTick_Config>
 8002b00:	4603      	mov	r3, r0
}
 8002b02:	4618      	mov	r0, r3
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b084      	sub	sp, #16
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b16:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b18:	f7ff feb6 	bl	8002888 <HAL_GetTick>
 8002b1c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	2b02      	cmp	r3, #2
 8002b28:	d008      	beq.n	8002b3c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2280      	movs	r2, #128	@ 0x80
 8002b2e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e052      	b.n	8002be2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f022 0216 	bic.w	r2, r2, #22
 8002b4a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b5a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d103      	bne.n	8002b6c <HAL_DMA_Abort+0x62>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d007      	beq.n	8002b7c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0208 	bic.w	r2, r2, #8
 8002b7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	681a      	ldr	r2, [r3, #0]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f022 0201 	bic.w	r2, r2, #1
 8002b8a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b8c:	e013      	b.n	8002bb6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b8e:	f7ff fe7b 	bl	8002888 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b05      	cmp	r3, #5
 8002b9a:	d90c      	bls.n	8002bb6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	2220      	movs	r2, #32
 8002ba0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	2203      	movs	r2, #3
 8002ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bb2:	2303      	movs	r3, #3
 8002bb4:	e015      	b.n	8002be2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0301 	and.w	r3, r3, #1
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1e4      	bne.n	8002b8e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bc8:	223f      	movs	r2, #63	@ 0x3f
 8002bca:	409a      	lsls	r2, r3
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2201      	movs	r2, #1
 8002bd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}

08002bea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bea:	b480      	push	{r7}
 8002bec:	b083      	sub	sp, #12
 8002bee:	af00      	add	r7, sp, #0
 8002bf0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002bf8:	b2db      	uxtb	r3, r3
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d004      	beq.n	8002c08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2280      	movs	r2, #128	@ 0x80
 8002c02:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	e00c      	b.n	8002c22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2205      	movs	r2, #5
 8002c0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b089      	sub	sp, #36	@ 0x24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	e159      	b.n	8002f18 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c64:	2201      	movs	r2, #1
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	697a      	ldr	r2, [r7, #20]
 8002c74:	4013      	ands	r3, r2
 8002c76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	f040 8148 	bne.w	8002f12 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d005      	beq.n	8002c9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d130      	bne.n	8002cfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	005b      	lsls	r3, r3, #1
 8002ca4:	2203      	movs	r2, #3
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	43db      	mvns	r3, r3
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	4013      	ands	r3, r2
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68da      	ldr	r2, [r3, #12]
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	005b      	lsls	r3, r3, #1
 8002cba:	fa02 f303 	lsl.w	r3, r2, r3
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	69ba      	ldr	r2, [r7, #24]
 8002cdc:	4013      	ands	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	685b      	ldr	r3, [r3, #4]
 8002ce4:	091b      	lsrs	r3, r3, #4
 8002ce6:	f003 0201 	and.w	r2, r3, #1
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0303 	and.w	r3, r3, #3
 8002d04:	2b03      	cmp	r3, #3
 8002d06:	d017      	beq.n	8002d38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	005b      	lsls	r3, r3, #1
 8002d12:	2203      	movs	r2, #3
 8002d14:	fa02 f303 	lsl.w	r3, r2, r3
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	005b      	lsls	r3, r3, #1
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	69ba      	ldr	r2, [r7, #24]
 8002d36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	f003 0303 	and.w	r3, r3, #3
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d123      	bne.n	8002d8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	08da      	lsrs	r2, r3, #3
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	3208      	adds	r2, #8
 8002d4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	220f      	movs	r2, #15
 8002d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d60:	43db      	mvns	r3, r3
 8002d62:	69ba      	ldr	r2, [r7, #24]
 8002d64:	4013      	ands	r3, r2
 8002d66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d68:	683b      	ldr	r3, [r7, #0]
 8002d6a:	691a      	ldr	r2, [r3, #16]
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0307 	and.w	r3, r3, #7
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	08da      	lsrs	r2, r3, #3
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	3208      	adds	r2, #8
 8002d86:	69b9      	ldr	r1, [r7, #24]
 8002d88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d92:	69fb      	ldr	r3, [r7, #28]
 8002d94:	005b      	lsls	r3, r3, #1
 8002d96:	2203      	movs	r2, #3
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	43db      	mvns	r3, r3
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4013      	ands	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f003 0203 	and.w	r2, r3, #3
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	005b      	lsls	r3, r3, #1
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	4313      	orrs	r3, r2
 8002db8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	69ba      	ldr	r2, [r7, #24]
 8002dbe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80a2 	beq.w	8002f12 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	60fb      	str	r3, [r7, #12]
 8002dd2:	4b57      	ldr	r3, [pc, #348]	@ (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	4a56      	ldr	r2, [pc, #344]	@ (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002dd8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ddc:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dde:	4b54      	ldr	r3, [pc, #336]	@ (8002f30 <HAL_GPIO_Init+0x2e8>)
 8002de0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002de2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dea:	4a52      	ldr	r2, [pc, #328]	@ (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	089b      	lsrs	r3, r3, #2
 8002df0:	3302      	adds	r3, #2
 8002df2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	f003 0303 	and.w	r3, r3, #3
 8002dfe:	009b      	lsls	r3, r3, #2
 8002e00:	220f      	movs	r2, #15
 8002e02:	fa02 f303 	lsl.w	r3, r2, r3
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69ba      	ldr	r2, [r7, #24]
 8002e0a:	4013      	ands	r3, r2
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a49      	ldr	r2, [pc, #292]	@ (8002f38 <HAL_GPIO_Init+0x2f0>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d019      	beq.n	8002e4a <HAL_GPIO_Init+0x202>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a48      	ldr	r2, [pc, #288]	@ (8002f3c <HAL_GPIO_Init+0x2f4>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d013      	beq.n	8002e46 <HAL_GPIO_Init+0x1fe>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a47      	ldr	r2, [pc, #284]	@ (8002f40 <HAL_GPIO_Init+0x2f8>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d00d      	beq.n	8002e42 <HAL_GPIO_Init+0x1fa>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a46      	ldr	r2, [pc, #280]	@ (8002f44 <HAL_GPIO_Init+0x2fc>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d007      	beq.n	8002e3e <HAL_GPIO_Init+0x1f6>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a45      	ldr	r2, [pc, #276]	@ (8002f48 <HAL_GPIO_Init+0x300>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d101      	bne.n	8002e3a <HAL_GPIO_Init+0x1f2>
 8002e36:	2304      	movs	r3, #4
 8002e38:	e008      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e3a:	2307      	movs	r3, #7
 8002e3c:	e006      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e3e:	2303      	movs	r3, #3
 8002e40:	e004      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e002      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <HAL_GPIO_Init+0x204>
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	69fa      	ldr	r2, [r7, #28]
 8002e4e:	f002 0203 	and.w	r2, r2, #3
 8002e52:	0092      	lsls	r2, r2, #2
 8002e54:	4093      	lsls	r3, r2
 8002e56:	69ba      	ldr	r2, [r7, #24]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e5c:	4935      	ldr	r1, [pc, #212]	@ (8002f34 <HAL_GPIO_Init+0x2ec>)
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	089b      	lsrs	r3, r3, #2
 8002e62:	3302      	adds	r3, #2
 8002e64:	69ba      	ldr	r2, [r7, #24]
 8002e66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e6a:	4b38      	ldr	r3, [pc, #224]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002e6c:	689b      	ldr	r3, [r3, #8]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e8e:	4a2f      	ldr	r2, [pc, #188]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e94:	4b2d      	ldr	r3, [pc, #180]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002e96:	68db      	ldr	r3, [r3, #12]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eb8:	4a24      	ldr	r2, [pc, #144]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ebe:	4b23      	ldr	r3, [pc, #140]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	43db      	mvns	r3, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4013      	ands	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d003      	beq.n	8002ee2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002eda:	69ba      	ldr	r2, [r7, #24]
 8002edc:	693b      	ldr	r3, [r7, #16]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ee2:	4a1a      	ldr	r2, [pc, #104]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002ee4:	69bb      	ldr	r3, [r7, #24]
 8002ee6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ee8:	4b18      	ldr	r3, [pc, #96]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	693b      	ldr	r3, [r7, #16]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f0c:	4a0f      	ldr	r2, [pc, #60]	@ (8002f4c <HAL_GPIO_Init+0x304>)
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f12:	69fb      	ldr	r3, [r7, #28]
 8002f14:	3301      	adds	r3, #1
 8002f16:	61fb      	str	r3, [r7, #28]
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	2b0f      	cmp	r3, #15
 8002f1c:	f67f aea2 	bls.w	8002c64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f20:	bf00      	nop
 8002f22:	bf00      	nop
 8002f24:	3724      	adds	r7, #36	@ 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
 8002f2e:	bf00      	nop
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40013800 	.word	0x40013800
 8002f38:	40020000 	.word	0x40020000
 8002f3c:	40020400 	.word	0x40020400
 8002f40:	40020800 	.word	0x40020800
 8002f44:	40020c00 	.word	0x40020c00
 8002f48:	40021000 	.word	0x40021000
 8002f4c:	40013c00 	.word	0x40013c00

08002f50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	460b      	mov	r3, r1
 8002f5a:	807b      	strh	r3, [r7, #2]
 8002f5c:	4613      	mov	r3, r2
 8002f5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f60:	787b      	ldrb	r3, [r7, #1]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d003      	beq.n	8002f6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f66:	887a      	ldrh	r2, [r7, #2]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f6c:	e003      	b.n	8002f76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f6e:	887b      	ldrh	r3, [r7, #2]
 8002f70:	041a      	lsls	r2, r3, #16
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	619a      	str	r2, [r3, #24]
}
 8002f76:	bf00      	nop
 8002f78:	370c      	adds	r7, #12
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
	...

08002f84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e267      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d075      	beq.n	800308e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fa2:	4b88      	ldr	r3, [pc, #544]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	f003 030c 	and.w	r3, r3, #12
 8002faa:	2b04      	cmp	r3, #4
 8002fac:	d00c      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fae:	4b85      	ldr	r3, [pc, #532]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002fb6:	2b08      	cmp	r3, #8
 8002fb8:	d112      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fba:	4b82      	ldr	r3, [pc, #520]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fc6:	d10b      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fc8:	4b7e      	ldr	r3, [pc, #504]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d05b      	beq.n	800308c <HAL_RCC_OscConfig+0x108>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	685b      	ldr	r3, [r3, #4]
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d157      	bne.n	800308c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fdc:	2301      	movs	r3, #1
 8002fde:	e242      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fe8:	d106      	bne.n	8002ff8 <HAL_RCC_OscConfig+0x74>
 8002fea:	4b76      	ldr	r3, [pc, #472]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4a75      	ldr	r2, [pc, #468]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8002ff0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ff4:	6013      	str	r3, [r2, #0]
 8002ff6:	e01d      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003000:	d10c      	bne.n	800301c <HAL_RCC_OscConfig+0x98>
 8003002:	4b70      	ldr	r3, [pc, #448]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a6f      	ldr	r2, [pc, #444]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003008:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800300c:	6013      	str	r3, [r2, #0]
 800300e:	4b6d      	ldr	r3, [pc, #436]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a6c      	ldr	r2, [pc, #432]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003018:	6013      	str	r3, [r2, #0]
 800301a:	e00b      	b.n	8003034 <HAL_RCC_OscConfig+0xb0>
 800301c:	4b69      	ldr	r3, [pc, #420]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a68      	ldr	r2, [pc, #416]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003022:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003026:	6013      	str	r3, [r2, #0]
 8003028:	4b66      	ldr	r3, [pc, #408]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a65      	ldr	r2, [pc, #404]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 800302e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003032:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d013      	beq.n	8003064 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303c:	f7ff fc24 	bl	8002888 <HAL_GetTick>
 8003040:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003042:	e008      	b.n	8003056 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003044:	f7ff fc20 	bl	8002888 <HAL_GetTick>
 8003048:	4602      	mov	r2, r0
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	1ad3      	subs	r3, r2, r3
 800304e:	2b64      	cmp	r3, #100	@ 0x64
 8003050:	d901      	bls.n	8003056 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003052:	2303      	movs	r3, #3
 8003054:	e207      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003056:	4b5b      	ldr	r3, [pc, #364]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d0f0      	beq.n	8003044 <HAL_RCC_OscConfig+0xc0>
 8003062:	e014      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003064:	f7ff fc10 	bl	8002888 <HAL_GetTick>
 8003068:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800306c:	f7ff fc0c 	bl	8002888 <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	@ 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e1f3      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800307e:	4b51      	ldr	r3, [pc, #324]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCC_OscConfig+0xe8>
 800308a:	e000      	b.n	800308e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800308c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f003 0302 	and.w	r3, r3, #2
 8003096:	2b00      	cmp	r3, #0
 8003098:	d063      	beq.n	8003162 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800309a:	4b4a      	ldr	r3, [pc, #296]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 800309c:	689b      	ldr	r3, [r3, #8]
 800309e:	f003 030c 	and.w	r3, r3, #12
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d00b      	beq.n	80030be <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030a6:	4b47      	ldr	r3, [pc, #284]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80030ae:	2b08      	cmp	r3, #8
 80030b0:	d11c      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b2:	4b44      	ldr	r3, [pc, #272]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d116      	bne.n	80030ec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030be:	4b41      	ldr	r3, [pc, #260]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0302 	and.w	r3, r3, #2
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d005      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	68db      	ldr	r3, [r3, #12]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d001      	beq.n	80030d6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d2:	2301      	movs	r3, #1
 80030d4:	e1c7      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030d6:	4b3b      	ldr	r3, [pc, #236]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	4937      	ldr	r1, [pc, #220]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ea:	e03a      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d020      	beq.n	8003136 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f4:	4b34      	ldr	r3, [pc, #208]	@ (80031c8 <HAL_RCC_OscConfig+0x244>)
 80030f6:	2201      	movs	r2, #1
 80030f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fa:	f7ff fbc5 	bl	8002888 <HAL_GetTick>
 80030fe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003100:	e008      	b.n	8003114 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003102:	f7ff fbc1 	bl	8002888 <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	2b02      	cmp	r3, #2
 800310e:	d901      	bls.n	8003114 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e1a8      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003114:	4b2b      	ldr	r3, [pc, #172]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0f0      	beq.n	8003102 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003120:	4b28      	ldr	r3, [pc, #160]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	691b      	ldr	r3, [r3, #16]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4925      	ldr	r1, [pc, #148]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003130:	4313      	orrs	r3, r2
 8003132:	600b      	str	r3, [r1, #0]
 8003134:	e015      	b.n	8003162 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003136:	4b24      	ldr	r3, [pc, #144]	@ (80031c8 <HAL_RCC_OscConfig+0x244>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800313c:	f7ff fba4 	bl	8002888 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003144:	f7ff fba0 	bl	8002888 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e187      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003156:	4b1b      	ldr	r3, [pc, #108]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0308 	and.w	r3, r3, #8
 800316a:	2b00      	cmp	r3, #0
 800316c:	d036      	beq.n	80031dc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d016      	beq.n	80031a4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003176:	4b15      	ldr	r3, [pc, #84]	@ (80031cc <HAL_RCC_OscConfig+0x248>)
 8003178:	2201      	movs	r2, #1
 800317a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317c:	f7ff fb84 	bl	8002888 <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003184:	f7ff fb80 	bl	8002888 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e167      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003196:	4b0b      	ldr	r3, [pc, #44]	@ (80031c4 <HAL_RCC_OscConfig+0x240>)
 8003198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x200>
 80031a2:	e01b      	b.n	80031dc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a4:	4b09      	ldr	r3, [pc, #36]	@ (80031cc <HAL_RCC_OscConfig+0x248>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031aa:	f7ff fb6d 	bl	8002888 <HAL_GetTick>
 80031ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b0:	e00e      	b.n	80031d0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80031b2:	f7ff fb69 	bl	8002888 <HAL_GetTick>
 80031b6:	4602      	mov	r2, r0
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	1ad3      	subs	r3, r2, r3
 80031bc:	2b02      	cmp	r3, #2
 80031be:	d907      	bls.n	80031d0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80031c0:	2303      	movs	r3, #3
 80031c2:	e150      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
 80031c4:	40023800 	.word	0x40023800
 80031c8:	42470000 	.word	0x42470000
 80031cc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031d0:	4b88      	ldr	r3, [pc, #544]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80031d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80031d4:	f003 0302 	and.w	r3, r3, #2
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1ea      	bne.n	80031b2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f000 8097 	beq.w	8003318 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031ea:	2300      	movs	r3, #0
 80031ec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031ee:	4b81      	ldr	r3, [pc, #516]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10f      	bne.n	800321a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60bb      	str	r3, [r7, #8]
 80031fe:	4b7d      	ldr	r3, [pc, #500]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003202:	4a7c      	ldr	r2, [pc, #496]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003204:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003208:	6413      	str	r3, [r2, #64]	@ 0x40
 800320a:	4b7a      	ldr	r3, [pc, #488]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800320e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003212:	60bb      	str	r3, [r7, #8]
 8003214:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003216:	2301      	movs	r3, #1
 8003218:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800321a:	4b77      	ldr	r3, [pc, #476]	@ (80033f8 <HAL_RCC_OscConfig+0x474>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d118      	bne.n	8003258 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003226:	4b74      	ldr	r3, [pc, #464]	@ (80033f8 <HAL_RCC_OscConfig+0x474>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a73      	ldr	r2, [pc, #460]	@ (80033f8 <HAL_RCC_OscConfig+0x474>)
 800322c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003230:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003232:	f7ff fb29 	bl	8002888 <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800323a:	f7ff fb25 	bl	8002888 <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e10c      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800324c:	4b6a      	ldr	r3, [pc, #424]	@ (80033f8 <HAL_RCC_OscConfig+0x474>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	2b01      	cmp	r3, #1
 800325e:	d106      	bne.n	800326e <HAL_RCC_OscConfig+0x2ea>
 8003260:	4b64      	ldr	r3, [pc, #400]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003262:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003264:	4a63      	ldr	r2, [pc, #396]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003266:	f043 0301 	orr.w	r3, r3, #1
 800326a:	6713      	str	r3, [r2, #112]	@ 0x70
 800326c:	e01c      	b.n	80032a8 <HAL_RCC_OscConfig+0x324>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b05      	cmp	r3, #5
 8003274:	d10c      	bne.n	8003290 <HAL_RCC_OscConfig+0x30c>
 8003276:	4b5f      	ldr	r3, [pc, #380]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003278:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800327a:	4a5e      	ldr	r2, [pc, #376]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 800327c:	f043 0304 	orr.w	r3, r3, #4
 8003280:	6713      	str	r3, [r2, #112]	@ 0x70
 8003282:	4b5c      	ldr	r3, [pc, #368]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	4a5b      	ldr	r2, [pc, #364]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	6713      	str	r3, [r2, #112]	@ 0x70
 800328e:	e00b      	b.n	80032a8 <HAL_RCC_OscConfig+0x324>
 8003290:	4b58      	ldr	r3, [pc, #352]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003294:	4a57      	ldr	r2, [pc, #348]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003296:	f023 0301 	bic.w	r3, r3, #1
 800329a:	6713      	str	r3, [r2, #112]	@ 0x70
 800329c:	4b55      	ldr	r3, [pc, #340]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 800329e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032a0:	4a54      	ldr	r2, [pc, #336]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032a2:	f023 0304 	bic.w	r3, r3, #4
 80032a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	689b      	ldr	r3, [r3, #8]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d015      	beq.n	80032dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032b0:	f7ff faea 	bl	8002888 <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032b6:	e00a      	b.n	80032ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032b8:	f7ff fae6 	bl	8002888 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d901      	bls.n	80032ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80032ca:	2303      	movs	r3, #3
 80032cc:	e0cb      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032ce:	4b49      	ldr	r3, [pc, #292]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d0ee      	beq.n	80032b8 <HAL_RCC_OscConfig+0x334>
 80032da:	e014      	b.n	8003306 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032dc:	f7ff fad4 	bl	8002888 <HAL_GetTick>
 80032e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032e2:	e00a      	b.n	80032fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032e4:	f7ff fad0 	bl	8002888 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e0b5      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032fa:	4b3e      	ldr	r3, [pc, #248]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80032fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032fe:	f003 0302 	and.w	r3, r3, #2
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1ee      	bne.n	80032e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003306:	7dfb      	ldrb	r3, [r7, #23]
 8003308:	2b01      	cmp	r3, #1
 800330a:	d105      	bne.n	8003318 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800330c:	4b39      	ldr	r3, [pc, #228]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 800330e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003310:	4a38      	ldr	r2, [pc, #224]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003312:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003316:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	699b      	ldr	r3, [r3, #24]
 800331c:	2b00      	cmp	r3, #0
 800331e:	f000 80a1 	beq.w	8003464 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003322:	4b34      	ldr	r3, [pc, #208]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003324:	689b      	ldr	r3, [r3, #8]
 8003326:	f003 030c 	and.w	r3, r3, #12
 800332a:	2b08      	cmp	r3, #8
 800332c:	d05c      	beq.n	80033e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	699b      	ldr	r3, [r3, #24]
 8003332:	2b02      	cmp	r3, #2
 8003334:	d141      	bne.n	80033ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003336:	4b31      	ldr	r3, [pc, #196]	@ (80033fc <HAL_RCC_OscConfig+0x478>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800333c:	f7ff faa4 	bl	8002888 <HAL_GetTick>
 8003340:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003342:	e008      	b.n	8003356 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003344:	f7ff faa0 	bl	8002888 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	2b02      	cmp	r3, #2
 8003350:	d901      	bls.n	8003356 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e087      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	4b27      	ldr	r3, [pc, #156]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d1f0      	bne.n	8003344 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	69da      	ldr	r2, [r3, #28]
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6a1b      	ldr	r3, [r3, #32]
 800336a:	431a      	orrs	r2, r3
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003370:	019b      	lsls	r3, r3, #6
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003378:	085b      	lsrs	r3, r3, #1
 800337a:	3b01      	subs	r3, #1
 800337c:	041b      	lsls	r3, r3, #16
 800337e:	431a      	orrs	r2, r3
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003384:	061b      	lsls	r3, r3, #24
 8003386:	491b      	ldr	r1, [pc, #108]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 8003388:	4313      	orrs	r3, r2
 800338a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800338c:	4b1b      	ldr	r3, [pc, #108]	@ (80033fc <HAL_RCC_OscConfig+0x478>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003392:	f7ff fa79 	bl	8002888 <HAL_GetTick>
 8003396:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003398:	e008      	b.n	80033ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800339a:	f7ff fa75 	bl	8002888 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d901      	bls.n	80033ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80033a8:	2303      	movs	r3, #3
 80033aa:	e05c      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ac:	4b11      	ldr	r3, [pc, #68]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d0f0      	beq.n	800339a <HAL_RCC_OscConfig+0x416>
 80033b8:	e054      	b.n	8003464 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033ba:	4b10      	ldr	r3, [pc, #64]	@ (80033fc <HAL_RCC_OscConfig+0x478>)
 80033bc:	2200      	movs	r2, #0
 80033be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7ff fa62 	bl	8002888 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80033c8:	f7ff fa5e 	bl	8002888 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e045      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033da:	4b06      	ldr	r3, [pc, #24]	@ (80033f4 <HAL_RCC_OscConfig+0x470>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1f0      	bne.n	80033c8 <HAL_RCC_OscConfig+0x444>
 80033e6:	e03d      	b.n	8003464 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	699b      	ldr	r3, [r3, #24]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e038      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	40007000 	.word	0x40007000
 80033fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003400:	4b1b      	ldr	r3, [pc, #108]	@ (8003470 <HAL_RCC_OscConfig+0x4ec>)
 8003402:	685b      	ldr	r3, [r3, #4]
 8003404:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	699b      	ldr	r3, [r3, #24]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d028      	beq.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003418:	429a      	cmp	r2, r3
 800341a:	d121      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003426:	429a      	cmp	r2, r3
 8003428:	d11a      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003430:	4013      	ands	r3, r2
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003436:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003438:	4293      	cmp	r3, r2
 800343a:	d111      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003446:	085b      	lsrs	r3, r3, #1
 8003448:	3b01      	subs	r3, #1
 800344a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800344c:	429a      	cmp	r2, r3
 800344e:	d107      	bne.n	8003460 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800345a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800345c:	429a      	cmp	r2, r3
 800345e:	d001      	beq.n	8003464 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e000      	b.n	8003466 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3718      	adds	r7, #24
 800346a:	46bd      	mov	sp, r7
 800346c:	bd80      	pop	{r7, pc}
 800346e:	bf00      	nop
 8003470:	40023800 	.word	0x40023800

08003474 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d101      	bne.n	8003488 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003484:	2301      	movs	r3, #1
 8003486:	e0cc      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003488:	4b68      	ldr	r3, [pc, #416]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	683a      	ldr	r2, [r7, #0]
 8003492:	429a      	cmp	r2, r3
 8003494:	d90c      	bls.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003496:	4b65      	ldr	r3, [pc, #404]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003498:	683a      	ldr	r2, [r7, #0]
 800349a:	b2d2      	uxtb	r2, r2
 800349c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800349e:	4b63      	ldr	r3, [pc, #396]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	683a      	ldr	r2, [r7, #0]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d001      	beq.n	80034b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e0b8      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0302 	and.w	r3, r3, #2
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d020      	beq.n	80034fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f003 0304 	and.w	r3, r3, #4
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80034c8:	4b59      	ldr	r3, [pc, #356]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	4a58      	ldr	r2, [pc, #352]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80034d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d005      	beq.n	80034ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80034e0:	4b53      	ldr	r3, [pc, #332]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	4a52      	ldr	r2, [pc, #328]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80034ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034ec:	4b50      	ldr	r3, [pc, #320]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	494d      	ldr	r1, [pc, #308]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 0301 	and.w	r3, r3, #1
 8003506:	2b00      	cmp	r3, #0
 8003508:	d044      	beq.n	8003594 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	2b01      	cmp	r3, #1
 8003510:	d107      	bne.n	8003522 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003512:	4b47      	ldr	r3, [pc, #284]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800351a:	2b00      	cmp	r3, #0
 800351c:	d119      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e07f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d003      	beq.n	8003532 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800352e:	2b03      	cmp	r3, #3
 8003530:	d107      	bne.n	8003542 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003532:	4b3f      	ldr	r3, [pc, #252]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d109      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800353e:	2301      	movs	r3, #1
 8003540:	e06f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003542:	4b3b      	ldr	r3, [pc, #236]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0302 	and.w	r3, r3, #2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d101      	bne.n	8003552 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e067      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003552:	4b37      	ldr	r3, [pc, #220]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f023 0203 	bic.w	r2, r3, #3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	4934      	ldr	r1, [pc, #208]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003560:	4313      	orrs	r3, r2
 8003562:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003564:	f7ff f990 	bl	8002888 <HAL_GetTick>
 8003568:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800356a:	e00a      	b.n	8003582 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800356c:	f7ff f98c 	bl	8002888 <HAL_GetTick>
 8003570:	4602      	mov	r2, r0
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800357a:	4293      	cmp	r3, r2
 800357c:	d901      	bls.n	8003582 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e04f      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003582:	4b2b      	ldr	r3, [pc, #172]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f003 020c 	and.w	r2, r3, #12
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	009b      	lsls	r3, r3, #2
 8003590:	429a      	cmp	r2, r3
 8003592:	d1eb      	bne.n	800356c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003594:	4b25      	ldr	r3, [pc, #148]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0307 	and.w	r3, r3, #7
 800359c:	683a      	ldr	r2, [r7, #0]
 800359e:	429a      	cmp	r2, r3
 80035a0:	d20c      	bcs.n	80035bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a2:	4b22      	ldr	r3, [pc, #136]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035a4:	683a      	ldr	r2, [r7, #0]
 80035a6:	b2d2      	uxtb	r2, r2
 80035a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035aa:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_RCC_ClockConfig+0x1b8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	683a      	ldr	r2, [r7, #0]
 80035b4:	429a      	cmp	r2, r3
 80035b6:	d001      	beq.n	80035bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	e032      	b.n	8003622 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f003 0304 	and.w	r3, r3, #4
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d008      	beq.n	80035da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035c8:	4b19      	ldr	r3, [pc, #100]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68db      	ldr	r3, [r3, #12]
 80035d4:	4916      	ldr	r1, [pc, #88]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035d6:	4313      	orrs	r3, r2
 80035d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f003 0308 	and.w	r3, r3, #8
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d009      	beq.n	80035fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80035e6:	4b12      	ldr	r3, [pc, #72]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	490e      	ldr	r1, [pc, #56]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80035fa:	f000 f821 	bl	8003640 <HAL_RCC_GetSysClockFreq>
 80035fe:	4602      	mov	r2, r0
 8003600:	4b0b      	ldr	r3, [pc, #44]	@ (8003630 <HAL_RCC_ClockConfig+0x1bc>)
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	091b      	lsrs	r3, r3, #4
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	490a      	ldr	r1, [pc, #40]	@ (8003634 <HAL_RCC_ClockConfig+0x1c0>)
 800360c:	5ccb      	ldrb	r3, [r1, r3]
 800360e:	fa22 f303 	lsr.w	r3, r2, r3
 8003612:	4a09      	ldr	r2, [pc, #36]	@ (8003638 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003616:	4b09      	ldr	r3, [pc, #36]	@ (800363c <HAL_RCC_ClockConfig+0x1c8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f7ff f8f0 	bl	8002800 <HAL_InitTick>

  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3710      	adds	r7, #16
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023c00 	.word	0x40023c00
 8003630:	40023800 	.word	0x40023800
 8003634:	08006888 	.word	0x08006888
 8003638:	20000000 	.word	0x20000000
 800363c:	20000004 	.word	0x20000004

08003640 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003640:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003644:	b094      	sub	sp, #80	@ 0x50
 8003646:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003648:	2300      	movs	r3, #0
 800364a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800364c:	2300      	movs	r3, #0
 800364e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003650:	2300      	movs	r3, #0
 8003652:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003654:	2300      	movs	r3, #0
 8003656:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003658:	4b79      	ldr	r3, [pc, #484]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800365a:	689b      	ldr	r3, [r3, #8]
 800365c:	f003 030c 	and.w	r3, r3, #12
 8003660:	2b08      	cmp	r3, #8
 8003662:	d00d      	beq.n	8003680 <HAL_RCC_GetSysClockFreq+0x40>
 8003664:	2b08      	cmp	r3, #8
 8003666:	f200 80e1 	bhi.w	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
 800366a:	2b00      	cmp	r3, #0
 800366c:	d002      	beq.n	8003674 <HAL_RCC_GetSysClockFreq+0x34>
 800366e:	2b04      	cmp	r3, #4
 8003670:	d003      	beq.n	800367a <HAL_RCC_GetSysClockFreq+0x3a>
 8003672:	e0db      	b.n	800382c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003674:	4b73      	ldr	r3, [pc, #460]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 8003676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003678:	e0db      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800367a:	4b73      	ldr	r3, [pc, #460]	@ (8003848 <HAL_RCC_GetSysClockFreq+0x208>)
 800367c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800367e:	e0d8      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003680:	4b6f      	ldr	r3, [pc, #444]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003688:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800368a:	4b6d      	ldr	r3, [pc, #436]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d063      	beq.n	800375e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003696:	4b6a      	ldr	r3, [pc, #424]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	099b      	lsrs	r3, r3, #6
 800369c:	2200      	movs	r2, #0
 800369e:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80036a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80036a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80036aa:	2300      	movs	r3, #0
 80036ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80036ae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	f04f 0000 	mov.w	r0, #0
 80036ba:	f04f 0100 	mov.w	r1, #0
 80036be:	0159      	lsls	r1, r3, #5
 80036c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036c4:	0150      	lsls	r0, r2, #5
 80036c6:	4602      	mov	r2, r0
 80036c8:	460b      	mov	r3, r1
 80036ca:	4621      	mov	r1, r4
 80036cc:	1a51      	subs	r1, r2, r1
 80036ce:	6139      	str	r1, [r7, #16]
 80036d0:	4629      	mov	r1, r5
 80036d2:	eb63 0301 	sbc.w	r3, r3, r1
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	f04f 0200 	mov.w	r2, #0
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80036e4:	4659      	mov	r1, fp
 80036e6:	018b      	lsls	r3, r1, #6
 80036e8:	4651      	mov	r1, sl
 80036ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80036ee:	4651      	mov	r1, sl
 80036f0:	018a      	lsls	r2, r1, #6
 80036f2:	4651      	mov	r1, sl
 80036f4:	ebb2 0801 	subs.w	r8, r2, r1
 80036f8:	4659      	mov	r1, fp
 80036fa:	eb63 0901 	sbc.w	r9, r3, r1
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800370a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800370e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003712:	4690      	mov	r8, r2
 8003714:	4699      	mov	r9, r3
 8003716:	4623      	mov	r3, r4
 8003718:	eb18 0303 	adds.w	r3, r8, r3
 800371c:	60bb      	str	r3, [r7, #8]
 800371e:	462b      	mov	r3, r5
 8003720:	eb49 0303 	adc.w	r3, r9, r3
 8003724:	60fb      	str	r3, [r7, #12]
 8003726:	f04f 0200 	mov.w	r2, #0
 800372a:	f04f 0300 	mov.w	r3, #0
 800372e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003732:	4629      	mov	r1, r5
 8003734:	024b      	lsls	r3, r1, #9
 8003736:	4621      	mov	r1, r4
 8003738:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800373c:	4621      	mov	r1, r4
 800373e:	024a      	lsls	r2, r1, #9
 8003740:	4610      	mov	r0, r2
 8003742:	4619      	mov	r1, r3
 8003744:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003746:	2200      	movs	r2, #0
 8003748:	62bb      	str	r3, [r7, #40]	@ 0x28
 800374a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800374c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003750:	f7fc fd9e 	bl	8000290 <__aeabi_uldivmod>
 8003754:	4602      	mov	r2, r0
 8003756:	460b      	mov	r3, r1
 8003758:	4613      	mov	r3, r2
 800375a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800375c:	e058      	b.n	8003810 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375e:	4b38      	ldr	r3, [pc, #224]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	099b      	lsrs	r3, r3, #6
 8003764:	2200      	movs	r2, #0
 8003766:	4618      	mov	r0, r3
 8003768:	4611      	mov	r1, r2
 800376a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	2300      	movs	r3, #0
 8003772:	627b      	str	r3, [r7, #36]	@ 0x24
 8003774:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003778:	4642      	mov	r2, r8
 800377a:	464b      	mov	r3, r9
 800377c:	f04f 0000 	mov.w	r0, #0
 8003780:	f04f 0100 	mov.w	r1, #0
 8003784:	0159      	lsls	r1, r3, #5
 8003786:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800378a:	0150      	lsls	r0, r2, #5
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4641      	mov	r1, r8
 8003792:	ebb2 0a01 	subs.w	sl, r2, r1
 8003796:	4649      	mov	r1, r9
 8003798:	eb63 0b01 	sbc.w	fp, r3, r1
 800379c:	f04f 0200 	mov.w	r2, #0
 80037a0:	f04f 0300 	mov.w	r3, #0
 80037a4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80037a8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80037ac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80037b0:	ebb2 040a 	subs.w	r4, r2, sl
 80037b4:	eb63 050b 	sbc.w	r5, r3, fp
 80037b8:	f04f 0200 	mov.w	r2, #0
 80037bc:	f04f 0300 	mov.w	r3, #0
 80037c0:	00eb      	lsls	r3, r5, #3
 80037c2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037c6:	00e2      	lsls	r2, r4, #3
 80037c8:	4614      	mov	r4, r2
 80037ca:	461d      	mov	r5, r3
 80037cc:	4643      	mov	r3, r8
 80037ce:	18e3      	adds	r3, r4, r3
 80037d0:	603b      	str	r3, [r7, #0]
 80037d2:	464b      	mov	r3, r9
 80037d4:	eb45 0303 	adc.w	r3, r5, r3
 80037d8:	607b      	str	r3, [r7, #4]
 80037da:	f04f 0200 	mov.w	r2, #0
 80037de:	f04f 0300 	mov.w	r3, #0
 80037e2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037e6:	4629      	mov	r1, r5
 80037e8:	028b      	lsls	r3, r1, #10
 80037ea:	4621      	mov	r1, r4
 80037ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037f0:	4621      	mov	r1, r4
 80037f2:	028a      	lsls	r2, r1, #10
 80037f4:	4610      	mov	r0, r2
 80037f6:	4619      	mov	r1, r3
 80037f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80037fa:	2200      	movs	r2, #0
 80037fc:	61bb      	str	r3, [r7, #24]
 80037fe:	61fa      	str	r2, [r7, #28]
 8003800:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003804:	f7fc fd44 	bl	8000290 <__aeabi_uldivmod>
 8003808:	4602      	mov	r2, r0
 800380a:	460b      	mov	r3, r1
 800380c:	4613      	mov	r3, r2
 800380e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <HAL_RCC_GetSysClockFreq+0x200>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	0c1b      	lsrs	r3, r3, #16
 8003816:	f003 0303 	and.w	r3, r3, #3
 800381a:	3301      	adds	r3, #1
 800381c:	005b      	lsls	r3, r3, #1
 800381e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003820:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003822:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003824:	fbb2 f3f3 	udiv	r3, r2, r3
 8003828:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800382a:	e002      	b.n	8003832 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800382c:	4b05      	ldr	r3, [pc, #20]	@ (8003844 <HAL_RCC_GetSysClockFreq+0x204>)
 800382e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003830:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003832:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003834:	4618      	mov	r0, r3
 8003836:	3750      	adds	r7, #80	@ 0x50
 8003838:	46bd      	mov	sp, r7
 800383a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800383e:	bf00      	nop
 8003840:	40023800 	.word	0x40023800
 8003844:	00f42400 	.word	0x00f42400
 8003848:	007a1200 	.word	0x007a1200

0800384c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800384c:	b480      	push	{r7}
 800384e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003850:	4b03      	ldr	r3, [pc, #12]	@ (8003860 <HAL_RCC_GetHCLKFreq+0x14>)
 8003852:	681b      	ldr	r3, [r3, #0]
}
 8003854:	4618      	mov	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385c:	4770      	bx	lr
 800385e:	bf00      	nop
 8003860:	20000000 	.word	0x20000000

08003864 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003868:	f7ff fff0 	bl	800384c <HAL_RCC_GetHCLKFreq>
 800386c:	4602      	mov	r2, r0
 800386e:	4b05      	ldr	r3, [pc, #20]	@ (8003884 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	0a9b      	lsrs	r3, r3, #10
 8003874:	f003 0307 	and.w	r3, r3, #7
 8003878:	4903      	ldr	r1, [pc, #12]	@ (8003888 <HAL_RCC_GetPCLK1Freq+0x24>)
 800387a:	5ccb      	ldrb	r3, [r1, r3]
 800387c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003880:	4618      	mov	r0, r3
 8003882:	bd80      	pop	{r7, pc}
 8003884:	40023800 	.word	0x40023800
 8003888:	08006898 	.word	0x08006898

0800388c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003890:	f7ff ffdc 	bl	800384c <HAL_RCC_GetHCLKFreq>
 8003894:	4602      	mov	r2, r0
 8003896:	4b05      	ldr	r3, [pc, #20]	@ (80038ac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	0b5b      	lsrs	r3, r3, #13
 800389c:	f003 0307 	and.w	r3, r3, #7
 80038a0:	4903      	ldr	r1, [pc, #12]	@ (80038b0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a2:	5ccb      	ldrb	r3, [r1, r3]
 80038a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	40023800 	.word	0x40023800
 80038b0:	08006898 	.word	0x08006898

080038b4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b082      	sub	sp, #8
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e042      	b.n	800394c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038cc:	b2db      	uxtb	r3, r3
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d106      	bne.n	80038e0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2200      	movs	r2, #0
 80038d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f7fe fe8a 	bl	80025f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2224      	movs	r2, #36	@ 0x24
 80038e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	68da      	ldr	r2, [r3, #12]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80038f6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 ffcb 	bl	8004894 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	691a      	ldr	r2, [r3, #16]
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800390c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	695a      	ldr	r2, [r3, #20]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800391c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	68da      	ldr	r2, [r3, #12]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800392c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800394a:	2300      	movs	r3, #0
}
 800394c:	4618      	mov	r0, r3
 800394e:	3708      	adds	r7, #8
 8003950:	46bd      	mov	sp, r7
 8003952:	bd80      	pop	{r7, pc}

08003954 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	@ 0x28
 8003958:	af02      	add	r7, sp, #8
 800395a:	60f8      	str	r0, [r7, #12]
 800395c:	60b9      	str	r1, [r7, #8]
 800395e:	603b      	str	r3, [r7, #0]
 8003960:	4613      	mov	r3, r2
 8003962:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	d175      	bne.n	8003a60 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2b00      	cmp	r3, #0
 8003978:	d002      	beq.n	8003980 <HAL_UART_Transmit+0x2c>
 800397a:	88fb      	ldrh	r3, [r7, #6]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e06e      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2200      	movs	r2, #0
 8003988:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	2221      	movs	r2, #33	@ 0x21
 800398e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003992:	f7fe ff79 	bl	8002888 <HAL_GetTick>
 8003996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	88fa      	ldrh	r2, [r7, #6]
 800399c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	88fa      	ldrh	r2, [r7, #6]
 80039a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	689b      	ldr	r3, [r3, #8]
 80039a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80039ac:	d108      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d104      	bne.n	80039c0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80039b6:	2300      	movs	r3, #0
 80039b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039ba:	68bb      	ldr	r3, [r7, #8]
 80039bc:	61bb      	str	r3, [r7, #24]
 80039be:	e003      	b.n	80039c8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039c8:	e02e      	b.n	8003a28 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	9300      	str	r3, [sp, #0]
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	2200      	movs	r2, #0
 80039d2:	2180      	movs	r1, #128	@ 0x80
 80039d4:	68f8      	ldr	r0, [r7, #12]
 80039d6:	f000 fd15 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 80039da:	4603      	mov	r3, r0
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d005      	beq.n	80039ec <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2220      	movs	r2, #32
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80039e8:	2303      	movs	r3, #3
 80039ea:	e03a      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d10b      	bne.n	8003a0a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	461a      	mov	r2, r3
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	3302      	adds	r3, #2
 8003a06:	61bb      	str	r3, [r7, #24]
 8003a08:	e007      	b.n	8003a1a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	781a      	ldrb	r2, [r3, #0]
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003a14:	69fb      	ldr	r3, [r7, #28]
 8003a16:	3301      	adds	r3, #1
 8003a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	3b01      	subs	r3, #1
 8003a22:	b29a      	uxth	r2, r3
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a2c:	b29b      	uxth	r3, r3
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1cb      	bne.n	80039ca <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	9300      	str	r3, [sp, #0]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	2140      	movs	r1, #64	@ 0x40
 8003a3c:	68f8      	ldr	r0, [r7, #12]
 8003a3e:	f000 fce1 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d005      	beq.n	8003a54 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	2220      	movs	r2, #32
 8003a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003a50:	2303      	movs	r3, #3
 8003a52:	e006      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2220      	movs	r2, #32
 8003a58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	e000      	b.n	8003a62 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a60:	2302      	movs	r3, #2
  }
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6a:	b580      	push	{r7, lr}
 8003a6c:	b08a      	sub	sp, #40	@ 0x28
 8003a6e:	af02      	add	r7, sp, #8
 8003a70:	60f8      	str	r0, [r7, #12]
 8003a72:	60b9      	str	r1, [r7, #8]
 8003a74:	603b      	str	r3, [r7, #0]
 8003a76:	4613      	mov	r3, r2
 8003a78:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	2b20      	cmp	r3, #32
 8003a88:	f040 8081 	bne.w	8003b8e <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d002      	beq.n	8003a98 <HAL_UART_Receive+0x2e>
 8003a92:	88fb      	ldrh	r3, [r7, #6]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d101      	bne.n	8003a9c <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003a98:	2301      	movs	r3, #1
 8003a9a:	e079      	b.n	8003b90 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2222      	movs	r2, #34	@ 0x22
 8003aa6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ab0:	f7fe feea 	bl	8002888 <HAL_GetTick>
 8003ab4:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	88fa      	ldrh	r2, [r7, #6]
 8003aba:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	88fa      	ldrh	r2, [r7, #6]
 8003ac0:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	689b      	ldr	r3, [r3, #8]
 8003ac6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aca:	d108      	bne.n	8003ade <HAL_UART_Receive+0x74>
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	691b      	ldr	r3, [r3, #16]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d104      	bne.n	8003ade <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	61bb      	str	r3, [r7, #24]
 8003adc:	e003      	b.n	8003ae6 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8003ae6:	e047      	b.n	8003b78 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2120      	movs	r1, #32
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f000 fc86 	bl	8004404 <UART_WaitOnFlagUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2220      	movs	r2, #32
 8003b02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e042      	b.n	8003b90 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d10c      	bne.n	8003b2a <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003b22:	69bb      	ldr	r3, [r7, #24]
 8003b24:	3302      	adds	r3, #2
 8003b26:	61bb      	str	r3, [r7, #24]
 8003b28:	e01f      	b.n	8003b6a <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b32:	d007      	beq.n	8003b44 <HAL_UART_Receive+0xda>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d10a      	bne.n	8003b52 <HAL_UART_Receive+0xe8>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	691b      	ldr	r3, [r3, #16]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d106      	bne.n	8003b52 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	b2da      	uxtb	r2, r3
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	701a      	strb	r2, [r3, #0]
 8003b50:	e008      	b.n	8003b64 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b5e:	b2da      	uxtb	r2, r3
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	3301      	adds	r3, #1
 8003b68:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b6e:	b29b      	uxth	r3, r3
 8003b70:	3b01      	subs	r3, #1
 8003b72:	b29a      	uxth	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1b2      	bne.n	8003ae8 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2220      	movs	r2, #32
 8003b86:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	e000      	b.n	8003b90 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003b8e:	2302      	movs	r3, #2
  }
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3720      	adds	r7, #32
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}

08003b98 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b20      	cmp	r3, #32
 8003bb0:	d112      	bne.n	8003bd8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d002      	beq.n	8003bbe <HAL_UART_Receive_IT+0x26>
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d101      	bne.n	8003bc2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e00b      	b.n	8003bda <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bc8:	88fb      	ldrh	r3, [r7, #6]
 8003bca:	461a      	mov	r2, r3
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f000 fc71 	bl	80044b6 <UART_Start_Receive_IT>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	e000      	b.n	8003bda <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003bd8:	2302      	movs	r3, #2
  }
}
 8003bda:	4618      	mov	r0, r3
 8003bdc:	3710      	adds	r7, #16
 8003bde:	46bd      	mov	sp, r7
 8003be0:	bd80      	pop	{r7, pc}

08003be2 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8003be2:	b580      	push	{r7, lr}
 8003be4:	b09a      	sub	sp, #104	@ 0x68
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	330c      	adds	r3, #12
 8003bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003bf4:	e853 3f00 	ldrex	r3, [r3]
 8003bf8:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003bfa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bfc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003c00:	667b      	str	r3, [r7, #100]	@ 0x64
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	330c      	adds	r3, #12
 8003c08:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003c0a:	657a      	str	r2, [r7, #84]	@ 0x54
 8003c0c:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0e:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003c10:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003c12:	e841 2300 	strex	r3, r2, [r1]
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d1e5      	bne.n	8003bea <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	3314      	adds	r3, #20
 8003c24:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c28:	e853 3f00 	ldrex	r3, [r3]
 8003c2c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003c2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c30:	f023 0301 	bic.w	r3, r3, #1
 8003c34:	663b      	str	r3, [r7, #96]	@ 0x60
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	3314      	adds	r3, #20
 8003c3c:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c3e:	643a      	str	r2, [r7, #64]	@ 0x40
 8003c40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003c44:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c46:	e841 2300 	strex	r3, r2, [r1]
 8003c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d1e5      	bne.n	8003c1e <HAL_UART_AbortReceive+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d119      	bne.n	8003c8e <HAL_UART_AbortReceive+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	330c      	adds	r3, #12
 8003c60:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c62:	6a3b      	ldr	r3, [r7, #32]
 8003c64:	e853 3f00 	ldrex	r3, [r3]
 8003c68:	61fb      	str	r3, [r7, #28]
   return(result);
 8003c6a:	69fb      	ldr	r3, [r7, #28]
 8003c6c:	f023 0310 	bic.w	r3, r3, #16
 8003c70:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	330c      	adds	r3, #12
 8003c78:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003c7a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c7c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c7e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003c80:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c82:	e841 2300 	strex	r3, r2, [r1]
 8003c86:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d1e5      	bne.n	8003c5a <HAL_UART_AbortReceive+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	695b      	ldr	r3, [r3, #20]
 8003c94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c98:	2b40      	cmp	r3, #64	@ 0x40
 8003c9a:	d136      	bne.n	8003d0a <HAL_UART_AbortReceive+0x128>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	3314      	adds	r3, #20
 8003ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	e853 3f00 	ldrex	r3, [r3]
 8003caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003cac:	68bb      	ldr	r3, [r7, #8]
 8003cae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cb2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	3314      	adds	r3, #20
 8003cba:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003cbc:	61ba      	str	r2, [r7, #24]
 8003cbe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc0:	6979      	ldr	r1, [r7, #20]
 8003cc2:	69ba      	ldr	r2, [r7, #24]
 8003cc4:	e841 2300 	strex	r3, r2, [r1]
 8003cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d1e5      	bne.n	8003c9c <HAL_UART_AbortReceive+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d018      	beq.n	8003d0a <HAL_UART_AbortReceive+0x128>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cdc:	2200      	movs	r2, #0
 8003cde:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f7fe ff10 	bl	8002b0a <HAL_DMA_Abort>
 8003cea:	4603      	mov	r3, r0
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00c      	beq.n	8003d0a <HAL_UART_AbortReceive+0x128>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	f7fe ff9a 	bl	8002c2e <HAL_DMA_GetError>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	2b20      	cmp	r3, #32
 8003cfe:	d104      	bne.n	8003d0a <HAL_UART_AbortReceive+0x128>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2210      	movs	r2, #16
 8003d04:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e00a      	b.n	8003d20 <HAL_UART_AbortReceive+0x13e>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	631a      	str	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3768      	adds	r7, #104	@ 0x68
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b09a      	sub	sp, #104	@ 0x68
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	330c      	adds	r3, #12
 8003d36:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003d3a:	e853 3f00 	ldrex	r3, [r3]
 8003d3e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8003d40:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d42:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d46:	667b      	str	r3, [r7, #100]	@ 0x64
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	330c      	adds	r3, #12
 8003d4e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8003d50:	657a      	str	r2, [r7, #84]	@ 0x54
 8003d52:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8003d56:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003d58:	e841 2300 	strex	r3, r2, [r1]
 8003d5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8003d5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e5      	bne.n	8003d30 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	3314      	adds	r3, #20
 8003d6a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d6e:	e853 3f00 	ldrex	r3, [r3]
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d76:	f023 0301 	bic.w	r3, r3, #1
 8003d7a:	663b      	str	r3, [r7, #96]	@ 0x60
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	3314      	adds	r3, #20
 8003d82:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003d84:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d8c:	e841 2300 	strex	r3, r2, [r1]
 8003d90:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d1e5      	bne.n	8003d64 <HAL_UART_AbortReceive_IT+0x3c>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9c:	2b01      	cmp	r3, #1
 8003d9e:	d119      	bne.n	8003dd4 <HAL_UART_AbortReceive_IT+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	330c      	adds	r3, #12
 8003da6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da8:	6a3b      	ldr	r3, [r7, #32]
 8003daa:	e853 3f00 	ldrex	r3, [r3]
 8003dae:	61fb      	str	r3, [r7, #28]
   return(result);
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f023 0310 	bic.w	r3, r3, #16
 8003db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	330c      	adds	r3, #12
 8003dbe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8003dc0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003dc2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003dc6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003dc8:	e841 2300 	strex	r3, r2, [r1]
 8003dcc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003dce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d1e5      	bne.n	8003da0 <HAL_UART_AbortReceive_IT+0x78>
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dde:	2b40      	cmp	r3, #64	@ 0x40
 8003de0:	d13f      	bne.n	8003e62 <HAL_UART_AbortReceive_IT+0x13a>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	3314      	adds	r3, #20
 8003de8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	e853 3f00 	ldrex	r3, [r3]
 8003df0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003df2:	68bb      	ldr	r3, [r7, #8]
 8003df4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003df8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	3314      	adds	r3, #20
 8003e00:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e02:	61ba      	str	r2, [r7, #24]
 8003e04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e06:	6979      	ldr	r1, [r7, #20]
 8003e08:	69ba      	ldr	r2, [r7, #24]
 8003e0a:	e841 2300 	strex	r3, r2, [r1]
 8003e0e:	613b      	str	r3, [r7, #16]
   return(result);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1e5      	bne.n	8003de2 <HAL_UART_AbortReceive_IT+0xba>

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <HAL_UART_AbortReceive_IT+0x11e>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e22:	4a19      	ldr	r2, [pc, #100]	@ (8003e88 <HAL_UART_AbortReceive_IT+0x160>)
 8003e24:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fe fedd 	bl	8002bea <HAL_DMA_Abort_IT>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d022      	beq.n	8003e7c <HAL_UART_AbortReceive_IT+0x154>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003e40:	4610      	mov	r0, r2
 8003e42:	4798      	blx	r3
 8003e44:	e01a      	b.n	8003e7c <HAL_UART_AbortReceive_IT+0x154>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0x00U;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	85da      	strh	r2, [r3, #46]	@ 0x2e

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2220      	movs	r2, #32
 8003e50:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fabc 	bl	80043d8 <HAL_UART_AbortReceiveCpltCallback>
 8003e60:	e00c      	b.n	8003e7c <HAL_UART_AbortReceive_IT+0x154>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0x00U;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2220      	movs	r2, #32
 8003e6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	f000 faae 	bl	80043d8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3768      	adds	r7, #104	@ 0x68
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}
 8003e86:	bf00      	nop
 8003e88:	08004619 	.word	0x08004619

08003e8c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b0ba      	sub	sp, #232	@ 0xe8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	695b      	ldr	r3, [r3, #20]
 8003eae:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ec2:	f003 030f 	and.w	r3, r3, #15
 8003ec6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003eca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10f      	bne.n	8003ef2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed6:	f003 0320 	and.w	r3, r3, #32
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d009      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x66>
 8003ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ee2:	f003 0320 	and.w	r3, r3, #32
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d003      	beq.n	8003ef2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 fc14 	bl	8004718 <UART_Receive_IT>
      return;
 8003ef0:	e25b      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ef2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	f000 80de 	beq.w	80040b8 <HAL_UART_IRQHandler+0x22c>
 8003efc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f00:	f003 0301 	and.w	r3, r3, #1
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d106      	bne.n	8003f16 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003f08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f0c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	f000 80d1 	beq.w	80040b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00b      	beq.n	8003f3a <HAL_UART_IRQHandler+0xae>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d005      	beq.n	8003f3a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f32:	f043 0201 	orr.w	r2, r3, #1
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f3e:	f003 0304 	and.w	r3, r3, #4
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
 8003f46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f56:	f043 0202 	orr.w	r2, r3, #2
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003f5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f62:	f003 0302 	and.w	r3, r3, #2
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d00b      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
 8003f6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f6e:	f003 0301 	and.w	r3, r3, #1
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d005      	beq.n	8003f82 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f7a:	f043 0204 	orr.w	r2, r3, #4
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d011      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
 8003f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d105      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d005      	beq.n	8003fb2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003faa:	f043 0208 	orr.w	r2, r3, #8
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 81f2 	beq.w	80043a0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003fbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fc0:	f003 0320 	and.w	r3, r3, #32
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d008      	beq.n	8003fda <HAL_UART_IRQHandler+0x14e>
 8003fc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fcc:	f003 0320 	and.w	r3, r3, #32
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 fb9f 	bl	8004718 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	695b      	ldr	r3, [r3, #20]
 8003fe0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003fe4:	2b40      	cmp	r3, #64	@ 0x40
 8003fe6:	bf0c      	ite	eq
 8003fe8:	2301      	moveq	r3, #1
 8003fea:	2300      	movne	r3, #0
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f003 0308 	and.w	r3, r3, #8
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d103      	bne.n	8004006 <HAL_UART_IRQHandler+0x17a>
 8003ffe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004002:	2b00      	cmp	r3, #0
 8004004:	d04f      	beq.n	80040a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa8f 	bl	800452a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004016:	2b40      	cmp	r3, #64	@ 0x40
 8004018:	d141      	bne.n	800409e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	3314      	adds	r3, #20
 8004020:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004024:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004028:	e853 3f00 	ldrex	r3, [r3]
 800402c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004030:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004034:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004038:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	3314      	adds	r3, #20
 8004042:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004046:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800404a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004052:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004056:	e841 2300 	strex	r3, r2, [r1]
 800405a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800405e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d1d9      	bne.n	800401a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d013      	beq.n	8004096 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004072:	4a7e      	ldr	r2, [pc, #504]	@ (800426c <HAL_UART_IRQHandler+0x3e0>)
 8004074:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800407a:	4618      	mov	r0, r3
 800407c:	f7fe fdb5 	bl	8002bea <HAL_DMA_Abort_IT>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d016      	beq.n	80040b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800408a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800408c:	687a      	ldr	r2, [r7, #4]
 800408e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004090:	4610      	mov	r0, r2
 8004092:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004094:	e00e      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 f994 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800409c:	e00a      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f990 	bl	80043c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040a4:	e006      	b.n	80040b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f98c 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80040b2:	e175      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040b4:	bf00      	nop
    return;
 80040b6:	e173      	b.n	80043a0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040bc:	2b01      	cmp	r3, #1
 80040be:	f040 814f 	bne.w	8004360 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80040c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80040c6:	f003 0310 	and.w	r3, r3, #16
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	f000 8148 	beq.w	8004360 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80040d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80040d4:	f003 0310 	and.w	r3, r3, #16
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 8141 	beq.w	8004360 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80040de:	2300      	movs	r3, #0
 80040e0:	60bb      	str	r3, [r7, #8]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	60bb      	str	r3, [r7, #8]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	60bb      	str	r3, [r7, #8]
 80040f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fe:	2b40      	cmp	r3, #64	@ 0x40
 8004100:	f040 80b6 	bne.w	8004270 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	685b      	ldr	r3, [r3, #4]
 800410c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004110:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004114:	2b00      	cmp	r3, #0
 8004116:	f000 8145 	beq.w	80043a4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800411e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004122:	429a      	cmp	r2, r3
 8004124:	f080 813e 	bcs.w	80043a4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800412e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004134:	69db      	ldr	r3, [r3, #28]
 8004136:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800413a:	f000 8088 	beq.w	800424e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	330c      	adds	r3, #12
 8004144:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004148:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800414c:	e853 3f00 	ldrex	r3, [r3]
 8004150:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004154:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004158:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800415c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	330c      	adds	r3, #12
 8004166:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800416a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800416e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004172:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004176:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004182:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1d9      	bne.n	800413e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	3314      	adds	r3, #20
 8004190:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004192:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004194:	e853 3f00 	ldrex	r3, [r3]
 8004198:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800419a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800419c:	f023 0301 	bic.w	r3, r3, #1
 80041a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	3314      	adds	r3, #20
 80041aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80041ae:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80041b2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80041b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80041ba:	e841 2300 	strex	r3, r2, [r1]
 80041be:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80041c0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1e1      	bne.n	800418a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3314      	adds	r3, #20
 80041cc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80041d0:	e853 3f00 	ldrex	r3, [r3]
 80041d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80041d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80041d8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80041dc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3314      	adds	r3, #20
 80041e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80041ea:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80041ec:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ee:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80041f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80041f2:	e841 2300 	strex	r3, r2, [r1]
 80041f6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80041f8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1e3      	bne.n	80041c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	2220      	movs	r2, #32
 8004202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	2200      	movs	r2, #0
 800420a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	330c      	adds	r3, #12
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004214:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004216:	e853 3f00 	ldrex	r3, [r3]
 800421a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800421c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800421e:	f023 0310 	bic.w	r3, r3, #16
 8004222:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	330c      	adds	r3, #12
 800422c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004230:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004232:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004236:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800423e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e3      	bne.n	800420c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fc5e 	bl	8002b0a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2202      	movs	r2, #2
 8004252:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800425c:	b29b      	uxth	r3, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	b29b      	uxth	r3, r3
 8004262:	4619      	mov	r1, r3
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f8c1 	bl	80043ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800426a:	e09b      	b.n	80043a4 <HAL_UART_IRQHandler+0x518>
 800426c:	080045f1 	.word	0x080045f1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004278:	b29b      	uxth	r3, r3
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004284:	b29b      	uxth	r3, r3
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 808e 	beq.w	80043a8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800428c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004290:	2b00      	cmp	r3, #0
 8004292:	f000 8089 	beq.w	80043a8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	330c      	adds	r3, #12
 800429c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042a0:	e853 3f00 	ldrex	r3, [r3]
 80042a4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80042a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80042a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80042ac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	330c      	adds	r3, #12
 80042b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80042ba:	647a      	str	r2, [r7, #68]	@ 0x44
 80042bc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042be:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80042c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042c2:	e841 2300 	strex	r3, r2, [r1]
 80042c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80042c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d1e3      	bne.n	8004296 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	3314      	adds	r3, #20
 80042d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042d8:	e853 3f00 	ldrex	r3, [r3]
 80042dc:	623b      	str	r3, [r7, #32]
   return(result);
 80042de:	6a3b      	ldr	r3, [r7, #32]
 80042e0:	f023 0301 	bic.w	r3, r3, #1
 80042e4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	3314      	adds	r3, #20
 80042ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80042f2:	633a      	str	r2, [r7, #48]	@ 0x30
 80042f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80042f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042fa:	e841 2300 	strex	r3, r2, [r1]
 80042fe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004300:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004302:	2b00      	cmp	r3, #0
 8004304:	d1e3      	bne.n	80042ce <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2220      	movs	r2, #32
 800430a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	330c      	adds	r3, #12
 800431a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	e853 3f00 	ldrex	r3, [r3]
 8004322:	60fb      	str	r3, [r7, #12]
   return(result);
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	f023 0310 	bic.w	r3, r3, #16
 800432a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	330c      	adds	r3, #12
 8004334:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004338:	61fa      	str	r2, [r7, #28]
 800433a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800433c:	69b9      	ldr	r1, [r7, #24]
 800433e:	69fa      	ldr	r2, [r7, #28]
 8004340:	e841 2300 	strex	r3, r2, [r1]
 8004344:	617b      	str	r3, [r7, #20]
   return(result);
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1e3      	bne.n	8004314 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004352:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004356:	4619      	mov	r1, r3
 8004358:	6878      	ldr	r0, [r7, #4]
 800435a:	f000 f847 	bl	80043ec <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800435e:	e023      	b.n	80043a8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004360:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004364:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004368:	2b00      	cmp	r3, #0
 800436a:	d009      	beq.n	8004380 <HAL_UART_IRQHandler+0x4f4>
 800436c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004370:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004374:	2b00      	cmp	r3, #0
 8004376:	d003      	beq.n	8004380 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 f965 	bl	8004648 <UART_Transmit_IT>
    return;
 800437e:	e014      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004380:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004384:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00e      	beq.n	80043aa <HAL_UART_IRQHandler+0x51e>
 800438c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004390:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004394:	2b00      	cmp	r3, #0
 8004396:	d008      	beq.n	80043aa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f9a5 	bl	80046e8 <UART_EndTransmit_IT>
    return;
 800439e:	e004      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
    return;
 80043a0:	bf00      	nop
 80043a2:	e002      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
      return;
 80043a4:	bf00      	nop
 80043a6:	e000      	b.n	80043aa <HAL_UART_IRQHandler+0x51e>
      return;
 80043a8:	bf00      	nop
  }
}
 80043aa:	37e8      	adds	r7, #232	@ 0xe8
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bd80      	pop	{r7, pc}

080043b0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	460b      	mov	r3, r1
 80043f6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80043f8:	bf00      	nop
 80043fa:	370c      	adds	r7, #12
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr

08004404 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b086      	sub	sp, #24
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	603b      	str	r3, [r7, #0]
 8004410:	4613      	mov	r3, r2
 8004412:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004414:	e03b      	b.n	800448e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004416:	6a3b      	ldr	r3, [r7, #32]
 8004418:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441c:	d037      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800441e:	f7fe fa33 	bl	8002888 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	6a3a      	ldr	r2, [r7, #32]
 800442a:	429a      	cmp	r2, r3
 800442c:	d302      	bcc.n	8004434 <UART_WaitOnFlagUntilTimeout+0x30>
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004434:	2303      	movs	r3, #3
 8004436:	e03a      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	68db      	ldr	r3, [r3, #12]
 800443e:	f003 0304 	and.w	r3, r3, #4
 8004442:	2b00      	cmp	r3, #0
 8004444:	d023      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0x8a>
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	2b80      	cmp	r3, #128	@ 0x80
 800444a:	d020      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0x8a>
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	2b40      	cmp	r3, #64	@ 0x40
 8004450:	d01d      	beq.n	800448e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0308 	and.w	r3, r3, #8
 800445c:	2b08      	cmp	r3, #8
 800445e:	d116      	bne.n	800448e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004460:	2300      	movs	r3, #0
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	617b      	str	r3, [r7, #20]
 8004474:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004476:	68f8      	ldr	r0, [r7, #12]
 8004478:	f000 f857 	bl	800452a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2208      	movs	r2, #8
 8004480:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	e00f      	b.n	80044ae <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	681a      	ldr	r2, [r3, #0]
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	4013      	ands	r3, r2
 8004498:	68ba      	ldr	r2, [r7, #8]
 800449a:	429a      	cmp	r2, r3
 800449c:	bf0c      	ite	eq
 800449e:	2301      	moveq	r3, #1
 80044a0:	2300      	movne	r3, #0
 80044a2:	b2db      	uxtb	r3, r3
 80044a4:	461a      	mov	r2, r3
 80044a6:	79fb      	ldrb	r3, [r7, #7]
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d0b4      	beq.n	8004416 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044b6:	b480      	push	{r7}
 80044b8:	b085      	sub	sp, #20
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	60b9      	str	r1, [r7, #8]
 80044c0:	4613      	mov	r3, r2
 80044c2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	68ba      	ldr	r2, [r7, #8]
 80044c8:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	88fa      	ldrh	r2, [r7, #6]
 80044ce:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	88fa      	ldrh	r2, [r7, #6]
 80044d4:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	2222      	movs	r2, #34	@ 0x22
 80044e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	691b      	ldr	r3, [r3, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d007      	beq.n	80044fc <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044fa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f042 0201 	orr.w	r2, r2, #1
 800450a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	68da      	ldr	r2, [r3, #12]
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f042 0220 	orr.w	r2, r2, #32
 800451a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451c:	2300      	movs	r3, #0
}
 800451e:	4618      	mov	r0, r3
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr

0800452a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800452a:	b480      	push	{r7}
 800452c:	b095      	sub	sp, #84	@ 0x54
 800452e:	af00      	add	r7, sp, #0
 8004530:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	330c      	adds	r3, #12
 8004538:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800453a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453c:	e853 3f00 	ldrex	r3, [r3]
 8004540:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004544:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004548:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	330c      	adds	r3, #12
 8004550:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004552:	643a      	str	r2, [r7, #64]	@ 0x40
 8004554:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004556:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004558:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800455a:	e841 2300 	strex	r3, r2, [r1]
 800455e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004562:	2b00      	cmp	r3, #0
 8004564:	d1e5      	bne.n	8004532 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	3314      	adds	r3, #20
 800456c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456e:	6a3b      	ldr	r3, [r7, #32]
 8004570:	e853 3f00 	ldrex	r3, [r3]
 8004574:	61fb      	str	r3, [r7, #28]
   return(result);
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	3314      	adds	r3, #20
 8004584:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004586:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004588:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800458a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800458e:	e841 2300 	strex	r3, r2, [r1]
 8004592:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004596:	2b00      	cmp	r3, #0
 8004598:	d1e5      	bne.n	8004566 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d119      	bne.n	80045d6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	330c      	adds	r3, #12
 80045a8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	e853 3f00 	ldrex	r3, [r3]
 80045b0:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	f023 0310 	bic.w	r3, r3, #16
 80045b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c2:	61ba      	str	r2, [r7, #24]
 80045c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c6:	6979      	ldr	r1, [r7, #20]
 80045c8:	69ba      	ldr	r2, [r7, #24]
 80045ca:	e841 2300 	strex	r3, r2, [r1]
 80045ce:	613b      	str	r3, [r7, #16]
   return(result);
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d1e5      	bne.n	80045a2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045e4:	bf00      	nop
 80045e6:	3754      	adds	r7, #84	@ 0x54
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2200      	movs	r2, #0
 8004608:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800460a:	68f8      	ldr	r0, [r7, #12]
 800460c:	f7ff feda 	bl	80043c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004610:	bf00      	nop
 8004612:	3710      	adds	r7, #16
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <UART_DMARxOnlyAbortCallback>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004624:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0x00U;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	2220      	movs	r2, #32
 8004630:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	631a      	str	r2, [r3, #48]	@ 0x30
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 800463a:	68f8      	ldr	r0, [r7, #12]
 800463c:	f7ff fecc 	bl	80043d8 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004640:	bf00      	nop
 8004642:	3710      	adds	r7, #16
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}

08004648 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004648:	b480      	push	{r7}
 800464a:	b085      	sub	sp, #20
 800464c:	af00      	add	r7, sp, #0
 800464e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004656:	b2db      	uxtb	r3, r3
 8004658:	2b21      	cmp	r3, #33	@ 0x21
 800465a:	d13e      	bne.n	80046da <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004664:	d114      	bne.n	8004690 <UART_Transmit_IT+0x48>
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d110      	bne.n	8004690 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	881b      	ldrh	r3, [r3, #0]
 8004678:	461a      	mov	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004682:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	1c9a      	adds	r2, r3, #2
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	621a      	str	r2, [r3, #32]
 800468e:	e008      	b.n	80046a2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	6a1b      	ldr	r3, [r3, #32]
 8004694:	1c59      	adds	r1, r3, #1
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	6211      	str	r1, [r2, #32]
 800469a:	781a      	ldrb	r2, [r3, #0]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	4619      	mov	r1, r3
 80046b0:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d10f      	bne.n	80046d6 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80046c4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	68da      	ldr	r2, [r3, #12]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046d4:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046d6:	2300      	movs	r3, #0
 80046d8:	e000      	b.n	80046dc <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046da:	2302      	movs	r3, #2
  }
}
 80046dc:	4618      	mov	r0, r3
 80046de:	3714      	adds	r7, #20
 80046e0:	46bd      	mov	sp, r7
 80046e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e6:	4770      	bx	lr

080046e8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046fe:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004708:	6878      	ldr	r0, [r7, #4]
 800470a:	f7ff fe51 	bl	80043b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3708      	adds	r7, #8
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b08c      	sub	sp, #48	@ 0x30
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004726:	b2db      	uxtb	r3, r3
 8004728:	2b22      	cmp	r3, #34	@ 0x22
 800472a:	f040 80ae 	bne.w	800488a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004736:	d117      	bne.n	8004768 <UART_Receive_IT+0x50>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691b      	ldr	r3, [r3, #16]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d113      	bne.n	8004768 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004740:	2300      	movs	r3, #0
 8004742:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004748:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	b29b      	uxth	r3, r3
 8004752:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004756:	b29a      	uxth	r2, r3
 8004758:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800475a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004760:	1c9a      	adds	r2, r3, #2
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	629a      	str	r2, [r3, #40]	@ 0x28
 8004766:	e026      	b.n	80047b6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800476c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800476e:	2300      	movs	r3, #0
 8004770:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	689b      	ldr	r3, [r3, #8]
 8004776:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800477a:	d007      	beq.n	800478c <UART_Receive_IT+0x74>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d10a      	bne.n	800479a <UART_Receive_IT+0x82>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d106      	bne.n	800479a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	b2da      	uxtb	r2, r3
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004796:	701a      	strb	r2, [r3, #0]
 8004798:	e008      	b.n	80047ac <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80047a6:	b2da      	uxtb	r2, r3
 80047a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047aa:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047b0:	1c5a      	adds	r2, r3, #1
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	3b01      	subs	r3, #1
 80047be:	b29b      	uxth	r3, r3
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	4619      	mov	r1, r3
 80047c4:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d15d      	bne.n	8004886 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	68da      	ldr	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 0220 	bic.w	r2, r2, #32
 80047d8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047e8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	695a      	ldr	r2, [r3, #20]
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f022 0201 	bic.w	r2, r2, #1
 80047f8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2220      	movs	r2, #32
 80047fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	2200      	movs	r2, #0
 8004806:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800480c:	2b01      	cmp	r3, #1
 800480e:	d135      	bne.n	800487c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	330c      	adds	r3, #12
 800481c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	e853 3f00 	ldrex	r3, [r3]
 8004824:	613b      	str	r3, [r7, #16]
   return(result);
 8004826:	693b      	ldr	r3, [r7, #16]
 8004828:	f023 0310 	bic.w	r3, r3, #16
 800482c:	627b      	str	r3, [r7, #36]	@ 0x24
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	330c      	adds	r3, #12
 8004834:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004836:	623a      	str	r2, [r7, #32]
 8004838:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800483a:	69f9      	ldr	r1, [r7, #28]
 800483c:	6a3a      	ldr	r2, [r7, #32]
 800483e:	e841 2300 	strex	r3, r2, [r1]
 8004842:	61bb      	str	r3, [r7, #24]
   return(result);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1e5      	bne.n	8004816 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f003 0310 	and.w	r3, r3, #16
 8004854:	2b10      	cmp	r3, #16
 8004856:	d10a      	bne.n	800486e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004858:	2300      	movs	r3, #0
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	60fb      	str	r3, [r7, #12]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	60fb      	str	r3, [r7, #12]
 800486c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004872:	4619      	mov	r1, r3
 8004874:	6878      	ldr	r0, [r7, #4]
 8004876:	f7ff fdb9 	bl	80043ec <HAL_UARTEx_RxEventCallback>
 800487a:	e002      	b.n	8004882 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7fb ff03 	bl	8000688 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004882:	2300      	movs	r3, #0
 8004884:	e002      	b.n	800488c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004886:	2300      	movs	r3, #0
 8004888:	e000      	b.n	800488c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800488a:	2302      	movs	r3, #2
  }
}
 800488c:	4618      	mov	r0, r3
 800488e:	3730      	adds	r7, #48	@ 0x30
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004898:	b0c0      	sub	sp, #256	@ 0x100
 800489a:	af00      	add	r7, sp, #0
 800489c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80048a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80048ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b0:	68d9      	ldr	r1, [r3, #12]
 80048b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b6:	681a      	ldr	r2, [r3, #0]
 80048b8:	ea40 0301 	orr.w	r3, r0, r1
 80048bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80048be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	431a      	orrs	r2, r3
 80048cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d0:	695b      	ldr	r3, [r3, #20]
 80048d2:	431a      	orrs	r2, r3
 80048d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d8:	69db      	ldr	r3, [r3, #28]
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68db      	ldr	r3, [r3, #12]
 80048e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048ec:	f021 010c 	bic.w	r1, r1, #12
 80048f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f4:	681a      	ldr	r2, [r3, #0]
 80048f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048fa:	430b      	orrs	r3, r1
 80048fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800490e:	6999      	ldr	r1, [r3, #24]
 8004910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	ea40 0301 	orr.w	r3, r0, r1
 800491a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800491c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	4b8f      	ldr	r3, [pc, #572]	@ (8004b60 <UART_SetConfig+0x2cc>)
 8004924:	429a      	cmp	r2, r3
 8004926:	d005      	beq.n	8004934 <UART_SetConfig+0xa0>
 8004928:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	4b8d      	ldr	r3, [pc, #564]	@ (8004b64 <UART_SetConfig+0x2d0>)
 8004930:	429a      	cmp	r2, r3
 8004932:	d104      	bne.n	800493e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004934:	f7fe ffaa 	bl	800388c <HAL_RCC_GetPCLK2Freq>
 8004938:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800493c:	e003      	b.n	8004946 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800493e:	f7fe ff91 	bl	8003864 <HAL_RCC_GetPCLK1Freq>
 8004942:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004946:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800494a:	69db      	ldr	r3, [r3, #28]
 800494c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004950:	f040 810c 	bne.w	8004b6c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004954:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004958:	2200      	movs	r2, #0
 800495a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800495e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004962:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004966:	4622      	mov	r2, r4
 8004968:	462b      	mov	r3, r5
 800496a:	1891      	adds	r1, r2, r2
 800496c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800496e:	415b      	adcs	r3, r3
 8004970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004972:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004976:	4621      	mov	r1, r4
 8004978:	eb12 0801 	adds.w	r8, r2, r1
 800497c:	4629      	mov	r1, r5
 800497e:	eb43 0901 	adc.w	r9, r3, r1
 8004982:	f04f 0200 	mov.w	r2, #0
 8004986:	f04f 0300 	mov.w	r3, #0
 800498a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800498e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004992:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004996:	4690      	mov	r8, r2
 8004998:	4699      	mov	r9, r3
 800499a:	4623      	mov	r3, r4
 800499c:	eb18 0303 	adds.w	r3, r8, r3
 80049a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80049a4:	462b      	mov	r3, r5
 80049a6:	eb49 0303 	adc.w	r3, r9, r3
 80049aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80049ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80049ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80049be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80049c2:	460b      	mov	r3, r1
 80049c4:	18db      	adds	r3, r3, r3
 80049c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80049c8:	4613      	mov	r3, r2
 80049ca:	eb42 0303 	adc.w	r3, r2, r3
 80049ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80049d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049d8:	f7fb fc5a 	bl	8000290 <__aeabi_uldivmod>
 80049dc:	4602      	mov	r2, r0
 80049de:	460b      	mov	r3, r1
 80049e0:	4b61      	ldr	r3, [pc, #388]	@ (8004b68 <UART_SetConfig+0x2d4>)
 80049e2:	fba3 2302 	umull	r2, r3, r3, r2
 80049e6:	095b      	lsrs	r3, r3, #5
 80049e8:	011c      	lsls	r4, r3, #4
 80049ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ee:	2200      	movs	r2, #0
 80049f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049fc:	4642      	mov	r2, r8
 80049fe:	464b      	mov	r3, r9
 8004a00:	1891      	adds	r1, r2, r2
 8004a02:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004a04:	415b      	adcs	r3, r3
 8004a06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a08:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004a0c:	4641      	mov	r1, r8
 8004a0e:	eb12 0a01 	adds.w	sl, r2, r1
 8004a12:	4649      	mov	r1, r9
 8004a14:	eb43 0b01 	adc.w	fp, r3, r1
 8004a18:	f04f 0200 	mov.w	r2, #0
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a24:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a28:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a2c:	4692      	mov	sl, r2
 8004a2e:	469b      	mov	fp, r3
 8004a30:	4643      	mov	r3, r8
 8004a32:	eb1a 0303 	adds.w	r3, sl, r3
 8004a36:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a40:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a50:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a54:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	18db      	adds	r3, r3, r3
 8004a5c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a5e:	4613      	mov	r3, r2
 8004a60:	eb42 0303 	adc.w	r3, r2, r3
 8004a64:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a66:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a6a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a6e:	f7fb fc0f 	bl	8000290 <__aeabi_uldivmod>
 8004a72:	4602      	mov	r2, r0
 8004a74:	460b      	mov	r3, r1
 8004a76:	4611      	mov	r1, r2
 8004a78:	4b3b      	ldr	r3, [pc, #236]	@ (8004b68 <UART_SetConfig+0x2d4>)
 8004a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a7e:	095b      	lsrs	r3, r3, #5
 8004a80:	2264      	movs	r2, #100	@ 0x64
 8004a82:	fb02 f303 	mul.w	r3, r2, r3
 8004a86:	1acb      	subs	r3, r1, r3
 8004a88:	00db      	lsls	r3, r3, #3
 8004a8a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a8e:	4b36      	ldr	r3, [pc, #216]	@ (8004b68 <UART_SetConfig+0x2d4>)
 8004a90:	fba3 2302 	umull	r2, r3, r3, r2
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	005b      	lsls	r3, r3, #1
 8004a98:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a9c:	441c      	add	r4, r3
 8004a9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004aa8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004aac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004ab0:	4642      	mov	r2, r8
 8004ab2:	464b      	mov	r3, r9
 8004ab4:	1891      	adds	r1, r2, r2
 8004ab6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ab8:	415b      	adcs	r3, r3
 8004aba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004abc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ac0:	4641      	mov	r1, r8
 8004ac2:	1851      	adds	r1, r2, r1
 8004ac4:	6339      	str	r1, [r7, #48]	@ 0x30
 8004ac6:	4649      	mov	r1, r9
 8004ac8:	414b      	adcs	r3, r1
 8004aca:	637b      	str	r3, [r7, #52]	@ 0x34
 8004acc:	f04f 0200 	mov.w	r2, #0
 8004ad0:	f04f 0300 	mov.w	r3, #0
 8004ad4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004ad8:	4659      	mov	r1, fp
 8004ada:	00cb      	lsls	r3, r1, #3
 8004adc:	4651      	mov	r1, sl
 8004ade:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ae2:	4651      	mov	r1, sl
 8004ae4:	00ca      	lsls	r2, r1, #3
 8004ae6:	4610      	mov	r0, r2
 8004ae8:	4619      	mov	r1, r3
 8004aea:	4603      	mov	r3, r0
 8004aec:	4642      	mov	r2, r8
 8004aee:	189b      	adds	r3, r3, r2
 8004af0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004af4:	464b      	mov	r3, r9
 8004af6:	460a      	mov	r2, r1
 8004af8:	eb42 0303 	adc.w	r3, r2, r3
 8004afc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	2200      	movs	r2, #0
 8004b08:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004b0c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004b10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004b14:	460b      	mov	r3, r1
 8004b16:	18db      	adds	r3, r3, r3
 8004b18:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	eb42 0303 	adc.w	r3, r2, r3
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004b22:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004b26:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004b2a:	f7fb fbb1 	bl	8000290 <__aeabi_uldivmod>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4b0d      	ldr	r3, [pc, #52]	@ (8004b68 <UART_SetConfig+0x2d4>)
 8004b34:	fba3 1302 	umull	r1, r3, r3, r2
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	2164      	movs	r1, #100	@ 0x64
 8004b3c:	fb01 f303 	mul.w	r3, r1, r3
 8004b40:	1ad3      	subs	r3, r2, r3
 8004b42:	00db      	lsls	r3, r3, #3
 8004b44:	3332      	adds	r3, #50	@ 0x32
 8004b46:	4a08      	ldr	r2, [pc, #32]	@ (8004b68 <UART_SetConfig+0x2d4>)
 8004b48:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4c:	095b      	lsrs	r3, r3, #5
 8004b4e:	f003 0207 	and.w	r2, r3, #7
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4422      	add	r2, r4
 8004b5a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b5c:	e106      	b.n	8004d6c <UART_SetConfig+0x4d8>
 8004b5e:	bf00      	nop
 8004b60:	40011000 	.word	0x40011000
 8004b64:	40011400 	.word	0x40011400
 8004b68:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b70:	2200      	movs	r2, #0
 8004b72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b76:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b7a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b7e:	4642      	mov	r2, r8
 8004b80:	464b      	mov	r3, r9
 8004b82:	1891      	adds	r1, r2, r2
 8004b84:	6239      	str	r1, [r7, #32]
 8004b86:	415b      	adcs	r3, r3
 8004b88:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b8a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b8e:	4641      	mov	r1, r8
 8004b90:	1854      	adds	r4, r2, r1
 8004b92:	4649      	mov	r1, r9
 8004b94:	eb43 0501 	adc.w	r5, r3, r1
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	00eb      	lsls	r3, r5, #3
 8004ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ba6:	00e2      	lsls	r2, r4, #3
 8004ba8:	4614      	mov	r4, r2
 8004baa:	461d      	mov	r5, r3
 8004bac:	4643      	mov	r3, r8
 8004bae:	18e3      	adds	r3, r4, r3
 8004bb0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004bb4:	464b      	mov	r3, r9
 8004bb6:	eb45 0303 	adc.w	r3, r5, r3
 8004bba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004bca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004bce:	f04f 0200 	mov.w	r2, #0
 8004bd2:	f04f 0300 	mov.w	r3, #0
 8004bd6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004bda:	4629      	mov	r1, r5
 8004bdc:	008b      	lsls	r3, r1, #2
 8004bde:	4621      	mov	r1, r4
 8004be0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004be4:	4621      	mov	r1, r4
 8004be6:	008a      	lsls	r2, r1, #2
 8004be8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bec:	f7fb fb50 	bl	8000290 <__aeabi_uldivmod>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4b60      	ldr	r3, [pc, #384]	@ (8004d78 <UART_SetConfig+0x4e4>)
 8004bf6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bfa:	095b      	lsrs	r3, r3, #5
 8004bfc:	011c      	lsls	r4, r3, #4
 8004bfe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c02:	2200      	movs	r2, #0
 8004c04:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004c08:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004c0c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004c10:	4642      	mov	r2, r8
 8004c12:	464b      	mov	r3, r9
 8004c14:	1891      	adds	r1, r2, r2
 8004c16:	61b9      	str	r1, [r7, #24]
 8004c18:	415b      	adcs	r3, r3
 8004c1a:	61fb      	str	r3, [r7, #28]
 8004c1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c20:	4641      	mov	r1, r8
 8004c22:	1851      	adds	r1, r2, r1
 8004c24:	6139      	str	r1, [r7, #16]
 8004c26:	4649      	mov	r1, r9
 8004c28:	414b      	adcs	r3, r1
 8004c2a:	617b      	str	r3, [r7, #20]
 8004c2c:	f04f 0200 	mov.w	r2, #0
 8004c30:	f04f 0300 	mov.w	r3, #0
 8004c34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c38:	4659      	mov	r1, fp
 8004c3a:	00cb      	lsls	r3, r1, #3
 8004c3c:	4651      	mov	r1, sl
 8004c3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c42:	4651      	mov	r1, sl
 8004c44:	00ca      	lsls	r2, r1, #3
 8004c46:	4610      	mov	r0, r2
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	4642      	mov	r2, r8
 8004c4e:	189b      	adds	r3, r3, r2
 8004c50:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c54:	464b      	mov	r3, r9
 8004c56:	460a      	mov	r2, r1
 8004c58:	eb42 0303 	adc.w	r3, r2, r3
 8004c5c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	2200      	movs	r2, #0
 8004c68:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c6a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c6c:	f04f 0200 	mov.w	r2, #0
 8004c70:	f04f 0300 	mov.w	r3, #0
 8004c74:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c78:	4649      	mov	r1, r9
 8004c7a:	008b      	lsls	r3, r1, #2
 8004c7c:	4641      	mov	r1, r8
 8004c7e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c82:	4641      	mov	r1, r8
 8004c84:	008a      	lsls	r2, r1, #2
 8004c86:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c8a:	f7fb fb01 	bl	8000290 <__aeabi_uldivmod>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	460b      	mov	r3, r1
 8004c92:	4611      	mov	r1, r2
 8004c94:	4b38      	ldr	r3, [pc, #224]	@ (8004d78 <UART_SetConfig+0x4e4>)
 8004c96:	fba3 2301 	umull	r2, r3, r3, r1
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2264      	movs	r2, #100	@ 0x64
 8004c9e:	fb02 f303 	mul.w	r3, r2, r3
 8004ca2:	1acb      	subs	r3, r1, r3
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	3332      	adds	r3, #50	@ 0x32
 8004ca8:	4a33      	ldr	r2, [pc, #204]	@ (8004d78 <UART_SetConfig+0x4e4>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cb4:	441c      	add	r4, r3
 8004cb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cba:	2200      	movs	r2, #0
 8004cbc:	673b      	str	r3, [r7, #112]	@ 0x70
 8004cbe:	677a      	str	r2, [r7, #116]	@ 0x74
 8004cc0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004cc4:	4642      	mov	r2, r8
 8004cc6:	464b      	mov	r3, r9
 8004cc8:	1891      	adds	r1, r2, r2
 8004cca:	60b9      	str	r1, [r7, #8]
 8004ccc:	415b      	adcs	r3, r3
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004cd4:	4641      	mov	r1, r8
 8004cd6:	1851      	adds	r1, r2, r1
 8004cd8:	6039      	str	r1, [r7, #0]
 8004cda:	4649      	mov	r1, r9
 8004cdc:	414b      	adcs	r3, r1
 8004cde:	607b      	str	r3, [r7, #4]
 8004ce0:	f04f 0200 	mov.w	r2, #0
 8004ce4:	f04f 0300 	mov.w	r3, #0
 8004ce8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cec:	4659      	mov	r1, fp
 8004cee:	00cb      	lsls	r3, r1, #3
 8004cf0:	4651      	mov	r1, sl
 8004cf2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cf6:	4651      	mov	r1, sl
 8004cf8:	00ca      	lsls	r2, r1, #3
 8004cfa:	4610      	mov	r0, r2
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4642      	mov	r2, r8
 8004d02:	189b      	adds	r3, r3, r2
 8004d04:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004d06:	464b      	mov	r3, r9
 8004d08:	460a      	mov	r2, r1
 8004d0a:	eb42 0303 	adc.w	r3, r2, r3
 8004d0e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	663b      	str	r3, [r7, #96]	@ 0x60
 8004d1a:	667a      	str	r2, [r7, #100]	@ 0x64
 8004d1c:	f04f 0200 	mov.w	r2, #0
 8004d20:	f04f 0300 	mov.w	r3, #0
 8004d24:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004d28:	4649      	mov	r1, r9
 8004d2a:	008b      	lsls	r3, r1, #2
 8004d2c:	4641      	mov	r1, r8
 8004d2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d32:	4641      	mov	r1, r8
 8004d34:	008a      	lsls	r2, r1, #2
 8004d36:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d3a:	f7fb faa9 	bl	8000290 <__aeabi_uldivmod>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	460b      	mov	r3, r1
 8004d42:	4b0d      	ldr	r3, [pc, #52]	@ (8004d78 <UART_SetConfig+0x4e4>)
 8004d44:	fba3 1302 	umull	r1, r3, r3, r2
 8004d48:	095b      	lsrs	r3, r3, #5
 8004d4a:	2164      	movs	r1, #100	@ 0x64
 8004d4c:	fb01 f303 	mul.w	r3, r1, r3
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	011b      	lsls	r3, r3, #4
 8004d54:	3332      	adds	r3, #50	@ 0x32
 8004d56:	4a08      	ldr	r2, [pc, #32]	@ (8004d78 <UART_SetConfig+0x4e4>)
 8004d58:	fba2 2303 	umull	r2, r3, r2, r3
 8004d5c:	095b      	lsrs	r3, r3, #5
 8004d5e:	f003 020f 	and.w	r2, r3, #15
 8004d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	4422      	add	r2, r4
 8004d6a:	609a      	str	r2, [r3, #8]
}
 8004d6c:	bf00      	nop
 8004d6e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d72:	46bd      	mov	sp, r7
 8004d74:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d78:	51eb851f 	.word	0x51eb851f

08004d7c <siprintf>:
 8004d7c:	b40e      	push	{r1, r2, r3}
 8004d7e:	b500      	push	{lr}
 8004d80:	b09c      	sub	sp, #112	@ 0x70
 8004d82:	ab1d      	add	r3, sp, #116	@ 0x74
 8004d84:	9002      	str	r0, [sp, #8]
 8004d86:	9006      	str	r0, [sp, #24]
 8004d88:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8004d8c:	4809      	ldr	r0, [pc, #36]	@ (8004db4 <siprintf+0x38>)
 8004d8e:	9107      	str	r1, [sp, #28]
 8004d90:	9104      	str	r1, [sp, #16]
 8004d92:	4909      	ldr	r1, [pc, #36]	@ (8004db8 <siprintf+0x3c>)
 8004d94:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d98:	9105      	str	r1, [sp, #20]
 8004d9a:	6800      	ldr	r0, [r0, #0]
 8004d9c:	9301      	str	r3, [sp, #4]
 8004d9e:	a902      	add	r1, sp, #8
 8004da0:	f000 f9b4 	bl	800510c <_svfiprintf_r>
 8004da4:	9b02      	ldr	r3, [sp, #8]
 8004da6:	2200      	movs	r2, #0
 8004da8:	701a      	strb	r2, [r3, #0]
 8004daa:	b01c      	add	sp, #112	@ 0x70
 8004dac:	f85d eb04 	ldr.w	lr, [sp], #4
 8004db0:	b003      	add	sp, #12
 8004db2:	4770      	bx	lr
 8004db4:	2000000c 	.word	0x2000000c
 8004db8:	ffff0208 	.word	0xffff0208

08004dbc <memset>:
 8004dbc:	4402      	add	r2, r0
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	4293      	cmp	r3, r2
 8004dc2:	d100      	bne.n	8004dc6 <memset+0xa>
 8004dc4:	4770      	bx	lr
 8004dc6:	f803 1b01 	strb.w	r1, [r3], #1
 8004dca:	e7f9      	b.n	8004dc0 <memset+0x4>

08004dcc <strncmp>:
 8004dcc:	b510      	push	{r4, lr}
 8004dce:	b16a      	cbz	r2, 8004dec <strncmp+0x20>
 8004dd0:	3901      	subs	r1, #1
 8004dd2:	1884      	adds	r4, r0, r2
 8004dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004dd8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d103      	bne.n	8004de8 <strncmp+0x1c>
 8004de0:	42a0      	cmp	r0, r4
 8004de2:	d001      	beq.n	8004de8 <strncmp+0x1c>
 8004de4:	2a00      	cmp	r2, #0
 8004de6:	d1f5      	bne.n	8004dd4 <strncmp+0x8>
 8004de8:	1ad0      	subs	r0, r2, r3
 8004dea:	bd10      	pop	{r4, pc}
 8004dec:	4610      	mov	r0, r2
 8004dee:	e7fc      	b.n	8004dea <strncmp+0x1e>

08004df0 <__errno>:
 8004df0:	4b01      	ldr	r3, [pc, #4]	@ (8004df8 <__errno+0x8>)
 8004df2:	6818      	ldr	r0, [r3, #0]
 8004df4:	4770      	bx	lr
 8004df6:	bf00      	nop
 8004df8:	2000000c 	.word	0x2000000c

08004dfc <__libc_init_array>:
 8004dfc:	b570      	push	{r4, r5, r6, lr}
 8004dfe:	4d0d      	ldr	r5, [pc, #52]	@ (8004e34 <__libc_init_array+0x38>)
 8004e00:	4c0d      	ldr	r4, [pc, #52]	@ (8004e38 <__libc_init_array+0x3c>)
 8004e02:	1b64      	subs	r4, r4, r5
 8004e04:	10a4      	asrs	r4, r4, #2
 8004e06:	2600      	movs	r6, #0
 8004e08:	42a6      	cmp	r6, r4
 8004e0a:	d109      	bne.n	8004e20 <__libc_init_array+0x24>
 8004e0c:	4d0b      	ldr	r5, [pc, #44]	@ (8004e3c <__libc_init_array+0x40>)
 8004e0e:	4c0c      	ldr	r4, [pc, #48]	@ (8004e40 <__libc_init_array+0x44>)
 8004e10:	f000 fc66 	bl	80056e0 <_init>
 8004e14:	1b64      	subs	r4, r4, r5
 8004e16:	10a4      	asrs	r4, r4, #2
 8004e18:	2600      	movs	r6, #0
 8004e1a:	42a6      	cmp	r6, r4
 8004e1c:	d105      	bne.n	8004e2a <__libc_init_array+0x2e>
 8004e1e:	bd70      	pop	{r4, r5, r6, pc}
 8004e20:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e24:	4798      	blx	r3
 8004e26:	3601      	adds	r6, #1
 8004e28:	e7ee      	b.n	8004e08 <__libc_init_array+0xc>
 8004e2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2e:	4798      	blx	r3
 8004e30:	3601      	adds	r6, #1
 8004e32:	e7f2      	b.n	8004e1a <__libc_init_array+0x1e>
 8004e34:	080068dc 	.word	0x080068dc
 8004e38:	080068dc 	.word	0x080068dc
 8004e3c:	080068dc 	.word	0x080068dc
 8004e40:	080068e0 	.word	0x080068e0

08004e44 <__retarget_lock_acquire_recursive>:
 8004e44:	4770      	bx	lr

08004e46 <__retarget_lock_release_recursive>:
 8004e46:	4770      	bx	lr

08004e48 <memcpy>:
 8004e48:	440a      	add	r2, r1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e50:	d100      	bne.n	8004e54 <memcpy+0xc>
 8004e52:	4770      	bx	lr
 8004e54:	b510      	push	{r4, lr}
 8004e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e5a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e5e:	4291      	cmp	r1, r2
 8004e60:	d1f9      	bne.n	8004e56 <memcpy+0xe>
 8004e62:	bd10      	pop	{r4, pc}

08004e64 <_free_r>:
 8004e64:	b538      	push	{r3, r4, r5, lr}
 8004e66:	4605      	mov	r5, r0
 8004e68:	2900      	cmp	r1, #0
 8004e6a:	d041      	beq.n	8004ef0 <_free_r+0x8c>
 8004e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e70:	1f0c      	subs	r4, r1, #4
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	bfb8      	it	lt
 8004e76:	18e4      	addlt	r4, r4, r3
 8004e78:	f000 f8e0 	bl	800503c <__malloc_lock>
 8004e7c:	4a1d      	ldr	r2, [pc, #116]	@ (8004ef4 <_free_r+0x90>)
 8004e7e:	6813      	ldr	r3, [r2, #0]
 8004e80:	b933      	cbnz	r3, 8004e90 <_free_r+0x2c>
 8004e82:	6063      	str	r3, [r4, #4]
 8004e84:	6014      	str	r4, [r2, #0]
 8004e86:	4628      	mov	r0, r5
 8004e88:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e8c:	f000 b8dc 	b.w	8005048 <__malloc_unlock>
 8004e90:	42a3      	cmp	r3, r4
 8004e92:	d908      	bls.n	8004ea6 <_free_r+0x42>
 8004e94:	6820      	ldr	r0, [r4, #0]
 8004e96:	1821      	adds	r1, r4, r0
 8004e98:	428b      	cmp	r3, r1
 8004e9a:	bf01      	itttt	eq
 8004e9c:	6819      	ldreq	r1, [r3, #0]
 8004e9e:	685b      	ldreq	r3, [r3, #4]
 8004ea0:	1809      	addeq	r1, r1, r0
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	e7ed      	b.n	8004e82 <_free_r+0x1e>
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	b10b      	cbz	r3, 8004eb0 <_free_r+0x4c>
 8004eac:	42a3      	cmp	r3, r4
 8004eae:	d9fa      	bls.n	8004ea6 <_free_r+0x42>
 8004eb0:	6811      	ldr	r1, [r2, #0]
 8004eb2:	1850      	adds	r0, r2, r1
 8004eb4:	42a0      	cmp	r0, r4
 8004eb6:	d10b      	bne.n	8004ed0 <_free_r+0x6c>
 8004eb8:	6820      	ldr	r0, [r4, #0]
 8004eba:	4401      	add	r1, r0
 8004ebc:	1850      	adds	r0, r2, r1
 8004ebe:	4283      	cmp	r3, r0
 8004ec0:	6011      	str	r1, [r2, #0]
 8004ec2:	d1e0      	bne.n	8004e86 <_free_r+0x22>
 8004ec4:	6818      	ldr	r0, [r3, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	6053      	str	r3, [r2, #4]
 8004eca:	4408      	add	r0, r1
 8004ecc:	6010      	str	r0, [r2, #0]
 8004ece:	e7da      	b.n	8004e86 <_free_r+0x22>
 8004ed0:	d902      	bls.n	8004ed8 <_free_r+0x74>
 8004ed2:	230c      	movs	r3, #12
 8004ed4:	602b      	str	r3, [r5, #0]
 8004ed6:	e7d6      	b.n	8004e86 <_free_r+0x22>
 8004ed8:	6820      	ldr	r0, [r4, #0]
 8004eda:	1821      	adds	r1, r4, r0
 8004edc:	428b      	cmp	r3, r1
 8004ede:	bf04      	itt	eq
 8004ee0:	6819      	ldreq	r1, [r3, #0]
 8004ee2:	685b      	ldreq	r3, [r3, #4]
 8004ee4:	6063      	str	r3, [r4, #4]
 8004ee6:	bf04      	itt	eq
 8004ee8:	1809      	addeq	r1, r1, r0
 8004eea:	6021      	streq	r1, [r4, #0]
 8004eec:	6054      	str	r4, [r2, #4]
 8004eee:	e7ca      	b.n	8004e86 <_free_r+0x22>
 8004ef0:	bd38      	pop	{r3, r4, r5, pc}
 8004ef2:	bf00      	nop
 8004ef4:	200086b0 	.word	0x200086b0

08004ef8 <sbrk_aligned>:
 8004ef8:	b570      	push	{r4, r5, r6, lr}
 8004efa:	4e0f      	ldr	r6, [pc, #60]	@ (8004f38 <sbrk_aligned+0x40>)
 8004efc:	460c      	mov	r4, r1
 8004efe:	6831      	ldr	r1, [r6, #0]
 8004f00:	4605      	mov	r5, r0
 8004f02:	b911      	cbnz	r1, 8004f0a <sbrk_aligned+0x12>
 8004f04:	f000 fba6 	bl	8005654 <_sbrk_r>
 8004f08:	6030      	str	r0, [r6, #0]
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fba1 	bl	8005654 <_sbrk_r>
 8004f12:	1c43      	adds	r3, r0, #1
 8004f14:	d103      	bne.n	8004f1e <sbrk_aligned+0x26>
 8004f16:	f04f 34ff 	mov.w	r4, #4294967295
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	bd70      	pop	{r4, r5, r6, pc}
 8004f1e:	1cc4      	adds	r4, r0, #3
 8004f20:	f024 0403 	bic.w	r4, r4, #3
 8004f24:	42a0      	cmp	r0, r4
 8004f26:	d0f8      	beq.n	8004f1a <sbrk_aligned+0x22>
 8004f28:	1a21      	subs	r1, r4, r0
 8004f2a:	4628      	mov	r0, r5
 8004f2c:	f000 fb92 	bl	8005654 <_sbrk_r>
 8004f30:	3001      	adds	r0, #1
 8004f32:	d1f2      	bne.n	8004f1a <sbrk_aligned+0x22>
 8004f34:	e7ef      	b.n	8004f16 <sbrk_aligned+0x1e>
 8004f36:	bf00      	nop
 8004f38:	200086ac 	.word	0x200086ac

08004f3c <_malloc_r>:
 8004f3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f40:	1ccd      	adds	r5, r1, #3
 8004f42:	f025 0503 	bic.w	r5, r5, #3
 8004f46:	3508      	adds	r5, #8
 8004f48:	2d0c      	cmp	r5, #12
 8004f4a:	bf38      	it	cc
 8004f4c:	250c      	movcc	r5, #12
 8004f4e:	2d00      	cmp	r5, #0
 8004f50:	4606      	mov	r6, r0
 8004f52:	db01      	blt.n	8004f58 <_malloc_r+0x1c>
 8004f54:	42a9      	cmp	r1, r5
 8004f56:	d904      	bls.n	8004f62 <_malloc_r+0x26>
 8004f58:	230c      	movs	r3, #12
 8004f5a:	6033      	str	r3, [r6, #0]
 8004f5c:	2000      	movs	r0, #0
 8004f5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005038 <_malloc_r+0xfc>
 8004f66:	f000 f869 	bl	800503c <__malloc_lock>
 8004f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8004f6e:	461c      	mov	r4, r3
 8004f70:	bb44      	cbnz	r4, 8004fc4 <_malloc_r+0x88>
 8004f72:	4629      	mov	r1, r5
 8004f74:	4630      	mov	r0, r6
 8004f76:	f7ff ffbf 	bl	8004ef8 <sbrk_aligned>
 8004f7a:	1c43      	adds	r3, r0, #1
 8004f7c:	4604      	mov	r4, r0
 8004f7e:	d158      	bne.n	8005032 <_malloc_r+0xf6>
 8004f80:	f8d8 4000 	ldr.w	r4, [r8]
 8004f84:	4627      	mov	r7, r4
 8004f86:	2f00      	cmp	r7, #0
 8004f88:	d143      	bne.n	8005012 <_malloc_r+0xd6>
 8004f8a:	2c00      	cmp	r4, #0
 8004f8c:	d04b      	beq.n	8005026 <_malloc_r+0xea>
 8004f8e:	6823      	ldr	r3, [r4, #0]
 8004f90:	4639      	mov	r1, r7
 8004f92:	4630      	mov	r0, r6
 8004f94:	eb04 0903 	add.w	r9, r4, r3
 8004f98:	f000 fb5c 	bl	8005654 <_sbrk_r>
 8004f9c:	4581      	cmp	r9, r0
 8004f9e:	d142      	bne.n	8005026 <_malloc_r+0xea>
 8004fa0:	6821      	ldr	r1, [r4, #0]
 8004fa2:	1a6d      	subs	r5, r5, r1
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	4630      	mov	r0, r6
 8004fa8:	f7ff ffa6 	bl	8004ef8 <sbrk_aligned>
 8004fac:	3001      	adds	r0, #1
 8004fae:	d03a      	beq.n	8005026 <_malloc_r+0xea>
 8004fb0:	6823      	ldr	r3, [r4, #0]
 8004fb2:	442b      	add	r3, r5
 8004fb4:	6023      	str	r3, [r4, #0]
 8004fb6:	f8d8 3000 	ldr.w	r3, [r8]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	bb62      	cbnz	r2, 8005018 <_malloc_r+0xdc>
 8004fbe:	f8c8 7000 	str.w	r7, [r8]
 8004fc2:	e00f      	b.n	8004fe4 <_malloc_r+0xa8>
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	1b52      	subs	r2, r2, r5
 8004fc8:	d420      	bmi.n	800500c <_malloc_r+0xd0>
 8004fca:	2a0b      	cmp	r2, #11
 8004fcc:	d917      	bls.n	8004ffe <_malloc_r+0xc2>
 8004fce:	1961      	adds	r1, r4, r5
 8004fd0:	42a3      	cmp	r3, r4
 8004fd2:	6025      	str	r5, [r4, #0]
 8004fd4:	bf18      	it	ne
 8004fd6:	6059      	strne	r1, [r3, #4]
 8004fd8:	6863      	ldr	r3, [r4, #4]
 8004fda:	bf08      	it	eq
 8004fdc:	f8c8 1000 	streq.w	r1, [r8]
 8004fe0:	5162      	str	r2, [r4, r5]
 8004fe2:	604b      	str	r3, [r1, #4]
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	f000 f82f 	bl	8005048 <__malloc_unlock>
 8004fea:	f104 000b 	add.w	r0, r4, #11
 8004fee:	1d23      	adds	r3, r4, #4
 8004ff0:	f020 0007 	bic.w	r0, r0, #7
 8004ff4:	1ac2      	subs	r2, r0, r3
 8004ff6:	bf1c      	itt	ne
 8004ff8:	1a1b      	subne	r3, r3, r0
 8004ffa:	50a3      	strne	r3, [r4, r2]
 8004ffc:	e7af      	b.n	8004f5e <_malloc_r+0x22>
 8004ffe:	6862      	ldr	r2, [r4, #4]
 8005000:	42a3      	cmp	r3, r4
 8005002:	bf0c      	ite	eq
 8005004:	f8c8 2000 	streq.w	r2, [r8]
 8005008:	605a      	strne	r2, [r3, #4]
 800500a:	e7eb      	b.n	8004fe4 <_malloc_r+0xa8>
 800500c:	4623      	mov	r3, r4
 800500e:	6864      	ldr	r4, [r4, #4]
 8005010:	e7ae      	b.n	8004f70 <_malloc_r+0x34>
 8005012:	463c      	mov	r4, r7
 8005014:	687f      	ldr	r7, [r7, #4]
 8005016:	e7b6      	b.n	8004f86 <_malloc_r+0x4a>
 8005018:	461a      	mov	r2, r3
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	42a3      	cmp	r3, r4
 800501e:	d1fb      	bne.n	8005018 <_malloc_r+0xdc>
 8005020:	2300      	movs	r3, #0
 8005022:	6053      	str	r3, [r2, #4]
 8005024:	e7de      	b.n	8004fe4 <_malloc_r+0xa8>
 8005026:	230c      	movs	r3, #12
 8005028:	6033      	str	r3, [r6, #0]
 800502a:	4630      	mov	r0, r6
 800502c:	f000 f80c 	bl	8005048 <__malloc_unlock>
 8005030:	e794      	b.n	8004f5c <_malloc_r+0x20>
 8005032:	6005      	str	r5, [r0, #0]
 8005034:	e7d6      	b.n	8004fe4 <_malloc_r+0xa8>
 8005036:	bf00      	nop
 8005038:	200086b0 	.word	0x200086b0

0800503c <__malloc_lock>:
 800503c:	4801      	ldr	r0, [pc, #4]	@ (8005044 <__malloc_lock+0x8>)
 800503e:	f7ff bf01 	b.w	8004e44 <__retarget_lock_acquire_recursive>
 8005042:	bf00      	nop
 8005044:	200086a8 	.word	0x200086a8

08005048 <__malloc_unlock>:
 8005048:	4801      	ldr	r0, [pc, #4]	@ (8005050 <__malloc_unlock+0x8>)
 800504a:	f7ff befc 	b.w	8004e46 <__retarget_lock_release_recursive>
 800504e:	bf00      	nop
 8005050:	200086a8 	.word	0x200086a8

08005054 <__ssputs_r>:
 8005054:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005058:	688e      	ldr	r6, [r1, #8]
 800505a:	461f      	mov	r7, r3
 800505c:	42be      	cmp	r6, r7
 800505e:	680b      	ldr	r3, [r1, #0]
 8005060:	4682      	mov	sl, r0
 8005062:	460c      	mov	r4, r1
 8005064:	4690      	mov	r8, r2
 8005066:	d82d      	bhi.n	80050c4 <__ssputs_r+0x70>
 8005068:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800506c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005070:	d026      	beq.n	80050c0 <__ssputs_r+0x6c>
 8005072:	6965      	ldr	r5, [r4, #20]
 8005074:	6909      	ldr	r1, [r1, #16]
 8005076:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800507a:	eba3 0901 	sub.w	r9, r3, r1
 800507e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005082:	1c7b      	adds	r3, r7, #1
 8005084:	444b      	add	r3, r9
 8005086:	106d      	asrs	r5, r5, #1
 8005088:	429d      	cmp	r5, r3
 800508a:	bf38      	it	cc
 800508c:	461d      	movcc	r5, r3
 800508e:	0553      	lsls	r3, r2, #21
 8005090:	d527      	bpl.n	80050e2 <__ssputs_r+0x8e>
 8005092:	4629      	mov	r1, r5
 8005094:	f7ff ff52 	bl	8004f3c <_malloc_r>
 8005098:	4606      	mov	r6, r0
 800509a:	b360      	cbz	r0, 80050f6 <__ssputs_r+0xa2>
 800509c:	6921      	ldr	r1, [r4, #16]
 800509e:	464a      	mov	r2, r9
 80050a0:	f7ff fed2 	bl	8004e48 <memcpy>
 80050a4:	89a3      	ldrh	r3, [r4, #12]
 80050a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80050aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80050ae:	81a3      	strh	r3, [r4, #12]
 80050b0:	6126      	str	r6, [r4, #16]
 80050b2:	6165      	str	r5, [r4, #20]
 80050b4:	444e      	add	r6, r9
 80050b6:	eba5 0509 	sub.w	r5, r5, r9
 80050ba:	6026      	str	r6, [r4, #0]
 80050bc:	60a5      	str	r5, [r4, #8]
 80050be:	463e      	mov	r6, r7
 80050c0:	42be      	cmp	r6, r7
 80050c2:	d900      	bls.n	80050c6 <__ssputs_r+0x72>
 80050c4:	463e      	mov	r6, r7
 80050c6:	6820      	ldr	r0, [r4, #0]
 80050c8:	4632      	mov	r2, r6
 80050ca:	4641      	mov	r1, r8
 80050cc:	f000 faa8 	bl	8005620 <memmove>
 80050d0:	68a3      	ldr	r3, [r4, #8]
 80050d2:	1b9b      	subs	r3, r3, r6
 80050d4:	60a3      	str	r3, [r4, #8]
 80050d6:	6823      	ldr	r3, [r4, #0]
 80050d8:	4433      	add	r3, r6
 80050da:	6023      	str	r3, [r4, #0]
 80050dc:	2000      	movs	r0, #0
 80050de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e2:	462a      	mov	r2, r5
 80050e4:	f000 fac6 	bl	8005674 <_realloc_r>
 80050e8:	4606      	mov	r6, r0
 80050ea:	2800      	cmp	r0, #0
 80050ec:	d1e0      	bne.n	80050b0 <__ssputs_r+0x5c>
 80050ee:	6921      	ldr	r1, [r4, #16]
 80050f0:	4650      	mov	r0, sl
 80050f2:	f7ff feb7 	bl	8004e64 <_free_r>
 80050f6:	230c      	movs	r3, #12
 80050f8:	f8ca 3000 	str.w	r3, [sl]
 80050fc:	89a3      	ldrh	r3, [r4, #12]
 80050fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005102:	81a3      	strh	r3, [r4, #12]
 8005104:	f04f 30ff 	mov.w	r0, #4294967295
 8005108:	e7e9      	b.n	80050de <__ssputs_r+0x8a>
	...

0800510c <_svfiprintf_r>:
 800510c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005110:	4698      	mov	r8, r3
 8005112:	898b      	ldrh	r3, [r1, #12]
 8005114:	061b      	lsls	r3, r3, #24
 8005116:	b09d      	sub	sp, #116	@ 0x74
 8005118:	4607      	mov	r7, r0
 800511a:	460d      	mov	r5, r1
 800511c:	4614      	mov	r4, r2
 800511e:	d510      	bpl.n	8005142 <_svfiprintf_r+0x36>
 8005120:	690b      	ldr	r3, [r1, #16]
 8005122:	b973      	cbnz	r3, 8005142 <_svfiprintf_r+0x36>
 8005124:	2140      	movs	r1, #64	@ 0x40
 8005126:	f7ff ff09 	bl	8004f3c <_malloc_r>
 800512a:	6028      	str	r0, [r5, #0]
 800512c:	6128      	str	r0, [r5, #16]
 800512e:	b930      	cbnz	r0, 800513e <_svfiprintf_r+0x32>
 8005130:	230c      	movs	r3, #12
 8005132:	603b      	str	r3, [r7, #0]
 8005134:	f04f 30ff 	mov.w	r0, #4294967295
 8005138:	b01d      	add	sp, #116	@ 0x74
 800513a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800513e:	2340      	movs	r3, #64	@ 0x40
 8005140:	616b      	str	r3, [r5, #20]
 8005142:	2300      	movs	r3, #0
 8005144:	9309      	str	r3, [sp, #36]	@ 0x24
 8005146:	2320      	movs	r3, #32
 8005148:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800514c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005150:	2330      	movs	r3, #48	@ 0x30
 8005152:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80052f0 <_svfiprintf_r+0x1e4>
 8005156:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800515a:	f04f 0901 	mov.w	r9, #1
 800515e:	4623      	mov	r3, r4
 8005160:	469a      	mov	sl, r3
 8005162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005166:	b10a      	cbz	r2, 800516c <_svfiprintf_r+0x60>
 8005168:	2a25      	cmp	r2, #37	@ 0x25
 800516a:	d1f9      	bne.n	8005160 <_svfiprintf_r+0x54>
 800516c:	ebba 0b04 	subs.w	fp, sl, r4
 8005170:	d00b      	beq.n	800518a <_svfiprintf_r+0x7e>
 8005172:	465b      	mov	r3, fp
 8005174:	4622      	mov	r2, r4
 8005176:	4629      	mov	r1, r5
 8005178:	4638      	mov	r0, r7
 800517a:	f7ff ff6b 	bl	8005054 <__ssputs_r>
 800517e:	3001      	adds	r0, #1
 8005180:	f000 80a7 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005184:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005186:	445a      	add	r2, fp
 8005188:	9209      	str	r2, [sp, #36]	@ 0x24
 800518a:	f89a 3000 	ldrb.w	r3, [sl]
 800518e:	2b00      	cmp	r3, #0
 8005190:	f000 809f 	beq.w	80052d2 <_svfiprintf_r+0x1c6>
 8005194:	2300      	movs	r3, #0
 8005196:	f04f 32ff 	mov.w	r2, #4294967295
 800519a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800519e:	f10a 0a01 	add.w	sl, sl, #1
 80051a2:	9304      	str	r3, [sp, #16]
 80051a4:	9307      	str	r3, [sp, #28]
 80051a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80051aa:	931a      	str	r3, [sp, #104]	@ 0x68
 80051ac:	4654      	mov	r4, sl
 80051ae:	2205      	movs	r2, #5
 80051b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051b4:	484e      	ldr	r0, [pc, #312]	@ (80052f0 <_svfiprintf_r+0x1e4>)
 80051b6:	f7fb f81b 	bl	80001f0 <memchr>
 80051ba:	9a04      	ldr	r2, [sp, #16]
 80051bc:	b9d8      	cbnz	r0, 80051f6 <_svfiprintf_r+0xea>
 80051be:	06d0      	lsls	r0, r2, #27
 80051c0:	bf44      	itt	mi
 80051c2:	2320      	movmi	r3, #32
 80051c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051c8:	0711      	lsls	r1, r2, #28
 80051ca:	bf44      	itt	mi
 80051cc:	232b      	movmi	r3, #43	@ 0x2b
 80051ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80051d2:	f89a 3000 	ldrb.w	r3, [sl]
 80051d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80051d8:	d015      	beq.n	8005206 <_svfiprintf_r+0xfa>
 80051da:	9a07      	ldr	r2, [sp, #28]
 80051dc:	4654      	mov	r4, sl
 80051de:	2000      	movs	r0, #0
 80051e0:	f04f 0c0a 	mov.w	ip, #10
 80051e4:	4621      	mov	r1, r4
 80051e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ea:	3b30      	subs	r3, #48	@ 0x30
 80051ec:	2b09      	cmp	r3, #9
 80051ee:	d94b      	bls.n	8005288 <_svfiprintf_r+0x17c>
 80051f0:	b1b0      	cbz	r0, 8005220 <_svfiprintf_r+0x114>
 80051f2:	9207      	str	r2, [sp, #28]
 80051f4:	e014      	b.n	8005220 <_svfiprintf_r+0x114>
 80051f6:	eba0 0308 	sub.w	r3, r0, r8
 80051fa:	fa09 f303 	lsl.w	r3, r9, r3
 80051fe:	4313      	orrs	r3, r2
 8005200:	9304      	str	r3, [sp, #16]
 8005202:	46a2      	mov	sl, r4
 8005204:	e7d2      	b.n	80051ac <_svfiprintf_r+0xa0>
 8005206:	9b03      	ldr	r3, [sp, #12]
 8005208:	1d19      	adds	r1, r3, #4
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	9103      	str	r1, [sp, #12]
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfbb      	ittet	lt
 8005212:	425b      	neglt	r3, r3
 8005214:	f042 0202 	orrlt.w	r2, r2, #2
 8005218:	9307      	strge	r3, [sp, #28]
 800521a:	9307      	strlt	r3, [sp, #28]
 800521c:	bfb8      	it	lt
 800521e:	9204      	strlt	r2, [sp, #16]
 8005220:	7823      	ldrb	r3, [r4, #0]
 8005222:	2b2e      	cmp	r3, #46	@ 0x2e
 8005224:	d10a      	bne.n	800523c <_svfiprintf_r+0x130>
 8005226:	7863      	ldrb	r3, [r4, #1]
 8005228:	2b2a      	cmp	r3, #42	@ 0x2a
 800522a:	d132      	bne.n	8005292 <_svfiprintf_r+0x186>
 800522c:	9b03      	ldr	r3, [sp, #12]
 800522e:	1d1a      	adds	r2, r3, #4
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	9203      	str	r2, [sp, #12]
 8005234:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005238:	3402      	adds	r4, #2
 800523a:	9305      	str	r3, [sp, #20]
 800523c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005300 <_svfiprintf_r+0x1f4>
 8005240:	7821      	ldrb	r1, [r4, #0]
 8005242:	2203      	movs	r2, #3
 8005244:	4650      	mov	r0, sl
 8005246:	f7fa ffd3 	bl	80001f0 <memchr>
 800524a:	b138      	cbz	r0, 800525c <_svfiprintf_r+0x150>
 800524c:	9b04      	ldr	r3, [sp, #16]
 800524e:	eba0 000a 	sub.w	r0, r0, sl
 8005252:	2240      	movs	r2, #64	@ 0x40
 8005254:	4082      	lsls	r2, r0
 8005256:	4313      	orrs	r3, r2
 8005258:	3401      	adds	r4, #1
 800525a:	9304      	str	r3, [sp, #16]
 800525c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005260:	4824      	ldr	r0, [pc, #144]	@ (80052f4 <_svfiprintf_r+0x1e8>)
 8005262:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005266:	2206      	movs	r2, #6
 8005268:	f7fa ffc2 	bl	80001f0 <memchr>
 800526c:	2800      	cmp	r0, #0
 800526e:	d036      	beq.n	80052de <_svfiprintf_r+0x1d2>
 8005270:	4b21      	ldr	r3, [pc, #132]	@ (80052f8 <_svfiprintf_r+0x1ec>)
 8005272:	bb1b      	cbnz	r3, 80052bc <_svfiprintf_r+0x1b0>
 8005274:	9b03      	ldr	r3, [sp, #12]
 8005276:	3307      	adds	r3, #7
 8005278:	f023 0307 	bic.w	r3, r3, #7
 800527c:	3308      	adds	r3, #8
 800527e:	9303      	str	r3, [sp, #12]
 8005280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005282:	4433      	add	r3, r6
 8005284:	9309      	str	r3, [sp, #36]	@ 0x24
 8005286:	e76a      	b.n	800515e <_svfiprintf_r+0x52>
 8005288:	fb0c 3202 	mla	r2, ip, r2, r3
 800528c:	460c      	mov	r4, r1
 800528e:	2001      	movs	r0, #1
 8005290:	e7a8      	b.n	80051e4 <_svfiprintf_r+0xd8>
 8005292:	2300      	movs	r3, #0
 8005294:	3401      	adds	r4, #1
 8005296:	9305      	str	r3, [sp, #20]
 8005298:	4619      	mov	r1, r3
 800529a:	f04f 0c0a 	mov.w	ip, #10
 800529e:	4620      	mov	r0, r4
 80052a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052a4:	3a30      	subs	r2, #48	@ 0x30
 80052a6:	2a09      	cmp	r2, #9
 80052a8:	d903      	bls.n	80052b2 <_svfiprintf_r+0x1a6>
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d0c6      	beq.n	800523c <_svfiprintf_r+0x130>
 80052ae:	9105      	str	r1, [sp, #20]
 80052b0:	e7c4      	b.n	800523c <_svfiprintf_r+0x130>
 80052b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80052b6:	4604      	mov	r4, r0
 80052b8:	2301      	movs	r3, #1
 80052ba:	e7f0      	b.n	800529e <_svfiprintf_r+0x192>
 80052bc:	ab03      	add	r3, sp, #12
 80052be:	9300      	str	r3, [sp, #0]
 80052c0:	462a      	mov	r2, r5
 80052c2:	4b0e      	ldr	r3, [pc, #56]	@ (80052fc <_svfiprintf_r+0x1f0>)
 80052c4:	a904      	add	r1, sp, #16
 80052c6:	4638      	mov	r0, r7
 80052c8:	f3af 8000 	nop.w
 80052cc:	1c42      	adds	r2, r0, #1
 80052ce:	4606      	mov	r6, r0
 80052d0:	d1d6      	bne.n	8005280 <_svfiprintf_r+0x174>
 80052d2:	89ab      	ldrh	r3, [r5, #12]
 80052d4:	065b      	lsls	r3, r3, #25
 80052d6:	f53f af2d 	bmi.w	8005134 <_svfiprintf_r+0x28>
 80052da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80052dc:	e72c      	b.n	8005138 <_svfiprintf_r+0x2c>
 80052de:	ab03      	add	r3, sp, #12
 80052e0:	9300      	str	r3, [sp, #0]
 80052e2:	462a      	mov	r2, r5
 80052e4:	4b05      	ldr	r3, [pc, #20]	@ (80052fc <_svfiprintf_r+0x1f0>)
 80052e6:	a904      	add	r1, sp, #16
 80052e8:	4638      	mov	r0, r7
 80052ea:	f000 f879 	bl	80053e0 <_printf_i>
 80052ee:	e7ed      	b.n	80052cc <_svfiprintf_r+0x1c0>
 80052f0:	080068a0 	.word	0x080068a0
 80052f4:	080068aa 	.word	0x080068aa
 80052f8:	00000000 	.word	0x00000000
 80052fc:	08005055 	.word	0x08005055
 8005300:	080068a6 	.word	0x080068a6

08005304 <_printf_common>:
 8005304:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005308:	4616      	mov	r6, r2
 800530a:	4698      	mov	r8, r3
 800530c:	688a      	ldr	r2, [r1, #8]
 800530e:	690b      	ldr	r3, [r1, #16]
 8005310:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005314:	4293      	cmp	r3, r2
 8005316:	bfb8      	it	lt
 8005318:	4613      	movlt	r3, r2
 800531a:	6033      	str	r3, [r6, #0]
 800531c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005320:	4607      	mov	r7, r0
 8005322:	460c      	mov	r4, r1
 8005324:	b10a      	cbz	r2, 800532a <_printf_common+0x26>
 8005326:	3301      	adds	r3, #1
 8005328:	6033      	str	r3, [r6, #0]
 800532a:	6823      	ldr	r3, [r4, #0]
 800532c:	0699      	lsls	r1, r3, #26
 800532e:	bf42      	ittt	mi
 8005330:	6833      	ldrmi	r3, [r6, #0]
 8005332:	3302      	addmi	r3, #2
 8005334:	6033      	strmi	r3, [r6, #0]
 8005336:	6825      	ldr	r5, [r4, #0]
 8005338:	f015 0506 	ands.w	r5, r5, #6
 800533c:	d106      	bne.n	800534c <_printf_common+0x48>
 800533e:	f104 0a19 	add.w	sl, r4, #25
 8005342:	68e3      	ldr	r3, [r4, #12]
 8005344:	6832      	ldr	r2, [r6, #0]
 8005346:	1a9b      	subs	r3, r3, r2
 8005348:	42ab      	cmp	r3, r5
 800534a:	dc26      	bgt.n	800539a <_printf_common+0x96>
 800534c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005350:	6822      	ldr	r2, [r4, #0]
 8005352:	3b00      	subs	r3, #0
 8005354:	bf18      	it	ne
 8005356:	2301      	movne	r3, #1
 8005358:	0692      	lsls	r2, r2, #26
 800535a:	d42b      	bmi.n	80053b4 <_printf_common+0xb0>
 800535c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005360:	4641      	mov	r1, r8
 8005362:	4638      	mov	r0, r7
 8005364:	47c8      	blx	r9
 8005366:	3001      	adds	r0, #1
 8005368:	d01e      	beq.n	80053a8 <_printf_common+0xa4>
 800536a:	6823      	ldr	r3, [r4, #0]
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	f003 0306 	and.w	r3, r3, #6
 8005372:	2b04      	cmp	r3, #4
 8005374:	bf02      	ittt	eq
 8005376:	68e5      	ldreq	r5, [r4, #12]
 8005378:	6833      	ldreq	r3, [r6, #0]
 800537a:	1aed      	subeq	r5, r5, r3
 800537c:	68a3      	ldr	r3, [r4, #8]
 800537e:	bf0c      	ite	eq
 8005380:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005384:	2500      	movne	r5, #0
 8005386:	4293      	cmp	r3, r2
 8005388:	bfc4      	itt	gt
 800538a:	1a9b      	subgt	r3, r3, r2
 800538c:	18ed      	addgt	r5, r5, r3
 800538e:	2600      	movs	r6, #0
 8005390:	341a      	adds	r4, #26
 8005392:	42b5      	cmp	r5, r6
 8005394:	d11a      	bne.n	80053cc <_printf_common+0xc8>
 8005396:	2000      	movs	r0, #0
 8005398:	e008      	b.n	80053ac <_printf_common+0xa8>
 800539a:	2301      	movs	r3, #1
 800539c:	4652      	mov	r2, sl
 800539e:	4641      	mov	r1, r8
 80053a0:	4638      	mov	r0, r7
 80053a2:	47c8      	blx	r9
 80053a4:	3001      	adds	r0, #1
 80053a6:	d103      	bne.n	80053b0 <_printf_common+0xac>
 80053a8:	f04f 30ff 	mov.w	r0, #4294967295
 80053ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053b0:	3501      	adds	r5, #1
 80053b2:	e7c6      	b.n	8005342 <_printf_common+0x3e>
 80053b4:	18e1      	adds	r1, r4, r3
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	2030      	movs	r0, #48	@ 0x30
 80053ba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80053be:	4422      	add	r2, r4
 80053c0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80053c4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80053c8:	3302      	adds	r3, #2
 80053ca:	e7c7      	b.n	800535c <_printf_common+0x58>
 80053cc:	2301      	movs	r3, #1
 80053ce:	4622      	mov	r2, r4
 80053d0:	4641      	mov	r1, r8
 80053d2:	4638      	mov	r0, r7
 80053d4:	47c8      	blx	r9
 80053d6:	3001      	adds	r0, #1
 80053d8:	d0e6      	beq.n	80053a8 <_printf_common+0xa4>
 80053da:	3601      	adds	r6, #1
 80053dc:	e7d9      	b.n	8005392 <_printf_common+0x8e>
	...

080053e0 <_printf_i>:
 80053e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053e4:	7e0f      	ldrb	r7, [r1, #24]
 80053e6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80053e8:	2f78      	cmp	r7, #120	@ 0x78
 80053ea:	4691      	mov	r9, r2
 80053ec:	4680      	mov	r8, r0
 80053ee:	460c      	mov	r4, r1
 80053f0:	469a      	mov	sl, r3
 80053f2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80053f6:	d807      	bhi.n	8005408 <_printf_i+0x28>
 80053f8:	2f62      	cmp	r7, #98	@ 0x62
 80053fa:	d80a      	bhi.n	8005412 <_printf_i+0x32>
 80053fc:	2f00      	cmp	r7, #0
 80053fe:	f000 80d2 	beq.w	80055a6 <_printf_i+0x1c6>
 8005402:	2f58      	cmp	r7, #88	@ 0x58
 8005404:	f000 80b9 	beq.w	800557a <_printf_i+0x19a>
 8005408:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800540c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005410:	e03a      	b.n	8005488 <_printf_i+0xa8>
 8005412:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005416:	2b15      	cmp	r3, #21
 8005418:	d8f6      	bhi.n	8005408 <_printf_i+0x28>
 800541a:	a101      	add	r1, pc, #4	@ (adr r1, 8005420 <_printf_i+0x40>)
 800541c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005420:	08005479 	.word	0x08005479
 8005424:	0800548d 	.word	0x0800548d
 8005428:	08005409 	.word	0x08005409
 800542c:	08005409 	.word	0x08005409
 8005430:	08005409 	.word	0x08005409
 8005434:	08005409 	.word	0x08005409
 8005438:	0800548d 	.word	0x0800548d
 800543c:	08005409 	.word	0x08005409
 8005440:	08005409 	.word	0x08005409
 8005444:	08005409 	.word	0x08005409
 8005448:	08005409 	.word	0x08005409
 800544c:	0800558d 	.word	0x0800558d
 8005450:	080054b7 	.word	0x080054b7
 8005454:	08005547 	.word	0x08005547
 8005458:	08005409 	.word	0x08005409
 800545c:	08005409 	.word	0x08005409
 8005460:	080055af 	.word	0x080055af
 8005464:	08005409 	.word	0x08005409
 8005468:	080054b7 	.word	0x080054b7
 800546c:	08005409 	.word	0x08005409
 8005470:	08005409 	.word	0x08005409
 8005474:	0800554f 	.word	0x0800554f
 8005478:	6833      	ldr	r3, [r6, #0]
 800547a:	1d1a      	adds	r2, r3, #4
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	6032      	str	r2, [r6, #0]
 8005480:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005484:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005488:	2301      	movs	r3, #1
 800548a:	e09d      	b.n	80055c8 <_printf_i+0x1e8>
 800548c:	6833      	ldr	r3, [r6, #0]
 800548e:	6820      	ldr	r0, [r4, #0]
 8005490:	1d19      	adds	r1, r3, #4
 8005492:	6031      	str	r1, [r6, #0]
 8005494:	0606      	lsls	r6, r0, #24
 8005496:	d501      	bpl.n	800549c <_printf_i+0xbc>
 8005498:	681d      	ldr	r5, [r3, #0]
 800549a:	e003      	b.n	80054a4 <_printf_i+0xc4>
 800549c:	0645      	lsls	r5, r0, #25
 800549e:	d5fb      	bpl.n	8005498 <_printf_i+0xb8>
 80054a0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80054a4:	2d00      	cmp	r5, #0
 80054a6:	da03      	bge.n	80054b0 <_printf_i+0xd0>
 80054a8:	232d      	movs	r3, #45	@ 0x2d
 80054aa:	426d      	negs	r5, r5
 80054ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80054b0:	4859      	ldr	r0, [pc, #356]	@ (8005618 <_printf_i+0x238>)
 80054b2:	230a      	movs	r3, #10
 80054b4:	e011      	b.n	80054da <_printf_i+0xfa>
 80054b6:	6821      	ldr	r1, [r4, #0]
 80054b8:	6833      	ldr	r3, [r6, #0]
 80054ba:	0608      	lsls	r0, r1, #24
 80054bc:	f853 5b04 	ldr.w	r5, [r3], #4
 80054c0:	d402      	bmi.n	80054c8 <_printf_i+0xe8>
 80054c2:	0649      	lsls	r1, r1, #25
 80054c4:	bf48      	it	mi
 80054c6:	b2ad      	uxthmi	r5, r5
 80054c8:	2f6f      	cmp	r7, #111	@ 0x6f
 80054ca:	4853      	ldr	r0, [pc, #332]	@ (8005618 <_printf_i+0x238>)
 80054cc:	6033      	str	r3, [r6, #0]
 80054ce:	bf14      	ite	ne
 80054d0:	230a      	movne	r3, #10
 80054d2:	2308      	moveq	r3, #8
 80054d4:	2100      	movs	r1, #0
 80054d6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80054da:	6866      	ldr	r6, [r4, #4]
 80054dc:	60a6      	str	r6, [r4, #8]
 80054de:	2e00      	cmp	r6, #0
 80054e0:	bfa2      	ittt	ge
 80054e2:	6821      	ldrge	r1, [r4, #0]
 80054e4:	f021 0104 	bicge.w	r1, r1, #4
 80054e8:	6021      	strge	r1, [r4, #0]
 80054ea:	b90d      	cbnz	r5, 80054f0 <_printf_i+0x110>
 80054ec:	2e00      	cmp	r6, #0
 80054ee:	d04b      	beq.n	8005588 <_printf_i+0x1a8>
 80054f0:	4616      	mov	r6, r2
 80054f2:	fbb5 f1f3 	udiv	r1, r5, r3
 80054f6:	fb03 5711 	mls	r7, r3, r1, r5
 80054fa:	5dc7      	ldrb	r7, [r0, r7]
 80054fc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005500:	462f      	mov	r7, r5
 8005502:	42bb      	cmp	r3, r7
 8005504:	460d      	mov	r5, r1
 8005506:	d9f4      	bls.n	80054f2 <_printf_i+0x112>
 8005508:	2b08      	cmp	r3, #8
 800550a:	d10b      	bne.n	8005524 <_printf_i+0x144>
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	07df      	lsls	r7, r3, #31
 8005510:	d508      	bpl.n	8005524 <_printf_i+0x144>
 8005512:	6923      	ldr	r3, [r4, #16]
 8005514:	6861      	ldr	r1, [r4, #4]
 8005516:	4299      	cmp	r1, r3
 8005518:	bfde      	ittt	le
 800551a:	2330      	movle	r3, #48	@ 0x30
 800551c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005520:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005524:	1b92      	subs	r2, r2, r6
 8005526:	6122      	str	r2, [r4, #16]
 8005528:	f8cd a000 	str.w	sl, [sp]
 800552c:	464b      	mov	r3, r9
 800552e:	aa03      	add	r2, sp, #12
 8005530:	4621      	mov	r1, r4
 8005532:	4640      	mov	r0, r8
 8005534:	f7ff fee6 	bl	8005304 <_printf_common>
 8005538:	3001      	adds	r0, #1
 800553a:	d14a      	bne.n	80055d2 <_printf_i+0x1f2>
 800553c:	f04f 30ff 	mov.w	r0, #4294967295
 8005540:	b004      	add	sp, #16
 8005542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	f043 0320 	orr.w	r3, r3, #32
 800554c:	6023      	str	r3, [r4, #0]
 800554e:	4833      	ldr	r0, [pc, #204]	@ (800561c <_printf_i+0x23c>)
 8005550:	2778      	movs	r7, #120	@ 0x78
 8005552:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	6831      	ldr	r1, [r6, #0]
 800555a:	061f      	lsls	r7, r3, #24
 800555c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005560:	d402      	bmi.n	8005568 <_printf_i+0x188>
 8005562:	065f      	lsls	r7, r3, #25
 8005564:	bf48      	it	mi
 8005566:	b2ad      	uxthmi	r5, r5
 8005568:	6031      	str	r1, [r6, #0]
 800556a:	07d9      	lsls	r1, r3, #31
 800556c:	bf44      	itt	mi
 800556e:	f043 0320 	orrmi.w	r3, r3, #32
 8005572:	6023      	strmi	r3, [r4, #0]
 8005574:	b11d      	cbz	r5, 800557e <_printf_i+0x19e>
 8005576:	2310      	movs	r3, #16
 8005578:	e7ac      	b.n	80054d4 <_printf_i+0xf4>
 800557a:	4827      	ldr	r0, [pc, #156]	@ (8005618 <_printf_i+0x238>)
 800557c:	e7e9      	b.n	8005552 <_printf_i+0x172>
 800557e:	6823      	ldr	r3, [r4, #0]
 8005580:	f023 0320 	bic.w	r3, r3, #32
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	e7f6      	b.n	8005576 <_printf_i+0x196>
 8005588:	4616      	mov	r6, r2
 800558a:	e7bd      	b.n	8005508 <_printf_i+0x128>
 800558c:	6833      	ldr	r3, [r6, #0]
 800558e:	6825      	ldr	r5, [r4, #0]
 8005590:	6961      	ldr	r1, [r4, #20]
 8005592:	1d18      	adds	r0, r3, #4
 8005594:	6030      	str	r0, [r6, #0]
 8005596:	062e      	lsls	r6, r5, #24
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	d501      	bpl.n	80055a0 <_printf_i+0x1c0>
 800559c:	6019      	str	r1, [r3, #0]
 800559e:	e002      	b.n	80055a6 <_printf_i+0x1c6>
 80055a0:	0668      	lsls	r0, r5, #25
 80055a2:	d5fb      	bpl.n	800559c <_printf_i+0x1bc>
 80055a4:	8019      	strh	r1, [r3, #0]
 80055a6:	2300      	movs	r3, #0
 80055a8:	6123      	str	r3, [r4, #16]
 80055aa:	4616      	mov	r6, r2
 80055ac:	e7bc      	b.n	8005528 <_printf_i+0x148>
 80055ae:	6833      	ldr	r3, [r6, #0]
 80055b0:	1d1a      	adds	r2, r3, #4
 80055b2:	6032      	str	r2, [r6, #0]
 80055b4:	681e      	ldr	r6, [r3, #0]
 80055b6:	6862      	ldr	r2, [r4, #4]
 80055b8:	2100      	movs	r1, #0
 80055ba:	4630      	mov	r0, r6
 80055bc:	f7fa fe18 	bl	80001f0 <memchr>
 80055c0:	b108      	cbz	r0, 80055c6 <_printf_i+0x1e6>
 80055c2:	1b80      	subs	r0, r0, r6
 80055c4:	6060      	str	r0, [r4, #4]
 80055c6:	6863      	ldr	r3, [r4, #4]
 80055c8:	6123      	str	r3, [r4, #16]
 80055ca:	2300      	movs	r3, #0
 80055cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055d0:	e7aa      	b.n	8005528 <_printf_i+0x148>
 80055d2:	6923      	ldr	r3, [r4, #16]
 80055d4:	4632      	mov	r2, r6
 80055d6:	4649      	mov	r1, r9
 80055d8:	4640      	mov	r0, r8
 80055da:	47d0      	blx	sl
 80055dc:	3001      	adds	r0, #1
 80055de:	d0ad      	beq.n	800553c <_printf_i+0x15c>
 80055e0:	6823      	ldr	r3, [r4, #0]
 80055e2:	079b      	lsls	r3, r3, #30
 80055e4:	d413      	bmi.n	800560e <_printf_i+0x22e>
 80055e6:	68e0      	ldr	r0, [r4, #12]
 80055e8:	9b03      	ldr	r3, [sp, #12]
 80055ea:	4298      	cmp	r0, r3
 80055ec:	bfb8      	it	lt
 80055ee:	4618      	movlt	r0, r3
 80055f0:	e7a6      	b.n	8005540 <_printf_i+0x160>
 80055f2:	2301      	movs	r3, #1
 80055f4:	4632      	mov	r2, r6
 80055f6:	4649      	mov	r1, r9
 80055f8:	4640      	mov	r0, r8
 80055fa:	47d0      	blx	sl
 80055fc:	3001      	adds	r0, #1
 80055fe:	d09d      	beq.n	800553c <_printf_i+0x15c>
 8005600:	3501      	adds	r5, #1
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	9903      	ldr	r1, [sp, #12]
 8005606:	1a5b      	subs	r3, r3, r1
 8005608:	42ab      	cmp	r3, r5
 800560a:	dcf2      	bgt.n	80055f2 <_printf_i+0x212>
 800560c:	e7eb      	b.n	80055e6 <_printf_i+0x206>
 800560e:	2500      	movs	r5, #0
 8005610:	f104 0619 	add.w	r6, r4, #25
 8005614:	e7f5      	b.n	8005602 <_printf_i+0x222>
 8005616:	bf00      	nop
 8005618:	080068b1 	.word	0x080068b1
 800561c:	080068c2 	.word	0x080068c2

08005620 <memmove>:
 8005620:	4288      	cmp	r0, r1
 8005622:	b510      	push	{r4, lr}
 8005624:	eb01 0402 	add.w	r4, r1, r2
 8005628:	d902      	bls.n	8005630 <memmove+0x10>
 800562a:	4284      	cmp	r4, r0
 800562c:	4623      	mov	r3, r4
 800562e:	d807      	bhi.n	8005640 <memmove+0x20>
 8005630:	1e43      	subs	r3, r0, #1
 8005632:	42a1      	cmp	r1, r4
 8005634:	d008      	beq.n	8005648 <memmove+0x28>
 8005636:	f811 2b01 	ldrb.w	r2, [r1], #1
 800563a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800563e:	e7f8      	b.n	8005632 <memmove+0x12>
 8005640:	4402      	add	r2, r0
 8005642:	4601      	mov	r1, r0
 8005644:	428a      	cmp	r2, r1
 8005646:	d100      	bne.n	800564a <memmove+0x2a>
 8005648:	bd10      	pop	{r4, pc}
 800564a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800564e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005652:	e7f7      	b.n	8005644 <memmove+0x24>

08005654 <_sbrk_r>:
 8005654:	b538      	push	{r3, r4, r5, lr}
 8005656:	4d06      	ldr	r5, [pc, #24]	@ (8005670 <_sbrk_r+0x1c>)
 8005658:	2300      	movs	r3, #0
 800565a:	4604      	mov	r4, r0
 800565c:	4608      	mov	r0, r1
 800565e:	602b      	str	r3, [r5, #0]
 8005660:	f7fc ff02 	bl	8002468 <_sbrk>
 8005664:	1c43      	adds	r3, r0, #1
 8005666:	d102      	bne.n	800566e <_sbrk_r+0x1a>
 8005668:	682b      	ldr	r3, [r5, #0]
 800566a:	b103      	cbz	r3, 800566e <_sbrk_r+0x1a>
 800566c:	6023      	str	r3, [r4, #0]
 800566e:	bd38      	pop	{r3, r4, r5, pc}
 8005670:	200086a4 	.word	0x200086a4

08005674 <_realloc_r>:
 8005674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005678:	4680      	mov	r8, r0
 800567a:	4615      	mov	r5, r2
 800567c:	460c      	mov	r4, r1
 800567e:	b921      	cbnz	r1, 800568a <_realloc_r+0x16>
 8005680:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	4611      	mov	r1, r2
 8005686:	f7ff bc59 	b.w	8004f3c <_malloc_r>
 800568a:	b92a      	cbnz	r2, 8005698 <_realloc_r+0x24>
 800568c:	f7ff fbea 	bl	8004e64 <_free_r>
 8005690:	2400      	movs	r4, #0
 8005692:	4620      	mov	r0, r4
 8005694:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005698:	f000 f81a 	bl	80056d0 <_malloc_usable_size_r>
 800569c:	4285      	cmp	r5, r0
 800569e:	4606      	mov	r6, r0
 80056a0:	d802      	bhi.n	80056a8 <_realloc_r+0x34>
 80056a2:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80056a6:	d8f4      	bhi.n	8005692 <_realloc_r+0x1e>
 80056a8:	4629      	mov	r1, r5
 80056aa:	4640      	mov	r0, r8
 80056ac:	f7ff fc46 	bl	8004f3c <_malloc_r>
 80056b0:	4607      	mov	r7, r0
 80056b2:	2800      	cmp	r0, #0
 80056b4:	d0ec      	beq.n	8005690 <_realloc_r+0x1c>
 80056b6:	42b5      	cmp	r5, r6
 80056b8:	462a      	mov	r2, r5
 80056ba:	4621      	mov	r1, r4
 80056bc:	bf28      	it	cs
 80056be:	4632      	movcs	r2, r6
 80056c0:	f7ff fbc2 	bl	8004e48 <memcpy>
 80056c4:	4621      	mov	r1, r4
 80056c6:	4640      	mov	r0, r8
 80056c8:	f7ff fbcc 	bl	8004e64 <_free_r>
 80056cc:	463c      	mov	r4, r7
 80056ce:	e7e0      	b.n	8005692 <_realloc_r+0x1e>

080056d0 <_malloc_usable_size_r>:
 80056d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056d4:	1f18      	subs	r0, r3, #4
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	bfbc      	itt	lt
 80056da:	580b      	ldrlt	r3, [r1, r0]
 80056dc:	18c0      	addlt	r0, r0, r3
 80056de:	4770      	bx	lr

080056e0 <_init>:
 80056e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056e2:	bf00      	nop
 80056e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056e6:	bc08      	pop	{r3}
 80056e8:	469e      	mov	lr, r3
 80056ea:	4770      	bx	lr

080056ec <_fini>:
 80056ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ee:	bf00      	nop
 80056f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f2:	bc08      	pop	{r3}
 80056f4:	469e      	mov	lr, r3
 80056f6:	4770      	bx	lr
